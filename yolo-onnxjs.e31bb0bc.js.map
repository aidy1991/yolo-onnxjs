{"version":3,"sources":["node_modules/iota-array/iota.js","node_modules/is-buffer/index.js","node_modules/ndarray/ndarray.js","webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap","webpack:///lib/util.ts","webpack:///lib/tensor.ts","webpack:///lib/backends/webgl/glsl-source.ts","webpack:///lib/instrument.ts","webpack:///lib/wasm-binding.ts","webpack:///lib/backends/webgl/glsl-definitions.ts","webpack:///node_modules/protobufjs/src/util/minimal.js","webpack:///lib/operators.ts","webpack:///(webpack)/buildin/global.js","webpack:///node_modules/onnx-proto/dist/onnx.js","webpack:///lib/backends/webgl/ops/reshape.ts","webpack:///lib/opset.ts","webpack:///node_modules/buffer/index.js","webpack:///node_modules/long/src/long.js","webpack:///lib/ops/batch-normalization.ts","webpack:///lib/ops/binary-op.ts","webpack:///lib/ops/conv.ts","webpack:///lib/backends/cpu/ops/matmul.ts","webpack:///lib/ops/matmul.ts","webpack:///lib/ops/gemm.ts","webpack:///lib/ops/pool.ts","webpack:///lib/ops/softmax.ts","webpack:///lib/ops/sum.ts","webpack:///node_modules/process/browser.js","webpack:///lib/env.ts","webpack:///lib/api/index.ts","webpack:///lib/backends/cpu/op-resolve-rules.ts","webpack:///node_modules/protobufjs/src/writer.js","webpack:///node_modules/protobufjs/src/reader.js","webpack:///lib/ops/concat.ts","webpack:///lib/ops/dropout.ts","webpack:///lib/ops/flatten.ts","webpack:///lib/ops/gather.ts","webpack:///lib/ops/image-scaler.ts","webpack:///lib/ops/instance-normalization.ts","webpack:///lib/ops/reduce-op.ts","webpack:///lib/ops/reshape.ts","webpack:///lib/ops/slice.ts","webpack:///lib/ops/squeeze.ts","webpack:///lib/ops/tile.ts","webpack:///lib/ops/transpose.ts","webpack:///lib/backends/cpu/ops/unary-op.ts","webpack:///lib/ops/unary-op.ts","webpack:///lib/ops/unsqueeze.ts","webpack:///lib/ops/clip.ts","webpack:///lib/backends/webgl/utils.ts","webpack:///lib/api/tensor-impl.ts","webpack:///lib/api/tensor-impl-utils.ts","webpack:///lib/api/onnx-impl.ts","webpack:///lib/backends/backend-cpu.ts","webpack:///lib/backends/cpu/session-handler.ts","webpack:///lib/backends/cpu/inference-handler.ts","webpack:///lib/backends/cpu/ops/argMax.ts","webpack:///lib/ops/argMax.ts","webpack:///node_modules/base64-js/index.js","webpack:///node_modules/ieee754/index.js","webpack:///node_modules/isarray/index.js","webpack:///node_modules/protobufjs/minimal.js","webpack:///node_modules/protobufjs/src/index-minimal.js","webpack:///node_modules/@protobufjs/aspromise/index.js","webpack:///node_modules/@protobufjs/base64/index.js","webpack:///node_modules/@protobufjs/eventemitter/index.js","webpack:///node_modules/@protobufjs/float/index.js","webpack:///node_modules/@protobufjs/inquire/index.js","webpack:///node_modules/@protobufjs/utf8/index.js","webpack:///node_modules/@protobufjs/pool/index.js","webpack:///node_modules/protobufjs/src/util/longbits.js","webpack:///node_modules/protobufjs/src/writer_buffer.js","webpack:///node_modules/protobufjs/src/reader_buffer.js","webpack:///node_modules/protobufjs/src/rpc.js","webpack:///node_modules/protobufjs/src/rpc/service.js","webpack:///node_modules/protobufjs/src/roots.js","webpack:///lib/backends/cpu/ops/batch-normalization.ts","webpack:///lib/backends/cpu/ops/binary-op.ts","webpack:///lib/backends/cpu/ops/concat.ts","webpack:///lib/backends/cpu/ops/conv.ts","webpack:///lib/backends/cpu/ops/dropout.ts","webpack:///lib/backends/cpu/ops/flatten.ts","webpack:///lib/backends/cpu/ops/gather.ts","webpack:///lib/backends/cpu/ops/gemm.ts","webpack:///lib/backends/cpu/ops/image-scaler.ts","webpack:///lib/backends/cpu/ops/instance-normalization.ts","webpack:///lib/backends/cpu/ops/lrn.ts","webpack:///lib/ops/lrn.ts","webpack:///lib/backends/cpu/ops/pool.ts","webpack:///lib/backends/cpu/ops/reduce.ts","webpack:///lib/backends/cpu/ops/reshape.ts","webpack:///lib/backends/cpu/ops/slice.ts","webpack:///lib/backends/cpu/ops/softmax.ts","webpack:///lib/backends/cpu/ops/squeeze.ts","webpack:///lib/backends/cpu/ops/sum.ts","webpack:///lib/backends/cpu/ops/tile.ts","webpack:///lib/backends/cpu/ops/transpose.ts","webpack:///lib/backends/cpu/ops/unsqueeze.ts","webpack:///lib/backends/backend-wasm.ts","webpack:///lib/wasm-binding-core.ts","webpack:///dist/onnx-wasm.js","webpack:///node_modules/path-browserify/index.js","webpack:///lib/worker/worker-main.ts","webpack:///lib/backends/wasm/session-handler.ts","webpack:///lib/backends/wasm/inference-handler.ts","webpack:///lib/backends/wasm/op-resolve-rules.ts","webpack:///lib/backends/wasm/ops/batch-normalization.ts","webpack:///lib/backends/wasm/ops/binary-op.ts","webpack:///lib/backends/wasm/ops/clip.ts","webpack:///lib/backends/wasm/ops/conv.ts","webpack:///lib/backends/wasm/ops/gemm.ts","webpack:///lib/backends/wasm/ops/instance-normalization.ts","webpack:///lib/backends/wasm/ops/matmul.ts","webpack:///lib/backends/wasm/ops/pool.ts","webpack:///lib/backends/wasm/ops/softmax.ts","webpack:///lib/backends/wasm/ops/sum.ts","webpack:///lib/backends/backend-webgl.ts","webpack:///lib/backends/webgl/session-handler.ts","webpack:///lib/backends/webgl/inference-handler.ts","webpack:///lib/backends/webgl/ops/uint8-encode.ts","webpack:///lib/backends/webgl/op-resolve-rules.ts","webpack:///lib/backends/webgl/ops/batch-normalization.ts","webpack:///lib/backends/webgl/ops/binary-op.ts","webpack:///lib/backends/webgl/ops/clip.ts","webpack:///lib/backends/webgl/ops/concat.ts","webpack:///lib/backends/webgl/ops/conv.ts","webpack:///lib/backends/webgl/ops/dropout.ts","webpack:///lib/backends/webgl/ops/elu.ts","webpack:///lib/ops/elu.ts","webpack:///lib/backends/webgl/ops/flatten.ts","webpack:///lib/backends/webgl/ops/gather.ts","webpack:///lib/backends/webgl/ops/gemm.ts","webpack:///lib/backends/webgl/ops/image-scaler.ts","webpack:///lib/backends/webgl/ops/leaky-relu.ts","webpack:///lib/ops/leaky-relu.ts","webpack:///lib/backends/webgl/ops/matmul.ts","webpack:///lib/backends/webgl/ops/pad.ts","webpack:///lib/ops/pad.ts","webpack:///lib/backends/webgl/ops/pool.ts","webpack:///lib/backends/webgl/ops/reduce.ts","webpack:///lib/backends/webgl/ops/slice.ts","webpack:///lib/backends/webgl/ops/softmax.ts","webpack:///lib/backends/webgl/ops/split.ts","webpack:///lib/ops/split.ts","webpack:///lib/backends/webgl/ops/squeeze.ts","webpack:///lib/backends/webgl/ops/sum.ts","webpack:///lib/backends/webgl/ops/tile.ts","webpack:///lib/backends/webgl/ops/transpose.ts","webpack:///lib/backends/webgl/ops/unary-op.ts","webpack:///lib/backends/webgl/ops/unsqueeze.ts","webpack:///lib/backends/webgl/program-manager.ts","webpack:///node_modules/platform/platform.js","webpack:///(webpack)/buildin/module.js","webpack:///lib/backends/webgl/glsl-preprocessor.ts","webpack:///lib/backends/webgl/glsl-function-inliner.ts","webpack:///lib/backends/webgl/glsl-registered-libs.ts","webpack:///lib/backends/webgl/glsl-coordinate-lib.ts","webpack:///lib/backends/webgl/glsl-encoding-lib..ts","webpack:///lib/backends/webgl/glsl-fragcolor-lib.ts","webpack:///lib/backends/webgl/glsl-shape-utils-lib.ts","webpack:///lib/backends/webgl/glsl-vec-lib.ts","webpack:///lib/backends/webgl/texture-layout-strategy.ts","webpack:///lib/backends/webgl/texture-manager.ts","webpack:///lib/backends/webgl/webgl-context-factory.ts","webpack:///lib/backends/webgl/webgl-context.ts","webpack:///lib/backends/webgl/texture-data-encoder.ts","webpack:///lib/api/env-impl.ts","webpack:///lib/api/tensor.ts","webpack:///lib/api/inference-session.ts","webpack:///lib/api/inference-session-impl.ts","webpack:///lib/session.ts","webpack:///node_modules/node-libs-browser/node_modules/util/util.js","webpack:///node_modules/node-libs-browser/node_modules/util/support/isBufferBrowser.js","webpack:///node_modules/inherits/inherits_browser.js","webpack:///lib/backend.ts","webpack:///lib/execution-plan.ts","webpack:///lib/model.ts","webpack:///lib/graph.ts","webpack:///lib/attribute.ts","node_modules/core-js/modules/_global.js","node_modules/core-js/modules/_has.js","node_modules/core-js/modules/_fails.js","node_modules/core-js/modules/_descriptors.js","node_modules/core-js/modules/_core.js","node_modules/core-js/modules/_is-object.js","node_modules/core-js/modules/_an-object.js","node_modules/core-js/modules/_dom-create.js","node_modules/core-js/modules/_ie8-dom-define.js","node_modules/core-js/modules/_to-primitive.js","node_modules/core-js/modules/_object-dp.js","node_modules/core-js/modules/_property-desc.js","node_modules/core-js/modules/_hide.js","node_modules/core-js/modules/_uid.js","node_modules/core-js/modules/_library.js","node_modules/core-js/modules/_shared.js","node_modules/core-js/modules/_function-to-string.js","node_modules/core-js/modules/_redefine.js","node_modules/core-js/modules/_a-function.js","node_modules/core-js/modules/_ctx.js","node_modules/core-js/modules/_export.js","node_modules/core-js/modules/_meta.js","node_modules/core-js/modules/_wks.js","node_modules/core-js/modules/_set-to-string-tag.js","node_modules/core-js/modules/_wks-ext.js","node_modules/core-js/modules/_wks-define.js","node_modules/core-js/modules/_cof.js","node_modules/core-js/modules/_iobject.js","node_modules/core-js/modules/_defined.js","node_modules/core-js/modules/_to-iobject.js","node_modules/core-js/modules/_to-integer.js","node_modules/core-js/modules/_to-length.js","node_modules/core-js/modules/_to-absolute-index.js","node_modules/core-js/modules/_array-includes.js","node_modules/core-js/modules/_shared-key.js","node_modules/core-js/modules/_object-keys-internal.js","node_modules/core-js/modules/_enum-bug-keys.js","node_modules/core-js/modules/_object-keys.js","node_modules/core-js/modules/_object-gops.js","node_modules/core-js/modules/_object-pie.js","node_modules/core-js/modules/_enum-keys.js","node_modules/core-js/modules/_is-array.js","node_modules/core-js/modules/_to-object.js","node_modules/core-js/modules/_object-dps.js","node_modules/core-js/modules/_html.js","node_modules/core-js/modules/_object-create.js","node_modules/core-js/modules/_object-gopn.js","node_modules/core-js/modules/_object-gopn-ext.js","node_modules/core-js/modules/_object-gopd.js","node_modules/core-js/modules/es6.symbol.js","node_modules/core-js/modules/es6.object.create.js","node_modules/core-js/modules/es6.object.define-property.js","node_modules/core-js/modules/es6.object.define-properties.js","node_modules/core-js/modules/_object-sap.js","node_modules/core-js/modules/es6.object.get-own-property-descriptor.js","node_modules/core-js/modules/_object-gpo.js","node_modules/core-js/modules/es6.object.get-prototype-of.js","node_modules/core-js/modules/es6.object.keys.js","node_modules/core-js/modules/es6.object.get-own-property-names.js","node_modules/core-js/modules/es6.object.freeze.js","node_modules/core-js/modules/es6.object.seal.js","node_modules/core-js/modules/es6.object.prevent-extensions.js","node_modules/core-js/modules/es6.object.is-frozen.js","node_modules/core-js/modules/es6.object.is-sealed.js","node_modules/core-js/modules/es6.object.is-extensible.js","node_modules/core-js/modules/_object-assign.js","node_modules/core-js/modules/es6.object.assign.js","node_modules/core-js/modules/_same-value.js","node_modules/core-js/modules/es6.object.is.js","node_modules/core-js/modules/_set-proto.js","node_modules/core-js/modules/es6.object.set-prototype-of.js","node_modules/core-js/modules/_classof.js","node_modules/core-js/modules/es6.object.to-string.js","node_modules/core-js/modules/_invoke.js","node_modules/core-js/modules/_bind.js","node_modules/core-js/modules/es6.function.bind.js","node_modules/core-js/modules/es6.function.name.js","node_modules/core-js/modules/es6.function.has-instance.js","node_modules/core-js/modules/_string-ws.js","node_modules/core-js/modules/_string-trim.js","node_modules/core-js/modules/_parse-int.js","node_modules/core-js/modules/es6.parse-int.js","node_modules/core-js/modules/_parse-float.js","node_modules/core-js/modules/es6.parse-float.js","node_modules/core-js/modules/_inherit-if-required.js","node_modules/core-js/modules/es6.number.constructor.js","node_modules/core-js/modules/_a-number-value.js","node_modules/core-js/modules/_string-repeat.js","node_modules/core-js/modules/es6.number.to-fixed.js","node_modules/core-js/modules/es6.number.to-precision.js","node_modules/core-js/modules/es6.number.epsilon.js","node_modules/core-js/modules/es6.number.is-finite.js","node_modules/core-js/modules/_is-integer.js","node_modules/core-js/modules/es6.number.is-integer.js","node_modules/core-js/modules/es6.number.is-nan.js","node_modules/core-js/modules/es6.number.is-safe-integer.js","node_modules/core-js/modules/es6.number.max-safe-integer.js","node_modules/core-js/modules/es6.number.min-safe-integer.js","node_modules/core-js/modules/es6.number.parse-float.js","node_modules/core-js/modules/es6.number.parse-int.js","node_modules/core-js/modules/_math-log1p.js","node_modules/core-js/modules/es6.math.acosh.js","node_modules/core-js/modules/es6.math.asinh.js","node_modules/core-js/modules/es6.math.atanh.js","node_modules/core-js/modules/_math-sign.js","node_modules/core-js/modules/es6.math.cbrt.js","node_modules/core-js/modules/es6.math.clz32.js","node_modules/core-js/modules/es6.math.cosh.js","node_modules/core-js/modules/_math-expm1.js","node_modules/core-js/modules/es6.math.expm1.js","node_modules/core-js/modules/_math-fround.js","node_modules/core-js/modules/es6.math.fround.js","node_modules/core-js/modules/es6.math.hypot.js","node_modules/core-js/modules/es6.math.imul.js","node_modules/core-js/modules/es6.math.log10.js","node_modules/core-js/modules/es6.math.log1p.js","node_modules/core-js/modules/es6.math.log2.js","node_modules/core-js/modules/es6.math.sign.js","node_modules/core-js/modules/es6.math.sinh.js","node_modules/core-js/modules/es6.math.tanh.js","node_modules/core-js/modules/es6.math.trunc.js","node_modules/core-js/modules/es6.string.from-code-point.js","node_modules/core-js/modules/es6.string.raw.js","node_modules/core-js/modules/es6.string.trim.js","node_modules/core-js/modules/_string-at.js","node_modules/core-js/modules/_iterators.js","node_modules/core-js/modules/_iter-create.js","node_modules/core-js/modules/_iter-define.js","node_modules/core-js/modules/es6.string.iterator.js","node_modules/core-js/modules/es6.string.code-point-at.js","node_modules/core-js/modules/_is-regexp.js","node_modules/core-js/modules/_string-context.js","node_modules/core-js/modules/_fails-is-regexp.js","node_modules/core-js/modules/es6.string.ends-with.js","node_modules/core-js/modules/es6.string.includes.js","node_modules/core-js/modules/es6.string.repeat.js","node_modules/core-js/modules/es6.string.starts-with.js","node_modules/core-js/modules/_string-html.js","node_modules/core-js/modules/es6.string.anchor.js","node_modules/core-js/modules/es6.string.big.js","node_modules/core-js/modules/es6.string.blink.js","node_modules/core-js/modules/es6.string.bold.js","node_modules/core-js/modules/es6.string.fixed.js","node_modules/core-js/modules/es6.string.fontcolor.js","node_modules/core-js/modules/es6.string.fontsize.js","node_modules/core-js/modules/es6.string.italics.js","node_modules/core-js/modules/es6.string.link.js","node_modules/core-js/modules/es6.string.small.js","node_modules/core-js/modules/es6.string.strike.js","node_modules/core-js/modules/es6.string.sub.js","node_modules/core-js/modules/es6.string.sup.js","node_modules/core-js/modules/es6.date.now.js","node_modules/core-js/modules/es6.date.to-json.js","node_modules/core-js/modules/_date-to-iso-string.js","node_modules/core-js/modules/es6.date.to-iso-string.js","node_modules/core-js/modules/es6.date.to-string.js","node_modules/core-js/modules/_date-to-primitive.js","node_modules/core-js/modules/es6.date.to-primitive.js","node_modules/core-js/modules/es6.array.is-array.js","node_modules/core-js/modules/_iter-call.js","node_modules/core-js/modules/_is-array-iter.js","node_modules/core-js/modules/_create-property.js","node_modules/core-js/modules/core.get-iterator-method.js","node_modules/core-js/modules/_iter-detect.js","node_modules/core-js/modules/es6.array.from.js","node_modules/core-js/modules/es6.array.of.js","node_modules/core-js/modules/_strict-method.js","node_modules/core-js/modules/es6.array.join.js","node_modules/core-js/modules/es6.array.slice.js","node_modules/core-js/modules/es6.array.sort.js","node_modules/core-js/modules/_array-species-constructor.js","node_modules/core-js/modules/_array-species-create.js","node_modules/core-js/modules/_array-methods.js","node_modules/core-js/modules/es6.array.for-each.js","node_modules/core-js/modules/es6.array.map.js","node_modules/core-js/modules/es6.array.filter.js","node_modules/core-js/modules/es6.array.some.js","node_modules/core-js/modules/es6.array.every.js","node_modules/core-js/modules/_array-reduce.js","node_modules/core-js/modules/es6.array.reduce.js","node_modules/core-js/modules/es6.array.reduce-right.js","node_modules/core-js/modules/es6.array.index-of.js","node_modules/core-js/modules/es6.array.last-index-of.js","node_modules/core-js/modules/_array-copy-within.js","node_modules/core-js/modules/_add-to-unscopables.js","node_modules/core-js/modules/es6.array.copy-within.js","node_modules/core-js/modules/_array-fill.js","node_modules/core-js/modules/es6.array.fill.js","node_modules/core-js/modules/es6.array.find.js","node_modules/core-js/modules/es6.array.find-index.js","node_modules/core-js/modules/_set-species.js","node_modules/core-js/modules/es6.array.species.js","node_modules/core-js/modules/_iter-step.js","node_modules/core-js/modules/es6.array.iterator.js","node_modules/core-js/modules/_flags.js","node_modules/core-js/modules/es6.regexp.constructor.js","node_modules/core-js/modules/_regexp-exec.js","node_modules/core-js/modules/es6.regexp.exec.js","node_modules/core-js/modules/es6.regexp.flags.js","node_modules/core-js/modules/es6.regexp.to-string.js","node_modules/core-js/modules/_advance-string-index.js","node_modules/core-js/modules/_regexp-exec-abstract.js","node_modules/core-js/modules/_fix-re-wks.js","node_modules/core-js/modules/es6.regexp.match.js","node_modules/core-js/modules/es6.regexp.replace.js","node_modules/core-js/modules/es6.regexp.search.js","node_modules/core-js/modules/_species-constructor.js","node_modules/core-js/modules/es6.regexp.split.js","node_modules/core-js/modules/_an-instance.js","node_modules/core-js/modules/_for-of.js","node_modules/core-js/modules/_task.js","node_modules/core-js/modules/_microtask.js","node_modules/core-js/modules/_new-promise-capability.js","node_modules/core-js/modules/_perform.js","node_modules/core-js/modules/_user-agent.js","node_modules/core-js/modules/_promise-resolve.js","node_modules/core-js/modules/_redefine-all.js","node_modules/core-js/modules/es6.promise.js","node_modules/core-js/modules/_validate-collection.js","node_modules/core-js/modules/_collection-strong.js","node_modules/core-js/modules/_collection.js","node_modules/core-js/modules/es6.map.js","node_modules/core-js/modules/es6.set.js","node_modules/core-js/modules/_collection-weak.js","node_modules/core-js/modules/es6.weak-map.js","node_modules/core-js/modules/es6.weak-set.js","node_modules/core-js/modules/_typed.js","node_modules/core-js/modules/_to-index.js","node_modules/core-js/modules/_typed-buffer.js","node_modules/core-js/modules/es6.typed.array-buffer.js","node_modules/core-js/modules/es6.typed.data-view.js","node_modules/core-js/modules/_typed-array.js","node_modules/core-js/modules/es6.typed.int8-array.js","node_modules/core-js/modules/es6.typed.uint8-array.js","node_modules/core-js/modules/es6.typed.uint8-clamped-array.js","node_modules/core-js/modules/es6.typed.int16-array.js","node_modules/core-js/modules/es6.typed.uint16-array.js","node_modules/core-js/modules/es6.typed.int32-array.js","node_modules/core-js/modules/es6.typed.uint32-array.js","node_modules/core-js/modules/es6.typed.float32-array.js","node_modules/core-js/modules/es6.typed.float64-array.js","node_modules/core-js/modules/es6.reflect.apply.js","node_modules/core-js/modules/es6.reflect.construct.js","node_modules/core-js/modules/es6.reflect.define-property.js","node_modules/core-js/modules/es6.reflect.delete-property.js","node_modules/core-js/modules/es6.reflect.enumerate.js","node_modules/core-js/modules/es6.reflect.get.js","node_modules/core-js/modules/es6.reflect.get-own-property-descriptor.js","node_modules/core-js/modules/es6.reflect.get-prototype-of.js","node_modules/core-js/modules/es6.reflect.has.js","node_modules/core-js/modules/es6.reflect.is-extensible.js","node_modules/core-js/modules/_own-keys.js","node_modules/core-js/modules/es6.reflect.own-keys.js","node_modules/core-js/modules/es6.reflect.prevent-extensions.js","node_modules/core-js/modules/es6.reflect.set.js","node_modules/core-js/modules/es6.reflect.set-prototype-of.js","node_modules/core-js/modules/es7.array.includes.js","node_modules/core-js/modules/_flatten-into-array.js","node_modules/core-js/modules/es7.array.flat-map.js","node_modules/core-js/modules/es7.array.flatten.js","node_modules/core-js/modules/es7.string.at.js","node_modules/core-js/modules/_string-pad.js","node_modules/core-js/modules/es7.string.pad-start.js","node_modules/core-js/modules/es7.string.pad-end.js","node_modules/core-js/modules/es7.string.trim-left.js","node_modules/core-js/modules/es7.string.trim-right.js","node_modules/core-js/modules/es7.string.match-all.js","node_modules/core-js/modules/es7.symbol.async-iterator.js","node_modules/core-js/modules/es7.symbol.observable.js","node_modules/core-js/modules/es7.object.get-own-property-descriptors.js","node_modules/core-js/modules/_object-to-array.js","node_modules/core-js/modules/es7.object.values.js","node_modules/core-js/modules/es7.object.entries.js","node_modules/core-js/modules/_object-forced-pam.js","node_modules/core-js/modules/es7.object.define-getter.js","node_modules/core-js/modules/es7.object.define-setter.js","node_modules/core-js/modules/es7.object.lookup-getter.js","node_modules/core-js/modules/es7.object.lookup-setter.js","node_modules/core-js/modules/_array-from-iterable.js","node_modules/core-js/modules/_collection-to-json.js","node_modules/core-js/modules/es7.map.to-json.js","node_modules/core-js/modules/es7.set.to-json.js","node_modules/core-js/modules/_set-collection-of.js","node_modules/core-js/modules/es7.map.of.js","node_modules/core-js/modules/es7.set.of.js","node_modules/core-js/modules/es7.weak-map.of.js","node_modules/core-js/modules/es7.weak-set.of.js","node_modules/core-js/modules/_set-collection-from.js","node_modules/core-js/modules/es7.map.from.js","node_modules/core-js/modules/es7.set.from.js","node_modules/core-js/modules/es7.weak-map.from.js","node_modules/core-js/modules/es7.weak-set.from.js","node_modules/core-js/modules/es7.global.js","node_modules/core-js/modules/es7.system.global.js","node_modules/core-js/modules/es7.error.is-error.js","node_modules/core-js/modules/es7.math.clamp.js","node_modules/core-js/modules/es7.math.deg-per-rad.js","node_modules/core-js/modules/es7.math.degrees.js","node_modules/core-js/modules/_math-scale.js","node_modules/core-js/modules/es7.math.fscale.js","node_modules/core-js/modules/es7.math.iaddh.js","node_modules/core-js/modules/es7.math.isubh.js","node_modules/core-js/modules/es7.math.imulh.js","node_modules/core-js/modules/es7.math.rad-per-deg.js","node_modules/core-js/modules/es7.math.radians.js","node_modules/core-js/modules/es7.math.scale.js","node_modules/core-js/modules/es7.math.umulh.js","node_modules/core-js/modules/es7.math.signbit.js","node_modules/core-js/modules/es7.promise.finally.js","node_modules/core-js/modules/es7.promise.try.js","node_modules/core-js/modules/_metadata.js","node_modules/core-js/modules/es7.reflect.define-metadata.js","node_modules/core-js/modules/es7.reflect.delete-metadata.js","node_modules/core-js/modules/es7.reflect.get-metadata.js","node_modules/core-js/modules/es7.reflect.get-metadata-keys.js","node_modules/core-js/modules/es7.reflect.get-own-metadata.js","node_modules/core-js/modules/es7.reflect.get-own-metadata-keys.js","node_modules/core-js/modules/es7.reflect.has-metadata.js","node_modules/core-js/modules/es7.reflect.has-own-metadata.js","node_modules/core-js/modules/es7.reflect.metadata.js","node_modules/core-js/modules/es7.asap.js","node_modules/core-js/modules/es7.observable.js","node_modules/core-js/modules/web.timers.js","node_modules/core-js/modules/web.immediate.js","node_modules/core-js/modules/web.dom.iterable.js","node_modules/core-js/shim.js","node_modules/babel-polyfill/node_modules/regenerator-runtime/runtime.js","node_modules/core-js/modules/_replacer.js","node_modules/core-js/modules/core.regexp.escape.js","node_modules/core-js/fn/regexp/escape.js","node_modules/babel-polyfill/lib/index.js","index.js","node_modules/parcel-bundler/src/builtins/hmr-runtime.js"],"names":["root","factory","exports","module","define","amd","a","i","window","installedModules","__webpack_require__","moduleId","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","long_1","__importDefault","onnx_proto_1","tensor_1","checkInputsShape","inputs","expectedDimensions","_i","arguments","length","dims","MatMulUtil","preprocessInputShapes","dimsA","dimsB","postprocessOutputShape","outputShape","aRank","bRank","splice","pop","calcMatMulShape","b","undefined","BroadcastUtil","calcShape","adims","bdims","isMatMul","arank","brank","crank","Math","max","cdims","Array","cShapeMatMul","_a","__read","aLen","bLen","index","broadcastedIndices","originalShape","originalIndices","fillIndex","dimOffset","calc","op","inplace","resultType","ShapeUtil","areEqual","size","Tensor","type","set","outputIndices","originalIndicesA","originalIndicesB","valA","valB","isAScalar","isBScalar","rest","j","floor","isValidBroadcast","shape","finalShape","inputRank","finalRank","arrayCopyHelper","target","source","targetIndex","sourceIndex","blockSize","Error","offset","GemmUtil","getShapeOfGemmResult","leftShape","transLeft","rightShape","transRight","biasShape","M","K","N","kDim","ProtoUtil","tensorDataTypeFromProto","typeProto","onnx","TensorProto","DataType","INT8","UINT8","BOOL","INT16","UINT16","INT32","UINT32","FLOAT","DOUBLE","STRING","INT64","UINT64","tensorDimsFromProto","map","default","isLong","toNumber","tensorValueTypeFromProto","valueType","tensorType","elemType","dim","dimValue","LongUtil","longToNumber","getSizeFromDimensionRange","sizeFromDimension","axis","sizeToDimension","start","end","computeStrides","rank","strides","transpose","slice","reverse","indicesToOffset","indices","offsetToIndices","parseAxis","tensorRank","incrementIndex","axisToIncrementOn","k","calculateReshapedDims","originalDims","shapeHints","nDims","reshapedDims","unknownDimension","newTensorSize","oldTensorSize","sortBasedOnPerm","perm","v","padShape","pad","shape1","shape2","every","validateDimsAndCalcSize","TypeError","dims_1","__values","dims_1_1","next","done","Number","isInteger","flattenShape","total","reduce","x","y","right","squeezeShape","axes","outputDims","some","inSqueezeList","indexOf","push","unsqueezeShape","fill","inputDimsIterator","MathUtil","sqr","pow","axpy","alpha","powx","mul","SplitUtil","splitShape","split","numOutputs","determineSplit","shapes","offsets","numElementsAlongAxis","ReduceUtil","calcReduce","keepdims","op1","op2","forEach","ind","calcReduceShape","inputStrides","indicesY","calcReduceByAxis","numberData","data","dataId","input","curAxisInd","pos","res","step","keepDims","filter","PoolConvUtil","adjustPoolAttributes","isGlobalOperator","inputDims","kernelShape","pads","adjustPadsBasedOnAutoPad","dilations","autoPad","adjustPadAndReturnShape","computePoolOutputShape","computeShapeHelper","computeConvOutputShape","filterDims","inSize","stride","dilation","kernel","padHeadIndex","padTailIndex","dkernel","padNeeded","util_1","dataProvider","asyncDataProvider","cache","this","empty","RangeError","isArray","constructor","dataviewConstructor","buf","ArrayBuffer","sizeof","dataBuffer","createView","getData","_b","sent","_strides","fromProto","tensorProto","dataType","stringData","str","Buffer","from","buffer","byteOffset","byteLength","toString","rawData","dataDest","dataSource","DataView","elementSize","sizeofProto","length_1","readProto","array","floatData","int32Data","int64Data","doubleData","uint64Data","element","fromData","Uint8Array","Int8Array","Int16Array","Uint16Array","Int32Array","Uint32Array","Float32Array","Float64Array","greaterThanOrEqual","lessThan","view","getUint8","getInt8","getUint16","getInt16","getFloat32","getInt32","getUint32","fromBits","getFloat64","GLSL_ES_2_0","version","attribute","varyingVertex","varyingFrag","texture2D","output","outputDeclaration","GLSL_ES_3_0","getGlsl","getVertexShaderSource","glsl","getFragShaderPreamble","getDefaultFragShaderMain","outputShapeLength","NoOpLoggerProvider","log","severity","content","category","ConsoleLoggerProvider","console","color","SEVERITY_VALUE","verbose","info","warning","error","LOGGER_PROVIDER_MAP","LOGGER_DEFAULT_CONFIG","provider","minimalSeverity","logDateTime","logSourceLocation","LOGGER_CONFIG_MAP","arg0","arg1","arg2","arg3","logInternal","stack","config","Date","toISOString","reset","previousConfig","Logger","Event","startTime","endCallback","EventRecord","endTime","Profiler","maxNumberEvents","flushBatchSize","flushIntervalInMilliseconds","_started","_flushPointer","_maxNumberEvents","_flushBatchSize","_flushIntervalInMilliseconds","_timingEvents","_flushTime","now","stop","logOneEvent","event","func","begin","isPromise","res_1","then","Promise","resolve","reject","reason","_this","flush","e","toFixed","currentTime","previousPointer","performance","workers","WORKER_NUMBER","completeCallbacks","instrument_1","bindingCore","__importStar","initialized","initializing","init","numWorkers","initTimeout","waitForBindingInitTimeoutId","clearWaitForBindingInit","clearTimeout","onFulfilled","bindingInitTask","rejectAfterTimeOutPromise","setTimeout","Worker","workerInitTasks","workerId","workerInitTask","resolveWorkerInit","rejectWorkerInit","worker","onerror","onmessage","perfData","shift","race","all","err","WasmBinding","_super","__extends","getInstance","instance","ccallRemote","functionName","params","calculateOffsets","ccallSerialize","postMessage","perf","startTimeWorker","endTimeWorker","ccallDeserialize","FunctionType","GlslContext","glContext","programInfo","GlslLib","context","GlslLibRoutine","routineBody","dependencies","GlslLibRoutineNode","addDependency","node","TopologicalSortGlslRoutines","returnOrderedNodes","nodes","cycleCheck","Set","alreadyTraversed","result","createOrderedNodes","graphNodes","dfsTraverse","has","add","delete","global","util","merge","dst","src","ifNotSet","keys","newError","CustomError","message","properties","captureStackTrace","asPromise","base64","EventEmitter","float","inquire","utf8","pool","LongBits","self","emptyArray","freeze","emptyObject","isNode","Boolean","process","versions","isFinite","isString","String","isObject","isset","isSet","obj","prop","utf8Write","_Buffer_from","_Buffer_allocUnsafe","newBuffer","sizeOrArray","Long","dcodeIO","key2Re","key32Re","key64Re","longToHash","toHash","zeroHash","longFromHash","hash","unsigned","bits","fromHash","lo","hi","lcFirst","charAt","toLowerCase","substring","ProtocolError","oneOfGetter","fieldNames","fieldMap","oneOfSetter","toJSONOptions","longs","enums","bytes","json","_configure","encoding","allocUnsafe","NUMBER_TYPES","INT_TYPES","FLOAT_TYPES","g","Function","$protobuf","$Reader","Reader","$Writer","Writer","$util","$root","roots","valuesById","values","Version","AttributeProto","floats","ints","strings","tensors","graphs","refAttrName","docString","f","encode","writer","uint32","string","int64","fork","ldelim","GraphProto","int32","encodeDelimited","decode","reader","len","tag","end2","skipType","decodeDelimited","verify","low","high","fromObject","fromValue","parseInt","toObject","options","arrays","defaults","long","AttributeType","toJSON","ValueInfoProto","TypeProto","NodeProto","opType","domain","ModelProto","opsetImport","metadataProps","irVersion","producerName","producerVersion","modelVersion","graph","OperatorSetIdProto","StringStringEntryProto","TensorAnnotation","quantParameterTensorNames","tensorName","initializer","valueInfo","quantizationAnnotation","externalData","segment","dataLocation","Segment","double","uint64","DataLocation","TensorShapeProto","Dimension","$oneOfFields","dimParam","denotation","oneofs","reshape_1","utils_1","WebGLReshape","run","inferenceHandler","integerData","reshape","Reshape","inputTD","getOrCreateTextureData","packedShape","channels","getPackedShape","newTextureLayout","height","width","unpackedShape","createSharedTextureData","texture","tensor","matchSelector","selector","endsWith","rangeStart","isNaN","pair","rangeEnd","resolveOperator","opsets","rules","rules_1","rules_1_1","rule","versionSelector","opConstructor","opsets_1","e_2","opsets_1_1","opset","join","ieee754","kMaxLength","TYPED_ARRAY_SUPPORT","createBuffer","that","__proto__","arg","encodingOrOffset","fromArrayLike","fromArrayBuffer","isEncoding","actual","write","fromString","isBuffer","checked","copy","val","assertSize","isView","loweredCase","utf8ToBytes","base64ToBytes","swap","bidirectionalIndexOf","dir","arrayIndexOf","lastIndexOf","arr","indexSize","arrLength","valLength","read","readUInt16BE","foundIndex","found","hexWrite","remaining","strLen","parsed","substr","blitBuffer","asciiWrite","byteArray","charCodeAt","asciiToBytes","latin1Write","base64Write","ucs2Write","units","utf16leToBytes","base64Slice","fromByteArray","utf8Slice","min","secondByte","thirdByte","fourthByte","tempCodePoint","firstByte","codePoint","bytesPerSequence","codePoints","MAX_ARGUMENTS_LENGTH","fromCharCode","apply","decodeCodePointsArray","SlowBuffer","alloc","INSPECT_MAX_BYTES","foo","subarray","typedArraySupport","poolSize","_augment","species","configurable","allocUnsafeSlow","_isBuffer","compare","concat","list","swap16","swap32","swap64","hexSlice","asciiSlice","latin1Slice","utf16leSlice","equals","inspect","match","thisStart","thisEnd","thisCopy","targetCopy","includes","_arr","ret","out","toHex","checkOffset","ext","checkInt","objectWriteUInt16","littleEndian","objectWriteUInt32","checkIEEE754","writeFloat","noAssert","writeDouble","newBuf","sliceLen","readUIntLE","readUIntBE","readUInt8","readUInt16LE","readUInt32LE","readUInt32BE","readIntLE","readIntBE","readInt8","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","writeUIntLE","writeUIntBE","writeUInt8","writeUInt16LE","writeUInt16BE","writeUInt32LE","writeUInt32BE","writeIntLE","limit","sub","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","code","INVALID_BASE64_RE","Infinity","leadSurrogate","toByteArray","trim","replace","stringtrim","base64clean","wasm","WebAssembly","Instance","Module","__isLong__","INT_CACHE","UINT_CACHE","fromInt","cachedObj","fromNumber","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","MAX_VALUE","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","radix","radixToPower","power","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","eq","radixLong","div","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","other","notEquals","neq","ne","comp","lt","lessThanOrEqual","lte","le","greaterThan","gt","gte","ge","thisNeg","otherNeg","negate","not","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","div_u","div_s","toUnsigned","shru","shr","shl","log2","ceil","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","mod","and","or","xor","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toSigned","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","BatchNormalization","initialize","attributes","epsilon","getFloat","momentum","spatial","getInt","checkInputs","checkInputTypes","X","scale","B","mean","var_","BinaryOp","typeConstraint","Conv","getString","getInts","group","spatialRank","matmul_1","CpuMatMul","matMul","MatMul","mat2dShape","num2dMatrices","offsetY","indicesA","indicesB","offsetA","offsetB","matMul2d","A","C","transA","transB","beta","offsetC","mm","nn","sum","kk","matMul2d_tAtB","matMul2d_tA","matMul2d_tB","matMul2d_","Gemm","PoolBase","AveragePool","countIncludePad","ceilMode","GlobalAveragePool","MaxPool","storageOrder","GlobalMaxPool","Softmax","Sum","cachedSetTimeout","cachedClearTimeout","defaultSetTimout","defaultClearTimeout","runTimeout","fun","currentQueue","queue","draining","queueIndex","cleanUpNextTick","drainQueue","timeout","marker","runClearTimeout","Item","noop","nextTick","args","title","browser","env","argv","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","binding","cwd","chdir","umask","platform","EnvironmentImpl","backend","debug","onnxImpl","operators_1","argMax_1","batch_normalization_1","binary_op_1","concat_1","conv_1","dropout_1","flatten_1","gather_1","gemm_1","image_scaler_1","instance_normalization_1","lrn_1","pool_1","cpuReduce","slice_1","softmax_1","squeeze_1","sum_1","tile_1","transpose_1","unaryOps","unary_op_1","unsqueeze_1","CPU_OP_RESOLVE_RULES","CpuUnaryOp","abs","acos","acosh","CpuBinaryOp","e1","e2","CpuArgMax","asin","asinh","atan","atanh","CpuAveragePool","CpuBatchNormalization","clip","clipInitializer","CpuConcat","CpuConv","cos","cosh","CpuDropout","elu","eluInitializer","exp","CpuFlatten","CpuGather","CpuGemm","CpuGlobalAveragePool","CpuGlobalMaxPool","CpuImageScaler","CpuInstanceNormalization","isNan","leakyRelu","leakyReluInitializer","CpuLrn","CpuMaxPool","reciprocal","CpuReduceLogSum","CpuReduceMax","CpuReduceMean","CpuReduceMin","CpuReduceProd","CpuReduceSum","CpuReduceSumSquare","relu","CpuReshape","sigmoid","sign","sin","sinh","CpuSliceV10","CpuSlice","CpuSoftmax","sqrt","CpuSqueeze","CpuSum","tan","tanh","CpuTile","CpuTranspose","CpuUnsqueeze","BufferWriter","Op","fn","State","head","tail","states","writeByte","VarintOp","writeVarint64","writeFixed32","_push","sint32","sint64","zzEncode","bool","fixed32","sfixed32","fixed64","sfixed64","writeBytes","finish","BufferWriter_","BufferReader","indexOutOfRange","writeLength","create_array","readLongVarint","readFixed32_end","readFixed64","_slice","skip","wireType","BufferReader_","zzDecode","Concat","inputType","inputDimensionality","inputs_1","inputs_1_1","Dropout","ratio","testMode","Flatten","Gather","ImageScaler","bias","getFloats","InstanceNormalization","ReduceBase","Slice","starts","ends","SliceV10","Squeeze","Tile","Transpose","attributesInitializer","unaryOp","UnaryOp","Unsqueeze","Clip","Utils","inferredDims","internalTensor","indexArray","__spread","validateIndices","idx","matchElementType","tensor_impl_1","fromInternalTensor","toInternalTensor","indices_1","indices_1_1","backend_cpu_1","backend_wasm_1","backend_webgl_1","env_impl_1","__export","cpu","CpuBackend","WasmBackend","webgl","WebGLBackend","ENV","envImpl","session_handler_1","createSessionHandler","CpuSessionHandler","dispose","opset_1","inference_handler_1","op_resolve_rules_1","createInferenceHandler","CpuInferenceHandler","profiler","session","argMax","ArgMax","Y","b64","lens","getLens","validLen","placeHoldersLen","tmp","Arr","_byteLength","curByte","revLookup","uint8","extraBytes","parts","len2","encodeChunk","lookup","num","isLE","mLen","nBytes","eLen","eMax","eBias","nBits","NaN","rt","protobuf","configure","build","rpc","ctx","pending","s64","chunk","test","_listeners","evt","f32","f8b","writeFloat_f32_cpy","writeFloat_f32_rev","readFloat_f32_cpy","readFloat_f32_rev","writeFloat_ieee754","writeUint","round","exponent","readFloat_ieee754","readUint","uint","mantissa","writeUintLE","writeUintBE","readUintLE","readUintBE","f64","writeDouble_f64_cpy","writeDouble_f64_rev","readDouble_f64_cpy","readDouble_f64_rev","writeDouble_ieee754","off0","off1","readDouble_ieee754","moduleName","eval","c1","c2","SIZE","MAX","slab","zero","toLong","mask","part0","part1","part2","writeBytesBuffer","writeStringBuffer","Service","rpcImpl","requestDelimited","responseDelimited","rpcCall","method","requestCtor","responseCtor","request","callback","response","endedByRPC","batchNormalization","variance","inputDimensions","channelSize","scaleData","bData","meanData","varianceData","nc","opLambda","binaryOp","Util","input0","inputShape","concatAxisSize","dataNShape","dataN","axisIndex","axisPitch","outputBase","inputIndex","inputAxisPitch","inputData","inputSize","outputOffset","w","wDims","conv2d","W","input_num","input_channels","input_height","input_width","filter_num","filter_channels","filter_height","filter_width","filter_size","kernel_shape","output_num","output_channels","output_height","output_width","output_image_size","X_offset","Y_offset","W_offset","kernel_dim","col_buffer_data","image_id","X_image_offset","Y_image_offset","group_id","im2col","biasData","outputData","batchSize","outputChannels","dataSize","batch","channel","data_im","data_col","kernel_h","kernel_w","dilation_h","dilation_w","pad_t","pad_l","pad_b","pad_r","stride_h","stride_w","output_h","output_w","height_col","width_col","channels_col","w_offset","h_offset","c_im","h","h_pad","w_pad","nip","kh","kw","dst_offset","src_offset","iy","ix","dropout","isTestMode","flatten","gather","newDims","indicesData","dimsStrides","newDimsStrides","newLogicalIndex","oldLogicalIndex","oldOffset","gemm","imageScaler","H","hw","instanceNormalization","temp","physicalOffset","iterEnd","currentChannel","lrn","Lrn","tensorDataSize","paddedSquareData","alphaOverSize","prePad","scaleSliceStart","averagePool","globalAveragePool","maxPool","globalMaxPool","MIN_SAFE_INTEGER","startVal","processOp","finalOp","kernelSize","kernelStrides","stridesRank","outputSize","outputStride","curInd","startInd","isPad","reduce_op_1","reduceSum","reduceSumSquare","reduceLogSum","reduceMax","reduceMin","reduceMean","reduceProd","numItems","adjustedStarts","newDimsStride","oldDimsStride","softmax","axisCorrected","D","squeeze","tile","repeats","finalPerm","inpDim","numElementsInBlock","numAxesInPrefix","suffixBlocksize","prefixBlocksize","isSuffix","inpAxis","numAxes","targetDims","numBlocks","startTargetIndex","sourceOffset","doTransposeEltWise","sizeOffset","doTranspose","unsqueeze","wasmBinding","cpuFallback","checkIfNumWorkersIsValid","isWasmSupported","WasmSessionHandler","e_1","ptr8","numBytesAllocated","ccall","expandMemory","HEAPU8","startTimeFunc","endTimeFunc","ccallRaw","param","paramData","paramType","paramPass","heapU8","heap32","heapU32","heapF32","offset8","offset32","boolArray","int32Array","float32Array","minBytesRequired","_free","_malloc","_scriptDir","document","currentScript","moduleOverrides","status","toThrow","ENVIRONMENT_IS_NODE","ENVIRONMENT_IS_SHELL","ENVIRONMENT_IS_WEB","ENVIRONMENT_IS_WORKER","importScripts","nodeFS","nodePath","scriptDirectory","__dirname","filename","binary","assert","ex","ExitStatus","abort","readbuffer","scriptArgs","quit","location","href","url","xhr","XMLHttpRequest","open","send","responseText","responseType","onload","print","printErr","warn","asm2wasmImports","f64-rem","debugger","wasmMemory","tempRet0","setTempRet0","ABORT","condition","text","HEAP8","HEAP32","UTF8Decoder","TextDecoder","UTF8ArrayToString","u8Array","maxBytesToRead","endIdx","endPtr","u0","u1","u2","ch","UTF8ToString","ptr","alignUp","multiple","updateGlobalBufferViews","DYNAMICTOP_PTR","INITIAL_TOTAL_MEMORY","callRuntimeCallbacks","callbacks","Memory","initial","__ATPRERUN__","__ATINIT__","__ATMAIN__","__ATEXIT__","__ATPOSTRUN__","runtimeInitialized","runDependencies","runDependencyWatcher","dependenciesFulfilled","dataURIPrefix","isDataURI","startsWith","path","wasmBinaryFile","getBinary","createWasm","global.Math","asm2wasm","receiveInstance","id","clearInterval","removeRunDependency","receiveInstantiatedSource","instantiateArrayBuffer","receiver","fetch","credentials","catch","instantiate","instantiateStreaming","__ZSt18uncaught_exceptionv","uncaught_exception","___cxa_free_exception","providedBuffer","Table","maximum","EXCEPTIONS","last","caught","infos","deAdjust","adjusted","adj","addRef","refcount","decRef","rethrown","destructor","clearRef","SYSCALLS","buffers","printChar","stream","curr","varargs","getStr","get64","getZero","flush_NO_FILESYSTEM","fflush","_emscripten_get_heap_size","emscripten_realloc_buffer","oldSize","grow","_emscripten_resize_heap","requestedSize","newSize","replacement","asmLibraryArg","getTempRet0","___assert_fail","line","___cxa_allocate_exception","___cxa_find_matching_catch","thrown","throwntype","typeArray","___cxa_throw","___gxx_personality_v0","___lock","___resumeException","___setErrNo","___syscall140","which","getStreamFromFD","offset_low","whence","FS","llseek","position","getdents","ErrnoError","errno","___syscall146","iov","iovcnt","___syscall54","___syscall6","close","___unlock","_abort","_emscripten_memcpy_big","dest","_llvm_trap","abortOnCannotGrowMemory","tempDoublePtr","asm","doRun","cb","unshift","postRun","preRun","what","JSON","stringify","old","runCaller","normalizeArray","allowAboveRoot","up","splitPathRe","splitPath","exec","xs","resolvedPath","resolvedAbsolute","normalize","isAbsolute","trailingSlash","paths","relative","to","fromParts","toParts","samePartsLength","outputParts","sep","delimiter","dirname","basename","extname","op_resolve_rules_2","fallbackToCpuOps","opResolveRules","WASM_OP_RESOLVE_RULES","WasmInferenceHandler","clip_1","WasmBinaryOp","WasmAveragePool","WasmBatchNormalization","WasmClip","WasmConv","WasmGemm","WasmGlobalAveragePool","WasmGlobalMaxPool","WasmInstanceNormalization","WasmMatMul","WasmMaxPool","WasmSoftmax","WasmSum","wasm_binding_1","binaryOpType","numThreads","numFilterMaps","numWebWorkers","determineNumThreads","workerNumber","wDimsSp","wSizeSp","wDimsFinal","yDimsSp","ySizeSp","yDimsFinal","wArray","yArray","bArray","workerTasks","resultData","poolType","poolFunc","numChannels","xDimsSp","xSizeSp","xDimsFinal","webgl_context_factory_1","createWebGLContext","contextId","matmulMaxBatchSize","textureCacheMode","WebGLSessionHandler","program_manager_1","texture_layout_strategy_1","texture_manager_1","programManager","ProgramManager","layoutStrategy","AlwaysKeepOriginalSizeStrategy","maxTextureSize","textureManager","TextureManager","reuseTextures","textureDataCache","Map","WebGLInferenceHandler","onGraphInitialized","initializers","getValues","isInitializer","tensorId","getTextureData","setTextureData","textureData","clearActiveTextures","td","releaseTexture","WEBGL_OP_RESOLVE_RULES","uint8_encode_1","artifact","getArtifact","createProgramInfo","setArtifact","runData","createRunData","outputTextureData","layout","createTextureLayoutFromShape","createTextureData","createTextureDataFromLayout","createTextureDataFromLayoutBindTensor","usage","createTextureFromLayout","createTextureDataFromTexture","__assign","readTexture","getOrCreateTextureLayout","prefs","computeTextureWH","isFloat32DownloadSupported","uint8TD","WebGLUint8Encode","runInternal","readUint8TextureAsFloat","glsl_source_1","outputLayout","inputLayouts","samplers","shaderSource","hasMain","encoder","getEncoder","allocateTexture","inputTextureDatas","uniformData","binaryOps","elu_1","leaky_relu_1","pad_1","reduceOps","split_1","WebGLUnaryOp","glslAbs","glslAcos","WebGLBinaryOp","glslAdd","glslAnd","glslAsin","glslAtan","WebGLAveragePool","WebGLBatchNormalization","glslCeil","WebGLClip","WebGLConcat","WebGLConv","glslCos","glslDiv","WebGLDropout","glslEqual","WebGLElu","glslExp","WebGLFlatten","glslFloor","WebGLGather","WebGLGemm","WebGLGlobalAveragePool","WebGLGlobalMaxPool","glslGreater","glslIdentity","WebGLImageScaler","WebGLLeakyRelu","glslLess","glslLog","WebGLMatMul","WebGLMaxPool","glslMul","glslNeg","glslNot","glslOr","WebGLPad","glslPow","glslPRelu","WebGLReduceLogSum","WebGLReduceMax","WebGLReduceMean","WebGLReduceMin","WebGLReduceProd","WebGLReduceSum","WebGLReduceSumSquare","glslRelu","glslSigmoid","glslSin","WebGLSliceV10","WebGLSlice","WebGLSoftmax","WebGLSplit","outputs","glslSqrt","WebGLSqueeze","glslSub","WebGLSum","glslTan","glslTanh","WebGLTile","WebGLTranspose","WebGLUnsqueeze","glslXor","handler","inputTDs","outputTD","glsl_definitions_1","glslFunc","outputRank","aBcast","bBcast","shaderSource_1","body","ValueBased","fname","glslBuiltinBinary","getTextureIndexWhereDataResidesMethod","getTextureIndexWhereDataResidesLinearSearch","getTextureIndexWhereDataResidesBinarySearch","fetchDataFromCorrectTextureMethod","getValueFromArrayIndexMethod","variables","arrayLength","sizeInConcatAxis","previousSum","numberOfTensors","codeLines","arrayRank","readSize","artifacts","programInfos","createProgramInfos","runDatas","createRunDatas","xshape","kshape","calcOutputShape","im2colProgramInfo","createIm2ColProgramInfo","createDotProductProgramInfo","kTD","newKernelData","prepKernelForDotProduct","runtDataIm2Col","draw","gl","sharedDim","sharedDimReadSize","sharedDimOffsetLocation","uniformLocations","find","blend","k_1","enable","BLEND","checkError","blendEquation","FUNC_ADD","blendFunc","uniform1i","disable","im2colDims","calcIm2ColDims","breakAxis","im2colLayout","bLayout","adjustedKernelShape","kLayout","initValue","isBlendSupported","calcSharedDimReadSize","oldRowSize","newRowSize","rowbuf","newOffset","adjustPads","inputSpatialShape","outChannels","dilatedKernelShape","outputSpatialShape","preferredBatchSize","calcBlockSize","toExponential","Elu","indexDataShape","indexCopyOps","aShape","bShape","cShape","oShape","createGetBiasMethod","LeakyRelu","alayout","getPadFunction","Pad","inputLayout","block","getPadConstant","getPadReflect","getPadEdge","createAveragePoolProgramInfo","GeneratePoolingCode","createMaxPoolProgramInfo","sw","pwStart","pwEnd","dimW","codeW","codeH","codeHEnd","sh","phStart","phEnd","dimH","padsRank","offsetToIndicesFunction","copyInputDims","copyArray","copyPads","copyKernelStrides","cur","arrayName","WebGLGenericReduce","iRank","idxCopy","ops","getOps","idxZero","sliceOps","pi","createSoftMaxProgramInfo","maxElementPerLogicalRow","normalizationPerLogicalRow","textureWidth","textureHeight","createComputScaleProgramInfo","xlayout","createComputeMaxProgramInfo","computeMaxProgramInfo","computeScaleProgramInfo","count","getProgramCount","results","rundata","Split","sumLine","tileOps","getOutputShape","inputShapes","getAdjustedPerm","unpackedOutputShape","getPermFunctionBody","getPositionalFunction","Positional","reverseFunc","glslBuiltinUnary","env_1","glsl_preprocessor_1","repo","attributesBound","buildArtifact","program","useProgram","bindOutput","bindAttributes","attribLocations","bindUniforms","doDraw","vertexShader","deleteShader","deleteProgram","preprocessor","GlslPreprocessor","fragScript","preprocess","compile","getUniformLocations","getAttribLocations","fragShaderScript","vertexShaderScript","compileShader","VERTEX_SHADER","fragShader","FRAGMENT_SHADER","createProgram","attachFramebuffer","positionHandle","textureCoordHandle","textureCoord","setVertexAttributes","textures","texturePosition","uniformLocations_1","uniformLocations_1_1","name_1","location_1","bindTexture","uniform1fv","uniform1f","uniform1iv","uniformHandle","bindTextureToUniform","getAttribLocation","samplers_1","samplers_1_1","sampler","getUniformLocation","variables_1","variables_1_1","variable","reference","__WEBPACK_AMD_DEFINE_RESULT__","objectTypes","function","freeExports","freeModule","nodeType","freeGlobal","maxSafeInteger","reOpera","objectProto","capitalize","toUpperCase","format","forOwn","getClassOf","qualify","accumulator","each","parse","ua","isCustomContext","nav","navigator","userAgent","isSpecialCasedOS","likeChrome","airRuntimeClass","enviroClass","javaClass","java","phantomClass","rhino","environment","doc","opera","operamini","operaClass","arch","description","prerelease","useFeatures","label","pattern","guess","RegExp","guesses","getName","product","getProduct","manufacturer","getManufacturer","Apple","iPad","iPhone","iPod","Archos","Amazon","Kindle","Kindle Fire","Asus","Transformer","Barnes & Noble","Nook","BlackBerry","PlayBook","Google","Google TV","Nexus","HP","TouchPad","HTC","LG","Microsoft","Xbox","Xbox One","Motorola","Xoom","Nintendo","Wii U","Wii","Nokia","Lumia","Samsung","Galaxy S","Galaxy S2","Galaxy S3","Galaxy S4","Sony","PlayStation","PlayStation Vita","os","10.0","6.4","6.3","6.2","6.1","6.0","5.2","5.1","5.01","5.0","4.0","4.90","cleanupOS","getOS","parseFloat","runtime","flash","system","Capabilities","phantom","major","minor","patch","documentMode","lang","System","getProperty","require","electron","nw","appMinorVersion","external","architecture","family","cpuClass","webpackPolyfill","deprecate","children","glsl_function_inliner_1","glsl_registered_libs_1","libs","glslLibRoutineDependencyGraph","glslRegistry","lib","libName","routinesInLib","getFunctions","routine","currentNode","replaceInlines","getUniforms","getImports","script","routinesIncluded","selectGlslLibRoutinesToBeIncluded","routines","classAndRoutine","uniformLines","INLINE_FUNC_DEF_REGEX","FUNC_CALL_REGEX","inlineDefs","tokens","regexString","regex","declLine","newBody","paramRedecLine","glsl_coordinate_lib_1","glsl_encoding_lib_1","glsl_fragcolor_lib_1","glsl_shape_utils_lib_1","glsl_vec_lib_1","EncodingGlslLib","fragcolor","FragColorGlslLib","vec","VecGlslLib","shapeUtils","ShapeUtilsGlslLib","coordinates","CoordsGlslLib","offsetToCoords","coordsToOffset","toVec","valueFrom","getCustomTypes","xScale","yScale","stridesBlock","funcName","getValueFromSingle","varName","encodeFloat32","decodeFloat32","encodeUint8","endianness","isLittleEndian","decodeUint8","setFragColor","getColorAsFloat","bcastIndex","bcastMatmulIndex","incrementIndices","i_1","i_2","indexToOffsetSingle","offsetToIndicesSingle","shapeInit","i_3","binaryVecFunctions","copyVec","setVecItem","getVecItem","nameOp","assignmentBlock","wsize","hsize","totalSize","inUseTextures","idleTextures","textureLookup","textureDataType","toEncoderType","internalFormat","textureType","texture_1","updateTexture","toTextureData","toTensorData","deleteTexture","webgl_context_1","createNewWebGLContext","canvas","createElement","createCanvas","ca","depth","antialias","stencil","preserveDrawingBuffer","premultipliedAlpha","failIfMajorPerformanceCaveat","getContext","WebGLContext","webgl2","isContextLost","DEPTH_TEST","STENCIL_TEST","DITHER","POLYGON_OFFSET_FILL","SAMPLE_COVERAGE","SCISSOR_TEST","CULL_FACE","cullFace","BACK","DataEncoders","frameBufferBound","getExtensions","vertexbuffer","createVertexbuffer","framebuffer","createFramebuffer","queryVitalParameters","createTexture","TEXTURE_2D","texParameteri","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","texImage2D","texSubImage2D","bindFramebuffer","FRAMEBUFFER","framebufferTexture2D","COLOR_ATTACHMENT0","viewport","scissor","allocate","readPixels","RGBA","isFramebufferReady","getActiveTexture","getParameter","ACTIVE_TEXTURE","TEXTURE0","getTextureBinding","TEXTURE_BINDING_2D","getFramebufferBinding","FRAMEBUFFER_BINDING","vertexAttribPointer","enableVertexAttribArray","attachShader","linkProgram","shaderType","shader","createShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","activeTexture","drawArrays","TRIANGLE_STRIP","getError","RedFloat32DataEncoder","isRenderFloat32Supported","RGBAFloatDataEncoder","textureHalfFloatExtension","HALF_FLOAT_OES","Uint8DataEncoder","unit","maxTextureImageUnits","disposed","deleteFramebuffer","bindBuffer","ARRAY_BUFFER","deleteBuffer","ELEMENT_ARRAY_BUFFER","createDefaultGeometry","geometry","bufferData","STATIC_DRAW","fb","isFloatTextureAttachableToFrameBuffer","checkFloatTextureAttachableToFrameBuffer","checkRenderFloat32","checkFloat32Download","checkFloat32Blend","MAX_TEXTURE_SIZE","MAX_TEXTURE_IMAGE_UNITS","colorBufferFloatExtension","getExtension","textureFloatExtension","RGBA32F","frameBuffer","isComplete","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","fragmentShader","POINTS","NO_ERROR","R32F","RED","textureSize","ALPHA","UNSIGNED_BYTE","TensorImpl","InferenceSessionImpl","InferenceSession","session_1","tensorUtils","Session","loadModel","Blob","URL","createObjectURL","inputFeed","modelInputFeed_1","modelInputFeed_2","modelInputFeed","convertedOutput","startProfiling","endProfiling","fs_1","backend_1","execution_plan_1","model_1","_initialized","backendHint","graphInputTypes","graphInputDims","__awaiter","Backend","sessionHandler","_model","Model","promisify","readFile","arrayBuffer","modelProtoBlob","graphInitializer","transformGraph","load","initializeOps","_executionPlan","ExecutionPlan","_ops","inputTensors","normalizeAndValidateInputs","execute","outputTensors","createOutput","modelInputNames","getInputNames","sortedInputs","sortedInputsIndex","validateInputTensorDims","modelInputIndices","getInputIndices","modelValues","graphInput","validateInputTensorTypes","givenInputs","expectedType","actualType","noneDimSupported","expectedDims","actualDims","compareTensorDims","modelOutputNames","getOutputNames","getNodes","getOwnPropertyDescriptors","descriptors","getOwnPropertyDescriptor","formatRegExp","objects","_","isNull","msg","noDeprecation","warned","throwDeprecation","traceDeprecation","trace","debugEnviron","debugs","opts","seen","stylize","stylizeNoColor","colors","isBoolean","showHidden","_extend","isUndefined","customInspect","stylizeWithColor","formatValue","styleType","style","styles","recurseTimes","isFunction","primitive","simple","isNumber","formatPrimitive","visibleKeys","arrayToHash","getOwnPropertyNames","isError","formatError","isRegExp","isDate","base","braces","toUTCString","formatProperty","formatArray","prev","numLinesEst","reduceToSingleString","desc","ar","re","objectToString","debuglog","NODE_DEBUG","pid","bold","italic","underline","inverse","white","grey","black","blue","cyan","green","magenta","red","yellow","special","number","boolean","null","date","regexp","isNullOrUndefined","isSymbol","isPrimitive","months","time","getHours","getMinutes","getSeconds","getDate","getMonth","inherits","origin","kCustomPromisifiedSymbol","callbackifyOnRejected","newReason","original","writable","promiseResolve","promiseReject","promise","setPrototypeOf","getPrototypeOf","defineProperties","custom","callbackify","callbackified","maybeCb","rej","ctor","superCtor","super_","TempCtor","backendsCache","tryLoadBackend","backendObj","isBackend","disabled","hint","hints","hints_1","hints_1_1","KernelOp","_starter","resolved","_c","_values","modelInputs","graphInputs","sequence","graphValues","rear","thisOpIndex","thisOp","this_1","inputList","outputList","downstreamNodes","_d","currentDownstreamNodeIndex","currentDownstreamNode","_e","e_3","_f","getOutputIndices","outputIndex","thisValue","graph_1","modelProto","_opsets","_graph","Graph","attribute_1","graphProto","GraphImpl","Value","_from","_to","Node","_nodeProto","Attribute","executeNode","buildGraph","checkIsAcyclic","_allInputIndices","_allInputNames","_allOutputIndices","_allOutputNames","_allData","_nodes","dataIndices","nodesIndices","inputValueNames","_g","_h","currentIndex","_j","_k","_l","_m","_o","_p","nodeProto","pick","_q","e_5","_r","dataIndex","_s","e_6","_t","starters","nodesStack","nodesState","nodeIndex","outgoingEdgeIndex","downstreamNodeIndex","removeAllIdentityNodes","removeAllDropoutNodes","finalizeGraph","this_2","out_i_1","this_3","ind_1","out_i_2","deleteNode","inputValueIndex","outputValueIndex","nodesConsumingOutput","delIndex","nodesConsumingOutput_1","nodesConsumingOutput_1_1","nodeIndex_1","replaceIndex","_attributes","attributes_1","attributes_1_1","attr","getValue","getType","defaultValue","getTensor","getStrings","getTensors","valueAndType","INT","TENSOR","FLOATS","INTS","STRINGS","TENSORS","GRAPH","GRAPHS","getValueNoCheck","numberValue","maybeLong","utf8String","main","modelFile","video","getElementById","media","mediaDevices","getUserMedia","audio","srcObject","addEventListener","drawImage","runModel","imageData","getImageData","dataTensor","ndarray","dataProcessedTensor","assign","inputTensor","OVERLAY_ID","OldModule","bundle","hot","hotData","_acceptCallbacks","_disposeCallbacks","accept","checkedAssets","assetsToAccept","parent","isParcelRequire","WebSocket","hostname","protocol","ws","handled","assets","asset","isNew","didAccept","hmrAcceptCheck","parcelRequire","generated","js","clear","hmrApply","hmrAcceptRun","reload","onclose","removeErrorOverlay","overlay","createErrorOverlay","appendChild","remove","stackTrace","innerText","innerHTML","getParents","parents","dep","deps","cached"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrvVA,UAAAA,CAAA,EAAAC,CAAA,EAAAA;AACA,MAAA,YAAA,OAAAC,OAAA,IAAA,YAAA,OAAAC,MAAA,EACAA,MAAAA,CAAAD,OAAAC,GAAAF,CAAAA,EAAAE,CADA,KAEA,IAAA,cAAA,OAAAC,MAAA,IAAAA,MAAAA,CAAAC,GAAA,EACAD,MAAAA,CAAA,EAAAA,EAAAH,CAAAG,CAAAA,CADA,KAEA;AACA,QAAAE,CAAAA,GAAAL,CAAAA,EAAA;;AACA,SAAA,IAAAM,CAAA,IAAAD,CAAA,EAAAA,CAAA,YAAA,OAAAJ,OAAA,GAAAA,OAAA,GAAAF,CAAAM,EAAAC,CAAAD,IAAAA,CAAAA,CAAAC,CAAAD,CAAAA;AAAAC;AAPA,CAAA,CASCC,MATD,EASC,YAAA;AACD,SAAA,UAAA,CAAA,EAAA;ACTA,QAAAC,CAAAA,GAAA,EAAA;;AAGA,aAAAC,CAAA,CAAAC,CAAA,EAAAA;AAGA,UAAAF,CAAAA,CAAAE,CAAAF,CAAA,EACA,OAAAA,CAAAA,CAAAE,CAAAF,CAAAA,CAAAP,OAAA;AAGA,UAAAC,CAAAA,GAAAM,CAAAA,CAAAE,CAAAF,CAAAA,GAAA;AACAF,QAAAA,CAAAA,EAAAI,CADA;AAEAC,QAAAA,CAAAA,EAAAA,CAAA,CAFA;AAGAV,QAAAA,OAAAA,EAAA;AAHA,OAAA;AAaA,aANAW,CAAAA,CAAAF,CAAAE,CAAAA,CAAAC,IAAAD,CAAAV,CAAAA,CAAAD,OAAAW,EAAAV,CAAAU,EAAAV,CAAAA,CAAAD,OAAAW,EAAAH,CAAAG,GAGAV,CAAAA,CAAAS,CAAAT,GAAAS,CAAA,CAHAC,EAMAV,CAAAA,CAAAD,OAAA;AA0DA;;AAAA,WArDAQ,CAAAA,CAAAK,CAAAL,GAAAG,CAAAH,EAGAA,CAAAA,CAAAM,CAAAN,GAAAD,CAHAC,EAMAA,CAAAA,CAAAO,CAAAP,GAAA,UAAAR,CAAA,EAAAgB,CAAA,EAAAC,CAAA,EAAAA;AACAT,MAAAA,CAAAA,CAAAU,CAAAV,CAAAR,CAAAQ,EAAAQ,CAAAR,KACAW,MAAAA,CAAAC,cAAAD,CAAAnB,CAAAmB,EAAAH,CAAAG,EAAA;AAA0CE,QAAAA,UAAAA,EAAAA,CAAA,CAA1C;AAA0CC,QAAAA,GAAAA,EAAAL;AAA1C,OAAAE,CADAX;AAC0CS,KAR1CT,EAaAA,CAAAA,CAAAe,CAAAf,GAAA,UAAAR,CAAA,EAAAA;AACA,qBAAA,OAAAwB,MAAA,IAAAA,MAAAA,CAAAC,WAAA,IACAN,MAAAA,CAAAC,cAAAD,CAAAnB,CAAAmB,EAAAK,MAAAA,CAAAC,WAAAN,EAAA;AAAwDO,QAAAA,KAAAA,EAAA;AAAxD,OAAAP,CADA,EAGAA,MAAAA,CAAAC,cAAAD,CAAAnB,CAAAmB,EAAA,YAAAA,EAAA;AAAiDO,QAAAA,KAAAA,EAAAA,CAAA;AAAjD,OAAAP,CAHA;AAGiD,KAjBjDX,EAyBAA,CAAAA,CAAAmB,CAAAnB,GAAA,UAAAkB,CAAA,EAAAE,CAAA,EAAAA;AAEA,UADA,IAAAA,CAAA,KAAAF,CAAAA,GAAAlB,CAAAA,CAAAkB,CAAAlB,CAAA,GACA,IAAAoB,CAAA,EAAA,OAAAF,CAAA;AACA,UAAA,IAAAE,CAAA,IAAA,YAAA,OAAAF,CAAA,IAAAA,CAAA,IAAAA,CAAAA,CAAAG,UAAA,EAAA,OAAAH,CAAA;AACA,UAAAI,CAAAA,GAAAX,MAAAA,CAAAY,MAAAZ,CAAA,IAAAA,CAAA;AAGA,UAFAX,CAAAA,CAAAe,CAAAf,CAAAsB,CAAAtB,GACAW,MAAAA,CAAAC,cAAAD,CAAAW,CAAAX,EAAA,SAAAA,EAAA;AAAyCE,QAAAA,UAAAA,EAAAA,CAAA,CAAzC;AAAyCK,QAAAA,KAAAA,EAAAA;AAAzC,OAAAP,CADAX,EAEA,IAAAoB,CAAA,IAAA,YAAA,OAAAF,CAAA,EAAA,KAAA,IAAAM,CAAA,IAAAN,CAAA,EAAAlB,CAAAA,CAAAO,CAAAP,CAAAsB,CAAAtB,EAAAwB,CAAAxB,EAAA,UAAAwB,CAAA,EAAAA;AAAgH,eAAAN,CAAAA,CAAAM,CAAAN,CAAA;AAAAM,OAAhH,CAAqIC,IAArI,CAAqI,IAArI,EAAqID,CAArI,CAAAxB;AACA,aAAAsB,CAAA;AAAAA,KAjCAtB,EAqCAA,CAAAA,CAAA0B,CAAA1B,GAAA,UAAAP,CAAA,EAAAA;AACA,UAAAgB,CAAAA,GAAAhB,CAAAA,IAAAA,CAAAA,CAAA4B,UAAA5B,GACA,YAAA;AAA2B,eAAAA,CAAAA,CAAA,OAAA;AAAA,OAD3BA,GAEA,YAAA;AAAiC,eAAAA,CAAA;AAAAA,OAFjC;AAIA,aADAO,CAAAA,CAAAO,CAAAP,CAAAS,CAAAT,EAAA,GAAAA,EAAAS,CAAAT,GACAS,CAAA;AAAAA,KA1CAT,EA8CAA,CAAAA,CAAAU,CAAAV,GAAA,UAAA2B,CAAA,EAAAC,CAAA,EAAAA;AAAsD,aAAAjB,MAAAA,CAAAkB,SAAAlB,CAAAmB,cAAAnB,CAAAP,IAAAO,CAAAgB,CAAAhB,EAAAiB,CAAAjB,CAAA;AAAAiB,KA9CtD5B,EAiDAA,CAAAA,CAAA+B,CAAA/B,GAAA,EAjDAA,EAqDAA,CAAAA,CAAAA,CAAAA,CAAAgC,CAAAhC,GAAA,EAAAA,CAAA;AAAA,GDxEA,CCwEA,CAAA,UAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA;AAAA;;AAAA,QAAA,CAAA,GAAA,QAAA,KAAA,MAAA,IAAA,UAAA,CAAA,EAAA,CAAA,EAAA;AAAA,UAAA,CAAA,GAAA,cAAA,OAAA,MAAA,IAAA,CAAA,CAAA,MAAA,CAAA,QAAA,CAAA;AAAA,UAAA,CAAA,CAAA,EAAA,OAAA,CAAA;AAAA,UAAA,CAAA;AAAA,UAAA,CAAA;AAAA,UAAA,CAAA,GAAA,CAAA,CAAA,IAAA,CAAA,CAAA,CAAA;AAAA,UAAA,CAAA,GAAA,EAAA;;AAAA,UAAA;AAAA,eAAA,CAAA,KAAA,CAAA,KAAA,CAAA,IAAA,CAAA,KAAA,CAAA,KAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,IAAA,EAAA,EAAA,IAAA,GAAA,CAAA,CAAA,IAAA,CAAA,CAAA,CAAA,KAAA;AAAA,OAAA,CAAA,OAAA,CAAA,EAAA;AAAA,QAAA,CAAA,GAAA;AAAA,UAAA,KAAA,EAAA;AAAA,SAAA;AAAA,OAAA,SAAA;AAAA,YAAA;AAAA,UAAA,CAAA,IAAA,CAAA,CAAA,CAAA,IAAA,KAAA,CAAA,GAAA,CAAA,CAAA,MAAA,KAAA,CAAA,CAAA,IAAA,CAAA,CAAA,CAAA;AAAA,SAAA,SAAA;AAAA,cAAA,CAAA,EAAA,MAAA,CAAA,CAAA,KAAA;AAAA;AAAA;;AAAA,aAAA,CAAA;AAAA,KAAA;AAAA,QAAA,CAAA,GAAA,QAAA,KAAA,QAAA,IAAA,UAAA,CAAA,EAAA;AAAA,UAAA,CAAA,GAAA,cAAA,OAAA,MAAA,IAAA,CAAA,CAAA,MAAA,CAAA,QAAA,CAAA;AAAA,UAAA,CAAA,GAAA,CAAA;AAAA,aAAA,CAAA,GAAA,CAAA,CAAA,IAAA,CAAA,CAAA,CAAA,GAAA;AAAA,QAAA,IAAA,EAAA,YAAA;AAAA,iBAAA,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA,MAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA;AAAA,YAAA,KAAA,EAAA,CAAA,IAAA,CAAA,CAAA,CAAA,EAAA,CAAA;AAAA,YAAA,IAAA,EAAA,CAAA;AAAA,WAAA;AAAA;AAAA,OAAA;AAAA,KAAA;AAAA,QAAA,CAAA,GAAA,QAAA,KAAA,eAAA,IAAA,UAAA,CAAA,EAAA;AAAA,aAAA,CAAA,IAAA,CAAA,CAAA,UAAA,GAAA,CAAA,GAAA;AAAA,QAAA,OAAA,EAAA;AAAA,OAAA;AAAA,KAAA;;AAAA,IAAA,MAAA,CAAA,cAAA,CAAA,CAAA,EAAA,YAAA,EAAA;AAAA,MAAA,KAAA,EAAA,CAAA;AAAA,KAAA;AC/EA,QAAAiC,CAAAA,GAAAC,CAAAA,CAAAlC,CAAAA,CAAA,EAAAA,CAAAkC,CAAA;AAAA,QACAC,CAAAA,GAAAnC,CAAAA,CAAA,CAAAA,CADA;AAAA,QAIAoC,CAAAA,GAAApC,CAAAA,CAAA,CAAAA,CAJA;;AAUAR,IAAAA,CAAAA,CAAA6C,gBAAA7C,GAAA,UAAiC8C,CAAjC,EAAiCA;AAAAA,WAAkB,IAAAC,CAAAA,GAAA,EAAA,EAAAC,CAAAA,GAAA,CAAlBF,EAAkBE,CAAAA,GAAAC,SAAAA,CAAAC,MAAlBJ,EAAkBE,CAAAA,EAAlBF,EAAkBC,CAAAA,CAAAC,CAAAA,GAAA,CAAAD,CAAAA,GAAAE,SAAAA,CAAAD,CAAAC,CAAAF;;AACjD,UAAA,CAAKD,CAAL,IAAeA,CAAAA,CAAOI,MAAPJ,KAAkBC,CAAAA,CAAmBG,MAApD,EACE,OAAA,CAAO,CAAP;;AAEF,WAAK,IAAI7C,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAIyC,CAAAA,CAAOI,MAA3B,EAAmC7C,CAAAA,EAAnC,EACE,IAAA,CAAKyC,CAAAA,CAAOzC,CAAPyC,CAAAA,CAAUK,IAAf,IAAuBL,CAAAA,CAAOzC,CAAPyC,CAAAA,CAAUK,IAAVL,CAAeI,MAAfJ,KAA0BC,CAAAA,CAAmB1C,CAAnB0C,CAAjD,EACE,OAAA,CAAO,CAAP;;AAGJ,aAAA,CAAO,CAAP;AAAO,KATT/C;;AAYA,QAAAoD,CAAAA,GAAA,YAAA;AAAA,eAAAA,CAAA,GAAAA,CAkDA;;AAAA,aA3CSA,CAAAA,CAAAC,qBAAAD,GAAP,UAA6BE,CAA7B,EAA2DC,CAA3D,EAA2DA;AAYzD,eAAO,CAPqB,MAAjBD,CAAAA,CAAMJ,MAAW,GAAK,CAAC,CAAD,EAAII,CAAAA,CAAM,CAANA,CAAJ,CAAL,GAAqBA,CAO1C,EAFqB,MAAjBC,CAAAA,CAAML,MAAW,GAAK,CAACK,CAAAA,CAAM,CAANA,CAAD,EAAW,CAAX,CAAL,GAAqBA,CAE1C,CAAP;AAFiDA,OAV5CH,EAsBAA,CAAAA,CAAAI,sBAAAJ,GAAP,UAA8BK,CAA9B,EAAqDC,CAArD,EAAoEC,CAApE,EAAoEA;AAEpD,cAAVD,CAAU,IAEZD,CAAAA,CAAYG,MAAZH,CAAmBA,CAAAA,CAAYP,MAAZO,GAAqB,CAAxCA,EAA2C,CAA3CA,CAFY,EAKA,MAAVE,CAAU,IACZF,CAAAA,CAAYI,GAAZJ,EANY;AAMAI,OA9BTT,EAwCAA,CAAAA,CAAAU,eAAAV,GAAP,UAAuBhD,CAAvB,EAA4C2D,CAA5C,EAA4CA;AAC1C,eAAQ3D,CAAAA,CAAE,CAAFA,CAAAA,KAAS2D,CAAAA,CAAE,CAAFA,CAAT3D,GAAW,KAAM4D,CAAjB5D,GAA6B,CAACA,CAAAA,CAAE,CAAFA,CAAD,EAAO2D,CAAAA,CAAE,CAAFA,CAAP,CAArC;AAA8C,OAzCzCX,EA2CTA,CAAA;AAlDA,KAAA,EAAA;;AAAapD,IAAAA,CAAAA,CAAAoD,UAAApD,GAAAoD,CAAApD;;AAoDb,QAAAiE,CAAAA,GAAA,YAAA;AAAA,eAAAA,CAAA,GAAAA,CA4KA;;AAAA,aApKSA,CAAAA,CAAAC,SAAAD,GAAP,UAAiBE,CAAjB,EAA+CC,CAA/C,EAA6EC,CAA7E,EAA6EA;AAAAA,YAAAA,CAAAA;AAAAA,aAAA,CAAAA,KAAAA,CAAAA,KAAAA,CAAAA,GAAAA,CAAA,CAAAA;AAE3E,YAAMC,CAAAA,GAAQH,CAAAA,CAAMjB,MAApB;AAAA,YACMqB,CAAAA,GAAQH,CAAAA,CAAMlB,MADpB;AAEA,YAAc,MAAVoB,CAAJ,EACE,OAAOF,CAAP;AAEF,YAAc,MAAVG,CAAJ,EACE,OAAOJ,CAAP;AAEF,YAAMK,CAAAA,GAAQC,IAAAA,CAAKC,GAALD,CAASN,CAAAA,CAAMjB,MAAfuB,EAAuBL,CAAAA,CAAMlB,MAA7BuB,CAAd;AAAA,YACME,CAAAA,GAAQ,IAAIC,KAAJ,CAAkBJ,CAAlB,CADd;;AAIA,YAAIH,CAAJ,EAAc;AACZ,cAAIC,CAAAA,GAAQ,CAARA,IAAaC,CAAAA,GAAQ,CAAzB,EACE;AAEF,cAAMM,CAAAA,GACFzB,CAAAA,CAAWU,eAAXV,CAA2B,CAACe,CAAAA,CAAMG,CAAAA,GAAQ,CAAdH,CAAD,EAAmBA,CAAAA,CAAMG,CAAAA,GAAQ,CAAdH,CAAnB,CAA3Bf,EAAiE,CAACgB,CAAAA,CAAMG,CAAAA,GAAQ,CAAdH,CAAD,EAAmBA,CAAAA,CAAMG,CAAAA,GAAQ,CAAdH,CAAnB,CAAjEhB,CADJ;AAEA,cAAA,KAAqBY,CAArB,KAAIa,CAAJ,EACE;AAEFC,UAAAA,CAAAA,GAAAC,CAAAA,CAAAF,CAAAE,EAAA,CAAAA,CAAAD,EAACH,CAAAA,CAAAH,CAAAA,GAAA,CAAAG,CAAAA,GAAAG,CAAAA,CAAA,CAAAA,CAADA,EAAmBH,CAAAA,CAAAH,CAAAA,GAAA,CAAAG,CAAAA,GAAAG,CAAAA,CAAA,CAAAA,CAAnBA;AAGF;;AAAA,aAAK,IAAIzE,CAAAA,GAAIgE,CAAAA,GAAW,CAAXA,GAAe,CAA5B,EAA+BhE,CAAAA,IAAKmE,CAApC,EAA2CnE,CAAAA,EAA3C,EAAgD;AAC9C,cAAM2E,CAAAA,GAAOV,CAAAA,GAAQjE,CAARiE,GAAY,CAAZA,GAAgB,CAAhBA,GAAoBH,CAAAA,CAAMG,CAAAA,GAAQjE,CAAd8D,CAAjC;AAAA,cACMc,CAAAA,GAAOV,CAAAA,GAAQlE,CAARkE,GAAY,CAAZA,GAAgB,CAAhBA,GAAoBH,CAAAA,CAAMG,CAAAA,GAAQlE,CAAd+D,CADjC;AAGA,cAAIY,CAAAA,KAASC,CAATD,IAAiBA,CAAAA,GAAO,CAAxBA,IAA6BC,CAAAA,GAAO,CAAxC,EACE;AAEFN,UAAAA,CAAAA,CAAMH,CAAAA,GAAQnE,CAAdsE,CAAAA,GAAmBF,IAAAA,CAAKC,GAALD,CAASO,CAATP,EAAeQ,CAAfR,CAAnBE;AAGF;;AAAA,eAAOA,CAAP;AAAOA,OApCFV,EA6CAA,CAAAA,CAAAiB,KAAAjB,GAAP,UAAakB,CAAb,EAAwDC,CAAxD,EAAwDA;AAItD,YAAMC,CAAAA,GAAkB,IAAIT,KAAJ,CAAUQ,CAAAA,CAAclC,MAAxB,CAAxB;AAEA,eADAe,CAAAA,CAAcqB,SAAdrB,CAAwBkB,CAAxBlB,EAA4CmB,CAA5CnB,EAA2DoB,CAA3DpB,GACOoB,CAAP;AAAOA,OAnDFpB,EA6DAA,CAAAA,CAAAqB,SAAArB,GAAP,UACIkB,CADJ,EAC+CC,CAD/C,EACqFC,CADrF,EACqFA;AAKnF,aADA,IAAME,CAAAA,GAAYJ,CAAAA,CAAmBjC,MAAnBiC,GAA4BC,CAAAA,CAAclC,MAA5D,EACS7C,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAI+E,CAAAA,CAAclC,MAAlC,EAA0C7C,CAAAA,EAA1C,EACEgF,CAAAA,CAAgBhF,CAAhBgF,CAAAA,GAAqBF,CAAAA,CAAmBI,CAAAA,GAAYlF,CAA/B8E,CAAAA,GAAoCC,CAAAA,CAAc/E,CAAd+E,CAAzDC;AAAuEhF,OApEpE4D,EAgFAA,CAAAA,CAAAuB,IAAAvB,GAAP,UACI7D,CADJ,EACe2D,CADf,EAC0B0B,CAD1B,EACyFC,CADzF,EAEIC,CAFJ,EAEIA;AACF,YAAMlC,CAAAA,GAAcQ,CAAAA,CAAcC,SAAdD,CAAwB7D,CAAAA,CAAE+C,IAA1Bc,EAAgCF,CAAAA,CAAEZ,IAAlCc,CAApB;;AAEA,YAAIR,CAAJ,EAAiB;AACf,cAAIiC,CAAAA,IAAAA,CAAYE,CAAAA,CAAUC,QAAVD,CAAmBnC,CAAnBmC,EAAgCxF,CAAAA,CAAE+C,IAAlCyC,CAAhB,EAEE;AAGF,cAAME,CAAAA,GAAOF,CAAAA,CAAUE,IAAVF,CAAenC,CAAfmC,CAAb;AAAA,cACM9E,CAAAA,GAAI4E,CAAAA,GAAUtF,CAAVsF,GAAc,IAAI9C,CAAAA,CAAAmD,MAAJ,CAAWtC,CAAX,EAAwBkC,CAAAA,IAAcvF,CAAAA,CAAE4F,IAAxC,CADxB;AAIA,cAA2B,MAAvBvC,CAAAA,CAAYP,MAAhB,EACEpC,CAAAA,CAAEmF,GAAFnF,CAAM,EAANA,EAAU2E,CAAAA,CAAGrF,CAAAA,CAAEkB,GAAFlB,CAAM,EAANA,CAAHqF,EAAc1B,CAAAA,CAAEzC,GAAFyC,CAAM,EAANA,CAAd0B,CAAV3E,EADF,KAKK;AACH,gBAAMoF,CAAAA,GAAgB,IAAItB,KAAJ,CAAkBnB,CAAAA,CAAYP,MAA9B,CAAtB;AAAA,gBACMiD,CAAAA,GAAmB,IAAIvB,KAAJ,CAAUxE,CAAAA,CAAE+C,IAAF/C,CAAO8C,MAAjB,CADzB;AAAA,gBAEMkD,CAAAA,GAAmB,IAAIxB,KAAJ,CAAUb,CAAAA,CAAEZ,IAAFY,CAAOb,MAAjB,CAFzB;AAAA,gBAGImD,CAAAA,GAAsB,CAH1B;AAAA,gBAIIC,CAAAA,GAAsB,CAJ1B;AAAA,gBAKIC,CAAAA,GAAAA,CAAY,CALhB;AAAA,gBAMIC,CAAAA,GAAAA,CAAY,CANhB;AAOsB,kBAAlBpG,CAAAA,CAAE+C,IAAF/C,CAAO8C,MAAW,KACpBmD,CAAAA,GAAOjG,CAAAA,CAAEkB,GAAFlB,CAAM,EAANA,CAAPiG,EACAE,CAAAA,GAAAA,CAAY,CAFQ,GAIA,MAAlBxC,CAAAA,CAAEZ,IAAFY,CAAOb,MAAW,KACpBoD,CAAAA,GAAOvC,CAAAA,CAAEzC,GAAFyC,CAAM,EAANA,CAAPuC,EACAE,CAAAA,GAAAA,CAAY,CAFQ,CAJA;;AAStB,iBADA,IAAIC,CAAAA,GAAAA,KAAI,CAAR,EACSpG,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAIyF,CAApB,EAA0BzF,CAAAA,EAA1B,EAA+B;AAE7BoG,cAAAA,CAAAA,GAAOpG,CAAPoG;;AACA,mBAAK,IAAIC,CAAAA,GAAIjD,CAAAA,CAAYP,MAAZO,GAAqB,CAAlC,EAAqCiD,CAAAA,IAAK,CAA1C,EAA6CA,CAAAA,EAA7C,EACER,CAAAA,CAAcQ,CAAdR,CAAAA,GAAmBO,CAAAA,GAAOhD,CAAAA,CAAYiD,CAAZjD,CAA1ByC,EACAO,CAAAA,GAAOhC,IAAAA,CAAKkC,KAALlC,CAAWgC,CAAAA,GAAOhD,CAAAA,CAAYiD,CAAZjD,CAAlBgB,CADPyB;;AAIGK,cAAAA,CAAAA,KAEHtC,CAAAA,CAAcqB,SAAdrB,CAAwBiC,CAAxBjC,EAAuC7D,CAAAA,CAAE+C,IAAzCc,EAA+CkC,CAA/ClC,GACAoC,CAAAA,GAAOjG,CAAAA,CAAEkB,GAAFlB,CAAM+F,CAAN/F,CAHJmG,CAAAA,EAKAC,CAAAA,KACHvC,CAAAA,CAAcqB,SAAdrB,CAAwBiC,CAAxBjC,EAAuCF,CAAAA,CAAEZ,IAAzCc,EAA+CmC,CAA/CnC,GACAqC,CAAAA,GAAOvC,CAAAA,CAAEzC,GAAFyC,CAAMqC,CAANrC,CAFJyC,CALAD,EAULzF,CAAAA,CAAEmF,GAAFnF,CAAMoF,CAANpF,EAAqB2E,CAAAA,CAAGY,CAAHZ,EAASa,CAATb,CAArB3E,CAVKyF;AAUyBD;AAIlC;AAAA,iBAAOxF,CAAP;AAAOA;AAAAA,OA3IJmD,EAsJAA,CAAAA,CAAA2C,gBAAA3C,GAAP,UAAwB4C,CAAxB,EAAsDC,CAAtD,EAAsDA;AAEpD,YAAMC,CAAAA,GAAYF,CAAAA,CAAM3D,MAAxB;AAAA,YACM8D,CAAAA,GAAYF,CAAAA,CAAW5D,MAD7B;AAEA,YAAI6D,CAAAA,GAAYC,CAAhB,EACE,OAAA,CAAO,CAAP;;AAEF,aAAK,IAAI3G,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,IAAK0G,CAArB,EAAgC1G,CAAAA,EAAhC,EACE,IAA6B,MAAzBwG,CAAAA,CAAME,CAAAA,GAAY1G,CAAlBwG,CAAyB,IAAKA,CAAAA,CAAME,CAAAA,GAAY1G,CAAlBwG,CAAAA,KAAyBC,CAAAA,CAAWE,CAAAA,GAAY3G,CAAvByG,CAA3D,EACE,OAAA,CAAO,CAAP;;AAGJ,eAAA,CAAO,CAAP;AAAO,OAlKF7C,EAoKTA,CAAA;AA5KA,KAAA,EAAA;;AAAajE,IAAAA,CAAAA,CAAAiE,aAAAjE,GAAAiE,CAAAjE,EAgLbA,CAAAA,CAAAiH,eAAAjH,GAAA,UACIkH,CADJ,EACwCC,CADxC,EAC4EC,CAD5E,EACiGC,CADjG,EAEIC,CAFJ,EAEIA;AACF,UAAID,CAAAA,GAAc,CAAdA,IAAmBA,CAAAA,IAAeF,CAAAA,CAAOjE,MAA7C,EACE,MAAM,IAAIqE,KAAJ,CAAU,2BAAV,CAAN;AAEF,UAAIH,CAAAA,GAAc,CAAdA,IAAmBA,CAAAA,IAAeF,CAAAA,CAAOhE,MAA7C,EACE,MAAM,IAAIqE,KAAJ,CAAU,2BAAV,CAAN;AAEF,UAAIF,CAAAA,GAAcC,CAAdD,GAA0BF,CAAAA,CAAOjE,MAArC,EACE,MAAM,IAAIqE,KAAJ,CAAU,gDAAV,CAAN;AAEF,UAAIH,CAAAA,GAAcE,CAAdF,GAA0BF,CAAAA,CAAOhE,MAArC,EACE,MAAM,IAAIqE,KAAJ,CAAU,0CAAV,CAAN;;AAGF,WAAK,IAAIC,CAAAA,GAAS,CAAlB,EAAqBA,CAAAA,GAASF,CAA9B,EAAyCE,CAAAA,EAAzC,EACEN,CAAAA,CAAOE,CAAAA,GAAcI,CAArBN,CAAAA,GAA+BC,CAAAA,CAAOE,CAAAA,GAAcG,CAArBL,CAA/BD;AAAoDM,KAjM3CxH;;AAqMb,QAAAyH,CAAAA,GAAA,YAAA;AAAA,eAAAA,CAAA,GAAAA,CA+CA;;AAAA,aA3CSA,CAAAA,CAAAC,oBAAAD,GAAP,UACIE,CADJ,EACsCC,CADtC,EAC0DC,CAD1D,EAC6FC,CAD7F,EAEIC,CAFJ,EAEIA;AACF,YAAyB,MAArBJ,CAAAA,CAAUzE,MAAW,IAA2B,MAAtB2E,CAAAA,CAAW3E,MAAzC,EACE,MAAM,IAAIqE,KAAJ,CAAU,4BAAV,CAAN;AAGF,YAAIS,CAAJ,EACIC,CADJ,EAEIC,CAFJ;AAIIN,QAAAA,CAAAA,IACFI,CAAAA,GAAIL,CAAAA,CAAU,CAAVA,CAAJK,EACAC,CAAAA,GAAIN,CAAAA,CAAU,CAAVA,CAFFC,KAIFI,CAAAA,GAAIL,CAAAA,CAAU,CAAVA,CAAJK,EACAC,CAAAA,GAAIN,CAAAA,CAAU,CAAVA,CALFC,CAAAA;AAQJ,YAAIO,CAAAA,GAAAA,CAAQ,CAAZ;AAUA,YARIL,CAAAA,IACFI,CAAAA,GAAIL,CAAAA,CAAW,CAAXA,CAAJK,EACAC,CAAAA,GAAO,CAFLL,KAIFI,CAAAA,GAAIL,CAAAA,CAAW,CAAXA,CAAJK,EACAC,CAAAA,GAAO,CALLL,CAAAA,EAQAD,CAAAA,CAAWM,CAAXN,CAAAA,KAAqBI,CAAzB,EACE,MAAM,IAAIV,KAAJ,CAAU,oBAAV,CAAN;AAGF,YAAIS,CAAAA,IAAK,CAALA,IAAUE,CAAAA,IAAK,CAAfF,IAAoBC,CAAAA,IAAK,CAA7B,EACE,MAAM,IAAIV,KAAJ,CAAU,yBAAV,CAAN;AAGF,YAAA,CAAKtD,CAAAA,CAAc2C,gBAAd3C,CAA+B8D,CAA/B9D,EAA0C,CAAC+D,CAAD,EAAIE,CAAJ,CAA1CjE,CAAL,EACE,MAAM,IAAIsD,KAAJ,CAAU,wCAAV,CAAN;AAGF,eAAO,CAACS,CAAD,EAAIE,CAAJ,EAAOD,CAAP,CAAP;AAAcA,OAzCTR,EA2CTA,CAAA;AA/CA,KAAA,EAAA;;AAAazH,IAAAA,CAAAA,CAAAyH,QAAAzH,GAAAyH,CAAAzH;;AAiDb,QAAAoI,CAAAA,GAAA,YAAA;AAAA,eAAAA,CAAA,GAAAA,CA+CA;;AAAA,aA9CSA,CAAAA,CAAAC,uBAAAD,GAAP,UAA+BE,CAA/B,EAA+BA;AAC7B,gBAAQA,CAAR;AACE,eAAK3F,CAAAA,CAAA4F,IAAA5F,CAAK6F,WAAL7F,CAAiB8F,QAAjB9F,CAA0B+F,IAA/B;AACE,mBAAO,MAAP;;AACF,eAAK/F,CAAAA,CAAA4F,IAAA5F,CAAK6F,WAAL7F,CAAiB8F,QAAjB9F,CAA0BgG,KAA/B;AACE,mBAAO,OAAP;;AACF,eAAKhG,CAAAA,CAAA4F,IAAA5F,CAAK6F,WAAL7F,CAAiB8F,QAAjB9F,CAA0BiG,IAA/B;AACE,mBAAO,MAAP;;AACF,eAAKjG,CAAAA,CAAA4F,IAAA5F,CAAK6F,WAAL7F,CAAiB8F,QAAjB9F,CAA0BkG,KAA/B;AACE,mBAAO,OAAP;;AACF,eAAKlG,CAAAA,CAAA4F,IAAA5F,CAAK6F,WAAL7F,CAAiB8F,QAAjB9F,CAA0BmG,MAA/B;AACE,mBAAO,QAAP;;AACF,eAAKnG,CAAAA,CAAA4F,IAAA5F,CAAK6F,WAAL7F,CAAiB8F,QAAjB9F,CAA0BoG,KAA/B;AACE,mBAAO,OAAP;;AACF,eAAKpG,CAAAA,CAAA4F,IAAA5F,CAAK6F,WAAL7F,CAAiB8F,QAAjB9F,CAA0BqG,MAA/B;AACE,mBAAO,QAAP;;AACF,eAAKrG,CAAAA,CAAA4F,IAAA5F,CAAK6F,WAAL7F,CAAiB8F,QAAjB9F,CAA0BsG,KAA/B;AACE,mBAAO,SAAP;;AACF,eAAKtG,CAAAA,CAAA4F,IAAA5F,CAAK6F,WAAL7F,CAAiB8F,QAAjB9F,CAA0BuG,MAA/B;AACE,mBAAO,SAAP;;AACF,eAAKvG,CAAAA,CAAA4F,IAAA5F,CAAK6F,WAAL7F,CAAiB8F,QAAjB9F,CAA0BwG,MAA/B;AACE,mBAAO,QAAP;;AAIF,eAAKxG,CAAAA,CAAA4F,IAAA5F,CAAK6F,WAAL7F,CAAiB8F,QAAjB9F,CAA0ByG,KAA/B;AACE,mBAAO,OAAP;;AACF,eAAKzG,CAAAA,CAAA4F,IAAA5F,CAAK6F,WAAL7F,CAAiB8F,QAAjB9F,CAA0B0G,MAA/B;AACE,mBAAO,QAAP;;AAEF;AACE,kBAAM,IAAI9B,KAAJ,CAAU,4BAA0B5E,CAAAA,CAAA4F,IAAA5F,CAAK6F,WAAL7F,CAAiB8F,QAAjB9F,CAA0B2F,CAA1B3F,CAApC,CAAN;AA9BJ;AA8BwE2F,OA/BnEF,EAmCAA,CAAAA,CAAAkB,mBAAAlB,GAAP,UAA2BjF,CAA3B,EAA2BA;AAEzB,eAAOA,CAAAA,CAAKoG,GAALpG,CAAS,UAAApC,CAAA,EAAAA;AAAK,iBAAA0B,CAAAA,CAAA+G,OAAA/G,CAAKgH,MAALhH,CAAY1B,CAAZ0B,IAAkB1B,CAAAA,CAAW2I,QAAX3I,EAAlB0B,GAA0C1B,CAA1C;AAA0CA,SAAxDoC,CAAP;AAA+DpC,OArC1DqH,EAwCAA,CAAAA,CAAAuB,wBAAAvB,GAAP,UAAgCwB,CAAhC,EAAgCA;AAC9B,eAAO;AACLC,UAAAA,UAAAA,EAAYzB,CAAAA,CAAUC,uBAAVD,CAAkCwB,CAAAA,CAAUE,QAA5C1B,CADP;AAELvB,UAAAA,KAAAA,EAAO;AAAC1D,YAAAA,IAAAA,EAAMiF,CAAAA,CAAUkB,mBAAVlB,CAA8BwB,CAAAA,CAAU/C,KAAV+C,CAAiBG,GAAjBH,CAAsBL,GAAtBK,CAA0B,UAAA7I,CAAA,EAAAA;AAAK,qBAAAA,CAAAA,CAAEiJ,QAAF;AAAEA,aAAjCJ,CAA9BxB;AAAP;AAFF,SAAP;AAE+E4B,OA3C1E5B,EA8CTA,CAAA;AA/CA,KAAA,EAAA;;AAAapI,IAAAA,CAAAA,CAAAoI,SAAApI,GAAAoI,CAAApI;;AAiDb,QAAAiK,CAAAA,GAAA,YAAA;AAAA,eAAAA,CAAA,GAAAA,CAOA;;AAAA,aANSA,CAAAA,CAAAC,YAAAD,GAAP,UAAoB/H,CAApB,EAAoBA;AAClB,eAAIO,CAAAA,CAAA+G,OAAA/G,CAAKgH,MAALhH,CAAYP,CAAZO,IACMP,CAAAA,CAAWwH,QAAXxH,EADNO,GAGGP,CAHP;AAGOA,OAJF+H,EAMTA,CAAA;AAPA,KAAA,EAAA;;AAAajK,IAAAA,CAAAA,CAAAiK,QAAAjK,GAAAiK,CAAAjK;;AASb,QAAA4F,CAAAA,GAAA,YAAA;AAAA,eAAAA,CAAA,GAAAA,CAoUA;;AAAA,aAnUSA,CAAAA,CAAAE,IAAAF,GAAP,UAAYzC,CAAZ,EAAYA;AACV,eAAOyC,CAAAA,CAAUuE,yBAAVvE,CAAoCzC,CAApCyC,EAA0C,CAA1CA,EAA6CzC,CAAAA,CAAKD,MAAlD0C,CAAP;AAAyD1C,OADpD0C,EAKAA,CAAAA,CAAAwE,iBAAAxE,GAAP,UAAyBzC,CAAzB,EAAsDkH,CAAtD,EAAsDA;AACpD,YAAIA,CAAAA,GAAO,CAAPA,IAAYA,CAAAA,GAAOlH,CAAAA,CAAKD,MAA5B,EACE,MAAM,IAAIqE,KAAJ,CAAU,0BAAwB8C,CAAxB,GAA4B,uCAA5B,GAAoElH,CAAAA,CAAKD,MAAzE,GAA+E,cAAzF,CAAN;AAEF,eAAO0C,CAAAA,CAAUuE,yBAAVvE,CAAoCzC,CAApCyC,EAA0CyE,CAA1CzE,EAAgDzC,CAAAA,CAAKD,MAArD0C,CAAP;AAA4D1C,OATvD0C,EAaAA,CAAAA,CAAA0E,eAAA1E,GAAP,UAAuBzC,CAAvB,EAAoDkH,CAApD,EAAoDA;AAClD,YAAIA,CAAAA,GAAO,CAAPA,IAAYA,CAAAA,GAAOlH,CAAAA,CAAKD,MAA5B,EACE,MAAM,IAAIqE,KAAJ,CAAU,0BAAwB8C,CAAxB,GAA4B,qCAA5B,GAAkElH,CAAAA,CAAKD,MAAvE,GAA6E,cAAvF,CAAN;AAEF,eAAO0C,CAAAA,CAAUuE,yBAAVvE,CAAoCzC,CAApCyC,EAA0C,CAA1CA,EAA6CyE,CAA7CzE,CAAP;AAAoDyE,OAjB/CzE,EAoBAA,CAAAA,CAAAuE,yBAAAvE,GAAP,UAAiCzC,CAAjC,EAA8DoH,CAA9D,EAA6EC,CAA7E,EAA6EA;AAE3E,aADA,IAAI1E,CAAAA,GAAO,CAAX,EACSzF,CAAAA,GAAIkK,CAAb,EAAoBlK,CAAAA,GAAImK,CAAxB,EAA6BnK,CAAAA,EAA7B,EAAkC;AAGhC,cAAI8C,CAAAA,CAAK9C,CAAL8C,CAAAA,IAAW,CAAf,EACE,MAAM,IAAIoE,KAAJ,CAEF,oHAFE,CAAN;AAIFzB,UAAAA,CAAAA,IAAQ3C,CAAAA,CAAK9C,CAAL8C,CAAR2C;AAEF;;AAAA,eAAOA,CAAP;AAAOA,OAhCFF,EAmCAA,CAAAA,CAAA6E,cAAA7E,GAAP,UAAsBzC,CAAtB,EAAsBA;AACpB,YAAMuH,CAAAA,GAAOvH,CAAAA,CAAKD,MAAlB;AACA,YAAa,MAATwH,CAAJ,EACE,OAAO,EAAP;AACK,YAAa,MAATA,CAAJ,EACL,OAAO,CAAC,CAAD,CAAP;AAEF,YAAMC,CAAAA,GAAU,IAAI/F,KAAJ,CAAU8F,CAAV,CAAhB;AACAC,QAAAA,CAAAA,CAAQD,CAAAA,GAAO,CAAfC,CAAAA,GAAoB,CAApBA,EACAA,CAAAA,CAAQD,CAAAA,GAAO,CAAfC,CAAAA,GAAoBxH,CAAAA,CAAKuH,CAAAA,GAAO,CAAZvH,CADpBwH;;AAEA,aAAK,IAAItK,CAAAA,GAAIqK,CAAAA,GAAO,CAApB,EAAuBrK,CAAAA,IAAK,CAA5B,EAA4B,EAAKA,CAAjC,EACEsK,CAAAA,CAAQtK,CAARsK,CAAAA,GAAaA,CAAAA,CAAQtK,CAAAA,GAAI,CAAZsK,CAAAA,GAAiBxH,CAAAA,CAAK9C,CAAAA,GAAI,CAAT8C,CAA9BwH;;AAEF,eAAOA,CAAP;AAAOA,OAhDF/E,EAmDAA,CAAAA,CAAAgF,SAAAhF,GAAP,UAAiBzC,CAAjB,EAAiBA;AAEf,eADaA,CAAAA,CAAK0H,KAAL1H,GACD2H,OADC3H,EACb;AAAY2H,OArDPlF,EAwDAA,CAAAA,CAAAmF,eAAAnF,GAAP,UAAuBoF,CAAvB,EAAuDL,CAAvD,EAAuFN,CAAvF,EAAuFA;AAAAA,aACxErG,CADwEqG,KACjFA,CADiFA,KAEnFA,CAAAA,GAAOW,CAAAA,CAAQ9H,MAFoEmH;;AAKrF,aADA,IAAI7C,CAAAA,GAAS,CAAb,EACSnH,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAIgK,CAApB,EAAoBA,EAAQhK,CAA5B,EACEmH,CAAAA,IAAUmD,CAAAA,CAAQtK,CAARsK,CAAAA,GAAaK,CAAAA,CAAQ3K,CAAR2K,CAAvBxD;;AAEF,eAAOA,CAAP;AAAOA,OAhEF5B,EAmEAA,CAAAA,CAAAqF,eAAArF,GAAP,UAAuB4B,CAAvB,EAAuCmD,CAAvC,EAAuCA;AACrC,YAAMD,CAAAA,GAAOC,CAAAA,CAAQzH,MAArB;AACA,YAAa,MAATwH,CAAJ,EACE,OAAO,EAAP;AACK,YAAa,MAATA,CAAJ,EACL,OAAO,CAAClD,CAAAA,GAASmD,CAAAA,CAAQ,CAARA,CAAV,CAAP;;AAGF,aADA,IAAMK,CAAAA,GAAoB,IAAIpG,KAAJ,CAAU+F,CAAAA,CAAQzH,MAAlB,CAA1B,EACS7C,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAI2K,CAAAA,CAAQ9H,MAAR8H,GAAiB,CAArC,EAAqC,EAAK3K,CAA1C,EACE2K,CAAAA,CAAQ3K,CAAR2K,CAAAA,GAAavG,IAAAA,CAAKkC,KAALlC,CAAW+C,CAAAA,GAASmD,CAAAA,CAAQtK,CAARsK,CAApBlG,CAAbuG,EACAxD,CAAAA,IAAUwD,CAAAA,CAAQ3K,CAAR2K,CAAAA,GAAaL,CAAAA,CAAQtK,CAARsK,CADvBK;;AAIF,eADAA,CAAAA,CAAQA,CAAAA,CAAQ9H,MAAR8H,GAAiB,CAAzBA,CAAAA,GAA8BxD,CAA9BwD,EACOA,CAAP;AAAOA,OAhFFpF,EAmFAA,CAAAA,CAAAsF,SAAAtF,GAAP,UAAiByE,CAAjB,EAA+Bc,CAA/B,EAA+BA;AAC7B,YAAId,CAAAA,GAAAA,CAAQc,CAARd,IAAsBA,CAAAA,IAAQc,CAAlC,EACE,MAAM,IAAI5D,KAAJ,CAAU,sCAAV,CAAN;AAEF,eAAO8C,CAAAA,GAAO,CAAPA,GAAWA,CAAAA,GAAOc,CAAlBd,GAA+BA,CAAtC;AAAsCA,OAvFjCzE,EAkGAA,CAAAA,CAAAwF,cAAAxF,GAAP,UAAsBV,CAAtB,EAAuC/B,CAAvC,EAAoEkI,CAApE,EAAoEA;AAClE,YAAoB,MAAhBlI,CAAAA,CAAKD,MAAW,IAAsB,MAAjBgC,CAAAA,CAAMhC,MAA/B,EACE,MAAM,IAAIqE,KAAJ,CAAU,kDAAV,CAAN;AAEF,YAAA,KAA0BvD,CAA1B,KAAIqH,CAAJ,EACEA,CAAAA,GAAoBlI,CAAAA,CAAKD,MAAzBmI,CADF,KAGE,IAAIA,CAAAA,IAAqB,CAArBA,IAA0BA,CAAAA,GAAoBlI,CAAAA,CAAKD,MAAvD,EACE,MAAM,IAAIqE,KAAJ,CAAU,gCAAV,CAAN;;AAIJ,aAAK,IAAI+D,CAAAA,GAAID,CAAAA,GAAoB,CAAjC,EAAoCC,CAAAA,IAAK,CAALA,KAClCpG,CAAAA,CAAMoG,CAANpG,CAAAA,IAAMoG,EACFpG,CAAAA,CAAMoG,CAANpG,CAAAA,GAAW/B,CAAAA,CAAKmI,CAALnI,CADTmI,CAD4BA,CAApC,EAEsBA,EAFwBA,CAA9C,EAKEpG,CAAAA,CAAMoG,CAANpG,CAAAA,GAAW,CAAXA;AAAW,OAnHRU,EAmIAA,CAAAA,CAAA2F,qBAAA3F,GAAP,UACI4F,CADJ,EAEIC,CAFJ,EAEIA;AAEF,YAA0B,MAAtBA,CAAAA,CAAWvI,MAAf,EAA6B;AAC3B,cAA4B,MAAxBsI,CAAAA,CAAatI,MAAW,IAAsC,MAAjC0C,CAAAA,CAAUE,IAAVF,CAAe4F,CAAf5F,CAAjC,EACE,OAAO,EAAP;AAEA,gBAAM,IAAI2B,KAAJ,CAAU,mCAAV,CAAN;AAQJ;;AAAA,aAJA,IAAMmE,CAAAA,GAAQD,CAAAA,CAAWvI,MAAzB,EACMyI,CAAAA,GAAe,IAAI/G,KAAJ,CAAkB8G,CAAlB,CADrB,EAEIE,CAAAA,GAAAA,CAAoB,CAFxB,EAGIC,CAAAA,GAAgB,CAHpB,EAISxL,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAIqL,CAApB,EAA2BrL,CAAAA,EAA3B,EAAgC;AAC9B,cAAIoL,CAAAA,CAAWpL,CAAXoL,CAAAA,GAAWpL,CAAM,CAArB,EACE,MAAM,IAAIkH,KAAJ,CAAU,mDAAV,CAAN;;AAEF,cAAA,CAAuB,CAAvB,KAAIkE,CAAAA,CAAWpL,CAAXoL,CAAJ,EAA0B;AACxB,gBAAA,CAA0B,CAA1B,KAAIG,CAAJ,EACE,MAAM,IAAIrE,KAAJ,CAAU,gDAAV,CAAN;AAEFqE,YAAAA,CAAAA,GAAmBvL,CAAnBuL;AAAmBvL,WAJrB,MAKO;AACL,gBAAsB,MAAlBoL,CAAAA,CAAWpL,CAAXoL,CAAJ,EAAyB;AACvB,kBAAIpL,CAAAA,IAAKmL,CAAAA,CAAatI,MAAtB,EACE,MAAM,IAAIqE,KAAJ,CAAU,8EAAV,CAAN;AAEFoE,cAAAA,CAAAA,CAAatL,CAAbsL,CAAAA,GAAkBH,CAAAA,CAAanL,CAAbmL,CAAlBG;AAA+BtL,aAJjC,MAMEsL,CAAAA,CAAatL,CAAbsL,CAAAA,GAAkBF,CAAAA,CAAWpL,CAAXoL,CAAlBE;;AAEFE,YAAAA,CAAAA,IAAiBF,CAAAA,CAAatL,CAAbsL,CAAjBE;AAA8BxL;AAIlC;;AAAA,YAAMyL,CAAAA,GAAgBlG,CAAAA,CAAUE,IAAVF,CAAe4F,CAAf5F,CAAtB;;AACA,YAAA,CAA0B,CAA1B,KAAIgG,CAAJ,EAA6B;AAC3B,cAAIE,CAAAA,GAAgBD,CAAhBC,IAAkC,CAAtC,EACE,MAAM,IAAIvE,KAAJ,CAAU,+EACZiE,CADY,GACA,mBADA,GACoBC,CADpB,GAC8B,GADxC,CAAN;AAGFE,UAAAA,CAAAA,CAAaC,CAAbD,CAAAA,GAAiCG,CAAAA,GAAgBD,CAAjDF;AAAiDE,SALnD,MASE,IAAIA,CAAAA,KAAkBC,CAAtB,EACE,MAAM,IAAIvE,KAAJ,CAAU,yDAAV,CAAN;;AAGJ,eAAOoE,CAAP;AAAOA,OAvLF/F,EAgMAA,CAAAA,CAAAmG,eAAAnG,GAAP,UAAuBxF,CAAvB,EAAiD4L,CAAjD,EAAiDA;AAC/C,eAAIA,CAAAA,GACKA,CAAAA,CAAKzC,GAALyC,CAAS,UAACC,CAAD,EAACA;AAAM,iBAAA7L,CAAAA,CAAE6L,CAAF7L,CAAA;AAAE6L,SAAlBD,CADLA,GAGK5L,CAAAA,CAAEyK,KAAFzK,GAAU0K,OAAV1K,EAHT;AAGmB0K,OApMdlF,EA6MAA,CAAAA,CAAAsG,QAAAtG,GAAP,UAAgBzC,CAAhB,EAA6CgJ,CAA7C,EAA6CA;AAC3C,YAAMzB,CAAAA,GAAOvH,CAAAA,CAAKD,MAAlB;AACA,eAAOC,CAAAA,CAAKoG,GAALpG,CAAS,UAAC8I,CAAD,EAAI5L,CAAJ,EAAIA;AAAM,iBAAA4L,CAAAA,GAAIE,CAAAA,CAAI9L,CAAJ8L,CAAJF,GAAaE,CAAAA,CAAI9L,CAAAA,GAAIqK,CAARyB,CAAb;AAAqBzB,SAAxCvH,CAAP;AAA+CuH,OA/M1C9E,EAuNAA,CAAAA,CAAAC,QAAAD,GAAP,UAAgBwG,CAAhB,EAA+CC,CAA/C,EAA+CA;AAC7C,eAAID,CAAAA,CAAOlJ,MAAPkJ,KAAkBC,CAAAA,CAAOnJ,MAAzBkJ,IAGGA,CAAAA,CAAOE,KAAPF,CAAa,UAACH,CAAD,EAAI5L,CAAJ,EAAIA;AAAM,iBAAA4L,CAAAA,KAAMI,CAAAA,CAAOhM,CAAPgM,CAAN;AAAahM,SAApC+L,CAHP;AAG2C/L,OA3NtCuF,EAkOAA,CAAAA,CAAA2G,uBAAA3G,GAAP,UAA+BzC,CAA/B,EAA+BA;AAAAA,YAAAA,CAAAA,EAAAA,CAAAA;AAC7B,YAAIA,CAAAA,CAAKD,MAALC,GAAc,CAAlB,EACE,MAAM,IAAIqJ,SAAJ,CAAc,iDAAd,CAAN;AAEF,YAAI1G,CAAAA,GAAO,CAAX;;AAAW,YAAA;AACX,eAAgB,IAAA2G,CAAAA,GAAAC,CAAAA,CAAAvJ,CAAAuJ,CAAA,EAAIC,CAAAA,GAAAF,CAAAA,CAAAG,IAAAH,EAApB,EAAoBG,CAAAD,CAAAA,CAAAE,IAApB,EAAoBF,CAAAA,GAAAF,CAAAA,CAAAG,IAAAH,EAApB,EAAsB;AAAjB,gBAAMvK,CAAAA,GAACyK,CAAAA,CAAAjL,KAAP;AACH,gBAAA,CAAKoL,MAAAA,CAAOC,SAAPD,CAAiB5K,CAAjB4K,CAAL,EACE,MAAM,IAAIN,SAAJ,CAAc,oBAAkBtK,CAAlB,GAAmB,oBAAjC,CAAN;AAEF,gBAAIA,CAAAA,IAAK,CAALA,IAAUA,CAAAA,GAAI,UAAlB,EACE,MAAM,IAAIsK,SAAJ,CAAc,2BAAyBtK,CAAzB,GAA0B,iBAAxC,CAAN;AAEF4D,YAAAA,CAAAA,IAAQ5D,CAAR4D;AAAQ5D;AAAAA,SARC,CAQDA,OAAAA,CAAAA,EAAAA;AAAAA,UAAAA,CAAAA,GAAAA;AAAAA,YAAAA,KAAAA,EAAAA;AAAAA,WAAAA;AAAAA,SARC,SAQDA;AAAAA,cAAAA;AAAAA,YAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,IAAAA,KAAAA,CAAAA,GAAAA,CAAAA,CAAAA,MAAAA,KAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA;AAAAA,WAAAA,SAAAA;AAAAA,gBAAAA,CAAAA,EAAAA,MAAAA,CAAAA,CAAAA,KAAAA;AAAAA;AAEV;;AAAA,eAAO4D,CAAP;AAAOA,OAhPFF,EAwPAA,CAAAA,CAAAoH,YAAApH,GAAP,UAAoBzC,CAApB,EAAiDkH,CAAjD,EAAiDA;AAC/C,YAAM4C,CAAAA,GAAQ9J,CAAAA,CAAK+J,MAAL/J,CAAY,UAACgK,CAAD,EAAIC,CAAJ,EAAIA;AAAM,iBAAAD,CAAAA,GAAIC,CAAJ;AAAIA,SAA1BjK,EAA6B,CAA7BA,CAAd;AAAA,YACMkK,CAAAA,GAAQlK,CAAAA,CAAK0H,KAAL1H,CAAWkH,CAAXlH,EAAiB+J,MAAjB/J,CAAwB,UAACgK,CAAD,EAAIC,CAAJ,EAAIA;AAAM,iBAAAD,CAAAA,GAAIC,CAAJ;AAAIA,SAAtCjK,EAAyC,CAAzCA,CADd;AAIA,eAFmB,CAAC8J,CAAAA,GAAQI,CAAT,EAAgBA,CAAhB,CAEnB;AAFmCA,OA3P9BzH,EAqQAA,CAAAA,CAAA0H,YAAA1H,GAAP,UAAoBzC,CAApB,EAAiDoK,CAAjD,EAAiDA;AAC/C,YAAMC,CAAAA,GAAa,IAAI5I,KAAJ,EAAnB;AAGA,YAAI2I,CAAAA,CAAKE,IAALF,CAAU,UAAAlD,CAAA,EAAAA;AAAQ,iBAAAA,CAAAA,IAAQlH,CAAAA,CAAKD,MAAbmH,IAAuBA,CAAAA,GAAO,CAA9B;AAA8B,SAAhDkD,CAAJ,EACE,MAAM,IAAIhG,KAAJ,CAAU,iCAAV,CAAN;;AAGF,aAAK,IAAIlH,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAI8C,CAAAA,CAAKD,MAAzB,EAAiC7C,CAAAA,EAAjC,EAAsC;AACpC,cAAMqN,CAAAA,GAAgBH,CAAAA,CAAKI,OAALJ,CAAalN,CAAbkN,KAAmB,CAAzC;AACA,cAAIG,CAAAA,IAA6B,MAAZvK,CAAAA,CAAK9C,CAAL8C,CAArB,EACE,MAAM,IAAIoE,KAAJ,CAAU,0CAAV,CAAN;AAAgB,WAGG,MAAhBgG,CAAAA,CAAKrK,MAAW,IAAKC,CAAAA,CAAK9C,CAAL8C,CAAAA,GAAU,CAAf,IAAsBoK,CAAAA,CAAKrK,MAALqK,GAAc,CAAdA,IAAc,CAAMG,CAH7C,KAIhBF,CAAAA,CAAWI,IAAXJ,CAAgBrK,CAAAA,CAAK9C,CAAL8C,CAAhBqK,CAJgB;AAQpB;;AAAA,eAAOA,CAAP;AAAOA,OAxRF5H,EAgSAA,CAAAA,CAAAiI,cAAAjI,GAAP,UAAsBzC,CAAtB,EAAmDoK,CAAnD,EAAmDA;AACjD,YAAMC,CAAAA,GAAa,IAAI5I,KAAJ,CAAkBzB,CAAAA,CAAKD,MAALC,GAAcoK,CAAAA,CAAKrK,MAArC,CAAnB;AAGAsK,QAAAA,CAAAA,CAAWM,IAAXN,CAAgB,CAAhBA;;AAGA,aAAK,IAAInN,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAIkN,CAAAA,CAAKrK,MAAzB,EAAiC7C,CAAAA,EAAjC,EAAsC;AACpC,cAAMgK,CAAAA,GAAOkD,CAAAA,CAAKlN,CAALkN,CAAb;AACA,cAAIlD,CAAAA,IAAQmD,CAAAA,CAAWtK,MAAvB,EACE,MAAM,IAAIqE,KAAJ,CAAU,iCAAV,CAAN;AAEF,cAAyB,MAArBiG,CAAAA,CAAWnD,CAAXmD,CAAJ,EACE,MAAM,IAAIjG,KAAJ,CAAU,6BAAV,CAAN;AAGFiG,UAAAA,CAAAA,CAAWnD,CAAXmD,CAAAA,GAAmB,CAAnBA;AAIF;;AAAA,YAAIO,CAAAA,GAAoB,CAAxB;;AACA,aAAS1N,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAImN,CAAAA,CAAWtK,MAA/B,EAAuC7C,CAAAA,EAAvC,EACwB,MAAlBmN,CAAAA,CAAWnN,CAAXmN,CAAkB,KACpBA,CAAAA,CAAWnN,CAAXmN,CAAAA,GAAgBrK,CAAAA,CAAK4K,CAAAA,EAAL5K,CADI;;AAOxB,YAAI4K,CAAAA,KAAsB5K,CAAAA,CAAKD,MAA/B,EACE,MAAM,IAAIqE,KAAJ,CAAU,mDAAV,CAAN;AAGF,eAAOiG,CAAP;AAAOA,OAjUF5H,EAmUTA,CAAA;AApUA,KAAA,EAAA;;AAAa5F,IAAAA,CAAAA,CAAA4F,SAAA5F,GAAA4F,CAAA5F;;AAuUb,QAAAgO,CAAAA,GAAA,YAAA;AAAA,eAAAA,CAAA,GAAAA,CAwFA;;AAAA,aAtFSA,CAAAA,CAAAC,GAAAD,GAAP,UACI9G,CADJ,EACwCC,CADxC,EAC4EC,CAD5E,EACiGC,CADjG,EAEIC,CAFJ,EAEIA;AACF,YAAID,CAAAA,GAAc,CAAdA,IAAmBA,CAAAA,IAAeF,CAAAA,CAAOjE,MAA7C,EACE,MAAM,IAAIqE,KAAJ,CAAU,2BAAV,CAAN;AAEF,YAAIH,CAAAA,GAAc,CAAdA,IAAmBA,CAAAA,IAAeF,CAAAA,CAAOhE,MAA7C,EACE,MAAM,IAAIqE,KAAJ,CAAU,2BAAV,CAAN;AAEF,YAAIF,CAAAA,GAAcC,CAAdD,GAA0BF,CAAAA,CAAOjE,MAArC,EACE,MAAM,IAAIqE,KAAJ,CAAU,gDAAV,CAAN;AAEF,YAAIH,CAAAA,GAAcE,CAAdF,GAA0BF,CAAAA,CAAOhE,MAArC,EACE,MAAM,IAAIqE,KAAJ,CAAU,0CAAV,CAAN;;AAGF,aAAK,IAAIC,CAAAA,GAAS,CAAlB,EAAqBA,CAAAA,GAASF,CAA9B,EAAyCE,CAAAA,EAAzC,EACEN,CAAAA,CAAOE,CAAAA,GAAcI,CAArBN,CAAAA,IAAgCzC,IAAAA,CAAKyJ,GAALzJ,CAAS0C,CAAAA,CAAOE,CAAAA,GAAcG,CAArBL,CAAT1C,EAAuC,CAAvCA,CAAhCyC;AAAuE,OAjBpE8G,EAsBAA,CAAAA,CAAAG,IAAAH,GAAP,UACI9G,CADJ,EACwCC,CADxC,EAC4EC,CAD5E,EACiGC,CADjG,EAEIC,CAFJ,EAEuB8G,CAFvB,EAEuBA;AACrB,YAAI/G,CAAAA,GAAc,CAAdA,IAAmBA,CAAAA,IAAeF,CAAAA,CAAOjE,MAA7C,EACE,MAAM,IAAIqE,KAAJ,CAAU,2BAAV,CAAN;AAEF,YAAIH,CAAAA,GAAc,CAAdA,IAAmBA,CAAAA,IAAeF,CAAAA,CAAOhE,MAA7C,EACE,MAAM,IAAIqE,KAAJ,CAAU,2BAAV,CAAN;AAEF,YAAIF,CAAAA,GAAcC,CAAdD,GAA0BF,CAAAA,CAAOjE,MAArC,EACE,MAAM,IAAIqE,KAAJ,CAAU,gDAAV,CAAN;AAEF,YAAIH,CAAAA,GAAcE,CAAdF,GAA0BF,CAAAA,CAAOhE,MAArC,EACE,MAAM,IAAIqE,KAAJ,CAAU,0CAAV,CAAN;;AAGF,aAAK,IAAIC,CAAAA,GAAS,CAAlB,EAAqBA,CAAAA,GAASF,CAA9B,EAAyCE,CAAAA,EAAzC,EACEN,CAAAA,CAAOE,CAAAA,GAAcI,CAArBN,CAAAA,IAAiCkH,CAAAA,GAAQjH,CAAAA,CAAOE,CAAAA,GAAcG,CAArBL,CAAzCD;AAA8DM,OAvC3DwG,EA4CAA,CAAAA,CAAAK,IAAAL,GAAP,UACI9G,CADJ,EACwCC,CADxC,EAC4EC,CAD5E,EACiGC,CADjG,EAEIC,CAFJ,EAEuBvD,CAFvB,EAEuBA;AACrB,YAAIsD,CAAAA,GAAc,CAAdA,IAAmBA,CAAAA,IAAeF,CAAAA,CAAOjE,MAA7C,EACE,MAAM,IAAIqE,KAAJ,CAAU,2BAAV,CAAN;AAEF,YAAIH,CAAAA,GAAc,CAAdA,IAAmBA,CAAAA,IAAeF,CAAAA,CAAOhE,MAA7C,EACE,MAAM,IAAIqE,KAAJ,CAAU,2BAAV,CAAN;AAEF,YAAIF,CAAAA,GAAcC,CAAdD,GAA0BF,CAAAA,CAAOjE,MAArC,EACE,MAAM,IAAIqE,KAAJ,CAAU,gDAAV,CAAN;AAEF,YAAIH,CAAAA,GAAcE,CAAdF,GAA0BF,CAAAA,CAAOhE,MAArC,EACE,MAAM,IAAIqE,KAAJ,CAAU,0CAAV,CAAN;;AAGF,aAAK,IAAIC,CAAAA,GAAS,CAAlB,EAAqBA,CAAAA,GAASF,CAA9B,EAAyCE,CAAAA,EAAzC,EACEN,CAAAA,CAAOE,CAAAA,GAAcI,CAArBN,CAAAA,GAA+BzC,IAAAA,CAAKyJ,GAALzJ,CAAS0C,CAAAA,CAAOE,CAAAA,GAAcG,CAArBL,CAAT1C,EAAuCV,CAAvCU,CAA/ByC;AAAsEnD,OA7DnEiK,EAkEAA,CAAAA,CAAAM,GAAAN,GAAP,UACI9G,CADJ,EACwCC,CADxC,EAC4EC,CAD5E,EACiGC,CADjG,EAEIC,CAFJ,EAEIA;AACF,YAAID,CAAAA,GAAc,CAAdA,IAAmBA,CAAAA,IAAeF,CAAAA,CAAOjE,MAA7C,EACE,MAAM,IAAIqE,KAAJ,CAAU,2BAAV,CAAN;AAEF,YAAIH,CAAAA,GAAc,CAAdA,IAAmBA,CAAAA,IAAeF,CAAAA,CAAOhE,MAA7C,EACE,MAAM,IAAIqE,KAAJ,CAAU,2BAAV,CAAN;AAEF,YAAIF,CAAAA,GAAcC,CAAdD,GAA0BF,CAAAA,CAAOjE,MAArC,EACE,MAAM,IAAIqE,KAAJ,CAAU,gDAAV,CAAN;AAEF,YAAIH,CAAAA,GAAcE,CAAdF,GAA0BF,CAAAA,CAAOhE,MAArC,EACE,MAAM,IAAIqE,KAAJ,CAAU,0CAAV,CAAN;;AAGF,aAAK,IAAIC,CAAAA,GAAS,CAAlB,EAAqBA,CAAAA,GAASF,CAA9B,EAAyCE,CAAAA,EAAzC,EACEN,CAAAA,CAAOE,CAAAA,GAAcI,CAArBN,CAAAA,GAAgCC,CAAAA,CAAOE,CAAAA,GAAcG,CAArBL,CAAAA,GAA+BD,CAAAA,CAAOE,CAAAA,GAAcI,CAArBN,CAA/DA;AAAoFM,OAnFjFwG,EAsFTA,CAAA;AAxFA,KAAA,EAAA;;AAAahO,IAAAA,CAAAA,CAAAgO,QAAAhO,GAAAgO,CAAAhO;;AA0Fb,QAAAuO,CAAAA,GAAA,YAAA;AAAA,eAAAA,CAAA,GAAAA,CAsCA;;AAAA,aA/BSA,CAAAA,CAAAC,UAAAD,GAAP,UAAkBpL,CAAlB,EAA+CkH,CAA/C,EAA6DoE,CAA7D,EAA8EC,CAA9E,EAA8EA;AAE5E,YAAqB,MAAjBD,CAAAA,CAAMvL,MAAV,EAAwB;AACtB,cAAA,CAAKwL,CAAL,EACE,MAAM,IAAInH,KAAJ,CAAU,4EAAV,CAAN;AAEFgH,UAAAA,CAAAA,CAAUI,cAAVJ,CAAyBpL,CAAAA,CAAKkH,CAALlH,CAAzBoL,EAAqCG,CAArCH,EAAiDE,CAAjDF;AAKF;;AAAA,aAFA,IAAMK,CAAAA,GAAqB,EAA3B,EACMC,CAAAA,GAAU,CAAC,CAAD,CADhB,EAESxO,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAIoO,CAAAA,CAAMvL,MAA1B,EAA0BA,EAAU7C,CAApC,EAAuC;AAC3B,gBAANA,CAAM,IACRwO,CAAAA,CAAQjB,IAARiB,CAAaA,CAAAA,CAAQxO,CAAAA,GAAI,CAAZwO,CAAAA,GAAiBJ,CAAAA,CAAMpO,CAAAA,GAAI,CAAVoO,CAA9BI,CADQ;AAGV,cAAMhI,CAAAA,GAAQ1D,CAAAA,CAAK0H,KAAL1H,EAAd;AACA0D,UAAAA,CAAAA,CAAMwD,CAANxD,CAAAA,GAAc4H,CAAAA,CAAMpO,CAANoO,CAAd5H,EACA+H,CAAAA,CAAOhB,IAAPgB,CAAY/H,CAAZ+H,CADA/H;AAGF;;AAAA,eAAO,CAAC+H,CAAD,EAASC,CAAT,CAAP;AAAgBA,OAnBXN,EAsBAA,CAAAA,CAAAI,cAAAJ,GAAP,UAAsBO,CAAtB,EAAoDJ,CAApD,EAAwED,CAAxE,EAAwEA;AAEtE,YAAIK,CAAAA,GAAuBJ,CAAvBI,IAAsC,CAA1C,EACE,MAAM,IAAIvH,KAAJ,CAAU,0CAAV,CAAN;;AAEF,aAAK,IAAIlH,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAIqO,CAApB,EAAoBA,EAAcrO,CAAlC,EACEoO,CAAAA,CAAMb,IAANa,CAAWK,CAAAA,GAAuBJ,CAAlCD;AAAkCC,OA5B/BH,EA+BTA,CAAA;AAtCA,KAAA,EAAA;;AAAavO,IAAAA,CAAAA,CAAAuO,SAAAvO,GAAAuO,CAAAvO;;AAwCb,QAAA+O,CAAAA,GAAA,YAAA;AAAA,eAAAA,CAAA,GAAAA,CA4FA;;AAAA,aAlFSA,CAAAA,CAAAC,UAAAD,GAAP,UACI3O,CADJ,EACemN,CADf,EAC+B0B,CAD/B,EACkDC,CADlD,EAEIC,CAFJ,EAEIA;AACF,YAAMhM,CAAAA,GAAO/C,CAAAA,CAAE+C,IAAF/C,CAAOyK,KAAPzK,CAAa,CAAbA,CAAb;AAEoB,cAAhBmN,CAAAA,CAAKrK,MAAW,IAClBC,CAAAA,CAAKiM,OAALjM,CAAa,UAACpC,CAAD,EAAIsO,CAAJ,EAAIA;AAAQ,iBAAA9B,CAAAA,CAAKK,IAALL,CAAU8B,CAAV9B,CAAA;AAAU8B,SAAnClM,CADkB;;AAYpB,aARA,IAAMqK,CAAAA,GAAauB,CAAAA,CAAWO,eAAXP,CAA2B5L,CAA3B4L,EAAiCxB,CAAjCwB,EAAiCxB,CAAM,CAAvCwB,CAAnB,EAGMjJ,CAAAA,GAAOF,CAAAA,CAAUE,IAAVF,CAAe4H,CAAf5H,CAHb,EAIMwH,CAAAA,GAAI,IAAIxK,CAAAA,CAAAmD,MAAJ,CAAWyH,CAAX,EAAuBpN,CAAAA,CAAE4F,IAAzB,CAJV,EAKM2E,CAAAA,GAAU/E,CAAAA,CAAU6E,cAAV7E,CAAyB4H,CAAzB5H,CALhB,EAMM2J,CAAAA,GAAe3J,CAAAA,CAAU6E,cAAV7E,CAAyBzC,CAAzByC,CANrB,EAOM4J,CAAAA,GAAW,IAAI5K,KAAJ,CAAUzB,CAAAA,CAAKD,MAAf,CAPjB,EAQS7C,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAIyF,CAApB,EAA0BzF,CAAAA,EAA1B,EAA+B;AAC7B,cAAM2K,CAAAA,GAAUpF,CAAAA,CAAUqF,eAAVrF,CAA0BvF,CAA1BuF,EAA6B+E,CAA7B/E,CAAhB;AAEA3B,UAAAA,CAAAA,CAAcqB,SAAdrB,CAAwB+G,CAAxB/G,EAAiCd,CAAjCc,EAAuCuL,CAAvCvL,GACAmJ,CAAAA,CAAEnH,GAAFmH,CACIpC,CADJoC,EAEI2B,CAAAA,CAAWU,gBAAXV,CACI3O,CAAAA,CAAEsP,UADNX,EACkBxB,CADlBwB,EACwB5L,CADxB4L,EAC8B,CAD9BA,EACiCnJ,CAAAA,CAAUmF,eAAVnF,CAA0B4J,CAA1B5J,EAAoC2J,CAApC3J,CADjCmJ,EACoFG,CADpFH,EACyFI,CADzFJ,CAFJ3B,CADAnJ;AAOF;;AAAA,eAAIgL,CAAAA,GACK7B,CADL6B,GAIK,IAAIrM,CAAAA,CAAAmD,MAAJ,CACHgJ,CAAAA,CAAWO,eAAXP,CAA2B5L,CAA3B4L,EAAiCxB,CAAjCwB,EAAuCE,CAAvCF,CADG,EAC+C3B,CAAAA,CAAEpH,IADjD,EACiDA,KAAMhC,CADvD,EACuDA,KAAWA,CADlE,EAC6EoJ,CAAAA,CAAEuC,IAD/E,EACqFvC,CAAAA,CAAEwC,MADvF,CAJT;AAKgGA,OAhC3Fb,EA+CAA,CAAAA,CAAAU,gBAAAV,GAAP,UACIc,CADJ,EAC8BtC,CAD9B,EAC8CpK,CAD9C,EAC8D2M,CAD9D,EACkFC,CADlF,EAEIb,CAFJ,EAEgCC,CAFhC,EAEgCA;AAC9B,YAAIa,CAAAA,GAAM,CAAV;AACA,YAAIF,CAAAA,IAAcvC,CAAAA,CAAKrK,MAAvB,EACE,OAAOgM,CAAAA,CAAIW,CAAAA,CAAME,CAANF,CAAJX,CAAP;;AAIF,aAFA,IAAM7E,CAAAA,GAAOkD,CAAAA,CAAKuC,CAALvC,CAAb,EACM0C,CAAAA,GAAO5F,CAAAA,IAAQlH,CAAAA,CAAKD,MAAbmH,GAAsB,CAAtBA,GAA0BzE,CAAAA,CAAUE,IAAVF,CAAezC,CAAAA,CAAK0H,KAAL1H,CAAWkH,CAAAA,GAAO,CAAlBlH,CAAfyC,CADvC,EAESvF,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAI8C,CAAAA,CAAKkH,CAALlH,CAApB,EAAgC9C,CAAAA,EAAhC,EACE2P,CAAAA,GAAY,MAAN3P,CAAM,GAAI0O,CAAAA,CAAWU,gBAAXV,CAA4Bc,CAA5Bd,EAAmCxB,CAAnCwB,EAAyC5L,CAAzC4L,EAA+Ce,CAAAA,GAAa,CAA5Df,EAA+DgB,CAA/DhB,EAAoEG,CAApEH,EAAyEI,CAAzEJ,CAAJ,GACII,CAAAA,CAAIa,CAAJb,EAASJ,CAAAA,CAAWU,gBAAXV,CAA4Bc,CAA5Bd,EAAmCxB,CAAnCwB,EAAyC5L,CAAzC4L,EAA+Ce,CAAAA,GAAa,CAA5Df,EAA+DgB,CAA/DhB,EAAoEG,CAApEH,EAAyEI,CAAzEJ,CAATI,CADhBa,EAEAD,CAAAA,IAAOE,CAFPD;;AAIF,eAAOA,CAAP;AAAOA,OA7DFjB,EAuEAA,CAAAA,CAAAO,eAAAP,GAAP,UAAuB5L,CAAvB,EAAoDoK,CAApD,EAAiF2C,CAAjF,EAAiFA;AAE/E,aADA,IAAM1C,CAAAA,GAAarK,CAAAA,CAAK0H,KAAL1H,EAAnB,EACS9C,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAIkN,CAAAA,CAAKrK,MAAzB,EAAiC7C,CAAAA,EAAjC,EAEImN,CAAAA,CAAWD,CAAAA,CAAKlN,CAALkN,CAAXC,CAAAA,GADE0C,CAAAA,GACoB,CADpBA,GAGoB,CAFtB1C;;AAKJ,eAAOA,CAAAA,CAAW2C,MAAX3C,CAAkB,UAAAzD,CAAA,EAAAA;AAAO,iBAAQ,MAARA,CAAA;AAAAA,SAAzByD,CAAP;AAAgCzD,OAhF3BgF,EAkFTA,CAAA;AA5FA,KAAA,EAAA;;AAAa/O,IAAAA,CAAAA,CAAA+O,UAAA/O,GAAA+O,CAAA/O;;AA8Fb,QAAAoQ,CAAAA,GAAA,YAAA;AAAA,eAAAA,CAAA,GAAAA,CA4LA;;AAAA,aAnLSA,CAAAA,CAAAC,oBAAAD,GAAP,UACIE,CADJ,EAC+BC,CAD/B,EACiEC,CADjE,EACwF7F,CADxF,EAEI8F,CAFJ,EAEIA;AACF,YAAA,CAAKH,CAAL,IAAyBE,CAAAA,CAAYtN,MAAZsN,KAAuBD,CAAAA,CAAUrN,MAAVqN,GAAmB,CAAnE,EACE,MAAM,IAAIhJ,KAAJ,CAAU,oFAAV,CAAN;AAGF,YAAI+I,CAAJ,EAEE,KAAK,IAAIvG,CAAAA,GAAM,CAAf,EAAkBA,CAAAA,GAAMwG,CAAAA,CAAUrN,MAAVqN,GAAmB,CAA3C,EAA8CxG,CAAAA,EAA9C,EACMA,CAAAA,IAAOyG,CAAAA,CAAYtN,MAAnB6G,GACFyG,CAAAA,CAAY5C,IAAZ4C,CAAiBD,CAAAA,CAAUxG,CAAAA,GAAM,CAAhBwG,CAAjBC,CADEzG,GAGFyG,CAAAA,CAAYzG,CAAZyG,CAAAA,GAAmBD,CAAAA,CAAUxG,CAAAA,GAAM,CAAhBwG,CAHjBxG;;AASR,aAASA,CAAAA,GAAM,CAAf,EAAkBA,CAAAA,GAAMyG,CAAAA,CAAYtN,MAApC,EAA4C6G,CAAAA,EAA5C,EACE,IAAIA,CAAAA,GAAMY,CAAAA,CAAQzH,MAAlB,EAAkBA;AAChB,cAAIyH,CAAAA,CAAQZ,CAARY,CAAAA,GAAe,CAAnB,EACE,MAAM,IAAIpD,KAAJ,CAAU,8CAAV,CAAN;AAAgB,SAFpB,MAKEoD,CAAAA,CAAQiD,IAARjD,CAAa,CAAbA;;AAKJ,aAASZ,CAAAA,GAAM,CAAf,EAAkBA,CAAAA,GAA2B,IAArByG,CAAAA,CAAYtN,MAApC,EAAgD6G,CAAAA,EAAhD,EACE,IAAIA,CAAAA,GAAM0G,CAAAA,CAAKvN,MAAf,EAAeA;AACb,cAAIuN,CAAAA,CAAK1G,CAAL0G,CAAAA,GAAY,CAAhB,EACE,MAAM,IAAIlJ,KAAJ,CAAU,0CAAV,CAAN;AAAgB,SAFpB,MAKEkJ,CAAAA,CAAK7C,IAAL6C,CAAU,CAAVA;;AAKJ,aAAS1G,CAAAA,GAAM,CAAf,EAAkBA,CAAAA,GAAMyG,CAAAA,CAAYtN,MAApC,EAA4C6G,CAAAA,EAA5C,EAAmD;AACjD,cAAIyG,CAAAA,CAAYzG,CAAZyG,CAAAA,IAAoB,CAAxB,EACE,MAAM,IAAIjJ,KAAJ,CAAU,yCAAV,CAAN;AAGF,cAAIkJ,CAAAA,CAAK1G,CAAL0G,CAAAA,IAAaD,CAAAA,CAAYzG,CAAZyG,CAAbC,IAAiCA,CAAAA,CAAK1G,CAAAA,GAAMyG,CAAAA,CAAYtN,MAAvBuN,CAAAA,IAAkCD,CAAAA,CAAYzG,CAAZyG,CAAvE,EACE,MAAM,IAAIjJ,KAAJ,CAAU,oCAAV,CAAN;AAAgB;AAAA,OA/Cf6I,EAqDAA,CAAAA,CAAAM,wBAAAN,GAAP,UACIG,CADJ,EACsC5F,CADtC,EACyDgG,CADzD,EAC8EH,CAD9E,EACqGC,CADrG,EAEIG,CAFJ,EAEIA;AACF,YAAKA,CAAL,EAAA;AAIA,cAAIH,CAAAA,CAAKvN,MAALuN,KAAgB,KAAKF,CAAAA,CAAUrN,MAAVqN,GAAmB,CAAxB,CAApB,EACE,MAAM,IAAIhJ,KAAJ,CAAU,8DAAV,CAAN;AAGF,cAAIoD,CAAAA,CAAQzH,MAARyH,KAAoB4F,CAAAA,CAAUrN,MAAVqN,GAAmB,CAA3C,EACE,MAAM,IAAIhJ,KAAJ,CAAU,2DAAV,CAAN;AAGF,cAAIiJ,CAAAA,CAAYtN,MAAZsN,KAAwBD,CAAAA,CAAUrN,MAAVqN,GAAmB,CAA/C,EACE,MAAM,IAAIhJ,KAAJ,CAAU,iEAAV,CAAN;;AAGF,eAAK,IAAIwC,CAAAA,GAAM,CAAf,EAAkBA,CAAAA,GAAMwG,CAAAA,CAAUrN,MAAVqN,GAAmB,CAA3C,EAA8CxG,CAAAA,EAA9C,EACEqG,CAAAA,CAAaS,uBAAbT,CACIG,CAAAA,CAAUxG,CAAAA,GAAM,CAAhBwG,CADJH,EACwBzF,CAAAA,CAAQZ,CAARY,CADxByF,EACsCO,CAAAA,CAAU5G,CAAV4G,CADtCP,EACsDI,CAAAA,CAAYzG,CAAZyG,CADtDJ,EACwEK,CADxEL,EAC8ErG,CAD9EqG,EACmFrG,CAAAA,GAAMwG,CAAAA,CAAUrN,MAAhB6G,GAAyB,CAD5GqG,EAEIQ,CAFJR;AAEIQ;AAAAA,OA3EDR,EAyFAA,CAAAA,CAAAU,sBAAAV,GAAP,UACIE,CADJ,EAC+BC,CAD/B,EACiE5F,CADjE,EACoF6F,CADpF,EAEIC,CAFJ,EAEoBG,CAFpB,EAEoBA;AAClB,YAAIL,CAAAA,CAAUrN,MAAVqN,IAAoB,CAAxB,EACE,MAAM,IAAIhJ,KAAJ,CAAU,4CAAV,CAAN;AAIF,YAAMiG,CAAAA,GAAa,CAAC+C,CAAAA,CAAU,CAAVA,CAAD,EAAeA,CAAAA,CAAU,CAAVA,CAAf,CAAnB;AAAA,YAGMI,CAAAA,GAAY,IAAI/L,KAAJ,CAAkB4L,CAAAA,CAAYtN,MAA9B,EAAsC4K,IAAtC,CAA2C,CAA3C,CAHlB;AAOA,eAFAsC,CAAAA,CAAaW,kBAAbX,CACIE,CADJF,EACsBG,CADtBH,EACiC5C,CADjC4C,EAC6CzF,CAD7CyF,EACsDO,CADtDP,EACiEI,CADjEJ,EAC8EK,CAD9EL,EACoFQ,CADpFR,GAEO5C,CAAP;AAAOA,OAxGF4C,EAqHAA,CAAAA,CAAAY,sBAAAZ,GAAP,UACIG,CADJ,EACsCU,CADtC,EACyEtG,CADzE,EAC4FgG,CAD5F,EAEIH,CAFJ,EAE2BC,CAF3B,EAE2CG,CAF3C,EAE2CA;AACzC,YAAIL,CAAAA,CAAUrN,MAAVqN,IAAoB,CAApBA,IAAyBU,CAAAA,CAAW/N,MAAX+N,IAAqB,CAAlD,EACE,MAAM,IAAI1J,KAAJ,CAAU,yDAAV,CAAN;AAIF,YAAMiG,CAAAA,GAAa,CAAC+C,CAAAA,CAAU,CAAVA,CAAD,EAAeU,CAAAA,CAAW,CAAXA,CAAf,CAAnB;AAGA,eADAb,CAAAA,CAAaW,kBAAbX,CAAaW,CAAmB,CAAhCX,EAAuCG,CAAvCH,EAAkD5C,CAAlD4C,EAA8DzF,CAA9DyF,EAAuEO,CAAvEP,EAAkFI,CAAlFJ,EAA+FK,CAA/FL,EAAqGQ,CAArGR,GACO5C,CAAP;AAAOA,OAhIF4C,EAsIQA,CAAAA,CAAAW,kBAAAX,GAAf,UACIE,CADJ,EAC+BC,CAD/B,EACiE/C,CADjE,EACuF7C,CADvF,EAEIgG,CAFJ,EAEsCH,CAFtC,EAE0EC,CAF1E,EAE0FG,CAF1F,EAE0FA;AACxF,YAAIN,CAAJ,EACE,KAAK,IAAIvG,CAAAA,GAAM,CAAf,EAAkBA,CAAAA,GAAMwG,CAAAA,CAAUrN,MAAVqN,GAAmB,CAA3C,EAA8CxG,CAAAA,EAA9C,EACEyD,CAAAA,CAAWI,IAAXJ,CAAgB,CAAhBA,EAFJ,KAKE,KAASzD,CAAAA,GAAM,CAAf,EAAkBA,CAAAA,GAAMwG,CAAAA,CAAUrN,MAAVqN,GAAmB,CAA3C,EAA8CxG,CAAAA,EAA9C,EACEyD,CAAAA,CAAWI,IAAXJ,CAAgB4C,CAAAA,CAAaS,uBAAbT,CACZG,CAAAA,CAAUxG,CAAAA,GAAM,CAAhBwG,CADYH,EACQzF,CAAAA,CAAQZ,CAARY,CADRyF,EACsBO,CAAAA,CAAU5G,CAAV4G,CADtBP,EACsCI,CAAAA,CAAYzG,CAAZyG,CADtCJ,EACwDK,CADxDL,EAC8DrG,CAD9DqG,EACmErG,CAAAA,GAAMwG,CAAAA,CAAUrN,MAAhB6G,GAAyB,CAD5FqG,EAEZQ,CAFYR,CAAhB5C;AAEIoD,OAjJHR,EAwJQA,CAAAA,CAAAS,uBAAAT,GAAf,UACIc,CADJ,EACoBC,CADpB,EACoCC,CADpC,EACsDC,CADtD,EACsEZ,CADtE,EACsFa,CADtF,EAEIC,CAFJ,EAE0BX,CAF1B,EAE0BA;AACxB,YAAMY,CAAAA,GAAUJ,CAAAA,IAAYC,CAAAA,GAAS,CAArBD,CAAAA,GAA0B,CAA1C;AACA,YAAA,CAAIR,CAAJ,IAA2B,aAAZA,CAAf,EAoBE,OAAOnM,IAAAA,CAAKkC,KAALlC,CAAKkC,CAAQuK,CAAAA,GAAST,CAAAA,CAAKa,CAALb,CAATS,GAA8BT,CAAAA,CAAKc,CAALd,CAA9BS,GAAmDM,CAA3D7K,IAAsEwK,CAAtExK,GAAgF,CAArFlC,CAAP;;AAnBA,gBAAQmM,CAAR;AACE,eAAK,OAAL;AAGE,mBAFAH,CAAAA,CAAKa,CAALb,CAAAA,GAAqB,CAArBA,EACAA,CAAAA,CAAKc,CAALd,CAAAA,GAAqB,CADrBA,EAEOhM,IAAAA,CAAKkC,KAALlC,CAAKkC,CAAQuK,CAAAA,GAASM,CAAjB7K,IAA4BwK,CAA5BxK,GAAsC,CAA3ClC,CAAP;;AACF,eAAK,YAAL;AACA,eAAK,YAAL;AACE,gBAAiB,MAAb2M,CAAJ,EACE,MAAM,IAAI7J,KAAJ,CAAU,qDAAV,CAAN;AAEF,gBACMkK,CAAAA,GAAAA,CAAAA,CADoBP,CAAAA,GAASC,CAATD,GAAkB,CACtCO,IAD2CN,CAC3CM,GAAgC,CAAhCA,IAAqCN,CAArCM,GAA8CJ,CAA9CI,GAAuDP,CAD7D;AAIA,mBAFAT,CAAAA,CAAKa,CAALb,CAAAA,GAAkC,iBAAZG,CAAY,GAAgBnM,IAAAA,CAAKkC,KAALlC,CAAKkC,CAAO8K,CAAAA,GAAY,CAAnB9K,IAAwB,CAA7BlC,CAAhB,GAAkDA,IAAAA,CAAKkC,KAALlC,CAAWgN,CAAAA,GAAY,CAAvBhN,CAApFgM,EACAA,CAAAA,CAAKc,CAALd,CAAAA,GAAqBgB,CAAAA,GAAYhB,CAAAA,CAAKa,CAALb,CADjCA,EAEOhM,IAAAA,CAAKkC,KAALlC,CAAKkC,CAAQuK,CAAAA,GAASO,CAATP,GAAqBG,CAA7B1K,IAAuCwK,CAAvCxK,GAAiD,CAAtDlC,CAAP;;AACF;AACE,kBAAM,IAAI8C,KAAJ,CAAU,0BAAV,CAAN;AAhBJ;AAgBoB,OA7KjB6I,EAmLTA,CAAA;AA5LA,KAAA,EAAA;;AAAapQ,IAAAA,CAAAA,CAAAoQ,YAAApQ,GAAAoQ,CAAApQ;AAAAoQ,GDl1Bb,ECk1BaA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,KAAAA,UAAAA,CAAAA,EAAAA;AAAAA,UAAAA,CAAAA,GAAAA,QAAAA,KAAAA,SAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,eAAAA,KAAAA,CAAAA,KAAAA,CAAAA,GAAAA,OAAAA,CAAAA,EAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,mBAAAA,CAAAA,CAAAA,CAAAA,EAAAA;AAAAA,gBAAAA;AAAAA,cAAAA,CAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,aAAAA,CAAAA,OAAAA,CAAAA,EAAAA;AAAAA,cAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA;AAAAA;;AAAAA,mBAAAA,CAAAA,CAAAA,CAAAA,EAAAA;AAAAA,gBAAAA;AAAAA,cAAAA,CAAAA,CAAAA,CAAAA,CAAAA,KAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,aAAAA,CAAAA,OAAAA,CAAAA,EAAAA;AAAAA,cAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA;AAAAA;;AAAAA,mBAAAA,CAAAA,CAAAA,CAAAA,EAAAA;AAAAA,YAAAA,CAAAA,CAAAA,IAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA,KAAAA,CAAAA,GAAAA,IAAAA,CAAAA,CAAAA,UAAAA,CAAAA,EAAAA;AAAAA,cAAAA,CAAAA,CAAAA,CAAAA,CAAAA,KAAAA,CAAAA;AAAAA,aAAAA,EAAAA,IAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA;AAAAA;;AAAAA,UAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,KAAAA,CAAAA,CAAAA,EAAAA,CAAAA,IAAAA,EAAAA,CAAAA,EAAAA,IAAAA,EAAAA,CAAAA;AAAAA,SAAAA,CAAAA;AAAAA,OAAAA;AAAAA,UAAAA,CAAAA,GAAAA,QAAAA,KAAAA,WAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,YAAAA,CAAAA;AAAAA,YAAAA,CAAAA;AAAAA,YAAAA,CAAAA;AAAAA,YAAAA,CAAAA;AAAAA,YAAAA,CAAAA,GAAAA;AAAAA,UAAAA,KAAAA,EAAAA,CAAAA;AAAAA,UAAAA,IAAAA,EAAAA,YAAAA;AAAAA,gBAAAA,IAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,mBAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,WAAAA;AAAAA,UAAAA,IAAAA,EAAAA,EAAAA;AAAAA,UAAAA,GAAAA,EAAAA;AAAAA,SAAAA;AAAAA,eAAAA,CAAAA,GAAAA;AAAAA,UAAAA,IAAAA,EAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,UAAAA,KAAAA,EAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,UAAAA,MAAAA,EAAAA,CAAAA,CAAAA,CAAAA;AAAAA,SAAAA,EAAAA,cAAAA,OAAAA,MAAAA,KAAAA,CAAAA,CAAAA,MAAAA,CAAAA,QAAAA,CAAAA,GAAAA,YAAAA;AAAAA,iBAAAA,IAAAA;AAAAA,SAAAA,CAAAA,EAAAA,CAAAA;;AAAAA,iBAAAA,CAAAA,CAAAA,CAAAA,EAAAA;AAAAA,iBAAAA,UAAAA,CAAAA,EAAAA;AAAAA,mBAAAA,UAAAA,CAAAA,EAAAA;AAAAA,kBAAAA,CAAAA,EAAAA,MAAAA,IAAAA,SAAAA,CAAAA,iCAAAA,CAAAA;;AAAAA,qBAAAA,CAAAA,GAAAA,IAAAA;AAAAA,oBAAAA,CAAAA,GAAAA,CAAAA,EAAAA,CAAAA,KAAAA,CAAAA,GAAAA,IAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,MAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,KAAAA,KAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,MAAAA,KAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,IAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAAA,IAAAA,EAAAA,OAAAA,CAAAA;;AAAAA,wBAAAA,CAAAA,GAAAA,CAAAA,EAAAA,CAAAA,KAAAA,CAAAA,GAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,KAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,uBAAAA,CAAAA;AAAAA,uBAAAA,CAAAA;AAAAA,oBAAAA,CAAAA,GAAAA,CAAAA;AAAAA;;AAAAA,uBAAAA,CAAAA;AAAAA,2BAAAA,CAAAA,CAAAA,KAAAA,IAAAA;AAAAA,sBAAAA,KAAAA,EAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,sBAAAA,IAAAA,EAAAA,CAAAA;AAAAA,qBAAAA;;AAAAA,uBAAAA,CAAAA;AAAAA,oBAAAA,CAAAA,CAAAA,KAAAA,IAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA;AAAAA;;AAAAA,uBAAAA,CAAAA;AAAAA,oBAAAA,CAAAA,GAAAA,CAAAA,CAAAA,GAAAA,CAAAA,GAAAA,EAAAA,EAAAA,CAAAA,CAAAA,IAAAA,CAAAA,GAAAA,EAAAA;AAAAA;;AAAAA;AAAAA,wBAAAA,EAAAA,CAAAA,GAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,IAAAA,EAAAA,MAAAA,GAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,CAAAA,MAAAA,GAAAA,CAAAA,CAAAA,MAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,IAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAAA;AAAAA,sBAAAA,CAAAA,GAAAA,CAAAA;AAAAA;AAAAA;;AAAAA,wBAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,KAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAAA;AAAAA,sBAAAA,CAAAA,CAAAA,KAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA;AAAAA;;AAAAA,wBAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,KAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAAA;AAAAA,sBAAAA,CAAAA,CAAAA,KAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,GAAAA,CAAAA;AAAAA;AAAAA;;AAAAA,wBAAAA,CAAAA,IAAAA,CAAAA,CAAAA,KAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAAA;AAAAA,sBAAAA,CAAAA,CAAAA,KAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,GAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA;AAAAA;AAAAA;;AAAAA,oBAAAA,CAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,GAAAA,CAAAA,GAAAA,EAAAA,EAAAA,CAAAA,CAAAA,IAAAA,CAAAA,GAAAA,EAAAA;AAAAA;AAAAA;;AAAAA,gBAAAA,CAAAA,GAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA;AAAAA,eAAAA,CAAAA,OAAAA,CAAAA,EAAAA;AAAAA,gBAAAA,CAAAA,GAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,EAAAA,CAAAA,GAAAA,CAAAA;AAAAA,eAAAA,SAAAA;AAAAA,gBAAAA,CAAAA,GAAAA,CAAAA,GAAAA,CAAAA;AAAAA;;AAAAA,kBAAAA,IAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,qBAAAA;AAAAA,gBAAAA,KAAAA,EAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,KAAAA,CAAAA;AAAAA,gBAAAA,IAAAA,EAAAA,CAAAA;AAAAA,eAAAA;AAAAA,aAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,CAAAA;AAAAA,WAAAA;AAAAA;AAAAA,OAAAA;AAAAA,UAAAA,CAAAA,GAAAA,QAAAA,KAAAA,eAAAA,IAAAA,UAAAA,CAAAA,EAAAA;AAAAA,eAAAA,CAAAA,IAAAA,CAAAA,CAAAA,UAAAA,GAAAA,CAAAA,GAAAA;AAAAA,UAAAA,OAAAA,EAAAA;AAAAA,SAAAA;AAAAA,OAAAA;;AAAAA,MAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,QAAAA,KAAAA,EAAAA,CAAAA;AAAAA,OAAAA;;ACj6Bb,UAAA3N,CAAAA,GAAAC,CAAAA,CAAAlC,CAAAA,CAAA,EAAAA,CAAAkC,CAAA;AAAA,UACAC,CAAAA,GAAAnC,CAAAA,CAAA,CAAAA,CADA;AAAA,UAGAkR,CAAAA,GAAAlR,CAAAA,CAAA,CAAAA,CAHA;AAAA,UAuCAuF,CAAAA,GAAA,YAAA;AAkHE,iBAAAA,CAAA,CAIoB5C,CAJpB,EAQoB6C,CARpB,EAQmD2L,CARnD,EASYC,CATZ,EAS2DC,CAT3D,EAaoBjC,CAbpB,EAaoBA;AAAAA,eAAA,CAAAA,KAAAA,CAAAA,KAAAA,CAAAA,GAAA,EAAAA,GATAkC,KAAA3O,IAAA2O,GAAA3O,CASAyM,EALAkC,KAAA9L,IAAA8L,GAAA9L,CAKA4J,EAL+BkC,KAAAH,YAAAG,GAAAH,CAK/B/B,EAJRkC,KAAAF,iBAAAE,GAAAF,CAIQhC,EAJuCkC,KAAAD,KAAAC,GAAAD,CAIvCjC,EAAAkC,KAAAlC,MAAAkC,GAAAlC,CAAAA,EAClBkC,KAAKhM,IAALgM,GAAYJ,CAAAA,CAAA9L,SAAA8L,CAAUnF,uBAAVmF,CAAkCvO,CAAlCuO,CADM9B;AAElB,cAAM9J,CAAAA,GAAOgM,KAAKhM,IAAlB;AAAA,cACMiM,CAAAA,GAAAA,KAA0B/N,CAA1B+N,KAASJ,CAATI,IAASJ,KAAoD3N,CAApD2N,KAA8BC,CAAvCG,IAAuCH,KAA6C5N,CAA7C4N,KAAmCC,CADhF;AAGA,cAAA,KAAc7N,CAAd,KAAI6N,CAAJ,IACMA,CAAAA,CAAM3O,MAAN2O,KAAiB/L,CADvB,EAEI,MAAM,IAAIkM,UAAJ,CAAe,uCAAf,CAAN;;AAIJ,cAAa,aAAThM,CAAJ,EAAuB;AACrB,gBAAA,EAAA,KAAchC,CAAd,KAAI6N,CAAJ,IAA6BjN,KAAAA,CAAMqN,OAANrN,CAAciN,CAAdjN,KAAyBiN,CAAAA,CAAMvF,KAANuF,CAAY,UAAAxR,CAAA,EAAAA;AAAK,qBAAa,YAAA,OAANA,CAAP;AAAOA,aAAxBwR,CAAtD,CAAA,EACE,MAAM,IAAIrF,SAAJ,CAAc,gCAAd,CAAN;AAGEuF,YAAAA,CAAAA,KACFF,CAAAA,GAAQ,IAAIjN,KAAJ,CAAkBkB,CAAlB,CADNiM,CAAAA;AACwBjM,WAN9B,MAQO;AACL,gBAAA,KAAc9B,CAAd,KAAI6N,CAAJ,EAAyB;AACvB,kBAAMK,CAAAA,GAAcC,CAAAA,CAAoBnM,CAApBmM,CAApB;AACA,kBAAA,EAAMN,CAAAA,YAAiBK,CAAvB,CAAA,EACE,MAAM,IAAI1F,SAAJ,CAAc,0BAAwB0F,CAAAA,CAAYlR,IAAlD,CAAN;AAIJ;;AAAA,gBAAI+Q,CAAJ,EAAW;AACT,kBAAMK,CAAAA,GAAM,IAAIC,WAAJ,CAAgBvM,CAAAA,GAkHpC,UAAgBE,CAAhB,EAAgBA;AACd,wBAAQA,CAAR;AACE,uBAAK,MAAL;AACA,uBAAK,MAAL;AACA,uBAAK,OAAL;AACE,2BAAO,CAAP;;AACF,uBAAK,OAAL;AACA,uBAAK,QAAL;AACE,2BAAO,CAAP;;AACF,uBAAK,OAAL;AACA,uBAAK,QAAL;AACA,uBAAK,SAAL;AACE,2BAAO,CAAP;;AACF,uBAAK,SAAL;AACE,2BAAO,CAAP;;AACF;AACE,0BAAM,IAAIuB,KAAJ,CAAU,uCAAqCvB,CAA/C,CAAN;AAfJ;AAnHyCsM,eAkH3C,CAlHkDtM,CAkHlD,CAlHoB,CAAZ;;AACA8L,mBAAKD,KAALC,GA2JR,UAAoBS,CAApB,EAA6CvM,CAA7C,EAA6CA;AAC3C,uBAAO,KAAKmM,CAAAA,CAAoBnM,CAApBmM,CAAL,EAAgCI,CAAhC,CAAP;AA5JmBC,eA2JrB,CA3JgCJ,CA2JhC,EA3JqCpM,CA2JrC,CA3JQ8L;AAA6B9L;AAAAA;AA+GrC;;AAAA,eAvQE7E,MAAAA,CAAAC,cAAAD,CAAI4E,CAAAA,CAAA1D,SAAJlB,EAAI,MAAJA,EAAQ;AAAA,UAAA,GAAA,EAAR,YAAA;AACE,gBAAA,KAAmB6C,CAAnB,KAAI8N,KAAKD,KAAT,EAA8B;AAC5B,kBAAMlC,CAAAA,GAAOmC,KAAKH,YAALG,CAAmBA,KAAKlC,MAAxBkC,CAAb;AACA,kBAAInC,CAAAA,CAAKzM,MAALyM,KAAgBmC,KAAKhM,IAAzB,EACE,MAAM,IAAIyB,KAAJ,CAAU,4FAAV,CAAN;AAEFuK,mBAAKD,KAALC,GAAanC,CAAbmC;AAEF;;AAAA,mBAAOA,KAAKD,KAAZ;AAAYA,WARN;AAQMA,UAAAA,UAAAA,EAAAA,CAAAA,CARN;AAQMA,UAAAA,YAAAA,EAAAA,CAAAA;AARN,SAAR1Q,GAcAA,MAAAA,CAAAC,cAAAD,CAAI4E,CAAAA,CAAA1D,SAAJlB,EAAI,YAAJA,EAAc;AAAA,UAAA,GAAA,EAAd,YAAA;AACE,gBAAkB,aAAd2Q,KAAK9L,IAAT,EACE,MAAM,IAAIwG,SAAJ,CAAc,yBAAd,CAAN;AAGF,mBAAOsF,KAAKnC,IAAZ;AAAYA,WALA;AAKAA,UAAAA,UAAAA,EAAAA,CAAAA,CALA;AAKAA,UAAAA,YAAAA,EAAAA,CAAAA;AALA,SAAdxO,CAdAA,EA0BAA,MAAAA,CAAAC,cAAAD,CAAI4E,CAAAA,CAAA1D,SAAJlB,EAAI,aAAJA,EAAe;AAAA,UAAA,GAAA,EAAf,YAAA;AACE,oBAAQ2Q,KAAK9L,IAAb;AACE,mBAAK,OAAL;AACA,mBAAK,MAAL;AACA,mBAAK,QAAL;AACA,mBAAK,OAAL;AACA,mBAAK,OAAL;AACA,mBAAK,QAAL;AACA,mBAAK,MAAL;AACE,uBAAO8L,KAAKnC,IAAZ;;AAEF;AACE,sBAAM,IAAInD,SAAJ,CAAc,4EAAd,CAAN;AAXJ;AAWwB,WAZX;AAYW,UAAA,UAAA,EAAA,CAAA,CAZX;AAYW,UAAA,YAAA,EAAA,CAAA;AAZX,SAAfrL,CA1BAA,EA6CAA,MAAAA,CAAAC,cAAAD,CAAI4E,CAAAA,CAAA1D,SAAJlB,EAAI,WAAJA,EAAa;AAAA,UAAA,GAAA,EAAb,YAAA;AACE,oBAAQ2Q,KAAK9L,IAAb;AACE,mBAAK,SAAL;AACA,mBAAK,SAAL;AACE,uBAAO8L,KAAKnC,IAAZ;;AAEF;AACE,sBAAM,IAAInD,SAAJ,CAAc,2CAAd,CAAN;AANJ;AAMwB,WAPb;AAOa,UAAA,UAAA,EAAA,CAAA,CAPb;AAOa,UAAA,YAAA,EAAA,CAAA;AAPb,SAAbrL,CA7CAA,EA4DAA,MAAAA,CAAAC,cAAAD,CAAI4E,CAAAA,CAAA1D,SAAJlB,EAAI,YAAJA,EAAc;AAAA,UAAA,GAAA,EAAd,YAAA;AACE,gBAAkB,aAAd2Q,KAAK9L,IAAT,EACE,OAAO8L,KAAKnC,IAAZ;AAEF,kBAAM,IAAInD,SAAJ,CAAc,oCAAd,CAAN;AAAoB,WAJR;AAIQ,UAAA,UAAA,EAAA,CAAA,CAJR;AAIQ,UAAA,YAAA,EAAA,CAAA;AAJR,SAAdrL,CA5DAA,EAsEA4E,CAAAA,CAAA1D,SAAA0D,CAAAzE,GAAAyE,GAAA,UAAIiF,CAAJ,EAAIA;AACF,iBAAO8G,KAAKnC,IAALmC,CAAUJ,CAAAA,CAAA9L,SAAA8L,CAAU3G,eAAV2G,CAA0B1G,CAA1B0G,EAAmCI,KAAKnH,OAAxC+G,CAAVI,CAAP;AAAyDnH,SAvE3DxJ,EA6EA4E,CAAAA,CAAA1D,SAAA0D,CAAAE,GAAAF,GAAA,UAAIiF,CAAJ,EAAoCtJ,CAApC,EAAoCA;AAClCoQ,eAAKnC,IAALmC,CAAUJ,CAAAA,CAAA9L,SAAA8L,CAAU3G,eAAV2G,CAA0B1G,CAA1B0G,EAAmCI,KAAKnH,OAAxC+G,CAAVI,IAA8DpQ,CAA9DoQ;AAA8DpQ,SA9EhEP,EAoFM4E,CAAAA,CAAA1D,SAAA0D,CAAA0M,OAAA1M,GAAN,YAAA;AAAA,iBAAA,CAAA,CAAA,IAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;AAAA,gBAAA,CAAA;AAAA,mBAAA,CAAA,CAAA,IAAA,EAAA,UAAA,CAAA,EAAA;AAAA,sBAAA,CAAA,CAAA,KAAA;AAAA,qBAAA,CAAA;AAAA,yBAAA,KAIqB/B,CAJrB,KAIM8N,KAAKD,KAJX,GAIM,CAAA,CAAA,EAAA,CAAA,CAJN,IAKI/M,CAAAA,GAAAgN,IAAAhN,EAAa,CAAA,CAAA,EAAMgN,KAAKF,iBAALE,CAAwBA,KAAKlC,MAA7BkC,CAAN,CALjB,CAAA;;AAKoDlC,qBAAAA,CAAAA;AAAhD9K,kBAAAA,CAAAA,CAAK+M,KAAL/M,GAAa4N,CAAAA,CAAAC,IAAAD,EAAb5N,EAAa6N,CAAAA,CAAAA,KAAAA,GAAAA,CAAb7N;;AAAa6N,qBAAAA,CAAAA;AAEf,yBAAA,CAAA,CAAA,EAAOb,KAAKD,KAAZ,CAAA;AAPF;AAOcA,aAPd,CAAA;AAOcA,WAPd,CAAA;AAOcA,SA3Fd1Q,EAuGAA,MAAAA,CAAAC,cAAAD,CAAI4E,CAAAA,CAAA1D,SAAJlB,EAAI,SAAJA,EAAW;AAAA,UAAA,GAAA,EAAX,YAAA;AAIE,mBAHK2Q,KAAKc,QAALd,KACHA,KAAKc,QAALd,GAAgBJ,CAAAA,CAAA9L,SAAA8L,CAAUjH,cAAViH,CAAyBI,KAAK3O,IAA9BuO,CADbI,GAGEA,KAAKc,QAAZ;AAAYA,WAJH;AAIGA,UAAAA,UAAAA,EAAAA,CAAAA,CAJH;AAIGA,UAAAA,YAAAA,EAAAA,CAAAA;AAJH,SAAXzR,CAvGAA,EAiKO4E,CAAAA,CAAA8M,SAAA9M,GAAP,UAAiB+M,CAAjB,EAAiBA;AACf,cAAA,CAAKA,CAAL,EACE,MAAM,IAAIvL,KAAJ,CAAU,6CAAV,CAAN;AAEF,cAAMvB,CAAAA,GAAO0L,CAAAA,CAAAtJ,SAAAsJ,CAAUrJ,uBAAVqJ,CAAkCoB,CAAAA,CAAYC,QAA9CrB,CAAb;AAAA,cAGMhQ,CAAAA,GAAQ,IAAIqE,CAAJ,CAFD2L,CAAAA,CAAAtJ,SAAAsJ,CAAUpI,mBAAVoI,CAA8BoB,CAAAA,CAAY3P,IAA1CuO,CAEC,EAAiB1L,CAAjB,CAHd;AAKA,cAAa,aAATA,CAAJ,EAGE8M,CAAAA,CAAYE,UAAZF,CAAwB1D,OAAxB0D,CAAgC,UAACG,CAAD,EAAM5S,CAAN,EAAMA;AACpC,gBAAM+R,CAAAA,GAAMc,CAAAA,CAAOC,IAAPD,CAAYD,CAAAA,CAAIG,MAAhBF,EAAwBD,CAAAA,CAAII,UAA5BH,EAAwCD,CAAAA,CAAIK,UAA5CJ,CAAZ;AACAxR,YAAAA,CAAAA,CAAMiO,IAANjO,CAAWrB,CAAXqB,IAAgB0Q,CAAAA,CAAImB,QAAJnB,EAAhB1Q;AAAoB6R,WAFtBT,EAHF,KAQO,IACHA,CAAAA,CAAYU,OAAZV,IAAiE,YAAA,OAAnCA,CAAAA,CAAYU,OAAZV,CAAoBQ,UAAlDR,IACAA,CAAAA,CAAYU,OAAZV,CAAoBQ,UAApBR,GAAiC,CAF9B,EAEiC;AAItC,gBAAMW,CAAAA,GAAW/R,CAAAA,CAAMiO,IAAvB;AAAA,gBACM+D,CAAAA,GACF,IAAIC,QAAJ,CAAab,CAAAA,CAAYU,OAAZV,CAAoBM,MAAjC,EAAyCN,CAAAA,CAAYU,OAAZV,CAAoBO,UAA7D,EAAyEP,CAAAA,CAAYU,OAAZV,CAAoBQ,UAA7F,CAFJ;AAAA,gBAGMM,CAAAA,GAkGZ,UAAqB5N,CAArB,EAAqBA;AACnB,sBAAQA,CAAR;AACE,qBAAKrD,CAAAA,CAAA4F,IAAA5F,CAAK6F,WAAL7F,CAAiB8F,QAAjB9F,CAA0BgG,KAA/B;AACA,qBAAKhG,CAAAA,CAAA4F,IAAA5F,CAAK6F,WAAL7F,CAAiB8F,QAAjB9F,CAA0B+F,IAA/B;AACA,qBAAK/F,CAAAA,CAAA4F,IAAA5F,CAAK6F,WAAL7F,CAAiB8F,QAAjB9F,CAA0BiG,IAA/B;AACE,yBAAO,CAAP;;AACF,qBAAKjG,CAAAA,CAAA4F,IAAA5F,CAAK6F,WAAL7F,CAAiB8F,QAAjB9F,CAA0BmG,MAA/B;AACA,qBAAKnG,CAAAA,CAAA4F,IAAA5F,CAAK6F,WAAL7F,CAAiB8F,QAAjB9F,CAA0BkG,KAA/B;AACE,yBAAO,CAAP;;AACF,qBAAKlG,CAAAA,CAAA4F,IAAA5F,CAAK6F,WAAL7F,CAAiB8F,QAAjB9F,CAA0BsG,KAA/B;AACA,qBAAKtG,CAAAA,CAAA4F,IAAA5F,CAAK6F,WAAL7F,CAAiB8F,QAAjB9F,CAA0BoG,KAA/B;AACA,qBAAKpG,CAAAA,CAAA4F,IAAA5F,CAAK6F,WAAL7F,CAAiB8F,QAAjB9F,CAA0BqG,MAA/B;AACE,yBAAO,CAAP;;AACF,qBAAKrG,CAAAA,CAAA4F,IAAA5F,CAAK6F,WAAL7F,CAAiB8F,QAAjB9F,CAA0ByG,KAA/B;AACA,qBAAKzG,CAAAA,CAAA4F,IAAA5F,CAAK6F,WAAL7F,CAAiB8F,QAAjB9F,CAA0BuG,MAA/B;AACA,qBAAKvG,CAAAA,CAAA4F,IAAA5F,CAAK6F,WAAL7F,CAAiB8F,QAAjB9F,CAA0B0G,MAA/B;AACE,yBAAO,CAAP;;AACF;AACE,wBAAM,IAAI9B,KAAJ,CAAU,uCAAqC5E,CAAAA,CAAA4F,IAAA5F,CAAK6F,WAAL7F,CAAiB8F,QAAjB9F,CAA0BqD,CAA1BrD,CAA/C,CAAN;AAjBJ;AAnGwBkR,aAkG1B,CAlGsCf,CAAAA,CAAYC,QAkGlD,CArGM;AAAA,gBAIMe,CAAAA,GAAShB,CAAAA,CAAYU,OAAZV,CAAoBQ,UAApBR,GAAiCc,CAJhD;;AAMA,gBAAId,CAAAA,CAAYU,OAAZV,CAAoBQ,UAApBR,GAAiCc,CAAjCd,IAAiD,CAArD,EACE,MAAM,IAAIvL,KAAJ,CAAU,uBAAV,CAAN;AAEF,gBAAIkM,CAAAA,CAASvQ,MAATuQ,KAAoBK,CAAxB,EACE,MAAM,IAAIvM,KAAJ,CAAU,wBAAV,CAAN;;AAGF,iBAAK,IAAIlH,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAIyT,CAApB,EAA4BzT,CAAAA,EAA5B,EAAiC;AAC/B,kBAAM6B,CAAAA,GAAI6R,CAAAA,CAAUL,CAAVK,EAAsBjB,CAAAA,CAAYC,QAAlCgB,EAA6C1T,CAAAA,GAAIuT,CAAjDG,CAAV;AACAN,cAAAA,CAAAA,CAASpT,CAAToT,CAAAA,GAAcvR,CAAduR;AAAcvR;AAAAA,WArBX,MAuBA;AAEL,gBAAI8R,CAAAA,GAAAA,KAAK,CAAT;;AACA,oBAAQlB,CAAAA,CAAYC,QAApB;AACE,mBAAKpQ,CAAAA,CAAA4F,IAAA5F,CAAK6F,WAAL7F,CAAiB8F,QAAjB9F,CAA0BsG,KAA/B;AACE+K,gBAAAA,CAAAA,GAAQlB,CAAAA,CAAYmB,SAApBD;AACA;;AACF,mBAAKrR,CAAAA,CAAA4F,IAAA5F,CAAK6F,WAAL7F,CAAiB8F,QAAjB9F,CAA0BoG,KAA/B;AACA,mBAAKpG,CAAAA,CAAA4F,IAAA5F,CAAK6F,WAAL7F,CAAiB8F,QAAjB9F,CAA0BkG,KAA/B;AACA,mBAAKlG,CAAAA,CAAA4F,IAAA5F,CAAK6F,WAAL7F,CAAiB8F,QAAjB9F,CAA0BmG,MAA/B;AACA,mBAAKnG,CAAAA,CAAA4F,IAAA5F,CAAK6F,WAAL7F,CAAiB8F,QAAjB9F,CAA0B+F,IAA/B;AACA,mBAAK/F,CAAAA,CAAA4F,IAAA5F,CAAK6F,WAAL7F,CAAiB8F,QAAjB9F,CAA0BgG,KAA/B;AACA,mBAAKhG,CAAAA,CAAA4F,IAAA5F,CAAK6F,WAAL7F,CAAiB8F,QAAjB9F,CAA0BiG,IAA/B;AACEoL,gBAAAA,CAAAA,GAAQlB,CAAAA,CAAYoB,SAApBF;AACA;;AACF,mBAAKrR,CAAAA,CAAA4F,IAAA5F,CAAK6F,WAAL7F,CAAiB8F,QAAjB9F,CAA0ByG,KAA/B;AACE4K,gBAAAA,CAAAA,GAAQlB,CAAAA,CAAYqB,SAApBH;AACA;;AACF,mBAAKrR,CAAAA,CAAA4F,IAAA5F,CAAK6F,WAAL7F,CAAiB8F,QAAjB9F,CAA0BuG,MAA/B;AACE8K,gBAAAA,CAAAA,GAAQlB,CAAAA,CAAYsB,UAApBJ;AACA;;AACF,mBAAKrR,CAAAA,CAAA4F,IAAA5F,CAAK6F,WAAL7F,CAAiB8F,QAAjB9F,CAA0BqG,MAA/B;AACA,mBAAKrG,CAAAA,CAAA4F,IAAA5F,CAAK6F,WAAL7F,CAAiB8F,QAAjB9F,CAA0B0G,MAA/B;AACE2K,gBAAAA,CAAAA,GAAQlB,CAAAA,CAAYuB,UAApBL;AACA;;AACF;AAEE,sBAAM,IAAIzM,KAAJ,CAAU,kBAAV,CAAN;AAxBJ;;AA2BA,gBAAIyM,QAAAA,CAAJ,EACE,MAAM,IAAIzM,KAAJ,CAAU,kDAAV,CAAN;AAGF,gBAAMoI,CAAAA,GAAOjO,CAAAA,CAAMiO,IAAnB;AACA,gBAAIA,CAAAA,CAAKzM,MAALyM,KAAgBqE,CAAAA,CAAM9Q,MAA1B,EACE,MAAM,IAAIqE,KAAJ,CAAU,uBAAV,CAAN;;AAGF,iBAASlH,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAI2T,CAAAA,CAAM9Q,MAA1B,EAAkC7C,CAAAA,EAAlC,EAAuC;AACrC,kBAAMiU,CAAAA,GAAUN,CAAAA,CAAM3T,CAAN2T,CAAhB;AACIvR,cAAAA,CAAAA,CAAA+G,OAAA/G,CAAKgH,MAALhH,CAAY6R,CAAZ7R,IACFkN,CAAAA,CAAKtP,CAALsP,CAAAA,GAAUzF,CAAAA,CAAaoK,CAAbpK,EAA8B4I,CAAAA,CAAYC,QAA1C7I,CADRzH,GAGFkN,CAAAA,CAAKtP,CAALsP,CAAAA,GAAU2E,CAHR7R;AAGQ6R;AAKhB;AAAA,iBAAO5S,CAAP;AAAOA,SA1PTP,EAoQO4E,CAAAA,CAAAwO,QAAAxO,GAAP,UAAgB4J,CAAhB,EAA2DxM,CAA3D,EAAwF6C,CAAxF,EAAwFA;AACtF,iBAAO,IAAID,CAAJ,CAAW5C,CAAX,EAAiB6C,CAAjB,EAAiBA,KAAMhC,CAAvB,EAAuBA,KAAWA,CAAlC,EAA6C2L,CAA7C,CAAP;AAAoDA,SArQtDxO,EAuQF4E,CAAA;AA3QA,OAAA,EAvCA;;AAkWA,eAASoM,CAAT,CAA6BnM,CAA7B,EAA6BA;AAC3B,gBAAQA,CAAR;AACE,eAAK,MAAL;AACA,eAAK,OAAL;AACE,mBAAOwO,UAAP;;AACF,eAAK,MAAL;AACE,mBAAOC,SAAP;;AACF,eAAK,OAAL;AACE,mBAAOC,UAAP;;AACF,eAAK,QAAL;AACE,mBAAOC,WAAP;;AACF,eAAK,OAAL;AACE,mBAAOC,UAAP;;AACF,eAAK,QAAL;AACE,mBAAOC,WAAP;;AACF,eAAK,SAAL;AACE,mBAAOC,YAAP;;AACF,eAAK,SAAL;AACE,mBAAOC,YAAP;;AACF;AAEE,kBAAM,IAAIxN,KAAJ,CAAU,mBAAV,CAAN;AApBJ;AAyBF;;AAAA,eAAS2C,CAAT,CAAsB7J,CAAtB,EAA+B2F,CAA/B,EAA+BA;AAE7B,YAAIA,CAAAA,KAASrD,CAAAA,CAAA4F,IAAA5F,CAAK6F,WAAL7F,CAAiB8F,QAAjB9F,CAA0ByG,KAAvC,EAAuCA;AACrC,cAAI/I,CAAAA,CAAE2U,kBAAF3U,CAAqB,UAArBA,KAAoCA,CAAAA,CAAE4U,QAAF5U,CAAE4U,CAAU,UAAZ5U,CAAxC,EACE,MAAM,IAAImM,SAAJ,CAAc,wBAAd,CAAN;AAAoB,SAFxB,MAIO;AAAA,cAAIxG,CAAAA,KAASrD,CAAAA,CAAA4F,IAAA5F,CAAK6F,WAAL7F,CAAiB8F,QAAjB9F,CAA0BqG,MAAnChD,IAA6CA,CAAAA,KAASrD,CAAAA,CAAA4F,IAAA5F,CAAK6F,WAAL7F,CAAiB8F,QAAjB9F,CAA0B0G,MAApF,EAKL,MAAM,IAAImD,SAAJ,CAAc,sBAAoB7J,CAAAA,CAAA4F,IAAA5F,CAAK6F,WAAL7F,CAAiB8F,QAAjB9F,CAA0BqD,CAA1BrD,CAAlC,CAAN;AAJA,cAAItC,CAAAA,CAAE2U,kBAAF3U,CAAqB,UAArBA,KAAoCA,CAAAA,CAAE4U,QAAF5U,CAAW,CAAXA,CAAxC,EACE,MAAM,IAAImM,SAAJ,CAAc,yBAAd,CAAN;AAMJ;;AAAA,eAAOnM,CAAAA,CAAEqJ,QAAFrJ,EAAP;AAIF;;AAAA,eAAS0T,CAAT,CAAmBmB,CAAnB,EAAmClP,CAAnC,EAAoEqN,CAApE,EAAoEA;AAClE,gBAAQrN,CAAR;AACE,eAAKrD,CAAAA,CAAA4F,IAAA5F,CAAK6F,WAAL7F,CAAiB8F,QAAjB9F,CAA0BiG,IAA/B;AACA,eAAKjG,CAAAA,CAAA4F,IAAA5F,CAAK6F,WAAL7F,CAAiB8F,QAAjB9F,CAA0BgG,KAA/B;AACE,mBAAOuM,CAAAA,CAAKC,QAALD,CAAc7B,CAAd6B,CAAP;;AACF,eAAKvS,CAAAA,CAAA4F,IAAA5F,CAAK6F,WAAL7F,CAAiB8F,QAAjB9F,CAA0B+F,IAA/B;AACE,mBAAOwM,CAAAA,CAAKE,OAALF,CAAa7B,CAAb6B,CAAP;;AACF,eAAKvS,CAAAA,CAAA4F,IAAA5F,CAAK6F,WAAL7F,CAAiB8F,QAAjB9F,CAA0BmG,MAA/B;AACE,mBAAOoM,CAAAA,CAAKG,SAALH,CAAe7B,CAAf6B,EAAe7B,CAAY,CAA3B6B,CAAP;;AACF,eAAKvS,CAAAA,CAAA4F,IAAA5F,CAAK6F,WAAL7F,CAAiB8F,QAAjB9F,CAA0BkG,KAA/B;AACE,mBAAOqM,CAAAA,CAAKI,QAALJ,CAAc7B,CAAd6B,EAAc7B,CAAY,CAA1B6B,CAAP;;AACF,eAAKvS,CAAAA,CAAA4F,IAAA5F,CAAK6F,WAAL7F,CAAiB8F,QAAjB9F,CAA0BsG,KAA/B;AACE,mBAAOiM,CAAAA,CAAKK,UAALL,CAAgB7B,CAAhB6B,EAAgB7B,CAAY,CAA5B6B,CAAP;;AACF,eAAKvS,CAAAA,CAAA4F,IAAA5F,CAAK6F,WAAL7F,CAAiB8F,QAAjB9F,CAA0BoG,KAA/B;AACE,mBAAOmM,CAAAA,CAAKM,QAALN,CAAc7B,CAAd6B,EAAc7B,CAAY,CAA1B6B,CAAP;;AACF,eAAKvS,CAAAA,CAAA4F,IAAA5F,CAAK6F,WAAL7F,CAAiB8F,QAAjB9F,CAA0BqG,MAA/B;AACE,mBAAOkM,CAAAA,CAAKO,SAALP,CAAe7B,CAAf6B,EAAe7B,CAAY,CAA3B6B,CAAP;;AACF,eAAKvS,CAAAA,CAAA4F,IAAA5F,CAAK6F,WAAL7F,CAAiB8F,QAAjB9F,CAA0ByG,KAA/B;AACE,mBAAOc,CAAAA,CACHzH,CAAAA,CAAA+G,OAAA/G,CAAKiT,QAALjT,CAAcyS,CAAAA,CAAKO,SAALP,CAAe7B,CAAf6B,EAAe7B,CAAY,CAA3B6B,CAAdzS,EAAgDyS,CAAAA,CAAKO,SAALP,CAAe7B,CAAAA,GAAa,CAA5B6B,EAA4B,CAAG,CAA/BA,CAAhDzS,EAA+E,CAAO,CAAtFA,CADGyH,EAC2FlE,CAD3FkE,CAAP;;AAEF,eAAKvH,CAAAA,CAAA4F,IAAA5F,CAAK6F,WAAL7F,CAAiB8F,QAAjB9F,CAA0BuG,MAA/B;AACE,mBAAOgM,CAAAA,CAAKS,UAALT,CAAgB7B,CAAhB6B,EAAgB7B,CAAY,CAA5B6B,CAAP;;AACF,eAAKvS,CAAAA,CAAA4F,IAAA5F,CAAK6F,WAAL7F,CAAiB8F,QAAjB9F,CAA0B0G,MAA/B;AACE,mBAAOa,CAAAA,CACHzH,CAAAA,CAAA+G,OAAA/G,CAAKiT,QAALjT,CAAcyS,CAAAA,CAAKO,SAALP,CAAe7B,CAAf6B,EAAe7B,CAAY,CAA3B6B,CAAdzS,EAAgDyS,CAAAA,CAAKO,SAALP,CAAe7B,CAAAA,GAAa,CAA5B6B,EAA4B,CAAG,CAA/BA,CAAhDzS,EAA+E,CAAO,CAAtFA,CADGyH,EAC0FlE,CAD1FkE,CAAP;;AAEF;AACE,kBAAM,IAAI3C,KAAJ,CAAU,wCAAsC5E,CAAAA,CAAA4F,IAAA5F,CAAK6F,WAAL7F,CAAiB8F,QAAjB9F,CAA0BqD,CAA1BrD,CAAhD,CAAN;AAzBJ;AAxWW3C;;AAAAA,MAAAA,CAAAA,CAAA+F,MAAA/F,GAAA+F,CAAA/F;AAAA+F,KD03BAqK,EC13BArK,ID03BAqK,CC13BArK,ID03BAqK,EC13BArK,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,MD03BAqK;AC13BArK,GFwCb,EExCaA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;AC1Bb,QAAM6P,CAAAA,GAAoB;AACxBC,MAAAA,OAAAA,EAAS,EADe;AAExBC,MAAAA,SAAAA,EAAW,WAFa;AAGxBC,MAAAA,aAAAA,EAAe,SAHS;AAIxBC,MAAAA,WAAAA,EAAa,SAJW;AAKxBC,MAAAA,SAAAA,EAAW,WALa;AAMxBC,MAAAA,MAAAA,EAAQ,cANgB;AAOxBC,MAAAA,iBAAAA,EAAmB;AAPK,KAA1B;AAAA,QASMC,CAAAA,GAAoB;AACxBP,MAAAA,OAAAA,EAAS,iBADe;AAExBC,MAAAA,SAAAA,EAAW,IAFa;AAGxBC,MAAAA,aAAAA,EAAe,KAHS;AAIxBC,MAAAA,WAAAA,EAAa,IAJW;AAKxBC,MAAAA,SAAAA,EAAW,SALa;AAMxBC,MAAAA,MAAAA,EAAQ,aANgB;AAOxBC,MAAAA,iBAAAA,EAAmB;AAPK,KAT1B;;AAmBA,aAAgBE,CAAhB,CAAwBR,CAAxB,EAAwBA;AACtB,aAAmB,MAAZA,CAAY,GAAID,CAAJ,GAAkBQ,CAArC;AADFpW;;AAAAA,IAAAA,CAAAA,CAAAqW,OAAArW,GAAAqW,CAAArW,EAIAA,CAAAA,CAAAsW,qBAAAtW,GAAA,UAAsC6V,CAAtC,EAAsCA;AACpC,UAAMU,CAAAA,GAAOF,CAAAA,CAAQR,CAARQ,CAAb;AACA,aAAUE,CAAAA,CAAKV,OAALU,GAAY,wCAAZA,GAEJA,CAAAA,CAAKT,SAFDS,GAEU,yBAFVA,GAGJA,CAAAA,CAAKT,SAHDS,GAGU,+BAHVA,GAKJA,CAAAA,CAAKR,aALDQ,GAKc,4IALxB;AAKwB,KAX1BvW,EAoBAA,CAAAA,CAAAwW,qBAAAxW,GAAA,UAAsC6V,CAAtC,EAAsCA;AACpC,UAAMU,CAAAA,GAAOF,CAAAA,CAAQR,CAARQ,CAAb;AACA,aAAUE,CAAAA,CAAKV,OAALU,GAAY,8FAAZA,GAINA,CAAAA,CAAKP,WAJCO,GAIU,wBAJVA,GAKNA,CAAAA,CAAKJ,iBALCI,GAKgB,UAL1B;AAK0B,KA3B5BvW,EAgCAA,CAAAA,CAAAyW,wBAAAzW,GAAA,UAAyC6V,CAAzC,EAAuDa,CAAvD,EAAuDA;AAErD,aAAO,wCAESA,CAFT,GAE0B,qFAF1B,GADML,CAAAA,CAAQR,CAARQ,CAAAA,CAMJH,MALF,GAKQ,qBALf;AAKe,KAvCjBlW;AAuCiB,GHQjB,EGRiB,UAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA;AAAA;;AAAA,QAAA,CAAA,EAAA,CAAA;AAAA,IAAA,MAAA,CAAA,cAAA,CAAA,CAAA,EAAA,YAAA,EAAA;AAAA,MAAA,KAAA,EAAA,CAAA;AAAA,KAAA;;ACAjB,QAAA2W,CAAAA,GAAA,YAAA;AAAA,eAAAA,CAAA,GAAAA,CAIA;;AAAA,aAHEA,CAAAA,CAAAtU,SAAAsU,CAAAC,GAAAD,GAAA,UAAIE,CAAJ,EAA+BC,CAA/B,EAAgDC,CAAhD,EAAgDA,CAAAA,CAAhDJ,EAGFA,CAAA;AAJA,KAAA,EAAA;AAAA,QAKAK,CAAAA,GAAA,YAAA;AAAA,eAAAA,CAAA,GAAAA,CAmBA;;AAAA,aAlBEA,CAAAA,CAAA3U,SAAA2U,CAAAJ,GAAAI,GAAA,UAAIH,CAAJ,EAA+BC,CAA/B,EAAgDC,CAAhD,EAAgDA;AAC9CE,QAAAA,OAAAA,CAAQL,GAARK,CAAenF,KAAKoF,KAALpF,CAAW+E,CAAX/E,IAAoB,GAApBA,IAAwBiF,CAAAA,GAAW,UAAaA,CAAb,GAAwB,OAAnCA,GAAgD,EAAxEjF,IAA6EgF,CAA5FG;AAA4FH,OAD9FE,EAIQA,CAAAA,CAAA3U,SAAA2U,CAAAE,KAAAF,GAAR,UAAcH,CAAd,EAAcA;AACZ,gBAAQA,CAAR;AACE,eAAK,SAAL;AACE,mBAAO,eAAP;;AACF,eAAK,MAAL;AACE,mBAAO,YAAP;;AACF,eAAK,SAAL;AACE,mBAAO,eAAP;;AACF,eAAK,OAAL;AACE,mBAAO,eAAP;;AACF;AACE,kBAAM,IAAItP,KAAJ,CAAU,2BAAyBsP,CAAnC,CAAN;AAVJ;AAU6CA,OAf/CG,EAkBFA,CAAA;AAnBA,KAAA,EALA;AAAA,QA0BMG,CAAAA,GAAiB;AACrBC,MAAAA,OAAAA,EAAS,GADY;AAErBC,MAAAA,IAAAA,EAAM,GAFe;AAGrBC,MAAAA,OAAAA,EAAS,GAHY;AAIrBC,MAAAA,KAAAA,EAAO;AAJc,KA1BvB;AAAA,QAiCMC,CAAAA,IAAAA,CAAmB1S,CAAAA,GAAA,EAAnB0S,EACG,IADHA,GACM,IAAIb,CAAJ,EADNa,EAEJ1S,CAAAA,CAAU,OAAVA,GAAa,IAAIkS,CAAJ,EAFTQ,EAEaR,CAFbQ,CAjCN;AAAA,QAqCMC,CAAAA,GAAwB;AAC5BC,MAAAA,QAAAA,EAAU,SADkB;AAE5BC,MAAAA,eAAAA,EAAiB,MAFW;AAG5BC,MAAAA,WAAAA,EAAAA,CAAa,CAHe;AAI5BC,MAAAA,iBAAAA,EAAAA,CAAmB;AAJS,KArC9B;AAAA,QA2CIC,CAAAA,IAAAA,CAAiBpF,CAAAA,GAAA,EAAjBoF,EAC4D,EAD5DA,IACiEL,CADjEK,EACiHpF,CADjHoF,CA3CJ;;AAkDA,aAASlB,CAAT,CACImB,CADJ,EACkCC,CADlC,EACiDC,CADjD,EACuEC,CADvE,EACuEA;AACrE,UAAA,KAAalU,CAAb,KAAIgU,CAAJ,EAEE,OAkB6BjB,CAAAA,GAlBEgB,CAkBFhB,EACxB;AACLK,QAAAA,OAAAA,EAASR,CAAAA,CAAIQ,OAAJR,CAAY3U,IAAZ2U,CAAiB,IAAjBA,EAAuBG,CAAvBH,CADJ;AAELS,QAAAA,IAAAA,EAAMT,CAAAA,CAAIS,IAAJT,CAAS3U,IAAT2U,CAAc,IAAdA,EAAoBG,CAApBH,CAFD;AAGLU,QAAAA,OAAAA,EAASV,CAAAA,CAAIU,OAAJV,CAAY3U,IAAZ2U,CAAiB,IAAjBA,EAAuBG,CAAvBH,CAHJ;AAILW,QAAAA,KAAAA,EAAOX,CAAAA,CAAIW,KAAJX,CAAU3U,IAAV2U,CAAe,IAAfA,EAAqBG,CAArBH;AAJF,OAnBL;AACK,UAAA,KAAa5S,CAAb,KAAIiU,CAAJ,EAELE,CAAAA,CAAYJ,CAAZI,EAAqCH,CAArCG,EAA2C,CAA3CA,CAAAA,CAFK,KAGA,IAAoB,YAAA,OAATF,CAAS,IAATA,KAA8BjU,CAA9BiU,KAAqBC,CAAhC,EAELC,CAAAA,CAAYJ,CAAZI,EAAqCH,CAArCG,EAA2CF,CAA3CE,CAAAA,CAFK,KAGA,IAAoB,YAAA,OAATF,CAAS,IAATA,KAA8BjU,CAA9BiU,KAAqBC,CAAhC,EAELC,CAAAA,CAAYJ,CAAZI,EAAqCF,CAArCE,EAA2C,CAA3CA,EAA8CH,CAA9CG,CAAAA,CAFK,KAGA;AAAA,YAAoB,YAAA,OAATF,CAAS,IAA4B,YAAA,OAATC,CAAvC,EAIL,MAAM,IAAI1L,SAAJ,CAAc,gBAAd,CAAN;AAFA2L,QAAAA,CAAAA,CAAYJ,CAAZI,EAAqCF,CAArCE,EAA2CD,CAA3CC,EAAiDH,CAAjDG,CAAAA;AAMJ;AAAA,UAAiCpB,CAAjC;AAYA;;AAAA,aAASoB,CAAT,CAAqBtB,CAArB,EAAgDC,CAAhD,EAAiEsB,CAAjE,EAAgFrB,CAAhF,EAAgFA;AAC9E,UAAMsB,CAAAA,GAASP,CAAAA,CAAkBf,CAAAA,IAAY,EAA9Be,CAAAA,IAAqCA,CAAAA,CAAkB,EAAlBA,CAApD;AACIX,MAAAA,CAAAA,CAAeN,CAAfM,CAAAA,GAA2BA,CAAAA,CAAekB,CAAAA,CAAOV,eAAtBR,CAA3BA,KAIAkB,CAAAA,CAAOT,WAAPS,KACFvB,CAAAA,GAAa,IAAIwB,IAAJ,EAAbxB,CAAwByB,WAAxBzB,KAAqC,GAArCA,GAAyCA,CADvCuB,GAIAA,CAAAA,CAAOR,iBAJPQ,EAQJb,CAAAA,CAAoBa,CAAAA,CAAOX,QAA3BF,CAAAA,CAAqCZ,GAArCY,CAAyCX,CAAzCW,EAAmDV,CAAnDU,EAA4DT,CAA5DS,CAZIL;AAYwDJ;;AAAAA,KAI9D,UAAUH,CAAV,EAAUA;AAsBR,eAAgB4B,CAAhB,CAAsBH,CAAtB,EAAsBA;AACpBP,QAAAA,CAAAA,GAAoB,EAApBA,EAEA7R,CAAAA,CAAI,EAAJA,EAAQoS,CAAAA,IAAU,EAAlBpS,CAFA6R;AAIF;;AAAA,eAAgB7R,CAAhB,CAAoB8Q,CAApB,EAAsCsB,CAAtC,EAAsCA;AACpC,YAAiB,QAAbtB,CAAJ,EACEyB,CAAAA,CAAMH,CAANG,CAAAA,CADF,KAEO;AACL,cAAMC,CAAAA,GAAiBX,CAAAA,CAAkBf,CAAlBe,CAAAA,IAA+BL,CAAtD;AACAK,UAAAA,CAAAA,CAAkBf,CAAlBe,CAAAA,GAA8B;AAC5BJ,YAAAA,QAAAA,EAAUW,CAAAA,CAAOX,QAAPW,IAAmBI,CAAAA,CAAef,QADhB;AAE5BC,YAAAA,eAAAA,EAAiBU,CAAAA,CAAOV,eAAPU,IAA0BI,CAAAA,CAAed,eAF9B;AAG5BC,YAAAA,WAAAA,EAAAA,KAAqC5T,CAArC4T,KAAcS,CAAAA,CAAOT,WAArBA,GAAkDa,CAAAA,CAAeb,WAAjEA,GAA+ES,CAAAA,CAAOT,WAH1D;AAI5BC,YAAAA,iBAAAA,EAAAA,KAAiD7T,CAAjD6T,KAAoBQ,CAAAA,CAAOR,iBAA3BA,GAA8DY,CAAAA,CAAeZ,iBAA7EA,GAC8DQ,CAAAA,CAAOR;AALzC,WAA9BC;AAKuED;AAlC3DjB;;AAAAA,MAAAA,CAAAA,CAAAQ,OAAAR,GAAhB,UAAwBmB,CAAxB,EAAsCC,CAAtC,EAAsCA;AACpCpB,QAAAA,CAAAA,CAAI,SAAJA,EAAemB,CAAfnB,EAAqBoB,CAArBpB,CAAAA;AAAqBoB,OADPpB,EAKAA,CAAAA,CAAAS,IAAAT,GAAhB,UAAqBmB,CAArB,EAAmCC,CAAnC,EAAmCA;AACjCpB,QAAAA,CAAAA,CAAI,MAAJA,EAAYmB,CAAZnB,EAAkBoB,CAAlBpB,CAAAA;AAAkBoB,OANJpB,EAUAA,CAAAA,CAAAU,OAAAV,GAAhB,UAAwBmB,CAAxB,EAAsCC,CAAtC,EAAsCA;AACpCpB,QAAAA,CAAAA,CAAI,SAAJA,EAAemB,CAAfnB,EAAqBoB,CAArBpB,CAAAA;AAAqBoB,OAXPpB,EAeAA,CAAAA,CAAAW,KAAAX,GAAhB,UAAsBmB,CAAtB,EAAoCC,CAApC,EAAoCA;AAClCpB,QAAAA,CAAAA,CAAI,OAAJA,EAAamB,CAAbnB,EAAmBoB,CAAnBpB,CAAAA;AAAmBoB,OAhBLpB,EAmBAA,CAAAA,CAAA4B,KAAA5B,GAAK4B,CAnBL5B,EAwBAA,CAAAA,CAAA3Q,GAAA2Q,GAAG3Q,CAxBH2Q;AAHlB,KAAA,CAAUA,CAAAA,KAAAA,CAAAA,GAAG,EAAHA,CAAV,CAJ8DG,EAkDjD/W,CAAAA,CAAA0Y,MAAA1Y,GAAiB4W,CAlDgCG;;AAkE9D,QAAA4B,CAAAA,GAAA,YAAA;AACE,eAAAA,CAAA,CACW5B,CADX,EACoD/V,CADpD,EACyE4X,CADzE,EAEYC,CAFZ,EAEYA;AADD/G,aAAAiF,QAAAjF,GAAAiF,CAAAjF,EAAyCA,KAAA9Q,IAAA8Q,GAAA9Q,CAAzC8Q,EAA8DA,KAAA8G,SAAA9G,GAAA8G,CAA9D9G,EACCA,KAAA+G,WAAA/G,GAAA+G,CADD/G;AAMb;;AAAA,aAHE6G,CAAAA,CAAAtW,SAAAsW,CAAAnO,GAAAmO,GAAA,YAAA;AACE7G,aAAK+G,WAAL/G,CAAiBA,IAAjBA;AAAiBA,OADnB6G,EAGFA,CAAA;AARA,KAAA,EAAA;AAAA,QAUAG,CAAAA,GAAA,YAAA;AAGA,aAFE,UACW/B,CADX,EACoD/V,CADpD,EACyE4X,CADzE,EACmGG,CADnG,EACmGA;AAAxFjH,aAAAiF,QAAAjF,GAAAiF,CAAAjF,EAAyCA,KAAA9Q,IAAA8Q,GAAA9Q,CAAzC8Q,EAA8DA,KAAA8G,SAAA9G,GAAA8G,CAA9D9G,EAAwFA,KAAAiH,OAAAjH,GAAAiH,CAAxFjH;AAAwFiH,OACrG;AAHA,KAAA,EAVA;AAAA,QAeAC,CAAAA,GAAA,YAAA;AAQE,eAAAA,CAAA,CAAoBC,CAApB,EAA8CC,CAA9C,EAAuEC,CAAvE,EAAuEA;AA2G/DrH,aAAAsH,QAAAtH,GAAAsH,CAAW,CAAXtH,EASAA,KAAAuH,aAAAvH,GAAgB,CAThBA,EA1GNA,KAAKsH,QAALtH,GAAKsH,CAAW,CA0GVtH,EAzGNA,KAAKwH,gBAALxH,GAAKwH,KAAuCtV,CAAvCsV,KAAmBL,CAAnBK,GAAmD,GAAnDA,GAA2DL,CAyG1DnH,EAxGNA,KAAKyH,eAALzH,GAAKyH,KAAqCvV,CAArCuV,KAAkBL,CAAlBK,GAAiD,EAAjDA,GAAsDL,CAwGrDpH,EAvGNA,KAAK0H,4BAAL1H,GAAK0H,KAA+DxV,CAA/DwV,KAA+BL,CAA/BK,GAA2E,GAA3EA,GAAkFL,CAuGjFrH;AAUV;;AAAA,aA5HSkH,CAAAA,CAAAjX,MAAAiX,GAAP,UAAcX,CAAd,EAAcA;AACZ,eAAA,KAAerU,CAAf,KAAIqU,CAAJ,GACS,IAAIvG,IAAJ,EADT,GAGO,IAAIA,IAAJ,CAASuG,CAAAA,CAAOY,eAAhB,EAAiCZ,CAAAA,CAAOa,cAAxC,EAAwDb,CAAAA,CAAOc,2BAA/D,CAHP;AAGsEA,OAJjEH,EAePA,CAAAA,CAAA3W,SAAA2W,CAAAzO,KAAAyO,GAAA,YAAA;AACElH,aAAKsH,QAALtH,GAAKsH,CAAW,CAAhBtH,EACAA,KAAK2H,aAAL3H,GAAqB,EADrBA,EAEAA,KAAK4H,UAAL5H,GAAkB9R,CAAAA,CAAA2Z,GAAA3Z,EAFlB8R,EAGAA,KAAKuH,aAALvH,GAAqB,CAHrBA;AAGqB,OAnBhBkH,EAuBPA,CAAAA,CAAA3W,SAAA2W,CAAAY,IAAAZ,GAAA,YAAA;AAEE,aADAlH,KAAKsH,QAALtH,GAAKsH,CAAW,CAChB,EAAOtH,KAAKuH,aAALvH,GAAqBA,KAAK2H,aAAL3H,CAAmB5O,MAA/C,EAAuD4O,KAAKuH,aAALvH,EAAvD,EACEA,KAAK+H,WAAL/H,CAAiBA,KAAK2H,aAAL3H,CAAmBA,KAAKuH,aAAxBvH,CAAjBA;AAAyCuH,OA1BtCL,EAkCPA,CAAAA,CAAA3W,SAAA2W,CAAAc,KAAAd,GAAA,UAASjC,CAAT,EAA2C/V,CAA3C,EAAyD+Y,CAAzD,EAAyDA;AACvD,YAAMD,CAAAA,GAAQhI,KAAKsH,QAALtH,GAAgBA,KAAKkI,KAALlI,CAAWiF,CAAXjF,EAAqB9Q,CAArB8Q,CAAhBA,GAAqC9Q,KAAQgD,CAA3D;AAAA,YACIiW,CAAAA,GAAAA,CAAY,CADhB;;AAGA,YAAA;AACE,cAAMC,CAAAA,GAAMH,CAAAA,EAAZ;AAGA,iBAAIG,CAAAA,IAA2C,cAAA,OAA5BA,CAAAA,CAAmBC,IAAlCD,IACFD,CAAAA,GAAAA,CAAY,CAAZA,EACO,IAAIG,OAAJ,CAAe,UAACC,CAAD,EAAUC,CAAV,EAAUA;AAC7BJ,YAAAA,CAAAA,CACIC,IADJD,CAEO,UAAAxY,CAAA,EAAAA;AACE2Y,cAAAA,CAAAA,CAAQ3Y,CAAR2Y,CAAAA,EACIP,CAAAA,IACFA,CAAAA,CAAMtP,GAANsP,EAFFO;AAEQ7P,aALjB0P,EAQO,UAAAK,CAAA,EAAAA;AACED,cAAAA,CAAAA,CAAOC,CAAPD,CAAAA,EACIR,CAAAA,IACFA,CAAAA,CAAMtP,GAANsP,EAFFQ;AAEQ9P,aAXjB0P;AAWiB1P,WAZb,CAFL0P,IAoBGA,CApBP;AAoBOA,SAxBT,SAwBSA;AAAAA,WAGFD,CAHEC,IAGWJ,CAHXI,IAILJ,CAAAA,CAAMtP,GAANsP,EAJKI;AAIC1P;AAAAA,OAlELwO,EAwEPA,CAAAA,CAAA3W,SAAA2W,CAAAgB,KAAAhB,GAAA,UAAMjC,CAAN,EAAwC/V,CAAxC,EAAwCA;AAAxC,YAAAwZ,CAAAA,GAAA1I,IAAA;AACE,YAAA,CAAKA,KAAKsH,QAAV,EACE,MAAM,IAAI7R,KAAJ,CAAU,6BAAV,CAAN;AAEF,YAAMqR,CAAAA,GAAY5Y,CAAAA,CAAA2Z,GAAA3Z,EAAlB;AAEA,eADA8R,KAAK2I,KAAL3I,CAAW8G,CAAX9G,GACO,IAAI6G,CAAJ,CAAU5B,CAAV,EAAoB/V,CAApB,EAA0B4X,CAA1B,EAAqC,UAAA8B,CAAA,EAAAA;AAAK,iBAAAF,CAAAA,CAAKhQ,GAALgQ,CAASE,CAATF,CAAA;AAASE,SAAnD,CAAP;AAA0DA,OA9ErD1B,EAkFCA,CAAAA,CAAA3W,SAAA2W,CAAAxO,GAAAwO,GAAR,UAAYc,CAAZ,EAAYA;AACV,YAAIhI,KAAK2H,aAAL3H,CAAmB5O,MAAnB4O,GAA4BA,KAAKwH,gBAArC,EAAuD;AACrD,cAAMP,CAAAA,GAAU/Y,CAAAA,CAAA2Z,GAAA3Z,EAAhB;AACA8R,eAAK2H,aAAL3H,CAAmBlE,IAAnBkE,CAAwB,IAAIgH,CAAJ,CAAgBgB,CAAAA,CAAM/C,QAAtB,EAAgC+C,CAAAA,CAAM9Y,IAAtC,EAA4C8Y,CAAAA,CAAMlB,SAAlD,EAA6DG,CAA7D,CAAxBjH,GACAA,KAAK2I,KAAL3I,CAAWiH,CAAXjH,CADAA;AACWiH;AAAAA,OAtFRC,EA0FCA,CAAAA,CAAA3W,SAAA2W,CAAAa,WAAAb,GAAR,UAAoBc,CAApB,EAAoBA;AAClB9Z,QAAAA,CAAAA,CAAA0Y,MAAA1Y,CAAOoX,OAAPpX,CACI,cAAY8Z,CAAAA,CAAM/C,QADtB/W,EACsB+W,CACd+C,CAAAA,CAAMf,OAANe,GAAgBA,CAAAA,CAAMlB,SADR7B,EACmB4D,OADnB5D,CAC2B,CAD3BA,IAC6B,eAD7BA,GAC6C+C,CAAAA,CAAM9Y,IADnD+V,GACuD,OADvDA,GAC+D+C,CAAAA,CAAMf,OAANe,CAAca,OAAdb,CAAsB,CAAtBA,CAFrF9Z;AAE2G,OA7FtGgZ,EAgGCA,CAAAA,CAAA3W,SAAA2W,CAAAyB,KAAAzB,GAAR,UAAc4B,CAAd,EAAcA;AACZ,YAAI9I,KAAK2H,aAAL3H,CAAmB5O,MAAnB4O,GAA4BA,KAAKuH,aAAjCvH,IAAkDA,KAAKyH,eAAvDzH,IACA8I,CAAAA,GAAc9I,KAAK4H,UAAnBkB,IAAiC9I,KAAK0H,4BAD1C,EACwE;AAGtE,eAAK,IAAMqB,CAAAA,GAAkB/I,KAAKuH,aAAlC,EAAiDvH,KAAKuH,aAALvH,GAAqB+I,CAAAA,GAAkB/I,KAAKyH,eAA5CzH,IAC5CA,KAAKuH,aAALvH,GAAqBA,KAAK2H,aAAL3H,CAAmB5O,MAD7C,EAEK4O,KAAKuH,aAALvH,EAFL,EAGEA,KAAK+H,WAAL/H,CAAiBA,KAAK2H,aAAL3H,CAAmBA,KAAKuH,aAAxBvH,CAAjBA;;AAGFA,eAAK4H,UAAL5H,GAAkB9R,CAAAA,CAAA2Z,GAAA3Z,EAAlB8R;AAAkB6H;AAAAA,OA3GfX,EA+GP7X,MAAAA,CAAAC,cAAAD,CAAI6X,CAAAA,CAAA3W,SAAJlB,EAAI,SAAJA,EAAW;AAAA,QAAA,GAAA,EAAX,YAAA;AACE,iBAAO2Q,KAAKsH,QAAZ;AAAYA,SADH;AACGA,QAAAA,UAAAA,EAAAA,CAAAA,CADH;AACGA,QAAAA,YAAAA,EAAAA,CAAAA;AADH,OAAXjY,CA/GO6X,EA4HTA,CAAA;AA7HA,KAAA,EAfA;;AAeahZ,IAAAA,CAAAA,CAAAgZ,QAAAhZ,GAAAgZ,CAAAhZ,EAkIAA,CAAAA,CAAA2Z,GAAA3Z,GAA8B,eAAA,OAAhB8a,WAAgB,IAAeA,WAAAA,CAAYnB,GAA3B,GAAkC,YAAA;AAAM,aAAAmB,WAAAA,CAAYnB,GAAZmB,EAAA;AAAYnB,KAApD,GAA4DrB,IAAAA,CAAKqB,GAlI/F3Z;AAkI+F2Z,GJ7S5G,EI6S4GA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,QAAAA,CAAAA;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,SAAAA,KAAAA,CAAAA,GAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,CAAAA,CAAAA,GAAAA,MAAAA,CAAAA,cAAAA,IAAAA;AAAAA,QAAAA,SAAAA,EAAAA;AAAAA,mBAAAA,KAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,QAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA;AAAAA,OAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,IAAAA,CAAAA,IAAAA,CAAAA,EAAAA,CAAAA,CAAAA,cAAAA,CAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,OAAAA,EAAAA,CAAAA,EAAAA,CAAAA,CAAAA;AAAAA,KAAAA,EAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,eAAAA,CAAAA,GAAAA;AAAAA,aAAAA,WAAAA,GAAAA,CAAAA;AAAAA;;AAAAA,MAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,SAAAA,GAAAA,SAAAA,CAAAA,GAAAA,MAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA,CAAAA,SAAAA,EAAAA,IAAAA,CAAAA,EAAAA,CAAAA;AAAAA,KAAAA,CAAAA;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,YAAAA,IAAAA,UAAAA,CAAAA,EAAAA;AAAAA,UAAAA,CAAAA,IAAAA,CAAAA,CAAAA,UAAAA,EAAAA,OAAAA,CAAAA;AAAAA,UAAAA,CAAAA,GAAAA,EAAAA;AAAAA,UAAAA,QAAAA,CAAAA,EAAAA,KAAAA,IAAAA,CAAAA,IAAAA,CAAAA,EAAAA,MAAAA,CAAAA,cAAAA,CAAAA,IAAAA,CAAAA,CAAAA,EAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,aAAAA,CAAAA,CAAAA,OAAAA,GAAAA,CAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;AC5X5G,QAWIoB,CAXJ;AAAA,QAYIC,CAZJ;AAAA,QAgBIC,CAhBJ;AAAA,QAAAC,CAAAA,GAAA1a,CAAAA,CAAA,CAAAA,CAAA;AAAA,QACA2a,CAAAA,GAAAC,CAAAA,CAAA5a,CAAAA,CAAA,EAAAA,CAAA4a,CADA;AAAA,QAkBIC,CAAAA,GAAAA,CAAc,CAlBlB;AAAA,QAmBIC,CAAAA,GAAAA,CAAe,CAnBnB;;AA0BAtb,IAAAA,CAAAA,CAAAub,IAAAvb,GAAA,UAAqBwb,CAArB,EAAyCC,CAAzC,EAAyCA;AACvC,UAAIJ,CAAJ,EACE,OAAOjB,OAAAA,CAAQC,OAARD,EAAP;AAEF,UAAIkB,CAAJ,EACE,MAAM,IAAI/T,KAAJ,CAAU,sCAAV,CAAN;AAIF,aADA+T,CAAAA,GAAAA,CAAe,CAAfA,EACO,IAAIlB,OAAJ,CAAkB,UAACC,CAAD,EAAUC,CAAV,EAAUA;AAIjC,YAAIoB,CAAJ;AAAA,YACMC,CAAAA,GAA0B,YAAA;AAAA,eACM3X,CADN,KAC1B0X,CAD0B,KAG5BE,YAAAA,CAAaF,CAAbE,CAAAA,EACAF,CAAAA,GAAAA,KAA8B1X,CAJF;AAIEA,SALlC;AAAA,YASM6X,CAAAA,GAAc,YAAA;AAClBF,UAAAA,CAAAA,IACAtB,CAAAA,EADAsB,EAEAL,CAAAA,GAAAA,CAAe,CAFfK,EAGAN,CAAAA,GAAAA,CAAc,CAHdM;AAGc,SAbhB;AAAA,YAqBMG,CAAAA,GAAkBX,CAAAA,CAAYI,IAAZJ,EArBxB;AAAA,YAyBMY,CAAAA,GAA4B,IAAI3B,OAAJ,CAAY,UAACC,CAAD,EAAUC,CAAV,EAAUA;AACtDoB,UAAAA,CAAAA,GAA8BM,UAAAA,CAAW,YAAA;AACvC1B,YAAAA,CAAAA,CAAO,4DAAPA,CAAAA;AAAO,WADqB0B,EAE3BP,CAF2BO,CAA9BN;AAEGD,SAH6B,CAzBlC;;AAgCID,QAAAA,CAAAA,GAAa,CAAbA,IACFN,CAAAA,CAAAxC,MAAAwC,CAAO9D,OAAP8D,CAAe,qBAAfA,EAAsC,wBAAsBM,CAAtB,GAAgC,WAAtEN,GA+HkB,eAAA,OAAX5a,MAAW,IAAXA,KAA4D,CAA5DA,KAAkCA,MAAAA,CAAe2b,MAAtC,IAxHhBf,CAAAA,CAAAxC,MAAAwC,CAAO3D,KAAP2D,CAAa,qBAAbA,EAAoC,wEAApCA,GACAF,CAAAA,GAAgB,CAuHA,KA5HhBE,CAAAA,CAAAxC,MAAAwC,CAAO9D,OAAP8D,CACI,qBADJA,EAC2B,uDAAqDM,CAArD,GAA+D,UAD1FN,GAEAF,CAAAA,GAAgBQ,CA0HA,CAhIhBA,KAeFN,CAAAA,CAAAxC,MAAAwC,CAAO9D,OAAP8D,CAAe,qBAAfA,EAAsC,6DAAtCA,GACAF,CAAAA,GAAgB,CAhBdQ;AAmBJ,YAAMU,CAAAA,GAAkB,IAAItX,KAAJ,CAAyBoW,CAAzB,CAAxB;AACAD,QAAAA,CAAAA,GAAU,IAAInW,KAAJ,CAAUoW,CAAV,CAAVD,EACAE,CAAAA,GAAoB,IAAIrW,KAAJ,CAAUoW,CAAV,CADpBD;;AAGA,aAAA,IAAA,CAAA,GAAA,UAASoB,CAAT,EAASA;AACP,cAAMC,CAAAA,GAAiB,IAAIhC,OAAJ,CAAkB,UAACiC,CAAD,EAAoBC,CAApB,EAAoBA;AAE3D,gBAAMC,CAAAA,GAAS/b,CAAAA,CAAQ,EAARA,CAAAA,EAAf;AACAua,YAAAA,CAAAA,CAAQoB,CAARpB,CAAAA,GAAoBwB,CAApBxB,EACAE,CAAAA,CAAkBkB,CAAlBlB,CAAAA,GAA8B,EAD9BF,EAEAwB,CAAAA,CAAOC,OAAPD,GAAiB,UAAA7B,CAAA,EAAAA;AACfQ,cAAAA,CAAAA,CAAAxC,MAAAwC,CAAO3D,KAAP2D,CAAa,qBAAbA,EAAoC,YAAUiB,CAAV,GAAkB,QAAlB,GAA2BzB,CAA/DQ,GACIG,CAAAA,IAGFiB,CAAAA,EAJFpB;AAIEoB,aAPJvB,EAUAwB,CAAAA,CAAOE,SAAPF,GAAmB,UAAA7B,CAAA,EAAAA;AACjB,kBAAA,EAAIA,CAAAA,IAAKA,CAAAA,CAAE/K,IAAP+K,IAAeA,CAAAA,CAAE/K,IAAF+K,CAAO1U,IAA1B,CAAA,EAUE,MAAM,IAAIuB,KAAJ,CAAU,kCAAV,CAAN;AATA,kBAAoB,mBAAhBmT,CAAAA,CAAE/K,IAAF+K,CAAO1U,IAAX,EACEqW,CAAAA,GADF,KAEO;AAAA,oBAAoB,YAAhB3B,CAAAA,CAAE/K,IAAF+K,CAAO1U,IAAX,EAIL,MAAM,IAAIuB,KAAJ,CAAU,uCAAqCmT,CAAAA,CAAE/K,IAAF+K,CAAO1U,IAAtD,CAAN;AAHA,oBAAM0W,CAAAA,GAAWhC,CAAAA,CAAE/K,IAAF+K,CAAOgC,QAAxB;AACAzB,gBAAAA,CAAAA,CAAkBkB,CAAlBlB,CAAAA,CAA4B0B,KAA5B1B,GAAqCP,CAAAA,CAAE/K,IAAF+K,CAAOtH,MAA5C6H,EAAmEyB,CAAnEzB;AAAmEyB;AAAAA,aAhBzE3B;AAgByE2B,WAnBpD,CAAvB;AA4BAR,UAAAA,CAAAA,CAAgBC,CAAhBD,CAAAA,GAA4BE,CAA5BF;AAA4BE,SA7B9B,EAASD,CAAAA,GAAW,CAApB,EAAuBA,CAAAA,GAAWnB,CAAlC,EAAiDmB,CAAAA,EAAjD,EAAiDA,CAAAA,CAAxCA,CAAwCA,CAAAA;;AAmCjD/B,QAAAA,OAAAA,CAAQwC,IAARxC,CAAa,CAAC0B,CAAD,EAAkBC,CAAlB,CAAb3B,EACKD,IADLC,CAEQ,YAAA;AAEEA,UAAAA,OAAAA,CAAQyC,GAARzC,CAAY8B,CAAZ9B,EACKD,IADLC,CAGQyB,CAHRzB,EAMQ,YAAA;AACEc,YAAAA,CAAAA,CAAAxC,MAAAwC,CAAO5D,OAAP4D,CACI,qBADJA,EAEI,wFAFJA,GAIAF,CAAAA,GAAgB,CAJhBE,EAKAW,CAAAA,EALAX;AAKAW,WAZVzB;AAYUyB,SAhBpBzB,EA3EmB,UAAC0C,CAAD,EAACA;AAClBnB,UAAAA,CAAAA,IACArB,CAAAA,CAAOwC,CAAPxC,CADAqB,EAEAL,CAAAA,GAAAA,CAAe,CAFfK;AAEe,SAwEjBvB;AAxEiB,OAtBZ,CAAP;AAsBmB,KA/BrBpa;;AAgIA,QAAA+c,CAAAA,GAAA,UAAAC,CAAA,EAAAA;AAAA,eAAAD,CAAA,GAAAA;AAAAA,eAAAA,SAAAA,CAAAA,IAAAA,CAAAA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,SAAAA,CAAAA,IAAAA,IAAAA;AAwCA;;AAAA,aAxCiCE,CAAAA,CAAAF,CAAAE,EAAAD,CAAAC,CAAAA,EAExBF,CAAAA,CAAAG,WAAAH,GAAP,YAAA;AAIE,eAHKA,CAAAA,CAAYI,QAAZJ,KACHA,CAAAA,CAAYI,QAAZJ,GAAuB,IAAIA,CAAJ,EADpBA,GAGEA,CAAAA,CAAYI,QAAnB;AAAmBA,OANUF,EAQ/B9b,MAAAA,CAAAC,cAAAD,CAAW4b,CAAX5b,EAAW,cAAXA,EAAuB;AAAA,QAAA,GAAA,EAAvB,YAAA;AACE,iBAAO6Z,CAAP;AAAOA,SADc;AACdA,QAAAA,UAAAA,EAAAA,CAAAA,CADc;AACdA,QAAAA,YAAAA,EAAAA,CAAAA;AADc,OAAvB7Z,CAR+B8b,EAW/BF,CAAAA,CAAA1a,SAAA0a,CAAAK,WAAAL,GAAA,UAAYZ,CAAZ,EAA8BkB,CAA9B,EAA8BA;AAAAA,aAAsB,IAAAC,CAAAA,GAAA,EAAA,EAAAta,CAAAA,GAAA,CAAtBqa,EAAsBra,CAAAA,GAAAC,SAAAA,CAAAC,MAAtBma,EAAsBra,CAAAA,EAAtBqa,EAAsBC,CAAAA,CAAAta,CAAAA,GAAA,CAAAsa,CAAAA,GAAAra,SAAAA,CAAAD,CAAAC,CAAAqa;;AAClD,YAAA,CAAKjC,CAAL,EACE,MAAM,IAAI9T,KAAJ,CAAU,yDAAV,CAAN;AAGF,YAAI4U,CAAAA,GAAW,CAAXA,IAAgBA,CAAAA,IAAYnB,CAAhC,EACE,MAAM,IAAIzT,KAAJ,CAAU,uBAAqB4U,CAArB,GAA6B,2BAA7B,GAAyDnB,CAAzD,GAAsE,GAAhF,CAAN;AAGF,YAAMxT,CAAAA,GAAmB,EAAzB;AAAA,YACM1B,CAAAA,GAAOiX,CAAAA,CAAYQ,gBAAZR,CAA6BvV,CAA7BuV,EAAqCO,CAArCP,CADb;AAAA,YAEM3J,CAAAA,GAAS,IAAIf,WAAJ,CAAgBvM,CAAhB,CAFf;AAGAiX,QAAAA,CAAAA,CAAYS,cAAZT,CAA2B,IAAIvI,UAAJ,CAAepB,CAAf,CAA3B2J,EAAmDvV,CAAnDuV,EAA2DO,CAA3DP;AAEA,YAAMnE,CAAAA,GAAYuC,CAAAA,CAAYxB,GAAZwB,EAAlB;AAGA,eAFAJ,CAAAA,CAAQoB,CAARpB,CAAAA,CAAkB0C,WAAlB1C,CAA8B;AAAC/U,UAAAA,IAAAA,EAAM,OAAP;AAAgB+T,UAAAA,IAAAA,EAAMsD,CAAtB;AAAoCjK,UAAAA,MAAAA,EAAMA;AAA1C,SAA9B2H,EAA2E,CAAC3H,CAAD,CAA3E2H,GAEO,IAAIX,OAAJ,CAA6B,UAACC,CAAD,EAAUC,CAAV,EAAUA;AAC5CW,UAAAA,CAAAA,CAAkBkB,CAAlBlB,CAAAA,CAA4BrN,IAA5BqN,CAAiC,UAAC7H,CAAD,EAASsK,CAAT,EAASA;AACxCA,YAAAA,CAAAA,CAAKC,eAALD,GAAuBA,CAAAA,CAAK9E,SAA5B8E,EACAA,CAAAA,CAAKE,aAALF,GAAqBA,CAAAA,CAAK3E,OAD1B2E,EAEAA,CAAAA,CAAK9E,SAAL8E,GAAiB9E,CAFjB8E,EAGAA,CAAAA,CAAK3E,OAAL2E,GAAevC,CAAAA,CAAYxB,GAAZwB,EAHfuC,EAKAX,CAAAA,CAAYc,gBAAZd,CAA6B,IAAIvI,UAAJ,CAAepB,CAAf,CAA7B2J,EAAqDvV,CAArDuV,EAA6DO,CAA7DP,CALAW,EAMArD,CAAAA,CAAQqD,CAARrD,CANAqD;AAMQA,WAPVzC;AAOUyC,SARL,CAAP;AAQYA,OApCiBT,EAwCjCF,CAAA;AAxCA,KAAA,CAAiC5B,CAAAA,CAAY4B,WAA7C,CAAA;;AAAa/c,IAAAA,CAAAA,CAAA+c,WAAA/c,GAAA+c,CAAA/c;AAAA+c,GL3Eb,EK2EaA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA,GCvJb,UAAYe,CAAZ,EAAYA;AACVA,MAAAA,CAAAA,CAAAA,CAAAA,CAAA,UAAAA,GAAA,CAAAA,CAAAA,GAAA,YAAAA,EACAA,CAAAA,CAAAA,CAAAA,CAAA,UAAAA,GAAA,CAAAA,CAAAA,GAAA,YADAA;AADF,KAAA,CAAY9d,CAAAA,CAAA8d,YAAA9d,KAAAA,CAAAA,CAAA8d,YAAA9d,GAAY,EAAZA,CAAZ,CDuJa+c;;ACxIb,QAAAgB,CAAAA,GAAA,YAAA;AAEA,aADE,UAAmBC,CAAnB,EAAmDC,CAAnD,EAAmDA;AAAhCnM,aAAAkM,SAAAlM,GAAAkM,CAAAlM,EAAgCA,KAAAmM,WAAAnM,GAAAmM,CAAhCnM;AAAgCmM,OACrD;AAFA,KAAA,EAAA;;AAAaje,IAAAA,CAAAA,CAAA+d,WAAA/d,GAAA+d,CAAA/d;;AAGb,QAAAke,CAAAA,GAAA,YAAA;AAIA,aAHE,UAAmBC,CAAnB,EAAmBA;AAAArM,aAAAqM,OAAArM,GAAAqM,CAAArM;AAAAqM,OAGrB;AAJA,KAAA,EAAA;;AAAsBne,IAAAA,CAAAA,CAAAke,OAAAle,GAAAke,CAAAle;;AAOtB,QAAAoe,CAAAA,GAAA,YAAA;AAEA,aADE,UAAmBC,CAAnB,EAA+CC,CAA/C,EAA+CA;AAA5BxM,aAAAuM,WAAAvM,GAAAuM,CAAAvM,EAA4BA,KAAAwM,YAAAxM,GAAAwM,CAA5BxM;AAA4BwM,OACjD;AAFA,KAAA,EAAA;;AAAate,IAAAA,CAAAA,CAAAoe,cAAApe,GAAAoe,CAAApe;;AAMb,QAAAue,CAAAA,GAAA,YAAA;AAGE,eAAAA,CAAA,CAAmBvd,CAAnB,EAAiCqd,CAAjC,EAAuDC,CAAvD,EAAuDA;AAApCxM,aAAA9Q,IAAA8Q,GAAA9Q,CAAA8Q,EAEfA,KAAKwM,YAALxM,GADEwM,CAAAA,IAGkB,EAJLxM,EAObuM,CAAAA,KACFvM,KAAKuM,WAALvM,GAAmBuM,CADjBA,CAPavM;AAgBrB;;AAAA,aALEyM,CAAAA,CAAAlc,SAAAkc,CAAAC,aAAAD,GAAA,UAAcE,CAAd,EAAcA;AACRA,QAAAA,CAAAA,IACF3M,KAAKwM,YAALxM,CAAkBlE,IAAlBkE,CAAuB2M,CAAvB3M,CADE2M;AACqBA,OAF3BF,EAKFA,CAAA;AAnBA,KAAA,EAAA;;AAAave,IAAAA,CAAAA,CAAAue,kBAAAve,GAAAue,CAAAve;;AAsBb,QAAA0e,CAAAA,GAAA,YAAA;AAAA,eAAAA,CAAA,GAAAA,CA0DA;;AAAA,aAzDSA,CAAAA,CAAAC,kBAAAD,GAAP,UAA0BE,CAA1B,EAA0BA;AACxB,YAAA,CAAKA,CAAL,IAA+B,MAAjBA,CAAAA,CAAM1b,MAApB,EACE,OAAO,EAAP;AAGF,YAAqB,MAAjB0b,CAAAA,CAAM1b,MAAV,EACE,OAAO0b,CAAP;AAGF,YAAMC,CAAAA,GAAa,IAAIC,GAAJ,EAAnB;AAAA,YACMC,CAAAA,GAAmB,IAAID,GAAJ,EADzB;AAAA,YAEME,CAAAA,GAAS,IAAIpa,KAAJ,EAFf;AAKA,eADAkN,KAAKmN,kBAALnN,CAAwB8M,CAAxB9M,EAA+B+M,CAA/B/M,EAA2CiN,CAA3CjN,EAA6DkN,CAA7DlN,GACOkN,CAAP;AAAOA,OAdFN,EAiBQA,CAAAA,CAAAO,kBAAAP,GAAf,UACIQ,CADJ,EACsCL,CADtC,EAC+DE,CAD/D,EAEIC,CAFJ,EAEIA;AACF,aAAK,IAAI3e,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAI6e,CAAAA,CAAWhc,MAA/B,EAA+BA,EAAU7C,CAAzC,EACEyR,KAAKqN,WAALrN,CAAiBoN,CAAAA,CAAW7e,CAAX6e,CAAjBpN,EAAgC+M,CAAhC/M,EAA4CiN,CAA5CjN,EAA8DkN,CAA9DlN;AAA8DkN,OArB3DN,EAyBQA,CAAAA,CAAAS,WAAAT,GAAf,UACI5e,CADJ,EAC8B+e,CAD9B,EACuDE,CADvD,EACsFC,CADtF,EACsFA;AAEpF,YAAKlf,CAAAA,IAAAA,CAAQif,CAAAA,CAAiBK,GAAjBL,CAAqBjf,CAAAA,CAAKkB,IAA1B+d,CAAb,EAAA;AAKA,cAAIF,CAAAA,CAAWO,GAAXP,CAAe/e,CAAAA,CAAKkB,IAApB6d,CAAJ,EACE,MAAM,IAAItX,KAAJ,CAAU,kFAAV,CAAN;AAIFsX,UAAAA,CAAAA,CAAWQ,GAAXR,CAAe/e,CAAAA,CAAKkB,IAApB6d;AAGA,cAAMP,CAAAA,GAAexe,CAAAA,CAAKwe,YAA1B;AACA,cAAIA,CAAAA,IAAgBA,CAAAA,CAAapb,MAAbob,GAAsB,CAA1C,EACE,KAAK,IAAIje,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAIie,CAAAA,CAAapb,MAAjC,EAAiCA,EAAU7C,CAA3C,EACEyR,KAAKqN,WAALrN,CAAiBwM,CAAAA,CAAaje,CAAbie,CAAjBxM,EAAkC+M,CAAlC/M,EAA8CiN,CAA9CjN,EAAgEkN,CAAhElN;AAKJkN,UAAAA,CAAAA,CAAOpR,IAAPoR,CAAYlf,CAAZkf,GAGAD,CAAAA,CAAiBM,GAAjBN,CAAqBjf,CAAAA,CAAKkB,IAA1B+d,CAHAC,EAMAH,CAAAA,CAAWS,MAAXT,CAAkB/e,CAAAA,CAAKkB,IAAvB6d,CANAG;AAMuBhe;AAAAA,OAvDlB0d,EAyDTA,CAAA;AA1DA,KAAA,EAAA;;AAAa1e,IAAAA,CAAAA,CAAA0e,2BAAA1e,GAAA0e,CAAA1e;AAAA0e,GNuBb,EMvBaA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,KC3Db,UAAAa,CAAA,EAAAA;AACA,UAAAC,CAAAA,GAAAxf,CAAA;;AAoOA,eAAAyf,CAAA,CAAAC,CAAA,EAAAC,CAAA,EAAAC,CAAA,EAAAA;AACA,aAAA,IAAAC,CAAAA,GAAA1e,MAAAA,CAAA0e,IAAA1e,CAAAwe,CAAAxe,CAAA,EAAAd,CAAAA,GAAA,CAAA,EAA4CA,CAAAA,GAAAwf,CAAAA,CAAA3c,MAA5C,EAA4CA,EAAiB7C,CAA7D,EAA6DA,KAC7D2D,CAD6D3D,KAC7Dqf,CAAAA,CAAAG,CAAAA,CAAAxf,CAAAwf,CAAAH,CAD6Drf,IAC7Duf,CAD6Dvf,KAE7Dqf,CAAAA,CAAAG,CAAAA,CAAAxf,CAAAwf,CAAAH,CAAAA,GAAAC,CAAAA,CAAAE,CAAAA,CAAAxf,CAAAwf,CAAAF,CAF6Dtf;;AAG7D,eAAAqf,CAAA;AAoBA;;AAAA,eAAAI,CAAA,CAAA9e,CAAA,EAAAA;AAEA,iBAAA+e,CAAA,CAAAC,CAAA,EAAAC,CAAA,EAAAA;AAEA,cAAA,EAAAnO,gBAAAiO,CAAA,CAAA,EACA,OAAA,IAAAA,CAAA,CAAAC,CAAA,EAAAC,CAAA,CAAA;AAKA9e,UAAAA,MAAAA,CAAAC,cAAAD,CAAA2Q,IAAA3Q,EAAA,SAAAA,EAAA;AAAgDG,YAAAA,GAAAA,EAAA,YAAA;AAAkB,qBAAA0e,CAAA;AAAAA;AAAlE,WAAA7e,GAGAoG,KAAAA,CAAA2Y,iBAAA3Y,GACAA,KAAAA,CAAA2Y,iBAAA3Y,CAAAuK,IAAAvK,EAAAwY,CAAAxY,CADAA,GAGApG,MAAAA,CAAAC,cAAAD,CAAA2Q,IAAA3Q,EAAA,OAAAA,EAAA;AAAkDO,YAAAA,KAAAA,EAAA,IAAA6F,KAAA,EAAA7F,CAAA0W,KAAA1W,IAAA;AAAlD,WAAAP,CANAA,EAQA8e,CAAAA,IACAR,CAAAA,CAAA3N,IAAA2N,EAAAQ,CAAAR,CATAte;AAoBA;;AAAA,eAAA,CARA4e,CAAAA,CAAA1d,SAAA0d,GAAA5e,MAAAA,CAAAY,MAAAZ,CAAAoG,KAAAA,CAAAlF,SAAAlB,CAQA,EARA+Q,WAQA,GARA6N,CAQA,EANA5e,MAAAA,CAAAC,cAAAD,CAAA4e,CAAAA,CAAA1d,SAAAlB,EAAA,MAAAA,EAAA;AAA0DG,UAAAA,GAAAA,EAAA,YAAA;AAAkB,mBAAAN,CAAA;AAAAA;AAA5E,SAAAG,CAMA,EAJA4e,CAAAA,CAAA1d,SAAA0d,CAAAxM,QAAAwM,GAAA,YAAA;AACA,iBAAAjO,KAAA9Q,IAAA8Q,GAAA,IAAAA,GAAAA,KAAAkO,OAAA;AAAAA,SAGA,EAAAD,CAAA;AAvRAP;;AAAAA,MAAAA,CAAAA,CAAAW,SAAAX,GAAiBhf,CAAAA,CAAQ,EAARA,CAAjBgf,EAGAA,CAAAA,CAAAY,MAAAZ,GAAchf,CAAAA,CAAQ,EAARA,CAHdgf,EAMAA,CAAAA,CAAAa,YAAAb,GAAoBhf,CAAAA,CAAQ,EAARA,CANpBgf,EASAA,CAAAA,CAAAc,KAAAd,GAAahf,CAAAA,CAAQ,EAARA,CATbgf,EAYAA,CAAAA,CAAAe,OAAAf,GAAehf,CAAAA,CAAQ,EAARA,CAZfgf,EAeAA,CAAAA,CAAAgB,IAAAhB,GAAYhf,CAAAA,CAAQ,EAARA,CAfZgf,EAkBAA,CAAAA,CAAAiB,IAAAjB,GAAYhf,CAAAA,CAAQ,EAARA,CAlBZgf,EAqBAA,CAAAA,CAAAkB,QAAAlB,GAAgBhf,CAAAA,CAAQ,EAARA,CArBhBgf,EAwBAA,CAAAA,CAAAD,MAAAC,GAAA,eAAA,OAAAlf,MAAA,IAAAA,MAAA,IAAAA,KACA,CADAA,KACAif,CADAjf,IACAif,CADA,IAEA,eAAA,OAAAoB,IAAA,IAAAA,IAFA,IAGA7O,IA3BA0N,EAmCAA,CAAAA,CAAAoB,UAAApB,GAAAre,MAAAA,CAAA0f,MAAA1f,GAAAA,MAAAA,CAAA0f,MAAA1f,CAAA,EAAAA,CAAAA,GAAA,EAnCAqe,EA0CAA,CAAAA,CAAAsB,WAAAtB,GAAAre,MAAAA,CAAA0f,MAAA1f,GAAAA,MAAAA,CAAA0f,MAAA1f,CAAA,EAAAA,CAAAA,GAAmD,EA1CnDqe,EAkDAA,CAAAA,CAAAuB,MAAAvB,GAAAwB,OAAAA,CAAAxB,CAAAA,CAAAD,MAAAC,CAAAyB,OAAAzB,IAAAA,CAAAA,CAAAD,MAAAC,CAAAyB,OAAAzB,CAAA0B,QAAA1B,IAAAA,CAAAA,CAAAD,MAAAC,CAAAyB,OAAAzB,CAAA0B,QAAA1B,CAAAf,IAAAuC,CAlDAxB,EA0DAA,CAAAA,CAAAzS,SAAAyS,GAAA1S,MAAAA,CAAAC,SAAAD,IAAA,UAAApL,CAAA,EAAAA;AACA,eAAA,YAAA,OAAAA,CAAA,IAAAyf,QAAAA,CAAAzf,CAAAyf,CAAA,IAAA1c,IAAAA,CAAAkC,KAAAlC,CAAA/C,CAAA+C,MAAA/C,CAAA;AAAAA,OA3DA8d,EAmEAA,CAAAA,CAAA4B,QAAA5B,GAAA,UAAA9d,CAAA,EAAAA;AACA,eAAA,YAAA,OAAAA,CAAA,IAAAA,CAAAA,YAAA2f,MAAA;AAAAA,OApEA7B,EA4EAA,CAAAA,CAAA8B,QAAA9B,GAAA,UAAA9d,CAAA,EAAAA;AACA,eAAAA,CAAAA,IAAA,YAAA,OAAAA,CAAA;AAAAA,OA7EA8d,EAwFAA,CAAAA,CAAA+B,KAAA/B,GAQAA,CAAAA,CAAAgC,KAAAhC,GAAA,UAAAiC,CAAA,EAAAC,CAAA,EAAAA;AACA,YAAAhgB,CAAAA,GAAA+f,CAAAA,CAAAC,CAAAD,CAAA;AACA,eAAA,EAAA,QAAA/f,CAAA,IAAAA,CAAA+f,CAAAA,CAAAnf,cAAAmf,CAAAC,CAAAD,CAAA,MACA,YAAA,OAAA/f,CAAA,IAAAA,CAAAkD,KAAAA,CAAAqN,OAAArN,CAAAlD,CAAAkD,IAAAlD,CAAAA,CAAAwB,MAAA0B,GAAAzD,MAAAA,CAAA0e,IAAA1e,CAAAO,CAAAP,EAAA+B,MAAAxB,IAAA,CADA,CAAA;AACA,OAnGA8d,EAkHAA,CAAAA,CAAAtM,MAAAsM,GAAA,YAAA;AACA,YAAA;AACA,cAAAtM,CAAAA,GAAAsM,CAAAA,CAAAe,OAAAf,CAAA,QAAAA,EAAAtM,MAAA;AAEA,iBAAAA,CAAAA,CAAA7Q,SAAA6Q,CAAAyO,SAAAzO,GAAAA,CAAAA,GAAA,IAAA;AACK,SAJL,CAIK,OAAAwH,CAAA,EAAAA;AAEL,iBAAA,IAAA;AAAA;AAPA,OAAA,EAlHA8E,EA8HAA,CAAAA,CAAAoC,YAAApC,GAAA,IA9HAA,EAiIAA,CAAAA,CAAAqC,mBAAArC,GAAA,IAjIAA,EAwIAA,CAAAA,CAAAsC,SAAAtC,GAAA,UAAAuC,CAAA,EAAAA;AAEA,eAAA,YAAA,OAAAA,CAAA,GACAvC,CAAAA,CAAAtM,MAAAsM,GACAA,CAAAA,CAAAqC,mBAAArC,CAAAuC,CAAAvC,CADAA,GAEA,IAAAA,CAAAA,CAAA5a,KAAA,CAAAmd,CAAA,CAHA,GAIAvC,CAAAA,CAAAtM,MAAAsM,GACAA,CAAAA,CAAAoC,YAAApC,CAAAuC,CAAAvC,CADAA,GAEA,eAAA,OAAAhL,UAAA,GACAuN,CADA,GAEA,IAAAvN,UAAA,CAAAuN,CAAA,CARA;AAQAA,OAlJAvC,EAyJAA,CAAAA,CAAA5a,KAAA4a,GAAA,eAAA,OAAAhL,UAAA,GAAAA,UAAA,GAAA5P,KAzJA4a,EAwKAA,CAAAA,CAAAwC,IAAAxC,GAAAA,CAAAA,CAAAD,MAAAC,CAAAyC,OAAAzC,IAAAA,CAAAA,CAAAD,MAAAC,CAAAyC,OAAAzC,CAAAwC,IAAAxC,IACAA,CAAAA,CAAAD,MAAAC,CAAAwC,IADAxC,IAEAA,CAAAA,CAAAe,OAAAf,CAAA,MAAAA,CA1KAA,EAiLAA,CAAAA,CAAA0C,MAAA1C,GAAA,kBAjLAA,EAwLAA,CAAAA,CAAA2C,OAAA3C,GAAA,uBAxLAA,EA+LAA,CAAAA,CAAA4C,OAAA5C,GAAA,4CA/LAA,EAsMAA,CAAAA,CAAA6C,UAAA7C,GAAA,UAAA9d,CAAA,EAAAA;AACA,eAAAA,CAAAA,GACA8d,CAAAA,CAAAkB,QAAAlB,CAAArM,IAAAqM,CAAA9d,CAAA8d,EAAA8C,MAAA9C,EADA9d,GAEA8d,CAAAA,CAAAkB,QAAAlB,CAAA+C,QAFA;AAEAA,OAzMA/C,EAkNAA,CAAAA,CAAAgD,YAAAhD,GAAA,UAAAiD,CAAA,EAAAC,CAAA,EAAAA;AACA,YAAAC,CAAAA,GAAAnD,CAAAA,CAAAkB,QAAAlB,CAAAoD,QAAApD,CAAAiD,CAAAjD,CAAA;AACA,eAAAA,CAAAA,CAAAwC,IAAAxC,GACAA,CAAAA,CAAAwC,IAAAxC,CAAA9J,QAAA8J,CAAAmD,CAAAA,CAAAE,EAAArD,EAAAmD,CAAAA,CAAAG,EAAAtD,EAAAkD,CAAAlD,CADAA,GAEAmD,CAAAA,CAAAjZ,QAAAiZ,CAAA3B,OAAAA,CAAA0B,CAAA1B,CAAA2B,CAFA;AAEAD,OAtNAlD,EAwOAA,CAAAA,CAAAC,KAAAD,GAAAC,CAxOAD,EA+OAA,CAAAA,CAAAuD,OAAAvD,GAAA,UAAAvM,CAAA,EAAAA;AACA,eAAAA,CAAAA,CAAA+P,MAAA/P,CAAA,CAAAA,EAAAgQ,WAAAhQ,KAAAA,CAAAA,CAAAiQ,SAAAjQ,CAAA,CAAAA,CAAA;AAAA,OAhPAuM,EA0RAA,CAAAA,CAAAM,QAAAN,GAAAM,CA1RAN,EA6SAA,CAAAA,CAAA2D,aAAA3D,GAAAM,CAAAA,CAAA,eAAAA,CA7SAN,EAiUAA,CAAAA,CAAA4D,WAAA5D,GAAA,UAAA6D,CAAA,EAAAA;AAEA,aADA,IAAAC,CAAAA,GAAA,EAAA,EACAjjB,CAAAA,GAAA,CAAA,EAAmBA,CAAAA,GAAAgjB,CAAAA,CAAAngB,MAAnB,EAAmBA,EAAuB7C,CAA1C,EACAijB,CAAAA,CAAAD,CAAAA,CAAAhjB,CAAAgjB,CAAAC,CAAAA,GAAA,CAAAA;;AAOA,eAAA,YAAA;AACA,eAAA,IAAAzD,CAAAA,GAAA1e,MAAAA,CAAA0e,IAAA1e,CAAA2Q,IAAA3Q,CAAA,EAAAd,CAAAA,GAAAwf,CAAAA,CAAA3c,MAAA2c,GAAA,CAAA,EAA+Dxf,CAAAA,GAAAA,CAAA,CAA/D,EAA+D,EAAQA,CAAvE,EACA,IAAA,MAAAijB,CAAAA,CAAAzD,CAAAA,CAAAxf,CAAAwf,CAAAyD,CAAA,IAAAjjB,KAAA2D,CAAA3D,KAAAyR,KAAA+N,CAAAA,CAAAxf,CAAAwf,CAAA/N,CAAA,IAAA,SAAAA,KAAA+N,CAAAA,CAAAxf,CAAAwf,CAAA/N,CAAA,EACA,OAAA+N,CAAAA,CAAAxf,CAAAwf,CAAA;AAAAxf,SAHA;AAGAA,OA9UAmf,EA+VAA,CAAAA,CAAA+D,WAAA/D,GAAA,UAAA6D,CAAA,EAAAA;AAQA,eAAA,UAAAriB,CAAA,EAAAA;AACA,eAAA,IAAAX,CAAAA,GAAA,CAAA,EAAuBA,CAAAA,GAAAgjB,CAAAA,CAAAngB,MAAvB,EAAuBA,EAAuB7C,CAA9C,EACAgjB,CAAAA,CAAAhjB,CAAAgjB,CAAAA,KAAAriB,CAAAqiB,IAAAriB,OACA8Q,KAAAuR,CAAAA,CAAAhjB,CAAAgjB,CAAAvR,CADAuR;AACAhjB,SAHA;AAGAA,OA1WAmf,EA8XAA,CAAAA,CAAAgE,aAAAhE,GAAA;AACAiE,QAAAA,KAAAA,EAAApC,MADA;AAEAqC,QAAAA,KAAAA,EAAArC,MAFA;AAGAsC,QAAAA,KAAAA,EAAAtC,MAHA;AAIAuC,QAAAA,IAAAA,EAAAA,CAAA;AAJA,OA9XApE,EAsYAA,CAAAA,CAAAqE,UAAArE,GAAA,YAAA;AACA,YAAAtM,CAAAA,GAAAsM,CAAAA,CAAAtM,MAAA;AAEAA,QAAAA,CAAAA,IAMAsM,CAAAA,CAAAoC,YAAApC,GAAAtM,CAAAA,CAAAC,IAAAD,KAAAsB,UAAAA,CAAArB,IAAAD,IAAAA,CAAAA,CAAAC,IAAAD,IAEA,UAAAxR,CAAA,EAAAoiB,CAAA,EAAAA;AACA,iBAAA,IAAA5Q,CAAA,CAAAxR,CAAA,EAAAoiB,CAAA,CAAA;AAAAA,SAHAtE,EAKAA,CAAAA,CAAAqC,mBAAArC,GAAAtM,CAAAA,CAAA6Q,WAAA7Q,IAEA,UAAApN,CAAA,EAAAA;AACA,iBAAA,IAAAoN,CAAA,CAAApN,CAAA,CAAA;AAAAA,SAdAoN,IACAsM,CAAAA,CAAAoC,YAAApC,GAAAA,CAAAA,CAAAqC,mBAAArC,GAAA,IADAtM;AACA,OA1YAsM;AA0YA,KDnVad,ECmVb,IDnVaA,CCmVb,IDnVaA,ECmVb,CAAA,CAAA,CAAA,CDnVaA;ACmVb,GP5TA,EO4TA,UAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA;AAAA;;AAAA,IAAA,MAAA,CAAA,cAAA,CAAA,CAAA,EAAA,YAAA,EAAA;AAAA,MAAA,KAAA,EAAA,CAAA;AAAA,KAAA,GCjYa1e,CAAAA,CAAAgkB,YAAAhkB,GACT,CAAC,SAAD,EAAY,SAAZ,EAAuB,OAAvB,EAAgC,OAAhC,EAAyC,MAAzC,EAAiD,QAAjD,EAA2D,QAA3D,EAAqE,OAArE,CDgYJ,EC/XaA,CAAAA,CAAAikB,SAAAjkB,GAA4C,CAAC,OAAD,EAAU,OAAV,EAAmB,MAAnB,EAA2B,QAA3B,EAAqC,QAArC,EAA+C,OAA/C,CD+XzD,EC9XaA,CAAAA,CAAAkkB,WAAAlkB,GAA8C,CAAC,SAAD,EAAY,SAAZ,CD8X3D;AC9XuE,GRkEvE,EQlEuE,UAAA,CAAA,EAAA,CAAA,EAAA;AChBvE,QAAAmkB,CAAA;;AAGAA,IAAAA,CAAAA,GAAA,YAAA;AACA,aAAArS,IAAA;AADA,KAAA,EAAAqS;;AAIA,QAAA;AAEAA,MAAAA,CAAAA,GAAAA,CAAAA,IAAA,IAAAC,QAAA,CAAA,aAAA,GAAAD;AACC,KAHD,CAGC,OAAAzJ,CAAA,EAAAA;AAED,kBAAA,OAAApa,MAAA,KAAA6jB,CAAAA,GAAA7jB,MAAA;AAOAL;;AAAAA,IAAAA,CAAAA,CAAAD,OAAAC,GAAAkkB,CAAAlkB;AAAAkkB,GT+DA,ES/DAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AChBA,QAAAE,CAAAA,GAAgB7jB,CAAAA,CAAQ,EAARA,CAAhB;AAAA,QAGA8jB,CAAAA,GAAAD,CAAAA,CAAAE,MAHA;AAAA,QAGAC,CAAAA,GAAAH,CAAAA,CAAAI,MAHA;AAAA,QAGAC,CAAAA,GAAAL,CAAAA,CAAA7E,IAHA;AAAA,QAMAmF,CAAAA,GAAAN,CAAAA,CAAAO,KAAAP,CAAA,OAAAA,KAAAA,CAAAA,CAAAO,KAAAP,CAAA,OAAAA,GAAA,EAAAA,CANA;AAQAM,IAAAA,CAAAA,CAAApc,IAAAoc,GAAA,YAAA;AAOA,UAcAE,CAdA;AAAA,UAc2BC,CAd3B;AAAA,UAAAvc,CAAAA,GAAA,EAAA;AAkwJA,aArvJAA,CAAAA,CAAAwc,OAAAxc,IACAsc,CAAAA,GAAA,EAAAA,EAAA,CAA2BC,CAAAA,GAAA3jB,MAAAA,CAAAY,MAAAZ,CAAA0jB,CAAA1jB,CAA3B,EACA0jB,CAAAA,CAAA,CAAAA,CAAAA,GAAA,gBADA,IACA,CADAA,EAEAC,CAAAA,CAAAD,CAAAA,CAAA,CAAAA,CAAAA,GAAA,uBAAAC,CAAAA,GAAA,CAFAD,EAGAC,CAAAA,CAAAD,CAAAA,CAAA,CAAAA,CAAAA,GAAA,uBAAAC,CAAAA,GAAA,CAHAD,EAIAC,CAAAA,CAAAD,CAAAA,CAAA,CAAAA,CAAAA,GAAA,sBAAAC,CAAAA,GAAA,CAJAD,EAKAC,CAAAA,CAAAD,CAAAA,CAAA,CAAAA,CAAAA,GAAA,sBAAAC,CAAAA,GAAA,CALAD,EAMAC,CAAAA,CAAAD,CAAAA,CAAA,CAAAA,CAAAA,GAAA,YAAAC,CAAAA,GAAA,CANAD,EAOAC,CARAvc,GAWAA,CAAAA,CAAAyc,cAAAzc,GAAA,YAAA;AA8BA,iBAAAyc,CAAA,CAAA/E,CAAA,EAAAA;AAMA,cALAnO,KAAAmT,MAAAnT,GAAA,EAAAA,EACAA,KAAAoT,IAAApT,GAAA,EADAA,EAEAA,KAAAqT,OAAArT,GAAA,EAFAA,EAGAA,KAAAsT,OAAAtT,GAAA,EAHAA,EAIAA,KAAAuT,MAAAvT,GAAA,EAJAA,EAKAmO,CAAA,EACA,KAAA,IAAAJ,CAAAA,GAAA1e,MAAAA,CAAA0e,IAAA1e,CAAA8e,CAAA9e,CAAA,EAAAd,CAAAA,GAAA,CAAA,EAA+DA,CAAAA,GAAAwf,CAAAA,CAAA3c,MAA/D,EAA+DA,EAAiB7C,CAAhF,EACA,QAAA4f,CAAAA,CAAAJ,CAAAA,CAAAxf,CAAAwf,CAAAI,CAAA,KACAnO,KAAA+N,CAAAA,CAAAxf,CAAAwf,CAAA/N,IAAAmO,CAAAA,CAAAJ,CAAAA,CAAAxf,CAAAwf,CAAAI,CADA;AAqqBA;;AAAA,eA3pBA+E,CAAAA,CAAA3iB,SAAA2iB,CAAAhkB,IAAAgkB,GAAA,EAAAA,EAQAA,CAAAA,CAAA3iB,SAAA2iB,CAAAM,WAAAN,GAAA,EARAA,EAgBAA,CAAAA,CAAA3iB,SAAA2iB,CAAAO,SAAAP,GAAA,EAhBAA,EAwBAA,CAAAA,CAAA3iB,SAAA2iB,CAAAhf,IAAAgf,GAAA,CAxBAA,EAgCAA,CAAAA,CAAA3iB,SAAA2iB,CAAAQ,CAAAR,GAAA,CAhCAA,EAwCAA,CAAAA,CAAA3iB,SAAA2iB,CAAA3kB,CAAA2kB,GAAAN,CAAAA,CAAA1C,IAAA0C,GAAAA,CAAAA,CAAA1C,IAAA0C,CAAAhP,QAAAgP,CAAA,CAAAA,EAAA,CAAAA,EAAA,CAAA,CAAAA,CAAAA,GAAA,CAxCAM,EAgDAA,CAAAA,CAAA3iB,SAAA2iB,CAAAxiB,CAAAwiB,GAAAN,CAAAA,CAAA5C,SAAA4C,CAAA,EAAAA,CAhDAM,EAwDAA,CAAAA,CAAA3iB,SAAA2iB,CAAArjB,CAAAqjB,GAAA,IAxDAA,EAgEAA,CAAAA,CAAA3iB,SAAA2iB,CAAAb,CAAAa,GAAA,IAhEAA,EAwEAA,CAAAA,CAAA3iB,SAAA2iB,CAAAC,MAAAD,GAAAN,CAAAA,CAAA9D,UAxEAoE,EAgFAA,CAAAA,CAAA3iB,SAAA2iB,CAAAE,IAAAF,GAAAN,CAAAA,CAAA9D,UAhFAoE,EAwFAA,CAAAA,CAAA3iB,SAAA2iB,CAAAG,OAAAH,GAAAN,CAAAA,CAAA9D,UAxFAoE,EAgGAA,CAAAA,CAAA3iB,SAAA2iB,CAAAI,OAAAJ,GAAAN,CAAAA,CAAA9D,UAhGAoE,EAwGAA,CAAAA,CAAA3iB,SAAA2iB,CAAAK,MAAAL,GAAAN,CAAAA,CAAA9D,UAxGAoE,EAkHAA,CAAAA,CAAAjjB,MAAAijB,GAAA,UAAA/E,CAAA,EAAAA;AACA,iBAAA,IAAA+E,CAAA,CAAA/E,CAAA,CAAA;AAAAA,SAnHA+E,EA+HAA,CAAAA,CAAAS,MAAAT,GAAA,UAAAhF,CAAA,EAAA0F,CAAA,EAAAA;AAeA,cAdAA,CAAAA,KACAA,CAAAA,GAAAlB,CAAAA,CAAAziB,MAAAyiB,EADAkB,CAAAA,EAEA,QAAA1F,CAAAA,CAAAhf,IAAA,IAAAgf,CAAAA,CAAA1d,cAAA0d,CAAA,MAAAA,CAAA,IACA0F,CAAAA,CAAAC,MAAAD,CAAA,EAAAA,EAAAE,MAAAF,CAAA1F,CAAAA,CAAAhf,IAAA0kB,CAHAA,EAIA,QAAA1F,CAAAA,CAAAwF,CAAA,IAAAxF,CAAAA,CAAA1d,cAAA0d,CAAA,GAAAA,CAAA,IACA0F,CAAAA,CAAAC,MAAAD,CAAA,EAAAA,EAAApF,KAAAoF,CAAA1F,CAAAA,CAAAwF,CAAAE,CALAA,EAMA,QAAA1F,CAAAA,CAAA3f,CAAA,IAAA2f,CAAAA,CAAA1d,cAAA0d,CAAA,GAAAA,CAAA,IACA0F,CAAAA,CAAAC,MAAAD,CAAA,EAAAA,EAAAG,KAAAH,CAAA1F,CAAAA,CAAA3f,CAAAqlB,CAPAA,EAQA,QAAA1F,CAAAA,CAAAxd,CAAA,IAAAwd,CAAAA,CAAA1d,cAAA0d,CAAA,GAAAA,CAAA,IACA0F,CAAAA,CAAAC,MAAAD,CAAA,EAAAA,EAAA/B,KAAA+B,CAAA1F,CAAAA,CAAAxd,CAAAkjB,CATAA,EAUA,QAAA1F,CAAAA,CAAAre,CAAA,IAAAqe,CAAAA,CAAA1d,cAAA0d,CAAA,GAAAA,CAAA,IACA2E,CAAAA,CAAApc,IAAAoc,CAAAnc,WAAAmc,CAAAc,MAAAd,CAAA3E,CAAAA,CAAAre,CAAAgjB,EAAAe,CAAAA,CAAAC,MAAAD,CAAA,EAAAA,EAAAI,IAAAJ,EAAAf,EAAAoB,MAAApB,EAXAe,EAYA,QAAA1F,CAAAA,CAAAmE,CAAA,IAAAnE,CAAAA,CAAA1d,cAAA0d,CAAA,GAAAA,CAAA,IACA2E,CAAAA,CAAApc,IAAAoc,CAAAqB,UAAArB,CAAAc,MAAAd,CAAA3E,CAAAA,CAAAmE,CAAAQ,EAAAe,CAAAA,CAAAC,MAAAD,CAAA,EAAAA,EAAAI,IAAAJ,EAAAf,EAAAoB,MAAApB,EAbAe,EAcA,QAAA1F,CAAAA,CAAAiF,MAAA,IAAAjF,CAAAA,CAAAiF,MAAAjF,CAAA9c,MAAA,EAAA;AACAwiB,YAAAA,CAAAA,CAAAC,MAAAD,CAAA,EAAAA,EAAAI,IAAAJ;;AACA,iBAAA,IAAArlB,CAAAA,GAAA,CAAA,EAA+BA,CAAAA,GAAA2f,CAAAA,CAAAiF,MAAAjF,CAAA9c,MAA/B,EAA+BA,EAA2B7C,CAA1D,EACAqlB,CAAAA,CAAApF,KAAAoF,CAAA1F,CAAAA,CAAAiF,MAAAjF,CAAA3f,CAAA2f,CAAA0F;;AACAA,YAAAA,CAAAA,CAAAK,MAAAL;AAEA;;AAAA,cAAA,QAAA1F,CAAAA,CAAAkF,IAAA,IAAAlF,CAAAA,CAAAkF,IAAAlF,CAAA9c,MAAA,EAAA;AACAwiB,YAAAA,CAAAA,CAAAC,MAAAD,CAAA,EAAAA,EAAAI,IAAAJ;;AACA,iBAAArlB,CAAAA,GAAA,CAAA,EAA+BA,CAAAA,GAAA2f,CAAAA,CAAAkF,IAAAlF,CAAA9c,MAA/B,EAA+BA,EAAyB7C,CAAxD,EACAqlB,CAAAA,CAAAG,KAAAH,CAAA1F,CAAAA,CAAAkF,IAAAlF,CAAA3f,CAAA2f,CAAA0F;;AACAA,YAAAA,CAAAA,CAAAK,MAAAL;AAEA;;AAAA,cAAA,QAAA1F,CAAAA,CAAAmF,OAAA,IAAAnF,CAAAA,CAAAmF,OAAAnF,CAAA9c,MAAA,EACA,KAAA7C,CAAAA,GAAA,CAAA,EAA+BA,CAAAA,GAAA2f,CAAAA,CAAAmF,OAAAnF,CAAA9c,MAA/B,EAA+BA,EAA4B7C,CAA3D,EACAqlB,CAAAA,CAAAC,MAAAD,CAAA,EAAAA,EAAA/B,KAAA+B,CAAA1F,CAAAA,CAAAmF,OAAAnF,CAAA3f,CAAA2f,CAAA0F;AACA,cAAA,QAAA1F,CAAAA,CAAAoF,OAAA,IAAApF,CAAAA,CAAAoF,OAAApF,CAAA9c,MAAA,EACA,KAAA7C,CAAAA,GAAA,CAAA,EAA+BA,CAAAA,GAAA2f,CAAAA,CAAAoF,OAAApF,CAAA9c,MAA/B,EAA+BA,EAA4B7C,CAA3D,EACAskB,CAAAA,CAAApc,IAAAoc,CAAAnc,WAAAmc,CAAAc,MAAAd,CAAA3E,CAAAA,CAAAoF,OAAApF,CAAA3f,CAAA2f,CAAA2E,EAAAe,CAAAA,CAAAC,MAAAD,CAAA,EAAAA,EAAAI,IAAAJ,EAAAf,EAAAoB,MAAApB;AACA,cAAA,QAAA3E,CAAAA,CAAAqF,MAAA,IAAArF,CAAAA,CAAAqF,MAAArF,CAAA9c,MAAA,EACA,KAAA7C,CAAAA,GAAA,CAAA,EAA+BA,CAAAA,GAAA2f,CAAAA,CAAAqF,MAAArF,CAAA9c,MAA/B,EAA+BA,EAA2B7C,CAA1D,EACAskB,CAAAA,CAAApc,IAAAoc,CAAAqB,UAAArB,CAAAc,MAAAd,CAAA3E,CAAAA,CAAAqF,MAAArF,CAAA3f,CAAA2f,CAAA2E,EAAAe,CAAAA,CAAAC,MAAAD,CAAA,EAAAA,EAAAI,IAAAJ,EAAAf,EAAAoB,MAAApB;AAOA,iBANA,QAAA3E,CAAAA,CAAAuF,SAAA,IAAAvF,CAAAA,CAAA1d,cAAA0d,CAAA,WAAAA,CAAA,IACA0F,CAAAA,CAAAC,MAAAD,CAAA,GAAAA,EAAAE,MAAAF,CAAA1F,CAAAA,CAAAuF,SAAAG,CADA,EAEA,QAAA1F,CAAAA,CAAAha,IAAA,IAAAga,CAAAA,CAAA1d,cAAA0d,CAAA,MAAAA,CAAA,IACA0F,CAAAA,CAAAC,MAAAD,CAAA,GAAAA,EAAAO,KAAAP,CAAA1F,CAAAA,CAAAha,IAAA0f,CAHA,EAIA,QAAA1F,CAAAA,CAAAsF,WAAA,IAAAtF,CAAAA,CAAA1d,cAAA0d,CAAA,aAAAA,CAAA,IACA0F,CAAAA,CAAAC,MAAAD,CAAA,GAAAA,EAAAE,MAAAF,CAAA1F,CAAAA,CAAAsF,WAAAI,CALA,EAMAA,CAAA;AAAAA,SAzKAV,EAqLAA,CAAAA,CAAAkB,eAAAlB,GAAA,UAAAhF,CAAA,EAAA0F,CAAA,EAAAA;AACA,iBAAA5T,KAAA2T,MAAA3T,CAAAkO,CAAAlO,EAAA4T,CAAA5T,EAAAiU,MAAAjU,EAAA;AAAAiU,SAtLAf,EAoMAA,CAAAA,CAAAmB,MAAAnB,GAAA,UAAAoB,CAAA,EAAAljB,CAAA,EAAAA;AACAkjB,UAAAA,CAAAA,YAAA9B,CAAA8B,KACAA,CAAAA,GAAA9B,CAAAA,CAAAviB,MAAAuiB,CAAA8B,CAAA9B,CADA8B;;AAGA,eADA,IAAA5b,CAAAA,GAAAA,KAAAxG,CAAAwG,KAAAtH,CAAAsH,GAAA4b,CAAAA,CAAAC,GAAA7b,GAAA4b,CAAAA,CAAArW,GAAAqW,GAAAljB,CAAA,EAAA8c,CAAAA,GAAA,IAAA2E,CAAAA,CAAApc,IAAAoc,CAAAK,cAAA,EACA,EAAAoB,CAAAA,CAAArW,GAAAqW,GAAA5b,CAAA,GAAA;AACA,gBAAA8b,CAAAA,GAAAF,CAAAA,CAAAT,MAAAS,EAAA;;AACA,oBAAAE,CAAAA,KAAA,CAAA;AACA,mBAAA,CAAA;AACAtG,gBAAAA,CAAAA,CAAAhf,IAAAgf,GAAAoG,CAAAA,CAAAR,MAAAQ,EAAApG;AACA;;AACA,mBAAA,EAAA;AACAA,gBAAAA,CAAAA,CAAAsF,WAAAtF,GAAAoG,CAAAA,CAAAR,MAAAQ,EAAApG;AACA;;AACA,mBAAA,EAAA;AACAA,gBAAAA,CAAAA,CAAAuF,SAAAvF,GAAAoG,CAAAA,CAAAR,MAAAQ,EAAApG;AACA;;AACA,mBAAA,EAAA;AACAA,gBAAAA,CAAAA,CAAAha,IAAAga,GAAAoG,CAAAA,CAAAH,KAAAG,EAAApG;AACA;;AACA,mBAAA,CAAA;AACAA,gBAAAA,CAAAA,CAAAwF,CAAAxF,GAAAoG,CAAAA,CAAA9F,KAAA8F,EAAApG;AACA;;AACA,mBAAA,CAAA;AACAA,gBAAAA,CAAAA,CAAA3f,CAAA2f,GAAAoG,CAAAA,CAAAP,KAAAO,EAAApG;AACA;;AACA,mBAAA,CAAA;AACAA,gBAAAA,CAAAA,CAAAxd,CAAAwd,GAAAoG,CAAAA,CAAAzC,KAAAyC,EAAApG;AACA;;AACA,mBAAA,CAAA;AACAA,gBAAAA,CAAAA,CAAAre,CAAAqe,GAAA2E,CAAAA,CAAApc,IAAAoc,CAAAnc,WAAAmc,CAAAwB,MAAAxB,CAAAyB,CAAAzB,EAAAyB,CAAAA,CAAAT,MAAAS,EAAAzB,CAAA3E;AACA;;AACA,mBAAA,CAAA;AACAA,gBAAAA,CAAAA,CAAAmE,CAAAnE,GAAA2E,CAAAA,CAAApc,IAAAoc,CAAAqB,UAAArB,CAAAwB,MAAAxB,CAAAyB,CAAAzB,EAAAyB,CAAAA,CAAAT,MAAAS,EAAAzB,CAAA3E;AACA;;AACA,mBAAA,CAAA;AAGA,oBAFAA,CAAAA,CAAAiF,MAAAjF,IAAAA,CAAAA,CAAAiF,MAAAjF,CAAA9c,MAAA8c,KACAA,CAAAA,CAAAiF,MAAAjF,GAAA,EADAA,GAEA,MAAA,IAAAsG,CAAA,CAAA,EAEA,KADA,IAAAC,CAAAA,GAAAH,CAAAA,CAAAT,MAAAS,KAAAA,CAAAA,CAAArW,GACA,EAAAqW,CAAAA,CAAArW,GAAAqW,GAAAG,CAAA,GACAvG,CAAAA,CAAAiF,MAAAjF,CAAApS,IAAAoS,CAAAoG,CAAAA,CAAA9F,KAAA8F,EAAApG,EAHA,KAKAA,CAAAA,CAAAiF,MAAAjF,CAAApS,IAAAoS,CAAAoG,CAAAA,CAAA9F,KAAA8F,EAAApG;AACA;;AACA,mBAAA,CAAA;AAGA,oBAFAA,CAAAA,CAAAkF,IAAAlF,IAAAA,CAAAA,CAAAkF,IAAAlF,CAAA9c,MAAA8c,KACAA,CAAAA,CAAAkF,IAAAlF,GAAA,EADAA,GAEA,MAAA,IAAAsG,CAAA,CAAA,EAEA,KADAC,CAAAA,GAAAH,CAAAA,CAAAT,MAAAS,KAAAA,CAAAA,CAAArW,GACA,EAAAqW,CAAAA,CAAArW,GAAAqW,GAAAG,CAAA,GACAvG,CAAAA,CAAAkF,IAAAlF,CAAApS,IAAAoS,CAAAoG,CAAAA,CAAAP,KAAAO,EAAApG,EAHA,KAKAA,CAAAA,CAAAkF,IAAAlF,CAAApS,IAAAoS,CAAAoG,CAAAA,CAAAP,KAAAO,EAAApG;AACA;;AACA,mBAAA,CAAA;AACAA,gBAAAA,CAAAA,CAAAmF,OAAAnF,IAAAA,CAAAA,CAAAmF,OAAAnF,CAAA9c,MAAA8c,KACAA,CAAAA,CAAAmF,OAAAnF,GAAA,EADAA,GAEAA,CAAAA,CAAAmF,OAAAnF,CAAApS,IAAAoS,CAAAoG,CAAAA,CAAAzC,KAAAyC,EAAApG,CAFAA;AAGA;;AACA,mBAAA,EAAA;AACAA,gBAAAA,CAAAA,CAAAoF,OAAApF,IAAAA,CAAAA,CAAAoF,OAAApF,CAAA9c,MAAA8c,KACAA,CAAAA,CAAAoF,OAAApF,GAAA,EADAA,GAEAA,CAAAA,CAAAoF,OAAApF,CAAApS,IAAAoS,CAAA2E,CAAAA,CAAApc,IAAAoc,CAAAnc,WAAAmc,CAAAwB,MAAAxB,CAAAyB,CAAAzB,EAAAyB,CAAAA,CAAAT,MAAAS,EAAAzB,CAAA3E,CAFAA;AAGA;;AACA,mBAAA,EAAA;AACAA,gBAAAA,CAAAA,CAAAqF,MAAArF,IAAAA,CAAAA,CAAAqF,MAAArF,CAAA9c,MAAA8c,KACAA,CAAAA,CAAAqF,MAAArF,GAAA,EADAA,GAEAA,CAAAA,CAAAqF,MAAArF,CAAApS,IAAAoS,CAAA2E,CAAAA,CAAApc,IAAAoc,CAAAqB,UAAArB,CAAAwB,MAAAxB,CAAAyB,CAAAzB,EAAAyB,CAAAA,CAAAT,MAAAS,EAAAzB,CAAA3E,CAFAA;AAGA;;AACA;AACAoG,gBAAAA,CAAAA,CAAAI,QAAAJ,CAAA,IAAAE,CAAAF;AAhEA;AAoEA;;AAAA,iBAAApG,CAAA;AAAAA,SA9QAgF,EA2RAA,CAAAA,CAAAyB,eAAAzB,GAAA,UAAAoB,CAAA,EAAAA;AAGA,iBAFAA,CAAAA,YAAA9B,CAAA8B,KACAA,CAAAA,GAAA,IAAA9B,CAAA,CAAA8B,CAAA,CADAA,GAEAtU,KAAAqU,MAAArU,CAAAsU,CAAAtU,EAAAsU,CAAAA,CAAAT,MAAAS,EAAAtU,CAAA;AAAA6T,SA9RAX,EAySAA,CAAAA,CAAA0B,MAAA1B,GAAA,UAAAhF,CAAA,EAAAA;AACA,cAAA,YAAA,OAAAA,CAAA,IAAA,SAAAA,CAAA,EACA,OAAA,iBAAA;AACA,cAAA,QAAAA,CAAAA,CAAAhf,IAAA,IAAAgf,CAAAA,CAAA1d,cAAA0d,CAAA,MAAAA,CAAA,IAAA,CACA0E,CAAAA,CAAAtD,QAAAsD,CAAA1E,CAAAA,CAAAhf,IAAA0jB,CADA,EAEA,OAAA,uBAAA;AACA,cAAA,QAAA1E,CAAAA,CAAAsF,WAAA,IAAAtF,CAAAA,CAAA1d,cAAA0d,CAAA,aAAAA,CAAA,IAAA,CACA0E,CAAAA,CAAAtD,QAAAsD,CAAA1E,CAAAA,CAAAsF,WAAAZ,CADA,EAEA,OAAA,8BAAA;AACA,cAAA,QAAA1E,CAAAA,CAAAuF,SAAA,IAAAvF,CAAAA,CAAA1d,cAAA0d,CAAA,WAAAA,CAAA,IAAA,CACA0E,CAAAA,CAAAtD,QAAAsD,CAAA1E,CAAAA,CAAAuF,SAAAb,CADA,EAEA,OAAA,4BAAA;AACA,cAAA,QAAA1E,CAAAA,CAAAha,IAAA,IAAAga,CAAAA,CAAA1d,cAAA0d,CAAA,MAAAA,CAAA,EACA,QAAAA,CAAAA,CAAAha,IAAA;AACA;AACA,qBAAA,2BAAA;;AACA,iBAAA,CAAA;AACA,iBAAA,CAAA;AACA,iBAAA,CAAA;AACA,iBAAA,CAAA;AACA,iBAAA,CAAA;AACA,iBAAA,CAAA;AACA,iBAAA,CAAA;AACA,iBAAA,CAAA;AACA,iBAAA,CAAA;AACA,iBAAA,CAAA;AACA,iBAAA,EAAA;AAbA;AAgBA,cAAA,QAAAga,CAAAA,CAAAwF,CAAA,IAAAxF,CAAAA,CAAA1d,cAAA0d,CAAA,GAAAA,CAAA,IACA,YAAA,OAAAA,CAAAA,CAAAwF,CADA,EAEA,OAAA,oBAAA;AACA,cAAA,QAAAxF,CAAAA,CAAA3f,CAAA,IAAA2f,CAAAA,CAAA1d,cAAA0d,CAAA,GAAAA,CAAA,IAAA,EACA0E,CAAAA,CAAA3X,SAAA2X,CAAA1E,CAAAA,CAAA3f,CAAAqkB,KAAA1E,CAAAA,CAAA3f,CAAA2f,IAAA0E,CAAAA,CAAA3X,SAAA2X,CAAA1E,CAAAA,CAAA3f,CAAA2f,CAAA2G,GAAAjC,CAAA1E,IAAA0E,CAAAA,CAAA3X,SAAA2X,CAAA1E,CAAAA,CAAA3f,CAAA2f,CAAA4G,IAAAlC,CADA,CAAA,EAEA,OAAA,0BAAA;AACA,cAAA,QAAA1E,CAAAA,CAAAxd,CAAA,IAAAwd,CAAAA,CAAA1d,cAAA0d,CAAA,GAAAA,CAAA,IAAA,EACAA,CAAAA,CAAAxd,CAAAwd,IAAA,YAAA,OAAAA,CAAAA,CAAAxd,CAAAwd,CAAA9c,MAAA8c,IAAA0E,CAAAA,CAAAtD,QAAAsD,CAAA1E,CAAAA,CAAAxd,CAAAkiB,CADA,CAAA,EAEA,OAAA,oBAAA;AACA,cAAA,QAAA1E,CAAAA,CAAAre,CAAA,IAAAqe,CAAAA,CAAA1d,cAAA0d,CAAA,GAAAA,CAAA,KACAzI,CAAAA,GAAAoN,CAAAA,CAAApc,IAAAoc,CAAAnc,WAAAmc,CAAA+B,MAAA/B,CAAA3E,CAAAA,CAAAre,CAAAgjB,CADA,CAAA,EAGA,OAAA,OAAApN,CAAA;AAEA,cAAA,QAAAyI,CAAAA,CAAAmE,CAAA,IAAAnE,CAAAA,CAAA1d,cAAA0d,CAAA,GAAAA,CAAA,KACAzI,CAAAA,GAAAoN,CAAAA,CAAApc,IAAAoc,CAAAqB,UAAArB,CAAA+B,MAAA/B,CAAA3E,CAAAA,CAAAmE,CAAAQ,CADA,CAAA,EAGA,OAAA,OAAApN,CAAA;;AAEA,cAAA,QAAAyI,CAAAA,CAAAiF,MAAA,IAAAjF,CAAAA,CAAA1d,cAAA0d,CAAA,QAAAA,CAAA,EAAA;AACA,gBAAA,CAAApb,KAAAA,CAAAqN,OAAArN,CAAAob,CAAAA,CAAAiF,MAAArgB,CAAA,EACA,OAAA,wBAAA;;AACA,iBAAA,IAAAvE,CAAAA,GAAA,CAAA,EAA+BA,CAAAA,GAAA2f,CAAAA,CAAAiF,MAAAjF,CAAA9c,MAA/B,EAA+BA,EAA2B7C,CAA1D,EACA,IAAA,YAAA,OAAA2f,CAAAA,CAAAiF,MAAAjF,CAAA3f,CAAA2f,CAAA,EACA,OAAA,2BAAA;AAEA;;AAAA,cAAA,QAAAA,CAAAA,CAAAkF,IAAA,IAAAlF,CAAAA,CAAA1d,cAAA0d,CAAA,MAAAA,CAAA,EAAA;AACA,gBAAA,CAAApb,KAAAA,CAAAqN,OAAArN,CAAAob,CAAAA,CAAAkF,IAAAtgB,CAAA,EACA,OAAA,sBAAA;;AACA,iBAAAvE,CAAAA,GAAA,CAAA,EAA+BA,CAAAA,GAAA2f,CAAAA,CAAAkF,IAAAlF,CAAA9c,MAA/B,EAA+BA,EAAyB7C,CAAxD,EACA,IAAA,EAAAqkB,CAAAA,CAAA3X,SAAA2X,CAAA1E,CAAAA,CAAAkF,IAAAlF,CAAA3f,CAAA2f,CAAA0E,KAAA1E,CAAAA,CAAAkF,IAAAlF,CAAA3f,CAAA2f,KAAA0E,CAAAA,CAAA3X,SAAA2X,CAAA1E,CAAAA,CAAAkF,IAAAlF,CAAA3f,CAAA2f,EAAA2G,GAAAjC,CAAA1E,IAAA0E,CAAAA,CAAA3X,SAAA2X,CAAA1E,CAAAA,CAAAkF,IAAAlF,CAAA3f,CAAA2f,EAAA4G,IAAAlC,CAAA,CAAA,EACA,OAAA,+BAAA;AAEA;;AAAA,cAAA,QAAA1E,CAAAA,CAAAmF,OAAA,IAAAnF,CAAAA,CAAA1d,cAAA0d,CAAA,SAAAA,CAAA,EAAA;AACA,gBAAA,CAAApb,KAAAA,CAAAqN,OAAArN,CAAAob,CAAAA,CAAAmF,OAAAvgB,CAAA,EACA,OAAA,yBAAA;;AACA,iBAAAvE,CAAAA,GAAA,CAAA,EAA+BA,CAAAA,GAAA2f,CAAAA,CAAAmF,OAAAnF,CAAA9c,MAA/B,EAA+BA,EAA4B7C,CAA3D,EACA,IAAA,EAAA2f,CAAAA,CAAAmF,OAAAnF,CAAA3f,CAAA2f,KAAA,YAAA,OAAAA,CAAAA,CAAAmF,OAAAnF,CAAA3f,CAAA2f,EAAA9c,MAAA8c,IAAA0E,CAAAA,CAAAtD,QAAAsD,CAAA1E,CAAAA,CAAAmF,OAAAnF,CAAA3f,CAAA2f,CAAA0E,CAAA,CAAA,EACA,OAAA,4BAAA;AAEA;;AAAA,cAAA,QAAA1E,CAAAA,CAAAoF,OAAA,IAAApF,CAAAA,CAAA1d,cAAA0d,CAAA,SAAAA,CAAA,EAAA;AACA,gBAAA,CAAApb,KAAAA,CAAAqN,OAAArN,CAAAob,CAAAA,CAAAoF,OAAAxgB,CAAA,EACA,OAAA,yBAAA;;AACA,iBAAAvE,CAAAA,GAAA,CAAA,EAA+BA,CAAAA,GAAA2f,CAAAA,CAAAoF,OAAApF,CAAA9c,MAA/B,EAA+BA,EAA4B7C,CAA3D,EAA2D;AAE3D,kBADAkX,CAAAA,GAAAoN,CAAAA,CAAApc,IAAAoc,CAAAnc,WAAAmc,CAAA+B,MAAA/B,CAAA3E,CAAAA,CAAAoF,OAAApF,CAAA3f,CAAA2f,CAAA2E,CACA,EACA,OAAA,aAAApN,CAAA;AAAAA;AAGA;;AAAA,cAAA,QAAAyI,CAAAA,CAAAqF,MAAA,IAAArF,CAAAA,CAAA1d,cAAA0d,CAAA,QAAAA,CAAA,EAAA;AACA,gBAAA,CAAApb,KAAAA,CAAAqN,OAAArN,CAAAob,CAAAA,CAAAqF,MAAAzgB,CAAA,EACA,OAAA,wBAAA;;AACA,iBAAAvE,CAAAA,GAAA,CAAA,EAA+BA,CAAAA,GAAA2f,CAAAA,CAAAqF,MAAArF,CAAA9c,MAA/B,EAA+BA,EAA2B7C,CAA1D,EAA0D;AAC1D,kBAAAkX,CAAA;AACA,kBADAA,CAAAA,GAAAoN,CAAAA,CAAApc,IAAAoc,CAAAqB,UAAArB,CAAA+B,MAAA/B,CAAA3E,CAAAA,CAAAqF,MAAArF,CAAA3f,CAAA2f,CAAA2E,CACA,EACA,OAAA,YAAApN,CAAA;AAAAA;AAGA;;AAAA,iBAAA,IAAA;AAAA,SAhYAyN,EA2YAA,CAAAA,CAAA6B,UAAA7B,GAAA,UAAA7iB,CAAA,EAAAA;AACA,cAAAA,CAAAA,YAAAwiB,CAAAA,CAAApc,IAAAoc,CAAAK,cAAA,EACA,OAAA7iB,CAAA;AACA,cAAA6d,CAAAA,GAAA,IAAA2E,CAAAA,CAAApc,IAAAoc,CAAAK,cAAA,EAAA;;AAOA,kBANA,QAAA7iB,CAAAA,CAAAnB,IAAA,KACAgf,CAAAA,CAAAhf,IAAAgf,GAAAqB,MAAAA,CAAAlf,CAAAA,CAAAnB,IAAAqgB,CADA,GAEA,QAAAlf,CAAAA,CAAAmjB,WAAA,KACAtF,CAAAA,CAAAsF,WAAAtF,GAAAqB,MAAAA,CAAAlf,CAAAA,CAAAmjB,WAAAjE,CADA,CAFA,EAIA,QAAAlf,CAAAA,CAAAojB,SAAA,KACAvF,CAAAA,CAAAuF,SAAAvF,GAAAqB,MAAAA,CAAAlf,CAAAA,CAAAojB,SAAAlE,CADA,CAJA,EAMAlf,CAAAA,CAAA6D,IAAA;AACA,iBAAA,WAAA;AACA,iBAAA,CAAA;AACAga,cAAAA,CAAAA,CAAAha,IAAAga,GAAA,CAAAA;AACA;;AACA,iBAAA,OAAA;AACA,iBAAA,CAAA;AACAA,cAAAA,CAAAA,CAAAha,IAAAga,GAAA,CAAAA;AACA;;AACA,iBAAA,KAAA;AACA,iBAAA,CAAA;AACAA,cAAAA,CAAAA,CAAAha,IAAAga,GAAA,CAAAA;AACA;;AACA,iBAAA,QAAA;AACA,iBAAA,CAAA;AACAA,cAAAA,CAAAA,CAAAha,IAAAga,GAAA,CAAAA;AACA;;AACA,iBAAA,QAAA;AACA,iBAAA,CAAA;AACAA,cAAAA,CAAAA,CAAAha,IAAAga,GAAA,CAAAA;AACA;;AACA,iBAAA,OAAA;AACA,iBAAA,CAAA;AACAA,cAAAA,CAAAA,CAAAha,IAAAga,GAAA,CAAAA;AACA;;AACA,iBAAA,QAAA;AACA,iBAAA,CAAA;AACAA,cAAAA,CAAAA,CAAAha,IAAAga,GAAA,CAAAA;AACA;;AACA,iBAAA,MAAA;AACA,iBAAA,CAAA;AACAA,cAAAA,CAAAA,CAAAha,IAAAga,GAAA,CAAAA;AACA;;AACA,iBAAA,SAAA;AACA,iBAAA,CAAA;AACAA,cAAAA,CAAAA,CAAAha,IAAAga,GAAA,CAAAA;AACA;;AACA,iBAAA,SAAA;AACA,iBAAA,CAAA;AACAA,cAAAA,CAAAA,CAAAha,IAAAga,GAAA,CAAAA;AACA;;AACA,iBAAA,QAAA;AACA,iBAAA,EAAA;AACAA,cAAAA,CAAAA,CAAAha,IAAAga,GAAA,EAAAA;AA3CA;;AA8DA,cAhBA,QAAA7d,CAAAA,CAAAqjB,CAAA,KACAxF,CAAAA,CAAAwF,CAAAxF,GAAAlT,MAAAA,CAAA3K,CAAAA,CAAAqjB,CAAA1Y,CADA,GAEA,QAAA3K,CAAAA,CAAA9B,CAAA,KACAqkB,CAAAA,CAAA1C,IAAA0C,GAAA1C,CACAhC,CAAAA,CAAA3f,CAAA2f,GAAA0E,CAAAA,CAAA1C,IAAA0C,CAAAoC,SAAApC,CAAAviB,CAAAA,CAAA9B,CAAAqkB,CADA1C,EACAU,QADAV,GACAU,CAAA,CADAgC,GAEA,YAAA,OAAAviB,CAAAA,CAAA9B,CAAA,GACA2f,CAAAA,CAAA3f,CAAA2f,GAAA+G,QAAAA,CAAA5kB,CAAAA,CAAA9B,CAAA0mB,EAAA,EAAAA,CADA,GAEA,YAAA,OAAA5kB,CAAAA,CAAA9B,CAAA,GACA2f,CAAAA,CAAA3f,CAAA2f,GAAA7d,CAAAA,CAAA9B,CADA,GAEA,YAAA,OAAA8B,CAAAA,CAAA9B,CAAA,KACA2f,CAAAA,CAAA3f,CAAA2f,GAAA,IAAA0E,CAAAA,CAAAhE,QAAA,CAAAve,CAAAA,CAAA9B,CAAA8B,CAAAwkB,GAAAxkB,KAAA,CAAA,EAAAA,CAAAA,CAAA9B,CAAA8B,CAAAykB,IAAAzkB,KAAA,CAAA,EAAAuH,QAAA,EADA,CAPA,CAFA,EAWA,QAAAvH,CAAAA,CAAAK,CAAA,KACA,YAAA,OAAAL,CAAAA,CAAAK,CAAA,GACAkiB,CAAAA,CAAAtE,MAAAsE,CAAAyB,MAAAzB,CAAAviB,CAAAA,CAAAK,CAAAkiB,EAAA1E,CAAAA,CAAAxd,CAAAwd,GAAA0E,CAAAA,CAAA5C,SAAA4C,CAAAA,CAAAA,CAAAtE,MAAAsE,CAAAxhB,MAAAwhB,CAAAviB,CAAAA,CAAAK,CAAAkiB,CAAAA,CAAAA,EAAA,CAAAA,CADA,GAEAviB,CAAAA,CAAAK,CAAAL,CAAAe,MAAAf,KACA6d,CAAAA,CAAAxd,CAAAwd,GAAA7d,CAAAA,CAAAK,CADAL,CAHA,CAXA,EAgBA,QAAAA,CAAAA,CAAAR,CAAA,EAAA;AACA,gBAAA,YAAA,OAAAQ,CAAAA,CAAAR,CAAA,EACA,MAAA6K,SAAAA,CAAA,yCAAAA,CAAA;AACAwT,YAAAA,CAAAA,CAAAre,CAAAqe,GAAA2E,CAAAA,CAAApc,IAAAoc,CAAAnc,WAAAmc,CAAAkC,UAAAlC,CAAAxiB,CAAAA,CAAAR,CAAAgjB,CAAA3E;AAEA;;AAAA,cAAA,QAAA7d,CAAAA,CAAAgiB,CAAA,EAAA;AACA,gBAAA,YAAA,OAAAhiB,CAAAA,CAAAgiB,CAAA,EACA,MAAA3X,SAAAA,CAAA,yCAAAA,CAAA;AACAwT,YAAAA,CAAAA,CAAAmE,CAAAnE,GAAA2E,CAAAA,CAAApc,IAAAoc,CAAAqB,UAAArB,CAAAkC,UAAAlC,CAAAxiB,CAAAA,CAAAgiB,CAAAQ,CAAA3E;AAEA;;AAAA,cAAA7d,CAAAA,CAAA8iB,MAAA,EAAA;AACA,gBAAA,CAAArgB,KAAAA,CAAAqN,OAAArN,CAAAzC,CAAAA,CAAA8iB,MAAArgB,CAAA,EACA,MAAA4H,SAAAA,CAAA,6CAAAA,CAAA;AACAwT,YAAAA,CAAAA,CAAAiF,MAAAjF,GAAA,EAAAA;;AACA,iBAAA,IAAA3f,CAAAA,GAAA,CAAA,EAA+BA,CAAAA,GAAA8B,CAAAA,CAAA8iB,MAAA9iB,CAAAe,MAA/B,EAA+BA,EAA0B7C,CAAzD,EACA2f,CAAAA,CAAAiF,MAAAjF,CAAA3f,CAAA2f,IAAAlT,MAAAA,CAAA3K,CAAAA,CAAA8iB,MAAA9iB,CAAA9B,CAAA8B,CAAA2K,CAAAkT;AAEA;;AAAA,cAAA7d,CAAAA,CAAA+iB,IAAA,EAAA;AACA,gBAAA,CAAAtgB,KAAAA,CAAAqN,OAAArN,CAAAzC,CAAAA,CAAA+iB,IAAAtgB,CAAA,EACA,MAAA4H,SAAAA,CAAA,2CAAAA,CAAA;AACAwT,YAAAA,CAAAA,CAAAkF,IAAAlF,GAAA,EAAAA;;AACA,iBAAA3f,CAAAA,GAAA,CAAA,EAA+BA,CAAAA,GAAA8B,CAAAA,CAAA+iB,IAAA/iB,CAAAe,MAA/B,EAA+BA,EAAwB7C,CAAvD,EACAqkB,CAAAA,CAAA1C,IAAA0C,GAAA1C,CACAhC,CAAAA,CAAAkF,IAAAlF,CAAA3f,CAAA2f,IAAA0E,CAAAA,CAAA1C,IAAA0C,CAAAoC,SAAApC,CAAAviB,CAAAA,CAAA+iB,IAAA/iB,CAAA9B,CAAA8B,CAAAuiB,CADA1C,EACAU,QADAV,GACAU,CAAA,CADAgC,GAEA,YAAA,OAAAviB,CAAAA,CAAA+iB,IAAA/iB,CAAA9B,CAAA8B,CAAA,GACA6d,CAAAA,CAAAkF,IAAAlF,CAAA3f,CAAA2f,IAAA+G,QAAAA,CAAA5kB,CAAAA,CAAA+iB,IAAA/iB,CAAA9B,CAAA8B,CAAA4kB,EAAA,EAAAA,CADA,GAEA,YAAA,OAAA5kB,CAAAA,CAAA+iB,IAAA/iB,CAAA9B,CAAA8B,CAAA,GACA6d,CAAAA,CAAAkF,IAAAlF,CAAA3f,CAAA2f,IAAA7d,CAAAA,CAAA+iB,IAAA/iB,CAAA9B,CAAA8B,CADA,GAEA,YAAA,OAAAA,CAAAA,CAAA+iB,IAAA/iB,CAAA9B,CAAA8B,CAAA,KACA6d,CAAAA,CAAAkF,IAAAlF,CAAA3f,CAAA2f,IAAA,IAAA0E,CAAAA,CAAAhE,QAAA,CAAAve,CAAAA,CAAA+iB,IAAA/iB,CAAA9B,CAAA8B,EAAAwkB,GAAAxkB,KAAA,CAAA,EAAAA,CAAAA,CAAA+iB,IAAA/iB,CAAA9B,CAAA8B,EAAAykB,IAAAzkB,KAAA,CAAA,EAAAuH,QAAA,EADA,CANAgb;AASA;;AAAA,cAAAviB,CAAAA,CAAAgjB,OAAA,EAAA;AACA,gBAAA,CAAAvgB,KAAAA,CAAAqN,OAAArN,CAAAzC,CAAAA,CAAAgjB,OAAAvgB,CAAA,EACA,MAAA4H,SAAAA,CAAA,8CAAAA,CAAA;AACAwT,YAAAA,CAAAA,CAAAmF,OAAAnF,GAAA,EAAAA;;AACA,iBAAA3f,CAAAA,GAAA,CAAA,EAA+BA,CAAAA,GAAA8B,CAAAA,CAAAgjB,OAAAhjB,CAAAe,MAA/B,EAA+BA,EAA2B7C,CAA1D,EACA,YAAA,OAAA8B,CAAAA,CAAAgjB,OAAAhjB,CAAA9B,CAAA8B,CAAA,GACAuiB,CAAAA,CAAAtE,MAAAsE,CAAAyB,MAAAzB,CAAAviB,CAAAA,CAAAgjB,OAAAhjB,CAAA9B,CAAA8B,CAAAuiB,EAAA1E,CAAAA,CAAAmF,OAAAnF,CAAA3f,CAAA2f,IAAA0E,CAAAA,CAAA5C,SAAA4C,CAAAA,CAAAA,CAAAtE,MAAAsE,CAAAxhB,MAAAwhB,CAAAviB,CAAAA,CAAAgjB,OAAAhjB,CAAA9B,CAAA8B,CAAAuiB,CAAAA,CAAAA,EAAA,CAAAA,CADA,GAEAviB,CAAAA,CAAAgjB,OAAAhjB,CAAA9B,CAAA8B,EAAAe,MAAAf,KACA6d,CAAAA,CAAAmF,OAAAnF,CAAA3f,CAAA2f,IAAA7d,CAAAA,CAAAgjB,OAAAhjB,CAAA9B,CAAA8B,CADAA,CAFA;AAKA;;AAAA,cAAAA,CAAAA,CAAAijB,OAAA,EAAA;AACA,gBAAA,CAAAxgB,KAAAA,CAAAqN,OAAArN,CAAAzC,CAAAA,CAAAijB,OAAAxgB,CAAA,EACA,MAAA4H,SAAAA,CAAA,8CAAAA,CAAA;AACAwT,YAAAA,CAAAA,CAAAoF,OAAApF,GAAA,EAAAA;;AACA,iBAAA3f,CAAAA,GAAA,CAAA,EAA+BA,CAAAA,GAAA8B,CAAAA,CAAAijB,OAAAjjB,CAAAe,MAA/B,EAA+BA,EAA2B7C,CAA1D,EAA0D;AAC1D,kBAAA,YAAA,OAAA8B,CAAAA,CAAAijB,OAAAjjB,CAAA9B,CAAA8B,CAAA,EACA,MAAAqK,SAAAA,CAAA,+CAAAA,CAAA;AACAwT,cAAAA,CAAAA,CAAAoF,OAAApF,CAAA3f,CAAA2f,IAAA2E,CAAAA,CAAApc,IAAAoc,CAAAnc,WAAAmc,CAAAkC,UAAAlC,CAAAxiB,CAAAA,CAAAijB,OAAAjjB,CAAA9B,CAAA8B,CAAAwiB,CAAA3E;AAAA3f;AAGA;;AAAA,cAAA8B,CAAAA,CAAAkjB,MAAA,EAAA;AACA,gBAAA,CAAAzgB,KAAAA,CAAAqN,OAAArN,CAAAzC,CAAAA,CAAAkjB,MAAAzgB,CAAA,EACA,MAAA4H,SAAAA,CAAA,6CAAAA,CAAA;AACAwT,YAAAA,CAAAA,CAAAqF,MAAArF,GAAA,EAAAA;;AACA,iBAAA3f,CAAAA,GAAA,CAAA,EAA+BA,CAAAA,GAAA8B,CAAAA,CAAAkjB,MAAAljB,CAAAe,MAA/B,EAA+BA,EAA0B7C,CAAzD,EAAyD;AACzD,kBAAA,YAAA,OAAA8B,CAAAA,CAAAkjB,MAAAljB,CAAA9B,CAAA8B,CAAA,EACA,MAAAqK,SAAAA,CAAA,8CAAAA,CAAA;AACAwT,cAAAA,CAAAA,CAAAqF,MAAArF,CAAA3f,CAAA2f,IAAA2E,CAAAA,CAAApc,IAAAoc,CAAAqB,UAAArB,CAAAkC,UAAAlC,CAAAxiB,CAAAA,CAAAkjB,MAAAljB,CAAA9B,CAAA8B,CAAAwiB,CAAA3E;AAAA3f;AAGA;;AAAA,iBAAA2f,CAAA;AAAAA,SAhhBAgF,EA4hBAA,CAAAA,CAAAgC,QAAAhC,GAAA,UAAAhF,CAAA,EAAAiH,CAAA,EAAAA;AACAA,UAAAA,CAAAA,KACAA,CAAAA,GAAA,EADAA,CAAAA;AAEA,cAAA9kB,CAAAA,GAAA,EAAA;;AAQA,cAAA,CAPA8kB,CAAAA,CAAAC,MAAAD,IAAAA,CAAAA,CAAAE,QAOA,MANAhlB,CAAAA,CAAA8iB,MAAA9iB,GAAA,EAAAA,EACAA,CAAAA,CAAA+iB,IAAA/iB,GAAA,EADAA,EAEAA,CAAAA,CAAAgjB,OAAAhjB,GAAA,EAFAA,EAGAA,CAAAA,CAAAijB,OAAAjjB,GAAA,EAHAA,EAIAA,CAAAA,CAAAkjB,MAAAljB,GAAA,EAEA,GAAA8kB,CAAAA,CAAAE,QAAA,EAAA;AAGA,gBAFAhlB,CAAAA,CAAAnB,IAAAmB,GAAA,EAAAA,EACAA,CAAAA,CAAAqjB,CAAArjB,GAAA,CADAA,EAEAuiB,CAAAA,CAAA1C,IAAA,EAAA;AACA,kBAAAoF,CAAAA,GAAA,IAAA1C,CAAAA,CAAA1C,IAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,CAAA,CAAA;AACA7f,cAAAA,CAAAA,CAAA9B,CAAA8B,GAAA8kB,CAAAA,CAAAxD,KAAAwD,KAAA5F,MAAA4F,GAAAG,CAAAA,CAAA7T,QAAA6T,EAAAH,GAAAA,CAAAA,CAAAxD,KAAAwD,KAAAna,MAAAma,GAAAG,CAAAA,CAAA1d,QAAA0d,EAAAH,GAAAG,CAAAjlB;AAAAilB,aAFA,MAIAjlB,CAAAA,CAAA9B,CAAA8B,GAAA8kB,CAAAA,CAAAxD,KAAAwD,KAAA5F,MAAA4F,GAAA,GAAAA,GAAA,CAAA9kB;;AACA8kB,YAAAA,CAAAA,CAAAtD,KAAAsD,KAAA5F,MAAA4F,GACA9kB,CAAAA,CAAAK,CAAAL,GAAA,EADA8kB,IAGA9kB,CAAAA,CAAAK,CAAAL,GAAA,EAAAA,EACA8kB,CAAAA,CAAAtD,KAAAsD,KAAAriB,KAAAqiB,KACA9kB,CAAAA,CAAAK,CAAAL,GAAAuiB,CAAAA,CAAA5C,SAAA4C,CAAAviB,CAAAA,CAAAK,CAAAkiB,CADAuC,CAJAA,GAOA9kB,CAAAA,CAAAR,CAAAQ,GAAA,IAPA8kB,EAQA9kB,CAAAA,CAAAgiB,CAAAhiB,GAAA,IARA8kB,EASA9kB,CAAAA,CAAAojB,SAAApjB,GAAA,EATA8kB,EAUA9kB,CAAAA,CAAA6D,IAAA7D,GAAA8kB,CAAAA,CAAAvD,KAAAuD,KAAA5F,MAAA4F,GAAA,WAAAA,GAAA,CAVAA,EAWA9kB,CAAAA,CAAAmjB,WAAAnjB,GAAA,EAXA8kB;AA4BA;;AAAA,cAfA,QAAAjH,CAAAA,CAAAhf,IAAA,IAAAgf,CAAAA,CAAA1d,cAAA0d,CAAA,MAAAA,CAAA,KACA7d,CAAAA,CAAAnB,IAAAmB,GAAA6d,CAAAA,CAAAhf,IADA,GAEA,QAAAgf,CAAAA,CAAAwF,CAAA,IAAAxF,CAAAA,CAAA1d,cAAA0d,CAAA,GAAAA,CAAA,KACA7d,CAAAA,CAAAqjB,CAAArjB,GAAA8kB,CAAAA,CAAArD,IAAAqD,IAAArD,CAAAzC,QAAAA,CAAAnB,CAAAA,CAAAwF,CAAArE,CAAA8F,GAAA5F,MAAAA,CAAArB,CAAAA,CAAAwF,CAAAnE,CAAA4F,GAAAjH,CAAAA,CAAAwF,CADA,CAFA,EAIA,QAAAxF,CAAAA,CAAA3f,CAAA,IAAA2f,CAAAA,CAAA1d,cAAA0d,CAAA,GAAAA,CAAA,KACA,YAAA,OAAAA,CAAAA,CAAA3f,CAAA,GACA8B,CAAAA,CAAA9B,CAAA8B,GAAA8kB,CAAAA,CAAAxD,KAAAwD,KAAA5F,MAAA4F,GAAA5F,MAAAA,CAAArB,CAAAA,CAAA3f,CAAAghB,CAAA4F,GAAAjH,CAAAA,CAAA3f,CADA,GAGA8B,CAAAA,CAAA9B,CAAA8B,GAAA8kB,CAAAA,CAAAxD,KAAAwD,KAAA5F,MAAA4F,GAAAvC,CAAAA,CAAA1C,IAAA0C,CAAAriB,SAAAqiB,CAAAnR,QAAAmR,CAAA9jB,IAAA8jB,CAAA1E,CAAAA,CAAA3f,CAAAqkB,CAAAuC,GAAAA,CAAAA,CAAAxD,KAAAwD,KAAAna,MAAAma,GAAA,IAAAvC,CAAAA,CAAAhE,QAAA,CAAAV,CAAAA,CAAA3f,CAAA2f,CAAA2G,GAAA3G,KAAA,CAAA,EAAAA,CAAAA,CAAA3f,CAAA2f,CAAA4G,IAAA5G,KAAA,CAAA,EAAAtW,QAAA,EAAAud,GAAAjH,CAAAA,CAAA3f,CAJA,CAJA,EASA,QAAA2f,CAAAA,CAAAxd,CAAA,IAAAwd,CAAAA,CAAA1d,cAAA0d,CAAA,GAAAA,CAAA,KACA7d,CAAAA,CAAAK,CAAAL,GAAA8kB,CAAAA,CAAAtD,KAAAsD,KAAA5F,MAAA4F,GAAAvC,CAAAA,CAAAtE,MAAAsE,CAAAe,MAAAf,CAAA1E,CAAAA,CAAAxd,CAAAkiB,EAAA,CAAAA,EAAA1E,CAAAA,CAAAxd,CAAAwd,CAAA9c,MAAAwhB,CAAAuC,GAAAA,CAAAA,CAAAtD,KAAAsD,KAAAriB,KAAAqiB,GAAAriB,KAAAA,CAAAvC,SAAAuC,CAAAiG,KAAAjG,CAAAhE,IAAAgE,CAAAob,CAAAA,CAAAxd,CAAAoC,CAAAqiB,GAAAjH,CAAAA,CAAAxd,CADA,CATA,EAWA,QAAAwd,CAAAA,CAAAre,CAAA,IAAAqe,CAAAA,CAAA1d,cAAA0d,CAAA,GAAAA,CAAA,KACA7d,CAAAA,CAAAR,CAAAQ,GAAAwiB,CAAAA,CAAApc,IAAAoc,CAAAnc,WAAAmc,CAAAqC,QAAArC,CAAA3E,CAAAA,CAAAre,CAAAgjB,EAAAsC,CAAAtC,CADA,CAXA,EAaA,QAAA3E,CAAAA,CAAAmE,CAAA,IAAAnE,CAAAA,CAAA1d,cAAA0d,CAAA,GAAAA,CAAA,KACA7d,CAAAA,CAAAgiB,CAAAhiB,GAAAwiB,CAAAA,CAAApc,IAAAoc,CAAAqB,UAAArB,CAAAqC,QAAArC,CAAA3E,CAAAA,CAAAmE,CAAAQ,EAAAsC,CAAAtC,CADA,CAbA,EAeA3E,CAAAA,CAAAiF,MAAAjF,IAAAA,CAAAA,CAAAiF,MAAAjF,CAAA9c,MAAA,EAAA;AACAf,YAAAA,CAAAA,CAAA8iB,MAAA9iB,GAAA,EAAAA;;AACA,iBAAA,IAAAuE,CAAAA,GAAA,CAAA,EAA+BA,CAAAA,GAAAsZ,CAAAA,CAAAiF,MAAAjF,CAAA9c,MAA/B,EAA+BA,EAA2BwD,CAA1D,EACAvE,CAAAA,CAAA8iB,MAAA9iB,CAAAuE,CAAAvE,IAAA8kB,CAAAA,CAAArD,IAAAqD,IAAArD,CAAAzC,QAAAA,CAAAnB,CAAAA,CAAAiF,MAAAjF,CAAAtZ,CAAAsZ,CAAAmB,CAAA8F,GAAA5F,MAAAA,CAAArB,CAAAA,CAAAiF,MAAAjF,CAAAtZ,CAAAsZ,CAAAqB,CAAA4F,GAAAjH,CAAAA,CAAAiF,MAAAjF,CAAAtZ,CAAAsZ,CAAA7d;AAEA;;AAAA,cAAA6d,CAAAA,CAAAkF,IAAAlF,IAAAA,CAAAA,CAAAkF,IAAAlF,CAAA9c,MAAA,EAAA;AACAf,YAAAA,CAAAA,CAAA+iB,IAAA/iB,GAAA,EAAAA;;AACA,iBAAAuE,CAAAA,GAAA,CAAA,EAA+BA,CAAAA,GAAAsZ,CAAAA,CAAAkF,IAAAlF,CAAA9c,MAA/B,EAA+BA,EAAyBwD,CAAxD,EACA,YAAA,OAAAsZ,CAAAA,CAAAkF,IAAAlF,CAAAtZ,CAAAsZ,CAAA,GACA7d,CAAAA,CAAA+iB,IAAA/iB,CAAAuE,CAAAvE,IAAA8kB,CAAAA,CAAAxD,KAAAwD,KAAA5F,MAAA4F,GAAA5F,MAAAA,CAAArB,CAAAA,CAAAkF,IAAAlF,CAAAtZ,CAAAsZ,CAAAqB,CAAA4F,GAAAjH,CAAAA,CAAAkF,IAAAlF,CAAAtZ,CAAAsZ,CADA,GAGA7d,CAAAA,CAAA+iB,IAAA/iB,CAAAuE,CAAAvE,IAAA8kB,CAAAA,CAAAxD,KAAAwD,KAAA5F,MAAA4F,GAAAvC,CAAAA,CAAA1C,IAAA0C,CAAAriB,SAAAqiB,CAAAnR,QAAAmR,CAAA9jB,IAAA8jB,CAAA1E,CAAAA,CAAAkF,IAAAlF,CAAAtZ,CAAAsZ,CAAA0E,CAAAuC,GAAAA,CAAAA,CAAAxD,KAAAwD,KAAAna,MAAAma,GAAA,IAAAvC,CAAAA,CAAAhE,QAAA,CAAAV,CAAAA,CAAAkF,IAAAlF,CAAAtZ,CAAAsZ,EAAA2G,GAAA3G,KAAA,CAAA,EAAAA,CAAAA,CAAAkF,IAAAlF,CAAAtZ,CAAAsZ,EAAA4G,IAAA5G,KAAA,CAAA,EAAAtW,QAAA,EAAAud,GAAAjH,CAAAA,CAAAkF,IAAAlF,CAAAtZ,CAAAsZ,CAHA;AAKA;;AAAA,cAAAA,CAAAA,CAAAmF,OAAAnF,IAAAA,CAAAA,CAAAmF,OAAAnF,CAAA9c,MAAA,EAAA;AACAf,YAAAA,CAAAA,CAAAgjB,OAAAhjB,GAAA,EAAAA;;AACA,iBAAAuE,CAAAA,GAAA,CAAA,EAA+BA,CAAAA,GAAAsZ,CAAAA,CAAAmF,OAAAnF,CAAA9c,MAA/B,EAA+BA,EAA4BwD,CAA3D,EACAvE,CAAAA,CAAAgjB,OAAAhjB,CAAAuE,CAAAvE,IAAA8kB,CAAAA,CAAAtD,KAAAsD,KAAA5F,MAAA4F,GAAAvC,CAAAA,CAAAtE,MAAAsE,CAAAe,MAAAf,CAAA1E,CAAAA,CAAAmF,OAAAnF,CAAAtZ,CAAAsZ,CAAA0E,EAAA,CAAAA,EAAA1E,CAAAA,CAAAmF,OAAAnF,CAAAtZ,CAAAsZ,EAAA9c,MAAAwhB,CAAAuC,GAAAA,CAAAA,CAAAtD,KAAAsD,KAAAriB,KAAAqiB,GAAAriB,KAAAA,CAAAvC,SAAAuC,CAAAiG,KAAAjG,CAAAhE,IAAAgE,CAAAob,CAAAA,CAAAmF,OAAAnF,CAAAtZ,CAAAsZ,CAAApb,CAAAqiB,GAAAjH,CAAAA,CAAAmF,OAAAnF,CAAAtZ,CAAAsZ,CAAA7d;AAEA;;AAAA,cAAA6d,CAAAA,CAAAoF,OAAApF,IAAAA,CAAAA,CAAAoF,OAAApF,CAAA9c,MAAA,EAAA;AACAf,YAAAA,CAAAA,CAAAijB,OAAAjjB,GAAA,EAAAA;;AACA,iBAAAuE,CAAAA,GAAA,CAAA,EAA+BA,CAAAA,GAAAsZ,CAAAA,CAAAoF,OAAApF,CAAA9c,MAA/B,EAA+BA,EAA4BwD,CAA3D,EACAvE,CAAAA,CAAAijB,OAAAjjB,CAAAuE,CAAAvE,IAAAwiB,CAAAA,CAAApc,IAAAoc,CAAAnc,WAAAmc,CAAAqC,QAAArC,CAAA3E,CAAAA,CAAAoF,OAAApF,CAAAtZ,CAAAsZ,CAAA2E,EAAAsC,CAAAtC,CAAAxiB;AAEA;;AAAA,cAAA6d,CAAAA,CAAAqF,MAAArF,IAAAA,CAAAA,CAAAqF,MAAArF,CAAA9c,MAAA,EAAA;AACAf,YAAAA,CAAAA,CAAAkjB,MAAAljB,GAAA,EAAAA;;AACA,iBAAAuE,CAAAA,GAAA,CAAA,EAA+BA,CAAAA,GAAAsZ,CAAAA,CAAAqF,MAAArF,CAAA9c,MAA/B,EAA+BA,EAA2BwD,CAA1D,EACAvE,CAAAA,CAAAkjB,MAAAljB,CAAAuE,CAAAvE,IAAAwiB,CAAAA,CAAApc,IAAAoc,CAAAqB,UAAArB,CAAAqC,QAAArC,CAAA3E,CAAAA,CAAAqF,MAAArF,CAAAtZ,CAAAsZ,CAAA2E,EAAAsC,CAAAtC,CAAAxiB;AAQA;;AAAA,iBANA,QAAA6d,CAAAA,CAAAuF,SAAA,IAAAvF,CAAAA,CAAA1d,cAAA0d,CAAA,WAAAA,CAAA,KACA7d,CAAAA,CAAAojB,SAAApjB,GAAA6d,CAAAA,CAAAuF,SADA,GAEA,QAAAvF,CAAAA,CAAAha,IAAA,IAAAga,CAAAA,CAAA1d,cAAA0d,CAAA,MAAAA,CAAA,KACA7d,CAAAA,CAAA6D,IAAA7D,GAAA8kB,CAAAA,CAAAvD,KAAAuD,KAAA5F,MAAA4F,GAAAtC,CAAAA,CAAApc,IAAAoc,CAAAK,cAAAL,CAAA0C,aAAA1C,CAAA3E,CAAAA,CAAAha,IAAA2e,CAAAsC,GAAAjH,CAAAA,CAAAha,IADA,CAFA,EAIA,QAAAga,CAAAA,CAAAsF,WAAA,IAAAtF,CAAAA,CAAA1d,cAAA0d,CAAA,aAAAA,CAAA,KACA7d,CAAAA,CAAAmjB,WAAAnjB,GAAA6d,CAAAA,CAAAsF,WADA,CAJA,EAMAnjB,CAAA;AAAAA,SA7mBA6iB,EAunBAA,CAAAA,CAAA3iB,SAAA2iB,CAAAsC,MAAAtC,GAAA,YAAA;AACA,iBAAAlT,KAAAI,WAAAJ,CAAAkV,QAAAlV,CAAAA,IAAAA,EAAAuS,CAAAA,CAAA7E,IAAA6E,CAAAb,aAAA1R,CAAA;AAAA0R,SAxnBAwB,EA2oBAA,CAAAA,CAAAqC,aAAArC,GAAA,YAAA;AACA,cAAAH,CAAAA,GAAA,EAAA;AAAA,cAA+BC,CAAAA,GAAA3jB,MAAAA,CAAAY,MAAAZ,CAAA0jB,CAAA1jB,CAA/B;AAYA,iBAXA2jB,CAAAA,CAAAD,CAAAA,CAAA,CAAAA,CAAAA,GAAA,WAAAC,CAAAA,GAAA,CAAAA,EACAA,CAAAA,CAAAD,CAAAA,CAAA,CAAAA,CAAAA,GAAA,OAAAC,CAAAA,GAAA,CADAA,EAEAA,CAAAA,CAAAD,CAAAA,CAAA,CAAAA,CAAAA,GAAA,KAAAC,CAAAA,GAAA,CAFAA,EAGAA,CAAAA,CAAAD,CAAAA,CAAA,CAAAA,CAAAA,GAAA,QAAAC,CAAAA,GAAA,CAHAA,EAIAA,CAAAA,CAAAD,CAAAA,CAAA,CAAAA,CAAAA,GAAA,QAAAC,CAAAA,GAAA,CAJAA,EAKAA,CAAAA,CAAAD,CAAAA,CAAA,CAAAA,CAAAA,GAAA,OAAAC,CAAAA,GAAA,CALAA,EAMAA,CAAAA,CAAAD,CAAAA,CAAA,CAAAA,CAAAA,GAAA,QAAAC,CAAAA,GAAA,CANAA,EAOAA,CAAAA,CAAAD,CAAAA,CAAA,CAAAA,CAAAA,GAAA,MAAAC,CAAAA,GAAA,CAPAA,EAQAA,CAAAA,CAAAD,CAAAA,CAAA,CAAAA,CAAAA,GAAA,SAAAC,CAAAA,GAAA,CARAA,EASAA,CAAAA,CAAAD,CAAAA,CAAA,CAAAA,CAAAA,GAAA,SAAAC,CAAAA,GAAA,CATAA,EAUAA,CAAAA,CAAAD,CAAAA,CAAA,EAAAA,CAAAA,GAAA,QAAAC,CAAAA,GAAA,EAVAA,EAWAA,CAAA;AAbA,SAAA,EA3oBAE,EA2pBAA,CAAA;AA3sBA,OAAA,EAXAzc,EAytBAA,CAAAA,CAAAgf,cAAAhf,GAAA,YAAA;AAmBA,iBAAAgf,CAAA,CAAAtH,CAAA,EAAAA;AACA,cAAAA,CAAA,EACA,KAAA,IAAAJ,CAAAA,GAAA1e,MAAAA,CAAA0e,IAAA1e,CAAA8e,CAAA9e,CAAA,EAAAd,CAAAA,GAAA,CAAA,EAA+DA,CAAAA,GAAAwf,CAAAA,CAAA3c,MAA/D,EAA+DA,EAAiB7C,CAAhF,EACA,QAAA4f,CAAAA,CAAAJ,CAAAA,CAAAxf,CAAAwf,CAAAI,CAAA,KACAnO,KAAA+N,CAAAA,CAAAxf,CAAAwf,CAAA/N,IAAAmO,CAAAA,CAAAJ,CAAAA,CAAAxf,CAAAwf,CAAAI,CADA;AAoNA;;AAAA,eA1MAsH,CAAAA,CAAAllB,SAAAklB,CAAAvmB,IAAAumB,GAAA,EAAAA,EAQAA,CAAAA,CAAAllB,SAAAklB,CAAAvhB,IAAAuhB,GAAA,IARAA,EAgBAA,CAAAA,CAAAllB,SAAAklB,CAAAhC,SAAAgC,GAAA,EAhBAA,EA0BAA,CAAAA,CAAAxlB,MAAAwlB,GAAA,UAAAtH,CAAA,EAAAA;AACA,iBAAA,IAAAsH,CAAA,CAAAtH,CAAA,CAAA;AAAAA,SA3BAsH,EAuCAA,CAAAA,CAAA9B,MAAA8B,GAAA,UAAAvH,CAAA,EAAA0F,CAAA,EAAAA;AASA,iBARAA,CAAAA,KACAA,CAAAA,GAAAlB,CAAAA,CAAAziB,MAAAyiB,EADAkB,CAAAA,EAEA,QAAA1F,CAAAA,CAAAhf,IAAA,IAAAgf,CAAAA,CAAA1d,cAAA0d,CAAA,MAAAA,CAAA,IACA0F,CAAAA,CAAAC,MAAAD,CAAA,EAAAA,EAAAE,MAAAF,CAAA1F,CAAAA,CAAAhf,IAAA0kB,CAHAA,EAIA,QAAA1F,CAAAA,CAAAha,IAAA,IAAAga,CAAAA,CAAA1d,cAAA0d,CAAA,MAAAA,CAAA,IACA2E,CAAAA,CAAApc,IAAAoc,CAAA6C,SAAA7C,CAAAc,MAAAd,CAAA3E,CAAAA,CAAAha,IAAA2e,EAAAe,CAAAA,CAAAC,MAAAD,CAAA,EAAAA,EAAAI,IAAAJ,EAAAf,EAAAoB,MAAApB,EALAe,EAMA,QAAA1F,CAAAA,CAAAuF,SAAA,IAAAvF,CAAAA,CAAA1d,cAAA0d,CAAA,WAAAA,CAAA,IACA0F,CAAAA,CAAAC,MAAAD,CAAA,EAAAA,EAAAE,MAAAF,CAAA1F,CAAAA,CAAAuF,SAAAG,CAPAA,EAQAA,CAAA;AAAAA,SAhDA6B,EA4DAA,CAAAA,CAAArB,eAAAqB,GAAA,UAAAvH,CAAA,EAAA0F,CAAA,EAAAA;AACA,iBAAA5T,KAAA2T,MAAA3T,CAAAkO,CAAAlO,EAAA4T,CAAA5T,EAAAiU,MAAAjU,EAAA;AAAAiU,SA7DAwB,EA2EAA,CAAAA,CAAApB,MAAAoB,GAAA,UAAAnB,CAAA,EAAAljB,CAAA,EAAAA;AACAkjB,UAAAA,CAAAA,YAAA9B,CAAA8B,KACAA,CAAAA,GAAA9B,CAAAA,CAAAviB,MAAAuiB,CAAA8B,CAAA9B,CADA8B;;AAGA,eADA,IAAA5b,CAAAA,GAAAA,KAAAxG,CAAAwG,KAAAtH,CAAAsH,GAAA4b,CAAAA,CAAAC,GAAA7b,GAAA4b,CAAAA,CAAArW,GAAAqW,GAAAljB,CAAA,EAAA8c,CAAAA,GAAA,IAAA2E,CAAAA,CAAApc,IAAAoc,CAAA4C,cAAA,EACA,EAAAnB,CAAAA,CAAArW,GAAAqW,GAAA5b,CAAA,GAAA;AACA,gBAAA8b,CAAAA,GAAAF,CAAAA,CAAAT,MAAAS,EAAA;;AACA,oBAAAE,CAAAA,KAAA,CAAA;AACA,mBAAA,CAAA;AACAtG,gBAAAA,CAAAA,CAAAhf,IAAAgf,GAAAoG,CAAAA,CAAAR,MAAAQ,EAAApG;AACA;;AACA,mBAAA,CAAA;AACAA,gBAAAA,CAAAA,CAAAha,IAAAga,GAAA2E,CAAAA,CAAApc,IAAAoc,CAAA6C,SAAA7C,CAAAwB,MAAAxB,CAAAyB,CAAAzB,EAAAyB,CAAAA,CAAAT,MAAAS,EAAAzB,CAAA3E;AACA;;AACA,mBAAA,CAAA;AACAA,gBAAAA,CAAAA,CAAAuF,SAAAvF,GAAAoG,CAAAA,CAAAR,MAAAQ,EAAApG;AACA;;AACA;AACAoG,gBAAAA,CAAAA,CAAAI,QAAAJ,CAAA,IAAAE,CAAAF;AAXA;AAeA;;AAAA,iBAAApG,CAAA;AAAAA,SAhGAuH,EA6GAA,CAAAA,CAAAd,eAAAc,GAAA,UAAAnB,CAAA,EAAAA;AAGA,iBAFAA,CAAAA,YAAA9B,CAAA8B,KACAA,CAAAA,GAAA,IAAA9B,CAAA,CAAA8B,CAAA,CADAA,GAEAtU,KAAAqU,MAAArU,CAAAsU,CAAAtU,EAAAsU,CAAAA,CAAAT,MAAAS,EAAAtU,CAAA;AAAA6T,SAhHA4B,EA2HAA,CAAAA,CAAAb,MAAAa,GAAA,UAAAvH,CAAA,EAAAA;AACA,cAAA,YAAA,OAAAA,CAAA,IAAA,SAAAA,CAAA,EACA,OAAA,iBAAA;AACA,cAAA,QAAAA,CAAAA,CAAAhf,IAAA,IAAAgf,CAAAA,CAAA1d,cAAA0d,CAAA,MAAAA,CAAA,IAAA,CACA0E,CAAAA,CAAAtD,QAAAsD,CAAA1E,CAAAA,CAAAhf,IAAA0jB,CADA,EAEA,OAAA,uBAAA;;AACA,cAAA,QAAA1E,CAAAA,CAAAha,IAAA,IAAAga,CAAAA,CAAA1d,cAAA0d,CAAA,MAAAA,CAAA,EAAA;AACA,gBAAAzI,CAAAA,GAAAoN,CAAAA,CAAApc,IAAAoc,CAAA6C,SAAA7C,CAAA+B,MAAA/B,CAAA3E,CAAAA,CAAAha,IAAA2e,CAAA;AACA,gBAAApN,CAAA,EACA,OAAA,UAAAA,CAAA;AAEA;;AAAA,iBAAA,QAAAyI,CAAAA,CAAAuF,SAAA,IAAAvF,CAAAA,CAAA1d,cAAA0d,CAAA,WAAAA,CAAA,IAAA,CACA0E,CAAAA,CAAAtD,QAAAsD,CAAA1E,CAAAA,CAAAuF,SAAAb,CADA,GAEA,4BAFA,GAGA,IAHA;AAGA,SAzIA6C,EAoJAA,CAAAA,CAAAV,UAAAU,GAAA,UAAAplB,CAAA,EAAAA;AACA,cAAAA,CAAAA,YAAAwiB,CAAAA,CAAApc,IAAAoc,CAAA4C,cAAA,EACA,OAAAplB,CAAA;AACA,cAAA6d,CAAAA,GAAA,IAAA2E,CAAAA,CAAApc,IAAAoc,CAAA4C,cAAA,EAAA;;AAGA,cAFA,QAAAplB,CAAAA,CAAAnB,IAAA,KACAgf,CAAAA,CAAAhf,IAAAgf,GAAAqB,MAAAA,CAAAlf,CAAAA,CAAAnB,IAAAqgB,CADA,GAEA,QAAAlf,CAAAA,CAAA6D,IAAA,EAAA;AACA,gBAAA,YAAA,OAAA7D,CAAAA,CAAA6D,IAAA,EACA,MAAAwG,SAAAA,CAAA,4CAAAA,CAAA;AACAwT,YAAAA,CAAAA,CAAAha,IAAAga,GAAA2E,CAAAA,CAAApc,IAAAoc,CAAA6C,SAAA7C,CAAAkC,UAAAlC,CAAAxiB,CAAAA,CAAA6D,IAAA2e,CAAA3E;AAIA;;AAAA,iBAFA,QAAA7d,CAAAA,CAAAojB,SAAA,KACAvF,CAAAA,CAAAuF,SAAAvF,GAAAqB,MAAAA,CAAAlf,CAAAA,CAAAojB,SAAAlE,CADA,GAEArB,CAAA;AAAAA,SAjKAuH,EA6KAA,CAAAA,CAAAP,QAAAO,GAAA,UAAAvH,CAAA,EAAAiH,CAAA,EAAAA;AACAA,UAAAA,CAAAA,KACAA,CAAAA,GAAA,EADAA,CAAAA;AAEA,cAAA9kB,CAAAA,GAAA,EAAA;AAYA,iBAXA8kB,CAAAA,CAAAE,QAAAF,KACA9kB,CAAAA,CAAAnB,IAAAmB,GAAA,EAAAA,EACAA,CAAAA,CAAA6D,IAAA7D,GAAA,IADAA,EAEAA,CAAAA,CAAAojB,SAAApjB,GAAA,EAHA8kB,GAKA,QAAAjH,CAAAA,CAAAhf,IAAA,IAAAgf,CAAAA,CAAA1d,cAAA0d,CAAA,MAAAA,CAAA,KACA7d,CAAAA,CAAAnB,IAAAmB,GAAA6d,CAAAA,CAAAhf,IADA,CALAimB,EAOA,QAAAjH,CAAAA,CAAAha,IAAA,IAAAga,CAAAA,CAAA1d,cAAA0d,CAAA,MAAAA,CAAA,KACA7d,CAAAA,CAAA6D,IAAA7D,GAAAwiB,CAAAA,CAAApc,IAAAoc,CAAA6C,SAAA7C,CAAAqC,QAAArC,CAAA3E,CAAAA,CAAAha,IAAA2e,EAAAsC,CAAAtC,CADA,CAPAsC,EASA,QAAAjH,CAAAA,CAAAuF,SAAA,IAAAvF,CAAAA,CAAA1d,cAAA0d,CAAA,WAAAA,CAAA,KACA7d,CAAAA,CAAAojB,SAAApjB,GAAA6d,CAAAA,CAAAuF,SADA,CATA0B,EAWA9kB,CAAA;AAAAA,SA5LAolB,EAsMAA,CAAAA,CAAAllB,SAAAklB,CAAAD,MAAAC,GAAA,YAAA;AACA,iBAAAzV,KAAAI,WAAAJ,CAAAkV,QAAAlV,CAAAA,IAAAA,EAAAuS,CAAAA,CAAA7E,IAAA6E,CAAAb,aAAA1R,CAAA;AAAA0R,SAvMA+D,EA0MAA,CAAA;AA1OA,OAAA,EAztBAhf,EAs8BAA,CAAAA,CAAAkf,SAAAlf,GAAA,YAAA;AAuBA,iBAAAkf,CAAA,CAAAxH,CAAA,EAAAA;AAIA,cAHAnO,KAAAjC,KAAAiC,GAAA,EAAAA,EACAA,KAAAoE,MAAApE,GAAA,EADAA,EAEAA,KAAAgE,SAAAhE,GAAA,EAFAA,EAGAmO,CAAA,EACA,KAAA,IAAAJ,CAAAA,GAAA1e,MAAAA,CAAA0e,IAAA1e,CAAA8e,CAAA9e,CAAA,EAAAd,CAAAA,GAAA,CAAA,EAA+DA,CAAAA,GAAAwf,CAAAA,CAAA3c,MAA/D,EAA+DA,EAAiB7C,CAAhF,EACA,QAAA4f,CAAAA,CAAAJ,CAAAA,CAAAxf,CAAAwf,CAAAI,CAAA,KACAnO,KAAA+N,CAAAA,CAAAxf,CAAAwf,CAAA/N,IAAAmO,CAAAA,CAAAJ,CAAAA,CAAAxf,CAAAwf,CAAAI,CADA;AAuVA;;AAAA,eA7UAwH,CAAAA,CAAAplB,SAAAolB,CAAA5X,KAAA4X,GAAA/C,CAAAA,CAAA9D,UAAA6G,EAQAA,CAAAA,CAAAplB,SAAAolB,CAAAvR,MAAAuR,GAAA/C,CAAAA,CAAA9D,UARA6G,EAgBAA,CAAAA,CAAAplB,SAAAolB,CAAAzmB,IAAAymB,GAAA,EAhBAA,EAwBAA,CAAAA,CAAAplB,SAAAolB,CAAAC,MAAAD,GAAA,EAxBAA,EAgCAA,CAAAA,CAAAplB,SAAAolB,CAAAE,MAAAF,GAAA,EAhCAA,EAwCAA,CAAAA,CAAAplB,SAAAolB,CAAA3R,SAAA2R,GAAA/C,CAAAA,CAAA9D,UAxCA6G,EAgDAA,CAAAA,CAAAplB,SAAAolB,CAAAlC,SAAAkC,GAAA,EAhDAA,EA0DAA,CAAAA,CAAA1lB,MAAA0lB,GAAA,UAAAxH,CAAA,EAAAA;AACA,iBAAA,IAAAwH,CAAA,CAAAxH,CAAA,CAAA;AAAAA,SA3DAwH,EAuEAA,CAAAA,CAAAhC,MAAAgC,GAAA,UAAAzH,CAAA,EAAA0F,CAAA,EAAAA;AAGA,cAFAA,CAAAA,KACAA,CAAAA,GAAAlB,CAAAA,CAAAziB,MAAAyiB,EADAkB,CAAAA,EAEA,QAAA1F,CAAAA,CAAAnQ,KAAA,IAAAmQ,CAAAA,CAAAnQ,KAAAmQ,CAAA9c,MAAA,EACA,KAAA,IAAA7C,CAAAA,GAAA,CAAA,EAA+BA,CAAAA,GAAA2f,CAAAA,CAAAnQ,KAAAmQ,CAAA9c,MAA/B,EAA+BA,EAA0B7C,CAAzD,EACAqlB,CAAAA,CAAAC,MAAAD,CAAA,EAAAA,EAAAE,MAAAF,CAAA1F,CAAAA,CAAAnQ,KAAAmQ,CAAA3f,CAAA2f,CAAA0F;AACA,cAAA,QAAA1F,CAAAA,CAAA9J,MAAA,IAAA8J,CAAAA,CAAA9J,MAAA8J,CAAA9c,MAAA,EACA,KAAA7C,CAAAA,GAAA,CAAA,EAA+BA,CAAAA,GAAA2f,CAAAA,CAAA9J,MAAA8J,CAAA9c,MAA/B,EAA+BA,EAA2B7C,CAA1D,EACAqlB,CAAAA,CAAAC,MAAAD,CAAA,EAAAA,EAAAE,MAAAF,CAAA1F,CAAAA,CAAA9J,MAAA8J,CAAA3f,CAAA2f,CAAA0F;AAKA,cAJA,QAAA1F,CAAAA,CAAAhf,IAAA,IAAAgf,CAAAA,CAAA1d,cAAA0d,CAAA,MAAAA,CAAA,IACA0F,CAAAA,CAAAC,MAAAD,CAAA,EAAAA,EAAAE,MAAAF,CAAA1F,CAAAA,CAAAhf,IAAA0kB,CADA,EAEA,QAAA1F,CAAAA,CAAA0H,MAAA,IAAA1H,CAAAA,CAAA1d,cAAA0d,CAAA,QAAAA,CAAA,IACA0F,CAAAA,CAAAC,MAAAD,CAAA,EAAAA,EAAAE,MAAAF,CAAA1F,CAAAA,CAAA0H,MAAAhC,CAHA,EAIA,QAAA1F,CAAAA,CAAAlK,SAAA,IAAAkK,CAAAA,CAAAlK,SAAAkK,CAAA9c,MAAA,EACA,KAAA7C,CAAAA,GAAA,CAAA,EAA+BA,CAAAA,GAAA2f,CAAAA,CAAAlK,SAAAkK,CAAA9c,MAA/B,EAA+BA,EAA8B7C,CAA7D,EACAskB,CAAAA,CAAApc,IAAAoc,CAAAK,cAAAL,CAAAc,MAAAd,CAAA3E,CAAAA,CAAAlK,SAAAkK,CAAA3f,CAAA2f,CAAA2E,EAAAe,CAAAA,CAAAC,MAAAD,CAAA,EAAAA,EAAAI,IAAAJ,EAAAf,EAAAoB,MAAApB;AAKA,iBAJA,QAAA3E,CAAAA,CAAAuF,SAAA,IAAAvF,CAAAA,CAAA1d,cAAA0d,CAAA,WAAAA,CAAA,IACA0F,CAAAA,CAAAC,MAAAD,CAAA,EAAAA,EAAAE,MAAAF,CAAA1F,CAAAA,CAAAuF,SAAAG,CADA,EAEA,QAAA1F,CAAAA,CAAA2H,MAAA,IAAA3H,CAAAA,CAAA1d,cAAA0d,CAAA,QAAAA,CAAA,IACA0F,CAAAA,CAAAC,MAAAD,CAAA,EAAAA,EAAAE,MAAAF,CAAA1F,CAAAA,CAAA2H,MAAAjC,CAHA,EAIAA,CAAA;AAAAA,SA3FA+B,EAuGAA,CAAAA,CAAAvB,eAAAuB,GAAA,UAAAzH,CAAA,EAAA0F,CAAA,EAAAA;AACA,iBAAA5T,KAAA2T,MAAA3T,CAAAkO,CAAAlO,EAAA4T,CAAA5T,EAAAiU,MAAAjU,EAAA;AAAAiU,SAxGA0B,EAsHAA,CAAAA,CAAAtB,MAAAsB,GAAA,UAAArB,CAAA,EAAAljB,CAAA,EAAAA;AACAkjB,UAAAA,CAAAA,YAAA9B,CAAA8B,KACAA,CAAAA,GAAA9B,CAAAA,CAAAviB,MAAAuiB,CAAA8B,CAAA9B,CADA8B;;AAGA,eADA,IAAA5b,CAAAA,GAAAA,KAAAxG,CAAAwG,KAAAtH,CAAAsH,GAAA4b,CAAAA,CAAAC,GAAA7b,GAAA4b,CAAAA,CAAArW,GAAAqW,GAAAljB,CAAA,EAAA8c,CAAAA,GAAA,IAAA2E,CAAAA,CAAApc,IAAAoc,CAAA8C,SAAA,EACA,EAAArB,CAAAA,CAAArW,GAAAqW,GAAA5b,CAAA,GAAA;AACA,gBAAA8b,CAAAA,GAAAF,CAAAA,CAAAT,MAAAS,EAAA;;AACA,oBAAAE,CAAAA,KAAA,CAAA;AACA,mBAAA,CAAA;AACAtG,gBAAAA,CAAAA,CAAAnQ,KAAAmQ,IAAAA,CAAAA,CAAAnQ,KAAAmQ,CAAA9c,MAAA8c,KACAA,CAAAA,CAAAnQ,KAAAmQ,GAAA,EADAA,GAEAA,CAAAA,CAAAnQ,KAAAmQ,CAAApS,IAAAoS,CAAAoG,CAAAA,CAAAR,MAAAQ,EAAApG,CAFAA;AAGA;;AACA,mBAAA,CAAA;AACAA,gBAAAA,CAAAA,CAAA9J,MAAA8J,IAAAA,CAAAA,CAAA9J,MAAA8J,CAAA9c,MAAA8c,KACAA,CAAAA,CAAA9J,MAAA8J,GAAA,EADAA,GAEAA,CAAAA,CAAA9J,MAAA8J,CAAApS,IAAAoS,CAAAoG,CAAAA,CAAAR,MAAAQ,EAAApG,CAFAA;AAGA;;AACA,mBAAA,CAAA;AACAA,gBAAAA,CAAAA,CAAAhf,IAAAgf,GAAAoG,CAAAA,CAAAR,MAAAQ,EAAApG;AACA;;AACA,mBAAA,CAAA;AACAA,gBAAAA,CAAAA,CAAA0H,MAAA1H,GAAAoG,CAAAA,CAAAR,MAAAQ,EAAApG;AACA;;AACA,mBAAA,CAAA;AACAA,gBAAAA,CAAAA,CAAA2H,MAAA3H,GAAAoG,CAAAA,CAAAR,MAAAQ,EAAApG;AACA;;AACA,mBAAA,CAAA;AACAA,gBAAAA,CAAAA,CAAAlK,SAAAkK,IAAAA,CAAAA,CAAAlK,SAAAkK,CAAA9c,MAAA8c,KACAA,CAAAA,CAAAlK,SAAAkK,GAAA,EADAA,GAEAA,CAAAA,CAAAlK,SAAAkK,CAAApS,IAAAoS,CAAA2E,CAAAA,CAAApc,IAAAoc,CAAAK,cAAAL,CAAAwB,MAAAxB,CAAAyB,CAAAzB,EAAAyB,CAAAA,CAAAT,MAAAS,EAAAzB,CAAA3E,CAFAA;AAGA;;AACA,mBAAA,CAAA;AACAA,gBAAAA,CAAAA,CAAAuF,SAAAvF,GAAAoG,CAAAA,CAAAR,MAAAQ,EAAApG;AACA;;AACA;AACAoG,gBAAAA,CAAAA,CAAAI,QAAAJ,CAAA,IAAAE,CAAAF;AA7BA;AAiCA;;AAAA,iBAAApG,CAAA;AAAAA,SA7JAyH,EA0KAA,CAAAA,CAAAhB,eAAAgB,GAAA,UAAArB,CAAA,EAAAA;AAGA,iBAFAA,CAAAA,YAAA9B,CAAA8B,KACAA,CAAAA,GAAA,IAAA9B,CAAA,CAAA8B,CAAA,CADAA,GAEAtU,KAAAqU,MAAArU,CAAAsU,CAAAtU,EAAAsU,CAAAA,CAAAT,MAAAS,EAAAtU,CAAA;AAAA6T,SA7KA8B,EAwLAA,CAAAA,CAAAf,MAAAe,GAAA,UAAAzH,CAAA,EAAAA;AACA,cAAA,YAAA,OAAAA,CAAA,IAAA,SAAAA,CAAA,EACA,OAAA,iBAAA;;AACA,cAAA,QAAAA,CAAAA,CAAAnQ,KAAA,IAAAmQ,CAAAA,CAAA1d,cAAA0d,CAAA,OAAAA,CAAA,EAAA;AACA,gBAAA,CAAApb,KAAAA,CAAAqN,OAAArN,CAAAob,CAAAA,CAAAnQ,KAAAjL,CAAA,EACA,OAAA,uBAAA;;AACA,iBAAA,IAAAvE,CAAAA,GAAA,CAAA,EAA+BA,CAAAA,GAAA2f,CAAAA,CAAAnQ,KAAAmQ,CAAA9c,MAA/B,EAA+BA,EAA0B7C,CAAzD,EACA,IAAA,CAAAqkB,CAAAA,CAAAtD,QAAAsD,CAAA1E,CAAAA,CAAAnQ,KAAAmQ,CAAA3f,CAAA2f,CAAA0E,CAAA,EACA,OAAA,0BAAA;AAEA;;AAAA,cAAA,QAAA1E,CAAAA,CAAA9J,MAAA,IAAA8J,CAAAA,CAAA1d,cAAA0d,CAAA,QAAAA,CAAA,EAAA;AACA,gBAAA,CAAApb,KAAAA,CAAAqN,OAAArN,CAAAob,CAAAA,CAAA9J,MAAAtR,CAAA,EACA,OAAA,wBAAA;;AACA,iBAAAvE,CAAAA,GAAA,CAAA,EAA+BA,CAAAA,GAAA2f,CAAAA,CAAA9J,MAAA8J,CAAA9c,MAA/B,EAA+BA,EAA2B7C,CAA1D,EACA,IAAA,CAAAqkB,CAAAA,CAAAtD,QAAAsD,CAAA1E,CAAAA,CAAA9J,MAAA8J,CAAA3f,CAAA2f,CAAA0E,CAAA,EACA,OAAA,2BAAA;AAEA;;AAAA,cAAA,QAAA1E,CAAAA,CAAAhf,IAAA,IAAAgf,CAAAA,CAAA1d,cAAA0d,CAAA,MAAAA,CAAA,IAAA,CACA0E,CAAAA,CAAAtD,QAAAsD,CAAA1E,CAAAA,CAAAhf,IAAA0jB,CADA,EAEA,OAAA,uBAAA;AACA,cAAA,QAAA1E,CAAAA,CAAA0H,MAAA,IAAA1H,CAAAA,CAAA1d,cAAA0d,CAAA,QAAAA,CAAA,IAAA,CACA0E,CAAAA,CAAAtD,QAAAsD,CAAA1E,CAAAA,CAAA0H,MAAAhD,CADA,EAEA,OAAA,yBAAA;AACA,cAAA,QAAA1E,CAAAA,CAAA2H,MAAA,IAAA3H,CAAAA,CAAA1d,cAAA0d,CAAA,QAAAA,CAAA,IAAA,CACA0E,CAAAA,CAAAtD,QAAAsD,CAAA1E,CAAAA,CAAA2H,MAAAjD,CADA,EAEA,OAAA,yBAAA;;AACA,cAAA,QAAA1E,CAAAA,CAAAlK,SAAA,IAAAkK,CAAAA,CAAA1d,cAAA0d,CAAA,WAAAA,CAAA,EAAA;AACA,gBAAA,CAAApb,KAAAA,CAAAqN,OAAArN,CAAAob,CAAAA,CAAAlK,SAAAlR,CAAA,EACA,OAAA,2BAAA;;AACA,iBAAAvE,CAAAA,GAAA,CAAA,EAA+BA,CAAAA,GAAA2f,CAAAA,CAAAlK,SAAAkK,CAAA9c,MAA/B,EAA+BA,EAA8B7C,CAA7D,EAA6D;AAC7D,kBAAAkX,CAAAA,GAAAoN,CAAAA,CAAApc,IAAAoc,CAAAK,cAAAL,CAAA+B,MAAA/B,CAAA3E,CAAAA,CAAAlK,SAAAkK,CAAA3f,CAAA2f,CAAA2E,CAAA;AACA,kBAAApN,CAAA,EACA,OAAA,eAAAA,CAAA;AAAAA;AAGA;;AAAA,iBAAA,QAAAyI,CAAAA,CAAAuF,SAAA,IAAAvF,CAAAA,CAAA1d,cAAA0d,CAAA,WAAAA,CAAA,IAAA,CACA0E,CAAAA,CAAAtD,QAAAsD,CAAA1E,CAAAA,CAAAuF,SAAAb,CADA,GAEA,4BAFA,GAGA,IAHA;AAGA,SA9NA+C,EAyOAA,CAAAA,CAAAZ,UAAAY,GAAA,UAAAtlB,CAAA,EAAAA;AACA,cAAAA,CAAAA,YAAAwiB,CAAAA,CAAApc,IAAAoc,CAAA8C,SAAA,EACA,OAAAtlB,CAAA;AACA,cAAA6d,CAAAA,GAAA,IAAA2E,CAAAA,CAAApc,IAAAoc,CAAA8C,SAAA,EAAA;;AACA,cAAAtlB,CAAAA,CAAA0N,KAAA,EAAA;AACA,gBAAA,CAAAjL,KAAAA,CAAAqN,OAAArN,CAAAzC,CAAAA,CAAA0N,KAAAjL,CAAA,EACA,MAAA4H,SAAAA,CAAA,uCAAAA,CAAA;AACAwT,YAAAA,CAAAA,CAAAnQ,KAAAmQ,GAAA,EAAAA;;AACA,iBAAA,IAAA3f,CAAAA,GAAA,CAAA,EAA+BA,CAAAA,GAAA8B,CAAAA,CAAA0N,KAAA1N,CAAAe,MAA/B,EAA+BA,EAAyB7C,CAAxD,EACA2f,CAAAA,CAAAnQ,KAAAmQ,CAAA3f,CAAA2f,IAAAqB,MAAAA,CAAAlf,CAAAA,CAAA0N,KAAA1N,CAAA9B,CAAA8B,CAAAkf,CAAArB;AAEA;;AAAA,cAAA7d,CAAAA,CAAA+T,MAAA,EAAA;AACA,gBAAA,CAAAtR,KAAAA,CAAAqN,OAAArN,CAAAzC,CAAAA,CAAA+T,MAAAtR,CAAA,EACA,MAAA4H,SAAAA,CAAA,wCAAAA,CAAA;AACAwT,YAAAA,CAAAA,CAAA9J,MAAA8J,GAAA,EAAAA;;AACA,iBAAA3f,CAAAA,GAAA,CAAA,EAA+BA,CAAAA,GAAA8B,CAAAA,CAAA+T,MAAA/T,CAAAe,MAA/B,EAA+BA,EAA0B7C,CAAzD,EACA2f,CAAAA,CAAA9J,MAAA8J,CAAA3f,CAAA2f,IAAAqB,MAAAA,CAAAlf,CAAAA,CAAA+T,MAAA/T,CAAA9B,CAAA8B,CAAAkf,CAAArB;AAQA;;AAAA,cANA,QAAA7d,CAAAA,CAAAnB,IAAA,KACAgf,CAAAA,CAAAhf,IAAAgf,GAAAqB,MAAAA,CAAAlf,CAAAA,CAAAnB,IAAAqgB,CADA,GAEA,QAAAlf,CAAAA,CAAAulB,MAAA,KACA1H,CAAAA,CAAA0H,MAAA1H,GAAAqB,MAAAA,CAAAlf,CAAAA,CAAAulB,MAAArG,CADA,CAFA,EAIA,QAAAlf,CAAAA,CAAAwlB,MAAA,KACA3H,CAAAA,CAAA2H,MAAA3H,GAAAqB,MAAAA,CAAAlf,CAAAA,CAAAwlB,MAAAtG,CADA,CAJA,EAMAlf,CAAAA,CAAA2T,SAAA,EAAA;AACA,gBAAA,CAAAlR,KAAAA,CAAAqN,OAAArN,CAAAzC,CAAAA,CAAA2T,SAAAlR,CAAA,EACA,MAAA4H,SAAAA,CAAA,2CAAAA,CAAA;AACAwT,YAAAA,CAAAA,CAAAlK,SAAAkK,GAAA,EAAAA;;AACA,iBAAA3f,CAAAA,GAAA,CAAA,EAA+BA,CAAAA,GAAA8B,CAAAA,CAAA2T,SAAA3T,CAAAe,MAA/B,EAA+BA,EAA6B7C,CAA5D,EAA4D;AAC5D,kBAAA,YAAA,OAAA8B,CAAAA,CAAA2T,SAAA3T,CAAA9B,CAAA8B,CAAA,EACA,MAAAqK,SAAAA,CAAA,4CAAAA,CAAA;AACAwT,cAAAA,CAAAA,CAAAlK,SAAAkK,CAAA3f,CAAA2f,IAAA2E,CAAAA,CAAApc,IAAAoc,CAAAK,cAAAL,CAAAkC,UAAAlC,CAAAxiB,CAAAA,CAAA2T,SAAA3T,CAAA9B,CAAA8B,CAAAwiB,CAAA3E;AAAA3f;AAKA;;AAAA,iBAFA,QAAA8B,CAAAA,CAAAojB,SAAA,KACAvF,CAAAA,CAAAuF,SAAAvF,GAAAqB,MAAAA,CAAAlf,CAAAA,CAAAojB,SAAAlE,CADA,GAEArB,CAAA;AAAAA,SA7QAyH,EAyRAA,CAAAA,CAAAT,QAAAS,GAAA,UAAAzH,CAAA,EAAAiH,CAAA,EAAAA;AACAA,UAAAA,CAAAA,KACAA,CAAAA,GAAA,EADAA,CAAAA;AAEA,cAAA9kB,CAAAA,GAAA,EAAA;;AAYA,cAAA,CAXA8kB,CAAAA,CAAAC,MAAAD,IAAAA,CAAAA,CAAAE,QAWA,MAVAhlB,CAAAA,CAAA0N,KAAA1N,GAAA,EAAAA,EACAA,CAAAA,CAAA+T,MAAA/T,GAAA,EADAA,EAEAA,CAAAA,CAAA2T,SAAA3T,GAAA,EAQA,GANA8kB,CAAAA,CAAAE,QAAAF,KACA9kB,CAAAA,CAAAnB,IAAAmB,GAAA,EAAAA,EACAA,CAAAA,CAAAulB,MAAAvlB,GAAA,EADAA,EAEAA,CAAAA,CAAAojB,SAAApjB,GAAA,EAFAA,EAGAA,CAAAA,CAAAwlB,MAAAxlB,GAAA,EAJA8kB,CAMA,EAAAjH,CAAAA,CAAAnQ,KAAAmQ,IAAAA,CAAAA,CAAAnQ,KAAAmQ,CAAA9c,MAAA,EAAA;AACAf,YAAAA,CAAAA,CAAA0N,KAAA1N,GAAA,EAAAA;;AACA,iBAAA,IAAAuE,CAAAA,GAAA,CAAA,EAA+BA,CAAAA,GAAAsZ,CAAAA,CAAAnQ,KAAAmQ,CAAA9c,MAA/B,EAA+BA,EAA0BwD,CAAzD,EACAvE,CAAAA,CAAA0N,KAAA1N,CAAAuE,CAAAvE,IAAA6d,CAAAA,CAAAnQ,KAAAmQ,CAAAtZ,CAAAsZ,CAAA7d;AAEA;;AAAA,cAAA6d,CAAAA,CAAA9J,MAAA8J,IAAAA,CAAAA,CAAA9J,MAAA8J,CAAA9c,MAAA,EAAA;AACAf,YAAAA,CAAAA,CAAA+T,MAAA/T,GAAA,EAAAA;;AACA,iBAAAuE,CAAAA,GAAA,CAAA,EAA+BA,CAAAA,GAAAsZ,CAAAA,CAAA9J,MAAA8J,CAAA9c,MAA/B,EAA+BA,EAA2BwD,CAA1D,EACAvE,CAAAA,CAAA+T,MAAA/T,CAAAuE,CAAAvE,IAAA6d,CAAAA,CAAA9J,MAAA8J,CAAAtZ,CAAAsZ,CAAA7d;AAMA;;AAAA,cAJA,QAAA6d,CAAAA,CAAAhf,IAAA,IAAAgf,CAAAA,CAAA1d,cAAA0d,CAAA,MAAAA,CAAA,KACA7d,CAAAA,CAAAnB,IAAAmB,GAAA6d,CAAAA,CAAAhf,IADA,GAEA,QAAAgf,CAAAA,CAAA0H,MAAA,IAAA1H,CAAAA,CAAA1d,cAAA0d,CAAA,QAAAA,CAAA,KACA7d,CAAAA,CAAAulB,MAAAvlB,GAAA6d,CAAAA,CAAA0H,MADA,CAFA,EAIA1H,CAAAA,CAAAlK,SAAAkK,IAAAA,CAAAA,CAAAlK,SAAAkK,CAAA9c,MAAA,EAAA;AACAf,YAAAA,CAAAA,CAAA2T,SAAA3T,GAAA,EAAAA;;AACA,iBAAAuE,CAAAA,GAAA,CAAA,EAA+BA,CAAAA,GAAAsZ,CAAAA,CAAAlK,SAAAkK,CAAA9c,MAA/B,EAA+BA,EAA8BwD,CAA7D,EACAvE,CAAAA,CAAA2T,SAAA3T,CAAAuE,CAAAvE,IAAAwiB,CAAAA,CAAApc,IAAAoc,CAAAK,cAAAL,CAAAqC,QAAArC,CAAA3E,CAAAA,CAAAlK,SAAAkK,CAAAtZ,CAAAsZ,CAAA2E,EAAAsC,CAAAtC,CAAAxiB;AAMA;;AAAA,iBAJA,QAAA6d,CAAAA,CAAAuF,SAAA,IAAAvF,CAAAA,CAAA1d,cAAA0d,CAAA,WAAAA,CAAA,KACA7d,CAAAA,CAAAojB,SAAApjB,GAAA6d,CAAAA,CAAAuF,SADA,GAEA,QAAAvF,CAAAA,CAAA2H,MAAA,IAAA3H,CAAAA,CAAA1d,cAAA0d,CAAA,QAAAA,CAAA,KACA7d,CAAAA,CAAAwlB,MAAAxlB,GAAA6d,CAAAA,CAAA2H,MADA,CAFA,EAIAxlB,CAAA;AAAAA,SA/TAslB,EAyUAA,CAAAA,CAAAplB,SAAAolB,CAAAH,MAAAG,GAAA,YAAA;AACA,iBAAA3V,KAAAI,WAAAJ,CAAAkV,QAAAlV,CAAAA,IAAAA,EAAAuS,CAAAA,CAAA7E,IAAA6E,CAAAb,aAAA1R,CAAA;AAAA0R,SA1UAiE,EA6UAA,CAAA;AApXA,OAAA,EAt8BAlf,EA6zCAA,CAAAA,CAAAqf,UAAArf,GAAA,YAAA;AAyBA,iBAAAqf,CAAA,CAAA3H,CAAA,EAAAA;AAGA,cAFAnO,KAAA+V,WAAA/V,GAAA,EAAAA,EACAA,KAAAgW,aAAAhW,GAAA,EADAA,EAEAmO,CAAA,EACA,KAAA,IAAAJ,CAAAA,GAAA1e,MAAAA,CAAA0e,IAAA1e,CAAA8e,CAAA9e,CAAA,EAAAd,CAAAA,GAAA,CAAA,EAA+DA,CAAAA,GAAAwf,CAAAA,CAAA3c,MAA/D,EAA+DA,EAAiB7C,CAAhF,EACA,QAAA4f,CAAAA,CAAAJ,CAAAA,CAAAxf,CAAAwf,CAAAI,CAAA,KACAnO,KAAA+N,CAAAA,CAAAxf,CAAAwf,CAAA/N,IAAAmO,CAAAA,CAAAJ,CAAAA,CAAAxf,CAAAwf,CAAAI,CADA;AAwZA;;AAAA,eA9YA2H,CAAAA,CAAAvlB,SAAAulB,CAAAG,SAAAH,GAAAlD,CAAAA,CAAA1C,IAAA0C,GAAAA,CAAAA,CAAA1C,IAAA0C,CAAAhP,QAAAgP,CAAA,CAAAA,EAAA,CAAAA,EAAA,CAAA,CAAAA,CAAAA,GAAA,CAAAkD,EAQAA,CAAAA,CAAAvlB,SAAAulB,CAAAC,WAAAD,GAAAlD,CAAAA,CAAA9D,UARAgH,EAgBAA,CAAAA,CAAAvlB,SAAAulB,CAAAI,YAAAJ,GAAA,EAhBAA,EAwBAA,CAAAA,CAAAvlB,SAAAulB,CAAAK,eAAAL,GAAA,EAxBAA,EAgCAA,CAAAA,CAAAvlB,SAAAulB,CAAAD,MAAAC,GAAA,EAhCAA,EAwCAA,CAAAA,CAAAvlB,SAAAulB,CAAAM,YAAAN,GAAAlD,CAAAA,CAAA1C,IAAA0C,GAAAA,CAAAA,CAAA1C,IAAA0C,CAAAhP,QAAAgP,CAAA,CAAAA,EAAA,CAAAA,EAAA,CAAA,CAAAA,CAAAA,GAAA,CAxCAkD,EAgDAA,CAAAA,CAAAvlB,SAAAulB,CAAArC,SAAAqC,GAAA,EAhDAA,EAwDAA,CAAAA,CAAAvlB,SAAAulB,CAAAO,KAAAP,GAAA,IAxDAA,EAgEAA,CAAAA,CAAAvlB,SAAAulB,CAAAE,aAAAF,GAAAlD,CAAAA,CAAA9D,UAhEAgH,EA0EAA,CAAAA,CAAA7lB,MAAA6lB,GAAA,UAAA3H,CAAA,EAAAA;AACA,iBAAA,IAAA2H,CAAA,CAAA3H,CAAA,CAAA;AAAAA,SA3EA2H,EAuFAA,CAAAA,CAAAnC,MAAAmC,GAAA,UAAA5H,CAAA,EAAA0F,CAAA,EAAAA;AAiBA,cAhBAA,CAAAA,KACAA,CAAAA,GAAAlB,CAAAA,CAAAziB,MAAAyiB,EADAkB,CAAAA,EAEA,QAAA1F,CAAAA,CAAA+H,SAAA,IAAA/H,CAAAA,CAAA1d,cAAA0d,CAAA,WAAAA,CAAA,IACA0F,CAAAA,CAAAC,MAAAD,CAAA,CAAAA,EAAAG,KAAAH,CAAA1F,CAAAA,CAAA+H,SAAArC,CAHAA,EAIA,QAAA1F,CAAAA,CAAAgI,YAAA,IAAAhI,CAAAA,CAAA1d,cAAA0d,CAAA,cAAAA,CAAA,IACA0F,CAAAA,CAAAC,MAAAD,CAAA,EAAAA,EAAAE,MAAAF,CAAA1F,CAAAA,CAAAgI,YAAAtC,CALAA,EAMA,QAAA1F,CAAAA,CAAAiI,eAAA,IAAAjI,CAAAA,CAAA1d,cAAA0d,CAAA,iBAAAA,CAAA,IACA0F,CAAAA,CAAAC,MAAAD,CAAA,EAAAA,EAAAE,MAAAF,CAAA1F,CAAAA,CAAAiI,eAAAvC,CAPAA,EAQA,QAAA1F,CAAAA,CAAA2H,MAAA,IAAA3H,CAAAA,CAAA1d,cAAA0d,CAAA,QAAAA,CAAA,IACA0F,CAAAA,CAAAC,MAAAD,CAAA,EAAAA,EAAAE,MAAAF,CAAA1F,CAAAA,CAAA2H,MAAAjC,CATAA,EAUA,QAAA1F,CAAAA,CAAAkI,YAAA,IAAAlI,CAAAA,CAAA1d,cAAA0d,CAAA,cAAAA,CAAA,IACA0F,CAAAA,CAAAC,MAAAD,CAAA,EAAAA,EAAAG,KAAAH,CAAA1F,CAAAA,CAAAkI,YAAAxC,CAXAA,EAYA,QAAA1F,CAAAA,CAAAuF,SAAA,IAAAvF,CAAAA,CAAA1d,cAAA0d,CAAA,WAAAA,CAAA,IACA0F,CAAAA,CAAAC,MAAAD,CAAA,EAAAA,EAAAE,MAAAF,CAAA1F,CAAAA,CAAAuF,SAAAG,CAbAA,EAcA,QAAA1F,CAAAA,CAAAmI,KAAA,IAAAnI,CAAAA,CAAA1d,cAAA0d,CAAA,OAAAA,CAAA,IACA2E,CAAAA,CAAApc,IAAAoc,CAAAqB,UAAArB,CAAAc,MAAAd,CAAA3E,CAAAA,CAAAmI,KAAAxD,EAAAe,CAAAA,CAAAC,MAAAD,CAAA,EAAAA,EAAAI,IAAAJ,EAAAf,EAAAoB,MAAApB,EAfAe,EAgBA,QAAA1F,CAAAA,CAAA6H,WAAA,IAAA7H,CAAAA,CAAA6H,WAAA7H,CAAA9c,MAAA,EACA,KAAA,IAAA7C,CAAAA,GAAA,CAAA,EAA+BA,CAAAA,GAAA2f,CAAAA,CAAA6H,WAAA7H,CAAA9c,MAA/B,EAA+BA,EAAgC7C,CAA/D,EACAskB,CAAAA,CAAApc,IAAAoc,CAAAyD,kBAAAzD,CAAAc,MAAAd,CAAA3E,CAAAA,CAAA6H,WAAA7H,CAAA3f,CAAA2f,CAAA2E,EAAAe,CAAAA,CAAAC,MAAAD,CAAA,EAAAA,EAAAI,IAAAJ,EAAAf,EAAAoB,MAAApB;AACA,cAAA,QAAA3E,CAAAA,CAAA8H,aAAA,IAAA9H,CAAAA,CAAA8H,aAAA9H,CAAA9c,MAAA,EACA,KAAA7C,CAAAA,GAAA,CAAA,EAA+BA,CAAAA,GAAA2f,CAAAA,CAAA8H,aAAA9H,CAAA9c,MAA/B,EAA+BA,EAAkC7C,CAAjE,EACAskB,CAAAA,CAAApc,IAAAoc,CAAA0D,sBAAA1D,CAAAc,MAAAd,CAAA3E,CAAAA,CAAA8H,aAAA9H,CAAA3f,CAAA2f,CAAA2E,EAAAe,CAAAA,CAAAC,MAAAD,CAAA,GAAAA,EAAAI,IAAAJ,EAAAf,EAAAoB,MAAApB;AACA,iBAAAe,CAAA;AAAAA,SA9GAkC,EA0HAA,CAAAA,CAAA1B,eAAA0B,GAAA,UAAA5H,CAAA,EAAA0F,CAAA,EAAAA;AACA,iBAAA5T,KAAA2T,MAAA3T,CAAAkO,CAAAlO,EAAA4T,CAAA5T,EAAAiU,MAAAjU,EAAA;AAAAiU,SA3HA6B,EAyIAA,CAAAA,CAAAzB,MAAAyB,GAAA,UAAAxB,CAAA,EAAAljB,CAAA,EAAAA;AACAkjB,UAAAA,CAAAA,YAAA9B,CAAA8B,KACAA,CAAAA,GAAA9B,CAAAA,CAAAviB,MAAAuiB,CAAA8B,CAAA9B,CADA8B;;AAGA,eADA,IAAA5b,CAAAA,GAAAA,KAAAxG,CAAAwG,KAAAtH,CAAAsH,GAAA4b,CAAAA,CAAAC,GAAA7b,GAAA4b,CAAAA,CAAArW,GAAAqW,GAAAljB,CAAA,EAAA8c,CAAAA,GAAA,IAAA2E,CAAAA,CAAApc,IAAAoc,CAAAiD,UAAA,EACA,EAAAxB,CAAAA,CAAArW,GAAAqW,GAAA5b,CAAA,GAAA;AACA,gBAAA8b,CAAAA,GAAAF,CAAAA,CAAAT,MAAAS,EAAA;;AACA,oBAAAE,CAAAA,KAAA,CAAA;AACA,mBAAA,CAAA;AACAtG,gBAAAA,CAAAA,CAAA+H,SAAA/H,GAAAoG,CAAAA,CAAAP,KAAAO,EAAApG;AACA;;AACA,mBAAA,CAAA;AACAA,gBAAAA,CAAAA,CAAA6H,WAAA7H,IAAAA,CAAAA,CAAA6H,WAAA7H,CAAA9c,MAAA8c,KACAA,CAAAA,CAAA6H,WAAA7H,GAAA,EADAA,GAEAA,CAAAA,CAAA6H,WAAA7H,CAAApS,IAAAoS,CAAA2E,CAAAA,CAAApc,IAAAoc,CAAAyD,kBAAAzD,CAAAwB,MAAAxB,CAAAyB,CAAAzB,EAAAyB,CAAAA,CAAAT,MAAAS,EAAAzB,CAAA3E,CAFAA;AAGA;;AACA,mBAAA,CAAA;AACAA,gBAAAA,CAAAA,CAAAgI,YAAAhI,GAAAoG,CAAAA,CAAAR,MAAAQ,EAAApG;AACA;;AACA,mBAAA,CAAA;AACAA,gBAAAA,CAAAA,CAAAiI,eAAAjI,GAAAoG,CAAAA,CAAAR,MAAAQ,EAAApG;AACA;;AACA,mBAAA,CAAA;AACAA,gBAAAA,CAAAA,CAAA2H,MAAA3H,GAAAoG,CAAAA,CAAAR,MAAAQ,EAAApG;AACA;;AACA,mBAAA,CAAA;AACAA,gBAAAA,CAAAA,CAAAkI,YAAAlI,GAAAoG,CAAAA,CAAAP,KAAAO,EAAApG;AACA;;AACA,mBAAA,CAAA;AACAA,gBAAAA,CAAAA,CAAAuF,SAAAvF,GAAAoG,CAAAA,CAAAR,MAAAQ,EAAApG;AACA;;AACA,mBAAA,CAAA;AACAA,gBAAAA,CAAAA,CAAAmI,KAAAnI,GAAA2E,CAAAA,CAAApc,IAAAoc,CAAAqB,UAAArB,CAAAwB,MAAAxB,CAAAyB,CAAAzB,EAAAyB,CAAAA,CAAAT,MAAAS,EAAAzB,CAAA3E;AACA;;AACA,mBAAA,EAAA;AACAA,gBAAAA,CAAAA,CAAA8H,aAAA9H,IAAAA,CAAAA,CAAA8H,aAAA9H,CAAA9c,MAAA8c,KACAA,CAAAA,CAAA8H,aAAA9H,GAAA,EADAA,GAEAA,CAAAA,CAAA8H,aAAA9H,CAAApS,IAAAoS,CAAA2E,CAAAA,CAAApc,IAAAoc,CAAA0D,sBAAA1D,CAAAwB,MAAAxB,CAAAyB,CAAAzB,EAAAyB,CAAAA,CAAAT,MAAAS,EAAAzB,CAAA3E,CAFAA;AAGA;;AACA;AACAoG,gBAAAA,CAAAA,CAAAI,QAAAJ,CAAA,IAAAE,CAAAF;AAjCA;AAqCA;;AAAA,iBAAApG,CAAA;AAAAA,SApLA4H,EAiMAA,CAAAA,CAAAnB,eAAAmB,GAAA,UAAAxB,CAAA,EAAAA;AAGA,iBAFAA,CAAAA,YAAA9B,CAAA8B,KACAA,CAAAA,GAAA,IAAA9B,CAAA,CAAA8B,CAAA,CADAA,GAEAtU,KAAAqU,MAAArU,CAAAsU,CAAAtU,EAAAsU,CAAAA,CAAAT,MAAAS,EAAAtU,CAAA;AAAA6T,SApMAiC,EA+MAA,CAAAA,CAAAlB,MAAAkB,GAAA,UAAA5H,CAAA,EAAAA;AACA,cAAA,YAAA,OAAAA,CAAA,IAAA,SAAAA,CAAA,EACA,OAAA,iBAAA;AACA,cAAA,QAAAA,CAAAA,CAAA+H,SAAA,IAAA/H,CAAAA,CAAA1d,cAAA0d,CAAA,WAAAA,CAAA,IAAA,EACA0E,CAAAA,CAAA3X,SAAA2X,CAAA1E,CAAAA,CAAA+H,SAAArD,KAAA1E,CAAAA,CAAA+H,SAAA/H,IAAA0E,CAAAA,CAAA3X,SAAA2X,CAAA1E,CAAAA,CAAA+H,SAAA/H,CAAA2G,GAAAjC,CAAA1E,IAAA0E,CAAAA,CAAA3X,SAAA2X,CAAA1E,CAAAA,CAAA+H,SAAA/H,CAAA4G,IAAAlC,CADA,CAAA,EAEA,OAAA,kCAAA;;AACA,cAAA,QAAA1E,CAAAA,CAAA6H,WAAA,IAAA7H,CAAAA,CAAA1d,cAAA0d,CAAA,aAAAA,CAAA,EAAA;AACA,gBAAA,CAAApb,KAAAA,CAAAqN,OAAArN,CAAAob,CAAAA,CAAA6H,WAAAjjB,CAAA,EACA,OAAA,6BAAA;;AACA,iBAAA,IAAAvE,CAAAA,GAAA,CAAA,EAA+BA,CAAAA,GAAA2f,CAAAA,CAAA6H,WAAA7H,CAAA9c,MAA/B,EAA+BA,EAAgC7C,CAA/D,EAA+D;AAE/D,kBADAkX,CAAAA,GAAAoN,CAAAA,CAAApc,IAAAoc,CAAAyD,kBAAAzD,CAAA+B,MAAA/B,CAAA3E,CAAAA,CAAA6H,WAAA7H,CAAA3f,CAAA2f,CAAA2E,CACA,EACA,OAAA,iBAAApN,CAAA;AAAAA;AAGA;;AAAA,cAAA,QAAAyI,CAAAA,CAAAgI,YAAA,IAAAhI,CAAAA,CAAA1d,cAAA0d,CAAA,cAAAA,CAAA,IAAA,CACA0E,CAAAA,CAAAtD,QAAAsD,CAAA1E,CAAAA,CAAAgI,YAAAtD,CADA,EAEA,OAAA,+BAAA;AACA,cAAA,QAAA1E,CAAAA,CAAAiI,eAAA,IAAAjI,CAAAA,CAAA1d,cAAA0d,CAAA,iBAAAA,CAAA,IAAA,CACA0E,CAAAA,CAAAtD,QAAAsD,CAAA1E,CAAAA,CAAAiI,eAAAvD,CADA,EAEA,OAAA,kCAAA;AACA,cAAA,QAAA1E,CAAAA,CAAA2H,MAAA,IAAA3H,CAAAA,CAAA1d,cAAA0d,CAAA,QAAAA,CAAA,IAAA,CACA0E,CAAAA,CAAAtD,QAAAsD,CAAA1E,CAAAA,CAAA2H,MAAAjD,CADA,EAEA,OAAA,yBAAA;AACA,cAAA,QAAA1E,CAAAA,CAAAkI,YAAA,IAAAlI,CAAAA,CAAA1d,cAAA0d,CAAA,cAAAA,CAAA,IAAA,EACA0E,CAAAA,CAAA3X,SAAA2X,CAAA1E,CAAAA,CAAAkI,YAAAxD,KAAA1E,CAAAA,CAAAkI,YAAAlI,IAAA0E,CAAAA,CAAA3X,SAAA2X,CAAA1E,CAAAA,CAAAkI,YAAAlI,CAAA2G,GAAAjC,CAAA1E,IAAA0E,CAAAA,CAAA3X,SAAA2X,CAAA1E,CAAAA,CAAAkI,YAAAlI,CAAA4G,IAAAlC,CADA,CAAA,EAEA,OAAA,qCAAA;AACA,cAAA,QAAA1E,CAAAA,CAAAuF,SAAA,IAAAvF,CAAAA,CAAA1d,cAAA0d,CAAA,WAAAA,CAAA,IAAA,CACA0E,CAAAA,CAAAtD,QAAAsD,CAAA1E,CAAAA,CAAAuF,SAAAb,CADA,EAEA,OAAA,4BAAA;AACA,cAAA,QAAA1E,CAAAA,CAAAmI,KAAA,IAAAnI,CAAAA,CAAA1d,cAAA0d,CAAA,OAAAA,CAAA,KACAzI,CAAAA,GAAAoN,CAAAA,CAAApc,IAAAoc,CAAAqB,UAAArB,CAAA+B,MAAA/B,CAAA3E,CAAAA,CAAAmI,KAAAxD,CADA,CAAA,EAGA,OAAA,WAAApN,CAAA;;AAEA,cAAA,QAAAyI,CAAAA,CAAA8H,aAAA,IAAA9H,CAAAA,CAAA1d,cAAA0d,CAAA,eAAAA,CAAA,EAAA;AACA,gBAAA,CAAApb,KAAAA,CAAAqN,OAAArN,CAAAob,CAAAA,CAAA8H,aAAAljB,CAAA,EACA,OAAA,+BAAA;;AACA,iBAAAvE,CAAAA,GAAA,CAAA,EAA+BA,CAAAA,GAAA2f,CAAAA,CAAA8H,aAAA9H,CAAA9c,MAA/B,EAA+BA,EAAkC7C,CAAjE,EAAiE;AACjE,kBAAAkX,CAAA;AACA,kBADAA,CAAAA,GAAAoN,CAAAA,CAAApc,IAAAoc,CAAA0D,sBAAA1D,CAAA+B,MAAA/B,CAAA3E,CAAAA,CAAA8H,aAAA9H,CAAA3f,CAAA2f,CAAA2E,CACA,EACA,OAAA,mBAAApN,CAAA;AAAAA;AAGA;;AAAA,iBAAA,IAAA;AAAA,SA3PAqQ,EAsQAA,CAAAA,CAAAf,UAAAe,GAAA,UAAAzlB,CAAA,EAAAA;AACA,cAAAA,CAAAA,YAAAwiB,CAAAA,CAAApc,IAAAoc,CAAAiD,UAAA,EACA,OAAAzlB,CAAA;AACA,cAAA6d,CAAAA,GAAA,IAAA2E,CAAAA,CAAApc,IAAAoc,CAAAiD,UAAA,EAAA;;AAUA,cATA,QAAAzlB,CAAAA,CAAA4lB,SAAA,KACArD,CAAAA,CAAA1C,IAAA0C,GAAA1C,CACAhC,CAAAA,CAAA+H,SAAA/H,GAAA0E,CAAAA,CAAA1C,IAAA0C,CAAAoC,SAAApC,CAAAviB,CAAAA,CAAA4lB,SAAArD,CADA1C,EACAU,QADAV,GACAU,CAAA,CADAgC,GAEA,YAAA,OAAAviB,CAAAA,CAAA4lB,SAAA,GACA/H,CAAAA,CAAA+H,SAAA/H,GAAA+G,QAAAA,CAAA5kB,CAAAA,CAAA4lB,SAAAhB,EAAA,EAAAA,CADA,GAEA,YAAA,OAAA5kB,CAAAA,CAAA4lB,SAAA,GACA/H,CAAAA,CAAA+H,SAAA/H,GAAA7d,CAAAA,CAAA4lB,SADA,GAEA,YAAA,OAAA5lB,CAAAA,CAAA4lB,SAAA,KACA/H,CAAAA,CAAA+H,SAAA/H,GAAA,IAAA0E,CAAAA,CAAAhE,QAAA,CAAAve,CAAAA,CAAA4lB,SAAA5lB,CAAAwkB,GAAAxkB,KAAA,CAAA,EAAAA,CAAAA,CAAA4lB,SAAA5lB,CAAAykB,IAAAzkB,KAAA,CAAA,EAAAuH,QAAA,EADA,CAPA,GASAvH,CAAAA,CAAA0lB,WAAA,EAAA;AACA,gBAAA,CAAAjjB,KAAAA,CAAAqN,OAAArN,CAAAzC,CAAAA,CAAA0lB,WAAAjjB,CAAA,EACA,MAAA4H,SAAAA,CAAA,8CAAAA,CAAA;AACAwT,YAAAA,CAAAA,CAAA6H,WAAA7H,GAAA,EAAAA;;AACA,iBAAA,IAAA3f,CAAAA,GAAA,CAAA,EAA+BA,CAAAA,GAAA8B,CAAAA,CAAA0lB,WAAA1lB,CAAAe,MAA/B,EAA+BA,EAA+B7C,CAA9D,EAA8D;AAC9D,kBAAA,YAAA,OAAA8B,CAAAA,CAAA0lB,WAAA1lB,CAAA9B,CAAA8B,CAAA,EACA,MAAAqK,SAAAA,CAAA,+CAAAA,CAAA;AACAwT,cAAAA,CAAAA,CAAA6H,WAAA7H,CAAA3f,CAAA2f,IAAA2E,CAAAA,CAAApc,IAAAoc,CAAAyD,kBAAAzD,CAAAkC,UAAAlC,CAAAxiB,CAAAA,CAAA0lB,WAAA1lB,CAAA9B,CAAA8B,CAAAwiB,CAAA3E;AAAA3f;AAoBA;;AAAA,cAjBA,QAAA8B,CAAAA,CAAA6lB,YAAA,KACAhI,CAAAA,CAAAgI,YAAAhI,GAAAqB,MAAAA,CAAAlf,CAAAA,CAAA6lB,YAAA3G,CADA,GAEA,QAAAlf,CAAAA,CAAA8lB,eAAA,KACAjI,CAAAA,CAAAiI,eAAAjI,GAAAqB,MAAAA,CAAAlf,CAAAA,CAAA8lB,eAAA5G,CADA,CAFA,EAIA,QAAAlf,CAAAA,CAAAwlB,MAAA,KACA3H,CAAAA,CAAA2H,MAAA3H,GAAAqB,MAAAA,CAAAlf,CAAAA,CAAAwlB,MAAAtG,CADA,CAJA,EAMA,QAAAlf,CAAAA,CAAA+lB,YAAA,KACAxD,CAAAA,CAAA1C,IAAA0C,GAAA1C,CACAhC,CAAAA,CAAAkI,YAAAlI,GAAA0E,CAAAA,CAAA1C,IAAA0C,CAAAoC,SAAApC,CAAAviB,CAAAA,CAAA+lB,YAAAxD,CADA1C,EACAU,QADAV,GACAU,CAAA,CADAgC,GAEA,YAAA,OAAAviB,CAAAA,CAAA+lB,YAAA,GACAlI,CAAAA,CAAAkI,YAAAlI,GAAA+G,QAAAA,CAAA5kB,CAAAA,CAAA+lB,YAAAnB,EAAA,EAAAA,CADA,GAEA,YAAA,OAAA5kB,CAAAA,CAAA+lB,YAAA,GACAlI,CAAAA,CAAAkI,YAAAlI,GAAA7d,CAAAA,CAAA+lB,YADA,GAEA,YAAA,OAAA/lB,CAAAA,CAAA+lB,YAAA,KACAlI,CAAAA,CAAAkI,YAAAlI,GAAA,IAAA0E,CAAAA,CAAAhE,QAAA,CAAAve,CAAAA,CAAA+lB,YAAA/lB,CAAAwkB,GAAAxkB,KAAA,CAAA,EAAAA,CAAAA,CAAA+lB,YAAA/lB,CAAAykB,IAAAzkB,KAAA,CAAA,EAAAuH,QAAA,EADA,CAPA,CANA,EAeA,QAAAvH,CAAAA,CAAAojB,SAAA,KACAvF,CAAAA,CAAAuF,SAAAvF,GAAAqB,MAAAA,CAAAlf,CAAAA,CAAAojB,SAAAlE,CADA,CAfA,EAiBA,QAAAlf,CAAAA,CAAAgmB,KAAA,EAAA;AACA,gBAAA,YAAA,OAAAhmB,CAAAA,CAAAgmB,KAAA,EACA,MAAA3b,SAAAA,CAAA,yCAAAA,CAAA;AACAwT,YAAAA,CAAAA,CAAAmI,KAAAnI,GAAA2E,CAAAA,CAAApc,IAAAoc,CAAAqB,UAAArB,CAAAkC,UAAAlC,CAAAxiB,CAAAA,CAAAgmB,KAAAxD,CAAA3E;AAEA;;AAAA,cAAA7d,CAAAA,CAAA2lB,aAAA,EAAA;AACA,gBAAA,CAAAljB,KAAAA,CAAAqN,OAAArN,CAAAzC,CAAAA,CAAA2lB,aAAAljB,CAAA,EACA,MAAA4H,SAAAA,CAAA,gDAAAA,CAAA;AACAwT,YAAAA,CAAAA,CAAA8H,aAAA9H,GAAA,EAAAA;;AACA,iBAAA3f,CAAAA,GAAA,CAAA,EAA+BA,CAAAA,GAAA8B,CAAAA,CAAA2lB,aAAA3lB,CAAAe,MAA/B,EAA+BA,EAAiC7C,CAAhE,EAAgE;AAChE,kBAAA,YAAA,OAAA8B,CAAAA,CAAA2lB,aAAA3lB,CAAA9B,CAAA8B,CAAA,EACA,MAAAqK,SAAAA,CAAA,iDAAAA,CAAA;AACAwT,cAAAA,CAAAA,CAAA8H,aAAA9H,CAAA3f,CAAA2f,IAAA2E,CAAAA,CAAApc,IAAAoc,CAAA0D,sBAAA1D,CAAAkC,UAAAlC,CAAAxiB,CAAAA,CAAA2lB,aAAA3lB,CAAA9B,CAAA8B,CAAAwiB,CAAA3E;AAAA3f;AAGA;;AAAA,iBAAA2f,CAAA;AAAAA,SA7TA4H,EAyUAA,CAAAA,CAAAZ,QAAAY,GAAA,UAAA5H,CAAA,EAAAiH,CAAA,EAAAA;AACAA,UAAAA,CAAAA,KACAA,CAAAA,GAAA,EADAA,CAAAA;AAEA,cAAA9kB,CAAAA,GAAA,EAAA;;AAKA,cAAA,CAJA8kB,CAAAA,CAAAC,MAAAD,IAAAA,CAAAA,CAAAE,QAIA,MAHAhlB,CAAAA,CAAA0lB,WAAA1lB,GAAA,EAAAA,EACAA,CAAAA,CAAA2lB,aAAA3lB,GAAA,EAEA,GAAA8kB,CAAAA,CAAAE,QAAA,EAAA;AACA,gBAAAzC,CAAAA,CAAA1C,IAAA,EAAA;AACA,kBAAAoF,CAAAA,GAAA,IAAA1C,CAAAA,CAAA1C,IAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,CAAA,CAAA;AACA7f,cAAAA,CAAAA,CAAA4lB,SAAA5lB,GAAA8kB,CAAAA,CAAAxD,KAAAwD,KAAA5F,MAAA4F,GAAAG,CAAAA,CAAA7T,QAAA6T,EAAAH,GAAAA,CAAAA,CAAAxD,KAAAwD,KAAAna,MAAAma,GAAAG,CAAAA,CAAA1d,QAAA0d,EAAAH,GAAAG,CAAAjlB;AAAAilB,aAFA,MAIAjlB,CAAAA,CAAA4lB,SAAA5lB,GAAA8kB,CAAAA,CAAAxD,KAAAwD,KAAA5F,MAAA4F,GAAA,GAAAA,GAAA,CAAA9kB;;AAIA,gBAHAA,CAAAA,CAAA6lB,YAAA7lB,GAAA,EAAAA,EACAA,CAAAA,CAAA8lB,eAAA9lB,GAAA,EADAA,EAEAA,CAAAA,CAAAwlB,MAAAxlB,GAAA,EAFAA,EAGAuiB,CAAAA,CAAA1C,IAAA,EAAA;AACAoF,cAAAA,CAAAA,GAAA,IAAA1C,CAAAA,CAAA1C,IAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,CAAA,CAAAoF;AACAjlB,cAAAA,CAAAA,CAAA+lB,YAAA/lB,GAAA8kB,CAAAA,CAAAxD,KAAAwD,KAAA5F,MAAA4F,GAAAG,CAAAA,CAAA7T,QAAA6T,EAAAH,GAAAA,CAAAA,CAAAxD,KAAAwD,KAAAna,MAAAma,GAAAG,CAAAA,CAAA1d,QAAA0d,EAAAH,GAAAG,CAAAjlB;AAAAilB,aAFA,MAIAjlB,CAAAA,CAAA+lB,YAAA/lB,GAAA8kB,CAAAA,CAAAxD,KAAAwD,KAAA5F,MAAA4F,GAAA,GAAAA,GAAA,CAAA9kB;;AACAA,YAAAA,CAAAA,CAAAojB,SAAApjB,GAAA,EAAAA,EACAA,CAAAA,CAAAgmB,KAAAhmB,GAAA,IADAA;AAuBA;;AAAA,cApBA,QAAA6d,CAAAA,CAAA+H,SAAA,IAAA/H,CAAAA,CAAA1d,cAAA0d,CAAA,WAAAA,CAAA,KACA,YAAA,OAAAA,CAAAA,CAAA+H,SAAA,GACA5lB,CAAAA,CAAA4lB,SAAA5lB,GAAA8kB,CAAAA,CAAAxD,KAAAwD,KAAA5F,MAAA4F,GAAA5F,MAAAA,CAAArB,CAAAA,CAAA+H,SAAA1G,CAAA4F,GAAAjH,CAAAA,CAAA+H,SADA,GAGA5lB,CAAAA,CAAA4lB,SAAA5lB,GAAA8kB,CAAAA,CAAAxD,KAAAwD,KAAA5F,MAAA4F,GAAAvC,CAAAA,CAAA1C,IAAA0C,CAAAriB,SAAAqiB,CAAAnR,QAAAmR,CAAA9jB,IAAA8jB,CAAA1E,CAAAA,CAAA+H,SAAArD,CAAAuC,GAAAA,CAAAA,CAAAxD,KAAAwD,KAAAna,MAAAma,GAAA,IAAAvC,CAAAA,CAAAhE,QAAA,CAAAV,CAAAA,CAAA+H,SAAA/H,CAAA2G,GAAA3G,KAAA,CAAA,EAAAA,CAAAA,CAAA+H,SAAA/H,CAAA4G,IAAA5G,KAAA,CAAA,EAAAtW,QAAA,EAAAud,GAAAjH,CAAAA,CAAA+H,SAJA,GAKA,QAAA/H,CAAAA,CAAAgI,YAAA,IAAAhI,CAAAA,CAAA1d,cAAA0d,CAAA,cAAAA,CAAA,KACA7d,CAAAA,CAAA6lB,YAAA7lB,GAAA6d,CAAAA,CAAAgI,YADA,CALA,EAOA,QAAAhI,CAAAA,CAAAiI,eAAA,IAAAjI,CAAAA,CAAA1d,cAAA0d,CAAA,iBAAAA,CAAA,KACA7d,CAAAA,CAAA8lB,eAAA9lB,GAAA6d,CAAAA,CAAAiI,eADA,CAPA,EASA,QAAAjI,CAAAA,CAAA2H,MAAA,IAAA3H,CAAAA,CAAA1d,cAAA0d,CAAA,QAAAA,CAAA,KACA7d,CAAAA,CAAAwlB,MAAAxlB,GAAA6d,CAAAA,CAAA2H,MADA,CATA,EAWA,QAAA3H,CAAAA,CAAAkI,YAAA,IAAAlI,CAAAA,CAAA1d,cAAA0d,CAAA,cAAAA,CAAA,KACA,YAAA,OAAAA,CAAAA,CAAAkI,YAAA,GACA/lB,CAAAA,CAAA+lB,YAAA/lB,GAAA8kB,CAAAA,CAAAxD,KAAAwD,KAAA5F,MAAA4F,GAAA5F,MAAAA,CAAArB,CAAAA,CAAAkI,YAAA7G,CAAA4F,GAAAjH,CAAAA,CAAAkI,YADA,GAGA/lB,CAAAA,CAAA+lB,YAAA/lB,GAAA8kB,CAAAA,CAAAxD,KAAAwD,KAAA5F,MAAA4F,GAAAvC,CAAAA,CAAA1C,IAAA0C,CAAAriB,SAAAqiB,CAAAnR,QAAAmR,CAAA9jB,IAAA8jB,CAAA1E,CAAAA,CAAAkI,YAAAxD,CAAAuC,GAAAA,CAAAA,CAAAxD,KAAAwD,KAAAna,MAAAma,GAAA,IAAAvC,CAAAA,CAAAhE,QAAA,CAAAV,CAAAA,CAAAkI,YAAAlI,CAAA2G,GAAA3G,KAAA,CAAA,EAAAA,CAAAA,CAAAkI,YAAAlI,CAAA4G,IAAA5G,KAAA,CAAA,EAAAtW,QAAA,EAAAud,GAAAjH,CAAAA,CAAAkI,YAJA,CAXA,EAgBA,QAAAlI,CAAAA,CAAAuF,SAAA,IAAAvF,CAAAA,CAAA1d,cAAA0d,CAAA,WAAAA,CAAA,KACA7d,CAAAA,CAAAojB,SAAApjB,GAAA6d,CAAAA,CAAAuF,SADA,CAhBA,EAkBA,QAAAvF,CAAAA,CAAAmI,KAAA,IAAAnI,CAAAA,CAAA1d,cAAA0d,CAAA,OAAAA,CAAA,KACA7d,CAAAA,CAAAgmB,KAAAhmB,GAAAwiB,CAAAA,CAAApc,IAAAoc,CAAAqB,UAAArB,CAAAqC,QAAArC,CAAA3E,CAAAA,CAAAmI,KAAAxD,EAAAsC,CAAAtC,CADA,CAlBA,EAoBA3E,CAAAA,CAAA6H,WAAA7H,IAAAA,CAAAA,CAAA6H,WAAA7H,CAAA9c,MAAA,EAAA;AACAf,YAAAA,CAAAA,CAAA0lB,WAAA1lB,GAAA,EAAAA;;AACA,iBAAA,IAAAuE,CAAAA,GAAA,CAAA,EAA+BA,CAAAA,GAAAsZ,CAAAA,CAAA6H,WAAA7H,CAAA9c,MAA/B,EAA+BA,EAAgCwD,CAA/D,EACAvE,CAAAA,CAAA0lB,WAAA1lB,CAAAuE,CAAAvE,IAAAwiB,CAAAA,CAAApc,IAAAoc,CAAAyD,kBAAAzD,CAAAqC,QAAArC,CAAA3E,CAAAA,CAAA6H,WAAA7H,CAAAtZ,CAAAsZ,CAAA2E,EAAAsC,CAAAtC,CAAAxiB;AAEA;;AAAA,cAAA6d,CAAAA,CAAA8H,aAAA9H,IAAAA,CAAAA,CAAA8H,aAAA9H,CAAA9c,MAAA,EAAA;AACAf,YAAAA,CAAAA,CAAA2lB,aAAA3lB,GAAA,EAAAA;;AACA,iBAAAuE,CAAAA,GAAA,CAAA,EAA+BA,CAAAA,GAAAsZ,CAAAA,CAAA8H,aAAA9H,CAAA9c,MAA/B,EAA+BA,EAAkCwD,CAAjE,EACAvE,CAAAA,CAAA2lB,aAAA3lB,CAAAuE,CAAAvE,IAAAwiB,CAAAA,CAAApc,IAAAoc,CAAA0D,sBAAA1D,CAAAqC,QAAArC,CAAA3E,CAAAA,CAAA8H,aAAA9H,CAAAtZ,CAAAsZ,CAAA2E,EAAAsC,CAAAtC,CAAAxiB;AAEA;;AAAA,iBAAAA,CAAA;AAAAA,SAhYAylB,EA0YAA,CAAAA,CAAAvlB,SAAAulB,CAAAN,MAAAM,GAAA,YAAA;AACA,iBAAA9V,KAAAI,WAAAJ,CAAAkV,QAAAlV,CAAAA,IAAAA,EAAAuS,CAAAA,CAAA7E,IAAA6E,CAAAb,aAAA1R,CAAA;AAAA0R,SA3YAoE,EA8YAA,CAAA;AAtbA,OAAA,EA7zCArf,EAsvDAA,CAAAA,CAAA8f,sBAAA9f,GAAA,YAAA;AAkBA,iBAAA8f,CAAA,CAAApI,CAAA,EAAAA;AACA,cAAAA,CAAA,EACA,KAAA,IAAAJ,CAAAA,GAAA1e,MAAAA,CAAA0e,IAAA1e,CAAA8e,CAAA9e,CAAA,EAAAd,CAAAA,GAAA,CAAA,EAA+DA,CAAAA,GAAAwf,CAAAA,CAAA3c,MAA/D,EAA+DA,EAAiB7C,CAAhF,EACA,QAAA4f,CAAAA,CAAAJ,CAAAA,CAAAxf,CAAAwf,CAAAI,CAAA,KACAnO,KAAA+N,CAAAA,CAAAxf,CAAAwf,CAAA/N,IAAAmO,CAAAA,CAAAJ,CAAAA,CAAAxf,CAAAwf,CAAAI,CADA;AA0LA;;AAAA,eAhLAoI,CAAAA,CAAAhmB,SAAAgmB,CAAArmB,GAAAqmB,GAAA,EAAAA,EAQAA,CAAAA,CAAAhmB,SAAAgmB,CAAA3mB,KAAA2mB,GAAA,EARAA,EAkBAA,CAAAA,CAAAtmB,MAAAsmB,GAAA,UAAApI,CAAA,EAAAA;AACA,iBAAA,IAAAoI,CAAA,CAAApI,CAAA,CAAA;AAAAA,SAnBAoI,EA+BAA,CAAAA,CAAA5C,MAAA4C,GAAA,UAAArI,CAAA,EAAA0F,CAAA,EAAAA;AAOA,iBANAA,CAAAA,KACAA,CAAAA,GAAAlB,CAAAA,CAAAziB,MAAAyiB,EADAkB,CAAAA,EAEA,QAAA1F,CAAAA,CAAAhe,GAAA,IAAAge,CAAAA,CAAA1d,cAAA0d,CAAA,KAAAA,CAAA,IACA0F,CAAAA,CAAAC,MAAAD,CAAA,EAAAA,EAAAE,MAAAF,CAAA1F,CAAAA,CAAAhe,GAAA0jB,CAHAA,EAIA,QAAA1F,CAAAA,CAAAte,KAAA,IAAAse,CAAAA,CAAA1d,cAAA0d,CAAA,OAAAA,CAAA,IACA0F,CAAAA,CAAAC,MAAAD,CAAA,EAAAA,EAAAE,MAAAF,CAAA1F,CAAAA,CAAAte,KAAAgkB,CALAA,EAMAA,CAAA;AAAAA,SAtCA2C,EAkDAA,CAAAA,CAAAnC,eAAAmC,GAAA,UAAArI,CAAA,EAAA0F,CAAA,EAAAA;AACA,iBAAA5T,KAAA2T,MAAA3T,CAAAkO,CAAAlO,EAAA4T,CAAA5T,EAAAiU,MAAAjU,EAAA;AAAAiU,SAnDAsC,EAiEAA,CAAAA,CAAAlC,MAAAkC,GAAA,UAAAjC,CAAA,EAAAljB,CAAA,EAAAA;AACAkjB,UAAAA,CAAAA,YAAA9B,CAAA8B,KACAA,CAAAA,GAAA9B,CAAAA,CAAAviB,MAAAuiB,CAAA8B,CAAA9B,CADA8B;;AAGA,eADA,IAAA5b,CAAAA,GAAAA,KAAAxG,CAAAwG,KAAAtH,CAAAsH,GAAA4b,CAAAA,CAAAC,GAAA7b,GAAA4b,CAAAA,CAAArW,GAAAqW,GAAAljB,CAAA,EAAA8c,CAAAA,GAAA,IAAA2E,CAAAA,CAAApc,IAAAoc,CAAA0D,sBAAA,EACA,EAAAjC,CAAAA,CAAArW,GAAAqW,GAAA5b,CAAA,GAAA;AACA,gBAAA8b,CAAAA,GAAAF,CAAAA,CAAAT,MAAAS,EAAA;;AACA,oBAAAE,CAAAA,KAAA,CAAA;AACA,mBAAA,CAAA;AACAtG,gBAAAA,CAAAA,CAAAhe,GAAAge,GAAAoG,CAAAA,CAAAR,MAAAQ,EAAApG;AACA;;AACA,mBAAA,CAAA;AACAA,gBAAAA,CAAAA,CAAAte,KAAAse,GAAAoG,CAAAA,CAAAR,MAAAQ,EAAApG;AACA;;AACA;AACAoG,gBAAAA,CAAAA,CAAAI,QAAAJ,CAAA,IAAAE,CAAAF;AARA;AAYA;;AAAA,iBAAApG,CAAA;AAAAA,SAnFAqI,EAgGAA,CAAAA,CAAA5B,eAAA4B,GAAA,UAAAjC,CAAA,EAAAA;AAGA,iBAFAA,CAAAA,YAAA9B,CAAA8B,KACAA,CAAAA,GAAA,IAAA9B,CAAA,CAAA8B,CAAA,CADAA,GAEAtU,KAAAqU,MAAArU,CAAAsU,CAAAtU,EAAAsU,CAAAA,CAAAT,MAAAS,EAAAtU,CAAA;AAAA6T,SAnGA0C,EA8GAA,CAAAA,CAAA3B,MAAA2B,GAAA,UAAArI,CAAA,EAAAA;AACA,iBAAA,YAAA,OAAAA,CAAA,IAAA,SAAAA,CAAA,GACA,iBADA,GAEA,QAAAA,CAAAA,CAAAhe,GAAA,IAAAge,CAAAA,CAAA1d,cAAA0d,CAAA,KAAAA,CAAA,IAAA,CACA0E,CAAAA,CAAAtD,QAAAsD,CAAA1E,CAAAA,CAAAhe,GAAA0iB,CADA,GAEA,sBAFA,GAGA,QAAA1E,CAAAA,CAAAte,KAAA,IAAAse,CAAAA,CAAA1d,cAAA0d,CAAA,OAAAA,CAAA,IAAA,CACA0E,CAAAA,CAAAtD,QAAAsD,CAAA1E,CAAAA,CAAAte,KAAAgjB,CADA,GAEA,wBAFA,GAGA,IARA;AAQA,SAvHA2D,EAkIAA,CAAAA,CAAAxB,UAAAwB,GAAA,UAAAlmB,CAAA,EAAAA;AACA,cAAAA,CAAAA,YAAAwiB,CAAAA,CAAApc,IAAAoc,CAAA0D,sBAAA,EACA,OAAAlmB,CAAA;AACA,cAAA6d,CAAAA,GAAA,IAAA2E,CAAAA,CAAApc,IAAAoc,CAAA0D,sBAAA,EAAA;AAKA,iBAJA,QAAAlmB,CAAAA,CAAAH,GAAA,KACAge,CAAAA,CAAAhe,GAAAge,GAAAqB,MAAAA,CAAAlf,CAAAA,CAAAH,GAAAqf,CADA,GAEA,QAAAlf,CAAAA,CAAAT,KAAA,KACAse,CAAAA,CAAAte,KAAAse,GAAAqB,MAAAA,CAAAlf,CAAAA,CAAAT,KAAA2f,CADA,CAFA,EAIArB,CAAA;AAAAA,SA1IAqI,EAsJAA,CAAAA,CAAArB,QAAAqB,GAAA,UAAArI,CAAA,EAAAiH,CAAA,EAAAA;AACAA,UAAAA,CAAAA,KACAA,CAAAA,GAAA,EADAA,CAAAA;AAEA,cAAA9kB,CAAAA,GAAA,EAAA;AASA,iBARA8kB,CAAAA,CAAAE,QAAAF,KACA9kB,CAAAA,CAAAH,GAAAG,GAAA,EAAAA,EACAA,CAAAA,CAAAT,KAAAS,GAAA,EAFA8kB,GAIA,QAAAjH,CAAAA,CAAAhe,GAAA,IAAAge,CAAAA,CAAA1d,cAAA0d,CAAA,KAAAA,CAAA,KACA7d,CAAAA,CAAAH,GAAAG,GAAA6d,CAAAA,CAAAhe,GADA,CAJAilB,EAMA,QAAAjH,CAAAA,CAAAte,KAAA,IAAAse,CAAAA,CAAA1d,cAAA0d,CAAA,OAAAA,CAAA,KACA7d,CAAAA,CAAAT,KAAAS,GAAA6d,CAAAA,CAAAte,KADA,CANAulB,EAQA9kB,CAAA;AAAAA,SAlKAkmB,EA4KAA,CAAAA,CAAAhmB,SAAAgmB,CAAAf,MAAAe,GAAA,YAAA;AACA,iBAAAvW,KAAAI,WAAAJ,CAAAkV,QAAAlV,CAAAA,IAAAA,EAAAuS,CAAAA,CAAA7E,IAAA6E,CAAAb,aAAA1R,CAAA;AAAA0R,SA7KA6E,EAgLAA,CAAA;AA/MA,OAAA,EAtvDA9f,EAw8DAA,CAAAA,CAAA+f,gBAAA/f,GAAA,YAAA;AAkBA,iBAAA+f,CAAA,CAAArI,CAAA,EAAAA;AAEA,cADAnO,KAAAyW,yBAAAzW,GAAA,EAAAA,EACAmO,CAAA,EACA,KAAA,IAAAJ,CAAAA,GAAA1e,MAAAA,CAAA0e,IAAA1e,CAAA8e,CAAA9e,CAAA,EAAAd,CAAAA,GAAA,CAAA,EAA+DA,CAAAA,GAAAwf,CAAAA,CAAA3c,MAA/D,EAA+DA,EAAiB7C,CAAhF,EACA,QAAA4f,CAAAA,CAAAJ,CAAAA,CAAAxf,CAAAwf,CAAAI,CAAA,KACAnO,KAAA+N,CAAAA,CAAAxf,CAAAwf,CAAA/N,IAAAmO,CAAAA,CAAAJ,CAAAA,CAAAxf,CAAAwf,CAAAI,CADA;AA8MA;;AAAA,eApMAqI,CAAAA,CAAAjmB,SAAAimB,CAAAE,UAAAF,GAAA,EAAAA,EAQAA,CAAAA,CAAAjmB,SAAAimB,CAAAC,yBAAAD,GAAA5D,CAAAA,CAAA9D,UARA0H,EAkBAA,CAAAA,CAAAvmB,MAAAumB,GAAA,UAAArI,CAAA,EAAAA;AACA,iBAAA,IAAAqI,CAAA,CAAArI,CAAA,CAAA;AAAAA,SAnBAqI,EA+BAA,CAAAA,CAAA7C,MAAA6C,GAAA,UAAAtI,CAAA,EAAA0F,CAAA,EAAAA;AAKA,cAJAA,CAAAA,KACAA,CAAAA,GAAAlB,CAAAA,CAAAziB,MAAAyiB,EADAkB,CAAAA,EAEA,QAAA1F,CAAAA,CAAAwI,UAAA,IAAAxI,CAAAA,CAAA1d,cAAA0d,CAAA,YAAAA,CAAA,IACA0F,CAAAA,CAAAC,MAAAD,CAAA,EAAAA,EAAAE,MAAAF,CAAA1F,CAAAA,CAAAwI,UAAA9C,CAHAA,EAIA,QAAA1F,CAAAA,CAAAuI,yBAAA,IAAAvI,CAAAA,CAAAuI,yBAAAvI,CAAA9c,MAAA,EACA,KAAA,IAAA7C,CAAAA,GAAA,CAAA,EAA+BA,CAAAA,GAAA2f,CAAAA,CAAAuI,yBAAAvI,CAAA9c,MAA/B,EAA+BA,EAA8C7C,CAA7E,EACAskB,CAAAA,CAAApc,IAAAoc,CAAA0D,sBAAA1D,CAAAc,MAAAd,CAAA3E,CAAAA,CAAAuI,yBAAAvI,CAAA3f,CAAA2f,CAAA2E,EAAAe,CAAAA,CAAAC,MAAAD,CAAA,EAAAA,EAAAI,IAAAJ,EAAAf,EAAAoB,MAAApB;AACA,iBAAAe,CAAA;AAAAA,SAvCA4C,EAmDAA,CAAAA,CAAApC,eAAAoC,GAAA,UAAAtI,CAAA,EAAA0F,CAAA,EAAAA;AACA,iBAAA5T,KAAA2T,MAAA3T,CAAAkO,CAAAlO,EAAA4T,CAAA5T,EAAAiU,MAAAjU,EAAA;AAAAiU,SApDAuC,EAkEAA,CAAAA,CAAAnC,MAAAmC,GAAA,UAAAlC,CAAA,EAAAljB,CAAA,EAAAA;AACAkjB,UAAAA,CAAAA,YAAA9B,CAAA8B,KACAA,CAAAA,GAAA9B,CAAAA,CAAAviB,MAAAuiB,CAAA8B,CAAA9B,CADA8B;;AAGA,eADA,IAAA5b,CAAAA,GAAAA,KAAAxG,CAAAwG,KAAAtH,CAAAsH,GAAA4b,CAAAA,CAAAC,GAAA7b,GAAA4b,CAAAA,CAAArW,GAAAqW,GAAAljB,CAAA,EAAA8c,CAAAA,GAAA,IAAA2E,CAAAA,CAAApc,IAAAoc,CAAA2D,gBAAA,EACA,EAAAlC,CAAAA,CAAArW,GAAAqW,GAAA5b,CAAA,GAAA;AACA,gBAAA8b,CAAAA,GAAAF,CAAAA,CAAAT,MAAAS,EAAA;;AACA,oBAAAE,CAAAA,KAAA,CAAA;AACA,mBAAA,CAAA;AACAtG,gBAAAA,CAAAA,CAAAwI,UAAAxI,GAAAoG,CAAAA,CAAAR,MAAAQ,EAAApG;AACA;;AACA,mBAAA,CAAA;AACAA,gBAAAA,CAAAA,CAAAuI,yBAAAvI,IAAAA,CAAAA,CAAAuI,yBAAAvI,CAAA9c,MAAA8c,KACAA,CAAAA,CAAAuI,yBAAAvI,GAAA,EADAA,GAEAA,CAAAA,CAAAuI,yBAAAvI,CAAApS,IAAAoS,CAAA2E,CAAAA,CAAApc,IAAAoc,CAAA0D,sBAAA1D,CAAAwB,MAAAxB,CAAAyB,CAAAzB,EAAAyB,CAAAA,CAAAT,MAAAS,EAAAzB,CAAA3E,CAFAA;AAGA;;AACA;AACAoG,gBAAAA,CAAAA,CAAAI,QAAAJ,CAAA,IAAAE,CAAAF;AAVA;AAcA;;AAAA,iBAAApG,CAAA;AAAAA,SAtFAsI,EAmGAA,CAAAA,CAAA7B,eAAA6B,GAAA,UAAAlC,CAAA,EAAAA;AAGA,iBAFAA,CAAAA,YAAA9B,CAAA8B,KACAA,CAAAA,GAAA,IAAA9B,CAAA,CAAA8B,CAAA,CADAA,GAEAtU,KAAAqU,MAAArU,CAAAsU,CAAAtU,EAAAsU,CAAAA,CAAAT,MAAAS,EAAAtU,CAAA;AAAA6T,SAtGA2C,EAiHAA,CAAAA,CAAA5B,MAAA4B,GAAA,UAAAtI,CAAA,EAAAA;AACA,cAAA,YAAA,OAAAA,CAAA,IAAA,SAAAA,CAAA,EACA,OAAA,iBAAA;AACA,cAAA,QAAAA,CAAAA,CAAAwI,UAAA,IAAAxI,CAAAA,CAAA1d,cAAA0d,CAAA,YAAAA,CAAA,IAAA,CACA0E,CAAAA,CAAAtD,QAAAsD,CAAA1E,CAAAA,CAAAwI,UAAA9D,CADA,EAEA,OAAA,6BAAA;;AACA,cAAA,QAAA1E,CAAAA,CAAAuI,yBAAA,IAAAvI,CAAAA,CAAA1d,cAAA0d,CAAA,2BAAAA,CAAA,EAAA;AACA,gBAAA,CAAApb,KAAAA,CAAAqN,OAAArN,CAAAob,CAAAA,CAAAuI,yBAAA3jB,CAAA,EACA,OAAA,2CAAA;;AACA,iBAAA,IAAAvE,CAAAA,GAAA,CAAA,EAA+BA,CAAAA,GAAA2f,CAAAA,CAAAuI,yBAAAvI,CAAA9c,MAA/B,EAA+BA,EAA8C7C,CAA7E,EAA6E;AAC7E,kBAAAkX,CAAAA,GAAAoN,CAAAA,CAAApc,IAAAoc,CAAA0D,sBAAA1D,CAAA+B,MAAA/B,CAAA3E,CAAAA,CAAAuI,yBAAAvI,CAAA3f,CAAA2f,CAAA2E,CAAA;AACA,kBAAApN,CAAA,EACA,OAAA,+BAAAA,CAAA;AAAAA;AAGA;;AAAA,iBAAA,IAAA;AAAA,SAhIA+Q,EA2IAA,CAAAA,CAAAzB,UAAAyB,GAAA,UAAAnmB,CAAA,EAAAA;AACA,cAAAA,CAAAA,YAAAwiB,CAAAA,CAAApc,IAAAoc,CAAA2D,gBAAA,EACA,OAAAnmB,CAAA;AACA,cAAA6d,CAAAA,GAAA,IAAA2E,CAAAA,CAAApc,IAAAoc,CAAA2D,gBAAA,EAAA;;AAGA,cAFA,QAAAnmB,CAAAA,CAAAqmB,UAAA,KACAxI,CAAAA,CAAAwI,UAAAxI,GAAAqB,MAAAA,CAAAlf,CAAAA,CAAAqmB,UAAAnH,CADA,GAEAlf,CAAAA,CAAAomB,yBAAA,EAAA;AACA,gBAAA,CAAA3jB,KAAAA,CAAAqN,OAAArN,CAAAzC,CAAAA,CAAAomB,yBAAA3jB,CAAA,EACA,MAAA4H,SAAAA,CAAA,kEAAAA,CAAA;AACAwT,YAAAA,CAAAA,CAAAuI,yBAAAvI,GAAA,EAAAA;;AACA,iBAAA,IAAA3f,CAAAA,GAAA,CAAA,EAA+BA,CAAAA,GAAA8B,CAAAA,CAAAomB,yBAAApmB,CAAAe,MAA/B,EAA+BA,EAA6C7C,CAA5E,EAA4E;AAC5E,kBAAA,YAAA,OAAA8B,CAAAA,CAAAomB,yBAAApmB,CAAA9B,CAAA8B,CAAA,EACA,MAAAqK,SAAAA,CAAA,mEAAAA,CAAA;AACAwT,cAAAA,CAAAA,CAAAuI,yBAAAvI,CAAA3f,CAAA2f,IAAA2E,CAAAA,CAAApc,IAAAoc,CAAA0D,sBAAA1D,CAAAkC,UAAAlC,CAAAxiB,CAAAA,CAAAomB,yBAAApmB,CAAA9B,CAAA8B,CAAAwiB,CAAA3E;AAAA3f;AAGA;;AAAA,iBAAA2f,CAAA;AAAAA,SA3JAsI,EAuKAA,CAAAA,CAAAtB,QAAAsB,GAAA,UAAAtI,CAAA,EAAAiH,CAAA,EAAAA;AACAA,UAAAA,CAAAA,KACAA,CAAAA,GAAA,EADAA,CAAAA;AAEA,cAAA9kB,CAAAA,GAAA,EAAA;;AAOA,cAAA,CANA8kB,CAAAA,CAAAC,MAAAD,IAAAA,CAAAA,CAAAE,QAMA,MALAhlB,CAAAA,CAAAomB,yBAAApmB,GAAA,EAKA,GAJA8kB,CAAAA,CAAAE,QAAAF,KACA9kB,CAAAA,CAAAqmB,UAAArmB,GAAA,EADA8kB,CAIA,EAFA,QAAAjH,CAAAA,CAAAwI,UAAA,IAAAxI,CAAAA,CAAA1d,cAAA0d,CAAA,YAAAA,CAAA,KACA7d,CAAAA,CAAAqmB,UAAArmB,GAAA6d,CAAAA,CAAAwI,UADA,CAEA,EAAAxI,CAAAA,CAAAuI,yBAAAvI,IAAAA,CAAAA,CAAAuI,yBAAAvI,CAAA9c,MAAA,EAAA;AACAf,YAAAA,CAAAA,CAAAomB,yBAAApmB,GAAA,EAAAA;;AACA,iBAAA,IAAAuE,CAAAA,GAAA,CAAA,EAA+BA,CAAAA,GAAAsZ,CAAAA,CAAAuI,yBAAAvI,CAAA9c,MAA/B,EAA+BA,EAA8CwD,CAA7E,EACAvE,CAAAA,CAAAomB,yBAAApmB,CAAAuE,CAAAvE,IAAAwiB,CAAAA,CAAApc,IAAAoc,CAAA0D,sBAAA1D,CAAAqC,QAAArC,CAAA3E,CAAAA,CAAAuI,yBAAAvI,CAAAtZ,CAAAsZ,CAAA2E,EAAAsC,CAAAtC,CAAAxiB;AAEA;;AAAA,iBAAAA,CAAA;AAAAA,SAtLAmmB,EAgMAA,CAAAA,CAAAjmB,SAAAimB,CAAAhB,MAAAgB,GAAA,YAAA;AACA,iBAAAxW,KAAAI,WAAAJ,CAAAkV,QAAAlV,CAAAA,IAAAA,EAAAuS,CAAAA,CAAA7E,IAAA6E,CAAAb,aAAA1R,CAAA;AAAA0R,SAjMA8E,EAoMAA,CAAA;AApOA,OAAA,EAx8DA/f,EA+qEAA,CAAAA,CAAAyd,UAAAzd,GAAA,YAAA;AAwBA,iBAAAyd,CAAA,CAAA/F,CAAA,EAAAA;AAOA,cANAnO,KAAA2M,IAAA3M,GAAA,EAAAA,EACAA,KAAA2W,WAAA3W,GAAA,EADAA,EAEAA,KAAAjC,KAAAiC,GAAA,EAFAA,EAGAA,KAAAoE,MAAApE,GAAA,EAHAA,EAIAA,KAAA4W,SAAA5W,GAAA,EAJAA,EAKAA,KAAA6W,sBAAA7W,GAAA,EALAA,EAMAmO,CAAA,EACA,KAAA,IAAAJ,CAAAA,GAAA1e,MAAAA,CAAA0e,IAAA1e,CAAA8e,CAAA9e,CAAA,EAAAd,CAAAA,GAAA,CAAA,EAA+DA,CAAAA,GAAAwf,CAAAA,CAAA3c,MAA/D,EAA+DA,EAAiB7C,CAAhF,EACA,QAAA4f,CAAAA,CAAAJ,CAAAA,CAAAxf,CAAAwf,CAAAI,CAAA,KACAnO,KAAA+N,CAAAA,CAAAxf,CAAAwf,CAAA/N,IAAAmO,CAAAA,CAAAJ,CAAAA,CAAAxf,CAAAwf,CAAAI,CADA;AAkbA;;AAAA,eAxaA+F,CAAAA,CAAA3jB,SAAA2jB,CAAAvH,IAAAuH,GAAAtB,CAAAA,CAAA9D,UAAAoF,EAQAA,CAAAA,CAAA3jB,SAAA2jB,CAAAhlB,IAAAglB,GAAA,EARAA,EAgBAA,CAAAA,CAAA3jB,SAAA2jB,CAAAyC,WAAAzC,GAAAtB,CAAAA,CAAA9D,UAhBAoF,EAwBAA,CAAAA,CAAA3jB,SAAA2jB,CAAAT,SAAAS,GAAA,EAxBAA,EAgCAA,CAAAA,CAAA3jB,SAAA2jB,CAAAnW,KAAAmW,GAAAtB,CAAAA,CAAA9D,UAhCAoF,EAwCAA,CAAAA,CAAA3jB,SAAA2jB,CAAA9P,MAAA8P,GAAAtB,CAAAA,CAAA9D,UAxCAoF,EAgDAA,CAAAA,CAAA3jB,SAAA2jB,CAAA0C,SAAA1C,GAAAtB,CAAAA,CAAA9D,UAhDAoF,EAwDAA,CAAAA,CAAA3jB,SAAA2jB,CAAA2C,sBAAA3C,GAAAtB,CAAAA,CAAA9D,UAxDAoF,EAkEAA,CAAAA,CAAAjkB,MAAAikB,GAAA,UAAA/F,CAAA,EAAAA;AACA,iBAAA,IAAA+F,CAAA,CAAA/F,CAAA,CAAA;AAAAA,SAnEA+F,EA+EAA,CAAAA,CAAAP,MAAAO,GAAA,UAAAhG,CAAA,EAAA0F,CAAA,EAAAA;AAGA,cAFAA,CAAAA,KACAA,CAAAA,GAAAlB,CAAAA,CAAAziB,MAAAyiB,EADAkB,CAAAA,EAEA,QAAA1F,CAAAA,CAAAvB,IAAA,IAAAuB,CAAAA,CAAAvB,IAAAuB,CAAA9c,MAAA,EACA,KAAA,IAAA7C,CAAAA,GAAA,CAAA,EAA+BA,CAAAA,GAAA2f,CAAAA,CAAAvB,IAAAuB,CAAA9c,MAA/B,EAA+BA,EAAyB7C,CAAxD,EACAskB,CAAAA,CAAApc,IAAAoc,CAAA8C,SAAA9C,CAAAc,MAAAd,CAAA3E,CAAAA,CAAAvB,IAAAuB,CAAA3f,CAAA2f,CAAA2E,EAAAe,CAAAA,CAAAC,MAAAD,CAAA,EAAAA,EAAAI,IAAAJ,EAAAf,EAAAoB,MAAApB;AAGA,cAFA,QAAA3E,CAAAA,CAAAhf,IAAA,IAAAgf,CAAAA,CAAA1d,cAAA0d,CAAA,MAAAA,CAAA,IACA0F,CAAAA,CAAAC,MAAAD,CAAA,EAAAA,EAAAE,MAAAF,CAAA1F,CAAAA,CAAAhf,IAAA0kB,CADA,EAEA,QAAA1F,CAAAA,CAAAyI,WAAA,IAAAzI,CAAAA,CAAAyI,WAAAzI,CAAA9c,MAAA,EACA,KAAA7C,CAAAA,GAAA,CAAA,EAA+BA,CAAAA,GAAA2f,CAAAA,CAAAyI,WAAAzI,CAAA9c,MAA/B,EAA+BA,EAAgC7C,CAA/D,EACAskB,CAAAA,CAAApc,IAAAoc,CAAAnc,WAAAmc,CAAAc,MAAAd,CAAA3E,CAAAA,CAAAyI,WAAAzI,CAAA3f,CAAA2f,CAAA2E,EAAAe,CAAAA,CAAAC,MAAAD,CAAA,EAAAA,EAAAI,IAAAJ,EAAAf,EAAAoB,MAAApB;AAGA,cAFA,QAAA3E,CAAAA,CAAAuF,SAAA,IAAAvF,CAAAA,CAAA1d,cAAA0d,CAAA,WAAAA,CAAA,IACA0F,CAAAA,CAAAC,MAAAD,CAAA,EAAAA,EAAAE,MAAAF,CAAA1F,CAAAA,CAAAuF,SAAAG,CADA,EAEA,QAAA1F,CAAAA,CAAAnQ,KAAA,IAAAmQ,CAAAA,CAAAnQ,KAAAmQ,CAAA9c,MAAA,EACA,KAAA7C,CAAAA,GAAA,CAAA,EAA+BA,CAAAA,GAAA2f,CAAAA,CAAAnQ,KAAAmQ,CAAA9c,MAA/B,EAA+BA,EAA0B7C,CAAzD,EACAskB,CAAAA,CAAApc,IAAAoc,CAAA4C,cAAA5C,CAAAc,MAAAd,CAAA3E,CAAAA,CAAAnQ,KAAAmQ,CAAA3f,CAAA2f,CAAA2E,EAAAe,CAAAA,CAAAC,MAAAD,CAAA,EAAAA,EAAAI,IAAAJ,EAAAf,EAAAoB,MAAApB;AACA,cAAA,QAAA3E,CAAAA,CAAA9J,MAAA,IAAA8J,CAAAA,CAAA9J,MAAA8J,CAAA9c,MAAA,EACA,KAAA7C,CAAAA,GAAA,CAAA,EAA+BA,CAAAA,GAAA2f,CAAAA,CAAA9J,MAAA8J,CAAA9c,MAA/B,EAA+BA,EAA2B7C,CAA1D,EACAskB,CAAAA,CAAApc,IAAAoc,CAAA4C,cAAA5C,CAAAc,MAAAd,CAAA3E,CAAAA,CAAA9J,MAAA8J,CAAA3f,CAAA2f,CAAA2E,EAAAe,CAAAA,CAAAC,MAAAD,CAAA,EAAAA,EAAAI,IAAAJ,EAAAf,EAAAoB,MAAApB;AACA,cAAA,QAAA3E,CAAAA,CAAA0I,SAAA,IAAA1I,CAAAA,CAAA0I,SAAA1I,CAAA9c,MAAA,EACA,KAAA7C,CAAAA,GAAA,CAAA,EAA+BA,CAAAA,GAAA2f,CAAAA,CAAA0I,SAAA1I,CAAA9c,MAA/B,EAA+BA,EAA8B7C,CAA7D,EACAskB,CAAAA,CAAApc,IAAAoc,CAAA4C,cAAA5C,CAAAc,MAAAd,CAAA3E,CAAAA,CAAA0I,SAAA1I,CAAA3f,CAAA2f,CAAA2E,EAAAe,CAAAA,CAAAC,MAAAD,CAAA,GAAAA,EAAAI,IAAAJ,EAAAf,EAAAoB,MAAApB;AACA,cAAA,QAAA3E,CAAAA,CAAA2I,sBAAA,IAAA3I,CAAAA,CAAA2I,sBAAA3I,CAAA9c,MAAA,EACA,KAAA7C,CAAAA,GAAA,CAAA,EAA+BA,CAAAA,GAAA2f,CAAAA,CAAA2I,sBAAA3I,CAAA9c,MAA/B,EAA+BA,EAA2C7C,CAA1E,EACAskB,CAAAA,CAAApc,IAAAoc,CAAA2D,gBAAA3D,CAAAc,MAAAd,CAAA3E,CAAAA,CAAA2I,sBAAA3I,CAAA3f,CAAA2f,CAAA2E,EAAAe,CAAAA,CAAAC,MAAAD,CAAA,GAAAA,EAAAI,IAAAJ,EAAAf,EAAAoB,MAAApB;AACA,iBAAAe,CAAA;AAAAA,SAxGAM,EAoHAA,CAAAA,CAAAE,eAAAF,GAAA,UAAAhG,CAAA,EAAA0F,CAAA,EAAAA;AACA,iBAAA5T,KAAA2T,MAAA3T,CAAAkO,CAAAlO,EAAA4T,CAAA5T,EAAAiU,MAAAjU,EAAA;AAAAiU,SArHAC,EAmIAA,CAAAA,CAAAG,MAAAH,GAAA,UAAAI,CAAA,EAAAljB,CAAA,EAAAA;AACAkjB,UAAAA,CAAAA,YAAA9B,CAAA8B,KACAA,CAAAA,GAAA9B,CAAAA,CAAAviB,MAAAuiB,CAAA8B,CAAA9B,CADA8B;;AAGA,eADA,IAAA5b,CAAAA,GAAAA,KAAAxG,CAAAwG,KAAAtH,CAAAsH,GAAA4b,CAAAA,CAAAC,GAAA7b,GAAA4b,CAAAA,CAAArW,GAAAqW,GAAAljB,CAAA,EAAA8c,CAAAA,GAAA,IAAA2E,CAAAA,CAAApc,IAAAoc,CAAAqB,UAAA,EACA,EAAAI,CAAAA,CAAArW,GAAAqW,GAAA5b,CAAA,GAAA;AACA,gBAAA8b,CAAAA,GAAAF,CAAAA,CAAAT,MAAAS,EAAA;;AACA,oBAAAE,CAAAA,KAAA,CAAA;AACA,mBAAA,CAAA;AACAtG,gBAAAA,CAAAA,CAAAvB,IAAAuB,IAAAA,CAAAA,CAAAvB,IAAAuB,CAAA9c,MAAA8c,KACAA,CAAAA,CAAAvB,IAAAuB,GAAA,EADAA,GAEAA,CAAAA,CAAAvB,IAAAuB,CAAApS,IAAAoS,CAAA2E,CAAAA,CAAApc,IAAAoc,CAAA8C,SAAA9C,CAAAwB,MAAAxB,CAAAyB,CAAAzB,EAAAyB,CAAAA,CAAAT,MAAAS,EAAAzB,CAAA3E,CAFAA;AAGA;;AACA,mBAAA,CAAA;AACAA,gBAAAA,CAAAA,CAAAhf,IAAAgf,GAAAoG,CAAAA,CAAAR,MAAAQ,EAAApG;AACA;;AACA,mBAAA,CAAA;AACAA,gBAAAA,CAAAA,CAAAyI,WAAAzI,IAAAA,CAAAA,CAAAyI,WAAAzI,CAAA9c,MAAA8c,KACAA,CAAAA,CAAAyI,WAAAzI,GAAA,EADAA,GAEAA,CAAAA,CAAAyI,WAAAzI,CAAApS,IAAAoS,CAAA2E,CAAAA,CAAApc,IAAAoc,CAAAnc,WAAAmc,CAAAwB,MAAAxB,CAAAyB,CAAAzB,EAAAyB,CAAAA,CAAAT,MAAAS,EAAAzB,CAAA3E,CAFAA;AAGA;;AACA,mBAAA,EAAA;AACAA,gBAAAA,CAAAA,CAAAuF,SAAAvF,GAAAoG,CAAAA,CAAAR,MAAAQ,EAAApG;AACA;;AACA,mBAAA,EAAA;AACAA,gBAAAA,CAAAA,CAAAnQ,KAAAmQ,IAAAA,CAAAA,CAAAnQ,KAAAmQ,CAAA9c,MAAA8c,KACAA,CAAAA,CAAAnQ,KAAAmQ,GAAA,EADAA,GAEAA,CAAAA,CAAAnQ,KAAAmQ,CAAApS,IAAAoS,CAAA2E,CAAAA,CAAApc,IAAAoc,CAAA4C,cAAA5C,CAAAwB,MAAAxB,CAAAyB,CAAAzB,EAAAyB,CAAAA,CAAAT,MAAAS,EAAAzB,CAAA3E,CAFAA;AAGA;;AACA,mBAAA,EAAA;AACAA,gBAAAA,CAAAA,CAAA9J,MAAA8J,IAAAA,CAAAA,CAAA9J,MAAA8J,CAAA9c,MAAA8c,KACAA,CAAAA,CAAA9J,MAAA8J,GAAA,EADAA,GAEAA,CAAAA,CAAA9J,MAAA8J,CAAApS,IAAAoS,CAAA2E,CAAAA,CAAApc,IAAAoc,CAAA4C,cAAA5C,CAAAwB,MAAAxB,CAAAyB,CAAAzB,EAAAyB,CAAAA,CAAAT,MAAAS,EAAAzB,CAAA3E,CAFAA;AAGA;;AACA,mBAAA,EAAA;AACAA,gBAAAA,CAAAA,CAAA0I,SAAA1I,IAAAA,CAAAA,CAAA0I,SAAA1I,CAAA9c,MAAA8c,KACAA,CAAAA,CAAA0I,SAAA1I,GAAA,EADAA,GAEAA,CAAAA,CAAA0I,SAAA1I,CAAApS,IAAAoS,CAAA2E,CAAAA,CAAApc,IAAAoc,CAAA4C,cAAA5C,CAAAwB,MAAAxB,CAAAyB,CAAAzB,EAAAyB,CAAAA,CAAAT,MAAAS,EAAAzB,CAAA3E,CAFAA;AAGA;;AACA,mBAAA,EAAA;AACAA,gBAAAA,CAAAA,CAAA2I,sBAAA3I,IAAAA,CAAAA,CAAA2I,sBAAA3I,CAAA9c,MAAA8c,KACAA,CAAAA,CAAA2I,sBAAA3I,GAAA,EADAA,GAEAA,CAAAA,CAAA2I,sBAAA3I,CAAApS,IAAAoS,CAAA2E,CAAAA,CAAApc,IAAAoc,CAAA2D,gBAAA3D,CAAAwB,MAAAxB,CAAAyB,CAAAzB,EAAAyB,CAAAA,CAAAT,MAAAS,EAAAzB,CAAA3E,CAFAA;AAGA;;AACA;AACAoG,gBAAAA,CAAAA,CAAAI,QAAAJ,CAAA,IAAAE,CAAAF;AAtCA;AA0CA;;AAAA,iBAAApG,CAAA;AAAAA,SAnLAgG,EAgMAA,CAAAA,CAAAS,eAAAT,GAAA,UAAAI,CAAA,EAAAA;AAGA,iBAFAA,CAAAA,YAAA9B,CAAA8B,KACAA,CAAAA,GAAA,IAAA9B,CAAA,CAAA8B,CAAA,CADAA,GAEAtU,KAAAqU,MAAArU,CAAAsU,CAAAtU,EAAAsU,CAAAA,CAAAT,MAAAS,EAAAtU,CAAA;AAAA6T,SAnMAK,EA8MAA,CAAAA,CAAAU,MAAAV,GAAA,UAAAhG,CAAA,EAAAA;AACA,cAAA,YAAA,OAAAA,CAAA,IAAA,SAAAA,CAAA,EACA,OAAA,iBAAA;;AACA,cAAA,QAAAA,CAAAA,CAAAvB,IAAA,IAAAuB,CAAAA,CAAA1d,cAAA0d,CAAA,MAAAA,CAAA,EAAA;AACA,gBAAA,CAAApb,KAAAA,CAAAqN,OAAArN,CAAAob,CAAAA,CAAAvB,IAAA7Z,CAAA,EACA,OAAA,sBAAA;;AACA,iBAAA,IAAAvE,CAAAA,GAAA,CAAA,EAA+BA,CAAAA,GAAA2f,CAAAA,CAAAvB,IAAAuB,CAAA9c,MAA/B,EAA+BA,EAAyB7C,CAAxD,EAAwD;AAExD,kBADAkX,CAAAA,GAAAoN,CAAAA,CAAApc,IAAAoc,CAAA8C,SAAA9C,CAAA+B,MAAA/B,CAAA3E,CAAAA,CAAAvB,IAAAuB,CAAA3f,CAAA2f,CAAA2E,CACA,EACA,OAAA,UAAApN,CAAA;AAAAA;AAGA;;AAAA,cAAA,QAAAyI,CAAAA,CAAAhf,IAAA,IAAAgf,CAAAA,CAAA1d,cAAA0d,CAAA,MAAAA,CAAA,IAAA,CACA0E,CAAAA,CAAAtD,QAAAsD,CAAA1E,CAAAA,CAAAhf,IAAA0jB,CADA,EAEA,OAAA,uBAAA;;AACA,cAAA,QAAA1E,CAAAA,CAAAyI,WAAA,IAAAzI,CAAAA,CAAA1d,cAAA0d,CAAA,aAAAA,CAAA,EAAA;AACA,gBAAA,CAAApb,KAAAA,CAAAqN,OAAArN,CAAAob,CAAAA,CAAAyI,WAAA7jB,CAAA,EACA,OAAA,6BAAA;;AACA,iBAAAvE,CAAAA,GAAA,CAAA,EAA+BA,CAAAA,GAAA2f,CAAAA,CAAAyI,WAAAzI,CAAA9c,MAA/B,EAA+BA,EAAgC7C,CAA/D,EAA+D;AAE/D,kBADAkX,CAAAA,GAAAoN,CAAAA,CAAApc,IAAAoc,CAAAnc,WAAAmc,CAAA+B,MAAA/B,CAAA3E,CAAAA,CAAAyI,WAAAzI,CAAA3f,CAAA2f,CAAA2E,CACA,EACA,OAAA,iBAAApN,CAAA;AAAAA;AAGA;;AAAA,cAAA,QAAAyI,CAAAA,CAAAuF,SAAA,IAAAvF,CAAAA,CAAA1d,cAAA0d,CAAA,WAAAA,CAAA,IAAA,CACA0E,CAAAA,CAAAtD,QAAAsD,CAAA1E,CAAAA,CAAAuF,SAAAb,CADA,EAEA,OAAA,4BAAA;;AACA,cAAA,QAAA1E,CAAAA,CAAAnQ,KAAA,IAAAmQ,CAAAA,CAAA1d,cAAA0d,CAAA,OAAAA,CAAA,EAAA;AACA,gBAAA,CAAApb,KAAAA,CAAAqN,OAAArN,CAAAob,CAAAA,CAAAnQ,KAAAjL,CAAA,EACA,OAAA,uBAAA;;AACA,iBAAAvE,CAAAA,GAAA,CAAA,EAA+BA,CAAAA,GAAA2f,CAAAA,CAAAnQ,KAAAmQ,CAAA9c,MAA/B,EAA+BA,EAA0B7C,CAAzD,EAAyD;AAEzD,kBADAkX,CAAAA,GAAAoN,CAAAA,CAAApc,IAAAoc,CAAA4C,cAAA5C,CAAA+B,MAAA/B,CAAA3E,CAAAA,CAAAnQ,KAAAmQ,CAAA3f,CAAA2f,CAAA2E,CACA,EACA,OAAA,WAAApN,CAAA;AAAAA;AAGA;;AAAA,cAAA,QAAAyI,CAAAA,CAAA9J,MAAA,IAAA8J,CAAAA,CAAA1d,cAAA0d,CAAA,QAAAA,CAAA,EAAA;AACA,gBAAA,CAAApb,KAAAA,CAAAqN,OAAArN,CAAAob,CAAAA,CAAA9J,MAAAtR,CAAA,EACA,OAAA,wBAAA;;AACA,iBAAAvE,CAAAA,GAAA,CAAA,EAA+BA,CAAAA,GAAA2f,CAAAA,CAAA9J,MAAA8J,CAAA9c,MAA/B,EAA+BA,EAA2B7C,CAA1D,EAA0D;AAE1D,kBADAkX,CAAAA,GAAAoN,CAAAA,CAAApc,IAAAoc,CAAA4C,cAAA5C,CAAA+B,MAAA/B,CAAA3E,CAAAA,CAAA9J,MAAA8J,CAAA3f,CAAA2f,CAAA2E,CACA,EACA,OAAA,YAAApN,CAAA;AAAAA;AAGA;;AAAA,cAAA,QAAAyI,CAAAA,CAAA0I,SAAA,IAAA1I,CAAAA,CAAA1d,cAAA0d,CAAA,WAAAA,CAAA,EAAA;AACA,gBAAA,CAAApb,KAAAA,CAAAqN,OAAArN,CAAAob,CAAAA,CAAA0I,SAAA9jB,CAAA,EACA,OAAA,2BAAA;;AACA,iBAAAvE,CAAAA,GAAA,CAAA,EAA+BA,CAAAA,GAAA2f,CAAAA,CAAA0I,SAAA1I,CAAA9c,MAA/B,EAA+BA,EAA8B7C,CAA7D,EAA6D;AAE7D,kBADAkX,CAAAA,GAAAoN,CAAAA,CAAApc,IAAAoc,CAAA4C,cAAA5C,CAAA+B,MAAA/B,CAAA3E,CAAAA,CAAA0I,SAAA1I,CAAA3f,CAAA2f,CAAA2E,CACA,EACA,OAAA,eAAApN,CAAA;AAAAA;AAGA;;AAAA,cAAA,QAAAyI,CAAAA,CAAA2I,sBAAA,IAAA3I,CAAAA,CAAA1d,cAAA0d,CAAA,wBAAAA,CAAA,EAAA;AACA,gBAAA,CAAApb,KAAAA,CAAAqN,OAAArN,CAAAob,CAAAA,CAAA2I,sBAAA/jB,CAAA,EACA,OAAA,wCAAA;;AACA,iBAAAvE,CAAAA,GAAA,CAAA,EAA+BA,CAAAA,GAAA2f,CAAAA,CAAA2I,sBAAA3I,CAAA9c,MAA/B,EAA+BA,EAA2C7C,CAA1E,EAA0E;AAC1E,kBAAAkX,CAAA;AACA,kBADAA,CAAAA,GAAAoN,CAAAA,CAAApc,IAAAoc,CAAA2D,gBAAA3D,CAAA+B,MAAA/B,CAAA3E,CAAAA,CAAA2I,sBAAA3I,CAAA3f,CAAA2f,CAAA2E,CACA,EACA,OAAA,4BAAApN,CAAA;AAAAA;AAGA;;AAAA,iBAAA,IAAA;AAAA,SA7QAyO,EAwRAA,CAAAA,CAAAa,UAAAb,GAAA,UAAA7jB,CAAA,EAAAA;AACA,cAAAA,CAAAA,YAAAwiB,CAAAA,CAAApc,IAAAoc,CAAAqB,UAAA,EACA,OAAA7jB,CAAA;AACA,cAAA6d,CAAAA,GAAA,IAAA2E,CAAAA,CAAApc,IAAAoc,CAAAqB,UAAA,EAAA;;AACA,cAAA7jB,CAAAA,CAAAsc,IAAA,EAAA;AACA,gBAAA,CAAA7Z,KAAAA,CAAAqN,OAAArN,CAAAzC,CAAAA,CAAAsc,IAAA7Z,CAAA,EACA,MAAA4H,SAAAA,CAAA,uCAAAA,CAAA;AACAwT,YAAAA,CAAAA,CAAAvB,IAAAuB,GAAA,EAAAA;;AACA,iBAAA,IAAA3f,CAAAA,GAAA,CAAA,EAA+BA,CAAAA,GAAA8B,CAAAA,CAAAsc,IAAAtc,CAAAe,MAA/B,EAA+BA,EAAwB7C,CAAvD,EAAuD;AACvD,kBAAA,YAAA,OAAA8B,CAAAA,CAAAsc,IAAAtc,CAAA9B,CAAA8B,CAAA,EACA,MAAAqK,SAAAA,CAAA,wCAAAA,CAAA;AACAwT,cAAAA,CAAAA,CAAAvB,IAAAuB,CAAA3f,CAAA2f,IAAA2E,CAAAA,CAAApc,IAAAoc,CAAA8C,SAAA9C,CAAAkC,UAAAlC,CAAAxiB,CAAAA,CAAAsc,IAAAtc,CAAA9B,CAAA8B,CAAAwiB,CAAA3E;AAAA3f;AAKA;;AAAA,cAFA,QAAA8B,CAAAA,CAAAnB,IAAA,KACAgf,CAAAA,CAAAhf,IAAAgf,GAAAqB,MAAAA,CAAAlf,CAAAA,CAAAnB,IAAAqgB,CADA,GAEAlf,CAAAA,CAAAsmB,WAAA,EAAA;AACA,gBAAA,CAAA7jB,KAAAA,CAAAqN,OAAArN,CAAAzC,CAAAA,CAAAsmB,WAAA7jB,CAAA,EACA,MAAA4H,SAAAA,CAAA,8CAAAA,CAAA;AACAwT,YAAAA,CAAAA,CAAAyI,WAAAzI,GAAA,EAAAA;;AACA,iBAAA3f,CAAAA,GAAA,CAAA,EAA+BA,CAAAA,GAAA8B,CAAAA,CAAAsmB,WAAAtmB,CAAAe,MAA/B,EAA+BA,EAA+B7C,CAA9D,EAA8D;AAC9D,kBAAA,YAAA,OAAA8B,CAAAA,CAAAsmB,WAAAtmB,CAAA9B,CAAA8B,CAAA,EACA,MAAAqK,SAAAA,CAAA,+CAAAA,CAAA;AACAwT,cAAAA,CAAAA,CAAAyI,WAAAzI,CAAA3f,CAAA2f,IAAA2E,CAAAA,CAAApc,IAAAoc,CAAAnc,WAAAmc,CAAAkC,UAAAlC,CAAAxiB,CAAAA,CAAAsmB,WAAAtmB,CAAA9B,CAAA8B,CAAAwiB,CAAA3E;AAAA3f;AAKA;;AAAA,cAFA,QAAA8B,CAAAA,CAAAojB,SAAA,KACAvF,CAAAA,CAAAuF,SAAAvF,GAAAqB,MAAAA,CAAAlf,CAAAA,CAAAojB,SAAAlE,CADA,GAEAlf,CAAAA,CAAA0N,KAAA,EAAA;AACA,gBAAA,CAAAjL,KAAAA,CAAAqN,OAAArN,CAAAzC,CAAAA,CAAA0N,KAAAjL,CAAA,EACA,MAAA4H,SAAAA,CAAA,wCAAAA,CAAA;AACAwT,YAAAA,CAAAA,CAAAnQ,KAAAmQ,GAAA,EAAAA;;AACA,iBAAA3f,CAAAA,GAAA,CAAA,EAA+BA,CAAAA,GAAA8B,CAAAA,CAAA0N,KAAA1N,CAAAe,MAA/B,EAA+BA,EAAyB7C,CAAxD,EAAwD;AACxD,kBAAA,YAAA,OAAA8B,CAAAA,CAAA0N,KAAA1N,CAAA9B,CAAA8B,CAAA,EACA,MAAAqK,SAAAA,CAAA,yCAAAA,CAAA;AACAwT,cAAAA,CAAAA,CAAAnQ,KAAAmQ,CAAA3f,CAAA2f,IAAA2E,CAAAA,CAAApc,IAAAoc,CAAA4C,cAAA5C,CAAAkC,UAAAlC,CAAAxiB,CAAAA,CAAA0N,KAAA1N,CAAA9B,CAAA8B,CAAAwiB,CAAA3E;AAAA3f;AAGA;;AAAA,cAAA8B,CAAAA,CAAA+T,MAAA,EAAA;AACA,gBAAA,CAAAtR,KAAAA,CAAAqN,OAAArN,CAAAzC,CAAAA,CAAA+T,MAAAtR,CAAA,EACA,MAAA4H,SAAAA,CAAA,yCAAAA,CAAA;AACAwT,YAAAA,CAAAA,CAAA9J,MAAA8J,GAAA,EAAAA;;AACA,iBAAA3f,CAAAA,GAAA,CAAA,EAA+BA,CAAAA,GAAA8B,CAAAA,CAAA+T,MAAA/T,CAAAe,MAA/B,EAA+BA,EAA0B7C,CAAzD,EAAyD;AACzD,kBAAA,YAAA,OAAA8B,CAAAA,CAAA+T,MAAA/T,CAAA9B,CAAA8B,CAAA,EACA,MAAAqK,SAAAA,CAAA,0CAAAA,CAAA;AACAwT,cAAAA,CAAAA,CAAA9J,MAAA8J,CAAA3f,CAAA2f,IAAA2E,CAAAA,CAAApc,IAAAoc,CAAA4C,cAAA5C,CAAAkC,UAAAlC,CAAAxiB,CAAAA,CAAA+T,MAAA/T,CAAA9B,CAAA8B,CAAAwiB,CAAA3E;AAAA3f;AAGA;;AAAA,cAAA8B,CAAAA,CAAAumB,SAAA,EAAA;AACA,gBAAA,CAAA9jB,KAAAA,CAAAqN,OAAArN,CAAAzC,CAAAA,CAAAumB,SAAA9jB,CAAA,EACA,MAAA4H,SAAAA,CAAA,4CAAAA,CAAA;AACAwT,YAAAA,CAAAA,CAAA0I,SAAA1I,GAAA,EAAAA;;AACA,iBAAA3f,CAAAA,GAAA,CAAA,EAA+BA,CAAAA,GAAA8B,CAAAA,CAAAumB,SAAAvmB,CAAAe,MAA/B,EAA+BA,EAA6B7C,CAA5D,EAA4D;AAC5D,kBAAA,YAAA,OAAA8B,CAAAA,CAAAumB,SAAAvmB,CAAA9B,CAAA8B,CAAA,EACA,MAAAqK,SAAAA,CAAA,6CAAAA,CAAA;AACAwT,cAAAA,CAAAA,CAAA0I,SAAA1I,CAAA3f,CAAA2f,IAAA2E,CAAAA,CAAApc,IAAAoc,CAAA4C,cAAA5C,CAAAkC,UAAAlC,CAAAxiB,CAAAA,CAAAumB,SAAAvmB,CAAA9B,CAAA8B,CAAAwiB,CAAA3E;AAAA3f;AAGA;;AAAA,cAAA8B,CAAAA,CAAAwmB,sBAAA,EAAA;AACA,gBAAA,CAAA/jB,KAAAA,CAAAqN,OAAArN,CAAAzC,CAAAA,CAAAwmB,sBAAA/jB,CAAA,EACA,MAAA4H,SAAAA,CAAA,yDAAAA,CAAA;AACAwT,YAAAA,CAAAA,CAAA2I,sBAAA3I,GAAA,EAAAA;;AACA,iBAAA3f,CAAAA,GAAA,CAAA,EAA+BA,CAAAA,GAAA8B,CAAAA,CAAAwmB,sBAAAxmB,CAAAe,MAA/B,EAA+BA,EAA0C7C,CAAzE,EAAyE;AACzE,kBAAA,YAAA,OAAA8B,CAAAA,CAAAwmB,sBAAAxmB,CAAA9B,CAAA8B,CAAA,EACA,MAAAqK,SAAAA,CAAA,0DAAAA,CAAA;AACAwT,cAAAA,CAAAA,CAAA2I,sBAAA3I,CAAA3f,CAAA2f,IAAA2E,CAAAA,CAAApc,IAAAoc,CAAA2D,gBAAA3D,CAAAkC,UAAAlC,CAAAxiB,CAAAA,CAAAwmB,sBAAAxmB,CAAA9B,CAAA8B,CAAAwiB,CAAA3E;AAAA3f;AAGA;;AAAA,iBAAA2f,CAAA;AAAAA,SA5VAgG,EAwWAA,CAAAA,CAAAgB,QAAAhB,GAAA,UAAAhG,CAAA,EAAAiH,CAAA,EAAAA;AACAA,UAAAA,CAAAA,KACAA,CAAAA,GAAA,EADAA,CAAAA;AAEA,cAAA9kB,CAAAA,GAAA,EAAA;;AAaA,cAAA,CAZA8kB,CAAAA,CAAAC,MAAAD,IAAAA,CAAAA,CAAAE,QAYA,MAXAhlB,CAAAA,CAAAsc,IAAAtc,GAAA,EAAAA,EACAA,CAAAA,CAAAsmB,WAAAtmB,GAAA,EADAA,EAEAA,CAAAA,CAAA0N,KAAA1N,GAAA,EAFAA,EAGAA,CAAAA,CAAA+T,MAAA/T,GAAA,EAHAA,EAIAA,CAAAA,CAAAumB,SAAAvmB,GAAA,EAJAA,EAKAA,CAAAA,CAAAwmB,sBAAAxmB,GAAA,EAMA,GAJA8kB,CAAAA,CAAAE,QAAAF,KACA9kB,CAAAA,CAAAnB,IAAAmB,GAAA,EAAAA,EACAA,CAAAA,CAAAojB,SAAApjB,GAAA,EAFA8kB,CAIA,EAAAjH,CAAAA,CAAAvB,IAAAuB,IAAAA,CAAAA,CAAAvB,IAAAuB,CAAA9c,MAAA,EAAA;AACAf,YAAAA,CAAAA,CAAAsc,IAAAtc,GAAA,EAAAA;;AACA,iBAAA,IAAAuE,CAAAA,GAAA,CAAA,EAA+BA,CAAAA,GAAAsZ,CAAAA,CAAAvB,IAAAuB,CAAA9c,MAA/B,EAA+BA,EAAyBwD,CAAxD,EACAvE,CAAAA,CAAAsc,IAAAtc,CAAAuE,CAAAvE,IAAAwiB,CAAAA,CAAApc,IAAAoc,CAAA8C,SAAA9C,CAAAqC,QAAArC,CAAA3E,CAAAA,CAAAvB,IAAAuB,CAAAtZ,CAAAsZ,CAAA2E,EAAAsC,CAAAtC,CAAAxiB;AAIA;;AAAA,cAFA,QAAA6d,CAAAA,CAAAhf,IAAA,IAAAgf,CAAAA,CAAA1d,cAAA0d,CAAA,MAAAA,CAAA,KACA7d,CAAAA,CAAAnB,IAAAmB,GAAA6d,CAAAA,CAAAhf,IADA,GAEAgf,CAAAA,CAAAyI,WAAAzI,IAAAA,CAAAA,CAAAyI,WAAAzI,CAAA9c,MAAA,EAAA;AACAf,YAAAA,CAAAA,CAAAsmB,WAAAtmB,GAAA,EAAAA;;AACA,iBAAAuE,CAAAA,GAAA,CAAA,EAA+BA,CAAAA,GAAAsZ,CAAAA,CAAAyI,WAAAzI,CAAA9c,MAA/B,EAA+BA,EAAgCwD,CAA/D,EACAvE,CAAAA,CAAAsmB,WAAAtmB,CAAAuE,CAAAvE,IAAAwiB,CAAAA,CAAApc,IAAAoc,CAAAnc,WAAAmc,CAAAqC,QAAArC,CAAA3E,CAAAA,CAAAyI,WAAAzI,CAAAtZ,CAAAsZ,CAAA2E,EAAAsC,CAAAtC,CAAAxiB;AAIA;;AAAA,cAFA,QAAA6d,CAAAA,CAAAuF,SAAA,IAAAvF,CAAAA,CAAA1d,cAAA0d,CAAA,WAAAA,CAAA,KACA7d,CAAAA,CAAAojB,SAAApjB,GAAA6d,CAAAA,CAAAuF,SADA,GAEAvF,CAAAA,CAAAnQ,KAAAmQ,IAAAA,CAAAA,CAAAnQ,KAAAmQ,CAAA9c,MAAA,EAAA;AACAf,YAAAA,CAAAA,CAAA0N,KAAA1N,GAAA,EAAAA;;AACA,iBAAAuE,CAAAA,GAAA,CAAA,EAA+BA,CAAAA,GAAAsZ,CAAAA,CAAAnQ,KAAAmQ,CAAA9c,MAA/B,EAA+BA,EAA0BwD,CAAzD,EACAvE,CAAAA,CAAA0N,KAAA1N,CAAAuE,CAAAvE,IAAAwiB,CAAAA,CAAApc,IAAAoc,CAAA4C,cAAA5C,CAAAqC,QAAArC,CAAA3E,CAAAA,CAAAnQ,KAAAmQ,CAAAtZ,CAAAsZ,CAAA2E,EAAAsC,CAAAtC,CAAAxiB;AAEA;;AAAA,cAAA6d,CAAAA,CAAA9J,MAAA8J,IAAAA,CAAAA,CAAA9J,MAAA8J,CAAA9c,MAAA,EAAA;AACAf,YAAAA,CAAAA,CAAA+T,MAAA/T,GAAA,EAAAA;;AACA,iBAAAuE,CAAAA,GAAA,CAAA,EAA+BA,CAAAA,GAAAsZ,CAAAA,CAAA9J,MAAA8J,CAAA9c,MAA/B,EAA+BA,EAA2BwD,CAA1D,EACAvE,CAAAA,CAAA+T,MAAA/T,CAAAuE,CAAAvE,IAAAwiB,CAAAA,CAAApc,IAAAoc,CAAA4C,cAAA5C,CAAAqC,QAAArC,CAAA3E,CAAAA,CAAA9J,MAAA8J,CAAAtZ,CAAAsZ,CAAA2E,EAAAsC,CAAAtC,CAAAxiB;AAEA;;AAAA,cAAA6d,CAAAA,CAAA0I,SAAA1I,IAAAA,CAAAA,CAAA0I,SAAA1I,CAAA9c,MAAA,EAAA;AACAf,YAAAA,CAAAA,CAAAumB,SAAAvmB,GAAA,EAAAA;;AACA,iBAAAuE,CAAAA,GAAA,CAAA,EAA+BA,CAAAA,GAAAsZ,CAAAA,CAAA0I,SAAA1I,CAAA9c,MAA/B,EAA+BA,EAA8BwD,CAA7D,EACAvE,CAAAA,CAAAumB,SAAAvmB,CAAAuE,CAAAvE,IAAAwiB,CAAAA,CAAApc,IAAAoc,CAAA4C,cAAA5C,CAAAqC,QAAArC,CAAA3E,CAAAA,CAAA0I,SAAA1I,CAAAtZ,CAAAsZ,CAAA2E,EAAAsC,CAAAtC,CAAAxiB;AAEA;;AAAA,cAAA6d,CAAAA,CAAA2I,sBAAA3I,IAAAA,CAAAA,CAAA2I,sBAAA3I,CAAA9c,MAAA,EAAA;AACAf,YAAAA,CAAAA,CAAAwmB,sBAAAxmB,GAAA,EAAAA;;AACA,iBAAAuE,CAAAA,GAAA,CAAA,EAA+BA,CAAAA,GAAAsZ,CAAAA,CAAA2I,sBAAA3I,CAAA9c,MAA/B,EAA+BA,EAA2CwD,CAA1E,EACAvE,CAAAA,CAAAwmB,sBAAAxmB,CAAAuE,CAAAvE,IAAAwiB,CAAAA,CAAApc,IAAAoc,CAAA2D,gBAAA3D,CAAAqC,QAAArC,CAAA3E,CAAAA,CAAA2I,sBAAA3I,CAAAtZ,CAAAsZ,CAAA2E,EAAAsC,CAAAtC,CAAAxiB;AAEA;;AAAA,iBAAAA,CAAA;AAAAA,SA1ZA6jB,EAoaAA,CAAAA,CAAA3jB,SAAA2jB,CAAAsB,MAAAtB,GAAA,YAAA;AACA,iBAAAlU,KAAAI,WAAAJ,CAAAkV,QAAAlV,CAAAA,IAAAA,EAAAuS,CAAAA,CAAA7E,IAAA6E,CAAAb,aAAA1R,CAAA;AAAA0R,SAraAwC,EAwaAA,CAAA;AAndA,OAAA,EA/qEAzd,EAqoFAA,CAAAA,CAAAC,WAAAD,GAAA,YAAA;AA8BA,iBAAAC,CAAA,CAAAyX,CAAA,EAAAA;AASA,cARAnO,KAAA3O,IAAA2O,GAAA,EAAAA,EACAA,KAAAmC,SAAAnC,GAAA,EADAA,EAEAA,KAAAoC,SAAApC,GAAA,EAFAA,EAGAA,KAAAkB,UAAAlB,GAAA,EAHAA,EAIAA,KAAAqC,SAAArC,GAAA,EAJAA,EAKAA,KAAA8W,YAAA9W,GAAA,EALAA,EAMAA,KAAAsC,UAAAtC,GAAA,EANAA,EAOAA,KAAAuC,UAAAvC,GAAA,EAPAA,EAQAmO,CAAA,EACA,KAAA,IAAAJ,CAAAA,GAAA1e,MAAAA,CAAA0e,IAAA1e,CAAA8e,CAAA9e,CAAA,EAAAd,CAAAA,GAAA,CAAA,EAA+DA,CAAAA,GAAAwf,CAAAA,CAAA3c,MAA/D,EAA+DA,EAAiB7C,CAAhF,EACA,QAAA4f,CAAAA,CAAAJ,CAAAA,CAAAxf,CAAAwf,CAAAI,CAAA,KACAnO,KAAA+N,CAAAA,CAAAxf,CAAAwf,CAAA/N,IAAAmO,CAAAA,CAAAJ,CAAAA,CAAAxf,CAAAwf,CAAAI,CADA;AAy8BA;;AAAA,eA/7BAzX,CAAAA,CAAAnG,SAAAmG,CAAArF,IAAAqF,GAAAkc,CAAAA,CAAA9D,UAAApY,EAQAA,CAAAA,CAAAnG,SAAAmG,CAAAuK,QAAAvK,GAAA,CARAA,EAgBAA,CAAAA,CAAAnG,SAAAmG,CAAAqgB,OAAArgB,GAAA,IAhBAA,EAwBAA,CAAAA,CAAAnG,SAAAmG,CAAAyL,SAAAzL,GAAAkc,CAAAA,CAAA9D,UAxBApY,EAgCAA,CAAAA,CAAAnG,SAAAmG,CAAA0L,SAAA1L,GAAAkc,CAAAA,CAAA9D,UAhCApY,EAwCAA,CAAAA,CAAAnG,SAAAmG,CAAAwK,UAAAxK,GAAAkc,CAAAA,CAAA9D,UAxCApY,EAgDAA,CAAAA,CAAAnG,SAAAmG,CAAA2L,SAAA3L,GAAAkc,CAAAA,CAAA9D,UAhDApY,EAwDAA,CAAAA,CAAAnG,SAAAmG,CAAAxH,IAAAwH,GAAA,EAxDAA,EAgEAA,CAAAA,CAAAnG,SAAAmG,CAAA+c,SAAA/c,GAAA,EAhEAA,EAwEAA,CAAAA,CAAAnG,SAAAmG,CAAAgL,OAAAhL,GAAAkc,CAAAA,CAAA5C,SAAA4C,CAAA,EAAAA,CAxEAlc,EAgFAA,CAAAA,CAAAnG,SAAAmG,CAAAogB,YAAApgB,GAAAkc,CAAAA,CAAA9D,UAhFApY,EAwFAA,CAAAA,CAAAnG,SAAAmG,CAAAsgB,YAAAtgB,GAAA,CAxFAA,EAgGAA,CAAAA,CAAAnG,SAAAmG,CAAA4L,UAAA5L,GAAAkc,CAAAA,CAAA9D,UAhGApY,EAwGAA,CAAAA,CAAAnG,SAAAmG,CAAA6L,UAAA7L,GAAAkc,CAAAA,CAAA9D,UAxGApY,EAkHAA,CAAAA,CAAAzG,MAAAyG,GAAA,UAAAyX,CAAA,EAAAA;AACA,iBAAA,IAAAzX,CAAA,CAAAyX,CAAA,CAAA;AAAAA,SAnHAzX,EA+HAA,CAAAA,CAAAid,MAAAjd,GAAA,UAAAwX,CAAA,EAAA0F,CAAA,EAAAA;AAGA,cAFAA,CAAAA,KACAA,CAAAA,GAAAlB,CAAAA,CAAAziB,MAAAyiB,EADAkB,CAAAA,EAEA,QAAA1F,CAAAA,CAAA7c,IAAA,IAAA6c,CAAAA,CAAA7c,IAAA6c,CAAA9c,MAAA,EAAA;AACAwiB,YAAAA,CAAAA,CAAAC,MAAAD,CAAA,EAAAA,EAAAI,IAAAJ;;AACA,iBAAA,IAAArlB,CAAAA,GAAA,CAAA,EAA+BA,CAAAA,GAAA2f,CAAAA,CAAA7c,IAAA6c,CAAA9c,MAA/B,EAA+BA,EAAyB7C,CAAxD,EACAqlB,CAAAA,CAAAG,KAAAH,CAAA1F,CAAAA,CAAA7c,IAAA6c,CAAA3f,CAAA2f,CAAA0F;;AACAA,YAAAA,CAAAA,CAAAK,MAAAL;AAMA;;AAAA,cAJA,QAAA1F,CAAAA,CAAAjN,QAAA,IAAAiN,CAAAA,CAAA1d,cAAA0d,CAAA,UAAAA,CAAA,IACA0F,CAAAA,CAAAC,MAAAD,CAAA,EAAAA,EAAAO,KAAAP,CAAA1F,CAAAA,CAAAjN,QAAA2S,CADA,EAEA,QAAA1F,CAAAA,CAAA6I,OAAA,IAAA7I,CAAAA,CAAA1d,cAAA0d,CAAA,SAAAA,CAAA,IACA2E,CAAAA,CAAApc,IAAAoc,CAAAnc,WAAAmc,CAAAoE,OAAApE,CAAAc,MAAAd,CAAA3E,CAAAA,CAAA6I,OAAAlE,EAAAe,CAAAA,CAAAC,MAAAD,CAAA,EAAAA,EAAAI,IAAAJ,EAAAf,EAAAoB,MAAApB,EAHA,EAIA,QAAA3E,CAAAA,CAAA/L,SAAA,IAAA+L,CAAAA,CAAA/L,SAAA+L,CAAA9c,MAAA,EAAA;AACAwiB,YAAAA,CAAAA,CAAAC,MAAAD,CAAA,EAAAA,EAAAI,IAAAJ;;AACA,iBAAArlB,CAAAA,GAAA,CAAA,EAA+BA,CAAAA,GAAA2f,CAAAA,CAAA/L,SAAA+L,CAAA9c,MAA/B,EAA+BA,EAA8B7C,CAA7D,EACAqlB,CAAAA,CAAApF,KAAAoF,CAAA1F,CAAAA,CAAA/L,SAAA+L,CAAA3f,CAAA2f,CAAA0F;;AACAA,YAAAA,CAAAA,CAAAK,MAAAL;AAEA;;AAAA,cAAA,QAAA1F,CAAAA,CAAA9L,SAAA,IAAA8L,CAAAA,CAAA9L,SAAA8L,CAAA9c,MAAA,EAAA;AACAwiB,YAAAA,CAAAA,CAAAC,MAAAD,CAAA,EAAAA,EAAAI,IAAAJ;;AACA,iBAAArlB,CAAAA,GAAA,CAAA,EAA+BA,CAAAA,GAAA2f,CAAAA,CAAA9L,SAAA8L,CAAA9c,MAA/B,EAA+BA,EAA8B7C,CAA7D,EACAqlB,CAAAA,CAAAO,KAAAP,CAAA1F,CAAAA,CAAA9L,SAAA8L,CAAA3f,CAAA2f,CAAA0F;;AACAA,YAAAA,CAAAA,CAAAK,MAAAL;AAEA;;AAAA,cAAA,QAAA1F,CAAAA,CAAAhN,UAAA,IAAAgN,CAAAA,CAAAhN,UAAAgN,CAAA9c,MAAA,EACA,KAAA7C,CAAAA,GAAA,CAAA,EAA+BA,CAAAA,GAAA2f,CAAAA,CAAAhN,UAAAgN,CAAA9c,MAA/B,EAA+BA,EAA+B7C,CAA9D,EACAqlB,CAAAA,CAAAC,MAAAD,CAAA,EAAAA,EAAA/B,KAAA+B,CAAA1F,CAAAA,CAAAhN,UAAAgN,CAAA3f,CAAA2f,CAAA0F;;AACA,cAAA,QAAA1F,CAAAA,CAAA7L,SAAA,IAAA6L,CAAAA,CAAA7L,SAAA6L,CAAA9c,MAAA,EAAA;AACAwiB,YAAAA,CAAAA,CAAAC,MAAAD,CAAA,EAAAA,EAAAI,IAAAJ;;AACA,iBAAArlB,CAAAA,GAAA,CAAA,EAA+BA,CAAAA,GAAA2f,CAAAA,CAAA7L,SAAA6L,CAAA9c,MAA/B,EAA+BA,EAA8B7C,CAA7D,EACAqlB,CAAAA,CAAAG,KAAAH,CAAA1F,CAAAA,CAAA7L,SAAA6L,CAAA3f,CAAA2f,CAAA0F;;AACAA,YAAAA,CAAAA,CAAAK,MAAAL;AAMA;;AAAA,cAJA,QAAA1F,CAAAA,CAAAhf,IAAA,IAAAgf,CAAAA,CAAA1d,cAAA0d,CAAA,MAAAA,CAAA,IACA0F,CAAAA,CAAAC,MAAAD,CAAA,EAAAA,EAAAE,MAAAF,CAAA1F,CAAAA,CAAAhf,IAAA0kB,CADA,EAEA,QAAA1F,CAAAA,CAAAxM,OAAA,IAAAwM,CAAAA,CAAA1d,cAAA0d,CAAA,SAAAA,CAAA,IACA0F,CAAAA,CAAAC,MAAAD,CAAA,EAAAA,EAAA/B,KAAA+B,CAAA1F,CAAAA,CAAAxM,OAAAkS,CAHA,EAIA,QAAA1F,CAAAA,CAAA5L,UAAA,IAAA4L,CAAAA,CAAA5L,UAAA4L,CAAA9c,MAAA,EAAA;AACAwiB,YAAAA,CAAAA,CAAAC,MAAAD,CAAA,EAAAA,EAAAI,IAAAJ;;AACA,iBAAArlB,CAAAA,GAAA,CAAA,EAA+BA,CAAAA,GAAA2f,CAAAA,CAAA5L,UAAA4L,CAAA9c,MAA/B,EAA+BA,EAA+B7C,CAA9D,EACAqlB,CAAAA,CAAAsD,MAAAtD,CAAA1F,CAAAA,CAAA5L,UAAA4L,CAAA3f,CAAA2f,CAAA0F;;AACAA,YAAAA,CAAAA,CAAAK,MAAAL;AAEA;;AAAA,cAAA,QAAA1F,CAAAA,CAAA3L,UAAA,IAAA2L,CAAAA,CAAA3L,UAAA2L,CAAA9c,MAAA,EAAA;AACAwiB,YAAAA,CAAAA,CAAAC,MAAAD,CAAA,EAAAA,EAAAI,IAAAJ;;AACA,iBAAArlB,CAAAA,GAAA,CAAA,EAA+BA,CAAAA,GAAA2f,CAAAA,CAAA3L,UAAA2L,CAAA9c,MAA/B,EAA+BA,EAA+B7C,CAA9D,EACAqlB,CAAAA,CAAAuD,MAAAvD,CAAA1F,CAAAA,CAAA3L,UAAA2L,CAAA3f,CAAA2f,CAAA0F;;AACAA,YAAAA,CAAAA,CAAAK,MAAAL;AAIA;;AAAA,cAFA,QAAA1F,CAAAA,CAAAuF,SAAA,IAAAvF,CAAAA,CAAA1d,cAAA0d,CAAA,WAAAA,CAAA,IACA0F,CAAAA,CAAAC,MAAAD,CAAA,EAAAA,EAAAE,MAAAF,CAAA1F,CAAAA,CAAAuF,SAAAG,CADA,EAEA,QAAA1F,CAAAA,CAAA4I,YAAA,IAAA5I,CAAAA,CAAA4I,YAAA5I,CAAA9c,MAAA,EACA,KAAA7C,CAAAA,GAAA,CAAA,EAA+BA,CAAAA,GAAA2f,CAAAA,CAAA4I,YAAA5I,CAAA9c,MAA/B,EAA+BA,EAAiC7C,CAAhE,EACAskB,CAAAA,CAAApc,IAAAoc,CAAA0D,sBAAA1D,CAAAc,MAAAd,CAAA3E,CAAAA,CAAA4I,YAAA5I,CAAA3f,CAAA2f,CAAA2E,EAAAe,CAAAA,CAAAC,MAAAD,CAAA,GAAAA,EAAAI,IAAAJ,EAAAf,EAAAoB,MAAApB;AAGA,iBAFA,QAAA3E,CAAAA,CAAA8I,YAAA,IAAA9I,CAAAA,CAAA1d,cAAA0d,CAAA,cAAAA,CAAA,IACA0F,CAAAA,CAAAC,MAAAD,CAAA,GAAAA,EAAAO,KAAAP,CAAA1F,CAAAA,CAAA8I,YAAApD,CADA,EAEAA,CAAA;AAAAA,SAxLAld,EAoMAA,CAAAA,CAAA0d,eAAA1d,GAAA,UAAAwX,CAAA,EAAA0F,CAAA,EAAAA;AACA,iBAAA5T,KAAA2T,MAAA3T,CAAAkO,CAAAlO,EAAA4T,CAAA5T,EAAAiU,MAAAjU,EAAA;AAAAiU,SArMAvd,EAmNAA,CAAAA,CAAA2d,MAAA3d,GAAA,UAAA4d,CAAA,EAAAljB,CAAA,EAAAA;AACAkjB,UAAAA,CAAAA,YAAA9B,CAAA8B,KACAA,CAAAA,GAAA9B,CAAAA,CAAAviB,MAAAuiB,CAAA8B,CAAA9B,CADA8B;;AAGA,eADA,IAAA5b,CAAAA,GAAAA,KAAAxG,CAAAwG,KAAAtH,CAAAsH,GAAA4b,CAAAA,CAAAC,GAAA7b,GAAA4b,CAAAA,CAAArW,GAAAqW,GAAAljB,CAAA,EAAA8c,CAAAA,GAAA,IAAA2E,CAAAA,CAAApc,IAAAoc,CAAAnc,WAAA,EACA,EAAA4d,CAAAA,CAAArW,GAAAqW,GAAA5b,CAAA,GAAA;AACA,gBAAA8b,CAAAA,GAAAF,CAAAA,CAAAT,MAAAS,EAAA;;AACA,oBAAAE,CAAAA,KAAA,CAAA;AACA,mBAAA,CAAA;AAGA,oBAFAtG,CAAAA,CAAA7c,IAAA6c,IAAAA,CAAAA,CAAA7c,IAAA6c,CAAA9c,MAAA8c,KACAA,CAAAA,CAAA7c,IAAA6c,GAAA,EADAA,GAEA,MAAA,IAAAsG,CAAA,CAAA,EAEA,KADA,IAAAC,CAAAA,GAAAH,CAAAA,CAAAT,MAAAS,KAAAA,CAAAA,CAAArW,GACA,EAAAqW,CAAAA,CAAArW,GAAAqW,GAAAG,CAAA,GACAvG,CAAAA,CAAA7c,IAAA6c,CAAApS,IAAAoS,CAAAoG,CAAAA,CAAAP,KAAAO,EAAApG,EAHA,KAKAA,CAAAA,CAAA7c,IAAA6c,CAAApS,IAAAoS,CAAAoG,CAAAA,CAAAP,KAAAO,EAAApG;AACA;;AACA,mBAAA,CAAA;AACAA,gBAAAA,CAAAA,CAAAjN,QAAAiN,GAAAoG,CAAAA,CAAAH,KAAAG,EAAApG;AACA;;AACA,mBAAA,CAAA;AACAA,gBAAAA,CAAAA,CAAA6I,OAAA7I,GAAA2E,CAAAA,CAAApc,IAAAoc,CAAAnc,WAAAmc,CAAAoE,OAAApE,CAAAwB,MAAAxB,CAAAyB,CAAAzB,EAAAyB,CAAAA,CAAAT,MAAAS,EAAAzB,CAAA3E;AACA;;AACA,mBAAA,CAAA;AAGA,oBAFAA,CAAAA,CAAA/L,SAAA+L,IAAAA,CAAAA,CAAA/L,SAAA+L,CAAA9c,MAAA8c,KACAA,CAAAA,CAAA/L,SAAA+L,GAAA,EADAA,GAEA,MAAA,IAAAsG,CAAA,CAAA,EAEA,KADAC,CAAAA,GAAAH,CAAAA,CAAAT,MAAAS,KAAAA,CAAAA,CAAArW,GACA,EAAAqW,CAAAA,CAAArW,GAAAqW,GAAAG,CAAA,GACAvG,CAAAA,CAAA/L,SAAA+L,CAAApS,IAAAoS,CAAAoG,CAAAA,CAAA9F,KAAA8F,EAAApG,EAHA,KAKAA,CAAAA,CAAA/L,SAAA+L,CAAApS,IAAAoS,CAAAoG,CAAAA,CAAA9F,KAAA8F,EAAApG;AACA;;AACA,mBAAA,CAAA;AAGA,oBAFAA,CAAAA,CAAA9L,SAAA8L,IAAAA,CAAAA,CAAA9L,SAAA8L,CAAA9c,MAAA8c,KACAA,CAAAA,CAAA9L,SAAA8L,GAAA,EADAA,GAEA,MAAA,IAAAsG,CAAA,CAAA,EAEA,KADAC,CAAAA,GAAAH,CAAAA,CAAAT,MAAAS,KAAAA,CAAAA,CAAArW,GACA,EAAAqW,CAAAA,CAAArW,GAAAqW,GAAAG,CAAA,GACAvG,CAAAA,CAAA9L,SAAA8L,CAAApS,IAAAoS,CAAAoG,CAAAA,CAAAH,KAAAG,EAAApG,EAHA,KAKAA,CAAAA,CAAA9L,SAAA8L,CAAApS,IAAAoS,CAAAoG,CAAAA,CAAAH,KAAAG,EAAApG;AACA;;AACA,mBAAA,CAAA;AACAA,gBAAAA,CAAAA,CAAAhN,UAAAgN,IAAAA,CAAAA,CAAAhN,UAAAgN,CAAA9c,MAAA8c,KACAA,CAAAA,CAAAhN,UAAAgN,GAAA,EADAA,GAEAA,CAAAA,CAAAhN,UAAAgN,CAAApS,IAAAoS,CAAAoG,CAAAA,CAAAzC,KAAAyC,EAAApG,CAFAA;AAGA;;AACA,mBAAA,CAAA;AAGA,oBAFAA,CAAAA,CAAA7L,SAAA6L,IAAAA,CAAAA,CAAA7L,SAAA6L,CAAA9c,MAAA8c,KACAA,CAAAA,CAAA7L,SAAA6L,GAAA,EADAA,GAEA,MAAA,IAAAsG,CAAA,CAAA,EAEA,KADAC,CAAAA,GAAAH,CAAAA,CAAAT,MAAAS,KAAAA,CAAAA,CAAArW,GACA,EAAAqW,CAAAA,CAAArW,GAAAqW,GAAAG,CAAA,GACAvG,CAAAA,CAAA7L,SAAA6L,CAAApS,IAAAoS,CAAAoG,CAAAA,CAAAP,KAAAO,EAAApG,EAHA,KAKAA,CAAAA,CAAA7L,SAAA6L,CAAApS,IAAAoS,CAAAoG,CAAAA,CAAAP,KAAAO,EAAApG;AACA;;AACA,mBAAA,CAAA;AACAA,gBAAAA,CAAAA,CAAAhf,IAAAgf,GAAAoG,CAAAA,CAAAR,MAAAQ,EAAApG;AACA;;AACA,mBAAA,EAAA;AACAA,gBAAAA,CAAAA,CAAAuF,SAAAvF,GAAAoG,CAAAA,CAAAR,MAAAQ,EAAApG;AACA;;AACA,mBAAA,CAAA;AACAA,gBAAAA,CAAAA,CAAAxM,OAAAwM,GAAAoG,CAAAA,CAAAzC,KAAAyC,EAAApG;AACA;;AACA,mBAAA,EAAA;AACAA,gBAAAA,CAAAA,CAAA4I,YAAA5I,IAAAA,CAAAA,CAAA4I,YAAA5I,CAAA9c,MAAA8c,KACAA,CAAAA,CAAA4I,YAAA5I,GAAA,EADAA,GAEAA,CAAAA,CAAA4I,YAAA5I,CAAApS,IAAAoS,CAAA2E,CAAAA,CAAApc,IAAAoc,CAAA0D,sBAAA1D,CAAAwB,MAAAxB,CAAAyB,CAAAzB,EAAAyB,CAAAA,CAAAT,MAAAS,EAAAzB,CAAA3E,CAFAA;AAGA;;AACA,mBAAA,EAAA;AACAA,gBAAAA,CAAAA,CAAA8I,YAAA9I,GAAAoG,CAAAA,CAAAH,KAAAG,EAAApG;AACA;;AACA,mBAAA,EAAA;AAGA,oBAFAA,CAAAA,CAAA5L,UAAA4L,IAAAA,CAAAA,CAAA5L,UAAA4L,CAAA9c,MAAA8c,KACAA,CAAAA,CAAA5L,UAAA4L,GAAA,EADAA,GAEA,MAAA,IAAAsG,CAAA,CAAA,EAEA,KADAC,CAAAA,GAAAH,CAAAA,CAAAT,MAAAS,KAAAA,CAAAA,CAAArW,GACA,EAAAqW,CAAAA,CAAArW,GAAAqW,GAAAG,CAAA,GACAvG,CAAAA,CAAA5L,UAAA4L,CAAApS,IAAAoS,CAAAoG,CAAAA,CAAA4C,MAAA5C,EAAApG,EAHA,KAKAA,CAAAA,CAAA5L,UAAA4L,CAAApS,IAAAoS,CAAAoG,CAAAA,CAAA4C,MAAA5C,EAAApG;AACA;;AACA,mBAAA,EAAA;AAGA,oBAFAA,CAAAA,CAAA3L,UAAA2L,IAAAA,CAAAA,CAAA3L,UAAA2L,CAAA9c,MAAA8c,KACAA,CAAAA,CAAA3L,UAAA2L,GAAA,EADAA,GAEA,MAAA,IAAAsG,CAAA,CAAA,EAEA,KADAC,CAAAA,GAAAH,CAAAA,CAAAT,MAAAS,KAAAA,CAAAA,CAAArW,GACA,EAAAqW,CAAAA,CAAArW,GAAAqW,GAAAG,CAAA,GACAvG,CAAAA,CAAA3L,UAAA2L,CAAApS,IAAAoS,CAAAoG,CAAAA,CAAA6C,MAAA7C,EAAApG,EAHA,KAKAA,CAAAA,CAAA3L,UAAA2L,CAAApS,IAAAoS,CAAAoG,CAAAA,CAAA6C,MAAA7C,EAAApG;AACA;;AACA;AACAoG,gBAAAA,CAAAA,CAAAI,QAAAJ,CAAA,IAAAE,CAAAF;AA1FA;AA8FA;;AAAA,iBAAApG,CAAA;AAAAA,SAvTAxX,EAoUAA,CAAAA,CAAAie,eAAAje,GAAA,UAAA4d,CAAA,EAAAA;AAGA,iBAFAA,CAAAA,YAAA9B,CAAA8B,KACAA,CAAAA,GAAA,IAAA9B,CAAA,CAAA8B,CAAA,CADAA,GAEAtU,KAAAqU,MAAArU,CAAAsU,CAAAtU,EAAAsU,CAAAA,CAAAT,MAAAS,EAAAtU,CAAA;AAAA6T,SAvUAnd,EAkVAA,CAAAA,CAAAke,MAAAle,GAAA,UAAAwX,CAAA,EAAAA;AACA,cAAA,YAAA,OAAAA,CAAA,IAAA,SAAAA,CAAA,EACA,OAAA,iBAAA;;AACA,cAAA,QAAAA,CAAAA,CAAA7c,IAAA,IAAA6c,CAAAA,CAAA1d,cAAA0d,CAAA,MAAAA,CAAA,EAAA;AACA,gBAAA,CAAApb,KAAAA,CAAAqN,OAAArN,CAAAob,CAAAA,CAAA7c,IAAAyB,CAAA,EACA,OAAA,sBAAA;;AACA,iBAAA,IAAAvE,CAAAA,GAAA,CAAA,EAA+BA,CAAAA,GAAA2f,CAAAA,CAAA7c,IAAA6c,CAAA9c,MAA/B,EAA+BA,EAAyB7C,CAAxD,EACA,IAAA,EAAAqkB,CAAAA,CAAA3X,SAAA2X,CAAA1E,CAAAA,CAAA7c,IAAA6c,CAAA3f,CAAA2f,CAAA0E,KAAA1E,CAAAA,CAAA7c,IAAA6c,CAAA3f,CAAA2f,KAAA0E,CAAAA,CAAA3X,SAAA2X,CAAA1E,CAAAA,CAAA7c,IAAA6c,CAAA3f,CAAA2f,EAAA2G,GAAAjC,CAAA1E,IAAA0E,CAAAA,CAAA3X,SAAA2X,CAAA1E,CAAAA,CAAA7c,IAAA6c,CAAA3f,CAAA2f,EAAA4G,IAAAlC,CAAA,CAAA,EACA,OAAA,+BAAA;AAEA;;AAAA,cAAA,QAAA1E,CAAAA,CAAAjN,QAAA,IAAAiN,CAAAA,CAAA1d,cAAA0d,CAAA,UAAAA,CAAA,IAAA,CACA0E,CAAAA,CAAA3X,SAAA2X,CAAA1E,CAAAA,CAAAjN,QAAA2R,CADA,EAEA,OAAA,4BAAA;AACA,cAAA,QAAA1E,CAAAA,CAAA6I,OAAA,IAAA7I,CAAAA,CAAA1d,cAAA0d,CAAA,SAAAA,CAAA,KACAzI,CAAAA,GAAAoN,CAAAA,CAAApc,IAAAoc,CAAAnc,WAAAmc,CAAAoE,OAAApE,CAAA+B,MAAA/B,CAAA3E,CAAAA,CAAA6I,OAAAlE,CADA,CAAA,EAGA,OAAA,aAAApN,CAAA;;AAEA,cAAA,QAAAyI,CAAAA,CAAA/L,SAAA,IAAA+L,CAAAA,CAAA1d,cAAA0d,CAAA,WAAAA,CAAA,EAAA;AACA,gBAAA,CAAApb,KAAAA,CAAAqN,OAAArN,CAAAob,CAAAA,CAAA/L,SAAArP,CAAA,EACA,OAAA,2BAAA;;AACA,iBAAAvE,CAAAA,GAAA,CAAA,EAA+BA,CAAAA,GAAA2f,CAAAA,CAAA/L,SAAA+L,CAAA9c,MAA/B,EAA+BA,EAA8B7C,CAA7D,EACA,IAAA,YAAA,OAAA2f,CAAAA,CAAA/L,SAAA+L,CAAA3f,CAAA2f,CAAA,EACA,OAAA,8BAAA;AAEA;;AAAA,cAAA,QAAAA,CAAAA,CAAA9L,SAAA,IAAA8L,CAAAA,CAAA1d,cAAA0d,CAAA,WAAAA,CAAA,EAAA;AACA,gBAAA,CAAApb,KAAAA,CAAAqN,OAAArN,CAAAob,CAAAA,CAAA9L,SAAAtP,CAAA,EACA,OAAA,2BAAA;;AACA,iBAAAvE,CAAAA,GAAA,CAAA,EAA+BA,CAAAA,GAAA2f,CAAAA,CAAA9L,SAAA8L,CAAA9c,MAA/B,EAA+BA,EAA8B7C,CAA7D,EACA,IAAA,CAAAqkB,CAAAA,CAAA3X,SAAA2X,CAAA1E,CAAAA,CAAA9L,SAAA8L,CAAA3f,CAAA2f,CAAA0E,CAAA,EACA,OAAA,+BAAA;AAEA;;AAAA,cAAA,QAAA1E,CAAAA,CAAAhN,UAAA,IAAAgN,CAAAA,CAAA1d,cAAA0d,CAAA,YAAAA,CAAA,EAAA;AACA,gBAAA,CAAApb,KAAAA,CAAAqN,OAAArN,CAAAob,CAAAA,CAAAhN,UAAApO,CAAA,EACA,OAAA,4BAAA;;AACA,iBAAAvE,CAAAA,GAAA,CAAA,EAA+BA,CAAAA,GAAA2f,CAAAA,CAAAhN,UAAAgN,CAAA9c,MAA/B,EAA+BA,EAA+B7C,CAA9D,EACA,IAAA,EAAA2f,CAAAA,CAAAhN,UAAAgN,CAAA3f,CAAA2f,KAAA,YAAA,OAAAA,CAAAA,CAAAhN,UAAAgN,CAAA3f,CAAA2f,EAAA9c,MAAA8c,IAAA0E,CAAAA,CAAAtD,QAAAsD,CAAA1E,CAAAA,CAAAhN,UAAAgN,CAAA3f,CAAA2f,CAAA0E,CAAA,CAAA,EACA,OAAA,+BAAA;AAEA;;AAAA,cAAA,QAAA1E,CAAAA,CAAA7L,SAAA,IAAA6L,CAAAA,CAAA1d,cAAA0d,CAAA,WAAAA,CAAA,EAAA;AACA,gBAAA,CAAApb,KAAAA,CAAAqN,OAAArN,CAAAob,CAAAA,CAAA7L,SAAAvP,CAAA,EACA,OAAA,2BAAA;;AACA,iBAAAvE,CAAAA,GAAA,CAAA,EAA+BA,CAAAA,GAAA2f,CAAAA,CAAA7L,SAAA6L,CAAA9c,MAA/B,EAA+BA,EAA8B7C,CAA7D,EACA,IAAA,EAAAqkB,CAAAA,CAAA3X,SAAA2X,CAAA1E,CAAAA,CAAA7L,SAAA6L,CAAA3f,CAAA2f,CAAA0E,KAAA1E,CAAAA,CAAA7L,SAAA6L,CAAA3f,CAAA2f,KAAA0E,CAAAA,CAAA3X,SAAA2X,CAAA1E,CAAAA,CAAA7L,SAAA6L,CAAA3f,CAAA2f,EAAA2G,GAAAjC,CAAA1E,IAAA0E,CAAAA,CAAA3X,SAAA2X,CAAA1E,CAAAA,CAAA7L,SAAA6L,CAAA3f,CAAA2f,EAAA4G,IAAAlC,CAAA,CAAA,EACA,OAAA,oCAAA;AAEA;;AAAA,cAAA,QAAA1E,CAAAA,CAAAhf,IAAA,IAAAgf,CAAAA,CAAA1d,cAAA0d,CAAA,MAAAA,CAAA,IAAA,CACA0E,CAAAA,CAAAtD,QAAAsD,CAAA1E,CAAAA,CAAAhf,IAAA0jB,CADA,EAEA,OAAA,uBAAA;AACA,cAAA,QAAA1E,CAAAA,CAAAuF,SAAA,IAAAvF,CAAAA,CAAA1d,cAAA0d,CAAA,WAAAA,CAAA,IAAA,CACA0E,CAAAA,CAAAtD,QAAAsD,CAAA1E,CAAAA,CAAAuF,SAAAb,CADA,EAEA,OAAA,4BAAA;AACA,cAAA,QAAA1E,CAAAA,CAAAxM,OAAA,IAAAwM,CAAAA,CAAA1d,cAAA0d,CAAA,SAAAA,CAAA,IAAA,EACAA,CAAAA,CAAAxM,OAAAwM,IAAA,YAAA,OAAAA,CAAAA,CAAAxM,OAAAwM,CAAA9c,MAAA8c,IAAA0E,CAAAA,CAAAtD,QAAAsD,CAAA1E,CAAAA,CAAAxM,OAAAkR,CADA,CAAA,EAEA,OAAA,0BAAA;;AACA,cAAA,QAAA1E,CAAAA,CAAA4I,YAAA,IAAA5I,CAAAA,CAAA1d,cAAA0d,CAAA,cAAAA,CAAA,EAAA;AACA,gBAAA,CAAApb,KAAAA,CAAAqN,OAAArN,CAAAob,CAAAA,CAAA4I,YAAAhkB,CAAA,EACA,OAAA,8BAAA;;AACA,iBAAAvE,CAAAA,GAAA,CAAA,EAA+BA,CAAAA,GAAA2f,CAAAA,CAAA4I,YAAA5I,CAAA9c,MAA/B,EAA+BA,EAAiC7C,CAAhE,EAAgE;AAChE,kBAAAkX,CAAA;AACA,kBADAA,CAAAA,GAAAoN,CAAAA,CAAApc,IAAAoc,CAAA0D,sBAAA1D,CAAA+B,MAAA/B,CAAA3E,CAAAA,CAAA4I,YAAA5I,CAAA3f,CAAA2f,CAAA2E,CACA,EACA,OAAA,kBAAApN,CAAA;AAAAA;AAGA;;AAAA,cAAA,QAAAyI,CAAAA,CAAA8I,YAAA,IAAA9I,CAAAA,CAAA1d,cAAA0d,CAAA,cAAAA,CAAA,EACA,QAAAA,CAAAA,CAAA8I,YAAA;AACA;AACA,qBAAA,mCAAA;;AACA,iBAAA,CAAA;AACA,iBAAA,CAAA;AAJA;;AAOA,cAAA,QAAA9I,CAAAA,CAAA5L,UAAA,IAAA4L,CAAAA,CAAA1d,cAAA0d,CAAA,YAAAA,CAAA,EAAA;AACA,gBAAA,CAAApb,KAAAA,CAAAqN,OAAArN,CAAAob,CAAAA,CAAA5L,UAAAxP,CAAA,EACA,OAAA,4BAAA;;AACA,iBAAAvE,CAAAA,GAAA,CAAA,EAA+BA,CAAAA,GAAA2f,CAAAA,CAAA5L,UAAA4L,CAAA9c,MAA/B,EAA+BA,EAA+B7C,CAA9D,EACA,IAAA,YAAA,OAAA2f,CAAAA,CAAA5L,UAAA4L,CAAA3f,CAAA2f,CAAA,EACA,OAAA,+BAAA;AAEA;;AAAA,cAAA,QAAAA,CAAAA,CAAA3L,UAAA,IAAA2L,CAAAA,CAAA1d,cAAA0d,CAAA,YAAAA,CAAA,EAAA;AACA,gBAAA,CAAApb,KAAAA,CAAAqN,OAAArN,CAAAob,CAAAA,CAAA3L,UAAAzP,CAAA,EACA,OAAA,4BAAA;;AACA,iBAAAvE,CAAAA,GAAA,CAAA,EAA+BA,CAAAA,GAAA2f,CAAAA,CAAA3L,UAAA2L,CAAA9c,MAA/B,EAA+BA,EAA+B7C,CAA9D,EACA,IAAA,EAAAqkB,CAAAA,CAAA3X,SAAA2X,CAAA1E,CAAAA,CAAA3L,UAAA2L,CAAA3f,CAAA2f,CAAA0E,KAAA1E,CAAAA,CAAA3L,UAAA2L,CAAA3f,CAAA2f,KAAA0E,CAAAA,CAAA3X,SAAA2X,CAAA1E,CAAAA,CAAA3L,UAAA2L,CAAA3f,CAAA2f,EAAA2G,GAAAjC,CAAA1E,IAAA0E,CAAAA,CAAA3X,SAAA2X,CAAA1E,CAAAA,CAAA3L,UAAA2L,CAAA3f,CAAA2f,EAAA4G,IAAAlC,CAAA,CAAA,EACA,OAAA,qCAAA;AAEA;;AAAA,iBAAA,IAAA;AAAA,SAxaAlc,EAmbAA,CAAAA,CAAAqe,UAAAre,GAAA,UAAArG,CAAA,EAAAA;AACA,cAAAA,CAAAA,YAAAwiB,CAAAA,CAAApc,IAAAoc,CAAAnc,WAAA,EACA,OAAArG,CAAA;AACA,cAAA6d,CAAAA,GAAA,IAAA2E,CAAAA,CAAApc,IAAAoc,CAAAnc,WAAA,EAAA;;AACA,cAAArG,CAAAA,CAAAgB,IAAA,EAAA;AACA,gBAAA,CAAAyB,KAAAA,CAAAqN,OAAArN,CAAAzC,CAAAA,CAAAgB,IAAAyB,CAAA,EACA,MAAA4H,SAAAA,CAAA,wCAAAA,CAAA;AACAwT,YAAAA,CAAAA,CAAA7c,IAAA6c,GAAA,EAAAA;;AACA,iBAAA,IAAA3f,CAAAA,GAAA,CAAA,EAA+BA,CAAAA,GAAA8B,CAAAA,CAAAgB,IAAAhB,CAAAe,MAA/B,EAA+BA,EAAwB7C,CAAvD,EACAqkB,CAAAA,CAAA1C,IAAA0C,GAAA1C,CACAhC,CAAAA,CAAA7c,IAAA6c,CAAA3f,CAAA2f,IAAA0E,CAAAA,CAAA1C,IAAA0C,CAAAoC,SAAApC,CAAAviB,CAAAA,CAAAgB,IAAAhB,CAAA9B,CAAA8B,CAAAuiB,CADA1C,EACAU,QADAV,GACAU,CAAA,CADAgC,GAEA,YAAA,OAAAviB,CAAAA,CAAAgB,IAAAhB,CAAA9B,CAAA8B,CAAA,GACA6d,CAAAA,CAAA7c,IAAA6c,CAAA3f,CAAA2f,IAAA+G,QAAAA,CAAA5kB,CAAAA,CAAAgB,IAAAhB,CAAA9B,CAAA8B,CAAA4kB,EAAA,EAAAA,CADA,GAEA,YAAA,OAAA5kB,CAAAA,CAAAgB,IAAAhB,CAAA9B,CAAA8B,CAAA,GACA6d,CAAAA,CAAA7c,IAAA6c,CAAA3f,CAAA2f,IAAA7d,CAAAA,CAAAgB,IAAAhB,CAAA9B,CAAA8B,CADA,GAEA,YAAA,OAAAA,CAAAA,CAAAgB,IAAAhB,CAAA9B,CAAA8B,CAAA,KACA6d,CAAAA,CAAA7c,IAAA6c,CAAA3f,CAAA2f,IAAA,IAAA0E,CAAAA,CAAAhE,QAAA,CAAAve,CAAAA,CAAAgB,IAAAhB,CAAA9B,CAAA8B,EAAAwkB,GAAAxkB,KAAA,CAAA,EAAAA,CAAAA,CAAAgB,IAAAhB,CAAA9B,CAAA8B,EAAAykB,IAAAzkB,KAAA,CAAA,EAAAuH,QAAA,EADA,CANAgb;AAWA;;AAAA,cAFA,QAAAviB,CAAAA,CAAA4Q,QAAA,KACAiN,CAAAA,CAAAjN,QAAAiN,GAAA,IAAA7d,CAAAA,CAAA4Q,QADA,GAEA,QAAA5Q,CAAAA,CAAA0mB,OAAA,EAAA;AACA,gBAAA,YAAA,OAAA1mB,CAAAA,CAAA0mB,OAAA,EACA,MAAArc,SAAAA,CAAA,4CAAAA,CAAA;AACAwT,YAAAA,CAAAA,CAAA6I,OAAA7I,GAAA2E,CAAAA,CAAApc,IAAAoc,CAAAnc,WAAAmc,CAAAoE,OAAApE,CAAAkC,UAAAlC,CAAAxiB,CAAAA,CAAA0mB,OAAAlE,CAAA3E;AAEA;;AAAA,cAAA7d,CAAAA,CAAA8R,SAAA,EAAA;AACA,gBAAA,CAAArP,KAAAA,CAAAqN,OAAArN,CAAAzC,CAAAA,CAAA8R,SAAArP,CAAA,EACA,MAAA4H,SAAAA,CAAA,6CAAAA,CAAA;AACAwT,YAAAA,CAAAA,CAAA/L,SAAA+L,GAAA,EAAAA;;AACA,iBAAA3f,CAAAA,GAAA,CAAA,EAA+BA,CAAAA,GAAA8B,CAAAA,CAAA8R,SAAA9R,CAAAe,MAA/B,EAA+BA,EAA6B7C,CAA5D,EACA2f,CAAAA,CAAA/L,SAAA+L,CAAA3f,CAAA2f,IAAAlT,MAAAA,CAAA3K,CAAAA,CAAA8R,SAAA9R,CAAA9B,CAAA8B,CAAA2K,CAAAkT;AAEA;;AAAA,cAAA7d,CAAAA,CAAA+R,SAAA,EAAA;AACA,gBAAA,CAAAtP,KAAAA,CAAAqN,OAAArN,CAAAzC,CAAAA,CAAA+R,SAAAtP,CAAA,EACA,MAAA4H,SAAAA,CAAA,6CAAAA,CAAA;AACAwT,YAAAA,CAAAA,CAAA9L,SAAA8L,GAAA,EAAAA;;AACA,iBAAA3f,CAAAA,GAAA,CAAA,EAA+BA,CAAAA,GAAA8B,CAAAA,CAAA+R,SAAA/R,CAAAe,MAA/B,EAA+BA,EAA6B7C,CAA5D,EACA2f,CAAAA,CAAA9L,SAAA8L,CAAA3f,CAAA2f,IAAA,IAAA7d,CAAAA,CAAA+R,SAAA/R,CAAA9B,CAAA8B,CAAA6d;AAEA;;AAAA,cAAA7d,CAAAA,CAAA6Q,UAAA,EAAA;AACA,gBAAA,CAAApO,KAAAA,CAAAqN,OAAArN,CAAAzC,CAAAA,CAAA6Q,UAAApO,CAAA,EACA,MAAA4H,SAAAA,CAAA,8CAAAA,CAAA;AACAwT,YAAAA,CAAAA,CAAAhN,UAAAgN,GAAA,EAAAA;;AACA,iBAAA3f,CAAAA,GAAA,CAAA,EAA+BA,CAAAA,GAAA8B,CAAAA,CAAA6Q,UAAA7Q,CAAAe,MAA/B,EAA+BA,EAA8B7C,CAA7D,EACA,YAAA,OAAA8B,CAAAA,CAAA6Q,UAAA7Q,CAAA9B,CAAA8B,CAAA,GACAuiB,CAAAA,CAAAtE,MAAAsE,CAAAyB,MAAAzB,CAAAviB,CAAAA,CAAA6Q,UAAA7Q,CAAA9B,CAAA8B,CAAAuiB,EAAA1E,CAAAA,CAAAhN,UAAAgN,CAAA3f,CAAA2f,IAAA0E,CAAAA,CAAA5C,SAAA4C,CAAAA,CAAAA,CAAAtE,MAAAsE,CAAAxhB,MAAAwhB,CAAAviB,CAAAA,CAAA6Q,UAAA7Q,CAAA9B,CAAA8B,CAAAuiB,CAAAA,CAAAA,EAAA,CAAAA,CADA,GAEAviB,CAAAA,CAAA6Q,UAAA7Q,CAAA9B,CAAA8B,EAAAe,MAAAf,KACA6d,CAAAA,CAAAhN,UAAAgN,CAAA3f,CAAA2f,IAAA7d,CAAAA,CAAA6Q,UAAA7Q,CAAA9B,CAAA8B,CADAA,CAFA;AAKA;;AAAA,cAAAA,CAAAA,CAAAgS,SAAA,EAAA;AACA,gBAAA,CAAAvP,KAAAA,CAAAqN,OAAArN,CAAAzC,CAAAA,CAAAgS,SAAAvP,CAAA,EACA,MAAA4H,SAAAA,CAAA,6CAAAA,CAAA;AACAwT,YAAAA,CAAAA,CAAA7L,SAAA6L,GAAA,EAAAA;;AACA,iBAAA3f,CAAAA,GAAA,CAAA,EAA+BA,CAAAA,GAAA8B,CAAAA,CAAAgS,SAAAhS,CAAAe,MAA/B,EAA+BA,EAA6B7C,CAA5D,EACAqkB,CAAAA,CAAA1C,IAAA0C,GAAA1C,CACAhC,CAAAA,CAAA7L,SAAA6L,CAAA3f,CAAA2f,IAAA0E,CAAAA,CAAA1C,IAAA0C,CAAAoC,SAAApC,CAAAviB,CAAAA,CAAAgS,SAAAhS,CAAA9B,CAAA8B,CAAAuiB,CADA1C,EACAU,QADAV,GACAU,CAAA,CADAgC,GAEA,YAAA,OAAAviB,CAAAA,CAAAgS,SAAAhS,CAAA9B,CAAA8B,CAAA,GACA6d,CAAAA,CAAA7L,SAAA6L,CAAA3f,CAAA2f,IAAA+G,QAAAA,CAAA5kB,CAAAA,CAAAgS,SAAAhS,CAAA9B,CAAA8B,CAAA4kB,EAAA,EAAAA,CADA,GAEA,YAAA,OAAA5kB,CAAAA,CAAAgS,SAAAhS,CAAA9B,CAAA8B,CAAA,GACA6d,CAAAA,CAAA7L,SAAA6L,CAAA3f,CAAA2f,IAAA7d,CAAAA,CAAAgS,SAAAhS,CAAA9B,CAAA8B,CADA,GAEA,YAAA,OAAAA,CAAAA,CAAAgS,SAAAhS,CAAA9B,CAAA8B,CAAA,KACA6d,CAAAA,CAAA7L,SAAA6L,CAAA3f,CAAA2f,IAAA,IAAA0E,CAAAA,CAAAhE,QAAA,CAAAve,CAAAA,CAAAgS,SAAAhS,CAAA9B,CAAA8B,EAAAwkB,GAAAxkB,KAAA,CAAA,EAAAA,CAAAA,CAAAgS,SAAAhS,CAAA9B,CAAA8B,EAAAykB,IAAAzkB,KAAA,CAAA,EAAAuH,QAAA,EADA,CANAgb;AAkBA;;AAAA,cATA,QAAAviB,CAAAA,CAAAnB,IAAA,KACAgf,CAAAA,CAAAhf,IAAAgf,GAAAqB,MAAAA,CAAAlf,CAAAA,CAAAnB,IAAAqgB,CADA,GAEA,QAAAlf,CAAAA,CAAAojB,SAAA,KACAvF,CAAAA,CAAAuF,SAAAvF,GAAAqB,MAAAA,CAAAlf,CAAAA,CAAAojB,SAAAlE,CADA,CAFA,EAIA,QAAAlf,CAAAA,CAAAqR,OAAA,KACA,YAAA,OAAArR,CAAAA,CAAAqR,OAAA,GACAkR,CAAAA,CAAAtE,MAAAsE,CAAAyB,MAAAzB,CAAAviB,CAAAA,CAAAqR,OAAAkR,EAAA1E,CAAAA,CAAAxM,OAAAwM,GAAA0E,CAAAA,CAAA5C,SAAA4C,CAAAA,CAAAA,CAAAtE,MAAAsE,CAAAxhB,MAAAwhB,CAAAviB,CAAAA,CAAAqR,OAAAkR,CAAAA,CAAAA,EAAA,CAAAA,CADA,GAEAviB,CAAAA,CAAAqR,OAAArR,CAAAe,MAAAf,KACA6d,CAAAA,CAAAxM,OAAAwM,GAAA7d,CAAAA,CAAAqR,OADArR,CAHA,CAJA,EASAA,CAAAA,CAAAymB,YAAA,EAAA;AACA,gBAAA,CAAAhkB,KAAAA,CAAAqN,OAAArN,CAAAzC,CAAAA,CAAAymB,YAAAhkB,CAAA,EACA,MAAA4H,SAAAA,CAAA,gDAAAA,CAAA;AACAwT,YAAAA,CAAAA,CAAA4I,YAAA5I,GAAA,EAAAA;;AACA,iBAAA3f,CAAAA,GAAA,CAAA,EAA+BA,CAAAA,GAAA8B,CAAAA,CAAAymB,YAAAzmB,CAAAe,MAA/B,EAA+BA,EAAgC7C,CAA/D,EAA+D;AAC/D,kBAAA,YAAA,OAAA8B,CAAAA,CAAAymB,YAAAzmB,CAAA9B,CAAA8B,CAAA,EACA,MAAAqK,SAAAA,CAAA,iDAAAA,CAAA;AACAwT,cAAAA,CAAAA,CAAA4I,YAAA5I,CAAA3f,CAAA2f,IAAA2E,CAAAA,CAAApc,IAAAoc,CAAA0D,sBAAA1D,CAAAkC,UAAAlC,CAAAxiB,CAAAA,CAAAymB,YAAAzmB,CAAA9B,CAAA8B,CAAAwiB,CAAA3E;AAAA3f;AAGA;;AAAA,kBAAA8B,CAAAA,CAAA2mB,YAAA;AACA,iBAAA,SAAA;AACA,iBAAA,CAAA;AACA9I,cAAAA,CAAAA,CAAA8I,YAAA9I,GAAA,CAAAA;AACA;;AACA,iBAAA,UAAA;AACA,iBAAA,CAAA;AACAA,cAAAA,CAAAA,CAAA8I,YAAA9I,GAAA,CAAAA;AAPA;;AAUA,cAAA7d,CAAAA,CAAAiS,UAAA,EAAA;AACA,gBAAA,CAAAxP,KAAAA,CAAAqN,OAAArN,CAAAzC,CAAAA,CAAAiS,UAAAxP,CAAA,EACA,MAAA4H,SAAAA,CAAA,8CAAAA,CAAA;AACAwT,YAAAA,CAAAA,CAAA5L,UAAA4L,GAAA,EAAAA;;AACA,iBAAA3f,CAAAA,GAAA,CAAA,EAA+BA,CAAAA,GAAA8B,CAAAA,CAAAiS,UAAAjS,CAAAe,MAA/B,EAA+BA,EAA8B7C,CAA7D,EACA2f,CAAAA,CAAA5L,UAAA4L,CAAA3f,CAAA2f,IAAAlT,MAAAA,CAAA3K,CAAAA,CAAAiS,UAAAjS,CAAA9B,CAAA8B,CAAA2K,CAAAkT;AAEA;;AAAA,cAAA7d,CAAAA,CAAAkS,UAAA,EAAA;AACA,gBAAA,CAAAzP,KAAAA,CAAAqN,OAAArN,CAAAzC,CAAAA,CAAAkS,UAAAzP,CAAA,EACA,MAAA4H,SAAAA,CAAA,8CAAAA,CAAA;AACAwT,YAAAA,CAAAA,CAAA3L,UAAA2L,GAAA,EAAAA;;AACA,iBAAA3f,CAAAA,GAAA,CAAA,EAA+BA,CAAAA,GAAA8B,CAAAA,CAAAkS,UAAAlS,CAAAe,MAA/B,EAA+BA,EAA8B7C,CAA7D,EACAqkB,CAAAA,CAAA1C,IAAA0C,GAAA1C,CACAhC,CAAAA,CAAA3L,UAAA2L,CAAA3f,CAAA2f,IAAA0E,CAAAA,CAAA1C,IAAA0C,CAAAoC,SAAApC,CAAAviB,CAAAA,CAAAkS,UAAAlS,CAAA9B,CAAA8B,CAAAuiB,CADA1C,EACAU,QADAV,GACAU,CAAA,CADAgC,GAEA,YAAA,OAAAviB,CAAAA,CAAAkS,UAAAlS,CAAA9B,CAAA8B,CAAA,GACA6d,CAAAA,CAAA3L,UAAA2L,CAAA3f,CAAA2f,IAAA+G,QAAAA,CAAA5kB,CAAAA,CAAAkS,UAAAlS,CAAA9B,CAAA8B,CAAA4kB,EAAA,EAAAA,CADA,GAEA,YAAA,OAAA5kB,CAAAA,CAAAkS,UAAAlS,CAAA9B,CAAA8B,CAAA,GACA6d,CAAAA,CAAA3L,UAAA2L,CAAA3f,CAAA2f,IAAA7d,CAAAA,CAAAkS,UAAAlS,CAAA9B,CAAA8B,CADA,GAEA,YAAA,OAAAA,CAAAA,CAAAkS,UAAAlS,CAAA9B,CAAA8B,CAAA,KACA6d,CAAAA,CAAA3L,UAAA2L,CAAA3f,CAAA2f,IAAA,IAAA0E,CAAAA,CAAAhE,QAAA,CAAAve,CAAAA,CAAAkS,UAAAlS,CAAA9B,CAAA8B,EAAAwkB,GAAAxkB,KAAA,CAAA,EAAAA,CAAAA,CAAAkS,UAAAlS,CAAA9B,CAAA8B,EAAAykB,IAAAzkB,KAAA,CAAA,EAAAuH,QAAA,CAAAA,CAAA,CAAA,CADA,CANAgb;AASA;;AAAA,iBAAA1E,CAAA;AAAAA,SApiBAxX,EAgjBAA,CAAAA,CAAAwe,QAAAxe,GAAA,UAAAwX,CAAA,EAAAiH,CAAA,EAAAA;AACAA,UAAAA,CAAAA,KACAA,CAAAA,GAAA,EADAA,CAAAA;AAEA,cAAA9kB,CAAAA,GAAA,EAAA;;AAyBA,cAAA,CAxBA8kB,CAAAA,CAAAC,MAAAD,IAAAA,CAAAA,CAAAE,QAwBA,MAvBAhlB,CAAAA,CAAAgB,IAAAhB,GAAA,EAAAA,EACAA,CAAAA,CAAA8R,SAAA9R,GAAA,EADAA,EAEAA,CAAAA,CAAA+R,SAAA/R,GAAA,EAFAA,EAGAA,CAAAA,CAAA6Q,UAAA7Q,GAAA,EAHAA,EAIAA,CAAAA,CAAAgS,SAAAhS,GAAA,EAJAA,EAKAA,CAAAA,CAAAiS,UAAAjS,GAAA,EALAA,EAMAA,CAAAA,CAAAkS,UAAAlS,GAAA,EANAA,EAOAA,CAAAA,CAAAymB,YAAAzmB,GAAA,EAgBA,GAdA8kB,CAAAA,CAAAE,QAAAF,KACA9kB,CAAAA,CAAA4Q,QAAA5Q,GAAA,CAAAA,EACAA,CAAAA,CAAA0mB,OAAA1mB,GAAA,IADAA,EAEAA,CAAAA,CAAAnB,IAAAmB,GAAA,EAFAA,EAGA8kB,CAAAA,CAAAtD,KAAAsD,KAAA5F,MAAA4F,GACA9kB,CAAAA,CAAAqR,OAAArR,GAAA,EADA8kB,IAGA9kB,CAAAA,CAAAqR,OAAArR,GAAA,EAAAA,EACA8kB,CAAAA,CAAAtD,KAAAsD,KAAAriB,KAAAqiB,KACA9kB,CAAAA,CAAAqR,OAAArR,GAAAuiB,CAAAA,CAAA5C,SAAA4C,CAAAviB,CAAAA,CAAAqR,OAAAkR,CADAuC,CAJAA,CAHA9kB,EAUAA,CAAAA,CAAAojB,SAAApjB,GAAA,EAVAA,EAWAA,CAAAA,CAAA2mB,YAAA3mB,GAAA8kB,CAAAA,CAAAvD,KAAAuD,KAAA5F,MAAA4F,GAAA,SAAAA,GAAA,CAZAA,CAcA,EAAAjH,CAAAA,CAAA7c,IAAA6c,IAAAA,CAAAA,CAAA7c,IAAA6c,CAAA9c,MAAA,EAAA;AACAf,YAAAA,CAAAA,CAAAgB,IAAAhB,GAAA,EAAAA;;AACA,iBAAA,IAAAuE,CAAAA,GAAA,CAAA,EAA+BA,CAAAA,GAAAsZ,CAAAA,CAAA7c,IAAA6c,CAAA9c,MAA/B,EAA+BA,EAAyBwD,CAAxD,EACA,YAAA,OAAAsZ,CAAAA,CAAA7c,IAAA6c,CAAAtZ,CAAAsZ,CAAA,GACA7d,CAAAA,CAAAgB,IAAAhB,CAAAuE,CAAAvE,IAAA8kB,CAAAA,CAAAxD,KAAAwD,KAAA5F,MAAA4F,GAAA5F,MAAAA,CAAArB,CAAAA,CAAA7c,IAAA6c,CAAAtZ,CAAAsZ,CAAAqB,CAAA4F,GAAAjH,CAAAA,CAAA7c,IAAA6c,CAAAtZ,CAAAsZ,CADA,GAGA7d,CAAAA,CAAAgB,IAAAhB,CAAAuE,CAAAvE,IAAA8kB,CAAAA,CAAAxD,KAAAwD,KAAA5F,MAAA4F,GAAAvC,CAAAA,CAAA1C,IAAA0C,CAAAriB,SAAAqiB,CAAAnR,QAAAmR,CAAA9jB,IAAA8jB,CAAA1E,CAAAA,CAAA7c,IAAA6c,CAAAtZ,CAAAsZ,CAAA0E,CAAAuC,GAAAA,CAAAA,CAAAxD,KAAAwD,KAAAna,MAAAma,GAAA,IAAAvC,CAAAA,CAAAhE,QAAA,CAAAV,CAAAA,CAAA7c,IAAA6c,CAAAtZ,CAAAsZ,EAAA2G,GAAA3G,KAAA,CAAA,EAAAA,CAAAA,CAAA7c,IAAA6c,CAAAtZ,CAAAsZ,EAAA4G,IAAA5G,KAAA,CAAA,EAAAtW,QAAA,EAAAud,GAAAjH,CAAAA,CAAA7c,IAAA6c,CAAAtZ,CAAAsZ,CAHA;AASA;;AAAA,cAJA,QAAAA,CAAAA,CAAAjN,QAAA,IAAAiN,CAAAA,CAAA1d,cAAA0d,CAAA,UAAAA,CAAA,KACA7d,CAAAA,CAAA4Q,QAAA5Q,GAAA6d,CAAAA,CAAAjN,QADA,GAEA,QAAAiN,CAAAA,CAAA6I,OAAA,IAAA7I,CAAAA,CAAA1d,cAAA0d,CAAA,SAAAA,CAAA,KACA7d,CAAAA,CAAA0mB,OAAA1mB,GAAAwiB,CAAAA,CAAApc,IAAAoc,CAAAnc,WAAAmc,CAAAoE,OAAApE,CAAAqC,QAAArC,CAAA3E,CAAAA,CAAA6I,OAAAlE,EAAAsC,CAAAtC,CADA,CAFA,EAIA3E,CAAAA,CAAA/L,SAAA+L,IAAAA,CAAAA,CAAA/L,SAAA+L,CAAA9c,MAAA,EAAA;AACAf,YAAAA,CAAAA,CAAA8R,SAAA9R,GAAA,EAAAA;;AACA,iBAAAuE,CAAAA,GAAA,CAAA,EAA+BA,CAAAA,GAAAsZ,CAAAA,CAAA/L,SAAA+L,CAAA9c,MAA/B,EAA+BA,EAA8BwD,CAA7D,EACAvE,CAAAA,CAAA8R,SAAA9R,CAAAuE,CAAAvE,IAAA8kB,CAAAA,CAAArD,IAAAqD,IAAArD,CAAAzC,QAAAA,CAAAnB,CAAAA,CAAA/L,SAAA+L,CAAAtZ,CAAAsZ,CAAAmB,CAAA8F,GAAA5F,MAAAA,CAAArB,CAAAA,CAAA/L,SAAA+L,CAAAtZ,CAAAsZ,CAAAqB,CAAA4F,GAAAjH,CAAAA,CAAA/L,SAAA+L,CAAAtZ,CAAAsZ,CAAA7d;AAEA;;AAAA,cAAA6d,CAAAA,CAAA9L,SAAA8L,IAAAA,CAAAA,CAAA9L,SAAA8L,CAAA9c,MAAA,EAAA;AACAf,YAAAA,CAAAA,CAAA+R,SAAA/R,GAAA,EAAAA;;AACA,iBAAAuE,CAAAA,GAAA,CAAA,EAA+BA,CAAAA,GAAAsZ,CAAAA,CAAA9L,SAAA8L,CAAA9c,MAA/B,EAA+BA,EAA8BwD,CAA7D,EACAvE,CAAAA,CAAA+R,SAAA/R,CAAAuE,CAAAvE,IAAA6d,CAAAA,CAAA9L,SAAA8L,CAAAtZ,CAAAsZ,CAAA7d;AAEA;;AAAA,cAAA6d,CAAAA,CAAAhN,UAAAgN,IAAAA,CAAAA,CAAAhN,UAAAgN,CAAA9c,MAAA,EAAA;AACAf,YAAAA,CAAAA,CAAA6Q,UAAA7Q,GAAA,EAAAA;;AACA,iBAAAuE,CAAAA,GAAA,CAAA,EAA+BA,CAAAA,GAAAsZ,CAAAA,CAAAhN,UAAAgN,CAAA9c,MAA/B,EAA+BA,EAA+BwD,CAA9D,EACAvE,CAAAA,CAAA6Q,UAAA7Q,CAAAuE,CAAAvE,IAAA8kB,CAAAA,CAAAtD,KAAAsD,KAAA5F,MAAA4F,GAAAvC,CAAAA,CAAAtE,MAAAsE,CAAAe,MAAAf,CAAA1E,CAAAA,CAAAhN,UAAAgN,CAAAtZ,CAAAsZ,CAAA0E,EAAA,CAAAA,EAAA1E,CAAAA,CAAAhN,UAAAgN,CAAAtZ,CAAAsZ,EAAA9c,MAAAwhB,CAAAuC,GAAAA,CAAAA,CAAAtD,KAAAsD,KAAAriB,KAAAqiB,GAAAriB,KAAAA,CAAAvC,SAAAuC,CAAAiG,KAAAjG,CAAAhE,IAAAgE,CAAAob,CAAAA,CAAAhN,UAAAgN,CAAAtZ,CAAAsZ,CAAApb,CAAAqiB,GAAAjH,CAAAA,CAAAhN,UAAAgN,CAAAtZ,CAAAsZ,CAAA7d;AAEA;;AAAA,cAAA6d,CAAAA,CAAA7L,SAAA6L,IAAAA,CAAAA,CAAA7L,SAAA6L,CAAA9c,MAAA,EAAA;AACAf,YAAAA,CAAAA,CAAAgS,SAAAhS,GAAA,EAAAA;;AACA,iBAAAuE,CAAAA,GAAA,CAAA,EAA+BA,CAAAA,GAAAsZ,CAAAA,CAAA7L,SAAA6L,CAAA9c,MAA/B,EAA+BA,EAA8BwD,CAA7D,EACA,YAAA,OAAAsZ,CAAAA,CAAA7L,SAAA6L,CAAAtZ,CAAAsZ,CAAA,GACA7d,CAAAA,CAAAgS,SAAAhS,CAAAuE,CAAAvE,IAAA8kB,CAAAA,CAAAxD,KAAAwD,KAAA5F,MAAA4F,GAAA5F,MAAAA,CAAArB,CAAAA,CAAA7L,SAAA6L,CAAAtZ,CAAAsZ,CAAAqB,CAAA4F,GAAAjH,CAAAA,CAAA7L,SAAA6L,CAAAtZ,CAAAsZ,CADA,GAGA7d,CAAAA,CAAAgS,SAAAhS,CAAAuE,CAAAvE,IAAA8kB,CAAAA,CAAAxD,KAAAwD,KAAA5F,MAAA4F,GAAAvC,CAAAA,CAAA1C,IAAA0C,CAAAriB,SAAAqiB,CAAAnR,QAAAmR,CAAA9jB,IAAA8jB,CAAA1E,CAAAA,CAAA7L,SAAA6L,CAAAtZ,CAAAsZ,CAAA0E,CAAAuC,GAAAA,CAAAA,CAAAxD,KAAAwD,KAAAna,MAAAma,GAAA,IAAAvC,CAAAA,CAAAhE,QAAA,CAAAV,CAAAA,CAAA7L,SAAA6L,CAAAtZ,CAAAsZ,EAAA2G,GAAA3G,KAAA,CAAA,EAAAA,CAAAA,CAAA7L,SAAA6L,CAAAtZ,CAAAsZ,EAAA4G,IAAA5G,KAAA,CAAA,EAAAtW,QAAA,EAAAud,GAAAjH,CAAAA,CAAA7L,SAAA6L,CAAAtZ,CAAAsZ,CAHA;AASA;;AAAA,cAJA,QAAAA,CAAAA,CAAAhf,IAAA,IAAAgf,CAAAA,CAAA1d,cAAA0d,CAAA,MAAAA,CAAA,KACA7d,CAAAA,CAAAnB,IAAAmB,GAAA6d,CAAAA,CAAAhf,IADA,GAEA,QAAAgf,CAAAA,CAAAxM,OAAA,IAAAwM,CAAAA,CAAA1d,cAAA0d,CAAA,SAAAA,CAAA,KACA7d,CAAAA,CAAAqR,OAAArR,GAAA8kB,CAAAA,CAAAtD,KAAAsD,KAAA5F,MAAA4F,GAAAvC,CAAAA,CAAAtE,MAAAsE,CAAAe,MAAAf,CAAA1E,CAAAA,CAAAxM,OAAAkR,EAAA,CAAAA,EAAA1E,CAAAA,CAAAxM,OAAAwM,CAAA9c,MAAAwhB,CAAAuC,GAAAA,CAAAA,CAAAtD,KAAAsD,KAAAriB,KAAAqiB,GAAAriB,KAAAA,CAAAvC,SAAAuC,CAAAiG,KAAAjG,CAAAhE,IAAAgE,CAAAob,CAAAA,CAAAxM,OAAA5O,CAAAqiB,GAAAjH,CAAAA,CAAAxM,OADA,CAFA,EAIAwM,CAAAA,CAAA5L,UAAA4L,IAAAA,CAAAA,CAAA5L,UAAA4L,CAAA9c,MAAA,EAAA;AACAf,YAAAA,CAAAA,CAAAiS,UAAAjS,GAAA,EAAAA;;AACA,iBAAAuE,CAAAA,GAAA,CAAA,EAA+BA,CAAAA,GAAAsZ,CAAAA,CAAA5L,UAAA4L,CAAA9c,MAA/B,EAA+BA,EAA+BwD,CAA9D,EACAvE,CAAAA,CAAAiS,UAAAjS,CAAAuE,CAAAvE,IAAA8kB,CAAAA,CAAArD,IAAAqD,IAAArD,CAAAzC,QAAAA,CAAAnB,CAAAA,CAAA5L,UAAA4L,CAAAtZ,CAAAsZ,CAAAmB,CAAA8F,GAAA5F,MAAAA,CAAArB,CAAAA,CAAA5L,UAAA4L,CAAAtZ,CAAAsZ,CAAAqB,CAAA4F,GAAAjH,CAAAA,CAAA5L,UAAA4L,CAAAtZ,CAAAsZ,CAAA7d;AAEA;;AAAA,cAAA6d,CAAAA,CAAA3L,UAAA2L,IAAAA,CAAAA,CAAA3L,UAAA2L,CAAA9c,MAAA,EAAA;AACAf,YAAAA,CAAAA,CAAAkS,UAAAlS,GAAA,EAAAA;;AACA,iBAAAuE,CAAAA,GAAA,CAAA,EAA+BA,CAAAA,GAAAsZ,CAAAA,CAAA3L,UAAA2L,CAAA9c,MAA/B,EAA+BA,EAA+BwD,CAA9D,EACA,YAAA,OAAAsZ,CAAAA,CAAA3L,UAAA2L,CAAAtZ,CAAAsZ,CAAA,GACA7d,CAAAA,CAAAkS,UAAAlS,CAAAuE,CAAAvE,IAAA8kB,CAAAA,CAAAxD,KAAAwD,KAAA5F,MAAA4F,GAAA5F,MAAAA,CAAArB,CAAAA,CAAA3L,UAAA2L,CAAAtZ,CAAAsZ,CAAAqB,CAAA4F,GAAAjH,CAAAA,CAAA3L,UAAA2L,CAAAtZ,CAAAsZ,CADA,GAGA7d,CAAAA,CAAAkS,UAAAlS,CAAAuE,CAAAvE,IAAA8kB,CAAAA,CAAAxD,KAAAwD,KAAA5F,MAAA4F,GAAAvC,CAAAA,CAAA1C,IAAA0C,CAAAriB,SAAAqiB,CAAAnR,QAAAmR,CAAA9jB,IAAA8jB,CAAA1E,CAAAA,CAAA3L,UAAA2L,CAAAtZ,CAAAsZ,CAAA0E,CAAAuC,GAAAA,CAAAA,CAAAxD,KAAAwD,KAAAna,MAAAma,GAAA,IAAAvC,CAAAA,CAAAhE,QAAA,CAAAV,CAAAA,CAAA3L,UAAA2L,CAAAtZ,CAAAsZ,EAAA2G,GAAA3G,KAAA,CAAA,EAAAA,CAAAA,CAAA3L,UAAA2L,CAAAtZ,CAAAsZ,EAAA4G,IAAA5G,KAAA,CAAA,EAAAtW,QAAA,CAAAA,CAAA,CAAA,CAAAud,GAAAjH,CAAAA,CAAA3L,UAAA2L,CAAAtZ,CAAAsZ,CAHA;AAOA;;AAAA,cAFA,QAAAA,CAAAA,CAAAuF,SAAA,IAAAvF,CAAAA,CAAA1d,cAAA0d,CAAA,WAAAA,CAAA,KACA7d,CAAAA,CAAAojB,SAAApjB,GAAA6d,CAAAA,CAAAuF,SADA,GAEAvF,CAAAA,CAAA4I,YAAA5I,IAAAA,CAAAA,CAAA4I,YAAA5I,CAAA9c,MAAA,EAAA;AACAf,YAAAA,CAAAA,CAAAymB,YAAAzmB,GAAA,EAAAA;;AACA,iBAAAuE,CAAAA,GAAA,CAAA,EAA+BA,CAAAA,GAAAsZ,CAAAA,CAAA4I,YAAA5I,CAAA9c,MAA/B,EAA+BA,EAAiCwD,CAAhE,EACAvE,CAAAA,CAAAymB,YAAAzmB,CAAAuE,CAAAvE,IAAAwiB,CAAAA,CAAApc,IAAAoc,CAAA0D,sBAAA1D,CAAAqC,QAAArC,CAAA3E,CAAAA,CAAA4I,YAAA5I,CAAAtZ,CAAAsZ,CAAA2E,EAAAsC,CAAAtC,CAAAxiB;AAIA;;AAAA,iBAFA,QAAA6d,CAAAA,CAAA8I,YAAA,IAAA9I,CAAAA,CAAA1d,cAAA0d,CAAA,cAAAA,CAAA,KACA7d,CAAAA,CAAA2mB,YAAA3mB,GAAA8kB,CAAAA,CAAAvD,KAAAuD,KAAA5F,MAAA4F,GAAAtC,CAAAA,CAAApc,IAAAoc,CAAAnc,WAAAmc,CAAAuE,YAAAvE,CAAA3E,CAAAA,CAAA8I,YAAAnE,CAAAsC,GAAAjH,CAAAA,CAAA8I,YADA,GAEA3mB,CAAA;AAAAA,SAzoBAqG,EAmpBAA,CAAAA,CAAAnG,SAAAmG,CAAA8e,MAAA9e,GAAA,YAAA;AACA,iBAAAsJ,KAAAI,WAAAJ,CAAAkV,QAAAlV,CAAAA,IAAAA,EAAAuS,CAAAA,CAAA7E,IAAA6E,CAAAb,aAAA1R,CAAA;AAAA0R,SAppBAhb,EA6qBAA,CAAAA,CAAAC,QAAAD,GAAA,YAAA;AACA,cAAAqc,CAAAA,GAAA,EAAA;AAAA,cAA+BC,CAAAA,GAAA3jB,MAAAA,CAAAY,MAAAZ,CAAA0jB,CAAA1jB,CAA/B;AAkBA,iBAjBA2jB,CAAAA,CAAAD,CAAAA,CAAA,CAAAA,CAAAA,GAAA,WAAAC,CAAAA,GAAA,CAAAA,EACAA,CAAAA,CAAAD,CAAAA,CAAA,CAAAA,CAAAA,GAAA,OAAAC,CAAAA,GAAA,CADAA,EAEAA,CAAAA,CAAAD,CAAAA,CAAA,CAAAA,CAAAA,GAAA,OAAAC,CAAAA,GAAA,CAFAA,EAGAA,CAAAA,CAAAD,CAAAA,CAAA,CAAAA,CAAAA,GAAA,MAAAC,CAAAA,GAAA,CAHAA,EAIAA,CAAAA,CAAAD,CAAAA,CAAA,CAAAA,CAAAA,GAAA,QAAAC,CAAAA,GAAA,CAJAA,EAKAA,CAAAA,CAAAD,CAAAA,CAAA,CAAAA,CAAAA,GAAA,OAAAC,CAAAA,GAAA,CALAA,EAMAA,CAAAA,CAAAD,CAAAA,CAAA,CAAAA,CAAAA,GAAA,OAAAC,CAAAA,GAAA,CANAA,EAOAA,CAAAA,CAAAD,CAAAA,CAAA,CAAAA,CAAAA,GAAA,OAAAC,CAAAA,GAAA,CAPAA,EAQAA,CAAAA,CAAAD,CAAAA,CAAA,CAAAA,CAAAA,GAAA,QAAAC,CAAAA,GAAA,CARAA,EASAA,CAAAA,CAAAD,CAAAA,CAAA,CAAAA,CAAAA,GAAA,MAAAC,CAAAA,GAAA,CATAA,EAUAA,CAAAA,CAAAD,CAAAA,CAAA,EAAAA,CAAAA,GAAA,SAAAC,CAAAA,GAAA,EAVAA,EAWAA,CAAAA,CAAAD,CAAAA,CAAA,EAAAA,CAAAA,GAAA,QAAAC,CAAAA,GAAA,EAXAA,EAYAA,CAAAA,CAAAD,CAAAA,CAAA,EAAAA,CAAAA,GAAA,QAAAC,CAAAA,GAAA,EAZAA,EAaAA,CAAAA,CAAAD,CAAAA,CAAA,EAAAA,CAAAA,GAAA,QAAAC,CAAAA,GAAA,EAbAA,EAcAA,CAAAA,CAAAD,CAAAA,CAAA,EAAAA,CAAAA,GAAA,WAAAC,CAAAA,GAAA,EAdAA,EAeAA,CAAAA,CAAAD,CAAAA,CAAA,EAAAA,CAAAA,GAAA,YAAAC,CAAAA,GAAA,EAfAA,EAgBAA,CAAAA,CAAAD,CAAAA,CAAA,EAAAA,CAAAA,GAAA,UAAAC,CAAAA,GAAA,EAhBAA,EAiBAA,CAAA;AAnBA,SAAA,EA7qBAtc,EAmsBAA,CAAAA,CAAAugB,OAAAvgB,GAAA,YAAA;AAkBA,mBAAAugB,CAAA,CAAA9I,CAAA,EAAAA;AACA,gBAAAA,CAAA,EACA,KAAA,IAAAJ,CAAAA,GAAA1e,MAAAA,CAAA0e,IAAA1e,CAAA8e,CAAA9e,CAAA,EAAAd,CAAAA,GAAA,CAAA,EAAmEA,CAAAA,GAAAwf,CAAAA,CAAA3c,MAAnE,EAAmEA,EAAiB7C,CAApF,EACA,QAAA4f,CAAAA,CAAAJ,CAAAA,CAAAxf,CAAAwf,CAAAI,CAAA,KACAnO,KAAA+N,CAAAA,CAAAxf,CAAAwf,CAAA/N,IAAAmO,CAAAA,CAAAJ,CAAAA,CAAAxf,CAAAwf,CAAAI,CADA;AAsNA;;AAAA,iBA5MA8I,CAAAA,CAAA1mB,SAAA0mB,CAAA/O,KAAA+O,GAAArE,CAAAA,CAAA1C,IAAA0C,GAAAA,CAAAA,CAAA1C,IAAA0C,CAAAhP,QAAAgP,CAAA,CAAAA,EAAA,CAAAA,EAAA,CAAA,CAAAA,CAAAA,GAAA,CAAAqE,EAQAA,CAAAA,CAAA1mB,SAAA0mB,CAAAve,GAAAue,GAAArE,CAAAA,CAAA1C,IAAA0C,GAAAA,CAAAA,CAAA1C,IAAA0C,CAAAhP,QAAAgP,CAAA,CAAAA,EAAA,CAAAA,EAAA,CAAA,CAAAA,CAAAA,GAAA,CARAqE,EAkBAA,CAAAA,CAAAhnB,MAAAgnB,GAAA,UAAA9I,CAAA,EAAAA;AACA,mBAAA,IAAA8I,CAAA,CAAA9I,CAAA,CAAA;AAAAA,WAnBA8I,EA+BAA,CAAAA,CAAAtD,MAAAsD,GAAA,UAAA/I,CAAA,EAAA0F,CAAA,EAAAA;AAOA,mBANAA,CAAAA,KACAA,CAAAA,GAAAlB,CAAAA,CAAAziB,MAAAyiB,EADAkB,CAAAA,EAEA,QAAA1F,CAAAA,CAAAhG,KAAA,IAAAgG,CAAAA,CAAA1d,cAAA0d,CAAA,OAAAA,CAAA,IACA0F,CAAAA,CAAAC,MAAAD,CAAA,CAAAA,EAAAG,KAAAH,CAAA1F,CAAAA,CAAAhG,KAAA0L,CAHAA,EAIA,QAAA1F,CAAAA,CAAAxV,GAAA,IAAAwV,CAAAA,CAAA1d,cAAA0d,CAAA,KAAAA,CAAA,IACA0F,CAAAA,CAAAC,MAAAD,CAAA,EAAAA,EAAAG,KAAAH,CAAA1F,CAAAA,CAAAxV,GAAAkb,CALAA,EAMAA,CAAA;AAAAA,WAtCAqD,EAkDAA,CAAAA,CAAA7C,eAAA6C,GAAA,UAAA/I,CAAA,EAAA0F,CAAA,EAAAA;AACA,mBAAA5T,KAAA2T,MAAA3T,CAAAkO,CAAAlO,EAAA4T,CAAA5T,EAAAiU,MAAAjU,EAAA;AAAAiU,WAnDAgD,EAiEAA,CAAAA,CAAA5C,MAAA4C,GAAA,UAAA3C,CAAA,EAAAljB,CAAA,EAAAA;AACAkjB,YAAAA,CAAAA,YAAA9B,CAAA8B,KACAA,CAAAA,GAAA9B,CAAAA,CAAAviB,MAAAuiB,CAAA8B,CAAA9B,CADA8B;;AAGA,iBADA,IAAA5b,CAAAA,GAAAA,KAAAxG,CAAAwG,KAAAtH,CAAAsH,GAAA4b,CAAAA,CAAAC,GAAA7b,GAAA4b,CAAAA,CAAArW,GAAAqW,GAAAljB,CAAA,EAAA8c,CAAAA,GAAA,IAAA2E,CAAAA,CAAApc,IAAAoc,CAAAnc,WAAAmc,CAAAoE,OAAA,EACA,EAAA3C,CAAAA,CAAArW,GAAAqW,GAAA5b,CAAA,GAAA;AACA,kBAAA8b,CAAAA,GAAAF,CAAAA,CAAAT,MAAAS,EAAA;;AACA,sBAAAE,CAAAA,KAAA,CAAA;AACA,qBAAA,CAAA;AACAtG,kBAAAA,CAAAA,CAAAhG,KAAAgG,GAAAoG,CAAAA,CAAAP,KAAAO,EAAApG;AACA;;AACA,qBAAA,CAAA;AACAA,kBAAAA,CAAAA,CAAAxV,GAAAwV,GAAAoG,CAAAA,CAAAP,KAAAO,EAAApG;AACA;;AACA;AACAoG,kBAAAA,CAAAA,CAAAI,QAAAJ,CAAA,IAAAE,CAAAF;AARA;AAYA;;AAAA,mBAAApG,CAAA;AAAAA,WAnFA+I,EAgGAA,CAAAA,CAAAtC,eAAAsC,GAAA,UAAA3C,CAAA,EAAAA;AAGA,mBAFAA,CAAAA,YAAA9B,CAAA8B,KACAA,CAAAA,GAAA,IAAA9B,CAAA,CAAA8B,CAAA,CADAA,GAEAtU,KAAAqU,MAAArU,CAAAsU,CAAAtU,EAAAsU,CAAAA,CAAAT,MAAAS,EAAAtU,CAAA;AAAA6T,WAnGAoD,EA8GAA,CAAAA,CAAArC,MAAAqC,GAAA,UAAA/I,CAAA,EAAAA;AACA,mBAAA,YAAA,OAAAA,CAAA,IAAA,SAAAA,CAAA,GACA,iBADA,GAEA,QAAAA,CAAAA,CAAAhG,KAAA,IAAAgG,CAAAA,CAAA1d,cAAA0d,CAAA,OAAAA,CAAA,IAAA,EACA0E,CAAAA,CAAA3X,SAAA2X,CAAA1E,CAAAA,CAAAhG,KAAA0K,KAAA1E,CAAAA,CAAAhG,KAAAgG,IAAA0E,CAAAA,CAAA3X,SAAA2X,CAAA1E,CAAAA,CAAAhG,KAAAgG,CAAA2G,GAAAjC,CAAA1E,IAAA0E,CAAAA,CAAA3X,SAAA2X,CAAA1E,CAAAA,CAAAhG,KAAAgG,CAAA4G,IAAAlC,CADA,CAAA,GAEA,8BAFA,GAGA,QAAA1E,CAAAA,CAAAxV,GAAA,IAAAwV,CAAAA,CAAA1d,cAAA0d,CAAA,KAAAA,CAAA,IAAA,EACA0E,CAAAA,CAAA3X,SAAA2X,CAAA1E,CAAAA,CAAAxV,GAAAka,KAAA1E,CAAAA,CAAAxV,GAAAwV,IAAA0E,CAAAA,CAAA3X,SAAA2X,CAAA1E,CAAAA,CAAAxV,GAAAwV,CAAA2G,GAAAjC,CAAA1E,IAAA0E,CAAAA,CAAA3X,SAAA2X,CAAA1E,CAAAA,CAAAxV,GAAAwV,CAAA4G,IAAAlC,CADA,CAAA,GAEA,4BAFA,GAGA,IARA;AAQA,WAvHAqE,EAkIAA,CAAAA,CAAAlC,UAAAkC,GAAA,UAAA5mB,CAAA,EAAAA;AACA,gBAAAA,CAAAA,YAAAwiB,CAAAA,CAAApc,IAAAoc,CAAAnc,WAAAmc,CAAAoE,OAAA,EACA,OAAA5mB,CAAA;AACA,gBAAA6d,CAAAA,GAAA,IAAA2E,CAAAA,CAAApc,IAAAoc,CAAAnc,WAAAmc,CAAAoE,OAAA,EAAA;AAmBA,mBAlBA,QAAA5mB,CAAAA,CAAA6X,KAAA,KACA0K,CAAAA,CAAA1C,IAAA0C,GAAA1C,CACAhC,CAAAA,CAAAhG,KAAAgG,GAAA0E,CAAAA,CAAA1C,IAAA0C,CAAAoC,SAAApC,CAAAviB,CAAAA,CAAA6X,KAAA0K,CADA1C,EACAU,QADAV,GACAU,CAAA,CADAgC,GAEA,YAAA,OAAAviB,CAAAA,CAAA6X,KAAA,GACAgG,CAAAA,CAAAhG,KAAAgG,GAAA+G,QAAAA,CAAA5kB,CAAAA,CAAA6X,KAAA+M,EAAA,EAAAA,CADA,GAEA,YAAA,OAAA5kB,CAAAA,CAAA6X,KAAA,GACAgG,CAAAA,CAAAhG,KAAAgG,GAAA7d,CAAAA,CAAA6X,KADA,GAEA,YAAA,OAAA7X,CAAAA,CAAA6X,KAAA,KACAgG,CAAAA,CAAAhG,KAAAgG,GAAA,IAAA0E,CAAAA,CAAAhE,QAAA,CAAAve,CAAAA,CAAA6X,KAAA7X,CAAAwkB,GAAAxkB,KAAA,CAAA,EAAAA,CAAAA,CAAA6X,KAAA7X,CAAAykB,IAAAzkB,KAAA,CAAA,EAAAuH,QAAA,EADA,CAPA,GASA,QAAAvH,CAAAA,CAAAqI,GAAA,KACAka,CAAAA,CAAA1C,IAAA0C,GAAA1C,CACAhC,CAAAA,CAAAxV,GAAAwV,GAAA0E,CAAAA,CAAA1C,IAAA0C,CAAAoC,SAAApC,CAAAviB,CAAAA,CAAAqI,GAAAka,CADA1C,EACAU,QADAV,GACAU,CAAA,CADAgC,GAEA,YAAA,OAAAviB,CAAAA,CAAAqI,GAAA,GACAwV,CAAAA,CAAAxV,GAAAwV,GAAA+G,QAAAA,CAAA5kB,CAAAA,CAAAqI,GAAAuc,EAAA,EAAAA,CADA,GAEA,YAAA,OAAA5kB,CAAAA,CAAAqI,GAAA,GACAwV,CAAAA,CAAAxV,GAAAwV,GAAA7d,CAAAA,CAAAqI,GADA,GAEA,YAAA,OAAArI,CAAAA,CAAAqI,GAAA,KACAwV,CAAAA,CAAAxV,GAAAwV,GAAA,IAAA0E,CAAAA,CAAAhE,QAAA,CAAAve,CAAAA,CAAAqI,GAAArI,CAAAwkB,GAAAxkB,KAAA,CAAA,EAAAA,CAAAA,CAAAqI,GAAArI,CAAAykB,IAAAzkB,KAAA,CAAA,EAAAuH,QAAA,EADA,CAPA,CATA,EAkBAsW,CAAA;AAAAA,WAxJA+I,EAoKAA,CAAAA,CAAA/B,QAAA+B,GAAA,UAAA/I,CAAA,EAAAiH,CAAA,EAAAA;AACAA,YAAAA,CAAAA,KACAA,CAAAA,GAAA,EADAA,CAAAA;AAEA,gBAAA9kB,CAAAA,GAAA,EAAA;;AACA,gBAAA8kB,CAAAA,CAAAE,QAAA,EAAA;AACA,kBAAAzC,CAAAA,CAAA1C,IAAA,EAAA;AACA,oBAAAoF,CAAAA,GAAA,IAAA1C,CAAAA,CAAA1C,IAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,CAAA,CAAA;AACA7f,gBAAAA,CAAAA,CAAA6X,KAAA7X,GAAA8kB,CAAAA,CAAAxD,KAAAwD,KAAA5F,MAAA4F,GAAAG,CAAAA,CAAA7T,QAAA6T,EAAAH,GAAAA,CAAAA,CAAAxD,KAAAwD,KAAAna,MAAAma,GAAAG,CAAAA,CAAA1d,QAAA0d,EAAAH,GAAAG,CAAAjlB;AAAAilB,eAFA,MAIAjlB,CAAAA,CAAA6X,KAAA7X,GAAA8kB,CAAAA,CAAAxD,KAAAwD,KAAA5F,MAAA4F,GAAA,GAAAA,GAAA,CAAA9kB;;AACA,kBAAAuiB,CAAAA,CAAA1C,IAAA,EAAA;AACAoF,gBAAAA,CAAAA,GAAA,IAAA1C,CAAAA,CAAA1C,IAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,CAAA,CAAAoF;AACAjlB,gBAAAA,CAAAA,CAAAqI,GAAArI,GAAA8kB,CAAAA,CAAAxD,KAAAwD,KAAA5F,MAAA4F,GAAAG,CAAAA,CAAA7T,QAAA6T,EAAAH,GAAAA,CAAAA,CAAAxD,KAAAwD,KAAAna,MAAAma,GAAAG,CAAAA,CAAA1d,QAAA0d,EAAAH,GAAAG,CAAAjlB;AAAAilB,eAFA,MAIAjlB,CAAAA,CAAAqI,GAAArI,GAAA8kB,CAAAA,CAAAxD,KAAAwD,KAAA5F,MAAA4F,GAAA,GAAAA,GAAA,CAAA9kB;AAYA;;AAAA,mBAVA,QAAA6d,CAAAA,CAAAhG,KAAA,IAAAgG,CAAAA,CAAA1d,cAAA0d,CAAA,OAAAA,CAAA,KACA,YAAA,OAAAA,CAAAA,CAAAhG,KAAA,GACA7X,CAAAA,CAAA6X,KAAA7X,GAAA8kB,CAAAA,CAAAxD,KAAAwD,KAAA5F,MAAA4F,GAAA5F,MAAAA,CAAArB,CAAAA,CAAAhG,KAAAqH,CAAA4F,GAAAjH,CAAAA,CAAAhG,KADA,GAGA7X,CAAAA,CAAA6X,KAAA7X,GAAA8kB,CAAAA,CAAAxD,KAAAwD,KAAA5F,MAAA4F,GAAAvC,CAAAA,CAAA1C,IAAA0C,CAAAriB,SAAAqiB,CAAAnR,QAAAmR,CAAA9jB,IAAA8jB,CAAA1E,CAAAA,CAAAhG,KAAA0K,CAAAuC,GAAAA,CAAAA,CAAAxD,KAAAwD,KAAAna,MAAAma,GAAA,IAAAvC,CAAAA,CAAAhE,QAAA,CAAAV,CAAAA,CAAAhG,KAAAgG,CAAA2G,GAAA3G,KAAA,CAAA,EAAAA,CAAAA,CAAAhG,KAAAgG,CAAA4G,IAAA5G,KAAA,CAAA,EAAAtW,QAAA,EAAAud,GAAAjH,CAAAA,CAAAhG,KAJA,GAKA,QAAAgG,CAAAA,CAAAxV,GAAA,IAAAwV,CAAAA,CAAA1d,cAAA0d,CAAA,KAAAA,CAAA,KACA,YAAA,OAAAA,CAAAA,CAAAxV,GAAA,GACArI,CAAAA,CAAAqI,GAAArI,GAAA8kB,CAAAA,CAAAxD,KAAAwD,KAAA5F,MAAA4F,GAAA5F,MAAAA,CAAArB,CAAAA,CAAAxV,GAAA6W,CAAA4F,GAAAjH,CAAAA,CAAAxV,GADA,GAGArI,CAAAA,CAAAqI,GAAArI,GAAA8kB,CAAAA,CAAAxD,KAAAwD,KAAA5F,MAAA4F,GAAAvC,CAAAA,CAAA1C,IAAA0C,CAAAriB,SAAAqiB,CAAAnR,QAAAmR,CAAA9jB,IAAA8jB,CAAA1E,CAAAA,CAAAxV,GAAAka,CAAAuC,GAAAA,CAAAA,CAAAxD,KAAAwD,KAAAna,MAAAma,GAAA,IAAAvC,CAAAA,CAAAhE,QAAA,CAAAV,CAAAA,CAAAxV,GAAAwV,CAAA2G,GAAA3G,KAAA,CAAA,EAAAA,CAAAA,CAAAxV,GAAAwV,CAAA4G,IAAA5G,KAAA,CAAA,EAAAtW,QAAA,EAAAud,GAAAjH,CAAAA,CAAAxV,GAJA,CALA,EAUArI,CAAA;AAAAA,WA9LA4mB,EAwMAA,CAAAA,CAAA1mB,SAAA0mB,CAAAzB,MAAAyB,GAAA,YAAA;AACA,mBAAAjX,KAAAI,WAAAJ,CAAAkV,QAAAlV,CAAAA,IAAAA,EAAAuS,CAAAA,CAAA7E,IAAA6E,CAAAb,aAAA1R,CAAA;AAAA0R,WAzMAuF,EA4MAA,CAAA;AA3OA,SAAA,EAnsBAvgB,EAw7BAA,CAAAA,CAAA0gB,YAAA1gB,GAAA,YAAA;AACA,cAAAqc,CAAAA,GAAA,EAAA;AAAA,cAA+BC,CAAAA,GAAA3jB,MAAAA,CAAAY,MAAAZ,CAAA0jB,CAAA1jB,CAA/B;AAGA,iBAFA2jB,CAAAA,CAAAD,CAAAA,CAAA,CAAAA,CAAAA,GAAA,SAAAC,CAAAA,GAAA,CAAAA,EACAA,CAAAA,CAAAD,CAAAA,CAAA,CAAAA,CAAAA,GAAA,UAAAC,CAAAA,GAAA,CADAA,EAEAA,CAAA;AAJA,SAAA,EAx7BAtc,EA+7BAA,CAAA;AAl/BA,OAAA,EAroFAD,EA0nHAA,CAAAA,CAAA4gB,gBAAA5gB,GAAA,YAAA;AAiBA,iBAAA4gB,CAAA,CAAAlJ,CAAA,EAAAA;AAEA,cADAnO,KAAA/H,GAAA+H,GAAA,EAAAA,EACAmO,CAAA,EACA,KAAA,IAAAJ,CAAAA,GAAA1e,MAAAA,CAAA0e,IAAA1e,CAAA8e,CAAA9e,CAAA,EAAAd,CAAAA,GAAA,CAAA,EAA+DA,CAAAA,GAAAwf,CAAAA,CAAA3c,MAA/D,EAA+DA,EAAiB7C,CAAhF,EACA,QAAA4f,CAAAA,CAAAJ,CAAAA,CAAAxf,CAAAwf,CAAAI,CAAA,KACAnO,KAAA+N,CAAAA,CAAAxf,CAAAwf,CAAA/N,IAAAmO,CAAAA,CAAAJ,CAAAA,CAAAxf,CAAAwf,CAAAI,CADA;AAkcA;;AAAA,eAxbAkJ,CAAAA,CAAA9mB,SAAA8mB,CAAApf,GAAAof,GAAAzE,CAAAA,CAAA9D,UAAAuI,EAUAA,CAAAA,CAAApnB,MAAAonB,GAAA,UAAAlJ,CAAA,EAAAA;AACA,iBAAA,IAAAkJ,CAAA,CAAAlJ,CAAA,CAAA;AAAAA,SAXAkJ,EAuBAA,CAAAA,CAAA1D,MAAA0D,GAAA,UAAAnJ,CAAA,EAAA0F,CAAA,EAAAA;AAGA,cAFAA,CAAAA,KACAA,CAAAA,GAAAlB,CAAAA,CAAAziB,MAAAyiB,EADAkB,CAAAA,EAEA,QAAA1F,CAAAA,CAAAjW,GAAA,IAAAiW,CAAAA,CAAAjW,GAAAiW,CAAA9c,MAAA,EACA,KAAA,IAAA7C,CAAAA,GAAA,CAAA,EAA+BA,CAAAA,GAAA2f,CAAAA,CAAAjW,GAAAiW,CAAA9c,MAA/B,EAA+BA,EAAwB7C,CAAvD,EACAskB,CAAAA,CAAApc,IAAAoc,CAAAwE,gBAAAxE,CAAAyE,SAAAzE,CAAAc,MAAAd,CAAA3E,CAAAA,CAAAjW,GAAAiW,CAAA3f,CAAA2f,CAAA2E,EAAAe,CAAAA,CAAAC,MAAAD,CAAA,EAAAA,EAAAI,IAAAJ,EAAAf,EAAAoB,MAAApB;AACA,iBAAAe,CAAA;AAAAA,SA7BAyD,EAyCAA,CAAAA,CAAAjD,eAAAiD,GAAA,UAAAnJ,CAAA,EAAA0F,CAAA,EAAAA;AACA,iBAAA5T,KAAA2T,MAAA3T,CAAAkO,CAAAlO,EAAA4T,CAAA5T,EAAAiU,MAAAjU,EAAA;AAAAiU,SA1CAoD,EAwDAA,CAAAA,CAAAhD,MAAAgD,GAAA,UAAA/C,CAAA,EAAAljB,CAAA,EAAAA;AACAkjB,UAAAA,CAAAA,YAAA9B,CAAA8B,KACAA,CAAAA,GAAA9B,CAAAA,CAAAviB,MAAAuiB,CAAA8B,CAAA9B,CADA8B;;AAGA,eADA,IAAA5b,CAAAA,GAAAA,KAAAxG,CAAAwG,KAAAtH,CAAAsH,GAAA4b,CAAAA,CAAAC,GAAA7b,GAAA4b,CAAAA,CAAArW,GAAAqW,GAAAljB,CAAA,EAAA8c,CAAAA,GAAA,IAAA2E,CAAAA,CAAApc,IAAAoc,CAAAwE,gBAAA,EACA,EAAA/C,CAAAA,CAAArW,GAAAqW,GAAA5b,CAAA,GAAA;AACA,gBAAA8b,CAAAA,GAAAF,CAAAA,CAAAT,MAAAS,EAAA;;AACA,oBAAAE,CAAAA,KAAA,CAAA;AACA,mBAAA,CAAA;AACAtG,gBAAAA,CAAAA,CAAAjW,GAAAiW,IAAAA,CAAAA,CAAAjW,GAAAiW,CAAA9c,MAAA8c,KACAA,CAAAA,CAAAjW,GAAAiW,GAAA,EADAA,GAEAA,CAAAA,CAAAjW,GAAAiW,CAAApS,IAAAoS,CAAA2E,CAAAA,CAAApc,IAAAoc,CAAAwE,gBAAAxE,CAAAyE,SAAAzE,CAAAwB,MAAAxB,CAAAyB,CAAAzB,EAAAyB,CAAAA,CAAAT,MAAAS,EAAAzB,CAAA3E,CAFAA;AAGA;;AACA;AACAoG,gBAAAA,CAAAA,CAAAI,QAAAJ,CAAA,IAAAE,CAAAF;AAPA;AAWA;;AAAA,iBAAApG,CAAA;AAAAA,SAzEAmJ,EAsFAA,CAAAA,CAAA1C,eAAA0C,GAAA,UAAA/C,CAAA,EAAAA;AAGA,iBAFAA,CAAAA,YAAA9B,CAAA8B,KACAA,CAAAA,GAAA,IAAA9B,CAAA,CAAA8B,CAAA,CADAA,GAEAtU,KAAAqU,MAAArU,CAAAsU,CAAAtU,EAAAsU,CAAAA,CAAAT,MAAAS,EAAAtU,CAAA;AAAA6T,SAzFAwD,EAoGAA,CAAAA,CAAAzC,MAAAyC,GAAA,UAAAnJ,CAAA,EAAAA;AACA,cAAA,YAAA,OAAAA,CAAA,IAAA,SAAAA,CAAA,EACA,OAAA,iBAAA;;AACA,cAAA,QAAAA,CAAAA,CAAAjW,GAAA,IAAAiW,CAAAA,CAAA1d,cAAA0d,CAAA,KAAAA,CAAA,EAAA;AACA,gBAAA,CAAApb,KAAAA,CAAAqN,OAAArN,CAAAob,CAAAA,CAAAjW,GAAAnF,CAAA,EACA,OAAA,qBAAA;;AACA,iBAAA,IAAAvE,CAAAA,GAAA,CAAA,EAA+BA,CAAAA,GAAA2f,CAAAA,CAAAjW,GAAAiW,CAAA9c,MAA/B,EAA+BA,EAAwB7C,CAAvD,EAAuD;AACvD,kBAAAkX,CAAAA,GAAAoN,CAAAA,CAAApc,IAAAoc,CAAAwE,gBAAAxE,CAAAyE,SAAAzE,CAAA+B,MAAA/B,CAAA3E,CAAAA,CAAAjW,GAAAiW,CAAA3f,CAAA2f,CAAA2E,CAAA;AACA,kBAAApN,CAAA,EACA,OAAA,SAAAA,CAAA;AAAAA;AAGA;;AAAA,iBAAA,IAAA;AAAA,SAhHA4R,EA2HAA,CAAAA,CAAAtC,UAAAsC,GAAA,UAAAhnB,CAAA,EAAAA;AACA,cAAAA,CAAAA,YAAAwiB,CAAAA,CAAApc,IAAAoc,CAAAwE,gBAAA,EACA,OAAAhnB,CAAA;AACA,cAAA6d,CAAAA,GAAA,IAAA2E,CAAAA,CAAApc,IAAAoc,CAAAwE,gBAAA,EAAA;;AACA,cAAAhnB,CAAAA,CAAA4H,GAAA,EAAA;AACA,gBAAA,CAAAnF,KAAAA,CAAAqN,OAAArN,CAAAzC,CAAAA,CAAA4H,GAAAnF,CAAA,EACA,MAAA4H,SAAAA,CAAA,4CAAAA,CAAA;AACAwT,YAAAA,CAAAA,CAAAjW,GAAAiW,GAAA,EAAAA;;AACA,iBAAA,IAAA3f,CAAAA,GAAA,CAAA,EAA+BA,CAAAA,GAAA8B,CAAAA,CAAA4H,GAAA5H,CAAAe,MAA/B,EAA+BA,EAAuB7C,CAAtD,EAAsD;AACtD,kBAAA,YAAA,OAAA8B,CAAAA,CAAA4H,GAAA5H,CAAA9B,CAAA8B,CAAA,EACA,MAAAqK,SAAAA,CAAA,6CAAAA,CAAA;AACAwT,cAAAA,CAAAA,CAAAjW,GAAAiW,CAAA3f,CAAA2f,IAAA2E,CAAAA,CAAApc,IAAAoc,CAAAwE,gBAAAxE,CAAAyE,SAAAzE,CAAAkC,UAAAlC,CAAAxiB,CAAAA,CAAA4H,GAAA5H,CAAA9B,CAAA8B,CAAAwiB,CAAA3E;AAAA3f;AAGA;;AAAA,iBAAA2f,CAAA;AAAAA,SAzIAmJ,EAqJAA,CAAAA,CAAAnC,QAAAmC,GAAA,UAAAnJ,CAAA,EAAAiH,CAAA,EAAAA;AACAA,UAAAA,CAAAA,KACAA,CAAAA,GAAA,EADAA,CAAAA;AAEA,cAAA9kB,CAAAA,GAAA,EAAA;;AAGA,cAAA,CAFA8kB,CAAAA,CAAAC,MAAAD,IAAAA,CAAAA,CAAAE,QAEA,MADAhlB,CAAAA,CAAA4H,GAAA5H,GAAA,EACA,GAAA6d,CAAAA,CAAAjW,GAAAiW,IAAAA,CAAAA,CAAAjW,GAAAiW,CAAA9c,MAAA,EAAA;AACAf,YAAAA,CAAAA,CAAA4H,GAAA5H,GAAA,EAAAA;;AACA,iBAAA,IAAAuE,CAAAA,GAAA,CAAA,EAA+BA,CAAAA,GAAAsZ,CAAAA,CAAAjW,GAAAiW,CAAA9c,MAA/B,EAA+BA,EAAwBwD,CAAvD,EACAvE,CAAAA,CAAA4H,GAAA5H,CAAAuE,CAAAvE,IAAAwiB,CAAAA,CAAApc,IAAAoc,CAAAwE,gBAAAxE,CAAAyE,SAAAzE,CAAAqC,QAAArC,CAAA3E,CAAAA,CAAAjW,GAAAiW,CAAAtZ,CAAAsZ,CAAA2E,EAAAsC,CAAAtC,CAAAxiB;AAEA;;AAAA,iBAAAA,CAAA;AAAAA,SAhKAgnB,EA0KAA,CAAAA,CAAA9mB,SAAA8mB,CAAA7B,MAAA6B,GAAA,YAAA;AACA,iBAAArX,KAAAI,WAAAJ,CAAAkV,QAAAlV,CAAAA,IAAAA,EAAAuS,CAAAA,CAAA7E,IAAA6E,CAAAb,aAAA1R,CAAA;AAAA0R,SA3KA2F,EA8KAA,CAAAA,CAAAC,SAAAD,GAAA,YAAA;AAmBA,mBAAAC,CAAA,CAAAnJ,CAAA,EAAAA;AACA,gBAAAA,CAAA,EACA,KAAA,IAAAJ,CAAAA,GAAA1e,MAAAA,CAAA0e,IAAA1e,CAAA8e,CAAA9e,CAAA,EAAAd,CAAAA,GAAA,CAAA,EAAmEA,CAAAA,GAAAwf,CAAAA,CAAA3c,MAAnE,EAAmEA,EAAiB7C,CAApF,EACA,QAAA4f,CAAAA,CAAAJ,CAAAA,CAAAxf,CAAAwf,CAAAI,CAAA,KACAnO,KAAA+N,CAAAA,CAAAxf,CAAAwf,CAAA/N,IAAAmO,CAAAA,CAAAJ,CAAAA,CAAAxf,CAAAwf,CAAAI,CADA;AA6BA;;AAAA,cAAAoJ,CAAA;AAoNA,iBAvOAD,CAAAA,CAAA/mB,SAAA+mB,CAAApf,QAAAof,GAAA1E,CAAAA,CAAA1C,IAAA0C,GAAAA,CAAAA,CAAA1C,IAAA0C,CAAAhP,QAAAgP,CAAA,CAAAA,EAAA,CAAAA,EAAA,CAAA,CAAAA,CAAAA,GAAA,CAAA0E,EAQAA,CAAAA,CAAA/mB,SAAA+mB,CAAAE,QAAAF,GAAA,EARAA,EAgBAA,CAAAA,CAAA/mB,SAAA+mB,CAAAG,UAAAH,GAAA,EAhBAA,EA2BAjoB,MAAAA,CAAAC,cAAAD,CAAAioB,CAAAA,CAAA/mB,SAAAlB,EAAA,OAAAA,EAAA;AACAG,YAAAA,GAAAA,EAAAojB,CAAAA,CAAAtB,WAAAsB,CAAA2E,CAAAA,GAAA,CAAA,UAAA,EAAA,UAAA,CAAA3E,CADA;AAEAze,YAAAA,GAAAA,EAAAye,CAAAA,CAAAnB,WAAAmB,CAAA2E,CAAA3E;AAFA,WAAAvjB,CA3BAioB,EAwCAA,CAAAA,CAAArnB,MAAAqnB,GAAA,UAAAnJ,CAAA,EAAAA;AACA,mBAAA,IAAAmJ,CAAA,CAAAnJ,CAAA,CAAA;AAAAA,WAzCAmJ,EAqDAA,CAAAA,CAAA3D,MAAA2D,GAAA,UAAApJ,CAAA,EAAA0F,CAAA,EAAAA;AASA,mBARAA,CAAAA,KACAA,CAAAA,GAAAlB,CAAAA,CAAAziB,MAAAyiB,EADAkB,CAAAA,EAEA,QAAA1F,CAAAA,CAAAhW,QAAA,IAAAgW,CAAAA,CAAA1d,cAAA0d,CAAA,UAAAA,CAAA,IACA0F,CAAAA,CAAAC,MAAAD,CAAA,CAAAA,EAAAG,KAAAH,CAAA1F,CAAAA,CAAAhW,QAAA0b,CAHAA,EAIA,QAAA1F,CAAAA,CAAAsJ,QAAA,IAAAtJ,CAAAA,CAAA1d,cAAA0d,CAAA,UAAAA,CAAA,IACA0F,CAAAA,CAAAC,MAAAD,CAAA,EAAAA,EAAAE,MAAAF,CAAA1F,CAAAA,CAAAsJ,QAAA5D,CALAA,EAMA,QAAA1F,CAAAA,CAAAuJ,UAAA,IAAAvJ,CAAAA,CAAA1d,cAAA0d,CAAA,YAAAA,CAAA,IACA0F,CAAAA,CAAAC,MAAAD,CAAA,EAAAA,EAAAE,MAAAF,CAAA1F,CAAAA,CAAAuJ,UAAA7D,CAPAA,EAQAA,CAAA;AAAAA,WA9DA0D,EA0EAA,CAAAA,CAAAlD,eAAAkD,GAAA,UAAApJ,CAAA,EAAA0F,CAAA,EAAAA;AACA,mBAAA5T,KAAA2T,MAAA3T,CAAAkO,CAAAlO,EAAA4T,CAAA5T,EAAAiU,MAAAjU,EAAA;AAAAiU,WA3EAqD,EAyFAA,CAAAA,CAAAjD,MAAAiD,GAAA,UAAAhD,CAAA,EAAAljB,CAAA,EAAAA;AACAkjB,YAAAA,CAAAA,YAAA9B,CAAA8B,KACAA,CAAAA,GAAA9B,CAAAA,CAAAviB,MAAAuiB,CAAA8B,CAAA9B,CADA8B;;AAGA,iBADA,IAAA5b,CAAAA,GAAAA,KAAAxG,CAAAwG,KAAAtH,CAAAsH,GAAA4b,CAAAA,CAAAC,GAAA7b,GAAA4b,CAAAA,CAAArW,GAAAqW,GAAAljB,CAAA,EAAA8c,CAAAA,GAAA,IAAA2E,CAAAA,CAAApc,IAAAoc,CAAAwE,gBAAAxE,CAAAyE,SAAA,EACA,EAAAhD,CAAAA,CAAArW,GAAAqW,GAAA5b,CAAA,GAAA;AACA,kBAAA8b,CAAAA,GAAAF,CAAAA,CAAAT,MAAAS,EAAA;;AACA,sBAAAE,CAAAA,KAAA,CAAA;AACA,qBAAA,CAAA;AACAtG,kBAAAA,CAAAA,CAAAhW,QAAAgW,GAAAoG,CAAAA,CAAAP,KAAAO,EAAApG;AACA;;AACA,qBAAA,CAAA;AACAA,kBAAAA,CAAAA,CAAAsJ,QAAAtJ,GAAAoG,CAAAA,CAAAR,MAAAQ,EAAApG;AACA;;AACA,qBAAA,CAAA;AACAA,kBAAAA,CAAAA,CAAAuJ,UAAAvJ,GAAAoG,CAAAA,CAAAR,MAAAQ,EAAApG;AACA;;AACA;AACAoG,kBAAAA,CAAAA,CAAAI,QAAAJ,CAAA,IAAAE,CAAAF;AAXA;AAeA;;AAAA,mBAAApG,CAAA;AAAAA,WA9GAoJ,EA2HAA,CAAAA,CAAA3C,eAAA2C,GAAA,UAAAhD,CAAA,EAAAA;AAGA,mBAFAA,CAAAA,YAAA9B,CAAA8B,KACAA,CAAAA,GAAA,IAAA9B,CAAA,CAAA8B,CAAA,CADAA,GAEAtU,KAAAqU,MAAArU,CAAAsU,CAAAtU,EAAAsU,CAAAA,CAAAT,MAAAS,EAAAtU,CAAA;AAAA6T,WA9HAyD,EAyIAA,CAAAA,CAAA1C,MAAA0C,GAAA,UAAApJ,CAAA,EAAAA;AACA,gBAAA,YAAA,OAAAA,CAAA,IAAA,SAAAA,CAAA,EACA,OAAA,iBAAA;AACA,gBAAAC,CAAAA,GAAA,EAAA;AACA,gBAAA,QAAAD,CAAAA,CAAAhW,QAAA,IAAAgW,CAAAA,CAAA1d,cAAA0d,CAAA,UAAAA,CAAA,KACAC,CAAAA,CAAAve,KAAAue,GAAA,CAAAA,EAAA,EACAyE,CAAAA,CAAA3X,SAAA2X,CAAA1E,CAAAA,CAAAhW,QAAA0a,KAAA1E,CAAAA,CAAAhW,QAAAgW,IAAA0E,CAAAA,CAAA3X,SAAA2X,CAAA1E,CAAAA,CAAAhW,QAAAgW,CAAA2G,GAAAjC,CAAA1E,IAAA0E,CAAAA,CAAA3X,SAAA2X,CAAA1E,CAAAA,CAAAhW,QAAAgW,CAAA4G,IAAAlC,CADA,CADA,CAAA,EAGA,OAAA,iCAAA;;AAEA,gBAAA,QAAA1E,CAAAA,CAAAsJ,QAAA,IAAAtJ,CAAAA,CAAA1d,cAAA0d,CAAA,UAAAA,CAAA,EAAA;AACA,kBAAA,MAAAC,CAAAA,CAAAve,KAAA,EACA,OAAA,wBAAA;AAEA,kBADAue,CAAAA,CAAAve,KAAAue,GAAA,CAAAA,EAAA,CACAyE,CAAAA,CAAAtD,QAAAsD,CAAA1E,CAAAA,CAAAsJ,QAAA5E,CAAA,EACA,OAAA,2BAAA;AAEA;;AAAA,mBAAA,QAAA1E,CAAAA,CAAAuJ,UAAA,IAAAvJ,CAAAA,CAAA1d,cAAA0d,CAAA,YAAAA,CAAA,IAAA,CACA0E,CAAAA,CAAAtD,QAAAsD,CAAA1E,CAAAA,CAAAuJ,UAAA7E,CADA,GAEA,6BAFA,GAGA,IAHA;AAGA,WA5JA0E,EAuKAA,CAAAA,CAAAvC,UAAAuC,GAAA,UAAAjnB,CAAA,EAAAA;AACA,gBAAAA,CAAAA,YAAAwiB,CAAAA,CAAApc,IAAAoc,CAAAwE,gBAAAxE,CAAAyE,SAAA,EACA,OAAAjnB,CAAA;AACA,gBAAA6d,CAAAA,GAAA,IAAA2E,CAAAA,CAAApc,IAAAoc,CAAAwE,gBAAAxE,CAAAyE,SAAA,EAAA;AAcA,mBAbA,QAAAjnB,CAAAA,CAAA6H,QAAA,KACA0a,CAAAA,CAAA1C,IAAA0C,GAAA1C,CACAhC,CAAAA,CAAAhW,QAAAgW,GAAA0E,CAAAA,CAAA1C,IAAA0C,CAAAoC,SAAApC,CAAAviB,CAAAA,CAAA6H,QAAA0a,CADA1C,EACAU,QADAV,GACAU,CAAA,CADAgC,GAEA,YAAA,OAAAviB,CAAAA,CAAA6H,QAAA,GACAgW,CAAAA,CAAAhW,QAAAgW,GAAA+G,QAAAA,CAAA5kB,CAAAA,CAAA6H,QAAA+c,EAAA,EAAAA,CADA,GAEA,YAAA,OAAA5kB,CAAAA,CAAA6H,QAAA,GACAgW,CAAAA,CAAAhW,QAAAgW,GAAA7d,CAAAA,CAAA6H,QADA,GAEA,YAAA,OAAA7H,CAAAA,CAAA6H,QAAA,KACAgW,CAAAA,CAAAhW,QAAAgW,GAAA,IAAA0E,CAAAA,CAAAhE,QAAA,CAAAve,CAAAA,CAAA6H,QAAA7H,CAAAwkB,GAAAxkB,KAAA,CAAA,EAAAA,CAAAA,CAAA6H,QAAA7H,CAAAykB,IAAAzkB,KAAA,CAAA,EAAAuH,QAAA,EADA,CAPA,GASA,QAAAvH,CAAAA,CAAAmnB,QAAA,KACAtJ,CAAAA,CAAAsJ,QAAAtJ,GAAAqB,MAAAA,CAAAlf,CAAAA,CAAAmnB,QAAAjI,CADA,CATA,EAWA,QAAAlf,CAAAA,CAAAonB,UAAA,KACAvJ,CAAAA,CAAAuJ,UAAAvJ,GAAAqB,MAAAA,CAAAlf,CAAAA,CAAAonB,UAAAlI,CADA,CAXA,EAaArB,CAAA;AAAAA,WAxLAoJ,EAoMAA,CAAAA,CAAApC,QAAAoC,GAAA,UAAApJ,CAAA,EAAAiH,CAAA,EAAAA;AACAA,YAAAA,CAAAA,KACAA,CAAAA,GAAA,EADAA,CAAAA;AAEA,gBAAA9kB,CAAAA,GAAA,EAAA;AAkBA,mBAjBA8kB,CAAAA,CAAAE,QAAAF,KACA9kB,CAAAA,CAAAonB,UAAApnB,GAAA,EADA8kB,GAEA,QAAAjH,CAAAA,CAAAhW,QAAA,IAAAgW,CAAAA,CAAA1d,cAAA0d,CAAA,UAAAA,CAAA,KACA,YAAA,OAAAA,CAAAA,CAAAhW,QAAA,GACA7H,CAAAA,CAAA6H,QAAA7H,GAAA8kB,CAAAA,CAAAxD,KAAAwD,KAAA5F,MAAA4F,GAAA5F,MAAAA,CAAArB,CAAAA,CAAAhW,QAAAqX,CAAA4F,GAAAjH,CAAAA,CAAAhW,QADA,GAGA7H,CAAAA,CAAA6H,QAAA7H,GAAA8kB,CAAAA,CAAAxD,KAAAwD,KAAA5F,MAAA4F,GAAAvC,CAAAA,CAAA1C,IAAA0C,CAAAriB,SAAAqiB,CAAAnR,QAAAmR,CAAA9jB,IAAA8jB,CAAA1E,CAAAA,CAAAhW,QAAA0a,CAAAuC,GAAAA,CAAAA,CAAAxD,KAAAwD,KAAAna,MAAAma,GAAA,IAAAvC,CAAAA,CAAAhE,QAAA,CAAAV,CAAAA,CAAAhW,QAAAgW,CAAA2G,GAAA3G,KAAA,CAAA,EAAAA,CAAAA,CAAAhW,QAAAgW,CAAA4G,IAAA5G,KAAA,CAAA,EAAAtW,QAAA,EAAAud,GAAAjH,CAAAA,CAAAhW,QAHA,EAIAid,CAAAA,CAAAuC,MAAAvC,KACA9kB,CAAAA,CAAAT,KAAAS,GAAA,UADA8kB,CALA,CAFAA,EAUA,QAAAjH,CAAAA,CAAAsJ,QAAA,IAAAtJ,CAAAA,CAAA1d,cAAA0d,CAAA,UAAAA,CAAA,KACA7d,CAAAA,CAAAmnB,QAAAnnB,GAAA6d,CAAAA,CAAAsJ,QAAAnnB,EACA8kB,CAAAA,CAAAuC,MAAAvC,KACA9kB,CAAAA,CAAAT,KAAAS,GAAA,UADA8kB,CAFA,CAVAA,EAeA,QAAAjH,CAAAA,CAAAuJ,UAAA,IAAAvJ,CAAAA,CAAA1d,cAAA0d,CAAA,YAAAA,CAAA,KACA7d,CAAAA,CAAAonB,UAAApnB,GAAA6d,CAAAA,CAAAuJ,UADA,CAfAtC,EAiBA9kB,CAAA;AAAAA,WAzNAinB,EAmOAA,CAAAA,CAAA/mB,SAAA+mB,CAAA9B,MAAA8B,GAAA,YAAA;AACA,mBAAAtX,KAAAI,WAAAJ,CAAAkV,QAAAlV,CAAAA,IAAAA,EAAAuS,CAAAA,CAAA7E,IAAA6E,CAAAb,aAAA1R,CAAA;AAAA0R,WApOA4F,EAuOAA,CAAA;AAvQA,SAAA,EA9KAD,EAwbAA,CAAA;AAvdA,OAAA,EA1nHA5gB,EAolIAA,CAAAA,CAAAif,SAAAjf,GAAA,YAAA;AAkBA,iBAAAif,CAAA,CAAAvH,CAAA,EAAAA;AACA,cAAAA,CAAA,EACA,KAAA,IAAAJ,CAAAA,GAAA1e,MAAAA,CAAA0e,IAAA1e,CAAA8e,CAAA9e,CAAA,EAAAd,CAAAA,GAAA,CAAA,EAA+DA,CAAAA,GAAAwf,CAAAA,CAAA3c,MAA/D,EAA+DA,EAAiB7C,CAAhF,EACA,QAAA4f,CAAAA,CAAAJ,CAAAA,CAAAxf,CAAAwf,CAAAI,CAAA,KACAnO,KAAA+N,CAAAA,CAAAxf,CAAAwf,CAAA/N,IAAAmO,CAAAA,CAAAJ,CAAAA,CAAAxf,CAAAwf,CAAAI,CADA;AAqBA;;AAAA,YAAAoJ,CAAA;AAoZA,eA/ZA7B,CAAAA,CAAAnlB,SAAAmlB,CAAA3d,UAAA2d,GAAA,IAAAA,EAQAA,CAAAA,CAAAnlB,SAAAmlB,CAAA+B,UAAA/B,GAAA,EARAA,EAmBArmB,MAAAA,CAAAC,cAAAD,CAAAqmB,CAAAA,CAAAnlB,SAAAlB,EAAA,OAAAA,EAAA;AACAG,UAAAA,GAAAA,EAAAojB,CAAAA,CAAAtB,WAAAsB,CAAA2E,CAAAA,GAAA,CAAA,YAAA,CAAA3E,CADA;AAEAze,UAAAA,GAAAA,EAAAye,CAAAA,CAAAnB,WAAAmB,CAAA2E,CAAA3E;AAFA,SAAAvjB,CAnBAqmB,EAgCAA,CAAAA,CAAAzlB,MAAAylB,GAAA,UAAAvH,CAAA,EAAAA;AACA,iBAAA,IAAAuH,CAAA,CAAAvH,CAAA,CAAA;AAAAA,SAjCAuH,EA6CAA,CAAAA,CAAA/B,MAAA+B,GAAA,UAAAxH,CAAA,EAAA0F,CAAA,EAAAA;AAOA,iBANAA,CAAAA,KACAA,CAAAA,GAAAlB,CAAAA,CAAAziB,MAAAyiB,EADAkB,CAAAA,EAEA,QAAA1F,CAAAA,CAAAnW,UAAA,IAAAmW,CAAAA,CAAA1d,cAAA0d,CAAA,YAAAA,CAAA,IACA2E,CAAAA,CAAApc,IAAAoc,CAAA6C,SAAA7C,CAAA5e,MAAA4e,CAAAc,MAAAd,CAAA3E,CAAAA,CAAAnW,UAAA8a,EAAAe,CAAAA,CAAAC,MAAAD,CAAA,EAAAA,EAAAI,IAAAJ,EAAAf,EAAAoB,MAAApB,EAHAe,EAIA,QAAA1F,CAAAA,CAAAuJ,UAAA,IAAAvJ,CAAAA,CAAA1d,cAAA0d,CAAA,YAAAA,CAAA,IACA0F,CAAAA,CAAAC,MAAAD,CAAA,EAAAA,EAAAE,MAAAF,CAAA1F,CAAAA,CAAAuJ,UAAA7D,CALAA,EAMAA,CAAA;AAAAA,SApDA8B,EAgEAA,CAAAA,CAAAtB,eAAAsB,GAAA,UAAAxH,CAAA,EAAA0F,CAAA,EAAAA;AACA,iBAAA5T,KAAA2T,MAAA3T,CAAAkO,CAAAlO,EAAA4T,CAAA5T,EAAAiU,MAAAjU,EAAA;AAAAiU,SAjEAyB,EA+EAA,CAAAA,CAAArB,MAAAqB,GAAA,UAAApB,CAAA,EAAAljB,CAAA,EAAAA;AACAkjB,UAAAA,CAAAA,YAAA9B,CAAA8B,KACAA,CAAAA,GAAA9B,CAAAA,CAAAviB,MAAAuiB,CAAA8B,CAAA9B,CADA8B;;AAGA,eADA,IAAA5b,CAAAA,GAAAA,KAAAxG,CAAAwG,KAAAtH,CAAAsH,GAAA4b,CAAAA,CAAAC,GAAA7b,GAAA4b,CAAAA,CAAArW,GAAAqW,GAAAljB,CAAA,EAAA8c,CAAAA,GAAA,IAAA2E,CAAAA,CAAApc,IAAAoc,CAAA6C,SAAA,EACA,EAAApB,CAAAA,CAAArW,GAAAqW,GAAA5b,CAAA,GAAA;AACA,gBAAA8b,CAAAA,GAAAF,CAAAA,CAAAT,MAAAS,EAAA;;AACA,oBAAAE,CAAAA,KAAA,CAAA;AACA,mBAAA,CAAA;AACAtG,gBAAAA,CAAAA,CAAAnW,UAAAmW,GAAA2E,CAAAA,CAAApc,IAAAoc,CAAA6C,SAAA7C,CAAA5e,MAAA4e,CAAAwB,MAAAxB,CAAAyB,CAAAzB,EAAAyB,CAAAA,CAAAT,MAAAS,EAAAzB,CAAA3E;AACA;;AACA,mBAAA,CAAA;AACAA,gBAAAA,CAAAA,CAAAuJ,UAAAvJ,GAAAoG,CAAAA,CAAAR,MAAAQ,EAAApG;AACA;;AACA;AACAoG,gBAAAA,CAAAA,CAAAI,QAAAJ,CAAA,IAAAE,CAAAF;AARA;AAYA;;AAAA,iBAAApG,CAAA;AAAAA,SAjGAwH,EA8GAA,CAAAA,CAAAf,eAAAe,GAAA,UAAApB,CAAA,EAAAA;AAGA,iBAFAA,CAAAA,YAAA9B,CAAA8B,KACAA,CAAAA,GAAA,IAAA9B,CAAA,CAAA8B,CAAA,CADAA,GAEAtU,KAAAqU,MAAArU,CAAAsU,CAAAtU,EAAAsU,CAAAA,CAAAT,MAAAS,EAAAtU,CAAA;AAAA6T,SAjHA6B,EA4HAA,CAAAA,CAAAd,MAAAc,GAAA,UAAAxH,CAAA,EAAAA;AACA,cAAA,YAAA,OAAAA,CAAA,IAAA,SAAAA,CAAA,EACA,OAAA,iBAAA;;AAEA,cAAA,QAAAA,CAAAA,CAAAnW,UAAA,IAAAmW,CAAAA,CAAA1d,cAAA0d,CAAA,YAAAA,CAAA,EAAA;AAGA,gBAAAzI,CAAAA,GAAAoN,CAAAA,CAAApc,IAAAoc,CAAA6C,SAAA7C,CAAA5e,MAAA4e,CAAA+B,MAAA/B,CAAA3E,CAAAA,CAAAnW,UAAA8a,CAAA;AACA,gBAAApN,CAAA,EACA,OAAA,gBAAAA,CAAA;AAGA;;AAAA,iBAAA,QAAAyI,CAAAA,CAAAuJ,UAAA,IAAAvJ,CAAAA,CAAA1d,cAAA0d,CAAA,YAAAA,CAAA,IAAA,CACA0E,CAAAA,CAAAtD,QAAAsD,CAAA1E,CAAAA,CAAAuJ,UAAA7E,CADA,GAEA,6BAFA,GAGA,IAHA;AAGA,SA3IA8C,EAsJAA,CAAAA,CAAAX,UAAAW,GAAA,UAAArlB,CAAA,EAAAA;AACA,cAAAA,CAAAA,YAAAwiB,CAAAA,CAAApc,IAAAoc,CAAA6C,SAAA,EACA,OAAArlB,CAAA;AACA,cAAA6d,CAAAA,GAAA,IAAA2E,CAAAA,CAAApc,IAAAoc,CAAA6C,SAAA,EAAA;;AACA,cAAA,QAAArlB,CAAAA,CAAA0H,UAAA,EAAA;AACA,gBAAA,YAAA,OAAA1H,CAAAA,CAAA0H,UAAA,EACA,MAAA2C,SAAAA,CAAA,6CAAAA,CAAA;AACAwT,YAAAA,CAAAA,CAAAnW,UAAAmW,GAAA2E,CAAAA,CAAApc,IAAAoc,CAAA6C,SAAA7C,CAAA5e,MAAA4e,CAAAkC,UAAAlC,CAAAxiB,CAAAA,CAAA0H,UAAA8a,CAAA3E;AAIA;;AAAA,iBAFA,QAAA7d,CAAAA,CAAAonB,UAAA,KACAvJ,CAAAA,CAAAuJ,UAAAvJ,GAAAqB,MAAAA,CAAAlf,CAAAA,CAAAonB,UAAAlI,CADA,GAEArB,CAAA;AAAAA,SAjKAwH,EA6KAA,CAAAA,CAAAR,QAAAQ,GAAA,UAAAxH,CAAA,EAAAiH,CAAA,EAAAA;AACAA,UAAAA,CAAAA,KACAA,CAAAA,GAAA,EADAA,CAAAA;AAEA,cAAA9kB,CAAAA,GAAA,EAAA;AAUA,iBATA8kB,CAAAA,CAAAE,QAAAF,KACA9kB,CAAAA,CAAAonB,UAAApnB,GAAA,EADA8kB,GAEA,QAAAjH,CAAAA,CAAAnW,UAAA,IAAAmW,CAAAA,CAAA1d,cAAA0d,CAAA,YAAAA,CAAA,KACA7d,CAAAA,CAAA0H,UAAA1H,GAAAwiB,CAAAA,CAAApc,IAAAoc,CAAA6C,SAAA7C,CAAA5e,MAAA4e,CAAAqC,QAAArC,CAAA3E,CAAAA,CAAAnW,UAAA8a,EAAAsC,CAAAtC,CAAAxiB,EACA8kB,CAAAA,CAAAuC,MAAAvC,KACA9kB,CAAAA,CAAAT,KAAAS,GAAA,YADA8kB,CAFA,CAFAA,EAOA,QAAAjH,CAAAA,CAAAuJ,UAAA,IAAAvJ,CAAAA,CAAA1d,cAAA0d,CAAA,YAAAA,CAAA,KACA7d,CAAAA,CAAAonB,UAAApnB,GAAA6d,CAAAA,CAAAuJ,UADA,CAPAtC,EASA9kB,CAAA;AAAAA,SA1LAqlB,EAoMAA,CAAAA,CAAAnlB,SAAAmlB,CAAAF,MAAAE,GAAA,YAAA;AACA,iBAAA1V,KAAAI,WAAAJ,CAAAkV,QAAAlV,CAAAA,IAAAA,EAAAuS,CAAAA,CAAA7E,IAAA6E,CAAAb,aAAA1R,CAAA;AAAA0R,SArMAgE,EAwMAA,CAAAA,CAAAzhB,MAAAyhB,GAAA,YAAA;AAkBA,mBAAAzhB,CAAA,CAAAka,CAAA,EAAAA;AACA,gBAAAA,CAAA,EACA,KAAA,IAAAJ,CAAAA,GAAA1e,MAAAA,CAAA0e,IAAA1e,CAAA8e,CAAA9e,CAAA,EAAAd,CAAAA,GAAA,CAAA,EAAmEA,CAAAA,GAAAwf,CAAAA,CAAA3c,MAAnE,EAAmEA,EAAiB7C,CAApF,EACA,QAAA4f,CAAAA,CAAAJ,CAAAA,CAAAxf,CAAAwf,CAAAI,CAAA,KACAnO,KAAA+N,CAAAA,CAAAxf,CAAAwf,CAAA/N,IAAAmO,CAAAA,CAAAJ,CAAAA,CAAAxf,CAAAwf,CAAAI,CADA;AA+LA;;AAAA,iBArLAla,CAAAA,CAAA1D,SAAA0D,CAAA+D,QAAA/D,GAAA,CAAAA,EAQAA,CAAAA,CAAA1D,SAAA0D,CAAAc,KAAAd,GAAA,IARAA,EAkBAA,CAAAA,CAAAhE,MAAAgE,GAAA,UAAAka,CAAA,EAAAA;AACA,mBAAA,IAAAla,CAAA,CAAAka,CAAA,CAAA;AAAAA,WAnBAla,EA+BAA,CAAAA,CAAA0f,MAAA1f,GAAA,UAAAia,CAAA,EAAA0F,CAAA,EAAAA;AAOA,mBANAA,CAAAA,KACAA,CAAAA,GAAAlB,CAAAA,CAAAziB,MAAAyiB,EADAkB,CAAAA,EAEA,QAAA1F,CAAAA,CAAAlW,QAAA,IAAAkW,CAAAA,CAAA1d,cAAA0d,CAAA,UAAAA,CAAA,IACA0F,CAAAA,CAAAC,MAAAD,CAAA,CAAAA,EAAAO,KAAAP,CAAA1F,CAAAA,CAAAlW,QAAA4b,CAHAA,EAIA,QAAA1F,CAAAA,CAAAnZ,KAAA,IAAAmZ,CAAAA,CAAA1d,cAAA0d,CAAA,OAAAA,CAAA,IACA2E,CAAAA,CAAApc,IAAAoc,CAAAwE,gBAAAxE,CAAAc,MAAAd,CAAA3E,CAAAA,CAAAnZ,KAAA8d,EAAAe,CAAAA,CAAAC,MAAAD,CAAA,EAAAA,EAAAI,IAAAJ,EAAAf,EAAAoB,MAAApB,EALAe,EAMAA,CAAA;AAAAA,WAtCA3f,EAkDAA,CAAAA,CAAAmgB,eAAAngB,GAAA,UAAAia,CAAA,EAAA0F,CAAA,EAAAA;AACA,mBAAA5T,KAAA2T,MAAA3T,CAAAkO,CAAAlO,EAAA4T,CAAA5T,EAAAiU,MAAAjU,EAAA;AAAAiU,WAnDAhgB,EAiEAA,CAAAA,CAAAogB,MAAApgB,GAAA,UAAAqgB,CAAA,EAAAljB,CAAA,EAAAA;AACAkjB,YAAAA,CAAAA,YAAA9B,CAAA8B,KACAA,CAAAA,GAAA9B,CAAAA,CAAAviB,MAAAuiB,CAAA8B,CAAA9B,CADA8B;;AAGA,iBADA,IAAA5b,CAAAA,GAAAA,KAAAxG,CAAAwG,KAAAtH,CAAAsH,GAAA4b,CAAAA,CAAAC,GAAA7b,GAAA4b,CAAAA,CAAArW,GAAAqW,GAAAljB,CAAA,EAAA8c,CAAAA,GAAA,IAAA2E,CAAAA,CAAApc,IAAAoc,CAAA6C,SAAA7C,CAAA5e,MAAA,EACA,EAAAqgB,CAAAA,CAAArW,GAAAqW,GAAA5b,CAAA,GAAA;AACA,kBAAA8b,CAAAA,GAAAF,CAAAA,CAAAT,MAAAS,EAAA;;AACA,sBAAAE,CAAAA,KAAA,CAAA;AACA,qBAAA,CAAA;AACAtG,kBAAAA,CAAAA,CAAAlW,QAAAkW,GAAAoG,CAAAA,CAAAH,KAAAG,EAAApG;AACA;;AACA,qBAAA,CAAA;AACAA,kBAAAA,CAAAA,CAAAnZ,KAAAmZ,GAAA2E,CAAAA,CAAApc,IAAAoc,CAAAwE,gBAAAxE,CAAAwB,MAAAxB,CAAAyB,CAAAzB,EAAAyB,CAAAA,CAAAT,MAAAS,EAAAzB,CAAA3E;AACA;;AACA;AACAoG,kBAAAA,CAAAA,CAAAI,QAAAJ,CAAA,IAAAE,CAAAF;AARA;AAYA;;AAAA,mBAAApG,CAAA;AAAAA,WAnFAja,EAgGAA,CAAAA,CAAA0gB,eAAA1gB,GAAA,UAAAqgB,CAAA,EAAAA;AAGA,mBAFAA,CAAAA,YAAA9B,CAAA8B,KACAA,CAAAA,GAAA,IAAA9B,CAAA,CAAA8B,CAAA,CADAA,GAEAtU,KAAAqU,MAAArU,CAAAsU,CAAAtU,EAAAsU,CAAAA,CAAAT,MAAAS,EAAAtU,CAAA;AAAA6T,WAnGA5f,EA8GAA,CAAAA,CAAA2gB,MAAA3gB,GAAA,UAAAia,CAAA,EAAAA;AACA,gBAAA,YAAA,OAAAA,CAAA,IAAA,SAAAA,CAAA,EACA,OAAA,iBAAA;AACA,gBAAA,QAAAA,CAAAA,CAAAlW,QAAA,IAAAkW,CAAAA,CAAA1d,cAAA0d,CAAA,UAAAA,CAAA,IAAA,CACA0E,CAAAA,CAAA3X,SAAA2X,CAAA1E,CAAAA,CAAAlW,QAAA4a,CADA,EAEA,OAAA,4BAAA;;AACA,gBAAA,QAAA1E,CAAAA,CAAAnZ,KAAA,IAAAmZ,CAAAA,CAAA1d,cAAA0d,CAAA,OAAAA,CAAA,EAAA;AACA,kBAAAzI,CAAAA,GAAAoN,CAAAA,CAAApc,IAAAoc,CAAAwE,gBAAAxE,CAAA+B,MAAA/B,CAAA3E,CAAAA,CAAAnZ,KAAA8d,CAAA;AACA,kBAAApN,CAAA,EACA,OAAA,WAAAA,CAAA;AAEA;;AAAA,mBAAA,IAAA;AAAA,WAzHAxR,EAoIAA,CAAAA,CAAA8gB,UAAA9gB,GAAA,UAAA5D,CAAA,EAAAA;AACA,gBAAAA,CAAAA,YAAAwiB,CAAAA,CAAApc,IAAAoc,CAAA6C,SAAA7C,CAAA5e,MAAA,EACA,OAAA5D,CAAA;AACA,gBAAA6d,CAAAA,GAAA,IAAA2E,CAAAA,CAAApc,IAAAoc,CAAA6C,SAAA7C,CAAA5e,MAAA,EAAA;;AAGA,gBAFA,QAAA5D,CAAAA,CAAA2H,QAAA,KACAkW,CAAAA,CAAAlW,QAAAkW,GAAA,IAAA7d,CAAAA,CAAA2H,QADA,GAEA,QAAA3H,CAAAA,CAAA0E,KAAA,EAAA;AACA,kBAAA,YAAA,OAAA1E,CAAAA,CAAA0E,KAAA,EACA,MAAA2F,SAAAA,CAAA,+CAAAA,CAAA;AACAwT,cAAAA,CAAAA,CAAAnZ,KAAAmZ,GAAA2E,CAAAA,CAAApc,IAAAoc,CAAAwE,gBAAAxE,CAAAkC,UAAAlC,CAAAxiB,CAAAA,CAAA0E,KAAA8d,CAAA3E;AAEA;;AAAA,mBAAAA,CAAA;AAAAA,WA/IAja,EA2JAA,CAAAA,CAAAihB,QAAAjhB,GAAA,UAAAia,CAAA,EAAAiH,CAAA,EAAAA;AACAA,YAAAA,CAAAA,KACAA,CAAAA,GAAA,EADAA,CAAAA;AAEA,gBAAA9kB,CAAAA,GAAA,EAAA;AASA,mBARA8kB,CAAAA,CAAAE,QAAAF,KACA9kB,CAAAA,CAAA2H,QAAA3H,GAAA,CAAAA,EACAA,CAAAA,CAAA0E,KAAA1E,GAAA,IAFA8kB,GAIA,QAAAjH,CAAAA,CAAAlW,QAAA,IAAAkW,CAAAA,CAAA1d,cAAA0d,CAAA,UAAAA,CAAA,KACA7d,CAAAA,CAAA2H,QAAA3H,GAAA6d,CAAAA,CAAAlW,QADA,CAJAmd,EAMA,QAAAjH,CAAAA,CAAAnZ,KAAA,IAAAmZ,CAAAA,CAAA1d,cAAA0d,CAAA,OAAAA,CAAA,KACA7d,CAAAA,CAAA0E,KAAA1E,GAAAwiB,CAAAA,CAAApc,IAAAoc,CAAAwE,gBAAAxE,CAAAqC,QAAArC,CAAA3E,CAAAA,CAAAnZ,KAAA8d,EAAAsC,CAAAtC,CADA,CANAsC,EAQA9kB,CAAA;AAAAA,WAvKA4D,EAiLAA,CAAAA,CAAA1D,SAAA0D,CAAAuhB,MAAAvhB,GAAA,YAAA;AACA,mBAAA+L,KAAAI,WAAAJ,CAAAkV,QAAAlV,CAAAA,IAAAA,EAAAuS,CAAAA,CAAA7E,IAAA6E,CAAAb,aAAA1R,CAAA;AAAA0R,WAlLAzd,EAqLAA,CAAA;AApNA,SAAA,EAxMAyhB,EA+ZAA,CAAA;AA9bA,OAAA,EAplIAjf,EAqhJAA,CAAAA,CAAA6f,kBAAA7f,GAAA,YAAA;AAkBA,iBAAA6f,CAAA,CAAAnI,CAAA,EAAAA;AACA,cAAAA,CAAA,EACA,KAAA,IAAAJ,CAAAA,GAAA1e,MAAAA,CAAA0e,IAAA1e,CAAA8e,CAAA9e,CAAA,EAAAd,CAAAA,GAAA,CAAA,EAA+DA,CAAAA,GAAAwf,CAAAA,CAAA3c,MAA/D,EAA+DA,EAAiB7C,CAAhF,EACA,QAAA4f,CAAAA,CAAAJ,CAAAA,CAAAxf,CAAAwf,CAAAI,CAAA,KACAnO,KAAA+N,CAAAA,CAAAxf,CAAAwf,CAAA/N,IAAAmO,CAAAA,CAAAJ,CAAAA,CAAAxf,CAAAwf,CAAAI,CADA;AAwMA;;AAAA,eA9LAmI,CAAAA,CAAA/lB,SAAA+lB,CAAAT,MAAAS,GAAA,EAAAA,EAQAA,CAAAA,CAAA/lB,SAAA+lB,CAAAvS,OAAAuS,GAAA1D,CAAAA,CAAA1C,IAAA0C,GAAAA,CAAAA,CAAA1C,IAAA0C,CAAAhP,QAAAgP,CAAA,CAAAA,EAAA,CAAAA,EAAA,CAAA,CAAAA,CAAAA,GAAA,CARA0D,EAkBAA,CAAAA,CAAArmB,MAAAqmB,GAAA,UAAAnI,CAAA,EAAAA;AACA,iBAAA,IAAAmI,CAAA,CAAAnI,CAAA,CAAA;AAAAA,SAnBAmI,EA+BAA,CAAAA,CAAA3C,MAAA2C,GAAA,UAAApI,CAAA,EAAA0F,CAAA,EAAAA;AAOA,iBANAA,CAAAA,KACAA,CAAAA,GAAAlB,CAAAA,CAAAziB,MAAAyiB,EADAkB,CAAAA,EAEA,QAAA1F,CAAAA,CAAA2H,MAAA,IAAA3H,CAAAA,CAAA1d,cAAA0d,CAAA,QAAAA,CAAA,IACA0F,CAAAA,CAAAC,MAAAD,CAAA,EAAAA,EAAAE,MAAAF,CAAA1F,CAAAA,CAAA2H,MAAAjC,CAHAA,EAIA,QAAA1F,CAAAA,CAAAnK,OAAA,IAAAmK,CAAAA,CAAA1d,cAAA0d,CAAA,SAAAA,CAAA,IACA0F,CAAAA,CAAAC,MAAAD,CAAA,EAAAA,EAAAG,KAAAH,CAAA1F,CAAAA,CAAAnK,OAAA6P,CALAA,EAMAA,CAAA;AAAAA,SAtCA0C,EAkDAA,CAAAA,CAAAlC,eAAAkC,GAAA,UAAApI,CAAA,EAAA0F,CAAA,EAAAA;AACA,iBAAA5T,KAAA2T,MAAA3T,CAAAkO,CAAAlO,EAAA4T,CAAA5T,EAAAiU,MAAAjU,EAAA;AAAAiU,SAnDAqC,EAiEAA,CAAAA,CAAAjC,MAAAiC,GAAA,UAAAhC,CAAA,EAAAljB,CAAA,EAAAA;AACAkjB,UAAAA,CAAAA,YAAA9B,CAAA8B,KACAA,CAAAA,GAAA9B,CAAAA,CAAAviB,MAAAuiB,CAAA8B,CAAA9B,CADA8B;;AAGA,eADA,IAAA5b,CAAAA,GAAAA,KAAAxG,CAAAwG,KAAAtH,CAAAsH,GAAA4b,CAAAA,CAAAC,GAAA7b,GAAA4b,CAAAA,CAAArW,GAAAqW,GAAAljB,CAAA,EAAA8c,CAAAA,GAAA,IAAA2E,CAAAA,CAAApc,IAAAoc,CAAAyD,kBAAA,EACA,EAAAhC,CAAAA,CAAArW,GAAAqW,GAAA5b,CAAA,GAAA;AACA,gBAAA8b,CAAAA,GAAAF,CAAAA,CAAAT,MAAAS,EAAA;;AACA,oBAAAE,CAAAA,KAAA,CAAA;AACA,mBAAA,CAAA;AACAtG,gBAAAA,CAAAA,CAAA2H,MAAA3H,GAAAoG,CAAAA,CAAAR,MAAAQ,EAAApG;AACA;;AACA,mBAAA,CAAA;AACAA,gBAAAA,CAAAA,CAAAnK,OAAAmK,GAAAoG,CAAAA,CAAAP,KAAAO,EAAApG;AACA;;AACA;AACAoG,gBAAAA,CAAAA,CAAAI,QAAAJ,CAAA,IAAAE,CAAAF;AARA;AAYA;;AAAA,iBAAApG,CAAA;AAAAA,SAnFAoI,EAgGAA,CAAAA,CAAA3B,eAAA2B,GAAA,UAAAhC,CAAA,EAAAA;AAGA,iBAFAA,CAAAA,YAAA9B,CAAA8B,KACAA,CAAAA,GAAA,IAAA9B,CAAA,CAAA8B,CAAA,CADAA,GAEAtU,KAAAqU,MAAArU,CAAAsU,CAAAtU,EAAAsU,CAAAA,CAAAT,MAAAS,EAAAtU,CAAA;AAAA6T,SAnGAyC,EA8GAA,CAAAA,CAAA1B,MAAA0B,GAAA,UAAApI,CAAA,EAAAA;AACA,iBAAA,YAAA,OAAAA,CAAA,IAAA,SAAAA,CAAA,GACA,iBADA,GAEA,QAAAA,CAAAA,CAAA2H,MAAA,IAAA3H,CAAAA,CAAA1d,cAAA0d,CAAA,QAAAA,CAAA,IAAA,CACA0E,CAAAA,CAAAtD,QAAAsD,CAAA1E,CAAAA,CAAA2H,MAAAjD,CADA,GAEA,yBAFA,GAGA,QAAA1E,CAAAA,CAAAnK,OAAA,IAAAmK,CAAAA,CAAA1d,cAAA0d,CAAA,SAAAA,CAAA,IAAA,EACA0E,CAAAA,CAAA3X,SAAA2X,CAAA1E,CAAAA,CAAAnK,OAAA6O,KAAA1E,CAAAA,CAAAnK,OAAAmK,IAAA0E,CAAAA,CAAA3X,SAAA2X,CAAA1E,CAAAA,CAAAnK,OAAAmK,CAAA2G,GAAAjC,CAAA1E,IAAA0E,CAAAA,CAAA3X,SAAA2X,CAAA1E,CAAAA,CAAAnK,OAAAmK,CAAA4G,IAAAlC,CADA,CAAA,GAEA,gCAFA,GAGA,IARA;AAQA,SAvHA0D,EAkIAA,CAAAA,CAAAvB,UAAAuB,GAAA,UAAAjmB,CAAA,EAAAA;AACA,cAAAA,CAAAA,YAAAwiB,CAAAA,CAAApc,IAAAoc,CAAAyD,kBAAA,EACA,OAAAjmB,CAAA;AACA,cAAA6d,CAAAA,GAAA,IAAA2E,CAAAA,CAAApc,IAAAoc,CAAAyD,kBAAA,EAAA;AAYA,iBAXA,QAAAjmB,CAAAA,CAAAwlB,MAAA,KACA3H,CAAAA,CAAA2H,MAAA3H,GAAAqB,MAAAA,CAAAlf,CAAAA,CAAAwlB,MAAAtG,CADA,GAEA,QAAAlf,CAAAA,CAAA0T,OAAA,KACA6O,CAAAA,CAAA1C,IAAA0C,GAAA1C,CACAhC,CAAAA,CAAAnK,OAAAmK,GAAA0E,CAAAA,CAAA1C,IAAA0C,CAAAoC,SAAApC,CAAAviB,CAAAA,CAAA0T,OAAA6O,CADA1C,EACAU,QADAV,GACAU,CAAA,CADAgC,GAEA,YAAA,OAAAviB,CAAAA,CAAA0T,OAAA,GACAmK,CAAAA,CAAAnK,OAAAmK,GAAA+G,QAAAA,CAAA5kB,CAAAA,CAAA0T,OAAAkR,EAAA,EAAAA,CADA,GAEA,YAAA,OAAA5kB,CAAAA,CAAA0T,OAAA,GACAmK,CAAAA,CAAAnK,OAAAmK,GAAA7d,CAAAA,CAAA0T,OADA,GAEA,YAAA,OAAA1T,CAAAA,CAAA0T,OAAA,KACAmK,CAAAA,CAAAnK,OAAAmK,GAAA,IAAA0E,CAAAA,CAAAhE,QAAA,CAAAve,CAAAA,CAAA0T,OAAA1T,CAAAwkB,GAAAxkB,KAAA,CAAA,EAAAA,CAAAA,CAAA0T,OAAA1T,CAAAykB,IAAAzkB,KAAA,CAAA,EAAAuH,QAAA,EADA,CAPA,CAFA,EAWAsW,CAAA;AAAAA,SAjJAoI,EA6JAA,CAAAA,CAAApB,QAAAoB,GAAA,UAAApI,CAAA,EAAAiH,CAAA,EAAAA;AACAA,UAAAA,CAAAA,KACAA,CAAAA,GAAA,EADAA,CAAAA;AAEA,cAAA9kB,CAAAA,GAAA,EAAA;AACA,cAAA8kB,CAAAA,CAAAE,QAAA,EAEA,IADAhlB,CAAAA,CAAAwlB,MAAAxlB,GAAA,EAAAA,EACAuiB,CAAAA,CAAA1C,IAAA,EAAA;AACA,gBAAAoF,CAAAA,GAAA,IAAA1C,CAAAA,CAAA1C,IAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,CAAA,CAAA;AACA7f,YAAAA,CAAAA,CAAA0T,OAAA1T,GAAA8kB,CAAAA,CAAAxD,KAAAwD,KAAA5F,MAAA4F,GAAAG,CAAAA,CAAA7T,QAAA6T,EAAAH,GAAAA,CAAAA,CAAAxD,KAAAwD,KAAAna,MAAAma,GAAAG,CAAAA,CAAA1d,QAAA0d,EAAAH,GAAAG,CAAAjlB;AAAAilB,WAFA,MAIAjlB,CAAAA,CAAA0T,OAAA1T,GAAA8kB,CAAAA,CAAAxD,KAAAwD,KAAA5F,MAAA4F,GAAA,GAAAA,GAAA,CAAA9kB;AASA,iBAPA,QAAA6d,CAAAA,CAAA2H,MAAA,IAAA3H,CAAAA,CAAA1d,cAAA0d,CAAA,QAAAA,CAAA,KACA7d,CAAAA,CAAAwlB,MAAAxlB,GAAA6d,CAAAA,CAAA2H,MADA,GAEA,QAAA3H,CAAAA,CAAAnK,OAAA,IAAAmK,CAAAA,CAAA1d,cAAA0d,CAAA,SAAAA,CAAA,KACA,YAAA,OAAAA,CAAAA,CAAAnK,OAAA,GACA1T,CAAAA,CAAA0T,OAAA1T,GAAA8kB,CAAAA,CAAAxD,KAAAwD,KAAA5F,MAAA4F,GAAA5F,MAAAA,CAAArB,CAAAA,CAAAnK,OAAAwL,CAAA4F,GAAAjH,CAAAA,CAAAnK,OADA,GAGA1T,CAAAA,CAAA0T,OAAA1T,GAAA8kB,CAAAA,CAAAxD,KAAAwD,KAAA5F,MAAA4F,GAAAvC,CAAAA,CAAA1C,IAAA0C,CAAAriB,SAAAqiB,CAAAnR,QAAAmR,CAAA9jB,IAAA8jB,CAAA1E,CAAAA,CAAAnK,OAAA6O,CAAAuC,GAAAA,CAAAA,CAAAxD,KAAAwD,KAAAna,MAAAma,GAAA,IAAAvC,CAAAA,CAAAhE,QAAA,CAAAV,CAAAA,CAAAnK,OAAAmK,CAAA2G,GAAA3G,KAAA,CAAA,EAAAA,CAAAA,CAAAnK,OAAAmK,CAAA4G,IAAA5G,KAAA,CAAA,EAAAtW,QAAA,EAAAud,GAAAjH,CAAAA,CAAAnK,OAJA,CAFA,EAOA1T,CAAA;AAAAA,SAhLAimB,EA0LAA,CAAAA,CAAA/lB,SAAA+lB,CAAAd,MAAAc,GAAA,YAAA;AACA,iBAAAtW,KAAAI,WAAAJ,CAAAkV,QAAAlV,CAAAA,IAAAA,EAAAuS,CAAAA,CAAA7E,IAAA6E,CAAAb,aAAA1R,CAAA;AAAA0R,SA3LA4E,EA8LAA,CAAA;AA7NA,OAAA,EArhJA7f,EAqvJAA,CAAA;AAzwJA,KAAA,EAAAoc,EA4wJA1kB,CAAAA,CAAAD,OAAAC,GAAA0kB,CA5wJAA;AA4wJAA,GVrsJA,EUqsJAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,QAAAA,CAAAA;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,SAAAA,KAAAA,CAAAA,GAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,CAAAA,CAAAA,GAAAA,MAAAA,CAAAA,cAAAA,IAAAA;AAAAA,QAAAA,SAAAA,EAAAA;AAAAA,mBAAAA,KAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,QAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA;AAAAA,OAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,IAAAA,CAAAA,IAAAA,CAAAA,EAAAA,CAAAA,CAAAA,cAAAA,CAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,OAAAA,EAAAA,CAAAA,EAAAA,CAAAA,CAAAA;AAAAA,KAAAA,EAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,eAAAA,CAAAA,GAAAA;AAAAA,aAAAA,WAAAA,GAAAA,CAAAA;AAAAA;;AAAAA,MAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,SAAAA,GAAAA,SAAAA,CAAAA,GAAAA,MAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA,CAAAA,SAAAA,EAAAA,IAAAA,CAAAA,EAAAA,CAAAA;AAAAA,KAAAA,CAAAA;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;ACpxJA,QAAA8E,CAAAA,GAAAjpB,CAAAA,CAAA,EAAAA,CAAA;AAAA,QAEAkR,CAAAA,GAAAlR,CAAAA,CAAA,CAAAA,CAFA;AAAA,QAKAkpB,CAAAA,GAAAlpB,CAAAA,CAAA,EAAAA,CALA;AAAA,QAOAmpB,CAAAA,GAAA,UAAA3M,CAAA,EAAAA;AAAA,eAAA2M,CAAA,GAAAA;AAAAA,eAAAA,SAAAA,CAAAA,IAAAA,CAAAA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,SAAAA,CAAAA,IAAAA,IAAAA;AAMA;;AAAA,aANkC1M,CAAAA,CAAA0M,CAAA1M,EAAAD,CAAAC,CAAAA,EAChC0M,CAAAA,CAAAtnB,SAAAsnB,CAAAC,GAAAD,GAAA,UAAIE,CAAJ,EAA6C/mB,CAA7C,EAA6CA;AAC3C,YAAM6I,CAAAA,GAAe+F,CAAAA,CAAA9L,SAAA8L,CAAUnG,qBAAVmG,CAAgC5O,CAAAA,CAAO,CAAPA,CAAAA,CAAUK,IAA1CuO,EAAgD5O,CAAAA,CAAO,CAAPA,CAAAA,CAAUgnB,WAA1DpY,CAArB;AAEA,eAAO,CADgBqY,CAAAA,CAAQF,CAARE,EAA0BjnB,CAAAA,CAAO,CAAPA,CAA1BinB,EAAqCpe,CAArCoe,CAChB,CAAP;AAD4Dpe,OAH9BsR,EAMlC0M,CAAA;AANA,KAAA,CAAkCF,CAAAA,CAAAO,OAAlC,CAPA;;AAeA,aAAgBD,CAAhB,CACIF,CADJ,EAC6Cha,CAD7C,EAC4DlE,CAD5D,EAC4DA;AAC1D,UAAMse,CAAAA,GAAUJ,CAAAA,CAAiBK,sBAAjBL,CAAwCha,CAAxCga,CAAhB;AAAA,UACIM,CAAAA,GAAcxe,CADlB;AAEyB,YAArBse,CAAAA,CAAQG,QAAa,KACvBD,CAAAA,GAAcT,CAAAA,CAAAW,cAAAX,CAAe/d,CAAf+d,CADS;AAGzB,UAAMY,CAAAA,GAAkC;AACtCF,QAAAA,QAAAA,EAAUH,CAAAA,CAAQG,QADoB;AAEtCG,QAAAA,MAAAA,EAAQN,CAAAA,CAAQM,MAFsB;AAGtCC,QAAAA,KAAAA,EAAOP,CAAAA,CAAQO,KAHuB;AAKtC3jB,QAAAA,KAAAA,EAA8B,MAAvBsjB,CAAAA,CAAYjnB,MAAW,GAAIinB,CAAJ,GAAkB,CAAC,CAAD,CALV;AAMtCxf,QAAAA,OAAAA,EAAS+G,CAAAA,CAAA9L,SAAA8L,CAAUjH,cAAViH,CAAyByY,CAAzBzY,CAN6B;AAOtC+Y,QAAAA,aAAAA,EAAe9e;AAPuB,OAAxC;AAYA,aADIke,CAAAA,CAAiBa,uBAAjBb,CAAyCS,CAAzCT,EAA2Dha,CAAAA,CAAM7J,IAAjE6jB,EAAuEI,CAAAA,CAAQU,OAA/Ed,EAAwFha,CAAAA,CAAMD,MAA9Fia,EACkBe,MAAtB;AA3BW5qB;;AAAAA,IAAAA,CAAAA,CAAA2pB,YAAA3pB,GAAA2pB,CAAA3pB,EAQbA,CAAAA,CAAA+pB,OAAA/pB,GAAA+pB,CARa/pB;AAQb+pB,GXgEA,EWhEAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,QAAAA,IAAAA,UAAAA,CAAAA,EAAAA;AAAAA,UAAAA,CAAAA,GAAAA,cAAAA,OAAAA,MAAAA,IAAAA,CAAAA,CAAAA,MAAAA,CAAAA,QAAAA,CAAAA;AAAAA,UAAAA,CAAAA,GAAAA,CAAAA;AAAAA,aAAAA,CAAAA,GAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,GAAAA;AAAAA,QAAAA,IAAAA,EAAAA,YAAAA;AAAAA,iBAAAA,CAAAA,IAAAA,CAAAA,IAAAA,CAAAA,CAAAA,MAAAA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA;AAAAA,YAAAA,KAAAA,EAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA;AAAAA,YAAAA,IAAAA,EAAAA,CAAAA;AAAAA,WAAAA;AAAAA;AAAAA,OAAAA;AAAAA,KAAAA;;ACiCA,aAASc,CAAT,CAAuBhV,CAAvB,EAAwCiV,CAAxC,EAAwCA;AACtC,UAAIA,CAAAA,CAASC,QAATD,CAAkB,GAAlBA,CAAJ,EAA4B;AAE1B,YAAME,CAAAA,GAAale,MAAAA,CAAOia,QAAPja,CAAgBge,CAAAA,CAAS5H,SAAT4H,CAAmB,CAAnBA,EAAsBA,CAAAA,CAAS5nB,MAAT4nB,GAAkB,CAAxCA,CAAhBhe,EAA4D,EAA5DA,CAAnB;AACA,eAAA,CAAQme,KAAAA,CAAMD,CAANC,CAAR,IAA6BD,CAAAA,IAAcnV,CAA3C;AACK;;AAAA,UAAmC,MAA/BiV,CAAAA,CAASrc,KAATqc,CAAe,GAAfA,EAAoB5nB,MAAxB,EAAsC;AAE3C,YAAMgoB,CAAAA,GAAOJ,CAAAA,CAASrc,KAATqc,CAAe,GAAfA,CAAb;AAAA,YAEMK,CAAAA,IADAH,CAAAA,GAAale,MAAAA,CAAOia,QAAPja,CAAgBoe,CAAAA,CAAK,CAALA,CAAhBpe,EAAyB,EAAzBA,CAAbke,EACWle,MAAAA,CAAOia,QAAPja,CAAgBoe,CAAAA,CAAK,CAALA,CAAhBpe,EAAyB,EAAzBA,CAAXqe,CAFN;AAGA,eAAA,CAAQF,KAAAA,CAAMD,CAANC,CAAR,IAAcD,CAAgBC,KAAAA,CAAME,CAANF,CAA9B,IAAiDD,CAAAA,IAAcnV,CAA/D,IAA0EA,CAAAA,IAAWsV,CAArF;AAGA;;AAAA,aAAOre,MAAAA,CAAOia,QAAPja,CAAgBge,CAAhBhe,EAA0B,EAA1BA,MAAkC+I,CAAzC;AAAyCA;;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA,GArC7C7V,CAAAA,CAAAorB,eAAAprB,GAAA,UACIye,CADJ,EACsB4M,CADtB,EACoDC,CADpD,EACoDA;AAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA;;AAAAA,UAAAA;AAClD,aAAmB,IAAAC,CAAAA,GAAA7e,CAAAA,CAAA4e,CAAA5e,CAAA,EAAK8e,CAAAA,GAAAD,CAAAA,CAAA3e,IAAA2e,EAAxB,EAAwB3e,CAAA4e,CAAAA,CAAA3e,IAAxB,EAAwB2e,CAAAA,GAAAD,CAAAA,CAAA3e,IAAA2e,EAAxB,EAA0B;AAArB,cAAME,CAAAA,GAAID,CAAAA,CAAA9pB,KAAV;AAAA,cACGgmB,CAAAA,GAAS+D,CAAAA,CAAK,CAALA,CADZ;AAAA,cAEG9D,CAAAA,GAAS8D,CAAAA,CAAK,CAALA,CAFZ;AAAA,cAGGC,CAAAA,GAAkBD,CAAAA,CAAK,CAALA,CAHrB;AAAA,cAIGE,CAAAA,GAAgBF,CAAAA,CAAK,CAALA,CAJnB;AAMH,cAAIhN,CAAAA,CAAKiJ,MAALjJ,KAAgBiJ,CAApB,EAAoBA,IAAAA;AAClB,iBAAoB,IAAAkE,CAAAA,IAAAC,CAAAA,GAAAA,KAAA,CAAAA,EAAAnf,CAAAA,CAAA2e,CAAA3e,CAAAkf,CAAA,EAAME,CAAAA,GAAAF,CAAAA,CAAAhf,IAAAgf,EAA1B,EAA0Bhf,CAAAkf,CAAAA,CAAAjf,IAA1B,EAA0Bif,CAAAA,GAAAF,CAAAA,CAAAhf,IAAAgf,EAA1B,EAA4B;AAAvB,kBAAMG,CAAAA,GAAKD,CAAAA,CAAApqB,KAAX;AAEH,kBAAA,CAAIqqB,CAAAA,CAAMpE,MAANoE,KAAiBpE,CAAjBoE,IAA6C,cAAjBA,CAAAA,CAAMpE,MAAW,IAAwB,OAAXA,CAA9D,KACMkD,CAAAA,CAAckB,CAAAA,CAAMlW,OAApBgV,EAA6Ba,CAA7Bb,CADN,EAEI,OAAOc,CAAAA,CAAclN,CAAdkN,CAAP;AAAqBlN;AAAAA,WALTiJ,CAKSjJ,OAAAA,CAAAA,EAAAA;AAAAA,YAAAA,CAAAA,GAAAA;AAAAA,cAAAA,KAAAA,EAAAA;AAAAA,aAAAA;AAAAA,WALTiJ,SAKSjJ;AAAAA,gBAAAA;AAAAA,cAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,IAAAA,KAAAA,CAAAA,GAAAA,CAAAA,CAAAA,MAAAA,KAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA;AAAAA,aAAAA,SAAAA;AAAAA,kBAAAA,CAAAA,EAAAA,MAAAA,CAAAA,CAAAA,KAAAA;AAAAA;AAAAA;AAAAA;AAAAA,OAZmB6M,CAYnB7M,OAAAA,CAAAA,EAAAA;AAAAA,QAAAA,CAAAA,GAAAA;AAAAA,UAAAA,KAAAA,EAAAA;AAAAA,SAAAA;AAAAA,OAZmB6M,SAYnB7M;AAAAA,YAAAA;AAAAA,UAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,IAAAA,KAAAA,CAAAA,GAAAA,CAAAA,CAAAA,MAAAA,KAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA;AAAAA,SAAAA,SAAAA;AAAAA,cAAAA,CAAAA,EAAAA,MAAAA,CAAAA,CAAAA,KAAAA;AAAAA;AAO/B;;AAAA,YAAM,IAAIjS,SAAJ,CAAc,8BAA4BiS,CAAAA,CAAKiJ,MAAjC,GAAuC,iBAAvC,GAChB2D,CAAAA,CAAO9hB,GAAP8hB,CAAW,UAAAplB,CAAA,EAAAA;AAAO,eAAA,CAAGA,CAAAA,CAAI0hB,MAAJ1hB,IAAc,SAAjB,IAA0B,IAA1B,GAA+BA,CAAAA,CAAI4P,OAAnC;AAAmCA,OAArDwV,EAAgEW,IAAhEX,CAAqE,IAArEA,CADE,CAAN;AACyE,KAgB9BxV;AAhB8B,GZkC3E,EYlC2E,UAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA;AAAA;;AAAA,KChD3E,UAAA0J,CAAA,EAAAA;;;;;;;AAUA,UAAAa,CAAAA,GAAa5f,CAAAA,CAAQ,EAARA,CAAb;AAAA,UACAyrB,CAAAA,GAAczrB,CAAAA,CAAQ,EAARA,CADd;AAAA,UAEAyR,CAAAA,GAAczR,CAAAA,CAAQ,EAARA,CAFd;;AAqDA,eAAA0rB,CAAA,GAAAA;AACA,eAAAhZ,CAAAA,CAAAiZ,mBAAAjZ,GACA,UADAA,GAEA,UAFA;AAKA;;AAAA,eAAAkZ,CAAA,CAAAC,CAAA,EAAAnpB,CAAA,EAAAA;AACA,YAAAgpB,CAAAA,KAAAhpB,CAAA,EACA,MAAA,IAAA8O,UAAA,CAAA,4BAAA,CAAA;AAcA,eAZAkB,CAAAA,CAAAiZ,mBAAAjZ,GAAAiZ,CAEAE,CAAAA,GAAA,IAAA7X,UAAA,CAAAtR,CAAA,CAFAipB,EAGAG,SAHAH,GAGAjZ,CAAAA,CAAA7Q,SAHA6Q,IAMA,SAAAmZ,CAAA,KACAA,CAAAA,GAAA,IAAAnZ,CAAA,CAAAhQ,CAAA,CADA,GAGAmpB,CAAAA,CAAAnpB,MAAAmpB,GAAAnpB,CATAgQ,GAYAmZ,CAAA;AAaA;;AAAA,eAAAnZ,CAAA,CAAAqZ,CAAA,EAAAC,CAAA,EAAAtpB,CAAA,EAAAA;AACA,YAAA,EAAAgQ,CAAAA,CAAAiZ,mBAAAjZ,IAAApB,gBAAAoB,CAAA,CAAA,EACA,OAAA,IAAAA,CAAA,CAAAqZ,CAAA,EAAAC,CAAA,EAAAtpB,CAAA,CAAA;;AAIA,YAAA,YAAA,OAAAqpB,CAAA,EAAA;AACA,cAAA,YAAA,OAAAC,CAAA,EACA,MAAA,IAAAjlB,KAAA,CACA,mEADA,CAAA;AAIA,iBAAAwc,CAAAA,CAAAjS,IAAAiS,EAAAwI,CAAAxI,CAAA;AAEA;;AAAA,eAAA5Q,CAAAA,CAAArB,IAAAqB,EAAAoZ,CAAApZ,EAAAqZ,CAAArZ,EAAAjQ,CAAAiQ,CAAA;AAWA;;AAAA,eAAAA,CAAA,CAAAkZ,CAAA,EAAA3qB,CAAA,EAAA8qB,CAAA,EAAAtpB,CAAA,EAAAA;AACA,YAAA,YAAA,OAAAxB,CAAA,EACA,MAAA,IAAA8K,SAAA,CAAA,uCAAA,CAAA;AAGA,eAAA,eAAA,OAAA6F,WAAA,IAAA3Q,CAAAA,YAAA2Q,WAAA,GA6HA,UAAAga,CAAA,EAAArY,CAAA,EAAAX,CAAA,EAAAnQ,CAAA,EAAAA;AAGA,cAFA8Q,CAAAA,CAAAV,UAAAU,EAEAX,CAAAA,GAAA,CAAAA,IAAAW,CAAAA,CAAAV,UAAAU,GAAAX,CAAA,EACA,MAAA,IAAArB,UAAA,CAAA,2BAAA,CAAA;AAGA,cAAAgC,CAAAA,CAAAV,UAAAU,GAAAX,CAAAA,IAAAnQ,CAAAA,IAAA,CAAAmQ,CAAA,EACA,MAAA,IAAArB,UAAA,CAAA,2BAAA,CAAA;AAIAgC,UAAAA,CAAAA,GAAAA,KADAhQ,CACAgQ,KADAX,CACAW,IADAX,KAAArP,CAAAqP,KAAAnQ,CACA8Q,GAAA,IAAAQ,UAAA,CAAAR,CAAA,CAAAA,GAAAA,KACGhQ,CADHgQ,KACG9Q,CADH8Q,GAEA,IAAAQ,UAAA,CAAAR,CAAA,EAAAX,CAAA,CAFAW,GAIA,IAAAQ,UAAA,CAAAR,CAAA,EAAAX,CAAA,EAAAnQ,CAAA,CAJA8Q;AAOAd,UAAAA,CAAAA,CAAAiZ,mBAAAjZ,GAAAiZ,CAEAE,CAAAA,GAAArY,CAFAmY,EAGAG,SAHAH,GAGAjZ,CAAAA,CAAA7Q,SAHA6Q,GAMAmZ,CAAAA,GAAAI,CAAAA,CAAAJ,CAAAI,EAAAzY,CAAAyY,CANAvZ;AAQA,iBAAAmZ,CAAA;AAvJAK,SA4HA,CA5HAL,CA4HA,EA5HA3qB,CA4HA,EA5HA8qB,CA4HA,EA5HAtpB,CA4HA,CA7HA,GAIA,YAAA,OAAAxB,CAAA,GAwFA,UAAA2qB,CAAA,EAAAzG,CAAA,EAAA9B,CAAA,EAAAA;AACA,sBAAA,OAAAA,CAAA,IAAA,OAAAA,CAAA,KACAA,CAAAA,GAAA,MADA;AAIA,cAAA,CAAA5Q,CAAAA,CAAAyZ,UAAAzZ,CAAA4Q,CAAA5Q,CAAA,EACA,MAAA,IAAA1G,SAAA,CAAA,4CAAA,CAAA;AAGA,cAAAtJ,CAAAA,GAAA,IAAAoQ,CAAAA,CAAAsS,CAAAtS,EAAAwQ,CAAAxQ,CAAA;AAAA,cAGAsZ,CAAAA,GAAAA,CAFAP,CAAAA,GAAAD,CAAAA,CAAAC,CAAAD,EAAAlpB,CAAAkpB,CAEAQ,EAAAC,KAAAD,CAAAhH,CAAAgH,EAAA9I,CAAA8I,CAHA;AAKAA,UAAAA,CAAAA,KAAA1pB,CAAA0pB,KAIAP,CAAAA,GAAAA,CAAAA,CAAAxhB,KAAAwhB,CAAA,CAAAA,EAAAO,CAAAP,CAJAO;AAOA,iBAAAP,CAAA;AA5GAS,SAuFA,CAvFAT,CAuFA,EAvFA3qB,CAuFA,EAvFA8qB,CAuFA,CAxFA,GAuJA,UAAAH,CAAA,EAAA5K,CAAA,EAAAA;AACA,cAAAvO,CAAAA,CAAA6Z,QAAA7Z,CAAAuO,CAAAvO,CAAA,EAAA;AACA,gBAAAmT,CAAAA,GAAA,IAAA2G,CAAAA,CAAAvL,CAAAA,CAAAve,MAAA8pB,CAAA;AAGA,mBAAA,MAAA,CAFAX,CAAAA,GAAAD,CAAAA,CAAAC,CAAAD,EAAA/F,CAAA+F,CAEA,EAAAlpB,MAAA,GACAmpB,CADA,IAIA5K,CAAAA,CAAAwL,IAAAxL,CAAA4K,CAAA5K,EAAA,CAAAA,EAAA,CAAAA,EAAA4E,CAAA5E,GACA4K,CALA,CAAA;AAQA;;AAAA,cAAA5K,CAAA,EAAA;AACA,gBAAA,eAAA,OAAApP,WAAA,IACAoP,CAAAA,CAAArO,MAAAqO,YAAApP,WADA,IACA,YAAAoP,CADA,EAEA,OAAA,YAAA,OAAAA,CAAAA,CAAAve,MAAA,IAAAA,CA+8CAgqB,CAAAA,GA/8CAzL,CAAAA,CAAAve,MAAAA,KAg9CAgqB,CAh9CA,GACAd,CAAAA,CAAAC,CAAAD,EAAA,CAAAA,CADA,GAGAK,CAAAA,CAAAJ,CAAAI,EAAAhL,CAAAgL,CAHA;AAMA,gBAAA,aAAAhL,CAAAA,CAAAzb,IAAA,IAAAiM,CAAAA,CAAAwP,CAAAA,CAAA9R,IAAAsC,CAAA,EACA,OAAAwa,CAAAA,CAAAJ,CAAAI,EAAAhL,CAAAA,CAAA9R,IAAA8c,CAAA;AAw8CA;;AAAA,cAAAS,CAAA;AAp8CA,gBAAA,IAAA1gB,SAAA,CAAA,oFAAA,CAAA;AA9KAqa,SAmJA,CAnJAwF,CAmJA,EAnJA3qB,CAmJA,CA3JA;AAoCA;;AAAA,eAAAyrB,CAAA,CAAArnB,CAAA,EAAAA;AACA,YAAA,YAAA,OAAAA,CAAA,EACA,MAAA,IAAA0G,SAAA,CAAA,kCAAA,CAAA;AACG,YAAA1G,CAAAA,GAAA,CAAA,EACH,MAAA,IAAAkM,UAAA,CAAA,sCAAA,CAAA;AA4BA;;AAAA,eAAA+R,CAAA,CAAAsI,CAAA,EAAAvmB,CAAA,EAAAA;AAGA,YAFAqnB,CAAAA,CAAArnB,CAAAqnB,CAAAA,EACAd,CAAAA,GAAAD,CAAAA,CAAAC,CAAAD,EAAAtmB,CAAAA,GAAA,CAAAA,GAAA,CAAAA,GAAA,IAAAknB,CAAAA,CAAAlnB,CAAAknB,CAAAZ,CADAe,EACArnB,CACAoN,CAAAA,CAAAiZ,mBAAA,EACA,KAAA,IAAA9rB,CAAAA,GAAA,CAAA,EAAmBA,CAAAA,GAAAyF,CAAnB,EAAmBA,EAAUzF,CAA7B,EACAgsB,CAAAA,CAAAhsB,CAAAgsB,CAAAA,GAAA,CAAAA;AAGA,eAAAA,CAAA;AAwCA;;AAAA,eAAAI,CAAA,CAAAJ,CAAA,EAAArY,CAAA,EAAAA;AACA,YAAA9Q,CAAAA,GAAA8Q,CAAAA,CAAA9Q,MAAA8Q,GAAA,CAAAA,GAAA,CAAAA,GAAA,IAAAgZ,CAAAA,CAAAhZ,CAAAA,CAAA9Q,MAAA8pB,CAAA;AACAX,QAAAA,CAAAA,GAAAD,CAAAA,CAAAC,CAAAD,EAAAlpB,CAAAkpB,CAAAC;;AACA,aAAA,IAAAhsB,CAAAA,GAAA,CAAA,EAAiBA,CAAAA,GAAA6C,CAAjB,EAA6B7C,CAAAA,IAAA,CAA7B,EACAgsB,CAAAA,CAAAhsB,CAAAgsB,CAAAA,GAAA,MAAArY,CAAAA,CAAA3T,CAAA2T,CAAAqY;;AAEA,eAAAA,CAAA;AA+DA;;AAAA,eAAAW,CAAA,CAAA9pB,CAAA,EAAAA;AAGA,YAAAA,CAAAA,IAAAgpB,CAAAA,EAAA,EACA,MAAA,IAAAla,UAAA,CAAA,4DACAka,CAAAA,GAAA3Y,QAAA2Y,CAAA,EAAAA,CADA,GACA,QADA,CAAA;AAGA,eAAA,IAAAhpB,CAAA;AAsFA;;AAAA,eAAAoQ,CAAA,CAAAsS,CAAA,EAAA9B,CAAA,EAAAA;AACA,YAAA5Q,CAAAA,CAAA6Z,QAAA7Z,CAAA0S,CAAA1S,CAAA,EACA,OAAA0S,CAAAA,CAAA1iB,MAAA;AAEA,YAAA,eAAA,OAAAmP,WAAA,IAAA,cAAA,OAAAA,WAAAA,CAAA+a,MAAA,KACA/a,WAAAA,CAAA+a,MAAA/a,CAAAuT,CAAAvT,KAAAuT,CAAAA,YAAAvT,WADA,CAAA,EAEA,OAAAuT,CAAAA,CAAAtS,UAAA;AAEA,oBAAA,OAAAsS,CAAA,KACAA,CAAAA,GAAA,KAAAA,CADA;AAIA,YAAAS,CAAAA,GAAAT,CAAAA,CAAA1iB,MAAA;AACA,YAAA,MAAAmjB,CAAA,EAAA,OAAA,CAAA;;AAIA,aADA,IAAAgH,CAAAA,GAAAA,CAAA,CACA,IACA,QAAAvJ,CAAA;AACA,eAAA,OAAA;AACA,eAAA,QAAA;AACA,eAAA,QAAA;AACA,mBAAAuC,CAAA;;AACA,eAAA,MAAA;AACA,eAAA,OAAA;AACA,eAAA,KAAAriB,CAAA;AACA,mBAAAspB,CAAAA,CAAA1H,CAAA0H,CAAAA,CAAApqB,MAAA;;AACA,eAAA,MAAA;AACA,eAAA,OAAA;AACA,eAAA,SAAA;AACA,eAAA,UAAA;AACA,mBAAA,IAAAmjB,CAAA;;AACA,eAAA,KAAA;AACA,mBAAAA,CAAAA,KAAA,CAAA;;AACA,eAAA,QAAA;AACA,mBAAAkH,CAAAA,CAAA3H,CAAA2H,CAAAA,CAAArqB,MAAA;;AACA;AACA,gBAAAmqB,CAAA,EAAA,OAAAC,CAAAA,CAAA1H,CAAA0H,CAAAA,CAAApqB,MAAA;AACA4gB,YAAAA,CAAAA,GAAAA,CAAA,KAAAA,CAAAA,EAAAb,WAAAa,EAAAA,EACAuJ,CAAAA,GAAAA,CAAA,CADAvJ;AApBA;AAqGA;;AAAA,eAAA0J,CAAA,CAAAzpB,CAAA,EAAA7B,CAAA,EAAArB,CAAA,EAAAA;AACA,YAAAR,CAAAA,GAAA0D,CAAAA,CAAA7B,CAAA6B,CAAA;AACAA,QAAAA,CAAAA,CAAA7B,CAAA6B,CAAAA,GAAAA,CAAAA,CAAAlD,CAAAkD,CAAAA,EACAA,CAAAA,CAAAlD,CAAAkD,CAAAA,GAAA1D,CADA0D;AAoIA;;AAAA,eAAA0pB,CAAA,CAAAra,CAAA,EAAA8Z,CAAA,EAAA7Z,CAAA,EAAAyQ,CAAA,EAAA4J,CAAA,EAAAA;AAEA,YAAA,MAAAta,CAAAA,CAAAlQ,MAAA,EAAA,OAAA,CAAA,CAAA;;AAmBA,YAhBA,YAAA,OAAAmQ,CAAA,IACAyQ,CAAAA,GAAAzQ,CAAAyQ,EACAzQ,CAAAA,GAAA,CAFA,IAGGA,CAAAA,GAAA,UAAAA,GACHA,CAAAA,GAAA,UADGA,GAEAA,CAAAA,GAAAA,CAAA,UAAAA,KACHA,CAAAA,GAAAA,CAAA,UADGA,CALH,EAQAA,CAAAA,GAAAA,CAAAA,CARA,EASA4X,KAAAA,CAAA5X,CAAA4X,CAAAA,KAEA5X,CAAAA,GAAAqa,CAAAA,GAAA,CAAAA,GAAAta,CAAAA,CAAAlQ,MAAAkQ,GAAA,CAFA6X,CATA,EAeA5X,CAAAA,GAAA,CAAAA,KAAAA,CAAAA,GAAAD,CAAAA,CAAAlQ,MAAAkQ,GAAAC,CAAAA,CAfA,EAgBAA,CAAAA,IAAAD,CAAAA,CAAAlQ,MAAA,EAAA;AACA,cAAAwqB,CAAA,EAAA,OAAA,CAAA,CAAA;AACAra,UAAAA,CAAAA,GAAAD,CAAAA,CAAAlQ,MAAAkQ,GAAA,CAAAC;AAAA,SAFA,MAGG,IAAAA,CAAAA,GAAA,CAAA,EAAA;AACH,cAAA,CAAAqa,CAAA,EACA,OAAA,CAAA,CAAA;AADAra,UAAAA,CAAAA,GAAA,CAAAA;AAUA;;AAAA,YALA,YAAA,OAAA6Z,CAAA,KACAA,CAAAA,GAAAha,CAAAA,CAAAC,IAAAD,CAAAga,CAAAha,EAAA4Q,CAAA5Q,CADA,GAKAA,CAAAA,CAAA6Z,QAAA7Z,CAAAga,CAAAha,CAAA,EAEA,OAAA,MAAAga,CAAAA,CAAAhqB,MAAA,GAAAA,CACA,CADA,GAGAyqB,CAAAA,CAAAva,CAAAua,EAAAT,CAAAS,EAAAta,CAAAsa,EAAA7J,CAAA6J,EAAAD,CAAAC,CAHA;AAIG,YAAA,YAAA,OAAAT,CAAA,EAEH,OADAA,CAAAA,IAAA,GAAAA,EACAha,CAAAA,CAAAiZ,mBAAAjZ,IACA,cAAA,OAAAsB,UAAAA,CAAAnS,SAAAmS,CAAA7G,OADAuF,GAEAwa,CAAAA,GACAlZ,UAAAA,CAAAnS,SAAAmS,CAAA7G,OAAA6G,CAAA5T,IAAA4T,CAAApB,CAAAoB,EAAA0Y,CAAA1Y,EAAAnB,CAAAmB,CADAkZ,GAGAlZ,UAAAA,CAAAnS,SAAAmS,CAAAoZ,WAAApZ,CAAA5T,IAAA4T,CAAApB,CAAAoB,EAAA0Y,CAAA1Y,EAAAnB,CAAAmB,CALAtB,GAQAya,CAAAA,CAAAva,CAAAua,EAAA,CAAAT,CAAA,CAAAS,EAAAta,CAAAsa,EAAA7J,CAAA6J,EAAAD,CAAAC,CARA;AAWA,cAAA,IAAAnhB,SAAA,CAAA,sCAAA,CAAA;AAGA;;AAAA,eAAAmhB,CAAA,CAAAE,CAAA,EAAAX,CAAA,EAAA7Z,CAAA,EAAAyQ,CAAA,EAAA4J,CAAA,EAAAA;AACA,YA0BArtB,CA1BA;AAAA,YAAAytB,CAAAA,GAAA,CAAA;AAAA,YACAC,CAAAA,GAAAF,CAAAA,CAAA3qB,MADA;AAAA,YAEA8qB,CAAAA,GAAAd,CAAAA,CAAAhqB,MAFA;;AAIA,YAAA,KAAAc,CAAA,KAAA8f,CAAA,KAEA,YADAA,CAAAA,GAAAzC,MAAAA,CAAAyC,CAAAzC,CAAAA,CAAA4B,WAAA5B,EACA,KAAA,YAAAyC,CAAA,IACA,cAAAA,CADA,IACA,eAAAA,CAHA,CAAA,EAGA;AACA,cAAA+J,CAAAA,CAAA3qB,MAAA2qB,GAAA,CAAAA,IAAAX,CAAAA,CAAAhqB,MAAAgqB,GAAA,CAAA,EACA,OAAA,CAAA,CAAA;AAEAY,UAAAA,CAAAA,GAAA,CAAAA,EACAC,CAAAA,IAAA,CADAD,EAEAE,CAAAA,IAAA,CAFAF,EAGAza,CAAAA,IAAA,CAHAya;AAOA;;AAAA,iBAAAG,CAAA,CAAA7b,CAAA,EAAA/R,CAAA,EAAAA;AACA,iBAAA,MAAAytB,CAAA,GACA1b,CAAAA,CAAA/R,CAAA+R,CADA,GAGAA,CAAAA,CAAA8b,YAAA9b,CAAA/R,CAAAA,GAAAytB,CAAA1b,CAHA;AAQA;;AAAA,YAAAsb,CAAA,EAAA;AACA,cAAAS,CAAAA,GAAAA,CAAA,CAAA;;AACA,eAAA9tB,CAAAA,GAAAgT,CAAA,EAAwBhT,CAAAA,GAAA0tB,CAAxB,EAAuC1tB,CAAAA,EAAvC,EACA,IAAA4tB,CAAAA,CAAAJ,CAAAI,EAAA5tB,CAAA4tB,CAAAA,KAAAA,CAAAA,CAAAf,CAAAe,EAAAf,CAAA,CAAAA,KAAAiB,CAAAjB,GAAA,CAAAA,GAAA7sB,CAAAA,GAAA8tB,CAAAF,CAAA,EAAAE;AAEA,gBAAA,CADA,CACA,KADAA,CACA,KADAA,CAAAA,GAAA9tB,CACA,GAAAA,CAAAA,GAAA8tB,CAAA9tB,GAAA,CAAAA,KAAA2tB,CAAA,EAAA,OAAAG,CAAAA,GAAAL,CAAA;AAAAA,WAFA,MAEAA,CAEA,CAFAA,KAEAK,CAFAL,KAEAztB,CAAAA,IAAAA,CAAAA,GAAA8tB,CAFAL,GAGAK,CAAAA,GAAAA,CAAA,CAHAL;AAGA,SARA,MAaA,KADAza,CAAAA,GAAA2a,CAAA3a,GAAA0a,CAAA1a,KAAAA,CAAAA,GAAA0a,CAAAA,GAAAC,CAAA3a,GACAhT,CAAAA,GAAAgT,CAAA,EAAwBhT,CAAAA,IAAA,CAAxB,EAAgCA,CAAAA,EAAhC,EAAgC;AAEhC,eADA,IAAA+tB,CAAAA,GAAAA,CAAA,CAAA,EACA1nB,CAAAA,GAAA,CAAA,EAAqBA,CAAAA,GAAAsnB,CAArB,EAAoCtnB,CAAAA,EAApC,EACA,IAAAunB,CAAAA,CAAAJ,CAAAI,EAAA5tB,CAAAA,GAAAqG,CAAAunB,CAAAA,KAAAA,CAAAA,CAAAf,CAAAe,EAAAvnB,CAAAunB,CAAA,EAAA;AACAG,YAAAA,CAAAA,GAAAA,CAAA,CAAAA;AACA;AAGA;;AAAA,cAAAA,CAAA,EAAA,OAAA/tB,CAAA;AAIA;;AAAA,eAAA,CAAA,CAAA;AAeA;;AAAA,eAAAguB,CAAA,CAAAjc,CAAA,EAAAwT,CAAA,EAAApe,CAAA,EAAAtE,CAAA,EAAAA;AACAsE,QAAAA,CAAAA,GAAAsF,MAAAA,CAAAtF,CAAAsF,CAAAA,IAAA,CAAAtF;AACA,YAAA8mB,CAAAA,GAAAlc,CAAAA,CAAAlP,MAAAkP,GAAA5K,CAAA;AACAtE,QAAAA,CAAAA,GAAAA,CAGAA,CAAAA,GAAA4J,MAAAA,CAAA5J,CAAA4J,CAHA5J,IAIAorB,CAJAprB,KAKAA,CAAAA,GAAAorB,CALAprB,CAAAA,GACAA,CAAAA,GAAAorB,CADAprB;AAUA,YAAAqrB,CAAAA,GAAA3I,CAAAA,CAAA1iB,MAAA;AACA,YAAAqrB,CAAAA,GAAA,CAAAA,IAAA,CAAA,EAAA,MAAA,IAAA/hB,SAAA,CAAA,oBAAA,CAAA;AAEAtJ,QAAAA,CAAAA,GAAAqrB,CAAAA,GAAA,CAAArrB,KACAA,CAAAA,GAAAqrB,CAAAA,GAAA,CADArrB;;AAGA,aAAA,IAAA7C,CAAAA,GAAA,CAAA,EAAiBA,CAAAA,GAAA6C,CAAjB,EAAiBA,EAAY7C,CAA7B,EAA6B;AAC7B,cAAAmuB,CAAAA,GAAAzH,QAAAA,CAAAnB,CAAAA,CAAA6I,MAAA7I,CAAA,IAAAvlB,CAAAulB,EAAA,CAAAA,CAAAmB,EAAA,EAAAA,CAAA;AACA,cAAAkE,KAAAA,CAAAuD,CAAAvD,CAAA,EAAA,OAAA5qB,CAAA;AACA+R,UAAAA,CAAAA,CAAA5K,CAAAA,GAAAnH,CAAA+R,CAAAA,GAAAoc,CAAApc;AAEA;;AAAA,eAAA/R,CAAA;AAGA;;AAAA,eAAAshB,CAAA,CAAAvP,CAAA,EAAAwT,CAAA,EAAApe,CAAA,EAAAtE,CAAA,EAAAA;AACA,eAAAwrB,CAAAA,CAAApB,CAAAA,CAAA1H,CAAA0H,EAAAlb,CAAAA,CAAAlP,MAAAkP,GAAA5K,CAAA8lB,CAAAoB,EAAAtc,CAAAsc,EAAAlnB,CAAAknB,EAAAxrB,CAAAwrB,CAAA;AAGA;;AAAA,eAAAC,CAAA,CAAAvc,CAAA,EAAAwT,CAAA,EAAApe,CAAA,EAAAtE,CAAA,EAAAA;AACA,eAAAwrB,CAAAA,CAq6BA,UAAAzb,CAAA,EAAAA;AAEA,eADA,IAAA2b,CAAAA,GAAA,EAAA,EACAvuB,CAAAA,GAAA,CAAA,EAAiBA,CAAAA,GAAA4S,CAAAA,CAAA/P,MAAjB,EAAiBA,EAAgB7C,CAAjC,EAEAuuB,CAAAA,CAAAhhB,IAAAghB,CAAA,MAAA3b,CAAAA,CAAA4b,UAAA5b,CAAA5S,CAAA4S,CAAA2b;;AAEA,iBAAAA,CAAA;AA36BAE,SAq6BA,CAr6BAlJ,CAq6BA,CAr6BA8I,EAAAtc,CAAAsc,EAAAlnB,CAAAknB,EAAAxrB,CAAAwrB,CAAA;AAGA;;AAAA,eAAAK,CAAA,CAAA3c,CAAA,EAAAwT,CAAA,EAAApe,CAAA,EAAAtE,CAAA,EAAAA;AACA,eAAAyrB,CAAAA,CAAAvc,CAAAuc,EAAA/I,CAAA+I,EAAAnnB,CAAAmnB,EAAAzrB,CAAAyrB,CAAA;AAGA;;AAAA,eAAAK,CAAA,CAAA5c,CAAA,EAAAwT,CAAA,EAAApe,CAAA,EAAAtE,CAAA,EAAAA;AACA,eAAAwrB,CAAAA,CAAAnB,CAAAA,CAAA3H,CAAA2H,CAAAmB,EAAAtc,CAAAsc,EAAAlnB,CAAAknB,EAAAxrB,CAAAwrB,CAAA;AAGA;;AAAA,eAAAO,CAAA,CAAA7c,CAAA,EAAAwT,CAAA,EAAApe,CAAA,EAAAtE,CAAA,EAAAA;AACA,eAAAwrB,CAAAA,CAk6BA,UAAAzb,CAAA,EAAAic,CAAA,EAAAA;AAGA,eAFA,IAAApuB,CAAA,EAAAgiB,CAAA,EAAAD,CAAA,EACA+L,CAAAA,GAAA,EADA,EAEAvuB,CAAAA,GAAA,CAAA,EAAiBA,CAAAA,GAAA4S,CAAAA,CAAA/P,MAAA7C,IAAA6C,EAAAA,CACjBgsB,CAAAA,IAAA,CADiBhsB,IACjB,CADiBA,CAAjB,EACA,EADiC7C,CAAjC,EAGAS,CAAAA,GAAAmS,CAAAA,CAAA4b,UAAA5b,CAAA5S,CAAA4S,CAAAnS,EACAgiB,CAAAA,GAAAhiB,CAAAA,IAAA,CADAA,EAEA+hB,CAAAA,GAAA/hB,CAAAA,GAAA,GAFAA,EAGA8tB,CAAAA,CAAAhhB,IAAAghB,CAAA/L,CAAA+L,CAHA9tB,EAIA8tB,CAAAA,CAAAhhB,IAAAghB,CAAA9L,CAAA8L,CAJA9tB;;AAOA,iBAAA8tB,CAAA;AA/6BAO,SAk6BA,CAl6BAvJ,CAk6BA,EAl6BAxT,CAAAA,CAAAlP,MAAAkP,GAAA5K,CAk6BA,CAl6BAknB,EAAAtc,CAAAsc,EAAAlnB,CAAAknB,EAAAxrB,CAAAwrB,CAAA;AAkFA;;AAAA,eAAAU,CAAA,CAAAhd,CAAA,EAAA7H,CAAA,EAAAC,CAAA,EAAAA;AACA,eAAA,MAAAD,CAAA,IAAAC,CAAAA,KAAA4H,CAAAA,CAAAlP,MAAA,GACAkd,CAAAA,CAAAiP,aAAAjP,CAAAhO,CAAAgO,CADA,GAGAA,CAAAA,CAAAiP,aAAAjP,CAAAhO,CAAAA,CAAAvH,KAAAuH,CAAA7H,CAAA6H,EAAA5H,CAAA4H,CAAAgO,CAHA;AAOA;;AAAA,eAAAkP,CAAA,CAAAld,CAAA,EAAA7H,CAAA,EAAAC,CAAA,EAAAA;AACAA,QAAAA,CAAAA,GAAA/F,IAAAA,CAAA8qB,GAAA9qB,CAAA2N,CAAAA,CAAAlP,MAAAuB,EAAA+F,CAAA/F,CAAA+F;;AAIA,aAHA,IAAAwF,CAAAA,GAAA,EAAA,EAEA3P,CAAAA,GAAAkK,CACA,EAAAlK,CAAAA,GAAAmK,CAAA,GAAA;AACA,cAQAglB,CARA;AAAA,cAQAC,CARA;AAAA,cAQAC,CARA;AAAA,cAQAC,CARA;AAAA,cAAAC,CAAAA,GAAAxd,CAAAA,CAAA/R,CAAA+R,CAAA;AAAA,cACAyd,CAAAA,GAAA,IADA;AAAA,cAEAC,CAAAA,GAAAF,CAAAA,GAAA,GAAAA,GAAA,CAAAA,GACAA,CAAAA,GAAA,GAAAA,GAAA,CAAAA,GACAA,CAAAA,GAAA,GAAAA,GAAA,CAAAA,GACA,CALA;AAOA,cAAAvvB,CAAAA,GAAAyvB,CAAAzvB,IAAAmK,CAAA,EAGA,QAAAslB,CAAA;AACA,iBAAA,CAAA;AACAF,cAAAA,CAAAA,GAAA,GAAAA,KACAC,CAAAA,GAAAD,CADAA;AAGA;;AACA,iBAAA,CAAA;AAEA,sBAAA,OADAJ,CAAAA,GAAApd,CAAAA,CAAA/R,CAAAA,GAAA,CAAA+R,CACA,CAAA,KADA,CAEAud,CAAAA,GAAAA,CAAA,KAAAC,CAAAD,KAAA,CAAAA,GAAA,KAAAH,CAFA,IAGA,GAFA,KAGAK,CAAAA,GAAAF,CAHA;AAMA;;AACA,iBAAA,CAAA;AACAH,cAAAA,CAAAA,GAAApd,CAAAA,CAAA/R,CAAAA,GAAA,CAAA+R,CAAAod,EACAC,CAAAA,GAAArd,CAAAA,CAAA/R,CAAAA,GAAA,CAAA+R,CADAod,EAEA,QAAA,MAAAA,CAAA,KAAA,QAAA,MAAAC,CAAA,CAAA,IAAAA,CACAE,CAAAA,GAAAA,CAAA,KAAAC,CAAAD,KAAA,EAAAA,GAAA,CAAA,KAAAH,CAAA,KAAA,CAAAG,GAAA,KAAAF,CADAA,IAEA,IAFA,KAEAE,CAAAA,GAAA,KAAAA,IAAAA,CAAAA,GAAA,KAFA,MAGAE,CAAAA,GAAAF,CAHA,CAFAH;AAQA;;AACA,iBAAA,CAAA;AACAA,cAAAA,CAAAA,GAAApd,CAAAA,CAAA/R,CAAAA,GAAA,CAAA+R,CAAAod,EACAC,CAAAA,GAAArd,CAAAA,CAAA/R,CAAAA,GAAA,CAAA+R,CADAod,EAEAE,CAAAA,GAAAtd,CAAAA,CAAA/R,CAAAA,GAAA,CAAA+R,CAFAod,EAGA,QAAA,MAAAA,CAAA,KAAA,QAAA,MAAAC,CAAA,CAAA,IAAA,QAAA,MAAAC,CAAA,CAAA,IAAAA,CACAC,CAAAA,GAAAA,CAAA,KAAAC,CAAAD,KAAA,EAAAA,GAAA,CAAA,KAAAH,CAAA,KAAA,EAAAG,GAAA,CAAA,KAAAF,CAAA,KAAA,CAAAE,GAAA,KAAAD,CADAA,IAEA,KAFA,IAEAC,CAAAA,GAAA,OAFA,KAGAE,CAAAA,GAAAF,CAHA,CAHAH;AA1BA;AAsCA,mBAAAK,CAAA,IAGAA,CAAAA,GAAA,KAAAA,EACAC,CAAAA,GAAA,CAJA,IAKKD,CAAAA,GAAA,KAAAA,KAELA,CAAAA,IAAA,KAAAA,EACA7f,CAAAA,CAAApC,IAAAoC,CAAA6f,CAAAA,KAAA,EAAAA,GAAA,IAAAA,GAAA,KAAA7f,CADA6f,EAEAA,CAAAA,GAAA,QAAA,OAAAA,CAJKA,CALL,EAYA7f,CAAAA,CAAApC,IAAAoC,CAAA6f,CAAA7f,CAZA,EAaA3P,CAAAA,IAAAyvB,CAbA;AAgBA;;AAAA,eAQA,UAAAC,CAAA,EAAAA;AACA,cAAA1J,CAAAA,GAAA0J,CAAAA,CAAA7sB,MAAA;AACA,cAAAmjB,CAAAA,IAAA2J,CAAA,EACA,OAAA3O,MAAAA,CAAA4O,YAAA5O,CAAA6O,KAAA7O,CAAAA,MAAAA,EAAA0O,CAAA1O,CAAA;AAIA,cAAArR,CAAAA,GAAA,EAAA;AAAA,cACA3P,CAAAA,GAAA,CADA;;AAEA,iBAAAA,CAAAA,GAAAgmB,CAAA,GACArW,CAAAA,IAAAqR,MAAAA,CAAA4O,YAAA5O,CAAA6O,KAAA7O,CACAA,MADAA,EAEA0O,CAAAA,CAAAllB,KAAAklB,CAAA1vB,CAAA0vB,EAAA1vB,CAAAA,IAAA2vB,CAAAD,CAFA1O,CAAArR;;AAKA,iBAAAA,CAAA;AAvBAmgB,SAQA,CARAngB,CAQA,CARA;AA98BAhQ;;AAAAA,MAAAA,CAAAA,CAAAkT,MAAAlT,GAAAkT,CAAAlT,EACAA,CAAAA,CAAAowB,UAAApwB,GAoTA,UAAAkD,CAAA,EAAAA;AAAAA,SACAA,CADAA,IACAA,CADAA,KAEAA,CAAAA,GAAA,CAFAA;AAIA,eAAAgQ,CAAAA,CAAAmd,KAAAnd,CAAAmd,CAAAntB,CAAAgQ,CAAA;AAAAhQ,OAzTAlD,EAEAA,CAAAA,CAAAswB,iBAAAtwB,GAAA,EAFAA,EA4BAkT,CAAAA,CAAAiZ,mBAAAjZ,GAAAiZ,KAAAnoB,CAAAmoB,KAAA5M,CAAAA,CAAA4M,mBAAAA,GACA5M,CAAAA,CAAA4M,mBADAA,GASA,YAAA;AACA,YAAA;AACA,cAAA0B,CAAAA,GAAA,IAAArZ,UAAA,CAAA,CAAA,CAAA;AAEA,iBADAqZ,CAAAA,CAAAvB,SAAAuB,GAAA;AAAqBvB,YAAAA,SAAAA,EAAA9X,UAAAA,CAAAnS,SAArB;AAAqBkuB,YAAAA,GAAAA,EAAA,YAAA;AAAmD,qBAAA,EAAA;AAAA;AAAxE,WAAA1C,EACA,OAAAA,CAAAA,CAAA0C,GAAA1C,EAAA,IACA,cAAA,OAAAA,CAAAA,CAAA2C,QADA,IAEA,MAAA3C,CAAAA,CAAA2C,QAAA3C,CAAA,CAAAA,EAAA,CAAAA,EAAAva,UAFA;AAGG,SANH,CAMG,OAAAoH,CAAA,EAAAA;AACH,iBAAA,CAAA,CAAA;AAAA;AAfA+V,OAOA,EArCAzwB,EAmCAA,CAAAA,CAAAksB,UAAAlsB,GAAAksB,CAAAA,EAnCAlsB,EAqGAkT,CAAAA,CAAAwd,QAAAxd,GAAA,IArGAlT,EAwGAkT,CAAAA,CAAAyd,QAAAzd,GAAA,UAAA2a,CAAA,EAAAA;AAEA,eADAA,CAAAA,CAAAvB,SAAAuB,GAAA3a,CAAAA,CAAA7Q,SAAAwrB,EACAA,CAAA;AAAAA,OA1GA7tB,EAqIAkT,CAAAA,CAAAC,IAAAD,GAAA,UAAAxR,CAAA,EAAA8qB,CAAA,EAAAtpB,CAAA,EAAAA;AACA,eAAAiQ,CAAAA,CAAA,IAAAA,EAAAzR,CAAAyR,EAAAqZ,CAAArZ,EAAAjQ,CAAAiQ,CAAA;AAAAjQ,OAtIAlD,EAyIAkT,CAAAA,CAAAiZ,mBAAAjZ,KACAA,CAAAA,CAAA7Q,SAAA6Q,CAAAoZ,SAAApZ,GAAAsB,UAAAA,CAAAnS,SAAA6Q,EACAA,CAAAA,CAAAoZ,SAAApZ,GAAAsB,UADAtB,EAEA,eAAA,OAAA1R,MAAA,IAAAA,MAAAA,CAAAovB,OAAA,IACA1d,CAAAA,CAAA1R,MAAAA,CAAAovB,OAAA1d,CAAAA,KAAAA,CADA,IAGA/R,MAAAA,CAAAC,cAAAD,CAAA+R,CAAA/R,EAAAK,MAAAA,CAAAovB,OAAAzvB,EAAA;AACAO,QAAAA,KAAAA,EAAA,IADA;AAEAmvB,QAAAA,YAAAA,EAAAA,CAAA;AAFA,OAAA1vB,CANA+R,CAzIAlT,EAkLAkT,CAAAA,CAAAmd,KAAAnd,GAAA,UAAApN,CAAA,EAAAgI,CAAA,EAAAgW,CAAA,EAAAA;AACA,eArBA,UAAAuI,CAAA,EAAAvmB,CAAA,EAAAgI,CAAA,EAAAgW,CAAA,EAAAA;AAEA,iBADAqJ,CAAAA,CAAArnB,CAAAqnB,CAAAA,EACArnB,CAAAA,IAAA,CAAAA,GACAsmB,CAAAA,CAAAC,CAAAD,EAAAtmB,CAAAsmB,CADAtmB,GACAA,KAEA9B,CAFA8B,KAEAgI,CAFAhI,GAMA,YAAA,OAAAge,CAAA,GACAsI,CAAAA,CAAAC,CAAAD,EAAAtmB,CAAAsmB,CAAAA,CAAAte,IAAAse,CAAAte,CAAAse,EAAAtI,CAAAsI,CADA,GAEAA,CAAAA,CAAAC,CAAAD,EAAAtmB,CAAAsmB,CAAAA,CAAAte,IAAAse,CAAAte,CAAAse,CARAtmB,GAUAsmB,CAAAA,CAAAC,CAAAD,EAAAtmB,CAAAsmB,CAXA;AAmBAiE,SArBA,CAqBA,IArBA,EAqBAvqB,CArBA,EAqBAgI,CArBA,EAqBAgW,CArBA,CAqBA;AAAAA,OAnLA9jB,EAoMAkT,CAAAA,CAAA6Q,WAAA7Q,GAAA,UAAApN,CAAA,EAAAA;AACA,eAAAie,CAAAA,CAAA,IAAAA,EAAAje,CAAAie,CAAA;AAAAje,OArMA9F,EA0MAkT,CAAAA,CAAA4d,eAAA5d,GAAA,UAAApN,CAAA,EAAAA;AACA,eAAAie,CAAAA,CAAA,IAAAA,EAAAje,CAAAie,CAAA;AAAAje,OA3MA9F,EA4TAkT,CAAAA,CAAA6Z,QAAA7Z,GAAA,UAAAnP,CAAA,EAAAA;AACA,eAAA,EAAA,QAAAA,CAAA,IAAAA,CAAAA,CAAAA,CAAAgtB,SAAA,CAAA;AAAAA,OA7TA/wB,EAgUAkT,CAAAA,CAAA8d,OAAA9d,GAAA,UAAA9S,CAAA,EAAA2D,CAAA,EAAAA;AACA,YAAA,CAAAmP,CAAAA,CAAA6Z,QAAA7Z,CAAA9S,CAAA8S,CAAA,IAAA9S,CAAA8S,CAAAA,CAAA6Z,QAAA7Z,CAAAnP,CAAAmP,CAAA,EACA,MAAA,IAAA1G,SAAA,CAAA,2BAAA,CAAA;AAGA,YAAApM,CAAAA,KAAA2D,CAAA,EAAA,OAAA,CAAA;;AAKA,aAHA,IAAAoJ,CAAAA,GAAA/M,CAAAA,CAAA8C,MAAA,EACAkK,CAAAA,GAAArJ,CAAAA,CAAAb,MADA,EAGA7C,CAAAA,GAAA,CAHA,EAGAgmB,CAAAA,GAAA5hB,IAAAA,CAAA8qB,GAAA9qB,CAAA0I,CAAA1I,EAAA2I,CAAA3I,CAAA,EAAuCpE,CAAAA,GAAAgmB,CAAvC,EAAuCA,EAAShmB,CAAhD,EACA,IAAAD,CAAAA,CAAAC,CAAAD,CAAAA,KAAA2D,CAAAA,CAAA1D,CAAA0D,CAAA,EAAA;AACAoJ,UAAAA,CAAAA,GAAA/M,CAAAA,CAAAC,CAAAD,CAAA+M,EACAC,CAAAA,GAAArJ,CAAAA,CAAA1D,CAAA0D,CADAoJ;AAEA;AAIA;;AAAA,eAAAA,CAAAA,GAAAC,CAAAD,GAAAC,CAAA,CAAAD,GACAC,CAAAA,GAAAD,CAAAC,GAAA,CAAAA,GACA,CAFA;AAEA,OApVApN,EAuVAkT,CAAAA,CAAAyZ,UAAAzZ,GAAA,UAAA4Q,CAAA,EAAAA;AACA,gBAAAzC,MAAAA,CAAAyC,CAAAzC,CAAAA,CAAA4B,WAAA5B,EAAA;AACA,eAAA,KAAA;AACA,eAAA,MAAA;AACA,eAAA,OAAA;AACA,eAAA,OAAA;AACA,eAAA,QAAA;AACA,eAAA,QAAA;AACA,eAAA,QAAA;AACA,eAAA,MAAA;AACA,eAAA,OAAA;AACA,eAAA,SAAA;AACA,eAAA,UAAA;AACA,mBAAA,CAAA,CAAA;;AACA;AACA,mBAAA,CAAA,CAAA;AAdA;AAcA,OAtWArhB,EA0WAkT,CAAAA,CAAA+d,MAAA/d,GAAA,UAAAge,CAAA,EAAAhuB,CAAA,EAAAA;AACA,YAAA,CAAA+O,CAAAA,CAAAif,CAAAjf,CAAA,EACA,MAAA,IAAAzF,SAAA,CAAA,6CAAA,CAAA;AAGA,YAAA,MAAA0kB,CAAAA,CAAAhuB,MAAA,EACA,OAAAgQ,CAAAA,CAAAmd,KAAAnd,CAAA,CAAAA,CAAA;AAGA,YAAA7S,CAAA;AACA,YAAA,KAAA2D,CAAA,KAAAd,CAAA,EAEA,KADAA,CAAAA,GAAA,CAAAA,EACA7C,CAAAA,GAAA,CAAA,EAAeA,CAAAA,GAAA6wB,CAAAA,CAAAhuB,MAAf,EAAeA,EAAiB7C,CAAhC,EACA6C,CAAAA,IAAAguB,CAAAA,CAAA7wB,CAAA6wB,CAAAA,CAAAhuB,MAAAA;AAIA,YAAAkQ,CAAAA,GAAAF,CAAAA,CAAA6Q,WAAA7Q,CAAAhQ,CAAAgQ,CAAA;AAAA,YACAnD,CAAAA,GAAA,CADA;;AAEA,aAAA1P,CAAAA,GAAA,CAAA,EAAaA,CAAAA,GAAA6wB,CAAAA,CAAAhuB,MAAb,EAAaA,EAAiB7C,CAA9B,EAA8B;AAC9B,cAAA+R,CAAAA,GAAA8e,CAAAA,CAAA7wB,CAAA6wB,CAAA;AACA,cAAA,CAAAhe,CAAAA,CAAA6Z,QAAA7Z,CAAAd,CAAAc,CAAA,EACA,MAAA,IAAA1G,SAAA,CAAA,6CAAA,CAAA;AAEA4F,UAAAA,CAAAA,CAAA6a,IAAA7a,CAAAgB,CAAAhB,EAAArC,CAAAqC,GACArC,CAAAA,IAAAqC,CAAAA,CAAAlP,MADAkP;AAGA;;AAAA,eAAAgB,CAAA;AAAAA,OArYApT,EAmbAkT,CAAAA,CAAAI,UAAAJ,GAAAI,CAnbAtT,EA6fAkT,CAAAA,CAAA7Q,SAAA6Q,CAAA6d,SAAA7d,GAAA6d,CAAA,CA7fA/wB,EAqgBAkT,CAAAA,CAAA7Q,SAAA6Q,CAAAie,MAAAje,GAAA,YAAA;AACA,YAAAmT,CAAAA,GAAAvU,KAAA5O,MAAA;AACA,YAAAmjB,CAAAA,GAAA,CAAAA,IAAA,CAAA,EACA,MAAA,IAAArU,UAAA,CAAA,2CAAA,CAAA;;AAEA,aAAA,IAAA3R,CAAAA,GAAA,CAAA,EAAiBA,CAAAA,GAAAgmB,CAAjB,EAA0BhmB,CAAAA,IAAA,CAA1B,EACAmtB,CAAAA,CAAA1b,IAAA0b,EAAAntB,CAAAmtB,EAAAntB,CAAAA,GAAA,CAAAmtB,CAAAA;;AAEA,eAAA1b,IAAA;AAAAA,OA7gBA9R,EAghBAkT,CAAAA,CAAA7Q,SAAA6Q,CAAAke,MAAAle,GAAA,YAAA;AACA,YAAAmT,CAAAA,GAAAvU,KAAA5O,MAAA;AACA,YAAAmjB,CAAAA,GAAA,CAAAA,IAAA,CAAA,EACA,MAAA,IAAArU,UAAA,CAAA,2CAAA,CAAA;;AAEA,aAAA,IAAA3R,CAAAA,GAAA,CAAA,EAAiBA,CAAAA,GAAAgmB,CAAjB,EAA0BhmB,CAAAA,IAAA,CAA1B,EACAmtB,CAAAA,CAAA1b,IAAA0b,EAAAntB,CAAAmtB,EAAAntB,CAAAA,GAAA,CAAAmtB,CAAAA,EACAA,CAAAA,CAAA1b,IAAA0b,EAAAntB,CAAAA,GAAA,CAAAmtB,EAAAntB,CAAAA,GAAA,CAAAmtB,CADAA;;AAGA,eAAA1b,IAAA;AAAAA,OAzhBA9R,EA4hBAkT,CAAAA,CAAA7Q,SAAA6Q,CAAAme,MAAAne,GAAA,YAAA;AACA,YAAAmT,CAAAA,GAAAvU,KAAA5O,MAAA;AACA,YAAAmjB,CAAAA,GAAA,CAAAA,IAAA,CAAA,EACA,MAAA,IAAArU,UAAA,CAAA,2CAAA,CAAA;;AAEA,aAAA,IAAA3R,CAAAA,GAAA,CAAA,EAAiBA,CAAAA,GAAAgmB,CAAjB,EAA0BhmB,CAAAA,IAAA,CAA1B,EACAmtB,CAAAA,CAAA1b,IAAA0b,EAAAntB,CAAAmtB,EAAAntB,CAAAA,GAAA,CAAAmtB,CAAAA,EACAA,CAAAA,CAAA1b,IAAA0b,EAAAntB,CAAAA,GAAA,CAAAmtB,EAAAntB,CAAAA,GAAA,CAAAmtB,CADAA,EAEAA,CAAAA,CAAA1b,IAAA0b,EAAAntB,CAAAA,GAAA,CAAAmtB,EAAAntB,CAAAA,GAAA,CAAAmtB,CAFAA,EAGAA,CAAAA,CAAA1b,IAAA0b,EAAAntB,CAAAA,GAAA,CAAAmtB,EAAAntB,CAAAA,GAAA,CAAAmtB,CAHAA;;AAKA,eAAA1b,IAAA;AAAAA,OAviBA9R,EA0iBAkT,CAAAA,CAAA7Q,SAAA6Q,CAAAK,QAAAL,GAAA,YAAA;AACA,YAAAhQ,CAAAA,GAAA,IAAA4O,KAAA5O,MAAA;AACA,eAAA,MAAAA,CAAA,GAAA,EAAA,GACA,MAAAD,SAAAA,CAAAC,MAAA,GAAAosB,CAAAA,CAAAxd,IAAAwd,EAAA,CAAAA,EAAApsB,CAAAosB,CAAA,GAxHA,UAAAxL,CAAA,EAAAvZ,CAAA,EAAAC,CAAA,EAAAA;AACA,cAAA6iB,CAAAA,GAAAA,CAAA,CAAA;AAcA,cAAA,CAAA,KALArpB,CAKA,KALAuG,CAKA,IALAA,CAAAA,GAAA,CAKA,MAJAA,CAAAA,GAAA,CAIA,GAAAA,CAAAA,GAAAuH,KAAA5O,MAAA,EACA,OAAA,EAAA;AAOA,cAAA,CAAA,KAJAc,CAIA,KAJAwG,CAIA,IAJAA,CAAAA,GAAAsH,KAAA5O,MAIA,MAHAsH,CAAAA,GAAAsH,KAAA5O,MAGA,GAAAsH,CAAAA,IAAA,CAAA,EACA,OAAA,EAAA;AAOA,cAAA,CAHAA,CAAAA,MAAA,CAGA,MAFAD,CAAAA,MAAA,CAEA,CAAA,EACA,OAAA,EAAA;;AAKA,eAFAuZ,CAAAA,KAAAA,CAAAA,GAAA,MAAAA,CAEA,IACA,QAAAA,CAAA;AACA,iBAAA,KAAA;AACA,qBAAAwN,CAAAA,CAAAxf,IAAAwf,EAAA/mB,CAAA+mB,EAAA9mB,CAAA8mB,CAAA;;AAEA,iBAAA,MAAA;AACA,iBAAA,OAAA;AACA,qBAAAhC,CAAAA,CAAAxd,IAAAwd,EAAA/kB,CAAA+kB,EAAA9kB,CAAA8kB,CAAA;;AAEA,iBAAA,OAAA;AACA,qBAAAiC,CAAAA,CAAAzf,IAAAyf,EAAAhnB,CAAAgnB,EAAA/mB,CAAA+mB,CAAA;;AAEA,iBAAA,QAAA;AACA,iBAAA,QAAA;AACA,qBAAAC,CAAAA,CAAA1f,IAAA0f,EAAAjnB,CAAAinB,EAAAhnB,CAAAgnB,CAAA;;AAEA,iBAAA,QAAA;AACA,qBAAApC,CAAAA,CAAAtd,IAAAsd,EAAA7kB,CAAA6kB,EAAA5kB,CAAA4kB,CAAA;;AAEA,iBAAA,MAAA;AACA,iBAAA,OAAA;AACA,iBAAA,SAAA;AACA,iBAAA,UAAA;AACA,qBAAAqC,CAAAA,CAAA3f,IAAA2f,EAAAlnB,CAAAknB,EAAAjnB,CAAAinB,CAAA;;AAEA;AACA,kBAAApE,CAAA,EAAA,MAAA,IAAA7gB,SAAA,CAAA,uBAAAsX,CAAA,CAAA;AACAA,cAAAA,CAAAA,GAAAA,CAAAA,CAAAA,GAAA,EAAAA,EAAAb,WAAAa,EAAAA,EACAuJ,CAAAA,GAAAA,CAAA,CADAvJ;AA1BA;AA2BA,SAjEA,CAyHAoM,KAzHA,CAyHApe,IAzHA,EAyHA7O,SAzHA,CAuHA;AAEAA,OA9iBAjD,EAijBAkT,CAAAA,CAAA7Q,SAAA6Q,CAAAwe,MAAAxe,GAAA,UAAAnP,CAAA,EAAAA;AACA,YAAA,CAAAmP,CAAAA,CAAA6Z,QAAA7Z,CAAAnP,CAAAmP,CAAA,EAAA,MAAA,IAAA1G,SAAA,CAAA,2BAAA,CAAA;AACA,eAAAsF,SAAA/N,CAAA+N,IACA,MAAAoB,CAAAA,CAAA8d,OAAA9d,CAAApB,IAAAoB,EAAAnP,CAAAmP,CADA;AACAnP,OApjBA/D,EAujBAkT,CAAAA,CAAA7Q,SAAA6Q,CAAAye,OAAAze,GAAA,YAAA;AACA,YAAAD,CAAAA,GAAA,EAAA;AAAA,YACAvO,CAAAA,GAAA1E,CAAAA,CAAAswB,iBADA;AAMA,eAJAxe,KAAA5O,MAAA4O,GAAA,CAAAA,KACAmB,CAAAA,GAAAnB,KAAAyB,QAAAzB,CAAA,KAAAA,EAAA,CAAAA,EAAApN,CAAAoN,EAAA8f,KAAA9f,CAAA,OAAAA,EAAkDka,IAAlDla,CAAkD,GAAlDA,CAAAmB,EACAnB,KAAA5O,MAAA4O,GAAApN,CAAAoN,KAAAmB,CAAAA,IAAA,OAAAnB,CAFAA,GAIA,aAAAmB,CAAA,GAAA,GAAA;AAAA,OA9jBAjT,EAikBAkT,CAAAA,CAAA7Q,SAAA6Q,CAAA8d,OAAA9d,GAAA,UAAAhM,CAAA,EAAAqD,CAAA,EAAAC,CAAA,EAAAqnB,CAAA,EAAAC,CAAA,EAAAA;AACA,YAAA,CAAA5e,CAAAA,CAAA6Z,QAAA7Z,CAAAhM,CAAAgM,CAAA,EACA,MAAA,IAAA1G,SAAA,CAAA,2BAAA,CAAA;AAgBA,YAAA,KAbAxI,CAaA,KAbAuG,CAaA,KAZAA,CAAAA,GAAA,CAYA,GAZA,KAEAvG,CAFA,KAEAwG,CAFA,KAGAA,CAAAA,GAAAtD,CAAAA,GAAAA,CAAAA,CAAAhE,MAAAgE,GAAA,CAHA,CAYA,EATA,KAEAlD,CAFA,KAEA6tB,CAFA,KAGAA,CAAAA,GAAA,CAHA,CASA,EANA,KAEA7tB,CAFA,KAEA8tB,CAFA,KAGAA,CAAAA,GAAAhgB,KAAA5O,MAHA,CAMA,EAAAqH,CAAAA,GAAA,CAAAA,IAAAC,CAAAA,GAAAtD,CAAAA,CAAAhE,MAAAqH,IAAAsnB,CAAAA,GAAA,CAAAtnB,IAAAunB,CAAAA,GAAAhgB,KAAA5O,MAAA,EACA,MAAA,IAAA8O,UAAA,CAAA,oBAAA,CAAA;AAGA,YAAA6f,CAAAA,IAAAC,CAAAD,IAAAtnB,CAAAA,IAAAC,CAAA,EACA,OAAA,CAAA;AAEA,YAAAqnB,CAAAA,IAAAC,CAAA,EACA,OAAA,CAAA,CAAA;AAEA,YAAAvnB,CAAAA,IAAAC,CAAA,EACA,OAAA,CAAA;AAQA,YAAAsH,SAAA5K,CAAA,EAAA,OAAA,CAAA;;AASA,aAPA,IAAAiG,CAAAA,GAAAA,CAJA2kB,CAAAA,MAAA,CAIA3kB,KALA0kB,CAAAA,MAAA,CAKA1kB,CAAA,EACAC,CAAAA,GAAAA,CAPA5C,CAAAA,MAAA,CAOA4C,KARA7C,CAAAA,MAAA,CAQA6C,CADA,EAEAiZ,CAAAA,GAAA5hB,IAAAA,CAAA8qB,GAAA9qB,CAAA0I,CAAA1I,EAAA2I,CAAA3I,CAFA,EAIAstB,CAAAA,GAAAjgB,KAAAjH,KAAAiH,CAAA+f,CAAA/f,EAAAggB,CAAAhgB,CAJA,EAKAkgB,CAAAA,GAAA9qB,CAAAA,CAAA2D,KAAA3D,CAAAqD,CAAArD,EAAAsD,CAAAtD,CALA,EAOA7G,CAAAA,GAAA,CAAA,EAAiBA,CAAAA,GAAAgmB,CAAjB,EAAiBA,EAAShmB,CAA1B,EACA,IAAA0xB,CAAAA,CAAA1xB,CAAA0xB,CAAAA,KAAAC,CAAAA,CAAA3xB,CAAA2xB,CAAA,EAAA;AACA7kB,UAAAA,CAAAA,GAAA4kB,CAAAA,CAAA1xB,CAAA0xB,CAAA5kB,EACAC,CAAAA,GAAA4kB,CAAAA,CAAA3xB,CAAA2xB,CADA7kB;AAEA;AAIA;;AAAA,eAAAA,CAAAA,GAAAC,CAAAD,GAAAC,CAAA,CAAAD,GACAC,CAAAA,GAAAD,CAAAC,GAAA,CAAAA,GACA,CAFA;AAEA,OAznBApN,EAsvBAkT,CAAAA,CAAA7Q,SAAA6Q,CAAA+e,QAAA/e,GAAA,UAAAga,CAAA,EAAA7Z,CAAA,EAAAyQ,CAAA,EAAAA;AACA,eAAA,CAAA,CAAA,KAAAhS,KAAAnE,OAAAmE,CAAAob,CAAApb,EAAAuB,CAAAvB,EAAAgS,CAAAhS,CAAA;AAAAgS,OAvvBA9jB,EA0vBAkT,CAAAA,CAAA7Q,SAAA6Q,CAAAvF,OAAAuF,GAAA,UAAAga,CAAA,EAAA7Z,CAAA,EAAAyQ,CAAA,EAAAA;AACA,eAAA2J,CAAAA,CAAA3b,IAAA2b,EAAAP,CAAAO,EAAApa,CAAAoa,EAAA3J,CAAA2J,EAAA3J,CAAA,CAAA2J,CAAA;AAAA,OA3vBAztB,EA8vBAkT,CAAAA,CAAA7Q,SAAA6Q,CAAA0a,WAAA1a,GAAA,UAAAga,CAAA,EAAA7Z,CAAA,EAAAyQ,CAAA,EAAAA;AACA,eAAA2J,CAAAA,CAAA3b,IAAA2b,EAAAP,CAAAO,EAAApa,CAAAoa,EAAA3J,CAAA2J,EAAA3J,CAAA,CAAA2J,CAAA;AAAA,OA/vBAztB,EAizBAkT,CAAAA,CAAA7Q,SAAA6Q,CAAA2Z,KAAA3Z,GAAA,UAAA0S,CAAA,EAAApe,CAAA,EAAAtE,CAAA,EAAA4gB,CAAA,EAAAA;AAEA,YAAA,KAAA9f,CAAA,KAAAwD,CAAA,EACAsc,CAAAA,GAAA,MAAAA,EACA5gB,CAAAA,GAAA4O,KAAA5O,MADA4gB,EAEAtc,CAAAA,GAAA,CAFAsc,CADA,KAKG,IAAA,KAAA9f,CAAA,KAAAd,CAAA,IAAA,YAAA,OAAAsE,CAAA,EACHsc,CAAAA,GAAAtc,CAAAsc,EACA5gB,CAAAA,GAAA4O,KAAA5O,MADA4gB,EAEAtc,CAAAA,GAAA,CAFAsc,CADG,KAKA;AAAA,cAAA,CAAA3C,QAAAA,CAAA3Z,CAAA2Z,CAAA,EAWH,MAAA,IAAA5Z,KAAA,CACA,yEADA,CAAA;AAVAC,UAAAA,CAAAA,IAAA,CAAAA,EACA2Z,QAAAA,CAAAje,CAAAie,CAAAA,IACAje,CAAAA,IAAA,CAAAA,EAAA,KACAc,CADA,KACA8f,CADA,KACAA,CAAAA,GAAA,MADA,CADA3C,KAIA2C,CAAAA,GAAA5gB,CAAA4gB,EACA5gB,CAAAA,GAAAA,KAAAc,CALAmd,CADA3Z;AAeA;AAAA,YAAA8mB,CAAAA,GAAAxc,KAAA5O,MAAA4O,GAAAtK,CAAA;AAGA,YAAA,CAAA,KAFAxD,CAEA,KAFAd,CAEA,IAFAA,CAAAA,GAAAorB,CAEA,MAFAprB,CAAAA,GAAAorB,CAEA,GAAA1I,CAAAA,CAAA1iB,MAAA0iB,GAAA,CAAAA,KAAA1iB,CAAAA,GAAA,CAAAA,IAAAsE,CAAAA,GAAA,CAAAoe,KAAApe,CAAAA,GAAAsK,KAAA5O,MAAA,EACA,MAAA,IAAA8O,UAAA,CAAA,wCAAA,CAAA;AAGA8R,QAAAA,CAAAA,KAAAA,CAAAA,GAAA,MAAAA,CAAAA;;AAGA,aADA,IAAAuJ,CAAAA,GAAAA,CAAA,CACA,IACA,QAAAvJ,CAAA;AACA,eAAA,KAAA;AACA,mBAAAuK,CAAAA,CAAAvc,IAAAuc,EAAAzI,CAAAyI,EAAA7mB,CAAA6mB,EAAAnrB,CAAAmrB,CAAA;;AAEA,eAAA,MAAA;AACA,eAAA,OAAA;AACA,mBAAA1M,CAAAA,CAAA7P,IAAA6P,EAAAiE,CAAAjE,EAAAna,CAAAma,EAAAze,CAAAye,CAAA;;AAEA,eAAA,OAAA;AACA,mBAAAgN,CAAAA,CAAA7c,IAAA6c,EAAA/I,CAAA+I,EAAAnnB,CAAAmnB,EAAAzrB,CAAAyrB,CAAA;;AAEA,eAAA,QAAA;AACA,eAAA,QAAA;AACA,mBAAAI,CAAAA,CAAAjd,IAAAid,EAAAnJ,CAAAmJ,EAAAvnB,CAAAunB,EAAA7rB,CAAA6rB,CAAA;;AAEA,eAAA,QAAA;AAEA,mBAAAC,CAAAA,CAAAld,IAAAkd,EAAApJ,CAAAoJ,EAAAxnB,CAAAwnB,EAAA9rB,CAAA8rB,CAAA;;AAEA,eAAA,MAAA;AACA,eAAA,OAAA;AACA,eAAA,SAAA;AACA,eAAA,UAAA;AACA,mBAAAC,CAAAA,CAAAnd,IAAAmd,EAAArJ,CAAAqJ,EAAAznB,CAAAynB,EAAA/rB,CAAA+rB,CAAA;;AAEA;AACA,gBAAA5B,CAAA,EAAA,MAAA,IAAA7gB,SAAA,CAAA,uBAAAsX,CAAA,CAAA;AACAA,YAAAA,CAAAA,GAAAA,CAAA,KAAAA,CAAAA,EAAAb,WAAAa,EAAAA,EACAuJ,CAAAA,GAAAA,CAAA,CADAvJ;AA3BA;AA4BA,OAp3BA9jB,EAy3BAkT,CAAAA,CAAA7Q,SAAA6Q,CAAAoU,MAAApU,GAAA,YAAA;AACA,eAAA;AACAlN,UAAAA,IAAAA,EAAA,QADA;AAEA2J,UAAAA,IAAAA,EAAA/K,KAAAA,CAAAvC,SAAAuC,CAAAiG,KAAAjG,CAAAhE,IAAAgE,CAAAkN,KAAAogB,IAAApgB,IAAAA,IAAAlN,EAAA,CAAAA;AAFA,SAAA;AAEA,OA53BA5E;AAo9BA,UAAAgwB,CAAAA,GAAA,IAAA;;AAoBA,eAAAuB,CAAA,CAAAnf,CAAA,EAAA7H,CAAA,EAAAC,CAAA,EAAAA;AACA,YAAA2nB,CAAAA,GAAA,EAAA;AACA3nB,QAAAA,CAAAA,GAAA/F,IAAAA,CAAA8qB,GAAA9qB,CAAA2N,CAAAA,CAAAlP,MAAAuB,EAAA+F,CAAA/F,CAAA+F;;AAEA,aAAA,IAAAnK,CAAAA,GAAAkK,CAAA,EAAqBlK,CAAAA,GAAAmK,CAArB,EAAqBA,EAASnK,CAA9B,EACA8xB,CAAAA,IAAA9Q,MAAAA,CAAA4O,YAAA5O,CAAA,MAAAjP,CAAAA,CAAA/R,CAAA+R,CAAAiP,CAAA8Q;;AAEA,eAAAA,CAAA;AAGA;;AAAA,eAAAX,CAAA,CAAApf,CAAA,EAAA7H,CAAA,EAAAC,CAAA,EAAAA;AACA,YAAA2nB,CAAAA,GAAA,EAAA;AACA3nB,QAAAA,CAAAA,GAAA/F,IAAAA,CAAA8qB,GAAA9qB,CAAA2N,CAAAA,CAAAlP,MAAAuB,EAAA+F,CAAA/F,CAAA+F;;AAEA,aAAA,IAAAnK,CAAAA,GAAAkK,CAAA,EAAqBlK,CAAAA,GAAAmK,CAArB,EAAqBA,EAASnK,CAA9B,EACA8xB,CAAAA,IAAA9Q,MAAAA,CAAA4O,YAAA5O,CAAAjP,CAAAA,CAAA/R,CAAA+R,CAAAiP,CAAA8Q;;AAEA,eAAAA,CAAA;AAGA;;AAAA,eAAAb,CAAA,CAAAlf,CAAA,EAAA7H,CAAA,EAAAC,CAAA,EAAAA;AACA,YAAA6b,CAAAA,GAAAjU,CAAAA,CAAAlP,MAAA;AAAAA,SAAAA,CAEAqH,CAFArH,IAEAqH,CAAAA,GAAA,CAFArH,MAEAqH,CAAAA,GAAA,CAFArH,GAEA,CAAA,CACAsH,CADA,IACAA,CAAAA,GAAA,CADA,IACAA,CAAAA,GAAA6b,CADA,MACA7b,CAAAA,GAAA6b,CADA,CAFAnjB;;AAMA,aADA,IAAAkvB,CAAAA,GAAA,EAAA,EACA/xB,CAAAA,GAAAkK,CAAA,EAAqBlK,CAAAA,GAAAmK,CAArB,EAAqBA,EAASnK,CAA9B,EACA+xB,CAAAA,IAAAC,CAAAA,CAAAjgB,CAAAA,CAAA/R,CAAA+R,CAAAigB,CAAAD;;AAEA,eAAAA,CAAA;AAGA;;AAAA,eAAAX,CAAA,CAAArf,CAAA,EAAA7H,CAAA,EAAAC,CAAA,EAAAA;AAGA,aAFA,IAAAmZ,CAAAA,GAAAvR,CAAAA,CAAAvH,KAAAuH,CAAA7H,CAAA6H,EAAA5H,CAAA4H,CAAA,EACApC,CAAAA,GAAA,EADA,EAEA3P,CAAAA,GAAA,CAAA,EAAiBA,CAAAA,GAAAsjB,CAAAA,CAAAzgB,MAAjB,EAAmC7C,CAAAA,IAAA,CAAnC,EACA2P,CAAAA,IAAAqR,MAAAA,CAAA4O,YAAA5O,CAAAsC,CAAAA,CAAAtjB,CAAAsjB,CAAAA,GAAA,MAAAA,CAAAA,CAAAtjB,CAAAA,GAAA,CAAAsjB,CAAAtC,CAAArR;;AAEA,eAAAA,CAAA;AA0CA;;AAAA,eAAAsiB,CAAA,CAAA9qB,CAAA,EAAA+qB,CAAA,EAAArvB,CAAA,EAAAA;AACA,YAAAsE,CAAAA,GAAA,CAAAA,IAAA,CAAAA,IAAAA,CAAAA,GAAA,CAAA,EAAA,MAAA,IAAAwK,UAAA,CAAA,oBAAA,CAAA;AACA,YAAAxK,CAAAA,GAAA+qB,CAAA/qB,GAAAtE,CAAA,EAAA,MAAA,IAAA8O,UAAA,CAAA,uCAAA,CAAA;AA+JA;;AAAA,eAAAwgB,CAAA,CAAApgB,CAAA,EAAA1Q,CAAA,EAAA8F,CAAA,EAAA+qB,CAAA,EAAA7tB,CAAA,EAAA6qB,CAAA,EAAAA;AACA,YAAA,CAAArc,CAAAA,CAAA6Z,QAAA7Z,CAAAd,CAAAc,CAAA,EAAA,MAAA,IAAA1G,SAAA,CAAA,6CAAA,CAAA;AACA,YAAA9K,CAAAA,GAAAgD,CAAAhD,IAAAA,CAAAA,GAAA6tB,CAAA,EAAA,MAAA,IAAAvd,UAAA,CAAA,mCAAA,CAAA;AACA,YAAAxK,CAAAA,GAAA+qB,CAAA/qB,GAAA4K,CAAAA,CAAAlP,MAAA,EAAA,MAAA,IAAA8O,UAAA,CAAA,oBAAA,CAAA;AAkDA;;AAAA,eAAAygB,CAAA,CAAArgB,CAAA,EAAA1Q,CAAA,EAAA8F,CAAA,EAAAkrB,CAAA,EAAAA;AACAhxB,QAAAA,CAAAA,GAAA,CAAAA,KAAAA,CAAAA,GAAA,QAAAA,CAAA,GAAA,CAAAA;;AACA,aAAA,IAAArB,CAAAA,GAAA,CAAA,EAAAqG,CAAAA,GAAAjC,IAAAA,CAAA8qB,GAAA9qB,CAAA2N,CAAAA,CAAAlP,MAAAkP,GAAA5K,CAAA/C,EAAA,CAAAA,CAAA,EAAuDpE,CAAAA,GAAAqG,CAAvD,EAAuDA,EAAOrG,CAA9D,EACA+R,CAAAA,CAAA5K,CAAAA,GAAAnH,CAAA+R,CAAAA,GAAA/R,CAAAqB,CAAAA,GAAA,OAAA,KAAAgxB,CAAAA,GAAAryB,CAAAqyB,GAAA,IAAAryB,CAAA,CAAAA,MACA,KAAAqyB,CAAAA,GAAAryB,CAAAqyB,GAAA,IAAAryB,CAAA,CADA+R;AA+BA;;AAAA,eAAAugB,CAAA,CAAAvgB,CAAA,EAAA1Q,CAAA,EAAA8F,CAAA,EAAAkrB,CAAA,EAAAA;AACAhxB,QAAAA,CAAAA,GAAA,CAAAA,KAAAA,CAAAA,GAAA,aAAAA,CAAA,GAAA,CAAAA;;AACA,aAAA,IAAArB,CAAAA,GAAA,CAAA,EAAAqG,CAAAA,GAAAjC,IAAAA,CAAA8qB,GAAA9qB,CAAA2N,CAAAA,CAAAlP,MAAAkP,GAAA5K,CAAA/C,EAAA,CAAAA,CAAA,EAAuDpE,CAAAA,GAAAqG,CAAvD,EAAuDA,EAAOrG,CAA9D,EACA+R,CAAAA,CAAA5K,CAAAA,GAAAnH,CAAA+R,CAAAA,GAAA1Q,CAAAA,KAAA,KAAAgxB,CAAAA,GAAAryB,CAAAqyB,GAAA,IAAAryB,CAAA,CAAAqB,GAAA,GAAA0Q;AAmJA;;AAAA,eAAAwgB,CAAA,CAAAxgB,CAAA,EAAA1Q,CAAA,EAAA8F,CAAA,EAAA+qB,CAAA,EAAA7tB,CAAA,EAAA6qB,CAAA,EAAAA;AACA,YAAA/nB,CAAAA,GAAA+qB,CAAA/qB,GAAA4K,CAAAA,CAAAlP,MAAA,EAAA,MAAA,IAAA8O,UAAA,CAAA,oBAAA,CAAA;AACA,YAAAxK,CAAAA,GAAA,CAAA,EAAA,MAAA,IAAAwK,UAAA,CAAA,oBAAA,CAAA;AAGA;;AAAA,eAAA6gB,CAAA,CAAAzgB,CAAA,EAAA1Q,CAAA,EAAA8F,CAAA,EAAAkrB,CAAA,EAAAI,CAAA,EAAAA;AAKA,eAJAA,CAAAA,IACAF,CAAAA,CAAAxgB,CAAAwgB,EAAAlxB,CAAAkxB,EAAAprB,CAAAorB,EAAA,CAAAA,CADAE,EAGA7G,CAAAA,CAAAY,KAAAZ,CAAA7Z,CAAA6Z,EAAAvqB,CAAAuqB,EAAAzkB,CAAAykB,EAAAyG,CAAAzG,EAAA,EAAAA,EAAA,CAAAA,CAHA6G,EAIAtrB,CAAAA,GAAA,CAAA;AAWA;;AAAA,eAAAurB,CAAA,CAAA3gB,CAAA,EAAA1Q,CAAA,EAAA8F,CAAA,EAAAkrB,CAAA,EAAAI,CAAA,EAAAA;AAKA,eAJAA,CAAAA,IACAF,CAAAA,CAAAxgB,CAAAwgB,EAAAlxB,CAAAkxB,EAAAprB,CAAAorB,EAAA,CAAAA,CADAE,EAGA7G,CAAAA,CAAAY,KAAAZ,CAAA7Z,CAAA6Z,EAAAvqB,CAAAuqB,EAAAzkB,CAAAykB,EAAAyG,CAAAzG,EAAA,EAAAA,EAAA,CAAAA,CAHA6G,EAIAtrB,CAAAA,GAAA,CAAA;AA/cA0L;;AAAAA,MAAAA,CAAAA,CAAA7Q,SAAA6Q,CAAArI,KAAAqI,GAAA,UAAA3I,CAAA,EAAAC,CAAA,EAAAA;AACA,YAoBAwoB,CApBA;AAAA,YAAA3M,CAAAA,GAAAvU,KAAA5O,MAAA;AAqBA,YAAA,CApBAqH,CAAAA,GAAAA,CAAAA,CAAAA,CAoBA,IAjBA,CAiBA,GAjBA,CACAA,CAAAA,IAAA8b,CADA,IAEA,CAFA,KAEA9b,CAAAA,GAAA,CAFA,CAiBA,GAdGA,CAAAA,GAAA8b,CAAA9b,KACHA,CAAAA,GAAA8b,CADG9b,CAcH,EAbA8b,CANA7b,CAAAA,GAAAA,KAAAxG,CAAAwG,KAAAA,CAAAA,GAAA6b,CAAA7b,GAAA6b,CAAAA,CAAA7b,CAMA6b,IAGA,CAHAA,GAGA,CACA7b,CAAAA,IAAA6b,CADA,IAEA,CAFA,KAEA7b,CAAAA,GAAA,CAFA,CAHA6b,GAMG7b,CAAAA,GAAA6b,CAAA7b,KACHA,CAAAA,GAAA6b,CADG7b,CAOH,EAHAA,CAAAA,GAAAD,CAAAC,KAAAA,CAAAA,GAAAD,CAAAC,CAGA,EAAA0I,CAAAA,CAAAiZ,mBAAA,EAAAA,CACA6G,CAAAA,GAAAlhB,KAAA0e,QAAA1e,CAAAvH,CAAAuH,EAAAtH,CAAAsH,CADAqa,EAEAG,SAFAH,GAEAjZ,CAAAA,CAAA7Q,SAFA8pB,CAAA,KAGG;AACH,cAAA8G,CAAAA,GAAAzoB,CAAAA,GAAAD,CAAA;AACAyoB,UAAAA,CAAAA,GAAA,IAAA9f,CAAA,CAAA+f,CAAA,EAAAA,KAAAjvB,CAAA,CAAAgvB;;AACA,eAAA,IAAA3yB,CAAAA,GAAA,CAAA,EAAmBA,CAAAA,GAAA4yB,CAAnB,EAAmBA,EAAc5yB,CAAjC,EACA2yB,CAAAA,CAAA3yB,CAAA2yB,CAAAA,GAAAlhB,KAAAzR,CAAAA,GAAAkK,CAAAuH,CAAAkhB;AAIA;AAAA,eAAAA,CAAA;AAAAA,OAjCA9f,EA4CAA,CAAAA,CAAA7Q,SAAA6Q,CAAAggB,UAAAhgB,GAAA,UAAA1L,CAAA,EAAA8L,CAAA,EAAAwf,CAAA,EAAAA;AACAtrB,QAAAA,CAAAA,IAAA,CAAAA,EACA8L,CAAAA,IAAA,CADA9L,EAEAsrB,CAAAA,IAAAR,CAAAA,CAAA9qB,CAAA8qB,EAAAhf,CAAAgf,EAAAxgB,KAAA5O,MAAAovB,CAFA9qB;;AAOA,aAHA,IAAA0lB,CAAAA,GAAApb,KAAAtK,CAAAsK,CAAA,EACAxD,CAAAA,GAAA,CADA,EAEAjO,CAAAA,GAAA,CACA,EADA,EACAA,CADA,GACAiT,CADA,KACAhF,CAAAA,IAAA,GADA,CACA,GACA4e,CAAAA,IAAApb,KAAAtK,CAAAA,GAAAnH,CAAAyR,IAAAxD,CAAA4e;;AAGA,eAAAA,CAAA;AAAAA,OAxDAha,EA2DAA,CAAAA,CAAA7Q,SAAA6Q,CAAAigB,UAAAjgB,GAAA,UAAA1L,CAAA,EAAA8L,CAAA,EAAAwf,CAAA,EAAAA;AACAtrB,QAAAA,CAAAA,IAAA,CAAAA,EACA8L,CAAAA,IAAA,CADA9L,EAEAsrB,CAAAA,IACAR,CAAAA,CAAA9qB,CAAA8qB,EAAAhf,CAAAgf,EAAAxgB,KAAA5O,MAAAovB,CAHA9qB;;AAQA,aAFA,IAAA0lB,CAAAA,GAAApb,KAAAtK,CAAAA,GAAAA,EAAA8L,CAAAxB,CAAA,EACAxD,CAAAA,GAAA,CACA,EAAAgF,CAAAA,GAAA,CAAAA,KAAAhF,CAAAA,IAAA,GAAAgF,CAAA,GACA4Z,CAAAA,IAAApb,KAAAtK,CAAAA,GAAAA,EAAA8L,CAAAxB,IAAAxD,CAAA4e;;AAGA,eAAAA,CAAA;AAAAA,OAxEAha,EA2EAA,CAAAA,CAAA7Q,SAAA6Q,CAAAkgB,SAAAlgB,GAAA,UAAA1L,CAAA,EAAAsrB,CAAA,EAAAA;AAEA,eADAA,CAAAA,IAAAR,CAAAA,CAAA9qB,CAAA8qB,EAAA,CAAAA,EAAAxgB,KAAA5O,MAAAovB,CAAAQ,EACAhhB,KAAAtK,CAAAsK,CAAA;AAAAtK,OA7EA0L,EAgFAA,CAAAA,CAAA7Q,SAAA6Q,CAAAmgB,YAAAngB,GAAA,UAAA1L,CAAA,EAAAsrB,CAAA,EAAAA;AAEA,eADAA,CAAAA,IAAAR,CAAAA,CAAA9qB,CAAA8qB,EAAA,CAAAA,EAAAxgB,KAAA5O,MAAAovB,CAAAQ,EACAhhB,KAAAtK,CAAAsK,IAAAA,KAAAtK,CAAAA,GAAA,CAAAsK,KAAA,CAAA;AAAA,OAlFAoB,EAqFAA,CAAAA,CAAA7Q,SAAA6Q,CAAAgb,YAAAhb,GAAA,UAAA1L,CAAA,EAAAsrB,CAAA,EAAAA;AAEA,eADAA,CAAAA,IAAAR,CAAAA,CAAA9qB,CAAA8qB,EAAA,CAAAA,EAAAxgB,KAAA5O,MAAAovB,CAAAQ,EACAhhB,KAAAtK,CAAAsK,KAAA,CAAAA,GAAAA,KAAAtK,CAAAA,GAAA,CAAAsK,CAAA;AAAA,OAvFAoB,EA0FAA,CAAAA,CAAA7Q,SAAA6Q,CAAAogB,YAAApgB,GAAA,UAAA1L,CAAA,EAAAsrB,CAAA,EAAAA;AAGA,eAFAA,CAAAA,IAAAR,CAAAA,CAAA9qB,CAAA8qB,EAAA,CAAAA,EAAAxgB,KAAA5O,MAAAovB,CAAAQ,EAAA5vB,CAEA4O,KAAAtK,CAAAsK,IACAA,KAAAtK,CAAAA,GAAA,CAAAsK,KAAA,CADAA,GAEAA,KAAAtK,CAAAA,GAAA,CAAAsK,KAAA,EAJA5O,IAKA,WAAA4O,KAAAtK,CAAAA,GAAA,CAAAsK,CAHA;AAGA,OAhGAoB,EAmGAA,CAAAA,CAAA7Q,SAAA6Q,CAAAqgB,YAAArgB,GAAA,UAAA1L,CAAA,EAAAsrB,CAAA,EAAAA;AAGA,eAFAA,CAAAA,IAAAR,CAAAA,CAAA9qB,CAAA8qB,EAAA,CAAAA,EAAAxgB,KAAA5O,MAAAovB,CAAAQ,EAEA,WAAAhhB,KAAAtK,CAAAsK,CAAA,IACAA,KAAAtK,CAAAA,GAAA,CAAAsK,KAAA,EAAAA,GACAA,KAAAtK,CAAAA,GAAA,CAAAsK,KAAA,CADAA,GAEAA,KAAAtK,CAAAA,GAAA,CAAAsK,CAHA,CAAA;AAGA,OAzGAoB,EA4GAA,CAAAA,CAAA7Q,SAAA6Q,CAAAsgB,SAAAtgB,GAAA,UAAA1L,CAAA,EAAA8L,CAAA,EAAAwf,CAAA,EAAAA;AACAtrB,QAAAA,CAAAA,IAAA,CAAAA,EACA8L,CAAAA,IAAA,CADA9L,EAEAsrB,CAAAA,IAAAR,CAAAA,CAAA9qB,CAAA8qB,EAAAhf,CAAAgf,EAAAxgB,KAAA5O,MAAAovB,CAFA9qB;;AAOA,aAHA,IAAA0lB,CAAAA,GAAApb,KAAAtK,CAAAsK,CAAA,EACAxD,CAAAA,GAAA,CADA,EAEAjO,CAAAA,GAAA,CACA,EADA,EACAA,CADA,GACAiT,CADA,KACAhF,CAAAA,IAAA,GADA,CACA,GACA4e,CAAAA,IAAApb,KAAAtK,CAAAA,GAAAnH,CAAAyR,IAAAxD,CAAA4e;;AAMA,eAFAA,CAAAA,KAFA5e,CAAAA,IAAA,GAEA4e,CAAAA,KAAAA,CAAAA,IAAAzoB,IAAAA,CAAAyJ,GAAAzJ,CAAA,CAAAA,EAAA,IAAA6O,CAAA7O,CAAAyoB,GAEAA,CAAA;AAAAA,OA3HAha,EA8HAA,CAAAA,CAAA7Q,SAAA6Q,CAAAugB,SAAAvgB,GAAA,UAAA1L,CAAA,EAAA8L,CAAA,EAAAwf,CAAA,EAAAA;AACAtrB,QAAAA,CAAAA,IAAA,CAAAA,EACA8L,CAAAA,IAAA,CADA9L,EAEAsrB,CAAAA,IAAAR,CAAAA,CAAA9qB,CAAA8qB,EAAAhf,CAAAgf,EAAAxgB,KAAA5O,MAAAovB,CAFA9qB;;AAOA,aAHA,IAAAnH,CAAAA,GAAAiT,CAAA,EACAhF,CAAAA,GAAA,CADA,EAEA4e,CAAAA,GAAApb,KAAAtK,CAAAA,GAAAA,EAAAnH,CAAAyR,CACA,EAAAzR,CAAAA,GAAA,CAAAA,KAAAiO,CAAAA,IAAA,GAAAjO,CAAA,GACA6sB,CAAAA,IAAApb,KAAAtK,CAAAA,GAAAA,EAAAnH,CAAAyR,IAAAxD,CAAA4e;;AAMA,eAFAA,CAAAA,KAFA5e,CAAAA,IAAA,GAEA4e,CAAAA,KAAAA,CAAAA,IAAAzoB,IAAAA,CAAAyJ,GAAAzJ,CAAA,CAAAA,EAAA,IAAA6O,CAAA7O,CAAAyoB,GAEAA,CAAA;AAAAA,OA7IAha,EAgJAA,CAAAA,CAAA7Q,SAAA6Q,CAAAwgB,QAAAxgB,GAAA,UAAA1L,CAAA,EAAAsrB,CAAA,EAAAA;AAEA,eADAA,CAAAA,IAAAR,CAAAA,CAAA9qB,CAAA8qB,EAAA,CAAAA,EAAAxgB,KAAA5O,MAAAovB,CAAAQ,EACA,MAAAhhB,KAAAtK,CAAAsK,CAAA,GAAAtK,CACA,CADAA,IACA,MAAAsK,KAAAtK,CAAAsK,CAAA,GAAA,CADAtK,CAAA,GAAAsK,KAAAtK,CAAAsK,CAAA;AAAAtK,OAlJA0L,EAsJAA,CAAAA,CAAA7Q,SAAA6Q,CAAAygB,WAAAzgB,GAAA,UAAA1L,CAAA,EAAAsrB,CAAA,EAAAA;AACAA,QAAAA,CAAAA,IAAAR,CAAAA,CAAA9qB,CAAA8qB,EAAA,CAAAA,EAAAxgB,KAAA5O,MAAAovB,CAAAQ;AACA,YAAA5F,CAAAA,GAAApb,KAAAtK,CAAAsK,IAAAA,KAAAtK,CAAAA,GAAA,CAAAsK,KAAA,CAAA;AACA,eAAA,QAAAob,CAAA,GAAA,aAAAA,CAAA,GAAAA,CAAA;AAAAA,OAzJAha,EA4JAA,CAAAA,CAAA7Q,SAAA6Q,CAAA0gB,WAAA1gB,GAAA,UAAA1L,CAAA,EAAAsrB,CAAA,EAAAA;AACAA,QAAAA,CAAAA,IAAAR,CAAAA,CAAA9qB,CAAA8qB,EAAA,CAAAA,EAAAxgB,KAAA5O,MAAAovB,CAAAQ;AACA,YAAA5F,CAAAA,GAAApb,KAAAtK,CAAAA,GAAA,CAAAsK,IAAAA,KAAAtK,CAAAsK,KAAA,CAAA;AACA,eAAA,QAAAob,CAAA,GAAA,aAAAA,CAAA,GAAAA,CAAA;AAAAA,OA/JAha,EAkKAA,CAAAA,CAAA7Q,SAAA6Q,CAAA2gB,WAAA3gB,GAAA,UAAA1L,CAAA,EAAAsrB,CAAA,EAAAA;AAGA,eAFAA,CAAAA,IAAAR,CAAAA,CAAA9qB,CAAA8qB,EAAA,CAAAA,EAAAxgB,KAAA5O,MAAAovB,CAAAQ,EAEAhhB,KAAAtK,CAAAsK,IACAA,KAAAtK,CAAAA,GAAA,CAAAsK,KAAA,CADAA,GAEAA,KAAAtK,CAAAA,GAAA,CAAAsK,KAAA,EAFAA,GAGAA,KAAAtK,CAAAA,GAAA,CAAAsK,KAAA,EAHA;AAGA,OAxKAoB,EA2KAA,CAAAA,CAAA7Q,SAAA6Q,CAAA4gB,WAAA5gB,GAAA,UAAA1L,CAAA,EAAAsrB,CAAA,EAAAA;AAGA,eAFAA,CAAAA,IAAAR,CAAAA,CAAA9qB,CAAA8qB,EAAA,CAAAA,EAAAxgB,KAAA5O,MAAAovB,CAAAQ,EAEAhhB,KAAAtK,CAAAsK,KAAA,EAAAA,GACAA,KAAAtK,CAAAA,GAAA,CAAAsK,KAAA,EADAA,GAEAA,KAAAtK,CAAAA,GAAA,CAAAsK,KAAA,CAFAA,GAGAA,KAAAtK,CAAAA,GAAA,CAAAsK,CAHA;AAGA,OAjLAoB,EAoLAA,CAAAA,CAAA7Q,SAAA6Q,CAAA6gB,WAAA7gB,GAAA,UAAA1L,CAAA,EAAAsrB,CAAA,EAAAA;AAEA,eADAA,CAAAA,IAAAR,CAAAA,CAAA9qB,CAAA8qB,EAAA,CAAAA,EAAAxgB,KAAA5O,MAAAovB,CAAAQ,EACA7G,CAAAA,CAAAgC,IAAAhC,CAAAna,IAAAma,EAAAzkB,CAAAykB,EAAAzkB,CAAA,CAAAykB,EAAA,EAAAA,EAAA,CAAAA,CAAA;AAAA,OAtLA/Y,EAyLAA,CAAAA,CAAA7Q,SAAA6Q,CAAA8gB,WAAA9gB,GAAA,UAAA1L,CAAA,EAAAsrB,CAAA,EAAAA;AAEA,eADAA,CAAAA,IAAAR,CAAAA,CAAA9qB,CAAA8qB,EAAA,CAAAA,EAAAxgB,KAAA5O,MAAAovB,CAAAQ,EACA7G,CAAAA,CAAAgC,IAAAhC,CAAAna,IAAAma,EAAAzkB,CAAAykB,EAAAzkB,CAAA,CAAAykB,EAAA,EAAAA,EAAA,CAAAA,CAAA;AAAA,OA3LA/Y,EA8LAA,CAAAA,CAAA7Q,SAAA6Q,CAAA+gB,YAAA/gB,GAAA,UAAA1L,CAAA,EAAAsrB,CAAA,EAAAA;AAEA,eADAA,CAAAA,IAAAR,CAAAA,CAAA9qB,CAAA8qB,EAAA,CAAAA,EAAAxgB,KAAA5O,MAAAovB,CAAAQ,EACA7G,CAAAA,CAAAgC,IAAAhC,CAAAna,IAAAma,EAAAzkB,CAAAykB,EAAAzkB,CAAA,CAAAykB,EAAA,EAAAA,EAAA,CAAAA,CAAA;AAAA,OAhMA/Y,EAmMAA,CAAAA,CAAA7Q,SAAA6Q,CAAAghB,YAAAhhB,GAAA,UAAA1L,CAAA,EAAAsrB,CAAA,EAAAA;AAEA,eADAA,CAAAA,IAAAR,CAAAA,CAAA9qB,CAAA8qB,EAAA,CAAAA,EAAAxgB,KAAA5O,MAAAovB,CAAAQ,EACA7G,CAAAA,CAAAgC,IAAAhC,CAAAna,IAAAma,EAAAzkB,CAAAykB,EAAAzkB,CAAA,CAAAykB,EAAA,EAAAA,EAAA,CAAAA,CAAA;AAAA,OArMA/Y,EA8MAA,CAAAA,CAAA7Q,SAAA6Q,CAAAihB,WAAAjhB,GAAA,UAAAxR,CAAA,EAAA8F,CAAA,EAAA8L,CAAA,EAAAwf,CAAA,EAAAA;AAAAA,SACApxB,CAAAA,GAAAA,CAAAA,CAAAA,EACA8F,CAAAA,IAAA,CADA9F,EAEA4R,CAAAA,IAAA,CAFA5R,EAGAoxB,CAJAA,KAMAN,CAAAA,CAAA1gB,IAAA0gB,EAAA9wB,CAAA8wB,EAAAhrB,CAAAgrB,EAAAlf,CAAAkf,EADA/tB,IAAAA,CAAAyJ,GAAAzJ,CAAA,CAAAA,EAAA,IAAA6O,CAAA7O,IAAA,CACA+tB,EAAA,CAAAA,CANAM;AASA,YAAAxkB,CAAAA,GAAA,CAAA;AAAA,YACAjO,CAAAA,GAAA,CADA;;AAGA,aADAyR,KAAAtK,CAAAsK,IAAA,MAAApQ,CACA,EADAA,EACArB,CADAqB,GACA4R,CADA5R,KACA4M,CAAAA,IAAA,GADA5M,CACA,GACAoQ,KAAAtK,CAAAA,GAAAnH,CAAAyR,IAAApQ,CAAAA,GAAA4M,CAAA5M,GAAA,GAAAoQ;;AAGA,eAAAtK,CAAAA,GAAA8L,CAAA;AAAAA,OA9NAJ,EAiOAA,CAAAA,CAAA7Q,SAAA6Q,CAAAkhB,WAAAlhB,GAAA,UAAAxR,CAAA,EAAA8F,CAAA,EAAA8L,CAAA,EAAAwf,CAAA,EAAAA;AAAAA,SACApxB,CAAAA,GAAAA,CAAAA,CAAAA,EACA8F,CAAAA,IAAA,CADA9F,EAEA4R,CAAAA,IAAA,CAFA5R,EAGAoxB,CAJAA,KAMAN,CAAAA,CAAA1gB,IAAA0gB,EAAA9wB,CAAA8wB,EAAAhrB,CAAAgrB,EAAAlf,CAAAkf,EADA/tB,IAAAA,CAAAyJ,GAAAzJ,CAAA,CAAAA,EAAA,IAAA6O,CAAA7O,IAAA,CACA+tB,EAAA,CAAAA,CANAM;AASA,YAAAzyB,CAAAA,GAAAiT,CAAAA,GAAA,CAAA;AAAA,YACAhF,CAAAA,GAAA,CADA;;AAGA,aADAwD,KAAAtK,CAAAA,GAAAnH,CAAAyR,IAAA,MAAApQ,CACA,EADAA,EACArB,CADAqB,IACA,CADAA,KACA4M,CAAAA,IAAA,GADA5M,CACA,GACAoQ,KAAAtK,CAAAA,GAAAnH,CAAAyR,IAAApQ,CAAAA,GAAA4M,CAAA5M,GAAA,GAAAoQ;;AAGA,eAAAtK,CAAAA,GAAA8L,CAAA;AAAAA,OAjPAJ,EAoPAA,CAAAA,CAAA7Q,SAAA6Q,CAAAmhB,UAAAnhB,GAAA,UAAAxR,CAAA,EAAA8F,CAAA,EAAAsrB,CAAA,EAAAA;AAMA,eALApxB,CAAAA,GAAAA,CAAAA,CAAAA,EACA8F,CAAAA,IAAA,CADA9F,EAEAoxB,CAAAA,IAAAN,CAAAA,CAAA1gB,IAAA0gB,EAAA9wB,CAAA8wB,EAAAhrB,CAAAgrB,EAAA,CAAAA,EAAA,GAAAA,EAAA,CAAAA,CAFA9wB,EAGAwR,CAAAA,CAAAiZ,mBAAAjZ,KAAAxR,CAAAA,GAAA+C,IAAAA,CAAAkC,KAAAlC,CAAA/C,CAAA+C,CAAAyO,CAHAxR,EAIAoQ,KAAAtK,CAAAsK,IAAA,MAAApQ,CAJAA,EAKA8F,CAAAA,GAAA,CAAA;AAAA,OA1PA0L,EAqQAA,CAAAA,CAAA7Q,SAAA6Q,CAAAohB,aAAAphB,GAAA,UAAAxR,CAAA,EAAA8F,CAAA,EAAAsrB,CAAA,EAAAA;AAUA,eATApxB,CAAAA,GAAAA,CAAAA,CAAAA,EACA8F,CAAAA,IAAA,CADA9F,EAEAoxB,CAAAA,IAAAN,CAAAA,CAAA1gB,IAAA0gB,EAAA9wB,CAAA8wB,EAAAhrB,CAAAgrB,EAAA,CAAAA,EAAA,KAAAA,EAAA,CAAAA,CAFA9wB,EAGAwR,CAAAA,CAAAiZ,mBAAAjZ,IACApB,KAAAtK,CAAAsK,IAAA,MAAApQ,CAAAoQ,EACAA,KAAAtK,CAAAA,GAAA,CAAAsK,IAAApQ,CAAAA,KAAA,CAFAwR,IAIAuf,CAAAA,CAAA3gB,IAAA2gB,EAAA/wB,CAAA+wB,EAAAjrB,CAAAirB,EAAAjrB,CAAA,CAAAirB,CAPA/wB,EASA8F,CAAAA,GAAA,CAAA;AAAA,OA/QA0L,EAkRAA,CAAAA,CAAA7Q,SAAA6Q,CAAAqhB,aAAArhB,GAAA,UAAAxR,CAAA,EAAA8F,CAAA,EAAAsrB,CAAA,EAAAA;AAUA,eATApxB,CAAAA,GAAAA,CAAAA,CAAAA,EACA8F,CAAAA,IAAA,CADA9F,EAEAoxB,CAAAA,IAAAN,CAAAA,CAAA1gB,IAAA0gB,EAAA9wB,CAAA8wB,EAAAhrB,CAAAgrB,EAAA,CAAAA,EAAA,KAAAA,EAAA,CAAAA,CAFA9wB,EAGAwR,CAAAA,CAAAiZ,mBAAAjZ,IACApB,KAAAtK,CAAAsK,IAAApQ,CAAAA,KAAA,CAAAoQ,EACAA,KAAAtK,CAAAA,GAAA,CAAAsK,IAAA,MAAApQ,CAFAwR,IAIAuf,CAAAA,CAAA3gB,IAAA2gB,EAAA/wB,CAAA+wB,EAAAjrB,CAAAirB,EAAAjrB,CAAA,CAAAirB,CAPA/wB,EASA8F,CAAAA,GAAA,CAAA;AAAA,OA5RA0L,EAsSAA,CAAAA,CAAA7Q,SAAA6Q,CAAAshB,aAAAthB,GAAA,UAAAxR,CAAA,EAAA8F,CAAA,EAAAsrB,CAAA,EAAAA;AAYA,eAXApxB,CAAAA,GAAAA,CAAAA,CAAAA,EACA8F,CAAAA,IAAA,CADA9F,EAEAoxB,CAAAA,IAAAN,CAAAA,CAAA1gB,IAAA0gB,EAAA9wB,CAAA8wB,EAAAhrB,CAAAgrB,EAAA,CAAAA,EAAA,UAAAA,EAAA,CAAAA,CAFA9wB,EAGAwR,CAAAA,CAAAiZ,mBAAAjZ,IACApB,KAAAtK,CAAAA,GAAA,CAAAsK,IAAApQ,CAAAA,KAAA,EAAAoQ,EACAA,KAAAtK,CAAAA,GAAA,CAAAsK,IAAApQ,CAAAA,KAAA,EADAoQ,EAEAA,KAAAtK,CAAAA,GAAA,CAAAsK,IAAApQ,CAAAA,KAAA,CAFAoQ,EAGAA,KAAAtK,CAAAsK,IAAA,MAAApQ,CAJAwR,IAMAyf,CAAAA,CAAA7gB,IAAA6gB,EAAAjxB,CAAAixB,EAAAnrB,CAAAmrB,EAAAnrB,CAAA,CAAAmrB,CATAjxB,EAWA8F,CAAAA,GAAA,CAAA;AAAA,OAlTA0L,EAqTAA,CAAAA,CAAA7Q,SAAA6Q,CAAAuhB,aAAAvhB,GAAA,UAAAxR,CAAA,EAAA8F,CAAA,EAAAsrB,CAAA,EAAAA;AAYA,eAXApxB,CAAAA,GAAAA,CAAAA,CAAAA,EACA8F,CAAAA,IAAA,CADA9F,EAEAoxB,CAAAA,IAAAN,CAAAA,CAAA1gB,IAAA0gB,EAAA9wB,CAAA8wB,EAAAhrB,CAAAgrB,EAAA,CAAAA,EAAA,UAAAA,EAAA,CAAAA,CAFA9wB,EAGAwR,CAAAA,CAAAiZ,mBAAAjZ,IACApB,KAAAtK,CAAAsK,IAAApQ,CAAAA,KAAA,EAAAoQ,EACAA,KAAAtK,CAAAA,GAAA,CAAAsK,IAAApQ,CAAAA,KAAA,EADAoQ,EAEAA,KAAAtK,CAAAA,GAAA,CAAAsK,IAAApQ,CAAAA,KAAA,CAFAoQ,EAGAA,KAAAtK,CAAAA,GAAA,CAAAsK,IAAA,MAAApQ,CAJAwR,IAMAyf,CAAAA,CAAA7gB,IAAA6gB,EAAAjxB,CAAAixB,EAAAnrB,CAAAmrB,EAAAnrB,CAAA,CAAAmrB,CATAjxB,EAWA8F,CAAAA,GAAA,CAAA;AAAA,OAjUA0L,EAoUAA,CAAAA,CAAA7Q,SAAA6Q,CAAAwhB,UAAAxhB,GAAA,UAAAxR,CAAA,EAAA8F,CAAA,EAAA8L,CAAA,EAAAwf,CAAA,EAAAA;AAGA,YAFApxB,CAAAA,GAAAA,CAAAA,CAAAA,EACA8F,CAAAA,IAAA,CADA9F,EACA,CACAoxB,CAAA,EAAA;AACA,cAAA6B,CAAAA,GAAAlwB,IAAAA,CAAAyJ,GAAAzJ,CAAA,CAAAA,EAAA,IAAA6O,CAAA,GAAA,CAAA7O,CAAA;AAEA+tB,UAAAA,CAAAA,CAAA1gB,IAAA0gB,EAAA9wB,CAAA8wB,EAAAhrB,CAAAgrB,EAAAlf,CAAAkf,EAAAmC,CAAAA,GAAA,CAAAnC,EAAA,CAAAmC,CAAAnC,CAAAA;AAGA;;AAAA,YAAAnyB,CAAAA,GAAA,CAAA;AAAA,YACAiO,CAAAA,GAAA,CADA;AAAA,YAEAsmB,CAAAA,GAAA,CAFA;;AAIA,aADA9iB,KAAAtK,CAAAsK,IAAA,MAAApQ,CACA,EADAA,EACArB,CADAqB,GACA4R,CADA5R,KACA4M,CAAAA,IAAA,GADA5M,CACA,GACAA,CAAAA,GAAA,CAAAA,IAAA,MAAAkzB,CAAAlzB,IAAA,MAAAoQ,KAAAtK,CAAAA,GAAAnH,CAAAmH,GAAA,CAAAsK,CAAApQ,KACAkzB,CAAAA,GAAA,CADAlzB,GAGAoQ,KAAAtK,CAAAA,GAAAnH,CAAAyR,IAAAzR,CAAAqB,CAAAA,GAAA4M,CAAA5M,IAAA,CAAArB,IAAAu0B,CAAAv0B,GAAA,GAHAqB;;AAMA,eAAA8F,CAAAA,GAAA8L,CAAA;AAAAA,OAxVAJ,EA2VAA,CAAAA,CAAA7Q,SAAA6Q,CAAA2hB,UAAA3hB,GAAA,UAAAxR,CAAA,EAAA8F,CAAA,EAAA8L,CAAA,EAAAwf,CAAA,EAAAA;AAGA,YAFApxB,CAAAA,GAAAA,CAAAA,CAAAA,EACA8F,CAAAA,IAAA,CADA9F,EACA,CACAoxB,CAAA,EAAA;AACA,cAAA6B,CAAAA,GAAAlwB,IAAAA,CAAAyJ,GAAAzJ,CAAA,CAAAA,EAAA,IAAA6O,CAAA,GAAA,CAAA7O,CAAA;AAEA+tB,UAAAA,CAAAA,CAAA1gB,IAAA0gB,EAAA9wB,CAAA8wB,EAAAhrB,CAAAgrB,EAAAlf,CAAAkf,EAAAmC,CAAAA,GAAA,CAAAnC,EAAA,CAAAmC,CAAAnC,CAAAA;AAGA;;AAAA,YAAAnyB,CAAAA,GAAAiT,CAAAA,GAAA,CAAA;AAAA,YACAhF,CAAAA,GAAA,CADA;AAAA,YAEAsmB,CAAAA,GAAA,CAFA;;AAIA,aADA9iB,KAAAtK,CAAAA,GAAAnH,CAAAyR,IAAA,MAAApQ,CACA,EADAA,EACArB,CADAqB,IACA,CADAA,KACA4M,CAAAA,IAAA,GADA5M,CACA,GACAA,CAAAA,GAAA,CAAAA,IAAA,MAAAkzB,CAAAlzB,IAAA,MAAAoQ,KAAAtK,CAAAA,GAAAnH,CAAAmH,GAAA,CAAAsK,CAAApQ,KACAkzB,CAAAA,GAAA,CADAlzB,GAGAoQ,KAAAtK,CAAAA,GAAAnH,CAAAyR,IAAAzR,CAAAqB,CAAAA,GAAA4M,CAAA5M,IAAA,CAAArB,IAAAu0B,CAAAv0B,GAAA,GAHAqB;;AAMA,eAAA8F,CAAAA,GAAA8L,CAAA;AAAAA,OA/WAJ,EAkXAA,CAAAA,CAAA7Q,SAAA6Q,CAAA4hB,SAAA5hB,GAAA,UAAAxR,CAAA,EAAA8F,CAAA,EAAAsrB,CAAA,EAAAA;AAOA,eANApxB,CAAAA,GAAAA,CAAAA,CAAAA,EACA8F,CAAAA,IAAA,CADA9F,EAEAoxB,CAAAA,IAAAN,CAAAA,CAAA1gB,IAAA0gB,EAAA9wB,CAAA8wB,EAAAhrB,CAAAgrB,EAAA,CAAAA,EAAA,GAAAA,EAAA,CAAA,GAAAA,CAFA9wB,EAGAwR,CAAAA,CAAAiZ,mBAAAjZ,KAAAxR,CAAAA,GAAA+C,IAAAA,CAAAkC,KAAAlC,CAAA/C,CAAA+C,CAAAyO,CAHAxR,EAIAA,CAAAA,GAAA,CAAAA,KAAAA,CAAAA,GAAA,MAAAA,CAAA,GAAA,CAAAA,CAJAA,EAKAoQ,KAAAtK,CAAAsK,IAAA,MAAApQ,CALAA,EAMA8F,CAAAA,GAAA,CAAA;AAAA,OAzXA0L,EA4XAA,CAAAA,CAAA7Q,SAAA6Q,CAAA6hB,YAAA7hB,GAAA,UAAAxR,CAAA,EAAA8F,CAAA,EAAAsrB,CAAA,EAAAA;AAUA,eATApxB,CAAAA,GAAAA,CAAAA,CAAAA,EACA8F,CAAAA,IAAA,CADA9F,EAEAoxB,CAAAA,IAAAN,CAAAA,CAAA1gB,IAAA0gB,EAAA9wB,CAAA8wB,EAAAhrB,CAAAgrB,EAAA,CAAAA,EAAA,KAAAA,EAAA,CAAA,KAAAA,CAFA9wB,EAGAwR,CAAAA,CAAAiZ,mBAAAjZ,IACApB,KAAAtK,CAAAsK,IAAA,MAAApQ,CAAAoQ,EACAA,KAAAtK,CAAAA,GAAA,CAAAsK,IAAApQ,CAAAA,KAAA,CAFAwR,IAIAuf,CAAAA,CAAA3gB,IAAA2gB,EAAA/wB,CAAA+wB,EAAAjrB,CAAAirB,EAAAjrB,CAAA,CAAAirB,CAPA/wB,EASA8F,CAAAA,GAAA,CAAA;AAAA,OAtYA0L,EAyYAA,CAAAA,CAAA7Q,SAAA6Q,CAAA8hB,YAAA9hB,GAAA,UAAAxR,CAAA,EAAA8F,CAAA,EAAAsrB,CAAA,EAAAA;AAUA,eATApxB,CAAAA,GAAAA,CAAAA,CAAAA,EACA8F,CAAAA,IAAA,CADA9F,EAEAoxB,CAAAA,IAAAN,CAAAA,CAAA1gB,IAAA0gB,EAAA9wB,CAAA8wB,EAAAhrB,CAAAgrB,EAAA,CAAAA,EAAA,KAAAA,EAAA,CAAA,KAAAA,CAFA9wB,EAGAwR,CAAAA,CAAAiZ,mBAAAjZ,IACApB,KAAAtK,CAAAsK,IAAApQ,CAAAA,KAAA,CAAAoQ,EACAA,KAAAtK,CAAAA,GAAA,CAAAsK,IAAA,MAAApQ,CAFAwR,IAIAuf,CAAAA,CAAA3gB,IAAA2gB,EAAA/wB,CAAA+wB,EAAAjrB,CAAAirB,EAAAjrB,CAAA,CAAAirB,CAPA/wB,EASA8F,CAAAA,GAAA,CAAA;AAAA,OAnZA0L,EAsZAA,CAAAA,CAAA7Q,SAAA6Q,CAAA+hB,YAAA/hB,GAAA,UAAAxR,CAAA,EAAA8F,CAAA,EAAAsrB,CAAA,EAAAA;AAYA,eAXApxB,CAAAA,GAAAA,CAAAA,CAAAA,EACA8F,CAAAA,IAAA,CADA9F,EAEAoxB,CAAAA,IAAAN,CAAAA,CAAA1gB,IAAA0gB,EAAA9wB,CAAA8wB,EAAAhrB,CAAAgrB,EAAA,CAAAA,EAAA,UAAAA,EAAA,CAAA,UAAAA,CAFA9wB,EAGAwR,CAAAA,CAAAiZ,mBAAAjZ,IACApB,KAAAtK,CAAAsK,IAAA,MAAApQ,CAAAoQ,EACAA,KAAAtK,CAAAA,GAAA,CAAAsK,IAAApQ,CAAAA,KAAA,CADAoQ,EAEAA,KAAAtK,CAAAA,GAAA,CAAAsK,IAAApQ,CAAAA,KAAA,EAFAoQ,EAGAA,KAAAtK,CAAAA,GAAA,CAAAsK,IAAApQ,CAAAA,KAAA,EAJAwR,IAMAyf,CAAAA,CAAA7gB,IAAA6gB,EAAAjxB,CAAAixB,EAAAnrB,CAAAmrB,EAAAnrB,CAAA,CAAAmrB,CATAjxB,EAWA8F,CAAAA,GAAA,CAAA;AAAA,OAlaA0L,EAqaAA,CAAAA,CAAA7Q,SAAA6Q,CAAAgiB,YAAAhiB,GAAA,UAAAxR,CAAA,EAAA8F,CAAA,EAAAsrB,CAAA,EAAAA;AAaA,eAZApxB,CAAAA,GAAAA,CAAAA,CAAAA,EACA8F,CAAAA,IAAA,CADA9F,EAEAoxB,CAAAA,IAAAN,CAAAA,CAAA1gB,IAAA0gB,EAAA9wB,CAAA8wB,EAAAhrB,CAAAgrB,EAAA,CAAAA,EAAA,UAAAA,EAAA,CAAA,UAAAA,CAFA9wB,EAGAA,CAAAA,GAAA,CAAAA,KAAAA,CAAAA,GAAA,aAAAA,CAAA,GAAA,CAAAA,CAHAA,EAIAwR,CAAAA,CAAAiZ,mBAAAjZ,IACApB,KAAAtK,CAAAsK,IAAApQ,CAAAA,KAAA,EAAAoQ,EACAA,KAAAtK,CAAAA,GAAA,CAAAsK,IAAApQ,CAAAA,KAAA,EADAoQ,EAEAA,KAAAtK,CAAAA,GAAA,CAAAsK,IAAApQ,CAAAA,KAAA,CAFAoQ,EAGAA,KAAAtK,CAAAA,GAAA,CAAAsK,IAAA,MAAApQ,CAJAwR,IAMAyf,CAAAA,CAAA7gB,IAAA6gB,EAAAjxB,CAAAixB,EAAAnrB,CAAAmrB,EAAAnrB,CAAA,CAAAmrB,CAVAjxB,EAYA8F,CAAAA,GAAA,CAAA;AAAA,OAlbA0L,EAkcAA,CAAAA,CAAA7Q,SAAA6Q,CAAAiiB,YAAAjiB,GAAA,UAAAxR,CAAA,EAAA8F,CAAA,EAAAsrB,CAAA,EAAAA;AACA,eAAAD,CAAAA,CAAA/gB,IAAA+gB,EAAAnxB,CAAAmxB,EAAArrB,CAAAqrB,EAAArrB,CAAA,CAAAqrB,EAAAC,CAAAD,CAAA;AAAAC,OAncA5f,EAscAA,CAAAA,CAAA7Q,SAAA6Q,CAAAkiB,YAAAliB,GAAA,UAAAxR,CAAA,EAAA8F,CAAA,EAAAsrB,CAAA,EAAAA;AACA,eAAAD,CAAAA,CAAA/gB,IAAA+gB,EAAAnxB,CAAAmxB,EAAArrB,CAAAqrB,EAAArrB,CAAA,CAAAqrB,EAAAC,CAAAD,CAAA;AAAAC,OAvcA5f,EAkdAA,CAAAA,CAAA7Q,SAAA6Q,CAAAmiB,aAAAniB,GAAA,UAAAxR,CAAA,EAAA8F,CAAA,EAAAsrB,CAAA,EAAAA;AACA,eAAAC,CAAAA,CAAAjhB,IAAAihB,EAAArxB,CAAAqxB,EAAAvrB,CAAAurB,EAAAvrB,CAAA,CAAAurB,EAAAD,CAAAC,CAAA;AAAAD,OAndA5f,EAsdAA,CAAAA,CAAA7Q,SAAA6Q,CAAAoiB,aAAApiB,GAAA,UAAAxR,CAAA,EAAA8F,CAAA,EAAAsrB,CAAA,EAAAA;AACA,eAAAC,CAAAA,CAAAjhB,IAAAihB,EAAArxB,CAAAqxB,EAAAvrB,CAAAurB,EAAAvrB,CAAA,CAAAurB,EAAAD,CAAAC,CAAA;AAAAD,OAvdA5f,EA2dAA,CAAAA,CAAA7Q,SAAA6Q,CAAA+Z,IAAA/Z,GAAA,UAAAhM,CAAA,EAAAquB,CAAA,EAAAhrB,CAAA,EAAAC,CAAA,EAAAA;AAQA,YAPAD,CAAAA,KAAAA,CAAAA,GAAA,CAAAA,CAAAA,EACAC,CAAAA,IAAA,MAAAA,CAAAA,KAAAA,CAAAA,GAAAsH,KAAA5O,MAAAsH,CADAD,EAEAgrB,CAAAA,IAAAruB,CAAAA,CAAAhE,MAAAqyB,KAAAA,CAAAA,GAAAruB,CAAAA,CAAAhE,MAAAqyB,CAFAhrB,EAGAgrB,CAAAA,KAAAA,CAAAA,GAAA,CAAAA,CAHAhrB,EAIAC,CAAAA,GAAA,CAAAA,IAAAA,CAAAA,GAAAD,CAAAC,KAAAA,CAAAA,GAAAD,CAAAC,CAJAD,EAOAC,CAAAA,KAAAD,CAAA,EAAA,OAAA,CAAA;AACA,YAAA,MAAArD,CAAAA,CAAAhE,MAAA,IAAA,MAAA4O,KAAA5O,MAAA,EAAA,OAAA,CAAA;AAGA,YAAAqyB,CAAAA,GAAA,CAAA,EACA,MAAA,IAAAvjB,UAAA,CAAA,2BAAA,CAAA;AAEA,YAAAzH,CAAAA,GAAA,CAAAA,IAAAA,CAAAA,IAAAuH,KAAA5O,MAAA,EAAA,MAAA,IAAA8O,UAAA,CAAA,2BAAA,CAAA;AACA,YAAAxH,CAAAA,GAAA,CAAA,EAAA,MAAA,IAAAwH,UAAA,CAAA,yBAAA,CAAA;AAGAxH,QAAAA,CAAAA,GAAAsH,KAAA5O,MAAAsH,KAAAA,CAAAA,GAAAsH,KAAA5O,MAAAsH,GACAtD,CAAAA,CAAAhE,MAAAgE,GAAAquB,CAAAruB,GAAAsD,CAAAA,GAAAD,CAAArD,KACAsD,CAAAA,GAAAtD,CAAAA,CAAAhE,MAAAgE,GAAAquB,CAAAruB,GAAAqD,CADArD,CADAsD;AAKA,YACAnK,CADA;AAAA,YAAAgmB,CAAAA,GAAA7b,CAAAA,GAAAD,CAAA;AAGA,YAAAuH,SAAA5K,CAAA4K,IAAAvH,CAAAA,GAAAgrB,CAAAzjB,IAAAyjB,CAAAA,GAAA/qB,CAAA,EAEA,KAAAnK,CAAAA,GAAAgmB,CAAAA,GAAA,CAAA,EAAqBhmB,CAAAA,IAAA,CAArB,EAAqB,EAAQA,CAA7B,EACA6G,CAAAA,CAAA7G,CAAAA,GAAAk1B,CAAAruB,CAAAA,GAAA4K,KAAAzR,CAAAA,GAAAkK,CAAAuH,CAAA5K,CAHA,KAKG,IAAAmf,CAAAA,GAAA,GAAAA,IAAA,CAAAnT,CAAAA,CAAAiZ,mBAAA,EAEH,KAAA9rB,CAAAA,GAAA,CAAA,EAAeA,CAAAA,GAAAgmB,CAAf,EAAeA,EAAShmB,CAAxB,EACA6G,CAAAA,CAAA7G,CAAAA,GAAAk1B,CAAAruB,CAAAA,GAAA4K,KAAAzR,CAAAA,GAAAkK,CAAAuH,CAAA5K,CAHG,KAMHsN,UAAAA,CAAAnS,SAAAmS,CAAAvO,GAAAuO,CAAA5T,IAAA4T,CACAtN,CADAsN,EAEA1C,KAAA0e,QAAA1e,CAAAvH,CAAAuH,EAAAvH,CAAAA,GAAA8b,CAAAvU,CAFA0C,EAGA+gB,CAHA/gB;AAOA,eAAA6R,CAAA;AAAAA,OAxgBAnT,EA+gBAA,CAAAA,CAAA7Q,SAAA6Q,CAAApF,IAAAoF,GAAA,UAAAga,CAAA,EAAA3iB,CAAA,EAAAC,CAAA,EAAAsZ,CAAA,EAAAA;AAEA,YAAA,YAAA,OAAAoJ,CAAA,EAAA;AASA,cARA,YAAA,OAAA3iB,CAAA,IACAuZ,CAAAA,GAAAvZ,CAAAuZ,EACAvZ,CAAAA,GAAA,CADAuZ,EAEAtZ,CAAAA,GAAAsH,KAAA5O,MAHA,IAIK,YAAA,OAAAsH,CAAA,KACLsZ,CAAAA,GAAAtZ,CAAAsZ,EACAtZ,CAAAA,GAAAsH,KAAA5O,MAFK,CAJL,EAQA,MAAAgqB,CAAAA,CAAAhqB,MAAA,EAAA;AACA,gBAAAsyB,CAAAA,GAAAtI,CAAAA,CAAA2B,UAAA3B,CAAA,CAAAA,CAAA;AACAsI,YAAAA,CAAAA,GAAA,GAAAA,KACAtI,CAAAA,GAAAsI,CADAA;AAIA;;AAAA,cAAA,KAAAxxB,CAAA,KAAA8f,CAAA,IAAA,YAAA,OAAAA,CAAA,EACA,MAAA,IAAAtX,SAAA,CAAA,2BAAA,CAAA;AAEA,cAAA,YAAA,OAAAsX,CAAA,IAAAA,CAAA5Q,CAAAA,CAAAyZ,UAAAzZ,CAAA4Q,CAAA5Q,CAAA,EACA,MAAA,IAAA1G,SAAA,CAAA,uBAAAsX,CAAA,CAAA;AAAAA,SAnBA,MAqBG,YAAA,OAAAoJ,CAAA,KACHA,CAAAA,IAAA,GADG;;AAKH,YAAA3iB,CAAAA,GAAA,CAAAA,IAAAuH,KAAA5O,MAAA4O,GAAAvH,CAAAA,IAAAuH,KAAA5O,MAAA4O,GAAAtH,CAAA,EACA,MAAA,IAAAwH,UAAA,CAAA,oBAAA,CAAA;AAGA,YAAAxH,CAAAA,IAAAD,CAAA,EACA,OAAAuH,IAAA;AAQA,YAAAzR,CAAA;AACA,YANAkK,CAAAA,MAAA,CAAAA,EACAC,CAAAA,GAAAA,KAAAxG,CAAAwG,KAAAA,CAAAA,GAAAsH,KAAA5O,MAAAsH,GAAAA,CAAAA,KAAA,CADAD,EAGA2iB,CAAAA,KAAAA,CAAAA,GAAA,CAAAA,CAHA3iB,EAMA,YAAA,OAAA2iB,CAAA,EACA,KAAA7sB,CAAAA,GAAAkK,CAAA,EAAmBlK,CAAAA,GAAAmK,CAAnB,EAAmBA,EAASnK,CAA5B,EACAyR,KAAAzR,CAAAyR,IAAAob,CAAApb,CAFA,KAIG;AACH,cAAA6R,CAAAA,GAAAzQ,CAAAA,CAAA6Z,QAAA7Z,CAAAga,CAAAha,IACAga,CADAha,GAEAoa,CAAAA,CAAA,IAAApa,CAAA,CAAAga,CAAA,EAAApJ,CAAA,EAAAvQ,QAAA,EAAA+Z,CAFA;AAAA,cAGAjH,CAAAA,GAAA1C,CAAAA,CAAAzgB,MAHA;;AAIA,eAAA7C,CAAAA,GAAA,CAAA,EAAeA,CAAAA,GAAAmK,CAAAA,GAAAD,CAAf,EAAeA,EAAiBlK,CAAhC,EACAyR,KAAAzR,CAAAA,GAAAkK,CAAAuH,IAAA6R,CAAAA,CAAAtjB,CAAAA,GAAAgmB,CAAA1C,CAAA7R;AAIA;AAAA,eAAAA,IAAA;AAAAA,OAvkBAoB;AA6kBA,UAAAuiB,CAAAA,GAAA,oBAAA;;AAmBA,eAAApD,CAAA,CAAAnwB,CAAA,EAAAA;AACA,eAAAA,CAAAA,GAAA,EAAAA,GAAA,MAAAA,CAAAA,CAAAqR,QAAArR,CAAA,EAAAA,CAAAA,GACAA,CAAAA,CAAAqR,QAAArR,CAAA,EAAAA,CADA;AAIA;;AAAA,eAAAorB,CAAA,CAAA1H,CAAA,EAAAsJ,CAAA,EAAAA;AAEA,YAAAW,CAAA;AADAX,QAAAA,CAAAA,GAAAA,CAAAA,IAAAwG,IAAAA,CAAAxG;;AAMA,aAJA,IAAAhsB,CAAAA,GAAA0iB,CAAAA,CAAA1iB,MAAA,EACAyyB,CAAAA,GAAA,IADA,EAEAhS,CAAAA,GAAA,EAFA,EAIAtjB,CAAAA,GAAA,CAAA,EAAiBA,CAAAA,GAAA6C,CAAjB,EAAiBA,EAAY7C,CAA7B,EAA6B;AAI7B,cAAA,CAHAwvB,CAAAA,GAAAjK,CAAAA,CAAAiJ,UAAAjJ,CAAAvlB,CAAAulB,CAGA,IAAA,KAAA,IAAAiK,CAAAA,GAAA,KAAA,EAAA;AAEA,gBAAA,CAAA8F,CAAA,EAAA;AAEA,kBAAA9F,CAAAA,GAAA,KAAA,EAAA;AAAA,iBAEAX,CAAAA,IAAA,CAFA,IAEA,CAAA,CAFA,IAEAvL,CAAAA,CAAA/V,IAAA+V,CAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,CAFA;AAGA;AACS;;AAAA,kBAAAtjB,CAAAA,GAAA,CAAAA,KAAA6C,CAAA,EAAA;AAAA,iBAETgsB,CAAAA,IAAA,CAFS,IAET,CAAA,CAFS,IAETvL,CAAAA,CAAA/V,IAAA+V,CAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,CAFS;AAGT;AAIAgS;;AAAAA,cAAAA,CAAAA,GAAA9F,CAAA8F;AAEA;AAIA;;AAAA,gBAAA9F,CAAAA,GAAA,KAAA,EAAA;AAAA,eACAX,CAAAA,IAAA,CADA,IACA,CAAA,CADA,IACAvL,CAAAA,CAAA/V,IAAA+V,CAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,CADA,EAEAgS,CAAAA,GAAA9F,CAFA;AAGA;AAIAA;;AAAAA,YAAAA,CAAAA,GAAA,SAAA8F,CAAAA,GAAA,KAAAA,IAAA,EAAAA,GAAA9F,CAAAA,GAAA,KAAA,CAAAA;AAAA,WA5BA,MA6BK8F,CAAAA,IAAAA,CAELzG,CAAAA,IAAA,CAFKyG,IAEL,CAAA,CAFKA,IAELhS,CAAAA,CAAA/V,IAAA+V,CAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,CAFKgS;;AAQL,cAHAA,CAAAA,GAAA,IAAAA,EAGA9F,CAAAA,GAAA,GAAA,EAAA;AACA,gBAAA,CAAAX,CAAAA,IAAA,CAAA,IAAA,CAAA,EAAA;AACAvL,YAAAA,CAAAA,CAAA/V,IAAA+V,CAAAkM,CAAAlM;AAAAkM,WAFA,MAGK,IAAAA,CAAAA,GAAA,IAAA,EAAA;AACL,gBAAA,CAAAX,CAAAA,IAAA,CAAA,IAAA,CAAA,EAAA;AACAvL,YAAAA,CAAAA,CAAA/V,IAAA+V,CACAkM,CAAAA,IAAA,CAAAA,GAAA,GADAlM,EAEA,KAAAkM,CAAA,GAAA,GAFAlM;AAEA,WAJK,MAMA,IAAAkM,CAAAA,GAAA,KAAA,EAAA;AACL,gBAAA,CAAAX,CAAAA,IAAA,CAAA,IAAA,CAAA,EAAA;AACAvL,YAAAA,CAAAA,CAAA/V,IAAA+V,CACAkM,CAAAA,IAAA,EAAAA,GAAA,GADAlM,EAEAkM,CAAAA,IAAA,CAAAA,GAAA,EAAAA,GAAA,GAFAlM,EAGA,KAAAkM,CAAA,GAAA,GAHAlM;AAGA,WALK,MAOA;AAAA,gBAAA,EAAAkM,CAAAA,GAAA,OAAA,CAAA,EASL,MAAA,IAAAtoB,KAAA,CAAA,oBAAA,CAAA;AARA,gBAAA,CAAA2nB,CAAAA,IAAA,CAAA,IAAA,CAAA,EAAA;AACAvL,YAAAA,CAAAA,CAAA/V,IAAA+V,CACAkM,CAAAA,IAAA,EAAAA,GAAA,GADAlM,EAEAkM,CAAAA,IAAA,EAAAA,GAAA,EAAAA,GAAA,GAFAlM,EAGAkM,CAAAA,IAAA,CAAAA,GAAA,EAAAA,GAAA,GAHAlM,EAIA,KAAAkM,CAAA,GAAA,GAJAlM;AAIA;AAOA;;AAAA,eAAAA,CAAA;AA4BA;;AAAA,eAAA4J,CAAA,CAAAta,CAAA,EAAAA;AACA,eAAAmN,CAAAA,CAAAwV,WAAAxV,CAhIA,UAAAnN,CAAA,EAAAA;AAIA,cAAA,CAFAA,CAAAA,GAUA,UAAAA,CAAA,EAAAA;AACA,mBAAAA,CAAAA,CAAA4iB,IAAA5iB,GAAAA,CAAAA,CAAA4iB,IAAA5iB,EAAAA,GACAA,CAAAA,CAAA6iB,OAAA7iB,CAAA,YAAAA,EAAA,EAAAA,CADA;AAXA8iB,WAUA,CAVA9iB,CAUA,EAVA6iB,OAUA,CAVAL,CAUA,EAVA,EAUA,CARA,EAAAvyB,MAAA,GAAA,CAAA,EAAA,OAAA,EAAA;;AAEA,iBAAA+P,CAAAA,CAAA/P,MAAA+P,GAAA,CAAAA,IAAA,CAAA,GACAA,CAAAA,IAAA,GAAAA;;AAEA,iBAAAA,CAAA;AAuHA+iB,SAhIA,CAgIA/iB,CAhIA,CAgIAmN,CAAA;AAGA;;AAAA,eAAAsO,CAAA,CAAA/O,CAAA,EAAAD,CAAA,EAAAlY,CAAA,EAAAtE,CAAA,EAAAA;AACA,aAAA,IAAA7C,CAAAA,GAAA,CAAA,EAAiBA,CAAAA,GAAA6C,CAAA7C,IAAA6C,EACjB7C,CAAAA,GAAAmH,CAAAnH,IAAAqf,CAAAA,CAAAxc,MAAA7C,IAAAA,CAAAA,IAAAsf,CAAAA,CAAAzc,MADiBA,CAAjB,EACAA,EAD6B7C,CAA7B,EAEAqf,CAAAA,CAAArf,CAAAA,GAAAmH,CAAAkY,CAAAA,GAAAC,CAAAA,CAAAtf,CAAAsf,CAAAD;;AAEA,eAAArf,CAAA;AAAAA;AAAAA,KDvsD2E,ECusD3EA,IDvsD2E,CCusD3EA,IDvsD2E,ECusD3EA,CAAAA,CAAAA,CAAAA,CDvsD2E;ACusD3EA,GbrqDA,EaqqDAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;ACvvDAJ,IAAAA,CAAAA,CAAAD,OAAAC,GAAA+hB,CAAA/hB;AAKA,QAAAg2B,CAAAA,GAAA,IAAA;;AAEA,QAAA;AACAA,MAAAA,CAAAA,GAAA,IAAAC,WAAAA,CAAAC,QAAA,CAAA,IAAAD,WAAAA,CAAAE,MAAA,CAAA,IAAA5hxU,OAFTi2B;AAGC,KAJD,CAIC,OAAAvb,CAAA,EAAAA,CAcD;;AAAA,aAAAsH,CAAA,CAAA2E,CAAA,EAAAC,CAAA,EAAAlE,CAAA,EAAAA;AAMA5Q,WAAA6U,GAAA7U,GAAA,IAAA6U,CAAA7U,EAMAA,KAAA8U,IAAA9U,GAAA,IAAA8U,CANA9U,EAYAA,KAAA4Q,QAAA5Q,GAAA4Q,CAAAA,CAAAA,CAZA5Q;AAgDA;;AAAA,aAAArI,CAAA,CAAAgY,CAAA,EAAAA;AACA,aAAA,CAAA,CAAA,MAAAA,CAAAA,IAAAA,CAAAA,CAAA,UAAA,CAAA;AAXAO;;AAAAA,IAAAA,CAAAA,CAAA3f,SAAA2f,CAAAqU,UAAArU,EAEA7gB,MAAAA,CAAAC,cAAAD,CAAA6gB,CAAAA,CAAA3f,SAAAlB,EAAA,YAAAA,EAAA;AAAqDO,MAAAA,KAAAA,EAAAA,CAAA;AAArD,KAAAP,CAFA6gB,EAoBAA,CAAAA,CAAAvY,MAAAuY,GAAAvY,CApBAuY;AA2BA,QAAAsU,CAAAA,GAAA,EAAA;AAAA,QAOAC,CAAAA,GAAA,EAPA;;AAeA,aAAAC,CAAA,CAAA90B,CAAA,EAAAghB,CAAA,EAAAA;AACA,UAAAjB,CAAA,EAAAgV,CAAA,EAAA5kB,CAAA;AACA,aAAA6Q,CAAAA,GAAAA,CAEA7Q,CAAAA,GAAA,MADAnQ,CAAAA,MAAA,CACA,KAAAA,CAAAA,GAAA,GAFAghB,MAGA+T,CAAAA,GAAAF,CAAAA,CAAA70B,CAAA60B,CAHA7T,IAKA+T,CALA/T,IAOAjB,CAAAA,GAAA/L,CAAAA,CAAAhU,CAAAgU,EAAAhU,CAAA,IAAAA,CAAAA,IAAA,CAAAA,GAAA,CAAA,CAAAA,GAAA,CAAAgU,EAAA,CAAA,CAAAA,CAAA+L,EACA5P,CAAAA,KACA0kB,CAAAA,CAAA70B,CAAA60B,CAAAA,GAAA9U,CADA5P,CADA4P,EAGAA,CAVAiB,CAAAA,GAUAjB,CAGA5P,CAAAA,GAAAA,CAAA,GAAAA,KADAnQ,CAAAA,IAAA,CACAmQ,KAAAnQ,CAAAA,GAAA,GAHA+f,MAIAgV,CAAAA,GAAAH,CAAAA,CAAA50B,CAAA40B,CAJA7U,IAMAgV,CANAhV,IAQAA,CAAAA,GAAA/L,CAAAA,CAAAhU,CAAAgU,EAAAhU,CAAAA,GAAA,CAAAA,GAAA,CAAA,CAAAA,GAAA,CAAAgU,EAAA,CAAA,CAAAA,CAAA+L,EACA5P,CAAAA,KACAykB,CAAAA,CAAA50B,CAAA40B,CAAAA,GAAA7U,CADA5P,CADA4P,EAGAA,CAXAA,CAVA;AAwCA;;AAAA,aAAAiV,CAAA,CAAAh1B,CAAA,EAAAghB,CAAA,EAAAA;AACA,UAAAuI,KAAAA,CAAAvpB,CAAAupB,CAAA,EACA,OAAAvI,CAAAA,GAAAiU,CAAAjU,GAAAkU,CAAA;;AACA,UAAAlU,CAAA,EAAA;AACA,YAAAhhB,CAAAA,GAAA,CAAA,EACA,OAAAi1B,CAAA;AACA,YAAAj1B,CAAAA,IAAAm1B,CAAA,EACA,OAAAC,CAAA;AAAAA,OAJA,MAKK;AACL,YAAAp1B,CAAAA,IAAAA,CAAAq1B,CAAA,EACA,OAAAC,CAAA;AACA,YAAAt1B,CAAAA,GAAA,CAAAA,IAAAq1B,CAAA,EACA,OAAAE,CAAA;AAEA;;AAAA,aAAAv1B,CAAAA,GAAA,CAAAA,GACAg1B,CAAAA,CAAAA,CAAAh1B,CAAAg1B,EAAAhU,CAAAgU,CAAAA,CAAAQ,GAAAR,EADAh1B,GAEAgU,CAAAA,CAAAhU,CAAAA,GAAAy1B,CAAAz1B,GAAA,CAAAgU,EAAAhU,CAAAA,GAAAy1B,CAAAz1B,GAAA,CAAAgU,EAAAgN,CAAAhN,CAFA;AAqBA;;AAAA,aAAAA,CAAA,CAAA0hB,CAAA,EAAAC,CAAA,EAAA3U,CAAA,EAAAA;AACA,aAAA,IAAAV,CAAA,CAAAoV,CAAA,EAAAC,CAAA,EAAA3U,CAAA,CAAA;AA5CAV;;AAAAA,IAAAA,CAAAA,CAAAwU,OAAAxU,GAAAwU,CAAAxU,EAkCAA,CAAAA,CAAA0U,UAAA1U,GAAA0U,CAlCA1U,EAwDAA,CAAAA,CAAAtM,QAAAsM,GAAAtM,CAxDAsM;AAiEA,QAAAsV,CAAAA,GAAA7yB,IAAAA,CAAAyJ,GAAA;;AASA,aAAA4e,CAAA,CAAA7Z,CAAA,EAAAyP,CAAA,EAAA6U,CAAA,EAAAA;AACA,UAAA,MAAAtkB,CAAAA,CAAA/P,MAAA,EACA,MAAAqE,KAAAA,CAAA,cAAAA,CAAA;AACA,UAAA,UAAA0L,CAAA,IAAA,eAAAA,CAAA,IAAA,gBAAAA,CAAA,IAAA,gBAAAA,CAAA,EACA,OAAA2jB,CAAA;AASA,UARA,YAAA,OAAAlU,CAAA,IAEA6U,CAAAA,GAAA7U,CAAA6U,EACA7U,CAAAA,GAAAA,CAAA,CAHA,IAKAA,CAAAA,GAAAA,CAAAA,CAAAA,CALA,EAKAA,CAEA6U,CAAAA,GAAAA,CAAAA,IAAA,EAFA7U,IAGA,CAHAA,IAGA,KAAA6U,CAAA,EACA,MAAAvlB,UAAAA,CAAA,OAAAA,CAAA;AAEA,UAAAzP,CAAA;AACA,UAAA,CAAAA,CAAAA,GAAA0Q,CAAAA,CAAAtF,OAAAsF,CAAA,GAAAA,CAAA,IAAA,CAAA,EACA,MAAA1L,KAAAA,CAAA,iBAAAA,CAAA;AACA,UAAA,MAAAhF,CAAA,EACA,OAAAuqB,CAAAA,CAAA7Z,CAAAA,CAAAiQ,SAAAjQ,CAAA,CAAAA,CAAA6Z,EAAApK,CAAAoK,EAAAyK,CAAAzK,CAAAA,CAAAoK,GAAApK,EAAA;;AAQA,WAHA,IAAA0K,CAAAA,GAAAd,CAAAA,CAAAY,CAAAA,CAAAC,CAAAD,EAAA,CAAAA,CAAAZ,CAAA,EAEA1X,CAAAA,GAAA4X,CAFA,EAGAv2B,CAAAA,GAAA,CAAA,EAAmBA,CAAAA,GAAA4S,CAAAA,CAAA/P,MAAnB,EAAmC7C,CAAAA,IAAA,CAAnC,EAAmC;AACnC,YAAAyF,CAAAA,GAAArB,IAAAA,CAAA8qB,GAAA9qB,CAAA,CAAAA,EAAAwO,CAAAA,CAAA/P,MAAA+P,GAAA5S,CAAAoE,CAAA;AAAA,YACA/C,CAAAA,GAAAqlB,QAAAA,CAAA9T,CAAAA,CAAAiQ,SAAAjQ,CAAA5S,CAAA4S,EAAA5S,CAAAA,GAAAyF,CAAAmN,CAAA8T,EAAAwQ,CAAAxQ,CADA;;AAEA,YAAAjhB,CAAAA,GAAA,CAAA,EAAA;AACA,cAAA2xB,CAAAA,GAAAf,CAAAA,CAAAY,CAAAA,CAAAC,CAAAD,EAAAxxB,CAAAwxB,CAAAZ,CAAA;AACA1X,UAAAA,CAAAA,GAAAA,CAAAA,CAAA1Q,GAAA0Q,CAAAyY,CAAAzY,EAAAK,GAAAL,CAAA0X,CAAAA,CAAAh1B,CAAAg1B,CAAA1X,CAAAA;AAAAtd,SAFA,MAKAsd,CAAAA,GAAAA,CADAA,CAAAA,GAAAA,CAAAA,CAAA1Q,GAAA0Q,CAAAwY,CAAAxY,CACAA,EAAAK,GAAAL,CAAA0X,CAAAA,CAAAh1B,CAAAg1B,CAAA1X,CAAAA;AAIA;;AAAA,aADAA,CAAAA,CAAA0D,QAAA1D,GAAA0D,CAAA1D,EACAA,CAAA;AAoBA;;AAAA,aAAA8H,CAAA,CAAAoG,CAAA,EAAAxK,CAAA,EAAAA;AACA,aAAA,YAAA,OAAAwK,CAAA,GACAwJ,CAAAA,CAAAxJ,CAAAwJ,EAAAhU,CAAAgU,CADA,GAEA,YAAA,OAAAxJ,CAAA,GACAJ,CAAAA,CAAAI,CAAAJ,EAAApK,CAAAoK,CADA,GAGApX,CAAAA,CAAAwX,CAAAA,CAAAvG,GAAAjR,EAAAwX,CAAAA,CAAAtG,IAAAlR,EAAA,aAAA,OAAAgN,CAAA,GAAAA,CAAA,GAAAwK,CAAAA,CAAAxK,QAAAhN,CALA;AAVAsM;;AAAAA,IAAAA,CAAAA,CAAA8K,UAAA9K,GAAA8K,CAAA9K,EAyBAA,CAAAA,CAAA8E,SAAA9E,GAAA8E,CAzBA9E;AAmCA,QAcAmV,CAAAA,GAAAO,UAdA;AAAA,QAqBAb,CAAAA,GAAAM,CAAAA,GAAAA,CArBA;AAAA,QA4BAJ,CAAAA,GAAAF,CAAAA,GAAA,CA5BA;AAAA,QAmCAc,CAAAA,GAAAnB,CAAAA,CA5BA,KAAA,EA4BAA,CAnCA;AAAA,QAyCAI,CAAAA,GAAAJ,CAAAA,CAAA,CAAAA,CAzCA;AA+CAxU,IAAAA,CAAAA,CAAA4U,IAAA5U,GAAA4U,CAAA5U;AAMA,QAAA2U,CAAAA,GAAAH,CAAAA,CAAA,CAAAA,EAAA,CAAA,CAAAA,CAAA;AAMAxU,IAAAA,CAAAA,CAAA2U,KAAA3U,GAAA2U,CAAA3U;AAMA,QAAA4V,CAAAA,GAAApB,CAAAA,CAAA,CAAAA,CAAA;AAMAxU,IAAAA,CAAAA,CAAA4V,GAAA5V,GAAA4V,CAAA5V;AAMA,QAAA6V,CAAAA,GAAArB,CAAAA,CAAA,CAAAA,EAAA,CAAA,CAAAA,CAAA;AAMAxU,IAAAA,CAAAA,CAAA6V,IAAA7V,GAAA6V,CAAA7V;;AAMA,QAAA8V,CAAAA,GAAAtB,CAAAA,CAAAA,CAAA,CAAAA,CAAA;;AAMAxU,IAAAA,CAAAA,CAAA8V,OAAA9V,GAAA8V,CAAA9V;AAMA,QAAAiV,CAAAA,GAAAvhB,CAAAA,CAAAA,CAAA,CAAAA,EAAA,UAAAA,EAAA,CAAA,CAAAA,CAAA;AAMAsM,IAAAA,CAAAA,CAAAiV,SAAAjV,GAAAiV,CAAAjV;AAMA,QAAA8U,CAAAA,GAAAphB,CAAAA,CAAAA,CAAA,CAAAA,EAAA,CAAA,CAAAA,EAAA,CAAA,CAAAA,CAAA;AAMAsM,IAAAA,CAAAA,CAAA8U,kBAAA9U,GAAA8U,CAAA9U;AAMA,QAAAgV,CAAAA,GAAAthB,CAAAA,CAAA,CAAAA,EAAA,CAAA,UAAAA,EAAA,CAAA,CAAAA,CAAA;AAMAsM,IAAAA,CAAAA,CAAAgV,SAAAhV,GAAAgV,CAAAhV;AAMA,QAAA+V,CAAAA,GAAA/V,CAAAA,CAAA3f,SAAA;AAMA01B,IAAAA,CAAAA,CAAAC,KAAAD,GAAA,YAAA;AACA,aAAAjmB,KAAA4Q,QAAA5Q,GAAAA,KAAA6U,GAAA7U,KAAA,CAAAA,GAAAA,KAAA6U,GAAA;AAAAA,KADAoR,EAQAA,CAAAA,CAAAruB,QAAAquB,GAAA,YAAA;AACA,aAAAjmB,KAAA4Q,QAAA5Q,GAAA4Q,CACA5Q,KAAA8U,IAAA9U,KAAA,CADA4Q,IACAyU,CADAzU,IACA5Q,KAAA6U,GAAA7U,KAAA,CADA4Q,CAAA5Q,GAEAA,KAAA8U,IAAA9U,GAAAqlB,CAAArlB,IAAAA,KAAA6U,GAAA7U,KAAA,CAAAA,CAFA;AAEA,KAXAimB,EAqBAA,CAAAA,CAAAxkB,QAAAwkB,GAAA,UAAAR,CAAA,EAAAA;AAEA,UAAA,CADAA,CAAAA,GAAAA,CAAAA,IAAA,EACA,IAAA,CAAA,IAAA,KAAAA,CAAA,EACA,MAAAvlB,UAAAA,CAAA,OAAAA,CAAA;AACA,UAAAF,KAAAmmB,MAAAnmB,EAAA,EACA,OAAA,GAAA;;AACA,UAAAA,KAAAomB,UAAApmB,EAAA,EAAA;AACA,YAAAA,KAAAqmB,EAAArmB,CAAAklB,CAAAllB,CAAA,EAAA;AAGA,cAAAsmB,CAAAA,GAAA1B,CAAAA,CAAAa,CAAAb,CAAA;AAAA,cACA2B,CAAAA,GAAAvmB,KAAAumB,GAAAvmB,CAAAsmB,CAAAtmB,CADA;AAAA,cAEAwmB,CAAAA,GAAAD,CAAAA,CAAA/pB,GAAA+pB,CAAAD,CAAAC,EAAAzD,GAAAyD,CAAAvmB,IAAAumB,CAFA;AAGA,iBAAAA,CAAAA,CAAA9kB,QAAA8kB,CAAAd,CAAAc,IAAAC,CAAAA,CAAAN,KAAAM,GAAA/kB,QAAA+kB,CAAAf,CAAAe,CAAA;AAEA;;AAAA,eAAA,MAAAxmB,KAAAolB,GAAAplB,GAAAyB,QAAAzB,CAAAylB,CAAAzlB,CAAA;AAQA;;AAAA,WAHA,IAAA0lB,CAAAA,GAAAd,CAAAA,CAAAY,CAAAA,CAAAC,CAAAD,EAAA,CAAAA,CAAAZ,EAAA5kB,KAAA4Q,QAAAgU,CAAA,EACA6B,CAAAA,GAAAzmB,IADA,EAEAkN,CAAAA,GAAA,EACA,IAAA;AACA,YAAAwZ,CAAAA,GAAAD,CAAAA,CAAAF,GAAAE,CAAAf,CAAAe,CAAA;AAAA,YAEAE,CAAAA,GAAAA,CADAF,CAAAA,CAAA3D,GAAA2D,CAAAC,CAAAA,CAAAlqB,GAAAkqB,CAAAhB,CAAAgB,CAAAD,EAAAP,KAAAO,OAAA,CACAE,EAAAllB,QAAAklB,CAAAlB,CAAAkB,CAFA;AAIA,YAAA,CADAF,CAAAA,GAAAC,CACA,EAAAP,MAAA,EAAA,EACA,OAAAQ,CAAAA,GAAAzZ,CAAA;;AAEA,eAAAyZ,CAAAA,CAAAv1B,MAAAu1B,GAAA,CAAA,GACAA,CAAAA,GAAA,MAAAA,CAAAA;;AACAzZ,QAAAA,CAAAA,GAAA,KAAAyZ,CAAA,GAAAzZ,CAAAA;AAAAA;AAAAA,KAtDA+Y,EA+DAA,CAAAA,CAAAW,WAAAX,GAAA,YAAA;AACA,aAAAjmB,KAAA8U,IAAA;AAAAA,KAhEAmR,EAuEAA,CAAAA,CAAAY,mBAAAZ,GAAA,YAAA;AACA,aAAAjmB,KAAA8U,IAAA9U,KAAA,CAAA;AAAA,KAxEAimB,EA+EAA,CAAAA,CAAAa,UAAAb,GAAA,YAAA;AACA,aAAAjmB,KAAA6U,GAAA;AAAAA,KAhFAoR,EAuFAA,CAAAA,CAAAc,kBAAAd,GAAA,YAAA;AACA,aAAAjmB,KAAA6U,GAAA7U,KAAA,CAAA;AAAA,KAxFAimB,EA+FAA,CAAAA,CAAAe,aAAAf,GAAA,YAAA;AACA,UAAAjmB,KAAAomB,UAAApmB,EAAA,EACA,OAAAA,KAAAqmB,EAAArmB,CAAAklB,CAAAllB,IAAA,EAAAA,GAAAA,KAAAolB,GAAAplB,GAAAgnB,aAAAhnB,EAAA;;AAEA,WADA,IAAAob,CAAAA,GAAA,KAAApb,KAAA8U,IAAA,GAAA9U,KAAA8U,IAAA,GAAA9U,KAAA6U,GAAA,EACAoS,CAAAA,GAAA,EAAA,EAAsBA,CAAAA,GAAA,CAAAA,IACtB,MAAA7L,CAAAA,GAAA,KAAA6L,CAAA,CADA,EAA+BA,CAAAA,EAA/B,CAA+BA;;AAG/B,aAAA,KAAAjnB,KAAA8U,IAAA,GAAAmS,CAAAA,GAAA,EAAA,GAAAA,CAAAA,GAAA,CAAA;AAAA,KAtGAhB,EA6GAA,CAAAA,CAAAE,MAAAF,GAAA,YAAA;AACA,aAAA,MAAAjmB,KAAA8U,IAAA,IAAA,MAAA9U,KAAA6U,GAAA;AAAAA,KA9GAoR,EAqHAA,CAAAA,CAAAiB,GAAAjB,GAAAA,CAAAA,CAAAE,MArHAF,EA2HAA,CAAAA,CAAAG,UAAAH,GAAA,YAAA;AACA,aAAA,CAAAjmB,KAAA4Q,QAAA,IAAA5Q,KAAA8U,IAAA9U,GAAA,CAAA;AAAA,KA5HAimB,EAmIAA,CAAAA,CAAAkB,UAAAlB,GAAA,YAAA;AACA,aAAAjmB,KAAA4Q,QAAA5Q,IAAAA,KAAA8U,IAAA9U,IAAA,CAAA;AAAA,KApIAimB,EA2IAA,CAAAA,CAAAmB,KAAAnB,GAAA,YAAA;AACA,aAAA,MAAA,IAAAjmB,KAAA6U,GAAA,CAAA;AAAAA,KA5IAoR,EAmJAA,CAAAA,CAAAoB,MAAApB,GAAA,YAAA;AACA,aAAA,MAAA,IAAAjmB,KAAA6U,GAAA,CAAA;AAAAA,KApJAoR,EA4JAA,CAAAA,CAAArG,MAAAqG,GAAA,UAAAqB,CAAA,EAAAA;AAGA,aAFA3vB,CAAAA,CAAA2vB,CAAA3vB,CAAAA,KACA2vB,CAAAA,GAAAtS,CAAAA,CAAAsS,CAAAtS,CADArd,GACA2vB,CACAtnB,KAAA4Q,QAAA5Q,KAAAsnB,CAAAA,CAAA1W,QAAA5Q,IAAAA,KAAA8U,IAAA9U,KAAA,EAAAA,IAAA,CAAAA,IAAAsnB,CAAAA,CAAAxS,IAAAwS,KAAA,EAAAA,IAAA,CADAA,KAGAtnB,KAAA8U,IAAA9U,KAAAsnB,CAAAA,CAAAxS,IAAA9U,IAAAA,KAAA6U,GAAA7U,KAAAsnB,CAAAA,CAAAzS,GAFA;AAEAA,KAjKAoR,EA0KAA,CAAAA,CAAAI,EAAAJ,GAAAA,CAAAA,CAAArG,MA1KAqG,EAiLAA,CAAAA,CAAAsB,SAAAtB,GAAA,UAAAqB,CAAA,EAAAA;AACA,aAAA,CAAAtnB,KAAAqmB,EAAArmB,CAAAsnB,CAAAtnB,CAAA;AAAAsnB,KAlLArB,EA2LAA,CAAAA,CAAAuB,GAAAvB,GAAAA,CAAAA,CAAAsB,SA3LAtB,EAmMAA,CAAAA,CAAAwB,EAAAxB,GAAAA,CAAAA,CAAAsB,SAnMAtB,EA0MAA,CAAAA,CAAA9iB,QAAA8iB,GAAA,UAAAqB,CAAA,EAAAA;AACA,aAAAtnB,KAAA0nB,IAAA1nB,CAAAsnB,CAAAtnB,IAAA,CAAA;AAAA,KA3MAimB,EAoNAA,CAAAA,CAAA0B,EAAA1B,GAAAA,CAAAA,CAAA9iB,QApNA8iB,EA2NAA,CAAAA,CAAA2B,eAAA3B,GAAA,UAAAqB,CAAA,EAAAA;AACA,aAAAtnB,KAAA0nB,IAAA1nB,CAAAsnB,CAAAtnB,KAAA,CAAA;AAAA,KA5NAimB,EAqOAA,CAAAA,CAAA4B,GAAA5B,GAAAA,CAAAA,CAAA2B,eArOA3B,EA6OAA,CAAAA,CAAA6B,EAAA7B,GAAAA,CAAAA,CAAA2B,eA7OA3B,EAoPAA,CAAAA,CAAA8B,WAAA9B,GAAA,UAAAqB,CAAA,EAAAA;AACA,aAAAtnB,KAAA0nB,IAAA1nB,CAAAsnB,CAAAtnB,IAAA,CAAA;AAAA,KArPAimB,EA8PAA,CAAAA,CAAA+B,EAAA/B,GAAAA,CAAAA,CAAA8B,WA9PA9B,EAqQAA,CAAAA,CAAA/iB,kBAAA+iB,GAAA,UAAAqB,CAAA,EAAAA;AACA,aAAAtnB,KAAA0nB,IAAA1nB,CAAAsnB,CAAAtnB,KAAA,CAAA;AAAA,KAtQAimB,EA+QAA,CAAAA,CAAAgC,GAAAhC,GAAAA,CAAAA,CAAA/iB,kBA/QA+iB,EAuRAA,CAAAA,CAAAiC,EAAAjC,GAAAA,CAAAA,CAAA/iB,kBAvRA+iB,EA+RAA,CAAAA,CAAA/G,OAAA+G,GAAA,UAAAqB,CAAA,EAAAA;AAGA,UAFA3vB,CAAAA,CAAA2vB,CAAA3vB,CAAAA,KACA2vB,CAAAA,GAAAtS,CAAAA,CAAAsS,CAAAtS,CADArd,GAEAqI,KAAAqmB,EAAArmB,CAAAsnB,CAAAtnB,CAAA,EACA,OAAA,CAAA;AACA,UAAAmoB,CAAAA,GAAAnoB,KAAAomB,UAAApmB,EAAA;AAAA,UACAooB,CAAAA,GAAAd,CAAAA,CAAAlB,UAAAkB,EADA;AAEA,aAAAa,CAAAA,IAAAA,CAAAC,CAAAD,GAAAC,CACA,CADAD,GACA,CACAA,CADA,IACAC,CADA,GAEA,CAFA,GAIApoB,KAAA4Q,QAAA5Q,GAGAsnB,CAAAA,CAAAxS,IAAAwS,KAAA,CAAAA,GAAAtnB,KAAA8U,IAAA9U,KAAA,CAAAsnB,IAAAA,CAAAA,CAAAxS,IAAAwS,KAAAtnB,KAAA8U,IAAAwS,IAAAA,CAAAA,CAAAzS,GAAAyS,KAAA,CAAAA,GAAAtnB,KAAA6U,GAAA7U,KAAA,CAAAsnB,GAAA,CAAA,CAAAA,GAAA,CAHAtnB,GACAA,KAAA8iB,GAAA9iB,CAAAsnB,CAAAtnB,EAAAomB,UAAApmB,KAAAomB,CAAA,CAAApmB,GAAA,CANA;AAMA,KA5SAimB,EAwTAA,CAAAA,CAAAyB,IAAAzB,GAAAA,CAAAA,CAAA/G,OAxTA+G,EA8TAA,CAAAA,CAAAoC,MAAApC,GAAA,YAAA;AACA,aAAA,CAAAjmB,KAAA4Q,QAAA,IAAA5Q,KAAAqmB,EAAArmB,CAAAklB,CAAAllB,CAAA,GACAklB,CADA,GAEAllB,KAAAsoB,GAAAtoB,GAAAuN,GAAAvN,CAAA8lB,CAAA9lB,CAFA;AAEA8lB,KAjUAG,EAyUAA,CAAAA,CAAAb,GAAAa,GAAAA,CAAAA,CAAAoC,MAzUApC,EAgVAA,CAAAA,CAAA1Y,GAAA0Y,GAAA,UAAAsC,CAAA,EAAAA;AACA5wB,MAAAA,CAAAA,CAAA4wB,CAAA5wB,CAAAA,KACA4wB,CAAAA,GAAAvT,CAAAA,CAAAuT,CAAAvT,CADArd;AAKA,UAAA6wB,CAAAA,GAAAxoB,KAAA8U,IAAA9U,KAAA,EAAA;AAAA,UACAyoB,CAAAA,GAAA,QAAAzoB,KAAA8U,IADA;AAAA,UAEA4T,CAAAA,GAAA1oB,KAAA6U,GAAA7U,KAAA,EAFA;AAAA,UAGA2oB,CAAAA,GAAA,QAAA3oB,KAAA6U,GAHA;AAAA,UAKA+T,CAAAA,GAAAL,CAAAA,CAAAzT,IAAAyT,KAAA,EALA;AAAA,UAMAM,CAAAA,GAAA,QAAAN,CAAAA,CAAAzT,IANA;AAAA,UAOAgU,CAAAA,GAAAP,CAAAA,CAAA1T,GAAA0T,KAAA,EAPA;AAAA,UAUAQ,CAAAA,GAAA,CAVA;AAAA,UAUAC,CAAAA,GAAA,CAVA;AAAA,UAUAC,CAAAA,GAAA,CAVA;AAAA,UAUAC,CAAAA,GAAA,CAVA;AAsBA,aAVAD,CAAAA,IAAAA,CADAC,CAAAA,IAAAP,CAAAA,IAHA,QAAAJ,CAAAA,CAAA1T,GAGA8T,CACAM,MAAA,EAAAA,EAGAD,CAAAA,IAAAA,CADAC,CAAAA,IAAAP,CAAAA,GAAAI,CACAE,MAAA,EAHAC,EAMAF,CAAAA,IAAAA,CADAC,CAAAA,IAAAP,CAAAA,GAAAI,CACAE,MAAA,EANAE,EAQAF,CAAAA,IAAAP,CAAAA,GAAAI,CARAK,EAUArlB,CAAAA,CAAAA,CANAqlB,CAAAA,IAAA,KAMArlB,KAAA,EAAAA,IATAslB,CAAAA,IAAA,KASAtlB,CAAAA,EATA,CAQAmlB,CAAAA,IAAA,KARA,KASA,EATA,IAMAC,CAAAA,IAAA,KANA,CASAplB,EAAA5D,KAAA4Q,QAAAhN,CAAA;AAAAgN,KA5WAqV,EAoXAA,CAAAA,CAAAkD,QAAAlD,GAAA,UAAAmD,CAAA,EAAAA;AAGA,aAFAzxB,CAAAA,CAAAyxB,CAAAzxB,CAAAA,KACAyxB,CAAAA,GAAApU,CAAAA,CAAAoU,CAAApU,CADArd,GAEAqI,KAAAuN,GAAAvN,CAAAopB,CAAAA,CAAAhE,GAAAgE,EAAAppB,CAAA;AAAAolB,KAvXAa,EAgYAA,CAAAA,CAAAnD,GAAAmD,GAAAA,CAAAA,CAAAkD,QAhYAlD,EAuYAA,CAAAA,CAAAoD,QAAApD,GAAA,UAAAqD,CAAA,EAAAA;AACA,UAAAtpB,KAAAmmB,MAAAnmB,EAAA,EACA,OAAA8kB,CAAA;AAKA,UAJAntB,CAAAA,CAAA2xB,CAAA3xB,CAAAA,KACA2xB,CAAAA,GAAAtU,CAAAA,CAAAsU,CAAAtU,CADArd,GAIAwsB,CAAA,EAKA,OAAAvgB,CAAAA,CAJAugB,CAAAA,CAAA3nB,GAAA2nB,CAAAnkB,KAAA6U,GAAAsP,EACAnkB,KAAA8U,IADAqP,EAEAmF,CAAAA,CAAAzU,GAFAsP,EAGAmF,CAAAA,CAAAxU,IAHAqP,CAIAvgB,EAAAugB,CAAAA,CAAAoF,QAAApF,EAAAvgB,EAAA5D,KAAA4Q,QAAAhN,CAAA;AAGA,UAAA0lB,CAAAA,CAAAnD,MAAAmD,EAAA,EACA,OAAAxE,CAAA;AACA,UAAA9kB,KAAAqmB,EAAArmB,CAAAklB,CAAAllB,CAAA,EACA,OAAAspB,CAAAA,CAAAlC,KAAAkC,KAAApE,CAAAoE,GAAAxE,CAAA;AACA,UAAAwE,CAAAA,CAAAjD,EAAAiD,CAAApE,CAAAoE,CAAA,EACA,OAAAtpB,KAAAonB,KAAApnB,KAAAklB,CAAAllB,GAAA8kB,CAAA;AAEA,UAAA9kB,KAAAomB,UAAApmB,EAAA,EACA,OAAAspB,CAAAA,CAAAlD,UAAAkD,KACAtpB,KAAAolB,GAAAplB,GAAAxD,GAAAwD,CAAAspB,CAAAA,CAAAlE,GAAAkE,EAAAtpB,CADAspB,GAGAtpB,KAAAolB,GAAAplB,GAAAxD,GAAAwD,CAAAspB,CAAAtpB,EAAAolB,GAAAplB,EAHA;AAIK,UAAAspB,CAAAA,CAAAlD,UAAAkD,EAAA,EACL,OAAAtpB,KAAAxD,GAAAwD,CAAAspB,CAAAA,CAAAlE,GAAAkE,EAAAtpB,EAAAolB,GAAAplB,EAAA;AAGA,UAAAA,KAAA2nB,EAAA3nB,CAAA6lB,CAAA7lB,KAAAspB,CAAAA,CAAA3B,EAAA2B,CAAAzD,CAAAyD,CAAA,EACA,OAAA1E,CAAAA,CAAA5kB,KAAApI,QAAAoI,KAAAspB,CAAAA,CAAA1xB,QAAA0xB,EAAA1E,EAAA5kB,KAAA4Q,QAAAgU,CAAA;AAKA,UAAA4D,CAAAA,GAAAxoB,KAAA8U,IAAA9U,KAAA,EAAA;AAAA,UACAyoB,CAAAA,GAAA,QAAAzoB,KAAA8U,IADA;AAAA,UAEA4T,CAAAA,GAAA1oB,KAAA6U,GAAA7U,KAAA,EAFA;AAAA,UAGA2oB,CAAAA,GAAA,QAAA3oB,KAAA6U,GAHA;AAAA,UAKA+T,CAAAA,GAAAU,CAAAA,CAAAxU,IAAAwU,KAAA,EALA;AAAA,UAMAT,CAAAA,GAAA,QAAAS,CAAAA,CAAAxU,IANA;AAAA,UAOAgU,CAAAA,GAAAQ,CAAAA,CAAAzU,GAAAyU,KAAA,EAPA;AAAA,UAQAE,CAAAA,GAAA,QAAAF,CAAAA,CAAAzU,GARA;AAAA,UAUAkU,CAAAA,GAAA,CAVA;AAAA,UAUAC,CAAAA,GAAA,CAVA;AAAA,UAUAC,CAAAA,GAAA,CAVA;AAAA,UAUAC,CAAAA,GAAA,CAVA;AA+BA,aAnBAD,CAAAA,IAAAA,CADAC,CAAAA,IAAAP,CAAAA,GAAAa,CACAP,MAAA,EAAAA,EAGAD,CAAAA,IAAAA,CADAC,CAAAA,IAAAP,CAAAA,GAAAc,CACAR,MAAA,EAHAC,EAIAA,CAAAA,IAAA,KAJAA,EAMAD,CAAAA,IAAAA,CADAC,CAAAA,IAAAN,CAAAA,GAAAG,CACAE,MAAA,EANAC,EASAF,CAAAA,IAAAA,CADAC,CAAAA,IAAAP,CAAAA,GAAAe,CACAT,MAAA,EATAE,EAUAD,CAAAA,IAAA,KAVAC,EAYAF,CAAAA,IAAAA,CADAC,CAAAA,IAAAN,CAAAA,GAAAI,CACAC,MAAA,EAZAE,EAaAD,CAAAA,IAAA,KAbAC,EAeAF,CAAAA,IAAAA,CADAC,CAAAA,IAAAL,CAAAA,GAAAE,CACAE,MAAA,EAfAE,EAiBAF,CAAAA,IAAAP,CAAAA,GAAAgB,CAAAhB,GAAAC,CAAAA,GAAAK,CAAAN,GAAAE,CAAAA,GAAAG,CAAAL,GAAAG,CAAAA,GAAAC,CAjBAK,EAmBArlB,CAAAA,CAAAA,CAZAqlB,CAAAA,IAAA,KAYArlB,KAAA,EAAAA,IAlBAslB,CAAAA,IAAA,KAkBAtlB,CAAAA,EAlBA,CAiBAmlB,CAAAA,IAAA,KAjBA,KAkBA,EAlBA,IAeAC,CAAAA,IAAA,KAfA,CAkBAplB,EAAA5D,KAAA4Q,QAAAhN,CAAA;AAAAgN,KA3cAqV,EAodAA,CAAAA,CAAAzpB,GAAAypB,GAAAA,CAAAA,CAAAoD,QApdApD,EA4dAA,CAAAA,CAAAwD,MAAAxD,GAAA,UAAAyD,CAAA,EAAAA;AAGA,UAFA/xB,CAAAA,CAAA+xB,CAAA/xB,CAAAA,KACA+xB,CAAAA,GAAA1U,CAAAA,CAAA0U,CAAA1U,CADArd,GAEA+xB,CAAAA,CAAAvD,MAAAuD,EAAA,EACA,MAAAj0B,KAAAA,CAAA,kBAAAA,CAAA;AAaA,UAWAk0B,CAXA,EAWAlD,CAXA,EAWAvoB,CAXA;AAVA,UAAAimB,CAAA,EAIA,OAAAnkB,KAAA4Q,QAAA5Q,IAAA4Q,CACA,UADAA,KACA5Q,KAAA8U,IADA9U,IACA8U,CACA,CADAA,KACA4U,CAAAA,CAAA7U,GAFA7U,IAEA6U,CAAA,CAAAA,KAAA6U,CAAAA,CAAA5U,IAFA9U,GAYA4D,CAAAA,CAAAA,CANA5D,KAAA4Q,QAAA5Q,GAAAmkB,CAAAA,CAAAyF,KAAA5pB,GAAAmkB,CAAAA,CAAA0F,KAMAjmB,EALA5D,KAAA6U,GAKAjR,EAJA5D,KAAA8U,IAIAlR,EAHA8lB,CAAAA,CAAA7U,GAGAjR,EAFA8lB,CAAAA,CAAA5U,IAEAlR,CAAAA,EAAAugB,CAAAA,CAAAoF,QAAApF,EAAAvgB,EAAA5D,KAAA4Q,QAAAhN,CAZA5D,GAIAA,IAJA;AAeA,UAAAA,KAAAmmB,MAAAnmB,EAAA,EACA,OAAAA,KAAA4Q,QAAA5Q,GAAA6kB,CAAA7kB,GAAA8kB,CAAA;;AAEA,UAAA9kB,KAAA4Q,QAAA,EA6BK;AAKL,YAFA8Y,CAAAA,CAAA9Y,QAAA8Y,KACAA,CAAAA,GAAAA,CAAAA,CAAAI,UAAAJ,EADAA,GAEAA,CAAAA,CAAA1B,EAAA0B,CAAA1pB,IAAA0pB,CAAA,EACA,OAAA7E,CAAA;AACA,YAAA6E,CAAAA,CAAA1B,EAAA0B,CAAA1pB,KAAA+pB,IAAA/pB,CAAA,CAAAA,CAAA0pB,CAAA,EACA,OAAA3D,CAAA;AACA7nB,QAAAA,CAAAA,GAAA2mB,CAAA3mB;AAAA2mB,OAtCA,MAAA;AAGA,YAAA7kB,KAAAqmB,EAAArmB,CAAAklB,CAAAllB,CAAA,EACA,OAAA0pB,CAAAA,CAAArD,EAAAqD,CAAA5D,CAAA4D,KAAAA,CAAAA,CAAArD,EAAAqD,CAAA1D,CAAA0D,CAAAA,GACAxE,CADAwE,GAEAA,CAAAA,CAAArD,EAAAqD,CAAAxE,CAAAwE,IACA5D,CADA4D,GACA5D,CAIA6D,CAAAA,GADA3pB,KAAAgqB,GAAAhqB,CAAA,CAAAA,EACAumB,GADAvmB,CACA0pB,CADA1pB,EACAiqB,GADAjqB,CACA,CADAA,CAHA8lB,EAKAO,EALAP,CAKAhB,CALAgB,IAMA4D,CAAAA,CAAAtD,UAAAsD,KAAA5D,CAAA4D,GAAA1D,CANAF,IAQAW,CAAAA,GAAAzmB,KAAA8iB,GAAA9iB,CAAA0pB,CAAAA,CAAAltB,GAAAktB,CAAAC,CAAAD,CAAA1pB,CAAAymB,EACAvoB,CAAAA,GAAAyrB,CAAAA,CAAApc,GAAAoc,CAAAlD,CAAAA,CAAAF,GAAAE,CAAAiD,CAAAjD,CAAAkD,CATA7D,CAHA;AAgBS,YAAA4D,CAAAA,CAAArD,EAAAqD,CAAAxE,CAAAwE,CAAA,EACT,OAAA1pB,KAAA4Q,QAAA5Q,GAAA6kB,CAAA7kB,GAAA8kB,CAAA;AACA,YAAA9kB,KAAAomB,UAAApmB,EAAA,EACA,OAAA0pB,CAAAA,CAAAtD,UAAAsD,KACA1pB,KAAAolB,GAAAplB,GAAAumB,GAAAvmB,CAAA0pB,CAAAA,CAAAtE,GAAAsE,EAAA1pB,CADA0pB,GAEA1pB,KAAAolB,GAAAplB,GAAAumB,GAAAvmB,CAAA0pB,CAAA1pB,EAAAolB,GAAAplB,EAFA;AAGS,YAAA0pB,CAAAA,CAAAtD,UAAAsD,EAAA,EACT,OAAA1pB,KAAAumB,GAAAvmB,CAAA0pB,CAAAA,CAAAtE,GAAAsE,EAAA1pB,EAAAolB,GAAAplB,EAAA;AACA9B,QAAAA,CAAAA,GAAA4mB,CAAA5mB;AAmBA;;AAAA,WADAuoB,CAAAA,GAAAzmB,IACA,EAAAymB,CAAAA,CAAAwB,GAAAxB,CAAAiD,CAAAjD,CAAA,GAAA;AAGAkD,QAAAA,CAAAA,GAAAh3B,IAAAA,CAAAC,GAAAD,CAAA,CAAAA,EAAAA,IAAAA,CAAAkC,KAAAlC,CAAA8zB,CAAAA,CAAA7uB,QAAA6uB,KAAAiD,CAAAA,CAAA9xB,QAAA8xB,EAAA/2B,CAAAA,CAAAg3B;;AAWA,aAPA,IAAAO,CAAAA,GAAAv3B,IAAAA,CAAAw3B,IAAAx3B,CAAAA,IAAAA,CAAAmS,GAAAnS,CAAAg3B,CAAAh3B,IAAAA,IAAAA,CAAAy3B,GAAAz3B,CAAA,EACA03B,CAAAA,GAAAH,CAAAA,IAAA,EAAAA,GAAA,CAAAA,GAAA1E,CAAAA,CAAA,CAAAA,EAAA0E,CAAAA,GAAA,EAAA1E,CADA,EAKA8E,CAAAA,GAAA1F,CAAAA,CAAA+E,CAAA/E,CALA,EAMA2F,CAAAA,GAAAD,CAAAA,CAAA9tB,GAAA8tB,CAAAZ,CAAAY,CACA,EAAAC,CAAAA,CAAAnE,UAAAmE,MAAAA,CAAAA,CAAAvC,EAAAuC,CAAA9D,CAAA8D,CAAA,GAGAA,CAAAA,GAAAA,CADAD,CAAAA,GAAA1F,CAAAA,CADA+E,CAAAA,IAAAU,CACAzF,EAAA5kB,KAAA4Q,QAAAgU,CACA2F,EAAA/tB,GAAA+tB,CAAAb,CAAAa,CAAAA;;AAKAD,QAAAA,CAAAA,CAAAnE,MAAAmE,OACAA,CAAAA,GAAAxE,CADAwE,GAGApsB,CAAAA,GAAAA,CAAAA,CAAAqP,GAAArP,CAAAosB,CAAApsB,CAHAosB,EAIA7D,CAAAA,GAAAA,CAAAA,CAAA3D,GAAA2D,CAAA8D,CAAA9D,CAJA6D;AAMA;;AAAA,aAAApsB,CAAA;AAAAA,KApkBA+nB,EA6kBAA,CAAAA,CAAAM,GAAAN,GAAAA,CAAAA,CAAAwD,MA7kBAxD,EAolBAA,CAAAA,CAAAuE,MAAAvE,GAAA,UAAAyD,CAAA,EAAAA;AAKA,aAJA/xB,CAAAA,CAAA+xB,CAAA/xB,CAAAA,KACA+xB,CAAAA,GAAA1U,CAAAA,CAAA0U,CAAA1U,CADArd,GAIAwsB,CAAAA,GAOAvgB,CAAAA,CAAAA,CANA5D,KAAA4Q,QAAA5Q,GAAAmkB,CAAAA,CAAAsG,KAAAzqB,GAAAmkB,CAAAA,CAAAuG,KAMA9mB,EALA5D,KAAA6U,GAKAjR,EAJA5D,KAAA8U,IAIAlR,EAHA8lB,CAAAA,CAAA7U,GAGAjR,EAFA8lB,CAAAA,CAAA5U,IAEAlR,CAAAA,EAAAugB,CAAAA,CAAAoF,QAAApF,EAAAvgB,EAAA5D,KAAA4Q,QAAAhN,CAPAugB,GAUAnkB,KAAA8iB,GAAA9iB,CAAAA,KAAAumB,GAAAvmB,CAAA0pB,CAAA1pB,EAAAxD,GAAAwD,CAAA0pB,CAAA1pB,CAAAA,CAVA;AAUA0pB,KAnmBAzD,EA4mBAA,CAAAA,CAAA0E,GAAA1E,GAAAA,CAAAA,CAAAuE,MA5mBAvE,EAonBAA,CAAAA,CAAAQ,GAAAR,GAAAA,CAAAA,CAAAuE,MApnBAvE,EA0nBAA,CAAAA,CAAAqC,GAAArC,GAAA,YAAA;AACA,aAAAriB,CAAAA,CAAAA,CAAA5D,KAAA6U,GAAAjR,EAAAiR,CAAA7U,KAAA8U,IAAAlR,EAAA5D,KAAA4Q,QAAAhN,CAAA;AAAAgN,KA3nBAqV,EAmoBAA,CAAAA,CAAA2E,GAAA3E,GAAA,UAAAqB,CAAA,EAAAA;AAGA,aAFA3vB,CAAAA,CAAA2vB,CAAA3vB,CAAAA,KACA2vB,CAAAA,GAAAtS,CAAAA,CAAAsS,CAAAtS,CADArd,GAEAiM,CAAAA,CAAA5D,KAAA6U,GAAA7U,GAAAsnB,CAAAA,CAAAzS,GAAAjR,EAAA5D,KAAA8U,IAAA9U,GAAAsnB,CAAAA,CAAAxS,IAAAlR,EAAA5D,KAAA4Q,QAAAhN,CAAA;AAAAgN,KAtoBAqV,EA8oBAA,CAAAA,CAAA4E,EAAA5E,GAAA,UAAAqB,CAAA,EAAAA;AAGA,aAFA3vB,CAAAA,CAAA2vB,CAAA3vB,CAAAA,KACA2vB,CAAAA,GAAAtS,CAAAA,CAAAsS,CAAAtS,CADArd,GAEAiM,CAAAA,CAAA5D,KAAA6U,GAAA7U,GAAAsnB,CAAAA,CAAAzS,GAAAjR,EAAA5D,KAAA8U,IAAA9U,GAAAsnB,CAAAA,CAAAxS,IAAAlR,EAAA5D,KAAA4Q,QAAAhN,CAAA;AAAAgN,KAjpBAqV,EAypBAA,CAAAA,CAAA6E,GAAA7E,GAAA,UAAAqB,CAAA,EAAAA;AAGA,aAFA3vB,CAAAA,CAAA2vB,CAAA3vB,CAAAA,KACA2vB,CAAAA,GAAAtS,CAAAA,CAAAsS,CAAAtS,CADArd,GAEAiM,CAAAA,CAAA5D,KAAA6U,GAAA7U,GAAAsnB,CAAAA,CAAAzS,GAAAjR,EAAA5D,KAAA8U,IAAA9U,GAAAsnB,CAAAA,CAAAxS,IAAAlR,EAAA5D,KAAA4Q,QAAAhN,CAAA;AAAAgN,KA5pBAqV,EAoqBAA,CAAAA,CAAA8E,SAAA9E,GAAA,UAAA+E,CAAA,EAAAA;AAGA,aAFArzB,CAAAA,CAAAqzB,CAAArzB,CAAAA,KACAqzB,CAAAA,GAAAA,CAAAA,CAAA9E,KAAA8E,EADArzB,GAEA,MAAAqzB,CAAAA,IAAA,EAAA,IACAhrB,IADA,GAEAgrB,CAAAA,GAAA,EAAAA,GACApnB,CAAAA,CAAA5D,KAAA6U,GAAA7U,IAAAgrB,CAAApnB,EAAA5D,KAAA8U,IAAA9U,IAAAgrB,CAAAhrB,GAAAA,KAAA6U,GAAA7U,KAAA,KAAAgrB,CAAApnB,EAAA5D,KAAA4Q,QAAAhN,CADAonB,GAGApnB,CAAAA,CAAA,CAAAA,EAAA5D,KAAA6U,GAAA7U,IAAAgrB,CAAAA,GAAA,EAAApnB,EAAA5D,KAAA4Q,QAAAhN,CALA;AAKAgN,KA5qBAqV,EAqrBAA,CAAAA,CAAAgE,GAAAhE,GAAAA,CAAAA,CAAA8E,SArrBA9E,EA4rBAA,CAAAA,CAAAgF,UAAAhF,GAAA,UAAA+E,CAAA,EAAAA;AAGA,aAFArzB,CAAAA,CAAAqzB,CAAArzB,CAAAA,KACAqzB,CAAAA,GAAAA,CAAAA,CAAA9E,KAAA8E,EADArzB,GAEA,MAAAqzB,CAAAA,IAAA,EAAA,IACAhrB,IADA,GAEAgrB,CAAAA,GAAA,EAAAA,GACApnB,CAAAA,CAAA5D,KAAA6U,GAAA7U,KAAAgrB,CAAAhrB,GAAAA,KAAA8U,IAAA9U,IAAA,KAAAgrB,CAAApnB,EAAA5D,KAAA8U,IAAA9U,IAAAgrB,CAAApnB,EAAA5D,KAAA4Q,QAAAhN,CADAonB,GAGApnB,CAAAA,CAAA5D,KAAA8U,IAAA9U,IAAAgrB,CAAAA,GAAA,EAAApnB,EAAA5D,KAAA8U,IAAA9U,IAAA,CAAAA,GAAA,CAAAA,GAAA,CAAA,CAAA4D,EAAA5D,KAAA4Q,QAAAhN,CALA;AAKAgN,KApsBAqV,EA6sBAA,CAAAA,CAAA+D,GAAA/D,GAAAA,CAAAA,CAAAgF,UA7sBAhF,EAotBAA,CAAAA,CAAAiF,kBAAAjF,GAAA,UAAA+E,CAAA,EAAAA;AAIA,UAHArzB,CAAAA,CAAAqzB,CAAArzB,CAAAA,KACAqzB,CAAAA,GAAAA,CAAAA,CAAA9E,KAAA8E,EADArzB,GAGA,OADAqzB,CAAAA,IAAA,EACA,CAAA,EACA,OAAAhrB,IAAA;AAEA,UAAA8U,CAAAA,GAAA9U,KAAA8U,IAAA;AACA,aAAAkW,CAAAA,GAAA,EAAAA,GAEApnB,CAAAA,CADA5D,KAAA6U,GAAA7U,KACAgrB,CADAhrB,GACA8U,CAAAA,IAAA,KAAAkW,CAAApnB,EAAAkR,CAAAA,KAAAkW,CAAApnB,EAAA5D,KAAA4Q,QAAAhN,CAFAonB,GAIApnB,CAAAA,CADS,OAAAonB,CAAA,GACTlW,CADS,GAGTA,CAAAA,KAAAkW,CAAAA,GAAA,EAFApnB,EAAA,CAAAA,EAAA5D,KAAA4Q,QAAAhN,CAJA;AAIAgN,KAhuBAqV,EA4uBAA,CAAAA,CAAA8D,IAAA9D,GAAAA,CAAAA,CAAAiF,kBA5uBAjF,EAovBAA,CAAAA,CAAAkF,KAAAlF,GAAAA,CAAAA,CAAAiF,kBApvBAjF,EA0vBAA,CAAAA,CAAAmF,QAAAnF,GAAA,YAAA;AACA,aAAAjmB,KAAA4Q,QAAA5Q,GAEA4D,CAAAA,CAAA5D,KAAA6U,GAAAjR,EAAA5D,KAAA8U,IAAAlR,EAAAkR,CAAA,CAAAlR,CAFA5D,GACAA,IADA;AACAA,KA5vBAimB,EAowBAA,CAAAA,CAAA6D,UAAA7D,GAAA,YAAA;AACA,aAAAjmB,KAAA4Q,QAAA5Q,GACAA,IADAA,GAEA4D,CAAAA,CAAA5D,KAAA6U,GAAAjR,EAAA5D,KAAA8U,IAAAlR,EAAAkR,CAAA,CAAAlR,CAFA;AAEA,KAvwBAqiB,EA+wBAA,CAAAA,CAAAoF,OAAApF,GAAA,UAAA6B,CAAA,EAAAA;AACA,aAAAA,CAAAA,GAAA9nB,KAAAsrB,SAAAtrB,EAAA8nB,GAAA9nB,KAAAurB,SAAAvrB,EAAA;AAAAurB,KAhxBAtF,EAuxBAA,CAAAA,CAAAqF,SAAArF,GAAA,YAAA;AACA,UAAAjV,CAAAA,GAAAhR,KAAA8U,IAAA;AAAA,UACA/D,CAAAA,GAAA/Q,KAAA6U,GADA;AAEA,aAAA,CACA,MAAA9D,CADA,EAEAA,CAAAA,KAAA,CAAAA,GAAA,GAFA,EAGAA,CAAAA,KAAA,EAAAA,GAAA,GAHA,EAIAA,CAAAA,KAAA,EAJA,EAKA,MAAAC,CALA,EAMAA,CAAAA,KAAA,CAAAA,GAAA,GANA,EAOAA,CAAAA,KAAA,EAAAA,GAAA,GAPA,EAQAA,CAAAA,KAAA,EARA,CAAA;AAQA,KAlyBAiV,EA0yBAA,CAAAA,CAAAsF,SAAAtF,GAAA,YAAA;AACA,UAAAjV,CAAAA,GAAAhR,KAAA8U,IAAA;AAAA,UACA/D,CAAAA,GAAA/Q,KAAA6U,GADA;AAEA,aAAA,CACA7D,CAAAA,KAAA,EADA,EAEAA,CAAAA,KAAA,EAAAA,GAAA,GAFA,EAGAA,CAAAA,KAAA,CAAAA,GAAA,GAHA,EAIA,MAAAA,CAJA,EAKAD,CAAAA,KAAA,EALA,EAMAA,CAAAA,KAAA,EAAAA,GAAA,GANA,EAOAA,CAAAA,KAAA,CAAAA,GAAA,GAPA,EAQA,MAAAA,CARA,CAAA;AAQAA,KArzBAkV,EAg0BA/V,CAAAA,CAAAsb,SAAAtb,GAAA,UAAA2B,CAAA,EAAAjB,CAAA,EAAAkX,CAAA,EAAAA;AACA,aAAAA,CAAAA,GAAA5X,CAAAA,CAAAub,WAAAvb,CAAA2B,CAAA3B,EAAAU,CAAAV,CAAA4X,GAAA5X,CAAAA,CAAAwb,WAAAxb,CAAA2B,CAAA3B,EAAAU,CAAAV,CAAA;AAAAU,KAj0BAqV,EA00BA/V,CAAAA,CAAAub,WAAAvb,GAAA,UAAA2B,CAAA,EAAAjB,CAAA,EAAAA;AACA,aAAA,IAAAV,CAAA,CACA2B,CAAAA,CAAA,CAAAA,CAAAA,GACAA,CAAAA,CAAA,CAAAA,CAAAA,IAAA,CADAA,GAEAA,CAAAA,CAAA,CAAAA,CAAAA,IAAA,EAFAA,GAGAA,CAAAA,CAAA,CAAAA,CAAAA,IAAA,EAJA,EAKAA,CAAAA,CAAA,CAAAA,CAAAA,GACAA,CAAAA,CAAA,CAAAA,CAAAA,IAAA,CADAA,GAEAA,CAAAA,CAAA,CAAAA,CAAAA,IAAA,EAFAA,GAGAA,CAAAA,CAAA,CAAAA,CAAAA,IAAA,EARA,EASAjB,CATA,CAAA;AASAA,KAp1BAqV,EA81BA/V,CAAAA,CAAAwb,WAAAxb,GAAA,UAAA2B,CAAA,EAAAjB,CAAA,EAAAA;AACA,aAAA,IAAAV,CAAA,CACA2B,CAAAA,CAAA,CAAAA,CAAAA,IAAA,EAAAA,GACAA,CAAAA,CAAA,CAAAA,CAAAA,IAAA,EADAA,GAEAA,CAAAA,CAAA,CAAAA,CAAAA,IAAA,CAFAA,GAGAA,CAAAA,CAAA,CAAAA,CAJA,EAKAA,CAAAA,CAAA,CAAAA,CAAAA,IAAA,EAAAA,GACAA,CAAAA,CAAA,CAAAA,CAAAA,IAAA,EADAA,GAEAA,CAAAA,CAAA,CAAAA,CAAAA,IAAA,CAFAA,GAGAA,CAAAA,CAAA,CAAAA,CARA,EASAjB,CATA,CAAA;AASAA,KAx2BAqV;AAw2BArV,GdttCA,EcstCAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;AC7xCA,QAAA+a,CAAAA,GAAA,YAAA;AAAA,eAAAA,CAAA,GAAAA,CA6CA;;AAAA,aA1CEA,CAAAA,CAAAp7B,SAAAo7B,CAAAC,UAAAD,GAAA,UAAWE,CAAX,EAAWA;AACT7rB,aAAK8rB,OAAL9rB,GAAe6rB,CAAAA,CAAWE,QAAXF,CAAoB,SAApBA,EAA+B,IAA/BA,CAAf7rB,EACAA,KAAKgsB,QAALhsB,GAAgB6rB,CAAAA,CAAWE,QAAXF,CAAoB,UAApBA,EAAgC,EAAhCA,CADhB7rB,EAEAA,KAAKisB,OAALjsB,GAAe6rB,CAAAA,CAAWK,MAAXL,CAAkB,SAAlBA,EAA6B,CAA7BA,CAFf7rB;AAE4C,OAH9C2rB,EAMAA,CAAAA,CAAAp7B,SAAAo7B,CAAAQ,WAAAR,GAAA,UAAY36B,CAAZ,EAAYA;AACV,eAAA,EAAA,CAAKA,CAAL,IAAiC,MAAlBA,CAAAA,CAAOI,MAAtB,KAIO4O,KAAKosB,eAALpsB,CAAqBhP,CAArBgP,CAJP;AAI4BhP,OAX9B26B,EAcUA,CAAAA,CAAAp7B,SAAAo7B,CAAAS,eAAAT,GAAV,UAA0B36B,CAA1B,EAA0BA;AACxB,YAAMq7B,CAAAA,GAAIr7B,CAAAA,CAAO,CAAPA,CAAV;AAAA,YACMs7B,CAAAA,GAAQt7B,CAAAA,CAAO,CAAPA,CADd;AAAA,YAEMu7B,CAAAA,GAAIv7B,CAAAA,CAAO,CAAPA,CAFV;AAAA,YAGMw7B,CAAAA,GAAOx7B,CAAAA,CAAO,CAAPA,CAHb;AAAA,YAIMy7B,CAAAA,GAAOz7B,CAAAA,CAAO,CAAPA,CAJb;AAQA,eAAA,EAAIq7B,CAAAA,CAAEh7B,IAAFg7B,CAAOj7B,MAAPi7B,GAAgB,CAAhBA,IAA2C,MAAtBC,CAAAA,CAAMj7B,IAANi7B,CAAWl7B,MAAhCi7B,IAAkE,MAAlBE,CAAAA,CAAEl7B,IAAFk7B,CAAOn7B,MAAvDi7B,IAA4F,MAArBG,CAAAA,CAAKn7B,IAALm7B,CAAUp7B,MAAjFi7B,IACqB,MAArBI,CAAAA,CAAKp7B,IAALo7B,CAAUr7B,MADd,KAIIk7B,CAAAA,CAAMj7B,IAANi7B,CAAW,CAAXA,MAAkBD,CAAAA,CAAEh7B,IAAFg7B,CAAO,CAAPA,CAAlBC,IAA+BC,CAAAA,CAAEl7B,IAAFk7B,CAAO,CAAPA,MAAcF,CAAAA,CAAEh7B,IAAFg7B,CAAO,CAAPA,CAA7CC,IAA0DE,CAAAA,CAAKn7B,IAALm7B,CAAU,CAAVA,MAAiBH,CAAAA,CAAEh7B,IAAFg7B,CAAO,CAAPA,CAA3EC,IACAG,CAAAA,CAAKp7B,IAALo7B,CAAU,CAAVA,MAAiBJ,CAAAA,CAAEh7B,IAAFg7B,CAAO,CAAPA,CADjBC,IACwB,EAGZ,cAAXD,CAAAA,CAAEn4B,IAAS,IAAwB,cAAXm4B,CAAAA,CAAEn4B,IAAf,IAAsD,cAAfo4B,CAAAA,CAAMp4B,IAAS,IAA4B,cAAfo4B,CAAAA,CAAMp4B,IAAzE,IACA,cAAXq4B,CAAAA,CAAEr4B,IAAS,IAAwB,cAAXq4B,CAAAA,CAAEr4B,IADf,IACqD,cAAds4B,CAAAA,CAAKt4B,IAAS,IAA2B,cAAds4B,CAAAA,CAAKt4B,IADvE,IAEG,cAAdu4B,CAAAA,CAAKv4B,IAAS,IAA2B,cAAdu4B,CAAAA,CAAKv4B,IALT,CAL5B;AAUqCA,OAjCvCy3B,EA0CFA,CAAA;AA7CA,KAAA,EAAA;;AAAsBz9B,IAAAA,CAAAA,CAAAy9B,kBAAAz9B,GAAAy9B,CAAAz9B;AAAAy9B,GfuEtB,EevEsBA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;ACHtB,QAAAe,CAAAA,GAAA,YAAA;AACE,eAAAA,CAAA,CACcC,CADd,EACwE/W,CADxE,EAEc/hB,CAFd,EAEcA;AADAmM,aAAA2sB,cAAA3sB,GAAA2sB,CAAA3sB,EAA0DA,KAAA4V,MAAA5V,GAAA4V,CAA1D5V,EACAA,KAAAnM,UAAAmM,GAAAnM,CADAmM;AAwBhB;;AAAA,aAnBE0sB,CAAAA,CAAAn8B,SAAAm8B,CAAAd,UAAAc,GAAA,UAAWb,CAAX,EAAWA,CAAAA,CAAXa,EAEAA,CAAAA,CAAAn8B,SAAAm8B,CAAAP,WAAAO,GAAA,UAAY17B,CAAZ,EAAYA;AACV,eAAA,EAAA,CAAKA,CAAL,IAAiC,MAAlBA,CAAAA,CAAOI,MAAtB,KAIO4O,KAAKosB,eAALpsB,CAAqBhP,CAArBgP,CAJP;AAI4BhP,OAP9B07B,EAUUA,CAAAA,CAAAn8B,SAAAm8B,CAAAN,eAAAM,GAAV,UAA0B17B,CAA1B,EAA0BA;AACxB,eAAA,CAAqD,CAArD,KAAIgP,KAAK2sB,cAAL3sB,CAAoBnE,OAApBmE,CAA4BhP,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IAAtC8L,CAAJ,IAGIhP,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IAAVlD,KAAmBA,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IAHjC;AAGiCA,OAdnCw4B,EAmBFA,CAAA;AA1BA,KAAA,EAAA;;AAAsBx+B,IAAAA,CAAAA,CAAAw+B,QAAAx+B,GAAAw+B,CAAAx+B;AAAAw+B,GhB0EtB,EgB1EsBA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;ACAtB,QAAAE,CAAAA,GAAA,YAAA;AAAA,eAAAA,CAAA,GAAAA,CAkFA;;AAAA,aA/EEA,CAAAA,CAAAr8B,SAAAq8B,CAAAhB,UAAAgB,GAAA,UAAWf,CAAX,EAAWA;AAET7rB,aAAKlB,OAALkB,GAAe6rB,CAAAA,CAAWgB,SAAXhB,CAAqB,UAArBA,EAAiC,QAAjCA,CAAf7rB,EACAA,KAAKnB,SAALmB,GAAiB6rB,CAAAA,CAAWiB,OAAXjB,CAAmB,WAAnBA,EAAgC,CAAC,CAAD,EAAI,CAAJ,CAAhCA,CADjB7rB,EAEAA,KAAK+sB,KAAL/sB,GAAa6rB,CAAAA,CAAWK,MAAXL,CAAkB,OAAlBA,EAA2B,CAA3BA,CAFb7rB,EAGAA,KAAKtB,WAALsB,GAAmB6rB,CAAAA,CAAWiB,OAAXjB,CAAmB,cAAnBA,EAAmC,EAAnCA,CAHnB7rB,EAIAA,KAAKrB,IAALqB,GAAY6rB,CAAAA,CAAWiB,OAAXjB,CAAmB,MAAnBA,EAA2B,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAA3BA,CAJZ7rB,EAKAA,KAAKnH,OAALmH,GAAe6rB,CAAAA,CAAWiB,OAAXjB,CAAmB,SAAnBA,EAA8B,CAAC,CAAD,EAAI,CAAJ,CAA9BA,CALf7rB;AAKiD,OAPnD4sB,EAUAA,CAAAA,CAAAr8B,SAAAq8B,CAAAT,WAAAS,GAAA,UAAY57B,CAAZ,EAAYA;AAGV,YAAA,CAAKA,CAAL,IAAkC,MAAlBA,CAAAA,CAAOI,MAAW,IAAuB,MAAlBJ,CAAAA,CAAOI,MAA9C,EACE,OAAA,CAAO,CAAP;AAKF,YAA8B,MAA1BJ,CAAAA,CAAO,CAAPA,CAAAA,CAAUK,IAAVL,CAAeI,MAAW,IAA+B,MAA1BJ,CAAAA,CAAO,CAAPA,CAAAA,CAAUK,IAAVL,CAAeI,MAAlD,EACE,OAAA,CAAO,CAAP;AAMF,YAFoBJ,CAAAA,CAAO,CAAPA,CAAAA,CAAUK,IAAVL,CAAe,CAAfA,MACIA,CAAAA,CAAO,CAAPA,CAAAA,CAAUK,IAAVL,CAAe,CAAfA,IAAoBgP,KAAK+sB,KACjD,EACE,OAAA,CAAO,CAAP;AAIF,YAAsB,MAAlB/7B,CAAAA,CAAOI,MAAW,KAAgC,MAA1BJ,CAAAA,CAAO,CAAPA,CAAAA,CAAUK,IAAVL,CAAeI,MAAW,IAAKJ,CAAAA,CAAO,CAAPA,CAAAA,CAAUK,IAAVL,CAAe,CAAfA,MAAsBA,CAAAA,CAAO,CAAPA,CAAAA,CAAUK,IAAVL,CAAe,CAAfA,CAA3D,CAAtB,EACE,OAAA,CAAO,CAAP;AAGF,YAAMg8B,CAAAA,GAAch8B,CAAAA,CAAO,CAAPA,CAAAA,CAAUK,IAAVL,CAAeI,MAAfJ,GAAwB,CAA5C;AAEA,eAAIgP,KAAKnB,SAALmB,CAAe5O,MAAf4O,KAA0BgtB,CAA1BhtB,IAKAA,KAAKnH,OAALmH,CAAa5O,MAAb4O,KAAwBgtB,CAAxBhtB,IAKAA,KAAKrB,IAALqB,CAAU5O,MAAV4O,KAAmC,IAAdgtB,CAArBhtB,IAAqBgtB,CAMO,MAA5BhtB,KAAKtB,WAALsB,CAAiB5O,MAAW,IAAK4O,KAAKtB,WAALsB,CAAiB5O,MAAjB4O,KAA4BhP,CAAAA,CAAO,CAAPA,CAAAA,CAAUK,IAAVL,CAAeI,MAAfJ,GAAwB,CANhEg8B,KAUlBhtB,KAAKosB,eAALpsB,CAAqBhP,CAArBgP,CApBP;AAoB4BhP,OAzD9B47B,EA4DUA,CAAAA,CAAAr8B,SAAAq8B,CAAAR,eAAAQ,GAAV,UAA0B57B,CAA1B,EAA0BA;AAExB,eAAuB,cAAnBA,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IAAS,IAAgC,cAAnBlD,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IAAvB,KAID,MAAlBlD,CAAAA,CAAOI,MAAW,IAAwB,cAAnBJ,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IAJd,CAAvB;AAIqCA,OAlEvC04B,EA+EFA,CAAA;AAlFA,KAAA,EAAA;;AAAsB1+B,IAAAA,CAAAA,CAAA0+B,IAAA1+B,GAAA0+B,CAAA1+B;AAAA0+B,GjB0EtB,EiB1EsBA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,QAAAA,CAAAA;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,SAAAA,KAAAA,CAAAA,GAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,CAAAA,CAAAA,GAAAA,MAAAA,CAAAA,cAAAA,IAAAA;AAAAA,QAAAA,SAAAA,EAAAA;AAAAA,mBAAAA,KAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,QAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA;AAAAA,OAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,IAAAA,CAAAA,IAAAA,CAAAA,EAAAA,CAAAA,CAAAA,cAAAA,CAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,OAAAA,EAAAA,CAAAA,EAAAA,CAAAA,CAAAA;AAAAA,KAAAA,EAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,eAAAA,CAAAA,GAAAA;AAAAA,aAAAA,WAAAA,GAAAA,CAAAA;AAAAA;;AAAAA,MAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,SAAAA,GAAAA,SAAAA,CAAAA,GAAAA,MAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA,CAAAA,SAAAA,EAAAA,IAAAA,CAAAA,EAAAA,CAAAA;AAAAA,KAAAA,CAAAA;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,MAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,UAAAA,CAAAA,GAAAA,cAAAA,OAAAA,MAAAA,IAAAA,CAAAA,CAAAA,MAAAA,CAAAA,QAAAA,CAAAA;AAAAA,UAAAA,CAAAA,CAAAA,EAAAA,OAAAA,CAAAA;AAAAA,UAAAA,CAAAA;AAAAA,UAAAA,CAAAA;AAAAA,UAAAA,CAAAA,GAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA;AAAAA,UAAAA,CAAAA,GAAAA,EAAAA;;AAAAA,UAAAA;AAAAA,eAAAA,CAAAA,KAAAA,CAAAA,KAAAA,CAAAA,IAAAA,CAAAA,KAAAA,CAAAA,KAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,IAAAA,EAAAA,EAAAA,IAAAA,GAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,KAAAA;AAAAA,OAAAA,CAAAA,OAAAA,CAAAA,EAAAA;AAAAA,QAAAA,CAAAA,GAAAA;AAAAA,UAAAA,KAAAA,EAAAA;AAAAA,SAAAA;AAAAA,OAAAA,SAAAA;AAAAA,YAAAA;AAAAA,UAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,IAAAA,KAAAA,CAAAA,GAAAA,CAAAA,CAAAA,MAAAA,KAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA;AAAAA,SAAAA,SAAAA;AAAAA,cAAAA,CAAAA,EAAAA,MAAAA,CAAAA,CAAAA,KAAAA;AAAAA;AAAAA;;AAAAA,aAAAA,CAAAA;AAAAA,KAAAA;;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;ACLtB,QAAAK,CAAAA,GAAAv+B,CAAAA,CAAA,EAAAA,CAAA;AAAA,QACAoC,CAAAA,GAAApC,CAAAA,CAAA,CAAAA,CADA;AAAA,QAEAkR,CAAAA,GAAAlR,CAAAA,CAAA,CAAAA,CAFA;AAAA,QAKAw+B,CAAAA,GAAA,UAAAhiB,CAAA,EAAAA;AAAA,eAAAgiB,CAAA,GAAAA;AAAAA,eAAAA,SAAAA,CAAAA,IAAAA,CAAAA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,SAAAA,CAAAA,IAAAA,IAAAA;AAKA;;AAAA,aAL+B/hB,CAAAA,CAAA+hB,CAAA/hB,EAAAD,CAAAC,CAAAA,EAC7B+hB,CAAAA,CAAA38B,SAAA28B,CAAApV,GAAAoV,GAAA,UAAInV,CAAJ,EAA2C/mB,CAA3C,EAA2CA;AAEzC,eAAO,CADQm8B,CAAAA,CAAOn8B,CAAAA,CAAO,CAAPA,CAAPm8B,EAAkBn8B,CAAAA,CAAO,CAAPA,CAAlBm8B,CACR,CAAP;AADwC,OAFbhiB,EAK/B+hB,CAAA;AALA,KAAA,CAA+BD,CAAAA,CAAAG,MAA/B,CALA;;AAYA,aAAgBD,CAAhB,CAAuB7+B,CAAvB,EAAkC2D,CAAlC,EAAkCA;AAC1B,UAAAe,CAAAA,GAAAC,CAAAA,CAAA2M,CAAAA,CAAAtO,UAAAsO,CAAArO,qBAAAqO,CAAAtR,CAAAA,CAAA+C,IAAAuO,EAAA3N,CAAAA,CAAAZ,IAAAuO,CAAA3M,EAAA,CAAAA,CAAA;AAAA,UAACzB,CAAAA,GAAAwB,CAAAA,CAAA,CAAAA,CAAD;AAAA,UAAQvB,CAAAA,GAAAuB,CAAAA,CAAA,CAAAA,CAAR;AAAA,UACAq6B,CAAAA,GAAa,CAAC77B,CAAAA,CAAMA,CAAAA,CAAMJ,MAANI,GAAe,CAArBA,CAAD,EAA0BC,CAAAA,CAAMA,CAAAA,CAAML,MAANK,GAAe,CAArBA,CAA1B,CADb;AAAA,UAEAsD,CAAAA,GAAQ6K,CAAAA,CAAAzN,aAAAyN,CAAcxN,SAAdwN,CAAwBpO,CAAxBoO,EAA+BnO,CAA/BmO,EAA+BnO,CAAO,CAAtCmO,CAFR;AAGN,UAAA,CAAK7K,CAAL,EAEE,MAAM,IAAIU,KAAJ,CAAU,+CAAV,CAAN;;AAUF,WARA,IACM63B,CAAAA,GADO1tB,CAAAA,CAAA9L,SAAA8L,CAAU5L,IAAV4L,CAAe7K,CAAf6K,KACiBytB,CAAAA,CAAW,CAAXA,CAAAA,GAAgBA,CAAAA,CAAW,CAAXA,CADjCztB,CAAb,EAGMtE,CAAAA,GAAI,IAAIxK,CAAAA,CAAAmD,MAAJ,CAAWc,CAAX,EAA6B,cAAXzG,CAAAA,CAAE4F,IAAS,IAAwB,cAAXjC,CAAAA,CAAEiC,IAAf,GAAoC,SAApC,GAAgD,SAA7E,CAHV,EAIIq5B,CAAAA,GAAU,CAJd,EAKMr0B,CAAAA,GAAU,IAAIpG,KAAJ,CAAkBiC,CAAAA,CAAM3D,MAAxB,CALhB,EAMMo8B,CAAAA,GAAW,IAAI16B,KAAJ,CAAkBxE,CAAAA,CAAE+C,IAAF/C,CAAO8C,MAAzB,CANjB,EAOMq8B,CAAAA,GAAW,IAAI36B,KAAJ,CAAkBb,CAAAA,CAAEZ,IAAFY,CAAOb,MAAzB,CAPjB,EAQS7C,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAI++B,CAApB,EAAmC/+B,CAAAA,EAAnC,EAAwC;AAEtC2K,QAAAA,CAAAA,CAAQnE,CAAAA,CAAM3D,MAAN2D,GAAe,CAAvBmE,CAAAA,GAA4B,CAA5BA,EACAA,CAAAA,CAAQnE,CAAAA,CAAM3D,MAAN2D,GAAe,CAAvBmE,CAAAA,GAA4B,CAD5BA;;AAGA,aADA,IAAIvE,CAAAA,GAAOpG,CAAX,EACSqG,CAAAA,GAAIG,CAAAA,CAAM3D,MAAN2D,GAAe,CAA5B,EAA+BH,CAAAA,IAAK,CAApC,EAAuCA,CAAAA,EAAvC,EACEsE,CAAAA,CAAQtE,CAARsE,CAAAA,GAAavE,CAAAA,GAAOI,CAAAA,CAAMH,CAANG,CAApBmE,EACAvE,CAAAA,GAAOhC,IAAAA,CAAKkC,KAALlC,CAAWgC,CAAAA,GAAOI,CAAAA,CAAMH,CAANG,CAAlBpC,CADPuG;;AAIF0G,QAAAA,CAAAA,CAAAzN,aAAAyN,CAAcpM,SAAdoM,CAAwB1G,CAAxB0G,EAAiCtR,CAAAA,CAAE+C,IAAnCuO,EAAyC4tB,CAAzC5tB,GACAA,CAAAA,CAAAzN,aAAAyN,CAAcpM,SAAdoM,CAAwB1G,CAAxB0G,EAAiC3N,CAAAA,CAAEZ,IAAnCuO,EAAyC6tB,CAAzC7tB,CADAA;;AAGA,YAAM8tB,CAAAA,GAAUF,CAAAA,CAASp8B,MAATo8B,IAAmB,CAAnBA,GAAuB,CAAvBA,GAA2B5tB,CAAAA,CAAA9L,SAAA8L,CAAU3G,eAAV2G,CAA0B4tB,CAA1B5tB,EAAoCtR,CAAAA,CAAEuK,OAAtC+G,EAA+C7K,CAAAA,CAAM3D,MAAN2D,GAAe,CAA9D6K,CAA3C;AAAA,YACM+tB,CAAAA,GAAUF,CAAAA,CAASr8B,MAATq8B,IAAmB,CAAnBA,GAAuB,CAAvBA,GAA2B7tB,CAAAA,CAAA9L,SAAA8L,CAAU3G,eAAV2G,CAA0B6tB,CAA1B7tB,EAAoC3N,CAAAA,CAAE4G,OAAtC+G,EAA+C7K,CAAAA,CAAM3D,MAAN2D,GAAe,CAA9D6K,CAD3C;;AAGAguB,QAAAA,CAAAA,CACIt/B,CAAAA,CAAE6T,SAAF7T,CAAYowB,QAAZpwB,CAAqBo/B,CAArBp/B,CADJs/B,EACmC37B,CAAAA,CAAEkQ,SAAFlQ,CAAYysB,QAAZzsB,CAAqB07B,CAArB17B,CADnC27B,EACkEtyB,CAAAA,CAAE6G,SAAF7G,CAAYojB,QAAZpjB,CAAqBiyB,CAArBjyB,CADlEsyB,EACuFL,CAAU,CADjGK,EACiG,CAAO,CADxGA,EAC+G,CAD/GA,EACkH,CADlHA,EAEIP,CAAAA,CAAW,CAAXA,CAFJO,EAEmBP,CAAAA,CAAW,CAAXA,CAFnBO,EAEkCp8B,CAAAA,CAAMA,CAAAA,CAAMJ,MAANI,GAAe,CAArBA,CAFlCo8B,CAAAA,EAGAL,CAAAA,IAAWF,CAAAA,CAAW,CAAXA,CAAAA,GAAgBA,CAAAA,CAAW,CAAXA,CAH3BO;AAKF;;AAAA,aAAOtyB,CAAP;AASF;;AAAA,aAAgBsyB,CAAhB,CACIC,CADJ,EACkCtB,CADlC,EACgEuB,CADhE,EAC8FC,CAD9F,EAEIC,CAFJ,EAEqB1xB,CAFrB,EAEoC2xB,CAFpC,EAEkD/3B,CAFlD,EAE6DE,CAF7D,EAEwED,CAFxE,EAEwEA;AACtE,aAAI43B,CAAAA,IAAUC,CAAVD,GAgFN,UACIF,CADJ,EACkCtB,CADlC,EACgEuB,CADhE,EAC8FxxB,CAD9F,EAEI2xB,CAFJ,EAEkB/3B,CAFlB,EAE6BE,CAF7B,EAEwCD,CAFxC,EAEwCA;AAEtC,aADA,IAAIu3B,CAAAA,GAAU,CAAd,EAAiBC,CAAAA,GAAU,CAA3B,EAA8BO,CAAAA,GAAU,CAAxC,EACSC,CAAAA,GAAK,CAAd,EAAiBA,CAAAA,GAAKj4B,CAAtB,EAAyBi4B,CAAAA,EAAzB,EAA+B;AAC7B,eAAK,IAAIC,CAAAA,GAAK,CAAd,EAAiBA,CAAAA,GAAKh4B,CAAtB,EAAyBg4B,CAAAA,EAAzB,EAA+B;AAE7B,iBADA,IAAIC,CAAAA,GAAM,CAAV,EACSC,CAAAA,GAAK,CAAd,EAAiBA,CAAAA,GAAKn4B,CAAtB,EAAyBm4B,CAAAA,EAAzB,EACED,CAAAA,IAAOR,CAAAA,CAAEH,CAAFG,CAAAA,GAAatB,CAAAA,CAAEoB,CAAFpB,CAApB8B,EACAX,CAAAA,IAAWx3B,CADXm4B,EAEAV,CAAAA,IAAW,CAFXU;;AAIFX,YAAAA,CAAAA,IAAWx3B,CAAAA,GAAIC,CAAfu3B,EACAC,CAAAA,IAAWx3B,CADXu3B,EAEAI,CAAAA,CAAEI,CAAFJ,CAAAA,GAAaxxB,CAAAA,GAAQ+xB,CAAR/xB,GAAc2xB,CAAAA,GAAOH,CAAAA,CAAEI,CAAFJ,CAFlCJ,EAGAQ,CAAAA,EAHAR,EAIAC,CAAAA,IAAWx3B,CAJXu3B;AAMFC;;AAAAA,UAAAA,CAAAA,IAAWv3B,CAAAA,GAAID,CAAfw3B,EACAD,CAAAA,EADAC;AACAD;AAlGOa,OA+EX,CA/EyBV,CA+EzB,EA/E4BtB,CA+E5B,EA/E+BuB,CA+E/B,EA/EkCxxB,CA+ElC,EA/EyC2xB,CA+EzC,EA/E+C/3B,CA+E/C,EA/EkDE,CA+ElD,EA/EqDD,CA+ErD,CAhFM43B,GAEOA,CAAAA,GAgCb,UACIF,CADJ,EACkCtB,CADlC,EACgEuB,CADhE,EAC8FxxB,CAD9F,EAEI2xB,CAFJ,EAEkB/3B,CAFlB,EAE6BE,CAF7B,EAEwCD,CAFxC,EAEwCA;AAEtC,aADA,IAAIu3B,CAAAA,GAAU,CAAd,EAAiBC,CAAAA,GAAU,CAA3B,EAA8BO,CAAAA,GAAU,CAAxC,EACSC,CAAAA,GAAK,CAAd,EAAiBA,CAAAA,GAAKj4B,CAAtB,EAAyBi4B,CAAAA,EAAzB,EAA+B;AAC7B,eAAK,IAAIC,CAAAA,GAAK,CAAd,EAAiBA,CAAAA,GAAKh4B,CAAtB,EAAyBg4B,CAAAA,EAAzB,EAA+B;AAE7B,iBADA,IAAIC,CAAAA,GAAM,CAAV,EACSC,CAAAA,GAAK,CAAd,EAAiBA,CAAAA,GAAKn4B,CAAtB,EAAyBm4B,CAAAA,EAAzB,EACED,CAAAA,IAAOR,CAAAA,CAAEH,CAAFG,CAAAA,GAAatB,CAAAA,CAAEoB,CAAFpB,CAApB8B,EACAX,CAAAA,IAAWx3B,CADXm4B,EAEAV,CAAAA,IAAWv3B,CAFXi4B;;AAIFX,YAAAA,CAAAA,IAAWx3B,CAAAA,GAAIC,CAAfu3B,EACAC,CAAAA,IAAWv3B,CAAAA,GAAID,CADfu3B,EAEAI,CAAAA,CAAEI,CAAFJ,CAAAA,GAAaxxB,CAAAA,GAAQ+xB,CAAR/xB,GAAc2xB,CAAAA,GAAOH,CAAAA,CAAEI,CAAFJ,CAFlCJ,EAGAQ,CAAAA,EAHAR,EAIAC,CAAAA,EAJAD;AAMFC;;AAAAA,UAAAA,CAAAA,IAAWv3B,CAAXu3B,EACAD,CAAAA,EADAC;AACAD;AAlDOc,OA+BX,CA/BuBX,CA+BvB,EA/B0BtB,CA+B1B,EA/B6BuB,CA+B7B,EA/BgCxxB,CA+BhC,EA/BuC2xB,CA+BvC,EA/B6C/3B,CA+B7C,EA/BgDE,CA+BhD,EA/BmDD,CA+BnD,CAhCa43B,GAEAC,CAAAA,GAqDb,UACIH,CADJ,EACkCtB,CADlC,EACgEuB,CADhE,EAC8FxxB,CAD9F,EAEI2xB,CAFJ,EAEkB/3B,CAFlB,EAE6BE,CAF7B,EAEwCD,CAFxC,EAEwCA;AAEtC,aADA,IAAIu3B,CAAAA,GAAU,CAAd,EAAiBC,CAAAA,GAAU,CAA3B,EAA8BO,CAAAA,GAAU,CAAxC,EACSC,CAAAA,GAAK,CAAd,EAAiBA,CAAAA,GAAKj4B,CAAtB,EAAyBi4B,CAAAA,EAAzB,EAA+B;AAC7B,eAAK,IAAIC,CAAAA,GAAK,CAAd,EAAiBA,CAAAA,GAAKh4B,CAAtB,EAAyBg4B,CAAAA,EAAzB,EAA+B;AAE7B,iBADA,IAAIC,CAAAA,GAAM,CAAV,EACSC,CAAAA,GAAK,CAAd,EAAiBA,CAAAA,GAAKn4B,CAAtB,EAAyBm4B,CAAAA,EAAzB,EACED,CAAAA,IAAOR,CAAAA,CAAEH,CAAFG,CAAAA,GAAatB,CAAAA,CAAEoB,CAAFpB,CAApB8B,EACAX,CAAAA,IAAW,CADXW,EAEAV,CAAAA,IAAW,CAFXU;;AAIFX,YAAAA,CAAAA,IAAWv3B,CAAXu3B,EACAC,CAAAA,IAAWx3B,CADXu3B,EAEAI,CAAAA,CAAEI,CAAFJ,CAAAA,GAAaxxB,CAAAA,GAAQ+xB,CAAR/xB,GAAc2xB,CAAAA,GAAOH,CAAAA,CAAEI,CAAFJ,CAFlCJ,EAGAQ,CAAAA,EAHAR,EAIAC,CAAAA,IAAWx3B,CAJXu3B;AAMFC;;AAAAA,UAAAA,CAAAA,IAAWv3B,CAAAA,GAAID,CAAfw3B,EACAD,CAAAA,IAAWv3B,CADXw3B;AACWx3B;AAvEJs4B,OAoDX,CApDuBZ,CAoDvB,EApD0BtB,CAoD1B,EApD6BuB,CAoD7B,EApDgCxxB,CAoDhC,EApDuC2xB,CAoDvC,EApD6C/3B,CAoD7C,EApDgDE,CAoDhD,EApDmDD,CAoDnD,CArDa63B,GAOb,UACIH,CADJ,EACkCtB,CADlC,EACgEuB,CADhE,EAC8FxxB,CAD9F,EAEI2xB,CAFJ,EAEkB/3B,CAFlB,EAE6BE,CAF7B,EAEwCD,CAFxC,EAEwCA;AAEtC,aADA,IAAIu3B,CAAAA,GAAU,CAAd,EAAiBC,CAAAA,GAAU,CAA3B,EAA8BO,CAAAA,GAAU,CAAxC,EACSC,CAAAA,GAAK,CAAd,EAAiBA,CAAAA,GAAKj4B,CAAtB,EAAyBi4B,CAAAA,EAAzB,EAA+B;AAC7B,eAAK,IAAIC,CAAAA,GAAK,CAAd,EAAiBA,CAAAA,GAAKh4B,CAAtB,EAAyBg4B,CAAAA,EAAzB,EAA+B;AAE7B,iBADA,IAAIC,CAAAA,GAAM,CAAV,EACSC,CAAAA,GAAK,CAAd,EAAiBA,CAAAA,GAAKn4B,CAAtB,EAAyBm4B,CAAAA,EAAzB,EACED,CAAAA,IAAOR,CAAAA,CAAEH,CAAFG,CAAAA,GAAatB,CAAAA,CAAEoB,CAAFpB,CAApB8B,EACAX,CAAAA,IAAW,CADXW,EAEAV,CAAAA,IAAWv3B,CAFXi4B;;AAIFX,YAAAA,CAAAA,IAAWv3B,CAAXu3B,EACAC,CAAAA,IAAWv3B,CAAAA,GAAID,CADfu3B,EAEAI,CAAAA,CAAEI,CAAFJ,CAAAA,GAAaxxB,CAAAA,GAAQ+xB,CAAR/xB,GAAc2xB,CAAAA,GAAOH,CAAAA,CAAEI,CAAFJ,CAFlCJ,EAGAQ,CAAAA,EAHAR,EAIAC,CAAAA,EAJAD;AAMFC;;AAAAA,UAAAA,CAAAA,IAAWv3B,CAAXu3B,EACAD,CAAAA,IAAWv3B,CADXw3B;AACWx3B;AAvBJu4B,OAIX,CAJqBb,CAIrB,EAJwBtB,CAIxB,EAJ2BuB,CAI3B,EAJ8BxxB,CAI9B,EAJqC2xB,CAIrC,EAJ2C/3B,CAI3C,EAJ8CE,CAI9C,EAJiDD,CAIjD,CAXE;AAxDWjI;;AAAAA,IAAAA,CAAAA,CAAAg/B,SAAAh/B,GAAAg/B,CAAAh/B,EAObA,CAAAA,CAAAi/B,MAAAj/B,GAAAi/B,CAPaj/B,EAqDbA,CAAAA,CAAA0/B,QAAA1/B,GAAA0/B,CArDa1/B;AAqDb0/B,GlBqBA,EkBrBAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;ACrDA,QAAAR,CAAAA,GAAA,YAAA;AAAA,eAAAA,CAAA,GAAAA,CAgCA;;AAAA,aA7BEA,CAAAA,CAAA78B,SAAA68B,CAAAxB,UAAAwB,GAAA,UAAWvB,CAAX,EAAWA,CAAAA,CAAXuB,EAEAA,CAAAA,CAAA78B,SAAA68B,CAAAjB,WAAAiB,GAAA,UAAYp8B,CAAZ,EAAYA;AACV,eAAA,EAAA,CAAKA,CAAL,IAAiC,MAAlBA,CAAAA,CAAOI,MAAtB,KAIIJ,CAAAA,CAAO,CAAPA,CAAAA,CAAUK,IAAVL,CAAeA,CAAAA,CAAO,CAAPA,CAAAA,CAAUK,IAAVL,CAAeI,MAAfJ,GAAwB,CAAvCA,MAA8CA,CAAAA,CAAO,CAAPA,CAAAA,CAAUK,IAAVL,CAAeA,CAAAA,CAAO,CAAPA,CAAAA,CAAUK,IAAVL,CAAeI,MAAfJ,GAAwB,CAAvCA,CAA9CA,IAIGgP,KAAKosB,eAALpsB,CAAqBhP,CAArBgP,CARP;AAQ4BhP,OAX9Bo8B,EAcUA,CAAAA,CAAA78B,SAAA68B,CAAAhB,eAAAgB,GAAV,UAA0Bp8B,CAA1B,EAA0BA;AACxB,eAAA,CAAuB,cAAnBA,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IAAS,IAAgC,cAAnBlD,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IAA9C,KAA8CA,CAIvB,cAAnBlD,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IAAS,IAAgC,cAAnBlD,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IAJAA,KAQ1ClD,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IAAVlD,KAAmBA,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IARjC;AAQiCA,OAvBnCk5B,EA6BFA,CAAA;AAhCA,KAAA,EAAA;;AAAsBl/B,IAAAA,CAAAA,CAAAk/B,MAAAl/B,GAAAk/B,CAAAl/B;AAAAk/B,GnB0EtB,EmB1EsBA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;ACAtB,QAAAuB,CAAAA,GAAA,YAAA;AAAA,eAAAA,CAAA,GAAAA,CAyCA;;AAAA,aAtCEA,CAAAA,CAAAp+B,SAAAo+B,CAAA/C,UAAA+C,GAAA,UAAW9C,CAAX,EAAWA;AACT7rB,aAAK+tB,MAAL/tB,GAAiD,MAAnC6rB,CAAAA,CAAWK,MAAXL,CAAkB,QAAlBA,EAA4B,CAA5BA,CAAd7rB,EACAA,KAAKguB,MAALhuB,GAAiD,MAAnC6rB,CAAAA,CAAWK,MAAXL,CAAkB,QAAlBA,EAA4B,CAA5BA,CADd7rB,EAEAA,KAAK1D,KAAL0D,GAAa6rB,CAAAA,CAAWE,QAAXF,CAAoB,OAApBA,EAA6B,CAA7BA,CAFb7rB,EAGAA,KAAKiuB,IAALjuB,GAAY6rB,CAAAA,CAAWE,QAAXF,CAAoB,MAApBA,EAA4B,CAA5BA,CAHZ7rB;AAGwC,OAJ1C2uB,EAOAA,CAAAA,CAAAp+B,SAAAo+B,CAAAxC,WAAAwC,GAAA,UAAY39B,CAAZ,EAAYA;AACV,eAAA,EAAA,CAAKA,CAAL,IAAiC,MAAlBA,CAAAA,CAAOI,MAAtB,KAAsBA,CAKQ,MAA1BJ,CAAAA,CAAO,CAAPA,CAAAA,CAAUK,IAAVL,CAAeI,MAAW,IAA+B,MAA1BJ,CAAAA,CAAO,CAAPA,CAAAA,CAAUK,IAAVL,CAAeI,MAL5BA,KASf4O,KAAKosB,eAALpsB,CAAqBhP,CAArBgP,CATP;AAS4BhP,OAjB9B29B,EAoBUA,CAAAA,CAAAp+B,SAAAo+B,CAAAvC,eAAAuC,GAAV,UAA0B39B,CAA1B,EAA0BA;AACxB,eAAA,EAAwB,cAAnBA,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IAAS,IAAgC,cAAnBlD,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IAAvB,IACA,cAAnBlD,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IAAS,IAAgC,cAAnBlD,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IADvB,IAEA,cAAnBlD,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IAAS,IAAgC,cAAnBlD,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IAF/C,KAMKlD,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IAAVlD,KAAmBA,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IAA7BlD,IAAuCA,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IAAVlD,KAAmBA,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IANzE;AAMyEA,OA3B3Ey6B,EAsCFA,CAAA;AAzCA,KAAA,EAAA;;AAAsBzgC,IAAAA,CAAAA,CAAAygC,IAAAzgC,GAAAygC,CAAAzgC;AAAAygC,GpB0EtB,EoB1EsBA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,QAAAA,CAAAA;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,SAAAA,KAAAA,CAAAA,GAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,CAAAA,CAAAA,GAAAA,MAAAA,CAAAA,cAAAA,IAAAA;AAAAA,QAAAA,SAAAA,EAAAA;AAAAA,mBAAAA,KAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,QAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA;AAAAA,OAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,IAAAA,CAAAA,IAAAA,CAAAA,EAAAA,CAAAA,CAAAA,cAAAA,CAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,OAAAA,EAAAA,CAAAA,EAAAA,CAAAA,CAAAA;AAAAA,KAAAA,EAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,eAAAA,CAAAA,GAAAA;AAAAA,aAAAA,WAAAA,GAAAA,CAAAA;AAAAA;;AAAAA,MAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,SAAAA,GAAAA,SAAAA,CAAAA,GAAAA,MAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA,CAAAA,SAAAA,EAAAA,IAAAA,CAAAA,EAAAA,CAAAA;AAAAA,KAAAA,CAAAA;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;ACAtB,QAAAC,CAAAA,GAAA,YAAA;AAAA,eAAAA,CAAA,GAAAA,CAuBA;;AAAA,aAtBEA,CAAAA,CAAAr+B,SAAAq+B,CAAAzC,WAAAyC,GAAA,UAAY59B,CAAZ,EAAYA;AACV,eAAA,EAAA,CAAKA,CAAL,IAAiC,MAAlBA,CAAAA,CAAOI,MAAtB,KAIO4O,KAAKosB,eAALpsB,CAAqBhP,CAArBgP,CAJP;AAI4BhP,OAL9B49B,EAQUA,CAAAA,CAAAr+B,SAAAq+B,CAAAxC,eAAAwC,GAAV,UAA0B59B,CAA1B,EAA0BA;AACxB,eAAuB,cAAnBA,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IAAS,IAAgC,cAAnBlD,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IAA9C;AAA8CA,OAThD06B,EAsBFA,CAAA;AAvBA,KAAA,EAAA;AAAA,QAyBAC,CAAAA,GAAA,UAAA3jB,CAAA,EAAAA;AAAA,eAAA2jB,CAAA,GAAAA;AAAAA,eAAAA,SAAAA,CAAAA,IAAAA,CAAAA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,SAAAA,CAAAA,IAAAA,IAAAA;AAgBA;;AAAA,aAhB0C1jB,CAAAA,CAAA0jB,CAAA1jB,EAAAD,CAAAC,CAAAA,EAGxC0jB,CAAAA,CAAAt+B,SAAAs+B,CAAAjD,UAAAiD,GAAA,UAAWhD,CAAX,EAAWA;AAST,YARA7rB,KAAKlB,OAALkB,GAAe6rB,CAAAA,CAAWgB,SAAXhB,CAAqB,UAArBA,EAAiC,QAAjCA,CAAf7rB,EACAA,KAAKtB,WAALsB,GAAmB6rB,CAAAA,CAAWiB,OAAXjB,CAAmB,cAAnBA,CADnB7rB,EAEAA,KAAKnH,OAALmH,GAAe6rB,CAAAA,CAAWiB,OAAXjB,CAAmB,SAAnBA,EAA8B,EAA9BA,CAFf7rB,EAGAA,KAAKrB,IAALqB,GAAY6rB,CAAAA,CAAWiB,OAAXjB,CAAmB,MAAnBA,EAA2B,EAA3BA,CAHZ7rB,EAIAA,KAAK8uB,eAAL9uB,GAAsE,MAA9C6rB,CAAAA,CAAWK,MAAXL,CAAkB,mBAAlBA,EAAuC,CAAvCA,CAJxB7rB,EAKAA,KAAK+uB,QAAL/uB,GAAgB6rB,CAAAA,CAAWK,MAAXL,CAAkB,WAAlBA,EAA+B,CAA/BA,CALhB7rB,EAQsB,MAAlBA,KAAK+uB,QAAT,EACE,MAAM,IAAIt5B,KAAJ,CAAU,wEAAV,CAAN;AAAgB,OAboB0V,EAgB1C0jB,CAAA;AAhBA,KAAA,CAA0CD,CAA1C,CAzBA;;AAyBsB1gC,IAAAA,CAAAA,CAAA2gC,WAAA3gC,GAAA2gC,CAAA3gC;;AAkBtB,QAAA8gC,CAAAA,GAAA,UAAA9jB,CAAA,EAAAA;AAAA,eAAA8jB,CAAA,GAAAA;AAAAA,eAAAA,SAAAA,CAAAA,IAAAA,CAAAA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,SAAAA,CAAAA,IAAAA,IAAAA;AAMA;;AAAA,aANgD7jB,CAAAA,CAAA6jB,CAAA7jB,EAAAD,CAAAC,CAAAA,EAG9C6jB,CAAAA,CAAAz+B,SAAAy+B,CAAApD,UAAAoD,GAAA,UAAWnD,CAAX,EAAWA;AACT7rB,aAAK8uB,eAAL9uB,GAAsE,MAA9C6rB,CAAAA,CAAWK,MAAXL,CAAkB,mBAAlBA,EAAuC,CAAvCA,CAAxB7rB;AAA+D,OAJnBmL,EAMhD6jB,CAAA;AANA,KAAA,CAAgDJ,CAAhD,CAAA;;AAAsB1gC,IAAAA,CAAAA,CAAA8gC,iBAAA9gC,GAAA8gC,CAAA9gC;;AAQtB,QAAA+gC,CAAAA,GAAA,UAAA/jB,CAAA,EAAAA;AAAA,eAAA+jB,CAAA,GAAAA;AAAAA,eAAAA,SAAAA,CAAAA,IAAAA,CAAAA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,SAAAA,CAAAA,IAAAA,IAAAA;AAqBA;;AAAA,aArBsC9jB,CAAAA,CAAA8jB,CAAA9jB,EAAAD,CAAAC,CAAAA,EAGpC8jB,CAAAA,CAAA1+B,SAAA0+B,CAAArD,UAAAqD,GAAA,UAAWpD,CAAX,EAAWA;AAST,YARA7rB,KAAKlB,OAALkB,GAAe6rB,CAAAA,CAAWgB,SAAXhB,CAAqB,UAArBA,EAAiC,QAAjCA,CAAf7rB,EACAA,KAAKtB,WAALsB,GAAmB6rB,CAAAA,CAAWiB,OAAXjB,CAAmB,cAAnBA,CADnB7rB,EAEAA,KAAKnH,OAALmH,GAAe6rB,CAAAA,CAAWiB,OAAXjB,CAAmB,SAAnBA,EAA8B,EAA9BA,CAFf7rB,EAGAA,KAAKrB,IAALqB,GAAY6rB,CAAAA,CAAWiB,OAAXjB,CAAmB,MAAnBA,EAA2B,EAA3BA,CAHZ7rB,EAIAA,KAAK+uB,QAAL/uB,GAAgB6rB,CAAAA,CAAWK,MAAXL,CAAkB,WAAlBA,EAA+B,CAA/BA,CAJhB7rB,EAKAA,KAAKkvB,YAALlvB,GAAoB6rB,CAAAA,CAAWK,MAAXL,CAAkB,eAAlBA,EAAmC,CAAnCA,CALpB7rB,EAQ0B,MAAtBA,KAAKkvB,YAAT,EACE,MAAM,IAAIz5B,KAAJ,CAAU,6DAAV,CAAN;AAEF,YAAsB,MAAlBuK,KAAK+uB,QAAT,EACE,MAAM,IAAIt5B,KAAJ,CAAU,oEAAV,CAAN;AAAgB,OAhBgB0V,EAqBtC8jB,CAAA;AArBA,KAAA,CAAsCL,CAAtC,CAAA;;AAAsB1gC,IAAAA,CAAAA,CAAA+gC,OAAA/gC,GAAA+gC,CAAA/gC;;AAuBtB,QAAAihC,CAAAA,GAAA,UAAAjkB,CAAA,EAAAA;AAAA,eAAAikB,CAAA,GAAAA;AAAAA,eAAAA,SAAAA,CAAAA,IAAAA,CAAAA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,SAAAA,CAAAA,IAAAA,IAAAA;AAIA;;AAAA,aAJ4ChkB,CAAAA,CAAAgkB,CAAAhkB,EAAAD,CAAAC,CAAAA,EAG1CgkB,CAAAA,CAAA5+B,SAAA4+B,CAAAvD,UAAAuD,GAAA,UAAWtD,CAAX,EAAWA,CAAAA,CAH+B1gB,EAI5CgkB,CAAA;AAJA,KAAA,CAA4CP,CAA5C,CAAA;;AAAsB1gC,IAAAA,CAAAA,CAAAihC,aAAAjhC,GAAAihC,CAAAjhC;AAAAihC,GrBAtB,EqBAsBA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;AC1EtB,QAAAC,CAAAA,GAAA,YAAA;AAAA,eAAAA,CAAA,GAAAA,CAwBA;;AAAA,aArBEA,CAAAA,CAAA7+B,SAAA6+B,CAAAxD,UAAAwD,GAAA,UAAWvD,CAAX,EAAWA;AACT7rB,aAAKzH,IAALyH,GAAY6rB,CAAAA,CAAWK,MAAXL,CAAkB,MAAlBA,EAA0B,CAA1BA,CAAZ7rB;AAAsC,OADxCovB,EAIAA,CAAAA,CAAA7+B,SAAA6+B,CAAAjD,WAAAiD,GAAA,UAAYp+B,CAAZ,EAAYA;AACV,eAAA,EAAA,CAAKA,CAAL,IAAiC,MAAlBA,CAAAA,CAAOI,MAAtB,KAIO4O,KAAKosB,eAALpsB,CAAqBhP,CAArBgP,CAJP;AAI4BhP,OAT9Bo+B,EAYUA,CAAAA,CAAA7+B,SAAA6+B,CAAAhD,eAAAgD,GAAV,UAA0Bp+B,CAA1B,EAA0BA;AACxB,eAAuB,cAAnBA,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IAAS,IAAgC,cAAnBlD,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IAA9C;AAA8CA,OAbhDk7B,EAqBFA,CAAA;AAxBA,KAAA,EAAA;;AAAsBlhC,IAAAA,CAAAA,CAAAkhC,OAAAlhC,GAAAkhC,CAAAlhC;AAAAkhC,GtB0EtB,EsB1EsBA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;ACAtB,QAAAC,CAAAA,GAAA,YAAA;AAAA,eAAAA,CAAA,GAAAA,CAsCA;;AAAA,aAnCEA,CAAAA,CAAA9+B,SAAA8+B,CAAAzD,UAAAyD,GAAA,UAAWxD,CAAX,EAAWA,CAAAA,CAAXwD,EAEAA,CAAAA,CAAA9+B,SAAA8+B,CAAAlD,WAAAkD,GAAA,UAAYr+B,CAAZ,EAAYA;AACV,YAAA,CAAKA,CAAL,IAAiC,MAAlBA,CAAAA,CAAOI,MAAtB,EACE,OAAA,CAAO,CAAP;;AAIF,aADA,IAAMA,CAAAA,GAASJ,CAAAA,CAAO,CAAPA,CAAAA,CAAUK,IAAVL,CAAeI,MAA9B,EACS7C,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAIyC,CAAAA,CAAOI,MAA3B,EAAmC7C,CAAAA,EAAnC,EAAwC;AACtC,cAAI6C,CAAAA,KAAWJ,CAAAA,CAAOzC,CAAPyC,CAAAA,CAAUK,IAAVL,CAAeI,MAA9B,EACE,OAAA,CAAO,CAAP;;AAGF,eAAK,IAAIwD,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAIxD,CAApB,EAA4BwD,CAAAA,EAA5B,EACE,IAAI5D,CAAAA,CAAO,CAAPA,CAAAA,CAAUK,IAAVL,CAAe4D,CAAf5D,MAAsBA,CAAAA,CAAOzC,CAAPyC,CAAAA,CAAUK,IAAVL,CAAe4D,CAAf5D,CAA1B,EACE,OAAA,CAAO,CAAP;AAKN;;AAAA,eAAOgP,KAAKosB,eAALpsB,CAAqBhP,CAArBgP,CAAP;AAA4BhP,OApB9Bq+B,EAuBUA,CAAAA,CAAA9+B,SAAA8+B,CAAAjD,eAAAiD,GAAV,UAA0Br+B,CAA1B,EAA0BA;AACxB,YAAuB,cAAnBA,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IAAS,IAAgC,cAAnBlD,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IAA9C,EACE,OAAA,CAAO,CAAP;;AAEF,aAAK,IAAI3F,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAIyC,CAAAA,CAAOI,MAA3B,EAAmC7C,CAAAA,EAAnC,EACE,IAAIyC,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IAAVlD,KAAmBA,CAAAA,CAAOzC,CAAPyC,CAAAA,CAAUkD,IAAjC,EACE,OAAA,CAAO,CAAP;;AAIJ,eAAA,CAAO,CAAP;AAAO,OAjCTm7B,EAmCFA,CAAA;AAtCA,KAAA,EAAA;;AAAsBnhC,IAAAA,CAAAA,CAAAmhC,GAAAnhC,GAAAmhC,CAAAnhC;AAAAmhC,GvB0EtB,EuB1EsBA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;ACPtB,QAOAC,CAPA;AAAA,QAQAC,CARA;AAAA,QAAApgB,CAAAA,GAAAhhB,CAAAA,CAAAD,OAAAC,GAAA,EAAA;;AAUA,aAAAqhC,CAAA,GAAAA;AACA,YAAA,IAAA/5B,KAAA,CAAA,iCAAA,CAAA;AAEA;;AAAA,aAAAg6B,CAAA,GAAAA;AACA,YAAA,IAAAh6B,KAAA,CAAA,mCAAA,CAAA;AAsBA;;AAAA,aAAAi6B,CAAA,CAAAC,CAAA,EAAAA;AACA,UAAAL,CAAAA,KAAAplB,UAAA,EAEA,OAAAA,UAAAA,CAAAylB,CAAAzlB,EAAA,CAAAA,CAAA;AAGA,UAAA,CAAAolB,CAAAA,KAAAE,CAAAF,IAAAE,CAAAF,CAAA,KAAAplB,UAAA,EAEA,OADAolB,CAAAA,GAAAplB,UAAAolB,EACAplB,UAAAA,CAAAylB,CAAAzlB,EAAA,CAAAA,CAAA;;AAEA,UAAA;AAEA,eAAAolB,CAAAA,CAAAK,CAAAL,EAAA,CAAAA,CAAA;AACK,OAHL,CAGK,OAAA1mB,CAAA,EAAAA;AACL,YAAA;AAEA,iBAAA0mB,CAAAA,CAAAxgC,IAAAwgC,CAAA,IAAAA,EAAAK,CAAAL,EAAA,CAAAA,CAAA;AACS,SAHT,CAGS,OAAA1mB,CAAA,EAAAA;AAET,iBAAA0mB,CAAAA,CAAAxgC,IAAAwgC,CAAAtvB,IAAAsvB,EAAAK,CAAAL,EAAA,CAAAA,CAAA;AAAA;AAAA;AAAA;;AAAA,KAvCA,YAAA;AACA,UAAA;AAEAA,QAAAA,CAAAA,GADA,cAAA,OAAAplB,UAAA,GACAA,UADA,GAGAslB,CAFAF;AAIK,OANL,CAMK,OAAA1mB,CAAA,EAAAA;AACL0mB,QAAAA,CAAAA,GAAAE,CAAAF;AAEA;;AAAA,UAAA;AAEAC,QAAAA,CAAAA,GADA,cAAA,OAAAzlB,YAAA,GACAA,YADA,GAGA2lB,CAFAF;AAIK,OANL,CAMK,OAAA3mB,CAAA,EAAAA;AACL2mB,QAAAA,CAAAA,GAAAE,CAAAF;AAAAE;AAjBA,KAAA,EAuCA;AAiCA,QAEAG,CAFA;AAAA,QAAAC,CAAAA,GAAA,EAAA;AAAA,QACAC,CAAAA,GAAAA,CAAA,CADA;AAAA,QAGAC,CAAAA,GAAAA,CAAA,CAHA;;AAKA,aAAAC,CAAA,GAAAA;AACAF,MAAAA,CAAAA,IAAAF,CAAAE,KAGAA,CAAAA,GAAAA,CAAA,CAAAA,EACAF,CAAAA,CAAAx+B,MAAAw+B,GACAC,CAAAA,GAAAD,CAAAA,CAAAzQ,MAAAyQ,CAAAC,CAAAD,CADAA,GAGAG,CAAAA,GAAAA,CAAA,CAJAD,EAMAD,CAAAA,CAAAz+B,MAAAy+B,IACAI,CAAAA,EAVAH;AAcA;;AAAA,aAAAG,CAAA,GAAAA;AACA,UAAA,CAAAH,CAAA,EAAA;AAGA,YAAAI,CAAAA,GAAAR,CAAAA,CAAAM,CAAAN,CAAA;AACAI,QAAAA,CAAAA,GAAAA,CAAA,CAAAA;;AAGA,aADA,IAAAvb,CAAAA,GAAAsb,CAAAA,CAAAz+B,MACA,EAAAmjB,CAAA,GAAA;AAGA,eAFAqb,CAAAA,GAAAC,CAAAD,EACAC,CAAAA,GAAA,EACA,EADA,EACAE,CADA,GACAxb,CAAA,GACAqb,CAAAA,IACAA,CAAAA,CAAAG,CAAAH,CAAAA,CAAA9X,GAAA8X,EADAA;;AAIAG,UAAAA,CAAAA,GAAAA,CAAA,CAAAA,EACAxb,CAAAA,GAAAsb,CAAAA,CAAAz+B,MADA2+B;AAGAH;;AAAAA,QAAAA,CAAAA,GAAA,IAAAA,EACAE,CAAAA,GAAAA,CAAA,CADAF,EAlEA,UAAAO,CAAA,EAAAA;AACA,cAAAZ,CAAAA,KAAAzlB,YAAA,EAEA,OAAAA,YAAAA,CAAAqmB,CAAArmB,CAAA;AAGA,cAAA,CAAAylB,CAAAA,KAAAE,CAAAF,IAAAE,CAAAF,CAAA,KAAAzlB,YAAA,EAEA,OADAylB,CAAAA,GAAAzlB,YAAAylB,EACAzlB,YAAAA,CAAAqmB,CAAArmB,CAAA;;AAEA,cAAA;AAEAylB,YAAAA,CAAAA,CAAAY,CAAAZ,CAAAA;AACK,WAHL,CAGK,OAAA3mB,CAAA,EAAAA;AACL,gBAAA;AAEA,qBAAA2mB,CAAAA,CAAAzgC,IAAAygC,CAAA,IAAAA,EAAAY,CAAAZ,CAAA;AACS,aAHT,CAGS,OAAA3mB,CAAA,EAAAA;AAGT,qBAAA2mB,CAAAA,CAAAzgC,IAAAygC,CAAAvvB,IAAAuvB,EAAAY,CAAAZ,CAAA;AAAAY;AAAAA;AAgDAC,SApEA,CAoEAF,CApEA,CAkEAN;AAEAM;AAiBA;;AAAA,aAAAG,CAAA,CAAAV,CAAA,EAAAztB,CAAA,EAAAA;AACAlC,WAAA2vB,GAAA3vB,GAAA2vB,CAAA3vB,EACAA,KAAAkC,KAAAlC,GAAAkC,CADAlC;AAaA;;AAAA,aAAAswB,CAAA,GAAAA,CA5BAnhB;;AAAAA,IAAAA,CAAAA,CAAAohB,QAAAphB,GAAA,UAAAwgB,CAAA,EAAAA;AACA,UAAAa,CAAAA,GAAA,IAAA19B,KAAA,CAAA3B,SAAAA,CAAAC,MAAAD,GAAA,CAAA,CAAA;AACA,UAAAA,SAAAA,CAAAC,MAAAD,GAAA,CAAA,EACA,KAAA,IAAA5C,CAAAA,GAAA,CAAA,EAAuBA,CAAAA,GAAA4C,SAAAA,CAAAC,MAAvB,EAA6C7C,CAAAA,EAA7C,EACAiiC,CAAAA,CAAAjiC,CAAAA,GAAA,CAAAiiC,CAAAA,GAAAr/B,SAAAA,CAAA5C,CAAA4C,CAAAq/B;AAGAX,MAAAA,CAAAA,CAAA/zB,IAAA+zB,CAAA,IAAAQ,CAAA,CAAAV,CAAA,EAAAa,CAAA,CAAAX,GACA,MAAAA,CAAAA,CAAAz+B,MAAA,IAAA0+B,CAAA,IACAJ,CAAAA,CAAAO,CAAAP,CAFAG;AAEAI,KATA9gB,EAkBAkhB,CAAAA,CAAA9/B,SAAA8/B,CAAAvY,GAAAuY,GAAA,YAAA;AACArwB,WAAA2vB,GAAA3vB,CAAAoe,KAAApe,CAAA,IAAAA,EAAAA,KAAAkC,KAAAlC;AAAAkC,KAnBAiN,EAqBAA,CAAAA,CAAAshB,KAAAthB,GAAA,SArBAA,EAsBAA,CAAAA,CAAAuhB,OAAAvhB,GAAAuhB,CAAA,CAtBAvhB,EAuBAA,CAAAA,CAAAwhB,GAAAxhB,GAAA,EAvBAA,EAwBAA,CAAAA,CAAAyhB,IAAAzhB,GAAA,EAxBAA,EAyBAA,CAAAA,CAAApL,OAAAoL,GAAA,EAzBAA,EA0BAA,CAAAA,CAAAC,QAAAD,GAAA,EA1BAA,EA8BAA,CAAAA,CAAA0hB,EAAA1hB,GAAAmhB,CA9BAnhB,EA+BAA,CAAAA,CAAA2hB,WAAA3hB,GAAAmhB,CA/BAnhB,EAgCAA,CAAAA,CAAA4hB,IAAA5hB,GAAAmhB,CAhCAnhB,EAiCAA,CAAAA,CAAA6hB,GAAA7hB,GAAAmhB,CAjCAnhB,EAkCAA,CAAAA,CAAA8hB,cAAA9hB,GAAAmhB,CAlCAnhB,EAmCAA,CAAAA,CAAA+hB,kBAAA/hB,GAAAmhB,CAnCAnhB,EAoCAA,CAAAA,CAAAgiB,IAAAhiB,GAAAmhB,CApCAnhB,EAqCAA,CAAAA,CAAAiiB,eAAAjiB,GAAAmhB,CArCAnhB,EAsCAA,CAAAA,CAAAkiB,mBAAAliB,GAAAmhB,CAtCAnhB,EAwCAA,CAAAA,CAAAmiB,SAAAniB,GAAA,UAAAjgB,CAAA,EAAAA;AAAqC,aAAA,EAAA;AAAA,KAxCrCigB,EA0CAA,CAAAA,CAAAoiB,OAAApiB,GAAA,UAAAjgB,CAAA,EAAAA;AACA,YAAA,IAAAuG,KAAA,CAAA,kCAAA,CAAA;AAAA,KA3CA0Z,EA8CAA,CAAAA,CAAAqiB,GAAAriB,GAAA,YAAA;AAA2B,aAAA,GAAA;AAAA,KA9C3BA,EA+CAA,CAAAA,CAAAsiB,KAAAtiB,GAAA,UAAAyM,CAAA,EAAAA;AACA,YAAA,IAAAnmB,KAAA,CAAA,gCAAA,CAAA;AAAA,KAhDA0Z,EAkDAA,CAAAA,CAAAuiB,KAAAviB,GAAA,YAAA;AAA4B,aAAA,CAAA;AAAA,KAlD5BA;AAkD4B,GxBrG5B,EwBqG4B,UAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA;AAAA;;AAAA,QAAA,CAAA,GAAA,QAAA,KAAA,YAAA,IAAA,UAAA,CAAA,EAAA;AAAA,UAAA,CAAA,IAAA,CAAA,CAAA,UAAA,EAAA,OAAA,CAAA;AAAA,UAAA,CAAA,GAAA,EAAA;AAAA,UAAA,QAAA,CAAA,EAAA,KAAA,IAAA,CAAA,IAAA,CAAA,EAAA,MAAA,CAAA,cAAA,CAAA,IAAA,CAAA,CAAA,EAAA,CAAA,MAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA;AAAA,aAAA,CAAA,CAAA,OAAA,GAAA,CAAA,EAAA,CAAA;AAAA,KAAA;;AAAA,IAAA,MAAA,CAAA,cAAA,CAAA,CAAA,EAAA,YAAA,EAAA;AAAA,MAAA,KAAA,EAAA,CAAA;AAAA,KAAA;;ACvL5B,QAAAwiB,CAAAA,GAAAroB,CAAAA,CAAA5a,CAAAA,CAAA,GAAAA,CAAA4a,CAAA;AAAA,QAEA7S,CAAAA,GAAA6S,CAAAA,CAAA5a,CAAAA,CAAA,EAAAA,CAAA4a,CAFA;AAAA,QAWAsoB,CAAAA,GAAA,YAAA;AAMA,aANA,YAAA;AACkB5xB,aAAAvJ,IAAAuJ,GAAOvJ,CAAPuJ,EACAA,KAAA6xB,OAAA7xB,GAAUvJ,CAAAA,CAAKo7B,OADf7xB,EAEAA,KAAA2xB,QAAA3xB,GAAW2xB,CAFX3xB,EAITA,KAAA8xB,KAAA9xB,GAAA8xB,CAAQ,CAJC9xB;AAID,OACjB;AANA,KAAA,EAXA;;AAmBa9R,IAAAA,CAAAA,CAAAyiC,GAAAziC,GAAW,IAAI0jC,CAAJ,EAAX1jC;AAAe0jC,GzB+D5B,EyB/D4BA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,KAAAA,UAAAA,CAAAA,EAAAA;AAAAA,UCf5BG,CAAAA,GAAAA,CAAAA,QAAAA,KAAAA,YAAAA,IAAAA,UAAAA,CAAAA,EAAAA;AAAAA,YAAAA,CAAAA,IAAAA,CAAAA,CAAAA,UAAAA,EAAAA,OAAAA,CAAAA;AAAAA,YAAAA,CAAAA,GAAAA,EAAAA;AAAAA,YAAAA,QAAAA,CAAAA,EAAAA,KAAAA,IAAAA,CAAAA,IAAAA,CAAAA,EAAAA,MAAAA,CAAAA,cAAAA,CAAAA,IAAAA,CAAAA,CAAAA,EAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,eAAAA,CAAAA,CAAAA,OAAAA,GAAAA,CAAAA,EAAAA,CAAAA;AAAAA,OAAAA,EAAArjC,CAAAA,CAAA,EAAAA,CAAAqjC,CDe4BH;AAAAA,UCXtBn7B,CAAAA,GAAas7B,CDWSH;;ACXTG,OADoB,eAAA,OAAXvjC,MAAW,GAAeA,MAAf,GAAwBif,CAC5CskB,EACRt7B,IADQs7B,GACDt7B,CADCs7B,EAInB5jC,CAAAA,CAAAD,OAAAC,GAAS4jC,CAJUA;AAIVA,KDOmBH,ECPnBG,IDOmBH,CCPnBG,IDOmBH,ECPnBG,CAAAA,CAAAA,CAAAA,CDOmBH;ACPnBG,G1BsET,E0BtESA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,YAAAA,IAAAA,UAAAA,CAAAA,EAAAA;AAAAA,UAAAA,CAAAA,IAAAA,CAAAA,CAAAA,UAAAA,EAAAA,OAAAA,CAAAA;AAAAA,UAAAA,CAAAA,GAAAA,EAAAA;AAAAA,UAAAA,QAAAA,CAAAA,EAAAA,KAAAA,IAAAA,CAAAA,IAAAA,CAAAA,EAAAA,MAAAA,CAAAA,cAAAA,CAAAA,IAAAA,CAAAA,CAAAA,EAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,aAAAA,CAAAA,CAAAA,OAAAA,GAAAA,CAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;ACTT,QAAAC,CAAAA,GAAAtjC,CAAAA,CAAA,CAAAA,CAAA;AAAA,QAGAujC,CAAAA,GAAAvjC,CAAAA,CAAA,EAAAA,CAHA;AAAA,QAIAwjC,CAAAA,GAAAxjC,CAAAA,CAAA,EAAAA,CAJA;AAAA,QAKAyjC,CAAAA,GAAAzjC,CAAAA,CAAA,EAAAA,CALA;AAAA,QAMA0jC,CAAAA,GAAA1jC,CAAAA,CAAA,EAAAA,CANA;AAAA,QAOA2jC,CAAAA,GAAA3jC,CAAAA,CAAA,EAAAA,CAPA;AAAA,QAQA4jC,CAAAA,GAAA5jC,CAAAA,CAAA,EAAAA,CARA;AAAA,QASA6jC,CAAAA,GAAA7jC,CAAAA,CAAA,EAAAA,CATA;AAAA,QAUA8jC,CAAAA,GAAA9jC,CAAAA,CAAA,EAAAA,CAVA;AAAA,QAWA+jC,CAAAA,GAAA/jC,CAAAA,CAAA,EAAAA,CAXA;AAAA,QAYAgkC,CAAAA,GAAAhkC,CAAAA,CAAA,EAAAA,CAZA;AAAA,QAaAikC,CAAAA,GAAAjkC,CAAAA,CAAA,EAAAA,CAbA;AAAA,QAcAkkC,CAAAA,GAAAlkC,CAAAA,CAAA,EAAAA,CAdA;AAAA,QAeAu+B,CAAAA,GAAAv+B,CAAAA,CAAA,EAAAA,CAfA;AAAA,QAgBAmkC,CAAAA,GAAAnkC,CAAAA,CAAA,EAAAA,CAhBA;AAAA,QAiBAokC,CAAAA,GAAAxpB,CAAAA,CAAA5a,CAAAA,CAAA,EAAAA,CAAA4a,CAjBA;AAAA,QAkBAqO,CAAAA,GAAAjpB,CAAAA,CAAA,EAAAA,CAlBA;AAAA,QAmBAqkC,CAAAA,GAAArkC,CAAAA,CAAA,EAAAA,CAnBA;AAAA,QAoBAskC,CAAAA,GAAAtkC,CAAAA,CAAA,EAAAA,CApBA;AAAA,QAqBAukC,CAAAA,GAAAvkC,CAAAA,CAAA,EAAAA,CArBA;AAAA,QAsBAwkC,CAAAA,GAAAxkC,CAAAA,CAAA,EAAAA,CAtBA;AAAA,QAuBAykC,CAAAA,GAAAzkC,CAAAA,CAAA,EAAAA,CAvBA;AAAA,QAwBA0kC,CAAAA,GAAA1kC,CAAAA,CAAA,EAAAA,CAxBA;AAAA,QAyBA2kC,CAAAA,GAAA/pB,CAAAA,CAAA5a,CAAAA,CAAA,EAAAA,CAAA4a,CAzBA;AAAA,QA0BAgqB,CAAAA,GAAA5kC,CAAAA,CAAA,EAAAA,CA1BA;AAAA,QA2BA6kC,CAAAA,GAAA7kC,CAAAA,CAAA,EAAAA,CA3BA;;AA6BaR,IAAAA,CAAAA,CAAAslC,oBAAAtlC,GAAyD,CACpE,CAAC,KAAD,EAAQ,EAAR,EAAY,IAAZ,EAAkB,YAAA;AAAM,aAAA,IAAIolC,CAAAA,CAAAG,UAAJ,CAAezB,CAAAA,CAAA9f,YAAf,EAA6BmhB,CAAAA,CAASK,GAAtC,CAAA;AAAsCA,KAA9D,CADoE,EAEpE,CAAC,MAAD,EAAS,EAAT,EAAa,IAAb,EAAmB,YAAA;AAAM,aAAA,IAAIJ,CAAAA,CAAAG,UAAJ,CAAezB,CAAAA,CAAA5f,WAAf,EAA4BihB,CAAAA,CAASM,IAArC,CAAA;AAAqCA,KAA9D,CAFoE,EAGpE,CAAC,OAAD,EAAU,EAAV,EAAc,IAAd,EAAoB,YAAA;AAAM,aAAA,IAAIL,CAAAA,CAAAG,UAAJ,CAAezB,CAAAA,CAAA5f,WAAf,EAA4BihB,CAAAA,CAASO,KAArC,CAAA;AAAqCA,KAA/D,CAHoE,EAIpE,CAAC,KAAD,EAAQ,EAAR,EAAY,IAAZ,EAAkB,YAAA;AAAM,aAAA,IAAIzB,CAAAA,CAAA0B,WAAJ,CAAgB7B,CAAAA,CAAA9f,YAAhB,EAA8B,UAAC4hB,CAAD,EAAKC,CAAL,EAAKA;AAAO,eAACD,CAAAA,GAAKC,CAAN;AAAMA,OAAhD,CAAA;AAAgDA,KAAxE,CAJoE,EAKpE,CAAC,KAAD,EAAQ,EAAR,EAAY,IAAZ,EAAkB,YAAA;AAAM,aAAA,IAAI5B,CAAAA,CAAA0B,WAAJ,CAAgB,CAAC,MAAD,CAAhB,EAA0B,UAACC,CAAD,EAAKC,CAAL,EAAKA;AAAO,eAACD,CAAAA,IAAMC,CAAP;AAAOA,OAA7C,CAAA;AAA6CA,KAArE,CALoE,EAMpE,CAAC,QAAD,EAAW,EAAX,EAAe,IAAf,EAAqB,YAAA;AAAM,aAAA,IAAI9B,CAAAA,CAAA+B,SAAJ,EAAA;AAAIA,KAA/B,CANoE,EAOpE,CAAC,MAAD,EAAS,EAAT,EAAa,IAAb,EAAmB,YAAA;AAAM,aAAA,IAAIV,CAAAA,CAAAG,UAAJ,CAAezB,CAAAA,CAAA5f,WAAf,EAA4BihB,CAAAA,CAASY,IAArC,CAAA;AAAqCA,KAA9D,CAPoE,EAQpE,CAAC,OAAD,EAAU,EAAV,EAAc,IAAd,EAAoB,YAAA;AAAM,aAAA,IAAIX,CAAAA,CAAAG,UAAJ,CAAezB,CAAAA,CAAA5f,WAAf,EAA4BihB,CAAAA,CAASa,KAArC,CAAA;AAAqCA,KAA/D,CARoE,EASpE,CAAC,MAAD,EAAS,EAAT,EAAa,IAAb,EAAmB,YAAA;AAAM,aAAA,IAAIZ,CAAAA,CAAAG,UAAJ,CAAezB,CAAAA,CAAA5f,WAAf,EAA4BihB,CAAAA,CAASc,IAArC,CAAA;AAAqCA,KAA9D,CAToE,EAUpE,CAAC,OAAD,EAAU,EAAV,EAAc,IAAd,EAAoB,YAAA;AAAM,aAAA,IAAIb,CAAAA,CAAAG,UAAJ,CAAezB,CAAAA,CAAA5f,WAAf,EAA4BihB,CAAAA,CAASe,KAArC,CAAA;AAAqCA,KAA/D,CAVoE,EAWpE,CAAC,aAAD,EAAgB,EAAhB,EAAoB,IAApB,EAA0B,YAAA;AAAM,aAAA,IAAIvB,CAAAA,CAAAwB,cAAJ,EAAA;AAAIA,KAApC,CAXoE,EAYpE,CAAC,oBAAD,EAAuB,EAAvB,EAA2B,IAA3B,EAAiC,YAAA;AAAM,aAAA,IAAInC,CAAAA,CAAAoC,qBAAJ,EAAA;AAAIA,KAA3C,CAZoE,EAapE,CAAC,MAAD,EAAS,EAAT,EAAa,IAAb,EAAmB,YAAA;AAAM,aAAA,IAAIhB,CAAAA,CAAAG,UAAJ,CAAezB,CAAAA,CAAA5f,WAAf,EAA4BihB,CAAAA,CAASlJ,IAArC,CAAA;AAAqCA,KAA9D,CAboE,EAcpE,CAAC,MAAD,EAAS,EAAT,EAAa,IAAb,EAAmB,YAAA;AAAM,aAAA,IAAImJ,CAAAA,CAAAG,UAAJ,CAAezB,CAAAA,CAAA5f,WAAf,EAA4BihB,CAAAA,CAASkB,IAArC,EAA2ClB,CAAAA,CAASmB,eAApD,CAAA;AAAoDA,KAA7E,CAdoE,EAepE,CAAC,QAAD,EAAW,EAAX,EAAe,IAAf,EAAqB,YAAA;AAAM,aAAA,IAAIpC,CAAAA,CAAAqC,SAAJ,EAAA;AAAIA,KAA/B,CAfoE,EAgBpE,CAAC,MAAD,EAAS,EAAT,EAAa,IAAb,EAAmB,YAAA;AAAM,aAAA,IAAIpC,CAAAA,CAAAqC,OAAJ,EAAA;AAAIA,KAA7B,CAhBoE,EAiBpE,CAAC,KAAD,EAAQ,EAAR,EAAY,IAAZ,EAAkB,YAAA;AAAM,aAAA,IAAIpB,CAAAA,CAAAG,UAAJ,CAAezB,CAAAA,CAAA5f,WAAf,EAA4BihB,CAAAA,CAASsB,GAArC,CAAA;AAAqCA,KAA7D,CAjBoE,EAkBpE,CAAC,MAAD,EAAS,EAAT,EAAa,IAAb,EAAmB,YAAA;AAAM,aAAA,IAAIrB,CAAAA,CAAAG,UAAJ,CAAezB,CAAAA,CAAA5f,WAAf,EAA4BihB,CAAAA,CAASuB,IAArC,CAAA;AAAqCA,KAA9D,CAlBoE,EAmBpE,CAAC,KAAD,EAAQ,EAAR,EAAY,IAAZ,EAAkB,YAAA;AAAM,aAAA,IAAIzC,CAAAA,CAAA0B,WAAJ,CAAgB7B,CAAAA,CAAA9f,YAAhB,EAA8B,UAAC4hB,CAAD,EAAKC,CAAL,EAAKA;AAAO,eAACD,CAAAA,GAAKC,CAAN;AAAMA,OAAhD,CAAA;AAAgDA,KAAxE,CAnBoE,EAoBpE,CAAC,SAAD,EAAY,EAAZ,EAAgB,IAAhB,EAAsB,YAAA;AAAM,aAAA,IAAIzB,CAAAA,CAAAuC,UAAJ,EAAA;AAAIA,KAAhC,CApBoE,EAqBpE,CAAC,KAAD,EAAQ,EAAR,EAAY,IAAZ,EAAkB,YAAA;AAAM,aAAA,IAAIvB,CAAAA,CAAAG,UAAJ,CAAezB,CAAAA,CAAA5f,WAAf,EAA4BihB,CAAAA,CAASyB,GAArC,EAA0CzB,CAAAA,CAAS0B,cAAnD,CAAA;AAAmDA,KAA3E,CArBoE,EAsBpE,CAAC,KAAD,EAAQ,EAAR,EAAY,IAAZ,EAAkB,YAAA;AAAM,aAAA,IAAIzB,CAAAA,CAAAG,UAAJ,CAAezB,CAAAA,CAAA5f,WAAf,EAA4BihB,CAAAA,CAAS2B,GAArC,CAAA;AAAqCA,KAA7D,CAtBoE,EAuBpE,CAAC,SAAD,EAAY,EAAZ,EAAgB,IAAhB,EAAsB,YAAA;AAAM,aAAA,IAAIzC,CAAAA,CAAA0C,UAAJ,EAAA;AAAIA,KAAhC,CAvBoE,EAwBpE,CAAC,OAAD,EAAU,EAAV,EAAc,IAAd,EAAoB,YAAA;AAAM,aAAA,IAAI3B,CAAAA,CAAAG,UAAJ,CAAezB,CAAAA,CAAA5f,WAAf,EAA4BihB,CAAAA,CAASx+B,KAArC,CAAA;AAAqCA,KAA/D,CAxBoE,EAyBpE,CAAC,QAAD,EAAW,EAAX,EAAe,IAAf,EAAqB,YAAA;AAAM,aAAA,IAAI29B,CAAAA,CAAA0C,SAAJ,EAAA;AAAIA,KAA/B,CAzBoE,EA0BpE,CAAC,MAAD,EAAS,EAAT,EAAa,IAAb,EAAmB,YAAA;AAAM,aAAA,IAAIzC,CAAAA,CAAA0C,OAAJ,EAAA;AAAIA,KAA7B,CA1BoE,EA2BpE,CAAC,mBAAD,EAAsB,EAAtB,EAA0B,IAA1B,EAAgC,YAAA;AAAM,aAAA,IAAItC,CAAAA,CAAAuC,oBAAJ,EAAA;AAAIA,KAA1C,CA3BoE,EA4BpE,CAAC,eAAD,EAAkB,EAAlB,EAAsB,IAAtB,EAA4B,YAAA;AAAM,aAAA,IAAIvC,CAAAA,CAAAwC,gBAAJ,EAAA;AAAIA,KAAtC,CA5BoE,EA6BpE,CAAC,aAAD,EAAgB,EAAhB,EAAoB,IAApB,EAA0B,YAAA;AAAM,aAAA,IAAI3C,CAAAA,CAAA4C,cAAJ,EAAA;AAAIA,KAApC,CA7BoE,EA8BpE,CAAC,uBAAD,EAA0B,EAA1B,EAA8B,IAA9B,EAAoC,YAAA;AAAM,aAAA,IAAI3C,CAAAA,CAAA4C,wBAAJ,EAAA;AAAIA,KAA9C,CA9BoE,EA+BpE,CAAC,OAAD,EAAU,EAAV,EAAc,IAAd,EAAoB,YAAA;AAAM,aAAA,IAAIjC,CAAAA,CAAAG,UAAJ,CAAezB,CAAAA,CAAA5f,WAAf,EAA4BihB,CAAAA,CAASmC,KAArC,EAAqCA,KAAOtjC,CAA5C,EAAuD,MAAvD,CAAA;AAAuD,KAAjF,CA/BoE,EAgCpE,CAAC,WAAD,EAAc,EAAd,EAAkB,IAAlB,EAAwB,YAAA;AAAM,aAAA,IAAIohC,CAAAA,CAAAG,UAAJ,CAAezB,CAAAA,CAAA5f,WAAf,EAA4BihB,CAAAA,CAASoC,SAArC,EAAgDpC,CAAAA,CAASqC,oBAAzD,CAAA;AAAyDA,KAAvF,CAhCoE,EAiCpE,CAAC,KAAD,EAAQ,EAAR,EAAY,IAAZ,EAAkB,YAAA;AAAM,aAAA,IAAIpC,CAAAA,CAAAG,UAAJ,CAAezB,CAAAA,CAAA5f,WAAf,EAA4BihB,CAAAA,CAASvuB,GAArC,CAAA;AAAqCA,KAA7D,CAjCoE,EAkCpE,CAAC,KAAD,EAAQ,EAAR,EAAY,IAAZ,EAAkB,YAAA;AAAM,aAAA,IAAI8tB,CAAAA,CAAA+C,MAAJ,EAAA;AAAIA,KAA5B,CAlCoE,EAmCpE,CAAC,QAAD,EAAW,EAAX,EAAe,IAAf,EAAqB,YAAA;AAAM,aAAA,IAAI1I,CAAAA,CAAAC,SAAJ,EAAA;AAAIA,KAA/B,CAnCoE,EAoCpE,CAAC,SAAD,EAAY,EAAZ,EAAgB,IAAhB,EAAsB,YAAA;AAAM,aAAA,IAAI2F,CAAAA,CAAA+C,UAAJ,EAAA;AAAIA,KAAhC,CApCoE,EAqCpE,CAAC,KAAD,EAAQ,EAAR,EAAY,IAAZ,EAAkB,YAAA;AAAM,aAAA,IAAIzD,CAAAA,CAAA0B,WAAJ,CAAgB7B,CAAAA,CAAA9f,YAAhB,EAA8B,UAAC4hB,CAAD,EAAKC,CAAL,EAAKA;AAAO,eAACD,CAAAA,GAAKC,CAAN;AAAMA,OAAhD,CAAA;AAAgDA,KAAxE,CArCoE,EAsCpE,CAAC,KAAD,EAAQ,EAAR,EAAY,IAAZ,EAAkB,YAAA;AAAM,aAAA,IAAIT,CAAAA,CAAAG,UAAJ,CAAezB,CAAAA,CAAA9f,YAAf,EAA6BmhB,CAAAA,CAASjO,GAAtC,CAAA;AAAsCA,KAA9D,CAtCoE,EAuCpE,CAAC,KAAD,EAAQ,EAAR,EAAY,IAAZ,EAAkB,YAAA;AAAM,aAAA,IAAIkO,CAAAA,CAAAG,UAAJ,CAAe,CAAC,MAAD,CAAf,EAAyBJ,CAAAA,CAAS/K,GAAlC,EAAkCA,KAAKp2B,CAAvC,EAAkD,MAAlD,CAAA;AAAkD,KAA1E,CAvCoE,EAwCpE,CAAC,IAAD,EAAO,EAAP,EAAW,IAAX,EAAiB,YAAA;AAAM,aAAA,IAAIigC,CAAAA,CAAA0B,WAAJ,CAAgB,CAAC,MAAD,CAAhB,EAA0B,UAACC,CAAD,EAAKC,CAAL,EAAKA;AAAO,eAACD,CAAAA,IAAMC,CAAP;AAAOA,OAA7C,CAAA;AAA6CA,KAApE,CAxCoE,EAyCpE,CAAC,OAAD,EAAU,EAAV,EAAc,IAAd,EAAoB,YAAA;AAAM,aAAA,IAAI5B,CAAAA,CAAA0B,WAAJ,CAAgB7B,CAAAA,CAAA9f,YAAhB,EAA8B,UAAC4hB,CAAD,EAAKC,CAAL,EAAKA;AAAO,eAACD,CAAAA,IAAM,CAANA,GAAUA,CAAVA,GAAeA,CAAAA,GAAKC,CAArB;AAAqBA,OAA/D,CAAA;AAA+DA,KAAzF,CAzCoE,EA0CpE,CAAC,YAAD,EAAe,EAAf,EAAmB,IAAnB,EAAyB,YAAA;AAAM,aAAA,IAAIT,CAAAA,CAAAG,UAAJ,CAAezB,CAAAA,CAAA5f,WAAf,EAA4BihB,CAAAA,CAASwC,UAArC,CAAA;AAAqCA,KAApE,CA1CoE,EA2CpE,CAAC,cAAD,EAAiB,EAAjB,EAAqB,IAArB,EAA2B,YAAA;AAAM,aAAA,IAAI/C,CAAAA,CAAUgD,eAAd,EAAA;AAAcA,KAA/C,CA3CoE,EA4CpE,CAAC,WAAD,EAAc,EAAd,EAAkB,IAAlB,EAAwB,YAAA;AAAM,aAAA,IAAIhD,CAAAA,CAAUiD,YAAd,EAAA;AAAcA,KAA5C,CA5CoE,EA6CpE,CAAC,YAAD,EAAe,EAAf,EAAmB,IAAnB,EAAyB,YAAA;AAAM,aAAA,IAAIjD,CAAAA,CAAUkD,aAAd,EAAA;AAAcA,KAA7C,CA7CoE,EA8CpE,CAAC,WAAD,EAAc,EAAd,EAAkB,IAAlB,EAAwB,YAAA;AAAM,aAAA,IAAIlD,CAAAA,CAAUmD,YAAd,EAAA;AAAcA,KAA5C,CA9CoE,EA+CpE,CAAC,YAAD,EAAe,EAAf,EAAmB,IAAnB,EAAyB,YAAA;AAAM,aAAA,IAAInD,CAAAA,CAAUoD,aAAd,EAAA;AAAcA,KAA7C,CA/CoE,EAgDpE,CAAC,WAAD,EAAc,EAAd,EAAkB,IAAlB,EAAwB,YAAA;AAAM,aAAA,IAAIpD,CAAAA,CAAUqD,YAAd,EAAA;AAAcA,KAA5C,CAhDoE,EAiDpE,CAAC,iBAAD,EAAoB,EAApB,EAAwB,IAAxB,EAA8B,YAAA;AAAM,aAAA,IAAIrD,CAAAA,CAAUsD,kBAAd,EAAA;AAAcA,KAAlD,CAjDoE,EAkDpE,CAAC,MAAD,EAAS,EAAT,EAAa,IAAb,EAAmB,YAAA;AAAM,aAAA,IAAI9C,CAAAA,CAAAG,UAAJ,CAAezB,CAAAA,CAAA5f,WAAf,EAA4BihB,CAAAA,CAASgD,IAArC,CAAA;AAAqCA,KAA9D,CAlDoE,EAmDpE,CAAC,SAAD,EAAY,EAAZ,EAAgB,IAAhB,EAAsB,YAAA;AAAM,aAAA,IAAI1e,CAAAA,CAAA2e,UAAJ,EAAA;AAAIA,KAAhC,CAnDoE,EAoDpE,CAAC,SAAD,EAAY,EAAZ,EAAgB,IAAhB,EAAsB,YAAA;AAAM,aAAA,IAAIhD,CAAAA,CAAAG,UAAJ,CAAezB,CAAAA,CAAA5f,WAAf,EAA4BihB,CAAAA,CAASkD,OAArC,CAAA;AAAqCA,KAAjE,CApDoE,EAqDpE,CAAC,MAAD,EAAS,EAAT,EAAa,IAAb,EAAmB,YAAA;AAAM,aAAA,IAAIjD,CAAAA,CAAAG,UAAJ,CAAezB,CAAAA,CAAA9f,YAAf,EAA6BmhB,CAAAA,CAASmD,IAAtC,CAAA;AAAsCA,KAA/D,CArDoE,EAsDpE,CAAC,KAAD,EAAQ,EAAR,EAAY,IAAZ,EAAkB,YAAA;AAAM,aAAA,IAAIlD,CAAAA,CAAAG,UAAJ,CAAezB,CAAAA,CAAA5f,WAAf,EAA4BihB,CAAAA,CAASoD,GAArC,CAAA;AAAqCA,KAA7D,CAtDoE,EAuDpE,CAAC,MAAD,EAAS,EAAT,EAAa,IAAb,EAAmB,YAAA;AAAM,aAAA,IAAInD,CAAAA,CAAAG,UAAJ,CAAezB,CAAAA,CAAA5f,WAAf,EAA4BihB,CAAAA,CAASqD,IAArC,CAAA;AAAqCA,KAA9D,CAvDoE,EAwDpE,CAAC,OAAD,EAAU,EAAV,EAAc,KAAd,EAAqB,YAAA;AAAM,aAAA,IAAI3D,CAAAA,CAAA4D,WAAJ,EAAA;AAAIA,KAA/B,CAxDoE,EAyDpE,CAAC,OAAD,EAAU,EAAV,EAAc,KAAd,EAAqB,YAAA;AAAM,aAAA,IAAI5D,CAAAA,CAAA6D,QAAJ,EAAA;AAAIA,KAA/B,CAzDoE,EA0DpE,CAAC,SAAD,EAAY,EAAZ,EAAgB,IAAhB,EAAsB,YAAA;AAAM,aAAA,IAAI5D,CAAAA,CAAA6D,UAAJ,EAAA;AAAIA,KAAhC,CA1DoE,EA2DpE,CAAC,MAAD,EAAS,EAAT,EAAa,IAAb,EAAmB,YAAA;AAAM,aAAA,IAAIvD,CAAAA,CAAAG,UAAJ,CAAezB,CAAAA,CAAA5f,WAAf,EAA4BihB,CAAAA,CAASyD,IAArC,CAAA;AAAqCA,KAA9D,CA3DoE,EA4DpE,CAAC,SAAD,EAAY,EAAZ,EAAgB,IAAhB,EAAsB,YAAA;AAAM,aAAA,IAAI7D,CAAAA,CAAA8D,UAAJ,EAAA;AAAIA,KAAhC,CA5DoE,EA6DpE,CAAC,KAAD,EAAQ,EAAR,EAAY,IAAZ,EAAkB,YAAA;AAAM,aAAA,IAAI5E,CAAAA,CAAA0B,WAAJ,CAAgB7B,CAAAA,CAAA9f,YAAhB,EAA8B,UAAC4hB,CAAD,EAAKC,CAAL,EAAKA;AAAO,eAACD,CAAAA,GAAKC,CAAN;AAAMA,OAAhD,CAAA;AAAgDA,KAAxE,CA7DoE,EA8DpE,CAAC,KAAD,EAAQ,EAAR,EAAY,IAAZ,EAAkB,YAAA;AAAM,aAAA,IAAIb,CAAAA,CAAA8D,MAAJ,EAAA;AAAIA,KAA5B,CA9DoE,EA+DpE,CAAC,KAAD,EAAQ,EAAR,EAAY,IAAZ,EAAkB,YAAA;AAAM,aAAA,IAAI1D,CAAAA,CAAAG,UAAJ,CAAezB,CAAAA,CAAA5f,WAAf,EAA4BihB,CAAAA,CAAS4D,GAArC,CAAA;AAAqCA,KAA7D,CA/DoE,EAgEpE,CAAC,MAAD,EAAS,EAAT,EAAa,IAAb,EAAmB,YAAA;AAAM,aAAA,IAAI3D,CAAAA,CAAAG,UAAJ,CAAezB,CAAAA,CAAA5f,WAAf,EAA4BihB,CAAAA,CAAS6D,IAArC,CAAA;AAAqCA,KAA9D,CAhEoE,EAiEpE,CAAC,MAAD,EAAS,EAAT,EAAa,IAAb,EAAmB,YAAA;AAAM,aAAA,IAAI/D,CAAAA,CAAAgE,OAAJ,EAAA;AAAIA,KAA7B,CAjEoE,EAkEpE,CAAC,WAAD,EAAc,EAAd,EAAkB,IAAlB,EAAwB,YAAA;AAAM,aAAA,IAAI/D,CAAAA,CAAAgE,YAAJ,EAAA;AAAIA,KAAlC,CAlEoE,EAmEpE,CAAC,WAAD,EAAc,EAAd,EAAkB,IAAlB,EAAwB,YAAA;AAAM,aAAA,IAAI7D,CAAAA,CAAA8D,YAAJ,EAAA;AAAIA,KAAlC,CAnEoE,EAoEpE,CAAC,KAAD,EAAQ,EAAR,EAAY,IAAZ,EAAkB,YAAA;AAAM,aAAA,IAAIlF,CAAAA,CAAA0B,WAAJ,CAAgB,CAAC,MAAD,CAAhB,EAA0B,UAACC,CAAD,EAAKC,CAAL,EAAKA;AAAO,eAACD,CAAAA,GAAKC,CAAN;AAAMA,OAA5C,CAAA;AAA4CA,KAApE,CApEoE,CAAzD7lC;AAoEyD6lC,G3BlBtE,E2BkBsEA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;ACnGtE5lC,IAAAA,CAAAA,CAAAD,OAAAC,GAAAwkB,CAAAxkB;AAEA,QAEAmpC,CAFA;AAAA,QAAA5pB,CAAAA,GAAgBhf,CAAAA,CAAQ,CAARA,CAAhB;AAAA,QAIAkgB,CAAAA,GAAAlB,CAAAA,CAAAkB,QAJA;AAAA,QAKAN,CAAAA,GAAAZ,CAAAA,CAAAY,MALA;AAAA,QAMAI,CAAAA,GAAAhB,CAAAA,CAAAgB,IANA;;AAiBA,aAAA6oB,CAAA,CAAAC,CAAA,EAAAjjB,CAAA,EAAA6G,CAAA,EAAAA;AAMApb,WAAAw3B,EAAAx3B,GAAAw3B,CAAAx3B,EAMAA,KAAAuU,GAAAvU,GAAAuU,CANAvU,EAYAA,KAAAlF,IAAAkF,GAAAlF,KAAA5I,CAZA8N,EAkBAA,KAAAob,GAAApb,GAAAob,CAlBApb;AAsBA;;AAAA,aAAAswB,CAAA,GAAAA,CAUA;;AAAA,aAAAmH,CAAA,CAAA7jB,CAAA,EAAAA;AAMA5T,WAAA03B,IAAA13B,GAAA4T,CAAAA,CAAA8jB,IAAA13B,EAMAA,KAAA23B,IAAA33B,GAAA4T,CAAAA,CAAA+jB,IANA33B,EAYAA,KAAAuU,GAAAvU,GAAA4T,CAAAA,CAAAW,GAZAvU,EAkBAA,KAAAlF,IAAAkF,GAAA4T,CAAAA,CAAAgkB,MAlBA53B;AA0BA;;AAAA,aAAA2S,CAAA,GAAAA;AAMA3S,WAAAuU,GAAAvU,GAAA,CAAAA,EAMAA,KAAA03B,IAAA13B,GAAA,IAAAu3B,CAAA,CAAAjH,CAAA,EAAA,CAAA,EAAA,CAAA,CANAtwB,EAYAA,KAAA23B,IAAA33B,GAAAA,KAAA03B,IAZA13B,EAkBAA,KAAA43B,MAAA53B,GAAA,IAlBAA;AAuEA;;AAAA,aAAA63B,CAAA,CAAAzc,CAAA,EAAA9a,CAAA,EAAArC,CAAA,EAAAA;AACAqC,MAAAA,CAAAA,CAAArC,CAAAqC,CAAAA,GAAA,MAAA8a,CAAA9a;AAoBA;;AAAA,aAAAw3B,CAAA,CAAAvjB,CAAA,EAAA6G,CAAA,EAAAA;AACApb,WAAAuU,GAAAvU,GAAAuU,CAAAvU,EACAA,KAAAlF,IAAAkF,GAAAlF,KAAA5I,CADA8N,EAEAA,KAAAob,GAAApb,GAAAob,CAFApb;AAgDA;;AAAA,aAAA+3B,CAAA,CAAA3c,CAAA,EAAA9a,CAAA,EAAArC,CAAA,EAAAA;AACA,aAAAmd,CAAAA,CAAApK,EAAA,GACA1Q,CAAAA,CAAArC,CAAAA,EAAAqC,CAAAA,GAAA,MAAA8a,CAAAA,CAAArK,EAAA,GAAA,GAAAzQ,EACA8a,CAAAA,CAAArK,EAAAqK,GAAArK,CAAAqK,CAAAA,CAAArK,EAAAqK,KAAA,CAAAA,GAAAA,CAAAA,CAAApK,EAAAoK,IAAA,EAAArK,MAAA,CADAzQ,EAEA8a,CAAAA,CAAApK,EAAAoK,MAAA,CAFA9a;;AAIA,aAAA8a,CAAAA,CAAArK,EAAAqK,GAAA,GAAA,GACA9a,CAAAA,CAAArC,CAAAA,EAAAqC,CAAAA,GAAA,MAAA8a,CAAAA,CAAArK,EAAA,GAAA,GAAAzQ,EACA8a,CAAAA,CAAArK,EAAAqK,GAAAA,CAAAA,CAAArK,EAAAqK,KAAA,CADA9a;;AAGAA,MAAAA,CAAAA,CAAArC,CAAAA,EAAAqC,CAAAA,GAAA8a,CAAAA,CAAArK,EAAAzQ;AA2CA;;AAAA,aAAA03B,CAAA,CAAA5c,CAAA,EAAA9a,CAAA,EAAArC,CAAA,EAAAA;AACAqC,MAAAA,CAAAA,CAAArC,CAAAqC,CAAAA,GAAA,MAAA8a,CAAA9a,EACAA,CAAAA,CAAArC,CAAAA,GAAA,CAAAqC,CAAAA,GAAA8a,CAAAA,KAAA,CAAAA,GAAA,GADA9a,EAEAA,CAAAA,CAAArC,CAAAA,GAAA,CAAAqC,CAAAA,GAAA8a,CAAAA,KAAA,EAAAA,GAAA,GAFA9a,EAGAA,CAAAA,CAAArC,CAAAA,GAAA,CAAAqC,CAAAA,GAAA8a,CAAAA,KAAA,EAHA9a;AAnKAqS;;AAAAA,IAAAA,CAAAA,CAAA1iB,MAAA0iB,GAAAjF,CAAAA,CAAAtM,MAAAsM,GACA,YAAA;AACA,aAAA,CAAAiF,CAAAA,CAAA1iB,MAAA0iB,GAAA,YAAA;AACA,eAAA,IAAA2kB,CAAA,EAAA;AAAAA,OADA,GAAA;AACAA,KAHA5pB,GAOA,YAAA;AACA,aAAA,IAAAiF,CAAA,EAAA;AAAAA,KARAA,EAgBAA,CAAAA,CAAA4L,KAAA5L,GAAA,UAAA3e,CAAA,EAAAA;AACA,aAAA,IAAA0Z,CAAAA,CAAA5a,KAAA,CAAAkB,CAAA,CAAA;AAAAA,KAjBA2e,EAsBAjF,CAAAA,CAAA5a,KAAA4a,KAAA5a,KAAA4a,KACAiF,CAAAA,CAAA4L,KAAA5L,GAAAjF,CAAAA,CAAAiB,IAAAjB,CAAAiF,CAAAA,CAAA4L,KAAA7Q,EAAAA,CAAAA,CAAA5a,KAAA4a,CAAAnd,SAAAmd,CAAAgR,QAAAhR,CADAA,CAtBAiF,EAiCAA,CAAAA,CAAApiB,SAAAoiB,CAAAslB,KAAAtlB,GAAA,UAAA6kB,CAAA,EAAAjjB,CAAA,EAAA6G,CAAA,EAAAA;AAGA,aAFApb,KAAA23B,IAAA33B,GAAAA,KAAA23B,IAAA33B,CAAAlF,IAAAkF,GAAA,IAAAu3B,CAAA,CAAAC,CAAA,EAAAjjB,CAAA,EAAA6G,CAAA,CAAApb,EACAA,KAAAuU,GAAAvU,IAAAuU,CADAvU,EAEAA,IAAA;AAAAA,KApCA2S,EAkEAmlB,CAAAA,CAAAvnC,SAAAunC,GAAAzoC,MAAAA,CAAAY,MAAAZ,CAAAkoC,CAAAA,CAAAhnC,SAAAlB,CAlEAsjB,EAmEAmlB,CAAAA,CAAAvnC,SAAAunC,CAAAN,EAAAM,GAxBA,UAAA1c,CAAA,EAAA9a,CAAA,EAAArC,CAAA,EAAAA;AACA,aAAAmd,CAAAA,GAAA,GAAA,GACA9a,CAAAA,CAAArC,CAAAA,EAAAqC,CAAAA,GAAA,MAAA8a,CAAA,GAAA,GAAA9a,EACA8a,CAAAA,MAAA,CADA9a;;AAGAA,MAAAA,CAAAA,CAAArC,CAAAqC,CAAAA,GAAA8a,CAAA9a;AAAA8a,KAhDAzI,EA0EAA,CAAAA,CAAApiB,SAAAoiB,CAAAkB,MAAAlB,GAAA,UAAA/iB,CAAA,EAAAA;AAWA,aARAoQ,KAAAuU,GAAAvU,IAAAuU,CAAAvU,KAAA23B,IAAA33B,GAAAA,KAAA23B,IAAA33B,CAAAlF,IAAAkF,GAAA,IAAA83B,CAAA,CAAAA,CACAloC,CAAAA,MAAA,CADAkoC,IAEA,GAFAA,GAEA,CAFAA,GAGAloC,CAAAA,GAAA,KAAAA,GAAA,CAAAA,GACAA,CAAAA,GAAA,OAAAA,GAAA,CAAAA,GACAA,CAAAA,GAAA,SAAAA,GAAA,CAAAA,GACA,CANA,EAOAA,CAPA,CAAA2kB,EAOAA,GAPAvU,EAQAA,IAAA;AAAAA,KArFA2S,EA8FAA,CAAAA,CAAApiB,SAAAoiB,CAAAwB,KAAAxB,GAAA,UAAA/iB,CAAA,EAAAA;AACA,aAAAA,CAAAA,GAAA,CAAAA,GACAoQ,KAAAi4B,KAAAj4B,CAAA+3B,CAAA/3B,EAAA,EAAAA,EAAA4O,CAAAA,CAAAgW,UAAAhW,CAAAhf,CAAAgf,CAAA5O,CADApQ,GAEAoQ,KAAA6T,MAAA7T,CAAApQ,CAAAoQ,CAFA;AAEApQ,KAjGA+iB,EAyGAA,CAAAA,CAAApiB,SAAAoiB,CAAAulB,MAAAvlB,GAAA,UAAA/iB,CAAA,EAAAA;AACA,aAAAoQ,KAAA6T,MAAA7T,CAAA6T,CAAAjkB,CAAAA,IAAA,CAAAA,GAAAA,CAAAA,IAAA,EAAAikB,MAAA,CAAA7T,CAAA;AAAA,KA1GA2S,EAgIAA,CAAAA,CAAApiB,SAAAoiB,CAAAwE,MAAAxE,GAAA,UAAA/iB,CAAA,EAAAA;AACA,UAAAihB,CAAAA,GAAAjC,CAAAA,CAAAvN,IAAAuN,CAAAhf,CAAAgf,CAAA;AACA,aAAA5O,KAAAi4B,KAAAj4B,CAAA+3B,CAAA/3B,EAAA6Q,CAAAA,CAAAzf,MAAAyf,EAAA7Q,EAAA6Q,CAAA7Q,CAAA;AAAA6Q,KAlIA8B,EA4IAA,CAAAA,CAAApiB,SAAAoiB,CAAAoB,KAAApB,GAAAA,CAAAA,CAAApiB,SAAAoiB,CAAAwE,MA5IAxE,EAoJAA,CAAAA,CAAApiB,SAAAoiB,CAAAwlB,MAAAxlB,GAAA,UAAA/iB,CAAA,EAAAA;AACA,UAAAihB,CAAAA,GAAAjC,CAAAA,CAAAvN,IAAAuN,CAAAhf,CAAAgf,EAAAwpB,QAAAxpB,EAAA;AACA,aAAA5O,KAAAi4B,KAAAj4B,CAAA+3B,CAAA/3B,EAAA6Q,CAAAA,CAAAzf,MAAAyf,EAAA7Q,EAAA6Q,CAAA7Q,CAAA;AAAA6Q,KAtJA8B,EA8JAA,CAAAA,CAAApiB,SAAAoiB,CAAA0lB,IAAA1lB,GAAA,UAAA/iB,CAAA,EAAAA;AACA,aAAAoQ,KAAAi4B,KAAAj4B,CAAA63B,CAAA73B,EAAA,CAAAA,EAAApQ,CAAAA,GAAA,CAAAA,GAAA,CAAAoQ,CAAA;AAAA,KA/JA2S,EA8KAA,CAAAA,CAAApiB,SAAAoiB,CAAA2lB,OAAA3lB,GAAA,UAAA/iB,CAAA,EAAAA;AACA,aAAAoQ,KAAAi4B,KAAAj4B,CAAAg4B,CAAAh4B,EAAA,CAAAA,EAAApQ,CAAAA,KAAA,CAAAoQ,CAAA;AAAA,KA/KA2S,EAwLAA,CAAAA,CAAApiB,SAAAoiB,CAAA4lB,QAAA5lB,GAAAA,CAAAA,CAAApiB,SAAAoiB,CAAA2lB,OAxLA3lB,EAgMAA,CAAAA,CAAApiB,SAAAoiB,CAAA6lB,OAAA7lB,GAAA,UAAA/iB,CAAA,EAAAA;AACA,UAAAihB,CAAAA,GAAAjC,CAAAA,CAAAvN,IAAAuN,CAAAhf,CAAAgf,CAAA;AACA,aAAA5O,KAAAi4B,KAAAj4B,CAAAg4B,CAAAh4B,EAAA,CAAAA,EAAA6Q,CAAAA,CAAAE,EAAA/Q,EAAAi4B,KAAAj4B,CAAAg4B,CAAAh4B,EAAA,CAAAA,EAAA6Q,CAAAA,CAAAG,EAAAhR,CAAA;AAAAgR,KAlMA2B,EA4MAA,CAAAA,CAAApiB,SAAAoiB,CAAA8lB,QAAA9lB,GAAAA,CAAAA,CAAApiB,SAAAoiB,CAAA6lB,OA5MA7lB,EAoNAA,CAAAA,CAAApiB,SAAAoiB,CAAAnE,KAAAmE,GAAA,UAAA/iB,CAAA,EAAAA;AACA,aAAAoQ,KAAAi4B,KAAAj4B,CAAA0N,CAAAA,CAAAc,KAAAd,CAAA2V,YAAArjB,EAAA,CAAAA,EAAApQ,CAAAoQ,CAAA;AAAApQ,KArNA+iB,EA8NAA,CAAAA,CAAApiB,SAAAoiB,CAAAuE,MAAAvE,GAAA,UAAA/iB,CAAA,EAAAA;AACA,aAAAoQ,KAAAi4B,KAAAj4B,CAAA0N,CAAAA,CAAAc,KAAAd,CAAA6V,aAAAvjB,EAAA,CAAAA,EAAApQ,CAAAoQ,CAAA;AAAApQ,KA/NA+iB;AAkOA,QAAA+lB,CAAAA,GAAAhrB,CAAAA,CAAA5a,KAAA4a,CAAAnd,SAAAmd,CAAAvZ,GAAAuZ,GACA,UAAA0N,CAAA,EAAA9a,CAAA,EAAArC,CAAA,EAAAA;AACAqC,MAAAA,CAAAA,CAAAnM,GAAAmM,CAAA8a,CAAA9a,EAAArC,CAAAqC;AAAArC,KAFAyP,GAKA,UAAA0N,CAAA,EAAA9a,CAAA,EAAArC,CAAA,EAAAA;AACA,WAAA,IAAA1P,CAAAA,GAAA,CAAA,EAAuBA,CAAAA,GAAA6sB,CAAAA,CAAAhqB,MAAvB,EAAuBA,EAAgB7C,CAAvC,EACA+R,CAAAA,CAAArC,CAAAA,GAAA1P,CAAA+R,CAAAA,GAAA8a,CAAAA,CAAA7sB,CAAA6sB,CAAA9a;AAAA/R,KAPA;AAeAokB,IAAAA,CAAAA,CAAApiB,SAAAoiB,CAAAd,KAAAc,GAAA,UAAA/iB,CAAA,EAAAA;AACA,UAAA2kB,CAAAA,GAAA3kB,CAAAA,CAAAwB,MAAAxB,KAAA,CAAA;AACA,UAAA,CAAA2kB,CAAA,EACA,OAAAvU,KAAAi4B,KAAAj4B,CAAA63B,CAAA73B,EAAA,CAAAA,EAAA,CAAAA,CAAA;;AACA,UAAA0N,CAAAA,CAAA4B,QAAA5B,CAAA9d,CAAA8d,CAAA,EAAA;AACA,YAAApN,CAAAA,GAAAqS,CAAAA,CAAA4L,KAAA5L,CAAA4B,CAAAA,GAAAjG,CAAAA,CAAAld,MAAAkd,CAAA1e,CAAA0e,CAAAqE,CAAA;AACArE,QAAAA,CAAAA,CAAA+F,MAAA/F,CAAA1e,CAAA0e,EAAAhO,CAAAgO,EAAA,CAAAA,GACA1e,CAAAA,GAAA0Q,CADAgO;AAGA;;AAAA,aAAAtO,KAAA6T,MAAA7T,CAAAuU,CAAAvU,EAAAi4B,KAAAj4B,CAAA04B,CAAA14B,EAAAuU,CAAAvU,EAAApQ,CAAAoQ,CAAA;AAAApQ,KATA+iB,EAiBAA,CAAAA,CAAApiB,SAAAoiB,CAAAmB,MAAAnB,GAAA,UAAA/iB,CAAA,EAAAA;AACA,UAAA2kB,CAAAA,GAAA7F,CAAAA,CAAAtd,MAAAsd,CAAA9e,CAAA8e,CAAA;AACA,aAAA6F,CAAAA,GACAvU,KAAA6T,MAAA7T,CAAAuU,CAAAvU,EAAAi4B,KAAAj4B,CAAA0O,CAAAA,CAAAqM,KAAA/a,EAAAuU,CAAAvU,EAAApQ,CAAAoQ,CADAuU,GAEAvU,KAAAi4B,KAAAj4B,CAAA63B,CAAA73B,EAAA,CAAAA,EAAA,CAAAA,CAFA;AAEA,KArBA2S,EA6BAA,CAAAA,CAAApiB,SAAAoiB,CAAAqB,IAAArB,GAAA,YAAA;AAIA,aAHA3S,KAAA43B,MAAA53B,GAAA,IAAAy3B,CAAA,CAAAz3B,IAAA,CAAAA,EACAA,KAAA03B,IAAA13B,GAAAA,KAAA23B,IAAA33B,GAAA,IAAAu3B,CAAA,CAAAjH,CAAA,EAAA,CAAA,EAAA,CAAA,CADAtwB,EAEAA,KAAAuU,GAAAvU,GAAA,CAFAA,EAGAA,IAAA;AAAAA,KAjCA2S,EAwCAA,CAAAA,CAAApiB,SAAAoiB,CAAAjM,KAAAiM,GAAA,YAAA;AAUA,aATA3S,KAAA43B,MAAA53B,IACAA,KAAA03B,IAAA13B,GAAAA,KAAA43B,MAAA53B,CAAA03B,IAAA13B,EACAA,KAAA23B,IAAA33B,GAAAA,KAAA43B,MAAA53B,CAAA23B,IADA33B,EAEAA,KAAAuU,GAAAvU,GAAAA,KAAA43B,MAAA53B,CAAAuU,GAFAvU,EAGAA,KAAA43B,MAAA53B,GAAAA,KAAA43B,MAAA53B,CAAAlF,IAJAkF,KAMAA,KAAA03B,IAAA13B,GAAAA,KAAA23B,IAAA33B,GAAA,IAAAu3B,CAAA,CAAAjH,CAAA,EAAA,CAAA,EAAA,CAAA,CAAAtwB,EACAA,KAAAuU,GAAAvU,GAAA,CAPAA,GASAA,IAAA;AAAAA,KAlDA2S,EAyDAA,CAAAA,CAAApiB,SAAAoiB,CAAAsB,MAAAtB,GAAA,YAAA;AACA,UAAA+kB,CAAAA,GAAA13B,KAAA03B,IAAA;AAAA,UACAC,CAAAA,GAAA33B,KAAA23B,IADA;AAAA,UAEApjB,CAAAA,GAAAvU,KAAAuU,GAFA;AASA,aANAvU,KAAA0G,KAAA1G,GAAA6T,MAAA7T,CAAAuU,CAAAvU,GACAuU,CAAAA,KACAvU,KAAA23B,IAAA33B,CAAAlF,IAAAkF,GAAA03B,CAAAA,CAAA58B,IAAAkF,EACAA,KAAA23B,IAAA33B,GAAA23B,CADA33B,EAEAA,KAAAuU,GAAAvU,IAAAuU,CAHAA,CADAvU,EAMAA,IAAA;AAAAA,KAnEA2S,EA0EAA,CAAAA,CAAApiB,SAAAoiB,CAAAgmB,MAAAhmB,GAAA,YAAA;AAIA,WAHA,IAAA+kB,CAAAA,GAAA13B,KAAA03B,IAAA13B,CAAAlF,IAAA,EACAwF,CAAAA,GAAAN,KAAAI,WAAAJ,CAAAue,KAAAve,CAAAA,KAAAuU,GAAAvU,CADA,EAEA/B,CAAAA,GAAA,CACA,EAAAy5B,CAAA,GACAA,CAAAA,CAAAF,EAAAE,CAAAA,CAAAA,CAAAtc,GAAAsc,EAAAp3B,CAAAo3B,EAAAz5B,CAAAy5B,GACAz5B,CAAAA,IAAAy5B,CAAAA,CAAAnjB,GADAmjB,EAEAA,CAAAA,GAAAA,CAAAA,CAAA58B,IAFA48B;;AAKA,aAAAp3B,CAAA;AAAAA,KApFAqS,EAuFAA,CAAAA,CAAAZ,UAAAY,GAAA,UAAAimB,CAAA,EAAAA;AACAtB,MAAAA,CAAAA,GAAAsB,CAAAtB;AAAAsB,KAxFAjmB;AAwFAimB,G5BvXA,E4BuXAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;ACxcAzqC,IAAAA,CAAAA,CAAAD,OAAAC,GAAAskB,CAAAtkB;AAEA,QAEA0qC,CAFA;AAAA,QAAAnrB,CAAAA,GAAgBhf,CAAAA,CAAQ,CAARA,CAAhB;AAAA,QAIAkgB,CAAAA,GAAAlB,CAAAA,CAAAkB,QAJA;AAAA,QAKAF,CAAAA,GAAAhB,CAAAA,CAAAgB,IALA;;AAQA,aAAAoqB,CAAA,CAAAxkB,CAAA,EAAAykB,CAAA,EAAAA;AACA,aAAA74B,UAAAA,CAAA,yBAAAoU,CAAAA,CAAArW,GAAA,GAAA,KAAA,IAAA86B,CAAAA,IAAA,CAAA,IAAA,KAAA,GAAAzkB,CAAAA,CAAAC,GAAArU,CAAA;AASA;;AAAA,aAAAuS,CAAA,CAAAnR,CAAA,EAAAA;AAMAtB,WAAAM,GAAAN,GAAAsB,CAAAtB,EAMAA,KAAA/B,GAAA+B,GAAA,CANAA,EAYAA,KAAAuU,GAAAvU,GAAAsB,CAAAA,CAAAlQ,MAZA4O;AAeA;;AAAA,QAwCApQ,CAxCA;AAAA,QAAAopC,CAAAA,GAAA,eAAA,OAAAt2B,UAAA,GACA,UAAApB,CAAA,EAAAA;AACA,UAAAA,CAAAA,YAAAoB,UAAApB,IAAAxO,KAAAA,CAAAqN,OAAArN,CAAAwO,CAAAxO,CAAA,EACA,OAAA,IAAA2f,CAAA,CAAAnR,CAAA,CAAA;AACA,YAAA7L,KAAAA,CAAA,gBAAAA,CAAA;AAAA,KAJA,GAOA,UAAA6L,CAAA,EAAAA;AACA,UAAAxO,KAAAA,CAAAqN,OAAArN,CAAAwO,CAAAxO,CAAA,EACA,OAAA,IAAA2f,CAAA,CAAAnR,CAAA,CAAA;AACA,YAAA7L,KAAAA,CAAA,gBAAAA,CAAA;AAAA,KAVA;;AA4EA,aAAAwjC,CAAA,GAAAA;AAEA,UAAApoB,CAAAA,GAAA,IAAAjC,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA;AAAA,UACArgB,CAAAA,GAAA,CADA;;AAEA,UAAA,EAAAyR,KAAAuU,GAAAvU,GAAAA,KAAA/B,GAAA+B,GAAA,CAAA,CAAA,EAaK;AACL,eAAczR,CAAAA,GAAA,CAAd,EAAc,EAAOA,CAArB,EAAqB;AAErB,cAAAyR,KAAA/B,GAAA+B,IAAAA,KAAAuU,GAAA,EACA,MAAAukB,CAAAA,CAAA94B,IAAA84B,CAAA;AAGA,cADAjoB,CAAAA,CAAAE,EAAAF,GAAAE,CAAAF,CAAAA,CAAAE,EAAAF,GAAAE,CAAA,MAAA/Q,KAAAM,GAAAN,CAAAA,KAAA/B,GAAA+B,CAAA+Q,KAAA,IAAAxiB,CAAAwiB,MAAA,CAAAF,EACA7Q,KAAAM,GAAAN,CAAAA,KAAA/B,GAAA+B,EAAAA,IAAA,GAAA,EACA,OAAA6Q,CAAA;AAIA;;AAAA,eADAA,CAAAA,CAAAE,EAAAF,GAAAE,CAAAF,CAAAA,CAAAE,EAAAF,GAAAE,CAAA,MAAA/Q,KAAAM,GAAAN,CAAAA,KAAA/B,GAAA+B,EAAAA,CAAA+Q,KAAA,IAAAxiB,CAAAwiB,MAAA,CAAAF,EACAA,CAAA;AAxBA;;AAAA,aAActiB,CAAAA,GAAA,CAAd,EAAc,EAAOA,CAArB,EAGA,IADAsiB,CAAAA,CAAAE,EAAAF,GAAAE,CAAAF,CAAAA,CAAAE,EAAAF,GAAAE,CAAA,MAAA/Q,KAAAM,GAAAN,CAAAA,KAAA/B,GAAA+B,CAAA+Q,KAAA,IAAAxiB,CAAAwiB,MAAA,CAAAF,EACA7Q,KAAAM,GAAAN,CAAAA,KAAA/B,GAAA+B,EAAAA,IAAA,GAAA,EACA,OAAA6Q,CAAA;;AAKA,UAFAA,CAAAA,CAAAE,EAAAF,GAAAE,CAAAF,CAAAA,CAAAE,EAAAF,GAAAE,CAAA,MAAA/Q,KAAAM,GAAAN,CAAAA,KAAA/B,GAAA+B,CAAA+Q,KAAA,EAAAA,MAAA,CAAAF,EACAA,CAAAA,CAAAG,EAAAH,GAAAG,CAAAH,CAAAA,CAAAG,EAAAH,GAAAG,CAAA,MAAAhR,KAAAM,GAAAN,CAAAA,KAAA/B,GAAA+B,CAAAgR,KAAA,CAAAA,MAAA,CADAH,EAEA7Q,KAAAM,GAAAN,CAAAA,KAAA/B,GAAA+B,EAAAA,IAAA,GAAA,EACA,OAAA6Q,CAAA;;AAgBA,UAfAtiB,CAAAA,GAAA,CAAAA,EAeAyR,KAAAuU,GAAAvU,GAAAA,KAAA/B,GAAA+B,GAAA,CAAA,EAAA;AACA,eAAczR,CAAAA,GAAA,CAAd,EAAc,EAAOA,CAArB,EAGA,IADAsiB,CAAAA,CAAAG,EAAAH,GAAAG,CAAAH,CAAAA,CAAAG,EAAAH,GAAAG,CAAA,MAAAhR,KAAAM,GAAAN,CAAAA,KAAA/B,GAAA+B,CAAAgR,KAAA,IAAAziB,CAAA,GAAA,CAAAyiB,MAAA,CAAAH,EACA7Q,KAAAM,GAAAN,CAAAA,KAAA/B,GAAA+B,EAAAA,IAAA,GAAA,EACA,OAAA6Q,CAAA;AAAAA,OALA,MAQA,OAActiB,CAAAA,GAAA,CAAd,EAAc,EAAOA,CAArB,EAAqB;AAErB,YAAAyR,KAAA/B,GAAA+B,IAAAA,KAAAuU,GAAA,EACA,MAAAukB,CAAAA,CAAA94B,IAAA84B,CAAA;AAGA,YADAjoB,CAAAA,CAAAG,EAAAH,GAAAG,CAAAH,CAAAA,CAAAG,EAAAH,GAAAG,CAAA,MAAAhR,KAAAM,GAAAN,CAAAA,KAAA/B,GAAA+B,CAAAgR,KAAA,IAAAziB,CAAA,GAAA,CAAAyiB,MAAA,CAAAH,EACA7Q,KAAAM,GAAAN,CAAAA,KAAA/B,GAAA+B,EAAAA,IAAA,GAAA,EACA,OAAA6Q,CAAA;AAIA;;AAAA,YAAApb,KAAAA,CAAA,yBAAAA,CAAA;AAkCA;;AAAA,aAAAyjC,CAAA,CAAA54B,CAAA,EAAA5H,CAAA,EAAAA;AACA,aAAA,CAAA4H,CAAAA,CAAA5H,CAAAA,GAAA,CAAA4H,CAAAA,GACAA,CAAAA,CAAA5H,CAAAA,GAAA,CAAA4H,CAAAA,IAAA,CADAA,GAEAA,CAAAA,CAAA5H,CAAAA,GAAA,CAAA4H,CAAAA,IAAA,EAFAA,GAGAA,CAAAA,CAAA5H,CAAAA,GAAA,CAAA4H,CAAAA,IAAA,EAHA,MAGA,CAHA;AAkCA;;AAAA,aAAA64B,CAAA,GAAAA;AAGA,UAAAn5B,KAAA/B,GAAA+B,GAAA,CAAAA,GAAAA,KAAAuU,GAAA,EACA,MAAAukB,CAAAA,CAAA94B,IAAA84B,EAAA,CAAAA,CAAA;AAEA,aAAA,IAAAlqB,CAAA,CAAAsqB,CAAAA,CAAAl5B,KAAAM,GAAA44B,EAAAl5B,KAAA/B,GAAA+B,IAAA,CAAAk5B,CAAA,EAAAA,CAAAA,CAAAl5B,KAAAM,GAAA44B,EAAAl5B,KAAA/B,GAAA+B,IAAA,CAAAk5B,CAAA,CAAA;AArLAzmB;;AAAAA,IAAAA,CAAAA,CAAAxiB,MAAAwiB,GAAA/E,CAAAA,CAAAtM,MAAAsM,GACA,UAAApM,CAAA,EAAAA;AACA,aAAA,CAAAmR,CAAAA,CAAAxiB,MAAAwiB,GAAA,UAAAnR,CAAA,EAAAA;AACA,eAAAoM,CAAAA,CAAAtM,MAAAsM,CAAAuN,QAAAvN,CAAApM,CAAAoM,IACA,IAAAmrB,CAAA,CAAAv3B,CAAA,CADAoM,GAGAsrB,CAAAA,CAAA13B,CAAA03B,CAHA;AAGA13B,OAJA,EAKSA,CALT,CAAA;AAKSA,KAPToM,GAUAsrB,CAVAvmB,EAYAA,CAAAA,CAAAliB,SAAAkiB,CAAA2mB,MAAA3mB,GAAA/E,CAAAA,CAAA5a,KAAA4a,CAAAnd,SAAAmd,CAAAgR,QAAAhR,IAAAA,CAAAA,CAAA5a,KAAA4a,CAAAnd,SAAAmd,CAAA3U,KAZA0Z,EAmBAA,CAAAA,CAAAliB,SAAAkiB,CAAAoB,MAAApB,IACA7iB,CAAAA,GAAA,UAAAA,EACA,YAAA;AACiE,UAAjEA,CAAAA,GAAAA,CAAA,MAAAoQ,KAAAM,GAAAN,CAAAA,KAAA/B,GAAA+B,CAAApQ,MAAA,CAAAA,EAAiEoQ,KAAAM,GAAAN,CAAAA,KAAA/B,GAAA+B,EAAAA,IAAA,GAAA,EAAA,OAAApQ,CAAA;AACA,UAAjEA,CAAAA,GAAAA,CAAAA,CAAAA,GAAAA,CAAA,MAAAoQ,KAAAM,GAAAN,CAAAA,KAAA/B,GAAA+B,CAAApQ,KAAA,CAAAA,MAAA,CAAAA,EAAiEoQ,KAAAM,GAAAN,CAAAA,KAAA/B,GAAA+B,EAAAA,IAAA,GAAA,EAAA,OAAApQ,CAAA;AACA,UAAjEA,CAAAA,GAAAA,CAAAA,CAAAA,GAAAA,CAAA,MAAAoQ,KAAAM,GAAAN,CAAAA,KAAA/B,GAAA+B,CAAApQ,KAAA,EAAAA,MAAA,CAAAA,EAAiEoQ,KAAAM,GAAAN,CAAAA,KAAA/B,GAAA+B,EAAAA,IAAA,GAAA,EAAA,OAAApQ,CAAA;AACA,UAAjEA,CAAAA,GAAAA,CAAAA,CAAAA,GAAAA,CAAA,MAAAoQ,KAAAM,GAAAN,CAAAA,KAAA/B,GAAA+B,CAAApQ,KAAA,EAAAA,MAAA,CAAAA,EAAiEoQ,KAAAM,GAAAN,CAAAA,KAAA/B,GAAA+B,EAAAA,IAAA,GAAA,EAAA,OAAApQ,CAAA;AACA,UAAjEA,CAAAA,GAAAA,CAAAA,CAAAA,GAAAA,CAAA,KAAAoQ,KAAAM,GAAAN,CAAAA,KAAA/B,GAAA+B,CAAApQ,KAAA,EAAAA,MAAA,CAAAA,EAAiEoQ,KAAAM,GAAAN,CAAAA,KAAA/B,GAAA+B,EAAAA,IAAA,GAAA,EAAA,OAAApQ,CAAA;AAGjE,UAAA,CAAAoQ,KAAA/B,GAAA+B,IAAA,CAAA,IAAAA,KAAAuU,GAAA,EAEA,MADAvU,KAAA/B,GAAA+B,GAAAA,KAAAuU,GAAAvU,EACA84B,CAAAA,CAAA94B,IAAA84B,EAAA,EAAAA,CAAA;AAEA,aAAAlpC,CAAA;AAAAA,KAdA6iB,CAnBAA,EAyCAA,CAAAA,CAAAliB,SAAAkiB,CAAA0B,KAAA1B,GAAA,YAAA;AACA,aAAA,IAAAzS,KAAA6T,MAAA7T,EAAA;AAAA6T,KA1CApB,EAiDAA,CAAAA,CAAAliB,SAAAkiB,CAAAylB,MAAAzlB,GAAA,YAAA;AACA,UAAA7iB,CAAAA,GAAAoQ,KAAA6T,MAAA7T,EAAA;AACA,aAAApQ,CAAAA,KAAA,CAAAA,GAAA,EAAA,IAAAA,CAAA,CAAAA,GAAA,CAAA;AAAA,KAnDA6iB,EAwIAA,CAAAA,CAAAliB,SAAAkiB,CAAA4lB,IAAA5lB,GAAA,YAAA;AACA,aAAA,MAAAzS,KAAA6T,MAAA7T,EAAA;AAAA6T,KAzIApB,EAuJAA,CAAAA,CAAAliB,SAAAkiB,CAAA6lB,OAAA7lB,GAAA,YAAA;AAGA,UAAAzS,KAAA/B,GAAA+B,GAAA,CAAAA,GAAAA,KAAAuU,GAAA,EACA,MAAAukB,CAAAA,CAAA94B,IAAA84B,EAAA,CAAAA,CAAA;AAEA,aAAAI,CAAAA,CAAAl5B,KAAAM,GAAA44B,EAAAl5B,KAAA/B,GAAA+B,IAAA,CAAAk5B,CAAA;AAAA,KA7JAzmB,EAoKAA,CAAAA,CAAAliB,SAAAkiB,CAAA8lB,QAAA9lB,GAAA,YAAA;AAGA,UAAAzS,KAAA/B,GAAA+B,GAAA,CAAAA,GAAAA,KAAAuU,GAAA,EACA,MAAAukB,CAAAA,CAAA94B,IAAA84B,EAAA,CAAAA,CAAA;AAEA,aAAA,IAAAI,CAAAA,CAAAl5B,KAAAM,GAAA44B,EAAAl5B,KAAA/B,GAAA+B,IAAA,CAAAk5B,CAAA;AAAA,KA1KAzmB,EA6MAA,CAAAA,CAAAliB,SAAAkiB,CAAAjE,KAAAiE,GAAA,YAAA;AAGA,UAAAzS,KAAA/B,GAAA+B,GAAA,CAAAA,GAAAA,KAAAuU,GAAA,EACA,MAAAukB,CAAAA,CAAA94B,IAAA84B,EAAA,CAAAA,CAAA;AAEA,UAAAlpC,CAAAA,GAAA8d,CAAAA,CAAAc,KAAAd,CAAAuU,WAAAvU,CAAA1N,KAAAM,GAAAoN,EAAA1N,KAAA/B,GAAAyP,CAAA;AAEA,aADA1N,KAAA/B,GAAA+B,IAAA,CAAAA,EACApQ,CAAA;AAAAA,KArNA6iB,EA6NAA,CAAAA,CAAAliB,SAAAkiB,CAAAyE,MAAAzE,GAAA,YAAA;AAGA,UAAAzS,KAAA/B,GAAA+B,GAAA,CAAAA,GAAAA,KAAAuU,GAAA,EACA,MAAAukB,CAAAA,CAAA94B,IAAA84B,EAAA,CAAAA,CAAA;AAEA,UAAAlpC,CAAAA,GAAA8d,CAAAA,CAAAc,KAAAd,CAAAyU,YAAAzU,CAAA1N,KAAAM,GAAAoN,EAAA1N,KAAA/B,GAAAyP,CAAA;AAEA,aADA1N,KAAA/B,GAAA+B,IAAA,CAAAA,EACApQ,CAAA;AAAAA,KArOA6iB,EA4OAA,CAAAA,CAAAliB,SAAAkiB,CAAAZ,KAAAY,GAAA,YAAA;AACA,UAAArhB,CAAAA,GAAA4O,KAAA6T,MAAA7T,EAAA;AAAA,UACAvH,CAAAA,GAAAuH,KAAA/B,GADA;AAAA,UAEAvF,CAAAA,GAAAsH,KAAA/B,GAAA+B,GAAA5O,CAFA;AAKA,UAAAsH,CAAAA,GAAAsH,KAAAuU,GAAA,EACA,MAAAukB,CAAAA,CAAA94B,IAAA84B,EAAA1nC,CAAA0nC,CAAA;AAGA,aADA94B,KAAA/B,GAAA+B,IAAA5O,CAAA4O,EACAlN,KAAAA,CAAAqN,OAAArN,CAAAkN,KAAAM,GAAAxN,IACAkN,KAAAM,GAAAN,CAAAjH,KAAAiH,CAAAvH,CAAAuH,EAAAtH,CAAAsH,CADAlN,GAEA2F,CAAAA,KAAAC,CAAAD,GACA,IAAAuH,KAAAM,GAAAN,CAAAI,WAAA,CAAA,CAAA,CADA3H,GAEAuH,KAAAo5B,MAAAp5B,CAAAlR,IAAAkR,CAAAA,KAAAM,GAAAN,EAAAvH,CAAAuH,EAAAtH,CAAAsH,CAJA;AAIAtH,KA1PA+Z,EAiQAA,CAAAA,CAAAliB,SAAAkiB,CAAAqB,MAAArB,GAAA,YAAA;AACA,UAAAZ,CAAAA,GAAA7R,KAAA6R,KAAA7R,EAAA;AACA,aAAA0O,CAAAA,CAAAyN,IAAAzN,CAAAmD,CAAAnD,EAAA,CAAAA,EAAAmD,CAAAA,CAAAzgB,MAAAsd,CAAA;AAAAtd,KAnQAqhB,EA2QAA,CAAAA,CAAAliB,SAAAkiB,CAAA4mB,IAAA5mB,GAAA,UAAArhB,CAAA,EAAAA;AACA,UAAA,YAAA,OAAAA,CAAA,EAAA;AAEA,YAAA4O,KAAA/B,GAAA+B,GAAA5O,CAAA4O,GAAAA,KAAAuU,GAAA,EACA,MAAAukB,CAAAA,CAAA94B,IAAA84B,EAAA1nC,CAAA0nC,CAAA;AACA94B,aAAA/B,GAAA+B,IAAA5O,CAAA4O;AAAA5O,OAJA,MAMA,GAAA;AAEA,YAAA4O,KAAA/B,GAAA+B,IAAAA,KAAAuU,GAAA,EACA,MAAAukB,CAAAA,CAAA94B,IAAA84B,CAAA;AAAA94B,OAHA,QAIS,MAAAA,KAAAM,GAAAN,CAAAA,KAAA/B,GAAA+B,EAAAA,CAJT;;AAMA,aAAAA,IAAA;AAAAA,KAxRAyS,EAgSAA,CAAAA,CAAAliB,SAAAkiB,CAAAiC,QAAAjC,GAAA,UAAA6mB,CAAA,EAAAA;AACA,cAAAA,CAAA;AACA,aAAA,CAAA;AACAt5B,eAAAq5B,IAAAr5B;AACA;;AACA,aAAA,CAAA;AACAA,eAAAq5B,IAAAr5B,CAAA,CAAAA;AACA;;AACA,aAAA,CAAA;AACAA,eAAAq5B,IAAAr5B,CAAAA,KAAA6T,MAAA7T,EAAAA;AACA;;AACA,aAAA,CAAA;AACA,iBAAA,MAAAs5B,CAAAA,GAAA,IAAAt5B,KAAA6T,MAAA7T,EAAA,CAAA,GACAA,KAAA0U,QAAA1U,CAAAs5B,CAAAt5B;;AAEA;;AACA,aAAA,CAAA;AACAA,eAAAq5B,IAAAr5B,CAAA,CAAAA;AACA;;AAGA;AACA,gBAAAvK,KAAAA,CAAA,uBAAA6jC,CAAA,GAAA,aAAA,GAAAt5B,KAAA/B,GAAAxI,CAAA;AArBA;;AAuBA,aAAAuK,IAAA;AAAAA,KAxTAyS,EA2TAA,CAAAA,CAAAV,UAAAU,GAAA,UAAA8mB,CAAA,EAAAA;AACAV,MAAAA,CAAAA,GAAAU,CAAAV;AAEA,UAAArB,CAAAA,GAAA9pB,CAAAA,CAAAwC,IAAAxC,GAAA,QAAAA,GAAA,UAAA;AACAA,MAAAA,CAAAA,CAAAC,KAAAD,CAAA+E,CAAAA,CAAAliB,SAAAmd,EAAA;AAEAqG,QAAAA,KAAAA,EAAA,YAAA;AACA,iBAAAklB,CAAAA,CAAAnqC,IAAAmqC,CAAAj5B,IAAAi5B,EAAAzB,CAAAyB,EAAAzB,CAAA,CAAAyB,CAAA;AAAA,SAHA;AAMA9hB,QAAAA,MAAAA,EAAA,YAAA;AACA,iBAAA8hB,CAAAA,CAAAnqC,IAAAmqC,CAAAj5B,IAAAi5B,EAAAzB,CAAAyB,EAAAzB,CAAA,CAAAyB,CAAA;AAAA,SAPA;AAUAd,QAAAA,MAAAA,EAAA,YAAA;AACA,iBAAAc,CAAAA,CAAAnqC,IAAAmqC,CAAAj5B,IAAAi5B,EAAAO,QAAAP,GAAAzB,CAAAyB,EAAAzB,CAAA,CAAAyB,CAAA;AAAA,SAXA;AAcAT,QAAAA,OAAAA,EAAA,YAAA;AACA,iBAAAW,CAAAA,CAAArqC,IAAAqqC,CAAAn5B,IAAAm5B,EAAA3B,CAAA2B,EAAA3B,CAAA,CAAA2B,CAAA;AAAA,SAfA;AAkBAV,QAAAA,QAAAA,EAAA,YAAA;AACA,iBAAAU,CAAAA,CAAArqC,IAAAqqC,CAAAn5B,IAAAm5B,EAAA3B,CAAA2B,EAAA3B,CAAA,CAAA2B,CAAA;AAAA;AAnBA,OAAAzrB;AAmBA,KAlVA+E;AAkVA,G7B9TA,E6B8TA,UAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA;AAAA;;AAAA,QAAA,CAAA,GAAA,QAAA,KAAA,QAAA,IAAA,UAAA,CAAA,EAAA;AAAA,UAAA,CAAA,GAAA,cAAA,OAAA,MAAA,IAAA,CAAA,CAAA,MAAA,CAAA,QAAA,CAAA;AAAA,UAAA,CAAA,GAAA,CAAA;AAAA,aAAA,CAAA,GAAA,CAAA,CAAA,IAAA,CAAA,CAAA,CAAA,GAAA;AAAA,QAAA,IAAA,EAAA,YAAA;AAAA,iBAAA,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA,MAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA;AAAA,YAAA,KAAA,EAAA,CAAA,IAAA,CAAA,CAAA,CAAA,EAAA,CAAA;AAAA,YAAA,IAAA,EAAA,CAAA;AAAA,WAAA;AAAA;AAAA,OAAA;AAAA,KAAA;;AAAA,IAAA,MAAA,CAAA,cAAA,CAAA,CAAA,EAAA,YAAA,EAAA;AAAA,MAAA,KAAA,EAAA,CAAA;AAAA,KAAA;;ACxYA,QAAAgnB,CAAAA,GAAA,YAAA;AAAA,eAAAA,CAAA,GAAAA,CAwCA;;AAAA,aArCEA,CAAAA,CAAAlpC,SAAAkpC,CAAA7N,UAAA6N,GAAA,UAAW5N,CAAX,EAAWA;AACT7rB,aAAKzH,IAALyH,GAAY6rB,CAAAA,CAAWK,MAAXL,CAAkB,MAAlBA,CAAZ7rB;AAA8B,OADhCy5B,EAIAA,CAAAA,CAAAlpC,SAAAkpC,CAAAtN,WAAAsN,GAAA,UAAYzoC,CAAZ,EAAYA;AACV,eAAA,EAAA,CAAKA,CAAL,IAAeA,CAAAA,CAAOI,MAAPJ,GAAgB,CAA/B,KAIOgP,KAAKosB,eAALpsB,CAAqBhP,CAArBgP,CAJP;AAI4BhP,OAT9ByoC,EAYUA,CAAAA,CAAAlpC,SAAAkpC,CAAArN,eAAAqN,GAAV,UAA0BzoC,CAA1B,EAA0BA;AAAAA,YAAAA,CAAAA;AAAAA,YAAAA,CAAAA;AAAAA,YAClB0oC,CAAAA,GAAY1oC,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IADJlD;AAAAA,YAElB2oC,CAAAA,GAAsB3oC,CAAAA,CAAO,CAAPA,CAAAA,CAAUK,IAAVL,CAAeI,MAFnBJ;AAKxB,YAAkB,aAAd0oC,CAAJ,EACE,OAAA,CAAO,CAAP;;AAAO,YAAA;AAGT,eAAoB,IAAAE,CAAAA,GAAAh/B,CAAAA,CAAA5J,CAAA4J,CAAA,EAAMi/B,CAAAA,GAAAD,CAAAA,CAAA9+B,IAAA8+B,EAA1B,EAA0B9+B,CAAA++B,CAAAA,CAAA9+B,IAA1B,EAA0B8+B,CAAAA,GAAAD,CAAAA,CAAA9+B,IAAA8+B,EAA1B,EAA4B;AAAvB,gBAAM77B,CAAAA,GAAK87B,CAAAA,CAAAjqC,KAAX;AAEH,gBAAImO,CAAAA,CAAM7J,IAAN6J,KAAe27B,CAAnB,EACE,OAAA,CAAO,CAAP;AAIF,gBAAI37B,CAAAA,CAAM1M,IAAN0M,CAAW3M,MAAX2M,KAAsB47B,CAA1B,EACE,OAAA,CAAO,CAAP;AAAO;AAAA,SAXF,CAWE,OAAA,CAAA,EAAA;AAAA,UAAA,CAAA,GAAA;AAAA,YAAA,KAAA,EAAA;AAAA,WAAA;AAAA,SAXF,SAWE;AAAA,cAAA;AAAA,YAAA,CAAA,IAAA,CAAA,CAAA,CAAA,IAAA,KAAA,CAAA,GAAA,CAAA,CAAA,MAAA,KAAA,CAAA,CAAA,IAAA,CAAA,CAAA,CAAA;AAAA,WAAA,SAAA;AAAA,gBAAA,CAAA,EAAA,MAAA,CAAA,CAAA,KAAA;AAAA;AAIX;;AAAA,eAAA,CAAO,CAAP;AAAO,OAjCTF,EAqCFA,CAAA;AAxCA,KAAA,EAAA;;AAAsBvrC,IAAAA,CAAAA,CAAAurC,MAAAvrC,GAAAurC,CAAAvrC;AAAAurC,G9B0EtB,E8B1EsBA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;ACDtB,QAAAK,CAAAA,GAAA,YAAA;AAAA,eAAAA,CAAA,GAAAA,CA0BA;;AAAA,aAvBEA,CAAAA,CAAAvpC,SAAAupC,CAAAlO,UAAAkO,GAAA,UAAWjO,CAAX,EAAWA;AACT7rB,aAAK+5B,KAAL/5B,GAAa6rB,CAAAA,CAAWE,QAAXF,CAAoB,OAApBA,EAA6B,EAA7BA,CAAb7rB,EACAA,KAAKg6B,QAALh6B,GAAKg6B,CAAW,CADhBh6B;AACgB,OAFlB85B,EAKAA,CAAAA,CAAAvpC,SAAAupC,CAAA3N,WAAA2N,GAAA,UAAY9oC,CAAZ,EAAYA;AACV,eAAA,EAAA,CAAKA,CAAL,IAAiC,MAAlBA,CAAAA,CAAOI,MAAtB,KAIO4O,KAAKosB,eAALpsB,CAAqBhP,CAArBgP,CAJP;AAI4BhP,OAV9B8oC,EAaUA,CAAAA,CAAAvpC,SAAAupC,CAAA1N,eAAA0N,GAAV,UAA0B9oC,CAA1B,EAA0BA;AACxB,eAAuB,cAAnBA,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IAAS,IAAgC,cAAnBlD,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IAA9C;AAA8CA,OAdhD4lC,EAuBFA,CAAA;AA1BA,KAAA,EAAA;;AAAsB5rC,IAAAA,CAAAA,CAAA4rC,OAAA5rC,GAAA4rC,CAAA5rC;AAAA4rC,G/B2EtB,E+B3EsBA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;ACCtB,QAAAG,CAAAA,GAAA,YAAA;AAAA,eAAAA,CAAA,GAAAA,CAiCA;;AAAA,aA9BEA,CAAAA,CAAA1pC,SAAA0pC,CAAArO,UAAAqO,GAAA,UAAWpO,CAAX,EAAWA;AACT7rB,aAAKzH,IAALyH,GAAY6rB,CAAAA,CAAWK,MAAXL,CAAkB,MAAlBA,EAA0B,CAA1BA,CAAZ7rB;AAAsC,OADxCi6B,EAIAA,CAAAA,CAAA1pC,SAAA0pC,CAAA9N,WAAA8N,GAAA,UAAYjpC,CAAZ,EAAYA;AACV,eAAA,EAAA,CAAKA,CAAL,IAAiC,MAAlBA,CAAAA,CAAOI,MAAtB,KAI8B,MAA1BJ,CAAAA,CAAO,CAAPA,CAAAA,CAAUK,IAAVL,CAAeI,MAAW,IAAXA,EAIf4O,KAAKzH,IAALyH,GAAY,CAAZA,IAAiBA,KAAKzH,IAALyH,GAAYhP,CAAAA,CAAO,CAAPA,CAAAA,CAAUK,IAAVL,CAAeI,MAJ7BA,KAQZ4O,KAAKosB,eAALpsB,CAAqBhP,CAArBgP,CAZP;AAY4BhP,OAjB9BipC,EAoBUA,CAAAA,CAAA1pC,SAAA0pC,CAAA7N,eAAA6N,GAAV,UAA0BjpC,CAA1B,EAA0BA;AAExB,eAAuB,aAAnBA,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IAAd;AAAcA,OAtBhB+lC,EA8BFA,CAAA;AAjCA,KAAA,EAAA;;AAAsB/rC,IAAAA,CAAAA,CAAA+rC,OAAA/rC,GAAA+rC,CAAA/rC;AAAA+rC,GhC0EtB,EgC1EsBA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;ACHtB,QAAAjI,CAAAA,GAAAtjC,CAAAA,CAAA,CAAAA,CAAA;AAAA,QAGAwrC,CAAAA,GAAA,YAAA;AAAA,eAAAA,CAAA,GAAAA,CAiCA;;AAAA,aA9BEA,CAAAA,CAAA3pC,SAAA2pC,CAAAtO,UAAAsO,GAAA,UAAWrO,CAAX,EAAWA;AACT7rB,aAAKzH,IAALyH,GAAY6rB,CAAAA,CAAWK,MAAXL,CAAkB,MAAlBA,EAA0B,CAA1BA,CAAZ7rB;AAAsC,OADxCk6B,EAIAA,CAAAA,CAAA3pC,SAAA2pC,CAAA/N,WAAA+N,GAAA,UAAYlpC,CAAZ,EAAYA;AACV,YAAA,CAAKA,CAAL,IAAiC,MAAlBA,CAAAA,CAAOI,MAAtB,EACE,OAAA,CAAO,CAAP;AAEF,YAAMiI,CAAAA,GAAarI,CAAAA,CAAO,CAAPA,CAAAA,CAAUK,IAAVL,CAAeI,MAAlC;AACA,eAAA,EAAIiI,CAAAA,GAAa,CAAjB,KAAiB,EAGb2G,KAAKzH,IAALyH,GAAKzH,CAAQc,CAAb2G,IAA2BA,KAAKzH,IAALyH,GAAY3G,CAAAA,GAAa,CAHvC,KAOV2G,KAAKosB,eAALpsB,CAAqBhP,CAArBgP,CAPP;AAO4BhP,OAhB9BkpC,EAmBUA,CAAAA,CAAA3pC,SAAA2pC,CAAA9N,eAAA8N,GAAV,UAA0BlpC,CAA1B,EAA0BA;AACxB,eAAA,CAA8C,CAA9C,KAAIghC,CAAAA,CAAA9f,YAAA8f,CAAan2B,OAAbm2B,CAAqBhhC,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IAA/B89B,CAAJ,KAGuB,YAAnBhhC,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IAAS,IAA8B,YAAnBlD,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IAH5C,CAAA;AAG4CA,OAvB9CgmC,EA8BFA,CAAA;AAjCA,KAAA,EAHA;;AAGsBhsC,IAAAA,CAAAA,CAAAgsC,MAAAhsC,GAAAgsC,CAAAhsC;AAAAgsC,GjC0EtB,EiC1EsBA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;ACAtB,QAAAC,CAAAA,GAAA,YAAA;AAAA,eAAAA,CAAA,GAAAA,CA8BA;;AAAA,aA3BEA,CAAAA,CAAA5pC,SAAA4pC,CAAAvO,UAAAuO,GAAA,UAAWtO,CAAX,EAAWA;AACT7rB,aAAKssB,KAALtsB,GAAa6rB,CAAAA,CAAWE,QAAXF,CAAoB,OAApBA,CAAb7rB,EACAA,KAAKo6B,IAALp6B,GAAY6rB,CAAAA,CAAWwO,SAAXxO,CAAqB,MAArBA,CADZ7rB;AACiC,OAFnCm6B,EAKAA,CAAAA,CAAA5pC,SAAA4pC,CAAAhO,WAAAgO,GAAA,UAAYnpC,CAAZ,EAAYA;AACV,eAAA,EAAA,CAAKA,CAAL,IAAiC,MAAlBA,CAAAA,CAAOI,MAAtB,KAI8B,MAA1BJ,CAAAA,CAAO,CAAPA,CAAAA,CAAUK,IAAVL,CAAeI,MAAW,IAIvB4O,KAAKosB,eAALpsB,CAAqBhP,CAArBgP,CARP;AAQ4BhP,OAd9BmpC,EAiBUA,CAAAA,CAAA5pC,SAAA4pC,CAAA/N,eAAA+N,GAAV,UAA0BnpC,CAA1B,EAA0BA;AACxB,eAAuB,cAAnBA,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IAAS,IAAgC,cAAnBlD,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IAA9C;AAA8CA,OAlBhDimC,EA2BFA,CAAA;AA9BA,KAAA,EAAA;;AAAsBjsC,IAAAA,CAAAA,CAAAisC,WAAAjsC,GAAAisC,CAAAjsC;AAAAisC,GlC0EtB,EkC1EsBA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;ACAtB,QAAAG,CAAAA,GAAA,YAAA;AAAA,eAAAA,CAAA,GAAAA,CAoCA;;AAAA,aAjCEA,CAAAA,CAAA/pC,SAAA+pC,CAAA1O,UAAA0O,GAAA,UAAWzO,CAAX,EAAWA;AACT7rB,aAAK8rB,OAAL9rB,GAAe6rB,CAAAA,CAAWE,QAAXF,CAAoB,SAApBA,EAA+B,IAA/BA,CAAf7rB;AAA8C,OADhDs6B,EAIAA,CAAAA,CAAA/pC,SAAA+pC,CAAAnO,WAAAmO,GAAA,UAAYtpC,CAAZ,EAAYA;AACV,eAAA,EAAA,CAAKA,CAAL,IAAiC,MAAlBA,CAAAA,CAAOI,MAAtB,KAIO4O,KAAKosB,eAALpsB,CAAqBhP,CAArBgP,CAJP;AAI4BhP,OAT9BspC,EAYUA,CAAAA,CAAA/pC,SAAA+pC,CAAAlO,eAAAkO,GAAV,UAA0BtpC,CAA1B,EAA0BA;AACxB,YAAMq7B,CAAAA,GAAIr7B,CAAAA,CAAO,CAAPA,CAAV;AAAA,YACMs7B,CAAAA,GAAQt7B,CAAAA,CAAO,CAAPA,CADd;AAAA,YAEMu7B,CAAAA,GAAIv7B,CAAAA,CAAO,CAAPA,CAFV;AAMA,eAAA,EAAIq7B,CAAAA,CAAEh7B,IAAFg7B,CAAOj7B,MAAPi7B,GAAgB,CAAhBA,IAA2C,MAAtBC,CAAAA,CAAMj7B,IAANi7B,CAAWl7B,MAAhCi7B,IAAkE,MAAlBE,CAAAA,CAAEl7B,IAAFk7B,CAAOn7B,MAA3D,KAGIk7B,CAAAA,CAAMj7B,IAANi7B,CAAW,CAAXA,MAAkBD,CAAAA,CAAEh7B,IAAFg7B,CAAO,CAAPA,CAAlBC,IAA+BC,CAAAA,CAAEl7B,IAAFk7B,CAAO,CAAPA,MAAcF,CAAAA,CAAEh7B,IAAFg7B,CAAO,CAAPA,CAA7CC,IAAoD,EAGxC,cAAXD,CAAAA,CAAEn4B,IAAS,IAAwB,cAAXm4B,CAAAA,CAAEn4B,IAAf,IAAsD,cAAfo4B,CAAAA,CAAMp4B,IAAS,IAA4B,cAAfo4B,CAAAA,CAAMp4B,IAAzE,IACA,cAAXq4B,CAAAA,CAAEr4B,IAAS,IAAwB,cAAXq4B,CAAAA,CAAEr4B,IAJyB,CAHxD;AAO+BA,OA1BjComC,EAiCFA,CAAA;AApCA,KAAA,EAAA;;AAAsBpsC,IAAAA,CAAAA,CAAAosC,qBAAApsC,GAAAosC,CAAApsC;AAAAosC,GnC0EtB,EmC1EsBA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;ACHtB,QAAAtI,CAAAA,GAAAtjC,CAAAA,CAAA,CAAAA,CAAA;AAAA,QAGA6rC,CAAAA,GAAA,YAAA;AAAA,eAAAA,CAAA,GAAAA,CA0BA;;AAAA,aAvBEA,CAAAA,CAAAhqC,SAAAgqC,CAAA3O,UAAA2O,GAAA,UAAW1O,CAAX,EAAWA;AACT7rB,aAAKvE,IAALuE,GAAY6rB,CAAAA,CAAWiB,OAAXjB,CAAmB,MAAnBA,EAA2B,EAA3BA,CAAZ7rB,EACAA,KAAK5B,QAAL4B,GAAqD,MAArC6rB,CAAAA,CAAWK,MAAXL,CAAkB,UAAlBA,EAA8B,CAA9BA,CADhB7rB;AAC8C,OAFhDu6B,EAKAA,CAAAA,CAAAhqC,SAAAgqC,CAAApO,WAAAoO,GAAA,UAAYvpC,CAAZ,EAAYA;AACV,eAAA,EAAA,CAAKA,CAAL,IAAiC,MAAlBA,CAAAA,CAAOI,MAAtB,KAIO4O,KAAKosB,eAALpsB,CAAqBhP,CAArBgP,CAJP;AAI4BhP,OAV9BupC,EAaUA,CAAAA,CAAAhqC,SAAAgqC,CAAAnO,eAAAmO,GAAV,UAA0BvpC,CAA1B,EAA0BA;AACxB,eAAA,CAA8C,CAA9C,KAAIghC,CAAAA,CAAA9f,YAAA8f,CAAan2B,OAAbm2B,CAAqBhhC,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IAA/B89B,CAAJ;AAAmC99B,OAdrCqmC,EAuBFA,CAAA;AA1BA,KAAA,EAHA;;AAGsBrsC,IAAAA,CAAAA,CAAAqsC,UAAArsC,GAAAqsC,CAAArsC;AAAAqsC,GpC0EtB,EoC1EsBA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;ACAtB,QAAAriB,CAAAA,GAAA,YAAA;AAAA,eAAAA,CAAA,GAAAA,CAwBA;;AAAA,aArBEA,CAAAA,CAAA3nB,SAAA2nB,CAAA0T,UAAA1T,GAAA,UAAW2T,CAAX,EAAWA,CAAAA,CAAX3T,EAEAA,CAAAA,CAAA3nB,SAAA2nB,CAAAiU,WAAAjU,GAAA,UAAYlnB,CAAZ,EAAYA;AACV,eAAA,EAAA,CAAKA,CAAL,IAAiC,MAAlBA,CAAAA,CAAOI,MAAtB,IAAgE,MAA1BJ,CAAAA,CAAO,CAAPA,CAAAA,CAAUK,IAAVL,CAAeI,MAArD,KAIO4O,KAAKosB,eAALpsB,CAAqBhP,CAArBgP,CAJP;AAI4BhP,OAP9BknB,EAUUA,CAAAA,CAAA3nB,SAAA2nB,CAAAkU,eAAAlU,GAAV,UAA0BlnB,CAA1B,EAA0BA;AACxB,eAAA,CAAuB,cAAnBA,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IAAS,IAAgC,cAAnBlD,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IAA9C,KAIuB,YAAnBlD,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IAJd;AAIcA,OAfhBgkB,EAqBFA,CAAA;AAxBA,KAAA,EAAA;;AAAsBhqB,IAAAA,CAAAA,CAAAgqB,OAAAhqB,GAAAgqB,CAAAhqB;AAAAgqB,GrC0EtB,EqC1EsBA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;ACAtB,QAAAsiB,CAAAA,GAAA,YAAA;AAAA,eAAAA,CAAA,GAAAA,CA0BA;;AAAA,aAvBEA,CAAAA,CAAAjqC,SAAAiqC,CAAA5O,UAAA4O,GAAA,UAAW3O,CAAX,EAAWA;AACT7rB,aAAKy6B,MAALz6B,GAAc6rB,CAAAA,CAAWiB,OAAXjB,CAAmB,QAAnBA,CAAd7rB,EACAA,KAAK06B,IAAL16B,GAAY6rB,CAAAA,CAAWiB,OAAXjB,CAAmB,MAAnBA,CADZ7rB,EAEAA,KAAKvE,IAALuE,GAAY6rB,CAAAA,CAAWiB,OAAXjB,CAAmB,MAAnBA,EAA2B,EAA3BA,CAFZ7rB;AAEuC,OAHzCw6B,EAMAA,CAAAA,CAAAjqC,SAAAiqC,CAAArO,WAAAqO,GAAA,UAAYxpC,CAAZ,EAAYA;AACV,eAAA,EAAA,CAAKA,CAAL,IAAiC,MAAlBA,CAAAA,CAAOI,MAAtB,KAGO4O,KAAKosB,eAALpsB,CAAqBhP,CAArBgP,CAHP;AAG4BhP,OAV9BwpC,EAaUA,CAAAA,CAAAjqC,SAAAiqC,CAAApO,eAAAoO,GAAV,UAA0BxpC,CAA1B,EAA0BA;AACxB,eAAuB,cAAnBA,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IAAS,IAAgC,cAAnBlD,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IAA9C;AAA8CA,OAdhDsmC,EAuBFA,CAAA;AA1BA,KAAA,EAAA;;AAAsBtsC,IAAAA,CAAAA,CAAAssC,KAAAtsC,GAAAssC,CAAAtsC;;AA4BtB,QAAAysC,CAAAA,GAAA,YAAA;AAAA,eAAAA,CAAA,GAAAA,CA4BA;;AAAA,aAzBEA,CAAAA,CAAApqC,SAAAoqC,CAAA/O,UAAA+O,GAAA,UAAW9O,CAAX,EAAWA,CAAAA,CAAX8O,EAEAA,CAAAA,CAAApqC,SAAAoqC,CAAAxO,WAAAwO,GAAA,UAAY3pC,CAAZ,EAAYA;AACV,eAAA,EAAA,CAAKA,CAAL,IAAeA,CAAAA,CAAOI,MAAPJ,GAAgB,CAA/B,IAAoCA,CAAAA,CAAOI,MAAPJ,GAAgB,CAApD,KAGOgP,KAAKosB,eAALpsB,CAAqBhP,CAArBgP,CAHP;AAG4BhP,OAN9B2pC,EASUA,CAAAA,CAAApqC,SAAAoqC,CAAAvO,eAAAuO,GAAV,UAA0B3pC,CAA1B,EAA0BA;AACxB,eAAuB,YAAnBA,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IAAS,IAAqC,MAA1BlD,CAAAA,CAAO,CAAPA,CAAAA,CAAUK,IAAVL,CAAeI,MAA1B,IAGA,YAAnBJ,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IAAS,IAAqC,MAA1BlD,CAAAA,CAAO,CAAPA,CAAAA,CAAUK,IAAVL,CAAeI,MAA1B,IAA0BA,CAAAA,EAG7CJ,CAAAA,CAAOI,MAAPJ,IAAiB,CAH4BI,KAGH,YAAnBJ,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IAAS,IAAqC,MAA1BlD,CAAAA,CAAO,CAAPA,CAAAA,CAAUK,IAAVL,CAAeI,MAHvBA,MAGuBA,EAGpEJ,CAAAA,CAAOI,MAAPJ,IAAiB,CAHmDI,KAG1B,YAAnBJ,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IAAS,IAAqC,MAA1BlD,CAAAA,CAAO,CAAPA,CAAAA,CAAUK,IAAVL,CAAeI,MANvBA,CAHjD;AASwEA,OAnB1EupC,EAyBFA,CAAA;AA5BA,KAAA,EAAA;;AAAsBzsC,IAAAA,CAAAA,CAAAysC,QAAAzsC,GAAAysC,CAAAzsC;AAAAysC,GtC8CtB,EsC9CsBA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;AC5BtB,QAAAC,CAAAA,GAAA,YAAA;AAAA,eAAAA,CAAA,GAAAA,CAyBA;;AAAA,aAtBEA,CAAAA,CAAArqC,SAAAqqC,CAAAhP,UAAAgP,GAAA,UAAW/O,CAAX,EAAWA;AACT7rB,aAAKvE,IAALuE,GAAY6rB,CAAAA,CAAWiB,OAAXjB,CAAmB,MAAnBA,CAAZ7rB;AAA+B,OADjC46B,EAIAA,CAAAA,CAAArqC,SAAAqqC,CAAAzO,WAAAyO,GAAA,UAAY5pC,CAAZ,EAAYA;AACV,eAAA,EAAA,CAAKA,CAAL,IAAiC,MAAlBA,CAAAA,CAAOI,MAAtB,KAIO4O,KAAKosB,eAALpsB,CAAqBhP,CAArBgP,CAJP;AAI4BhP,OAT9B4pC,EAYUA,CAAAA,CAAArqC,SAAAqqC,CAAAxO,eAAAwO,GAAV,UAA0B5pC,CAA1B,EAA0BA;AAExB,eAAuB,aAAnBA,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IAAd;AAAcA,OAdhB0mC,EAsBFA,CAAA;AAzBA,KAAA,EAAA;;AAAsB1sC,IAAAA,CAAAA,CAAA0sC,OAAA1sC,GAAA0sC,CAAA1sC;AAAA0sC,GvC0EtB,EuC1EsBA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;ACHtB,QAAA5I,CAAAA,GAAAtjC,CAAAA,CAAA,CAAAA,CAAA;AAAA,QAGAmsC,CAAAA,GAAA,YAAA;AAAA,eAAAA,CAAA,GAAAA,CA4BA;;AAAA,aAzBEA,CAAAA,CAAAtqC,SAAAsqC,CAAAjP,UAAAiP,GAAA,UAAWhP,CAAX,EAAWA,CAAAA,CAAXgP,EAEAA,CAAAA,CAAAtqC,SAAAsqC,CAAA1O,WAAA0O,GAAA,UAAY7pC,CAAZ,EAAYA;AACV,eAAA,EAAA,CAAKA,CAAL,IAAiC,MAAlBA,CAAAA,CAAOI,MAAtB,KAG8B,MAA1BJ,CAAAA,CAAO,CAAPA,CAAAA,CAAUK,IAAVL,CAAeI,MAAW,IAG1BJ,CAAAA,CAAO,CAAPA,CAAAA,CAAUK,IAAVL,CAAe,CAAfA,MAAsBA,CAAAA,CAAO,CAAPA,CAAAA,CAAUK,IAAVL,CAAeI,MAArCJ,IAIGgP,KAAKosB,eAALpsB,CAAqBhP,CAArBgP,CAVP;AAU4BhP,OAb9B6pC,EAgBUA,CAAAA,CAAAtqC,SAAAsqC,CAAAzO,eAAAyO,GAAV,UAA0B7pC,CAA1B,EAA0BA;AACxB,eAAA,CAA8C,CAA9C,KAAIghC,CAAAA,CAAA9f,YAAA8f,CAAan2B,OAAbm2B,CAAqBhhC,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IAA/B89B,CAAJ,KAGuB,YAAnBhhC,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IAAS,IAA8B,YAAnBlD,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IAH5C,CAAA;AAG4CA,OApB9C2mC,EAyBFA,CAAA;AA5BA,KAAA,EAHA;;AAGsB3sC,IAAAA,CAAAA,CAAA2sC,IAAA3sC,GAAA2sC,CAAA3sC;AAAA2sC,GxC0EtB,EwC1EsBA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;ACAtB,QAAAC,CAAAA,GAAA,YAAA;AAAA,eAAAA,CAAA,GAAAA,CAwBA;;AAAA,aArBEA,CAAAA,CAAAvqC,SAAAuqC,CAAAlP,UAAAkP,GAAA,UAAWjP,CAAX,EAAWA;AACT7rB,aAAK9F,IAAL8F,GAAY6rB,CAAAA,CAAWiB,OAAXjB,CAAmB,MAAnBA,EAA2B,EAA3BA,CAAZ7rB;AAAuC,OADzC86B,EAIAA,CAAAA,CAAAvqC,SAAAuqC,CAAA3O,WAAA2O,GAAA,UAAY9pC,CAAZ,EAAYA;AACV,eAAA,EAAA,CAAKA,CAAL,IAAiC,MAAlBA,CAAAA,CAAOI,MAAtB,KAIO4O,KAAKosB,eAALpsB,CAAqBhP,CAArBgP,CAJP;AAI4BhP,OAT9B8pC,EAYUA,CAAAA,CAAAvqC,SAAAuqC,CAAA1O,eAAA0O,GAAV,UAA0B9pC,CAA1B,EAA0BA;AACxB,eAAuB,cAAnBA,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IAAS,IAAgC,cAAnBlD,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IAA9C;AAA8CA,OAbhD4mC,EAqBFA,CAAA;AAxBA,KAAA,EAAA;;AAAsB5sC,IAAAA,CAAAA,CAAA4sC,SAAA5sC,GAAA4sC,CAAA5sC;AAAA4sC,GzC0EtB,EyC1EsBA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,QAAAA,CAAAA;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,SAAAA,KAAAA,CAAAA,GAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,CAAAA,CAAAA,GAAAA,MAAAA,CAAAA,cAAAA,IAAAA;AAAAA,QAAAA,SAAAA,EAAAA;AAAAA,mBAAAA,KAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,QAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA;AAAAA,OAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,IAAAA,CAAAA,IAAAA,CAAAA,EAAAA,CAAAA,CAAAA,cAAAA,CAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,OAAAA,EAAAA,CAAAA,EAAAA,CAAAA,CAAAA;AAAAA,KAAAA,EAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,eAAAA,CAAAA,GAAAA;AAAAA,aAAAA,WAAAA,GAAAA,CAAAA;AAAAA;;AAAAA,MAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,SAAAA,GAAAA,SAAAA,CAAAA,GAAAA,MAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA,CAAAA,SAAAA,EAAAA,IAAAA,CAAAA,EAAAA,CAAAA;AAAAA,KAAAA,CAAAA;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;ACJtB,QAAAxH,CAAAA,GAAA5kC,CAAAA,CAAA,EAAAA,CAAA;AAAA,QACAoC,CAAAA,GAAApC,CAAAA,CAAA,CAAAA,CADA;AAAA,QAMA+kC,CAAAA,GAAA,UAAAvoB,CAAA,EAAAA;AAGE,eAAAuoB,CAAA,CACI9G,CADJ,EAC4D1kB,CAD5D,EAEY8yB,CAFZ,EAEkElnC,CAFlE,EAEkEA;AAFlE,YAAA6U,CAAAA,GAGEwC,CAAAA,CAAApc,IAAAoc,CAAAlL,IAAAkL,EAAMyhB,CAANzhB,EAAsBrX,CAAtBqX,KAAiClL,IAHnC;AAGmCA,eAFyB0I,CAAAA,CAAAT,IAAAS,GAAAT,CAAAS,EAChDA,CAAAA,CAAAqyB,qBAAAryB,GAAAqyB,CADgDryB,EAChDqyB,CACuB/6B;AAgBrC;;AAAA,aAtB6CmL,CAAAA,CAAAsoB,CAAAtoB,EAAAD,CAAAC,CAAAA,EAS3CsoB,CAAAA,CAAAljC,SAAAkjC,CAAA7H,UAAA6H,GAAA,UAAW5H,CAAX,EAAWA;AACL7rB,aAAK+6B,qBAAL/6B,KACFA,KAAK6rB,UAAL7rB,GAAkBA,KAAK+6B,qBAAL/6B,CAA2B6rB,CAA3B7rB,CADhBA;AAC2C6rB,OAXN1gB,EAe3CsoB,CAAAA,CAAAljC,SAAAkjC,CAAA3b,GAAA2b,GAAA,UAAI1b,CAAJ,EAA2C/mB,CAA3C,EAA2CA;AAKzC,eAAO,CADQgqC,CAAAA,CAAQhqC,CAAAA,CAAO,CAAPA,CAARgqC,EAAmBh7B,KAAKiI,IAAxB+yB,EAA8Bh7B,KAAK6rB,UAAnCmP,EAA+Ch7B,KAAKnM,UAApDmnC,CACR,CAAP;AADmEnnC,OAnB1BsX,EAsB7CsoB,CAAA;AAtBA,KAAA,CAA6CH,CAAAA,CAAA2H,OAA7C,CANA;;AA8BA,aAAgBD,CAAhB,CACI3/B,CADJ,EACe4M,CADf,EAC6C4jB,CAD7C,EAC4Dh4B,CAD5D,EAC4DA;AAC1D,UAAMuQ,CAAAA,GAAS,IAAItT,CAAAA,CAAAmD,MAAJ,CAAWoH,CAAAA,CAAEhK,IAAb,EAAmBwC,CAAAA,IAA0BwH,CAAAA,CAAEnH,IAA/C,CAAf;AAIA,aADA+T,CAAAA,CAFwB5M,CAAAA,CAAEwC,IAE1BoK,EADyB7D,CAAAA,CAAOvG,IAChCoK,EAAwC4jB,CAAxC5jB,CAAAA,EACO7D,CAAP;AA9BWlW;;AAAAA,IAAAA,CAAAA,CAAAulC,UAAAvlC,GAAAulC,CAAAvlC,EAwBbA,CAAAA,CAAA8sC,OAAA9sC,GAAA8sC,CAxBa9sC,EAsCbA,CAAAA,CAAAwlC,GAAAxlC,GAAA,UAAoB6P,CAApB,EAA8CqG,CAA9C,EAA8CA;AAC5C,WAAK,IAAI7V,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAIwP,CAAAA,CAAM3M,MAA1B,EAAkC7C,CAAAA,EAAlC,EACE6V,CAAAA,CAAO7V,CAAP6V,CAAAA,GAAYzR,IAAAA,CAAK+gC,GAAL/gC,CAASoL,CAAAA,CAAMxP,CAANwP,CAATpL,CAAZyR;AAA2B7V,KAxClBL,EA4CbA,CAAAA,CAAAylC,IAAAzlC,GAAA,UAAqB6P,CAArB,EAA+CqG,CAA/C,EAA+CA;AAC7C,WAAK,IAAI7V,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAIwP,CAAAA,CAAM3M,MAA1B,EAAkC7C,CAAAA,EAAlC,EACE6V,CAAAA,CAAO7V,CAAP6V,CAAAA,GAAYzR,IAAAA,CAAKghC,IAALhhC,CAAUoL,CAAAA,CAAMxP,CAANwP,CAAVpL,CAAZyR;AAA4B7V,KA9CnBL,EAkDbA,CAAAA,CAAA0lC,KAAA1lC,GAAA,UAAsB6P,CAAtB,EAAgDqG,CAAhD,EAAgDA;AAC9C,WAAK,IAAI7V,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAIwP,CAAAA,CAAM3M,MAA1B,EAAkC7C,CAAAA,EAAlC,EACE6V,CAAAA,CAAO7V,CAAP6V,CAAAA,GAAYzR,IAAAA,CAAKihC,KAALjhC,CAAWoL,CAAAA,CAAMxP,CAANwP,CAAXpL,CAAZyR;AAA6B7V,KApDpBL,EAwDbA,CAAAA,CAAA+lC,IAAA/lC,GAAA,UAAqB6P,CAArB,EAA+CqG,CAA/C,EAA+CA;AAC7C,WAAK,IAAI7V,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAIwP,CAAAA,CAAM3M,MAA1B,EAAkC7C,CAAAA,EAAlC,EACE6V,CAAAA,CAAO7V,CAAP6V,CAAAA,GAAYzR,IAAAA,CAAKshC,IAALthC,CAAUoL,CAAAA,CAAMxP,CAANwP,CAAVpL,CAAZyR;AAA4B7V,KA1DnBL,EA8DbA,CAAAA,CAAAgmC,KAAAhmC,GAAA,UAAsB6P,CAAtB,EAAgDqG,CAAhD,EAAgDA;AAC9C,WAAK,IAAI7V,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAIwP,CAAAA,CAAM3M,MAA1B,EAAkC7C,CAAAA,EAAlC,EACE6V,CAAAA,CAAO7V,CAAP6V,CAAAA,GAAYzR,IAAAA,CAAKuhC,KAALvhC,CAAWoL,CAAAA,CAAMxP,CAANwP,CAAXpL,CAAZyR;AAA6B7V,KAhEpBL,EAoEbA,CAAAA,CAAAimC,IAAAjmC,GAAA,UAAqB6P,CAArB,EAA+CqG,CAA/C,EAA+CA;AAC7C,WAAK,IAAI7V,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAIwP,CAAAA,CAAM3M,MAA1B,EAAkC7C,CAAAA,EAAlC,EACE6V,CAAAA,CAAO7V,CAAP6V,CAAAA,GAAYzR,IAAAA,CAAKwhC,IAALxhC,CAAUoL,CAAAA,CAAMxP,CAANwP,CAAVpL,CAAZyR;AAA4B7V,KAtEnBL,EA0EbA,CAAAA,CAAAkmC,KAAAlmC,GAAA,UAAsB6P,CAAtB,EAAgDqG,CAAhD,EAAgDA;AAC9C,WAAK,IAAI7V,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAIwP,CAAAA,CAAM3M,MAA1B,EAAkC7C,CAAAA,EAAlC,EACE6V,CAAAA,CAAO7V,CAAP6V,CAAAA,GAAYzR,IAAAA,CAAKyhC,KAALzhC,CAAWoL,CAAAA,CAAMxP,CAANwP,CAAXpL,CAAZyR;AAA6B7V,KA5EpBL,EAgFbA,CAAAA,CAAAi8B,IAAAj8B,GAAA,UAAqB6P,CAArB,EAA+CqG,CAA/C,EAA+CA;AAC7C,WAAK,IAAI7V,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAIwP,CAAAA,CAAM3M,MAA1B,EAAkC7C,CAAAA,EAAlC,EACE6V,CAAAA,CAAO7V,CAAP6V,CAAAA,GAAYzR,IAAAA,CAAKw3B,IAALx3B,CAAUoL,CAAAA,CAAMxP,CAANwP,CAAVpL,CAAZyR;AAA4B7V,KAlFnBL,EAsFbA,CAAAA,CAAAsmC,eAAAtmC,GAAA,UAAgC29B,CAAhC,EAAgCA;AAC9B,aAAO;AACLpO,QAAAA,GAAAA,EAAKoO,CAAAA,CAAWE,QAAXF,CAAoB,KAApBA,EAAoB,CAAQ,qBAA5BA,CADA;AAELj5B,QAAAA,GAAAA,EAAKi5B,CAAAA,CAAWE,QAAXF,CAAoB,KAApBA,EAA2B,qBAA3BA;AAFA,OAAP;AAEkC,KAzFvB39B,EA6FbA,CAAAA,CAAAqmC,IAAArmC,GAAA,UAAqB6P,CAArB,EAA+CqG,CAA/C,EAA0EynB,CAA1E,EAA0EA;AAGxE,WAFA,IAAMpO,CAAAA,GAAMoO,CAAAA,CAAWpO,GAAvB,EACM7qB,CAAAA,GAAMi5B,CAAAA,CAAWj5B,GADvB,EAESrE,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAIwP,CAAAA,CAAM3M,MAA1B,EAAkC7C,CAAAA,EAAlC,EAAuC;AACrC,YAAMqB,CAAAA,GAAQmO,CAAAA,CAAMxP,CAANwP,CAAd;AACAqG,QAAAA,CAAAA,CAAO7V,CAAP6V,CAAAA,GAAaxU,CAAAA,GAAQ6tB,CAAR7tB,GAAe6tB,CAAf7tB,GAAsBA,CAAAA,GAAQgD,CAARhD,GAAegD,CAAfhD,GAAqBA,CAAxDwU;AAAwDxU;AAAAA,KAlG/C1B,EAsGbA,CAAAA,CAAAymC,GAAAzmC,GAAA,UAAoB6P,CAApB,EAA8CqG,CAA9C,EAA8CA;AAC5C,WAAK,IAAI7V,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAIwP,CAAAA,CAAM3M,MAA1B,EAAkC7C,CAAAA,EAAlC,EACE6V,CAAAA,CAAO7V,CAAP6V,CAAAA,GAAYzR,IAAAA,CAAKgiC,GAALhiC,CAASoL,CAAAA,CAAMxP,CAANwP,CAATpL,CAAZyR;AAA2B7V,KAxGlBL,EA4GbA,CAAAA,CAAA0mC,IAAA1mC,GAAA,UAAqB6P,CAArB,EAA+CqG,CAA/C,EAA+CA;AAC7C,WAAK,IAAI7V,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAIwP,CAAAA,CAAM3M,MAA1B,EAAkC7C,CAAAA,EAAlC,EACE6V,CAAAA,CAAO7V,CAAP6V,CAAAA,GAAYzR,IAAAA,CAAKiiC,IAALjiC,CAAUoL,CAAAA,CAAMxP,CAANwP,CAAVpL,CAAZyR;AAA4B7V,KA9GnBL,EAkHbA,CAAAA,CAAA6mC,cAAA7mC,GAAA,UAA+B29B,CAA/B,EAA+BA;AAC7B,aAAOA,CAAAA,CAAWE,QAAXF,CAAoB,OAApBA,EAA6B,CAA7BA,CAAP;AAAoC,KAnHzB39B,EAsHbA,CAAAA,CAAA4mC,GAAA5mC,GAAA,UAAoB6P,CAApB,EAA8CqG,CAA9C,EAAyEynB,CAAzE,EAAyEA;AAEvE,WADA,IAAMvvB,CAAAA,GAAQuvB,CAAd,EACSt9B,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAIwP,CAAAA,CAAM3M,MAA1B,EAAkC7C,CAAAA,EAAlC,EAAuC;AACrC,YAAMqB,CAAAA,GAAQmO,CAAAA,CAAMxP,CAANwP,CAAd;AACAqG,QAAAA,CAAAA,CAAO7V,CAAP6V,CAAAA,GAAYxU,CAAAA,IAAS,CAATA,GAAaA,CAAbA,GAAqB0M,CAAAA,IAAS3J,IAAAA,CAAKqiC,GAALriC,CAAS/C,CAAT+C,IAAkB,CAA3B2J,CAAjC8H;AAA4D;AAAA,KA1HnDlW,EA8HbA,CAAAA,CAAA8mC,GAAA9mC,GAAA,UAAoB6P,CAApB,EAA8CqG,CAA9C,EAA8CA;AAC5C,WAAK,IAAI7V,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAIwP,CAAAA,CAAM3M,MAA1B,EAAkC7C,CAAAA,EAAlC,EACE6V,CAAAA,CAAO7V,CAAP6V,CAAAA,GAAYzR,IAAAA,CAAKqiC,GAALriC,CAASoL,CAAAA,CAAMxP,CAANwP,CAATpL,CAAZyR;AAA2B7V,KAhIlBL,EAoIbA,CAAAA,CAAA2G,KAAA3G,GAAA,UAAsB6P,CAAtB,EAAgDqG,CAAhD,EAAgDA;AAC9C,WAAK,IAAI7V,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAIwP,CAAAA,CAAM3M,MAA1B,EAAkC7C,CAAAA,EAAlC,EACE6V,CAAAA,CAAO7V,CAAP6V,CAAAA,GAAYzR,IAAAA,CAAKkC,KAALlC,CAAWoL,CAAAA,CAAMxP,CAANwP,CAAXpL,CAAZyR;AAA6B7V,KAtIpBL,EA0IbA,CAAAA,CAAAsnC,KAAAtnC,GAAA,UAAsB6P,CAAtB,EAAgDqG,CAAhD,EAAgDA;AAC9C,WAAK,IAAI7V,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAIwP,CAAAA,CAAM3M,MAA1B,EAAkC7C,CAAAA,EAAlC,EACE6V,CAAAA,CAAO7V,CAAP6V,CAAAA,GAAYpJ,MAAAA,CAAOme,KAAPne,CAAa+C,CAAAA,CAAMxP,CAANwP,CAAb/C,IAAyB,CAAzBA,GAA6B,CAAzCoJ;AAAyC,KA5IhClW,EAgJbA,CAAAA,CAAAwnC,oBAAAxnC,GAAA,UAAqC29B,CAArC,EAAqCA;AACnC,aAAOA,CAAAA,CAAWE,QAAXF,CAAoB,OAApBA,EAA6B,GAA7BA,CAAP;AAAoC,KAjJzB39B,EAoJbA,CAAAA,CAAAunC,SAAAvnC,GAAA,UAA0B6P,CAA1B,EAAoDqG,CAApD,EAA+EynB,CAA/E,EAA+EA;AAE7E,WADA,IAAMvvB,CAAAA,GAAQuvB,CAAd,EACSt9B,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAIwP,CAAAA,CAAM3M,MAA1B,EAAkC7C,CAAAA,EAAlC,EAAuC;AACrC,YAAMqB,CAAAA,GAAQmO,CAAAA,CAAMxP,CAANwP,CAAd;AACAqG,QAAAA,CAAAA,CAAO7V,CAAP6V,CAAAA,GAAYxU,CAAAA,IAAS,CAATA,GAAaA,CAAbA,GAAqB0M,CAAAA,GAAQ1M,CAAzCwU;AAAyCxU;AAAAA,KAxJhC1B,EA4JbA,CAAAA,CAAA4W,GAAA5W,GAAA,UAAoB6P,CAApB,EAA8CqG,CAA9C,EAA8CA;AAC5C,WAAK,IAAI7V,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAIwP,CAAAA,CAAM3M,MAA1B,EAAkC7C,CAAAA,EAAlC,EACE6V,CAAAA,CAAO7V,CAAP6V,CAAAA,GAAYzR,IAAAA,CAAKmS,GAALnS,CAASoL,CAAAA,CAAMxP,CAANwP,CAATpL,CAAZyR;AAA2B7V,KA9JlBL,EAkKbA,CAAAA,CAAAk3B,GAAAl3B,GAAA,UAAoB6P,CAApB,EAA8CqG,CAA9C,EAA8CA;AAC5C,WAAK,IAAI7V,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAIwP,CAAAA,CAAM3M,MAA1B,EAAkC7C,CAAAA,EAAlC,EACE6V,CAAAA,CAAO7V,CAAP6V,CAAAA,GAAO7V,CAAMwP,CAAAA,CAAMxP,CAANwP,CAAbqG;AAAmB7V,KApKVL,EAwKbA,CAAAA,CAAAo6B,GAAAp6B,GAAA,UAAoB6P,CAApB,EAA+CqG,CAA/C,EAA+CA;AAC7C,WAAK,IAAI7V,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAIwP,CAAAA,CAAM3M,MAA1B,EAAkC7C,CAAAA,EAAlC,EACE6V,CAAAA,CAAO7V,CAAP6V,CAAAA,GAAYrG,CAAAA,CAAMxP,CAANwP,CAAAA,GAAW,CAAXA,GAAe,CAA3BqG;AAA2B,KA1KlBlW,EA8KbA,CAAAA,CAAA2nC,UAAA3nC,GAAA,UAA2B6P,CAA3B,EAAqDqG,CAArD,EAAqDA;AACnD,WAAK,IAAI7V,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAIwP,CAAAA,CAAM3M,MAA1B,EAAkC7C,CAAAA,EAAlC,EACE6V,CAAAA,CAAO7V,CAAP6V,CAAAA,GAAY,IAAMrG,CAAAA,CAAMxP,CAANwP,CAAlBqG;AAAwB7V,KAhLfL,EAoLbA,CAAAA,CAAAmoC,IAAAnoC,GAAA,UAAqB6P,CAArB,EAA+CqG,CAA/C,EAA+CA;AAC7C,WAAK,IAAI7V,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAIwP,CAAAA,CAAM3M,MAA1B,EAAkC7C,CAAAA,EAAlC,EACE6V,CAAAA,CAAO7V,CAAP6V,CAAAA,GAAYzR,IAAAA,CAAKC,GAALD,CAAS,CAATA,EAAYoL,CAAAA,CAAMxP,CAANwP,CAAZpL,CAAZyR;AAA8B7V,KAtLrBL,EA0LbA,CAAAA,CAAAqoC,OAAAroC,GAAA,UAAwB6P,CAAxB,EAAkDqG,CAAlD,EAAkDA;AAChD,WAAK,IAAI7V,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAIwP,CAAAA,CAAM3M,MAA1B,EAAkC7C,CAAAA,EAAlC,EACE6V,CAAAA,CAAO7V,CAAP6V,CAAAA,GAAa,KAAK,IAAIzR,IAAAA,CAAKqiC,GAALriC,CAAKqiC,CAAKj3B,CAAAA,CAAMxP,CAANwP,CAAVpL,CAAT,CAAbyR;AAAsC7V,KA5L7BL,EAgMbA,CAAAA,CAAAsoC,IAAAtoC,GAAA,UAAqB6P,CAArB,EAA+CqG,CAA/C,EAA+CA;AAC7C,WAAK,IAAI7V,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAIwP,CAAAA,CAAM3M,MAA1B,EAAkC7C,CAAAA,EAAlC,EACE6V,CAAAA,CAAO7V,CAAP6V,CAAAA,GAAYrG,CAAAA,CAAMxP,CAANwP,CAAAA,GAAW,CAAXA,GAAe,CAAfA,GAAmBA,CAAAA,CAAMxP,CAANwP,CAAAA,GAAW,CAAXA,GAAW,CAAK,CAAhBA,GAAoB,CAAnDqG;AAAmD,KAlM1ClW,EAsMbA,CAAAA,CAAAuoC,GAAAvoC,GAAA,UAAoB6P,CAApB,EAA8CqG,CAA9C,EAA8CA;AAC5C,WAAK,IAAI7V,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAIwP,CAAAA,CAAM3M,MAA1B,EAAkC7C,CAAAA,EAAlC,EACE6V,CAAAA,CAAO7V,CAAP6V,CAAAA,GAAYzR,IAAAA,CAAK8jC,GAAL9jC,CAASoL,CAAAA,CAAMxP,CAANwP,CAATpL,CAAZyR;AAA2B7V,KAxMlBL,EA4MbA,CAAAA,CAAAwoC,IAAAxoC,GAAA,UAAqB6P,CAArB,EAA+CqG,CAA/C,EAA+CA;AAC7C,WAAK,IAAI7V,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAIwP,CAAAA,CAAM3M,MAA1B,EAAkC7C,CAAAA,EAAlC,EACE6V,CAAAA,CAAO7V,CAAP6V,CAAAA,GAAYzR,IAAAA,CAAK+jC,IAAL/jC,CAAUoL,CAAAA,CAAMxP,CAANwP,CAAVpL,CAAZyR;AAA4B7V,KA9MnBL,EAkNbA,CAAAA,CAAA4oC,IAAA5oC,GAAA,UAAqB6P,CAArB,EAA+CqG,CAA/C,EAA+CA;AAC7C,WAAK,IAAI7V,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAIwP,CAAAA,CAAM3M,MAA1B,EAAkC7C,CAAAA,EAAlC,EACE6V,CAAAA,CAAO7V,CAAP6V,CAAAA,GAAYzR,IAAAA,CAAKmkC,IAALnkC,CAAUoL,CAAAA,CAAMxP,CAANwP,CAAVpL,CAAZyR;AAA4B7V,KApNnBL,EAwNbA,CAAAA,CAAA+oC,GAAA/oC,GAAA,UAAoB6P,CAApB,EAA8CqG,CAA9C,EAA8CA;AAC5C,WAAK,IAAI7V,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAIwP,CAAAA,CAAM3M,MAA1B,EAAkC7C,CAAAA,EAAlC,EACE6V,CAAAA,CAAO7V,CAAP6V,CAAAA,GAAYzR,IAAAA,CAAKskC,GAALtkC,CAASoL,CAAAA,CAAMxP,CAANwP,CAATpL,CAAZyR;AAA2B7V,KA1NlBL,EA8NbA,CAAAA,CAAAgpC,IAAAhpC,GAAA,UAAqB6P,CAArB,EAA+CqG,CAA/C,EAA+CA;AAC7C,WAAK,IAAI7V,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAIwP,CAAAA,CAAM3M,MAA1B,EAAkC7C,CAAAA,EAAlC,EACE6V,CAAAA,CAAO7V,CAAP6V,CAAAA,GAAYzR,IAAAA,CAAKukC,IAALvkC,CAAUoL,CAAAA,CAAMxP,CAANwP,CAAVpL,CAAZyR;AAA4B7V,KAhOnBL;AAgOmBK,G1CxJhC,E0CwJgCA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;AClOhC,QAAA0sC,CAAAA,GAAA,YAAA;AACE,eAAAA,CAAA,CAAsBtO,CAAtB,EAAgF94B,CAAhF,EAAgFA;AAA1DmM,aAAA2sB,cAAA3sB,GAAA2sB,CAAA3sB,EAA0DA,KAAAnM,UAAAmM,GAAAnM,CAA1DmM;AAqBxB;;AAAA,aAjBEi7B,CAAAA,CAAA1qC,SAAA0qC,CAAArP,UAAAqP,GAAA,UAAWpP,CAAX,EAAWA,CAAAA,CAAXoP,EAEAA,CAAAA,CAAA1qC,SAAA0qC,CAAA9O,WAAA8O,GAAA,UAAYjqC,CAAZ,EAAYA;AACV,eAAA,EAAA,CAAKA,CAAL,IAAiC,MAAlBA,CAAAA,CAAOI,MAAtB,KAIO4O,KAAKosB,eAALpsB,CAAqBhP,CAArBgP,CAJP;AAI4BhP,OAP9BiqC,EAUUA,CAAAA,CAAA1qC,SAAA0qC,CAAA7O,eAAA6O,GAAV,UAA0BjqC,CAA1B,EAA0BA;AACxB,eAAA,CAAqD,CAArD,KAAIgP,KAAK2sB,cAAL3sB,CAAoBnE,OAApBmE,CAA4BhP,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IAAtC8L,CAAJ;AAA0C9L,OAX5C+mC,EAiBFA,CAAA;AAtBA,KAAA,EAAA;;AAAsB/sC,IAAAA,CAAAA,CAAA+sC,OAAA/sC,GAAA+sC,CAAA/sC;AAAA+sC,G3C0EtB,E2C1EsBA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;ACAtB,QAAAC,CAAAA,GAAA,YAAA;AAAA,eAAAA,CAAA,GAAAA,CAyBA;;AAAA,aAtBEA,CAAAA,CAAA3qC,SAAA2qC,CAAAtP,UAAAsP,GAAA,UAAWrP,CAAX,EAAWA;AACT7rB,aAAKvE,IAALuE,GAAY6rB,CAAAA,CAAWiB,OAAXjB,CAAmB,MAAnBA,CAAZ7rB;AAA+B,OADjCk7B,EAIAA,CAAAA,CAAA3qC,SAAA2qC,CAAA/O,WAAA+O,GAAA,UAAYlqC,CAAZ,EAAYA;AACV,eAAA,EAAA,CAAKA,CAAL,IAAiC,MAAlBA,CAAAA,CAAOI,MAAtB,KAIO4O,KAAKosB,eAALpsB,CAAqBhP,CAArBgP,CAJP;AAI4BhP,OAT9BkqC,EAYUA,CAAAA,CAAA3qC,SAAA2qC,CAAA9O,eAAA8O,GAAV,UAA0BlqC,CAA1B,EAA0BA;AAExB,eAAuB,aAAnBA,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IAAd;AAAcA,OAdhBgnC,EAsBFA,CAAA;AAzBA,KAAA,EAAA;;AAAsBhtC,IAAAA,CAAAA,CAAAgtC,SAAAhtC,GAAAgtC,CAAAhtC;AAAAgtC,G5C0EtB,E4C1EsBA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,C5C0EtB,E4C1EsBA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;ACAtB,QAAAC,CAAAA,GAAA,YAAA;AAAA,eAAAA,CAAA,GAAAA,CA0BA;;AAAA,aAvBEA,CAAAA,CAAA5qC,SAAA4qC,CAAAvP,UAAAuP,GAAA,UAAWtP,CAAX,EAAWA;AACT7rB,aAAKyd,GAALzd,GAAW6rB,CAAAA,CAAWE,QAAXF,CAAoB,KAApBA,EAAoB,CAAQ,qBAA5BA,CAAX7rB,EACAA,KAAKpN,GAALoN,GAAW6rB,CAAAA,CAAWE,QAAXF,CAAoB,KAApBA,EAA2B,qBAA3BA,CADX7rB;AACsC,OAFxCm7B,EAKAA,CAAAA,CAAA5qC,SAAA4qC,CAAAhP,WAAAgP,GAAA,UAAYnqC,CAAZ,EAAYA;AACV,eAAA,EAAA,CAAKA,CAAL,IAAiC,MAAlBA,CAAAA,CAAOI,MAAtB,KAIO4O,KAAKosB,eAALpsB,CAAqBhP,CAArBgP,CAJP;AAI4BhP,OAV9BmqC,EAaUA,CAAAA,CAAA5qC,SAAA4qC,CAAA/O,eAAA+O,GAAV,UAA0BnqC,CAA1B,EAA0BA;AACxB,eAAuB,cAAnBA,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IAAS,IAAgC,cAAnBlD,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IAA9C;AAA8CA,OAdhDinC,EAuBFA,CAAA;AA1BA,KAAA,EAAA;;AAAsBjtC,IAAAA,CAAAA,CAAAitC,IAAAjtC,GAAAitC,CAAAjtC;AAAAitC,G7C0EtB,E6C1EsBA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA,GCCtBjtC,CAAAA,CAAAqqB,cAAArqB,GAAA,UAA+ByqB,CAA/B,EAA+BA;AAC7B,UAAMpE,CAAAA,GAAMoE,CAAAA,CAAcvnB,MAA1B;AACA,aAAOunB,CAAAA,CAAc5f,KAAd4f,CAAoB,CAApBA,EAAuBpE,CAAAA,GAAM,CAA7BoE,EAAgCwG,MAAhCxG,CAAuCA,CAAAA,CAAcpE,CAAAA,GAAM,CAApBoE,CAAAA,GAAyB,CAAhEA,CAAP;AAAuE,KDHnDwiB;ACGmD,G9CuEzE,E8CvEyE,UAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA;AAAA;;AAAA,QAAA,CAAA,GAAA,QAAA,KAAA,MAAA,IAAA,UAAA,CAAA,EAAA,CAAA,EAAA;AAAA,UAAA,CAAA,GAAA,cAAA,OAAA,MAAA,IAAA,CAAA,CAAA,MAAA,CAAA,QAAA,CAAA;AAAA,UAAA,CAAA,CAAA,EAAA,OAAA,CAAA;AAAA,UAAA,CAAA;AAAA,UAAA,CAAA;AAAA,UAAA,CAAA,GAAA,CAAA,CAAA,IAAA,CAAA,CAAA,CAAA;AAAA,UAAA,CAAA,GAAA,EAAA;;AAAA,UAAA;AAAA,eAAA,CAAA,KAAA,CAAA,KAAA,CAAA,IAAA,CAAA,KAAA,CAAA,KAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,IAAA,EAAA,EAAA,IAAA,GAAA,CAAA,CAAA,IAAA,CAAA,CAAA,CAAA,KAAA;AAAA,OAAA,CAAA,OAAA,CAAA,EAAA;AAAA,QAAA,CAAA,GAAA;AAAA,UAAA,KAAA,EAAA;AAAA,SAAA;AAAA,OAAA,SAAA;AAAA,YAAA;AAAA,UAAA,CAAA,IAAA,CAAA,CAAA,CAAA,IAAA,KAAA,CAAA,GAAA,CAAA,CAAA,MAAA,KAAA,CAAA,CAAA,IAAA,CAAA,CAAA,CAAA;AAAA,SAAA,SAAA;AAAA,cAAA,CAAA,EAAA,MAAA,CAAA,CAAA,KAAA;AAAA;AAAA;;AAAA,aAAA,CAAA;AAAA,KAAA;AAAA,QAAA,CAAA,GAAA,QAAA,KAAA,QAAA,IAAA,YAAA;AAAA,WAAA,IAAA,CAAA,GAAA,EAAA,EAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,MAAA,EAAA,CAAA,EAAA,EAAA,CAAA,GAAA,CAAA,CAAA,MAAA,CAAA,CAAA,CAAA,SAAA,CAAA,CAAA,CAAA,CAAA,CAAA;;AAAA,aAAA,CAAA;AAAA,KAAA;AAAA,QAAA,CAAA,GAAA,QAAA,KAAA,YAAA,IAAA,UAAA,CAAA,EAAA;AAAA,UAAA,CAAA,IAAA,CAAA,CAAA,UAAA,EAAA,OAAA,CAAA;AAAA,UAAA,CAAA,GAAA,EAAA;AAAA,UAAA,QAAA,CAAA,EAAA,KAAA,IAAA,CAAA,IAAA,CAAA,EAAA,MAAA,CAAA,cAAA,CAAA,IAAA,CAAA,CAAA,EAAA,CAAA,MAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA;AAAA,aAAA,CAAA,CAAA,OAAA,GAAA,CAAA,EAAA,CAAA;AAAA,KAAA;;AAAA,IAAA,MAAA,CAAA,cAAA,CAAA,CAAA,EAAA,YAAA,EAAA;AAAA,MAAA,KAAA,EAAA,CAAA;AAAA,KAAA;;ACNzE,QAAArqC,CAAAA,GAAApC,CAAAA,CAAA,CAAAA,CAAA;AAAA,QAGA0sC,CAAAA,GAAA9xB,CAAAA,CAAA5a,CAAAA,CAAA,EAAAA,CAAA4a,CAHA;AAAA,QASArV,CAAAA,GAAA,YAAA;AAEE,eAAAA,CAAA,CAAY4J,CAAZ,EAA+C3J,CAA/C,EAA2D7C,CAA3D,EAA2DA;AACzD,YAAMgqC,CAAAA,GAAehqC,CAAAA,IAAc,CAACwM,CAAAA,CAAKzM,MAAN,CAAnC;AACA,YAAoB,MAAhByM,CAAAA,CAAKzM,MAAT,EACE,MAAM,IAAI8O,UAAJ,CAAe,kDAAf,CAAN;AAGEpN,QAAAA,KAAAA,CAAMqN,OAANrN,CAAc+K,CAAd/K,KAAgC,aAAToB,CAAvBpB,GACW,cAAToB,CAAS,GAEX8L,KAAKnC,IAALmC,GAAYgD,YAAAA,CAAa3B,IAAb2B,CAAkBnF,CAAlBmF,CAFD,GAGO,WAAT9O,CAAS,GAElB8L,KAAKnC,IAALmC,GAAY0C,UAAAA,CAAWrB,IAAXqB,CAAgB7E,CAAhB6E,CAFM,GAGA,YAATxO,CAAS,KAElB8L,KAAKnC,IAALmC,GAAY8C,UAAAA,CAAWzB,IAAXyB,CAAgBjF,CAAhBiF,CAFM,CAPlBhQ,GAYFkN,KAAKnC,IAALmC,GAAYnC,CAZV/K,EAeJkN,KAAK3O,IAAL2O,GAAYq7B,CAfRvoC,EAgBJkN,KAAK9L,IAAL8L,GAAY9L,CAhBRpB,EAiBJkN,KAAKs7B,cAALt7B,GAAsB,IAAIlP,CAAAA,CAAAmD,MAAJ,CAAmB+L,KAAK3O,IAAxB,EAA8B2O,KAAK9L,IAAnC,EAAmCA,KAAMhC,CAAzC,EAAyCA,KAAWA,CAApD,EAA+D8N,KAAKnC,IAApE,CAjBlB/K,EAkBJkN,KAAKhM,IAALgM,GAAYA,KAAKs7B,cAALt7B,CAAoBhM,IAlB5BlB;AAmFR;;AAAA,aAxDEmB,CAAAA,CAAA1D,SAAA0D,CAAAzE,GAAAyE,GAAA,UAAIiF,CAAJ,EAAIA;AAAAA,aAAJ,IAAAwP,CAAAA,GAAA1I,IAAA,EAA4CrL,CAAAA,GAAA,EAA5C,EAA4CzD,CAAAA,GAAA,CAAxCgI,EAAwChI,CAAAA,GAAAC,SAAAA,CAAAC,MAAxC8H,EAAwChI,CAAAA,EAAxCgI,EAAwCvE,CAAAA,CAAAzD,CAAAA,GAAA,CAAAyD,CAAAA,GAAAxD,SAAAA,CAAAD,CAAAC,CAAAwD;;AAC1C,YAAI4mC,CAAAA,GAAoC,EAAxC;AACA,YAAuB,YAAA,OAAZriC,CAAX,EACEqiC,CAAAA,GAAUC,CAAAA,CAAA,CAAItiC,CAAJ,CAAAsiC,EAAgB7mC,CAAhB6mC,CAAVD,CADF,KAEO;AAAA,cAAA,CAAIriC,CAAJ,EAGL,MAAM,IAAIzD,KAAJ,CAAU,kCAAV,CAAN;AAFA8lC,UAAAA,CAAAA,GAAariC,CAAbqiC;AAMF;AAAA,YADAH,CAAAA,CAAMK,eAANL,CAAsBG,CAAtBH,GACIG,CAAAA,CAAWnqC,MAAXmqC,KAAsBv7B,KAAK3O,IAAL2O,CAAU5O,MAApC,EACE,MAAM,IAAI8O,UAAJ,CAAe,qDAAf,CAAN;AAGFq7B,QAAAA,CAAAA,CAAWj+B,OAAXi+B,CAAmB,UAACtjC,CAAD,EAAcyjC,CAAd,EAAcA;AAC/B,cAAIzjC,CAAAA,IAAOyQ,CAAAA,CAAKrX,IAALqX,CAAUgzB,CAAVhzB,CAAX,EACE,MAAM,IAAIxI,UAAJ,CAAe,qDAAf,CAAN;AAAqB,SAFzBq7B;AAKA,YAAM3rC,CAAAA,GAAQoQ,KAAKs7B,cAALt7B,CAAoBxQ,GAApBwQ,CAAwBu7B,CAAxBv7B,CAAd;AACA,eAAkB,WAAdA,KAAK9L,IAAS,GACC,MAAVtE,CADS,GAGXA,CAHP;AAGOA,OAxBTqE,EA4BAA,CAAAA,CAAA1D,SAAA0D,CAAAE,GAAAF,GAAA,UAAIrE,CAAJ,EAAwBsJ,CAAxB,EAAwBA;AAAAA,aAAxB,IAAAwP,CAAAA,GAAA1I,IAAA,EAAgErL,CAAAA,GAAA,EAAhE,EAAgEzD,CAAAA,GAAA,CAAxCgI,EAAwChI,CAAAA,GAAAC,SAAAA,CAAAC,MAAxC8H,EAAwChI,CAAAA,EAAxCgI,EAAwCvE,CAAAA,CAAAzD,CAAAA,GAAA,CAAAyD,CAAAA,GAAAxD,SAAAA,CAAAD,CAAAC,CAAAwD;;AAC9DymC,QAAAA,CAAAA,CAAMO,gBAANP,CAAuBp7B,KAAK9L,IAA5BknC,EAAkCxrC,CAAlCwrC;AACA,YAAIG,CAAAA,GAAoC,EAAxC;AACA,YAAuB,YAAA,OAAZriC,CAAX,EACEqiC,CAAAA,GAAUC,CAAAA,CAAA,CAAItiC,CAAJ,CAAAsiC,EAAgB7mC,CAAhB6mC,CAAVD,CADF,KAEO;AAAA,cAAA,CAAIriC,CAAJ,EAGL,MAAM,IAAIzD,KAAJ,CAAU,iCAAV,CAAN;AAFA8lC,UAAAA,CAAAA,GAAariC,CAAbqiC;AAMF;AAAA,YADAH,CAAAA,CAAMK,eAANL,CAAsBG,CAAtBH,GACIG,CAAAA,CAAWnqC,MAAXmqC,KAAsBv7B,KAAK3O,IAAL2O,CAAU5O,MAApC,EACE,MAAM,IAAI8O,UAAJ,CAAe,qDAAf,CAAN;AAGFq7B,QAAAA,CAAAA,CAAWj+B,OAAXi+B,CAAmB,UAACtjC,CAAD,EAAcyjC,CAAd,EAAcA;AAC/B,cAAIzjC,CAAAA,IAAOyQ,CAAAA,CAAKrX,IAALqX,CAAUgzB,CAAVhzB,CAAX,EACE,MAAM,IAAIxI,UAAJ,CAAe,qDAAf,CAAN;AAAqB,SAFzBq7B,GAMqB,aAAA,OAAV3rC,CAAU,GACnBoQ,KAAKs7B,cAALt7B,CAAoB7L,GAApB6L,CAAwBu7B,CAAxBv7B,EAAoCpQ,CAAAA,GAAQ,CAARA,GAAY,CAAhDoQ,CADmB,GAGnBA,KAAKs7B,cAALt7B,CAAoB7L,GAApB6L,CAAwBu7B,CAAxBv7B,EAAoCpQ,CAApCoQ,CATFu7B;AASsC3rC,OArDxCqE,EAwDFA,CAAA;AA3FA,KAAA,EATA;;AASa/F,IAAAA,CAAAA,CAAA+F,MAAA/F,GAAA+F,CAAA/F;AAAA+F,G/CoEb,E+CpEaA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,QAAAA,IAAAA,UAAAA,CAAAA,EAAAA;AAAAA,UAAAA,CAAAA,GAAAA,cAAAA,OAAAA,MAAAA,IAAAA,CAAAA,CAAAA,MAAAA,CAAAA,QAAAA,CAAAA;AAAAA,UAAAA,CAAAA,GAAAA,CAAAA;AAAAA,aAAAA,CAAAA,GAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,GAAAA;AAAAA,QAAAA,IAAAA,EAAAA,YAAAA;AAAAA,iBAAAA,CAAAA,IAAAA,CAAAA,IAAAA,CAAAA,CAAAA,MAAAA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA;AAAAA,YAAAA,KAAAA,EAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA;AAAAA,YAAAA,IAAAA,EAAAA,CAAAA;AAAAA,WAAAA;AAAAA;AAAAA,OAAAA;AAAAA,KAAAA;;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;ACXb,QAAAnD,CAAAA,GAAApC,CAAAA,CAAA,CAAAA,CAAA;AAAA,QAEAktC,CAAAA,GAAAltC,CAAAA,CAAA,EAAAA,CAFA;AAIAR,IAAAA,CAAAA,CAAA2tC,kBAAA3tC,GAAA,UAAmCotC,CAAnC,EAAmCA;AACjC,cAAQA,CAAAA,CAAepnC,IAAvB;AACE,aAAK,MAAL;AACE,iBAAO,IAAI0nC,CAAAA,CAAA3nC,MAAJ,CAAc,IAAIyO,UAAJ,CAAe44B,CAAAA,CAAetjB,WAA9B,CAAd,EAA0D,MAA1D,EAAkEsjB,CAAAA,CAAejqC,IAAjF,CAAP;;AACF,aAAK,SAAL;AACE,iBAAO,IAAIuqC,CAAAA,CAAA3nC,MAAJ,CAAcqnC,CAAAA,CAAen5B,SAA7B,EAAwD,SAAxD,EAAmEm5B,CAAAA,CAAejqC,IAAlF,CAAP;;AACF,aAAK,SAAL;AACE,iBAAO,IAAIuqC,CAAAA,CAAA3nC,MAAJ,CAAc,IAAI+O,YAAJ,CAAiBs4B,CAAAA,CAAen5B,SAAhC,CAAd,EAA0D,SAA1D,EAAqEm5B,CAAAA,CAAejqC,IAApF,CAAP;;AACF,aAAK,QAAL;AACE,iBAAO,IAAIuqC,CAAAA,CAAA3nC,MAAJ,CAAcqnC,CAAAA,CAAep6B,UAA7B,EAAyC,QAAzC,EAAmDo6B,CAAAA,CAAejqC,IAAlE,CAAP;;AACF,aAAK,MAAL;AACE,iBAAO,IAAIuqC,CAAAA,CAAA3nC,MAAJ,CAAc,IAAI6O,UAAJ,CAAew4B,CAAAA,CAAetjB,WAA9B,CAAd,EAA0D,OAA1D,EAAmEsjB,CAAAA,CAAejqC,IAAlF,CAAP;;AACF,aAAK,OAAL;AACE,iBAAO,IAAIuqC,CAAAA,CAAA3nC,MAAJ,CAAcqnC,CAAAA,CAAetjB,WAA7B,EAAwD,OAAxD,EAAiEsjB,CAAAA,CAAejqC,IAAhF,CAAP;;AACF;AACE,gBAAM,IAAIqJ,SAAJ,CAAc,gCAAd,CAAN;AAdJ;AAcwB,KAf1BxM,EAmBAA,CAAAA,CAAA4tC,gBAAA5tC,GAAA,UAAiC4qB,CAAjC,EAAiCA;AAC/B,aAAO,IAAIhoB,CAAAA,CAAAmD,MAAJ,CAAmB6kB,CAAAA,CAAOznB,IAA1B,EAAgCynB,CAAAA,CAAO5kB,IAAvC,EAAuCA,KAAMhC,CAA7C,EAA6CA,KAAWA,CAAxD,EAAmE4mB,CAAAA,CAAOjb,IAA1E,CAAP;AAAiFA,KApBnF3P,EAuBAA,CAAAA,CAAAytC,gBAAAztC,GAAA,UAAiCgG,CAAjC,EAA6DsO,CAA7D,EAA6DA;AAC3D,cAAA,OAAeA,CAAf;AACE,aAAK,QAAL;AACE,cAAa,aAATtO,CAAJ,EACE,MAAM,IAAIwG,SAAJ,CAAc,0DAAd,CAAN;AAEF;;AACF,aAAK,QAAL;AACE,cAAa,cAATxG,CAAS,IAAsB,YAATA,CAA1B,EACE,MAAM,IAAIwG,SAAJ,CAAc,0DAAd,CAAN;AAEF,cAAa,cAATxG,CAAS,IAAa8G,MAAAA,CAAOC,SAAPD,CAAiBwH,CAAjBxH,CAA1B,EACE,MAAM,IAAIN,SAAJ,CAAc,0DAAd,CAAN;AAEF,cAAa,YAATxG,CAAS,IAATA,CAAqB8G,MAAAA,CAAOC,SAAPD,CAAiBwH,CAAjBxH,CAAzB,EACE,MAAM,IAAIN,SAAJ,CAAc,0DAAd,CAAN;AAEF;;AACF,aAAK,SAAL;AACE,cAAa,WAATxG,CAAJ,EACE,MAAM,IAAIwG,SAAJ,CAAc,0DAAd,CAAN;AAEF;;AACF;AACE,gBAAM,IAAIA,SAAJ,CAAc,wCAAd,CAAN;AAvBJ;AAuBwB,KA/C1BxM,EAmDAA,CAAAA,CAAAutC,eAAAvtC,GAAA,UAAgCgL,CAAhC,EAAgCA;AAAAA,UAAAA,CAAAA,EAAAA,CAAAA;AAC9B,UAAIA,CAAAA,CAAQ9H,MAAR8H,GAAiB,CAAjBA,IAAsBA,CAAAA,CAAQ9H,MAAR8H,GAAiB,CAA3C,EACE,MAAM,IAAIgH,UAAJ,CAAe,iDAAf,CAAN;;AAAqB,UAAA;AAEvB,aAAgB,IAAA67B,CAAAA,GAAAnhC,CAAAA,CAAA1B,CAAA0B,CAAA,EAAOohC,CAAAA,GAAAD,CAAAA,CAAAjhC,IAAAihC,EAAvB,EAAuBjhC,CAAAkhC,CAAAA,CAAAjhC,IAAvB,EAAuBihC,CAAAA,GAAAD,CAAAA,CAAAjhC,IAAAihC,EAAvB,EAAyB;AAApB,cAAM3rC,CAAAA,GAAC4rC,CAAAA,CAAApsC,KAAP;AACH,cAAA,CAAKoL,MAAAA,CAAOC,SAAPD,CAAiB5K,CAAjB4K,CAAL,EACE,MAAM,IAAIN,SAAJ,CAAc,oBAAkBtK,CAAlB,GAAmB,oBAAjC,CAAN;AAEF,cAAIA,CAAAA,GAAI,CAAJA,IAASA,CAAAA,GAAI,UAAjB,EACE,MAAM,IAAIsK,SAAJ,CAAc,2BAAyBtK,CAAzB,GAA0B,iBAAxC,CAAN;AAA8C;AAAA,OAP3B,CAO2B,OAAA,CAAA,EAAA;AAAA,QAAA,CAAA,GAAA;AAAA,UAAA,KAAA,EAAA;AAAA,SAAA;AAAA,OAP3B,SAO2B;AAAA,YAAA;AAAA,UAAA,CAAA,IAAA,CAAA,CAAA,CAAA,IAAA,KAAA,CAAA,GAAA,CAAA,CAAA,MAAA,KAAA,CAAA,CAAA,IAAA,CAAA,CAAA,CAAA;AAAA,SAAA,SAAA;AAAA,cAAA,CAAA,EAAA,MAAA,CAAA,CAAA,KAAA;AAAA;AAAA;AAAA,KA5DpDlC;AA4DoD,GhDepD,EgDfoD,UAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA;AAAA;;AAAA,aAAA,CAAA,CAAA,CAAA,EAAA;AAAA,WAAA,IAAA,CAAA,IAAA,CAAA,EAAA,CAAA,CAAA,cAAA,CAAA,CAAA,MAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA;AAAA;;AAAA,IAAA,MAAA,CAAA,cAAA,CAAA,CAAA,EAAA,YAAA,EAAA;AAAA,MAAA,KAAA,EAAA,CAAA;AAAA,KAAA;AChEpD,QAAA+tC,CAAAA,GAAAvtC,CAAAA,CAAA,EAAAA,CAAA;AAAA,QACAwtC,CAAAA,GAAAxtC,CAAAA,CAAA,EAAAA,CADA;AAAA,QAEAytC,CAAAA,GAAAztC,CAAAA,CAAA,GAAAA,CAFA;AAAA,QAKA0tC,CAAAA,GAAA1tC,CAAAA,CAAA,GAAAA,CALA;AAUA2tC,IAAAA,CAAAA,CAAA3tC,CAAAA,CAAA,GAAAA,CAAA2tC,CAAAA,EACAA,CAAAA,CAAA3tC,CAAAA,CAAA,GAAAA,CAAA2tC,CADAA,EAGanuC,CAAAA,CAAA2jC,OAAA3jC,GAAmB;AAC9BouC,MAAAA,GAAAA,EAAK,IAAIL,CAAAA,CAAAM,UAAJ,EADyB;AAE9BpY,MAAAA,IAAAA,EAAM,IAAI+X,CAAAA,CAAAM,WAAJ,EAFwB;AAG9BC,MAAAA,KAAAA,EAAO,IAAIN,CAAAA,CAAAO,YAAJ;AAHuB,KAHhCL,EASanuC,CAAAA,CAAAyuC,GAAAzuC,GAAmBkuC,CAAAA,CAAAQ,OAThCP;AASgCO,GjD4DhC,EiD5DgCA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;ACfhC,QAAAC,CAAAA,GAAAnuC,CAAAA,CAAA,EAAAA,CAAA;AAAA,QAIA6tC,CAAAA,GAAA,YAAA;AAAA,eAAAA,CAAA,GAAAA,CAUA;;AAAA,aAPEA,CAAAA,CAAAhsC,SAAAgsC,CAAA3Q,UAAA2Q,GAAA,YAAA;AACE,eAAA,CAAO,CAAP;AAAO,OADTA,EAGAA,CAAAA,CAAAhsC,SAAAgsC,CAAAO,oBAAAP,GAAA,UAAqBlwB,CAArB,EAAqBA;AACnB,eAAO,IAAIwwB,CAAAA,CAAAE,iBAAJ,CAAsB/8B,IAAtB,EAA4BqM,CAA5B,CAAP;AAAmCA,OAJrCkwB,EAMAA,CAAAA,CAAAhsC,SAAAgsC,CAAAS,OAAAT,GAAA,YAAA,CAAA,CANAA,EAOFA,CAAA;AAVA,KAAA,EAJA;;AAIaruC,IAAAA,CAAAA,CAAAquC,UAAAruC,GAAAquC,CAAAruC;AAAAquC,GlDuEb,EkDvEaA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;ACLb,QAAAU,CAAAA,GAAAvuC,CAAAA,CAAA,EAAAA,CAAA;AAAA,QAGAwuC,CAAAA,GAAAxuC,CAAAA,CAAA,EAAAA,CAHA;AAAA,QAIAyuC,CAAAA,GAAAzuC,CAAAA,CAAA,EAAAA,CAJA;AAAA,QAMAquC,CAAAA,GAAA,YAAA;AACE,eAAAA,CAAA,CAAqBlL,CAArB,EAAgDxlB,CAAhD,EAAgDA;AAA3BrM,aAAA6xB,OAAA7xB,GAAA6xB,CAAA7xB,EAA2BA,KAAAqM,OAAArM,GAAAqM,CAA3BrM;AAavB;;AAAA,aAXE+8B,CAAAA,CAAAxsC,SAAAwsC,CAAAK,sBAAAL,GAAA,YAAA;AACE,eAAO,IAAIG,CAAAA,CAAAG,mBAAJ,CAAwBr9B,IAAxB,EAA8BA,KAAKqM,OAALrM,CAAas9B,QAA3C,CAAP;AAAkDA,OADpDP,EAIAA,CAAAA,CAAAxsC,SAAAwsC,CAAAC,OAAAD,GAAA,YAAA,CAAA,CAJAA,EAMAA,CAAAA,CAAAxsC,SAAAwsC,CAAAx0B,OAAAw0B,GAAA,UAAQpwB,CAAR,EAA0B4M,CAA1B,EAA0BA;AACxB,YAAM5lB,CAAAA,GAAKspC,CAAAA,CAAA3jB,eAAA2jB,CAAgBtwB,CAAhBswB,EAAsB1jB,CAAtB0jB,EAA8BE,CAAAA,CAAA3J,oBAA9ByJ,CAAX;AAEA,eADAtpC,CAAAA,CAAGi4B,UAAHj4B,CAAcgZ,CAAAA,CAAKkf,UAAnBl4B,GACOA,CAAP;AAAOA,OATTopC,EAWFA,CAAA;AAdA,KAAA,EANA;;AAMa7uC,IAAAA,CAAAA,CAAA6uC,iBAAA7uC,GAAA6uC,CAAA7uC;AAAA6uC,GnDsEb,EmDtEaA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;ACJb,QAAAM,CAAAA,GAAA,YAAA;AACE,eAAAA,CAAA,CAA4BE,CAA5B,EAAwED,CAAxE,EAAwEA;AAA5Ct9B,aAAAu9B,OAAAv9B,GAAAu9B,CAAAv9B,EAA4CA,KAAAs9B,QAAAt9B,GAAAs9B,CAA5Ct9B;AAG9B;;AAAA,aADEq9B,CAAAA,CAAA9sC,SAAA8sC,CAAAL,OAAAK,GAAA,YAAA,CAAA,CAAAA,EACFA,CAAA;AAJA,KAAA,EAAA;;AAAanvC,IAAAA,CAAAA,CAAAmvC,mBAAAnvC,GAAAmvC,CAAAnvC;AAAAmvC,GpD0Eb,EoD1EaA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,QAAAA,CAAAA;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,SAAAA,KAAAA,CAAAA,GAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,CAAAA,CAAAA,GAAAA,MAAAA,CAAAA,cAAAA,IAAAA;AAAAA,QAAAA,SAAAA,EAAAA;AAAAA,mBAAAA,KAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,QAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA;AAAAA,OAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,IAAAA,CAAAA,IAAAA,CAAAA,EAAAA,CAAAA,CAAAA,cAAAA,CAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,OAAAA,EAAAA,CAAAA,EAAAA,CAAAA,CAAAA;AAAAA,KAAAA,EAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,eAAAA,CAAAA,GAAAA;AAAAA,aAAAA,WAAAA,GAAAA,CAAAA;AAAAA;;AAAAA,MAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,SAAAA,GAAAA,SAAAA,CAAAA,GAAAA,MAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA,CAAAA,SAAAA,EAAAA,IAAAA,CAAAA,EAAAA,CAAAA;AAAAA,KAAAA,CAAAA;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;ACRb,QAAApL,CAAAA,GAAAvjC,CAAAA,CAAA,EAAAA,CAAA;AAAA,QACAoC,CAAAA,GAAApC,CAAAA,CAAA,CAAAA,CADA;AAAA,QAEAkR,CAAAA,GAAAlR,CAAAA,CAAA,CAAAA,CAFA;AAAA,QAKAslC,CAAAA,GAAA,UAAA9oB,CAAA,EAAAA;AAAA,eAAA8oB,CAAA,GAAAA;AAAAA,eAAAA,SAAAA,CAAAA,IAAAA,CAAAA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,SAAAA,CAAAA,IAAAA,IAAAA;AAKA;;AAAA,aAL+B7oB,CAAAA,CAAA6oB,CAAA7oB,EAAAD,CAAAC,CAAAA,EAC7B6oB,CAAAA,CAAAzjC,SAAAyjC,CAAAlc,GAAAkc,GAAA,UAAIjc,CAAJ,EAA2C/mB,CAA3C,EAA2CA;AAEzC,eAAO,CADQwsC,CAAAA,CAAOxsC,CAAAA,CAAO,CAAPA,CAAPwsC,EAAkBx9B,KAAKzH,IAAvBilC,EAA6Bx9B,KAAK5B,QAAlCo/B,CACR,CAAP;AADiDp/B,OAFtB+M,EAK/B6oB,CAAA;AALA,KAAA,CAA+B/B,CAAAA,CAAAwL,MAA/B,CALA;;AAYA,aAAgBD,CAAhB,CAAuBniC,CAAvB,EAAkC9C,CAAlC,EAAgD4E,CAAhD,EAAgDA;AAC9C,UAAMvE,CAAAA,GAAOyC,CAAAA,CAAEhK,IAAFgK,GAASA,CAAAA,CAAEhK,IAAFgK,CAAOjK,MAAhBiK,GAAyB,CAAtC;AACA9C,MAAAA,CAAAA,GAAOqH,CAAAA,CAAA9L,SAAA8L,CAAUxG,SAAVwG,CAAoBrH,CAApBqH,EAA0BhH,CAA1BgH,CAAPrH;;AAQA,WAPA,IAAMmD,CAAAA,GAAakE,CAAAA,CAAA3C,UAAA2C,CAAWpC,eAAXoC,CAA2BvE,CAAAA,CAAEhK,IAA7BuO,EAAmC,CAACrH,CAAD,CAAnCqH,EAAoCrH,CAAO,CAA3CqH,CAAnB,EACMysB,CAAAA,GAAIhxB,CAAAA,CAAEwC,IADZ,EAEM6/B,CAAAA,GAAI,IAAI56B,UAAJ,CAAelD,CAAAA,CAAA9L,SAAA8L,CAAU5L,IAAV4L,CAAelE,CAAfkE,CAAf,CAFV,EAGMpK,CAAAA,GAAYoK,CAAAA,CAAA9L,SAAA8L,CAAUtH,iBAAVsH,CAA4BvE,CAAAA,CAAEhK,IAA9BuO,EAAoCrH,CAAAA,GAAO,CAA3CqH,CAHlB,EAIM/G,CAAAA,GAAU+G,CAAAA,CAAA9L,SAAA8L,CAAUjH,cAAViH,CAAyBlE,CAAzBkE,CAJhB,EAKMnC,CAAAA,GAAemC,CAAAA,CAAA9L,SAAA8L,CAAUjH,cAAViH,CAAyBvE,CAAAA,CAAEhK,IAA3BuO,CALrB,EAMMlC,CAAAA,GAAW,IAAI5K,KAAJ,CAAUuI,CAAAA,CAAEhK,IAAFgK,CAAOjK,MAAjB,CANjB,EAOS7C,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAImvC,CAAAA,CAAEtsC,MAAtB,EAA8B7C,CAAAA,EAA9B,EAAmC;AACjC,YAAM2K,CAAAA,GAAU0G,CAAAA,CAAA9L,SAAA8L,CAAUzG,eAAVyG,CAA0BrR,CAA1BqR,EAA6B/G,CAA7B+G,CAAhB;AAEAA,QAAAA,CAAAA,CAAAzN,aAAAyN,CAAcpM,SAAdoM,CAAwB1G,CAAxB0G,EAAiCvE,CAAAA,CAAEhK,IAAnCuO,EAAyClC,CAAzCkC;;AAIA,aAHA,IAAMlK,CAAAA,GAASkK,CAAAA,CAAA9L,SAAA8L,CAAU3G,eAAV2G,CAA0BlC,CAA1BkC,EAAoCnC,CAApCmC,CAAf,EACIhN,CAAAA,GAAMyI,CAAAA,CAAEwC,IAAFxC,CAAO3F,CAAP2F,CADV,EAEIjI,CAAAA,GAAQ,CAFZ,EAGSwB,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAIyG,CAAAA,CAAEhK,IAAFgK,CAAO9C,CAAP8C,CAApB,EAA2B9C,EAAS3D,CAApC,EAAuC;AACrC,cAAMhF,CAAAA,GAAQy8B,CAAAA,CAAE32B,CAAAA,GAASd,CAAAA,GAAIY,CAAf62B,CAAd;AACIz8B,UAAAA,CAAAA,GAAQgD,CAARhD,KACFgD,CAAAA,GAAMhD,CAANgD,EACAQ,CAAAA,GAAQwB,CAFNhF;AAKN8tC;;AAAAA,QAAAA,CAAAA,CAAEnvC,CAAFmvC,CAAAA,GAAOtqC,CAAPsqC;AAGF;;AAAA,aAAO,IAAI5sC,CAAAA,CAAAmD,MAAJ,CACHkJ,CAAAA,GAAWzB,CAAXyB,GAAwByC,CAAAA,CAAA3C,UAAA2C,CAAWpC,eAAXoC,CAA2BvE,CAAAA,CAAEhK,IAA7BuO,EAAmC,CAACrH,CAAD,CAAnCqH,EAA2CzC,CAA3CyC,CADrB,EAC2E,OAD3E,EAC2E,KAAS1N,CADpF,EACoFA,KAAWA,CAD/F,EAC0GwrC,CAD1G,CAAP;AAlCWxvC;;AAAAA,IAAAA,CAAAA,CAAA8lC,SAAA9lC,GAAA8lC,CAAA9lC,EAObA,CAAAA,CAAAsvC,MAAAtvC,GAAAsvC,CAPatvC;AAObsvC,GrDsEA,EqDtEAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;ACPA,QAAAxL,CAAAA,GAAAtjC,CAAAA,CAAA,CAAAA,CAAA;AAAA,QAGA+uC,CAAAA,GAAA,YAAA;AAAA,eAAAA,CAAA,GAAAA,CA0BA;;AAAA,aAvBEA,CAAAA,CAAAltC,SAAAktC,CAAA7R,UAAA6R,GAAA,UAAW5R,CAAX,EAAWA;AACT7rB,aAAKzH,IAALyH,GAAY6rB,CAAAA,CAAWK,MAAXL,CAAkB,MAAlBA,EAA0B,CAA1BA,CAAZ7rB,EACAA,KAAK5B,QAAL4B,GAAqD,MAArC6rB,CAAAA,CAAWK,MAAXL,CAAkB,UAAlBA,EAA8B,CAA9BA,CADhB7rB;AAC8C,OAFhDy9B,EAKAA,CAAAA,CAAAltC,SAAAktC,CAAAtR,WAAAsR,GAAA,UAAYzsC,CAAZ,EAAYA;AACV,eAAA,EAAA,CAAKA,CAAL,IAAiC,MAAlBA,CAAAA,CAAOI,MAAtB,KAIO4O,KAAKosB,eAALpsB,CAAqBhP,CAArBgP,CAJP;AAI4BhP,OAV9BysC,EAaUA,CAAAA,CAAAltC,SAAAktC,CAAArR,eAAAqR,GAAV,UAA0BzsC,CAA1B,EAA0BA;AACxB,eAAA,CAA8C,CAA9C,KAAIghC,CAAAA,CAAA9f,YAAA8f,CAAan2B,OAAbm2B,CAAqBhhC,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IAA/B89B,CAAJ;AAAmC99B,OAdrCupC,EAuBFA,CAAA;AA1BA,KAAA,EAHA;;AAGsBvvC,IAAAA,CAAAA,CAAAuvC,MAAAvvC,GAAAuvC,CAAAvvC;AAAAuvC,GtD0EtB,EsD1EsBA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;ACNtBvvC,IAAAA,CAAAA,CAAAsT,UAAAtT,GAuCA,UAAAyvC,CAAA,EAAAA;AACA,UAAAC,CAAAA,GAAAC,CAAAA,CAAAF,CAAAE,CAAA;AAAA,UACAC,CAAAA,GAAAF,CAAAA,CAAA,CAAAA,CADA;AAAA,UAEAG,CAAAA,GAAAH,CAAAA,CAAA,CAAAA,CAFA;AAGA,aAAA,KAAAE,CAAAA,GAAAC,CAAA,IAAA,CAAA,GAAAA,CAAA;AAAAA,KA3CA7vC,EACAA,CAAAA,CAAA41B,WAAA51B,GAiDA,UAAAyvC,CAAA,EAAAA;AAeA,WAdA,IAAAK,CAAA,EACAJ,CAAAA,GAAAC,CAAAA,CAAAF,CAAAE,CADA,EAEAC,CAAAA,GAAAF,CAAAA,CAAA,CAAAA,CAFA,EAGAG,CAAAA,GAAAH,CAAAA,CAAA,CAAAA,CAHA,EAKA7hB,CAAAA,GAAA,IAAAkiB,CAAA,CAVA,UAAAN,CAAA,EAAAG,CAAA,EAAAC,CAAA,EAAAA;AACA,eAAA,KAAAD,CAAAA,GAAAC,CAAA,IAAA,CAAA,GAAAA,CAAA;AASAG,OAVA,CAUAP,CAVA,EAUAG,CAVA,EAUAC,CAVA,CAUA,CALA,EAOAI,CAAAA,GAAA,CAPA,EAUA5pB,CAAAA,GAAAwpB,CAAAA,GAAA,CAAAA,GACAD,CAAAA,GAAA,CADAC,GAEAD,CAZA,EAcAvvC,CAAAA,GAAA,CAAA,EAAiBA,CAAAA,GAAAgmB,CAAjB,EAA0BhmB,CAAAA,IAAA,CAA1B,EACAyvC,CAAAA,GACAI,CAAAA,CAAAT,CAAAA,CAAA5gB,UAAA4gB,CAAApvC,CAAAovC,CAAAS,CAAAA,IAAA,EAAAA,GACAA,CAAAA,CAAAT,CAAAA,CAAA5gB,UAAA4gB,CAAApvC,CAAAA,GAAA,CAAAovC,CAAAS,CAAAA,IAAA,EADAA,GAEAA,CAAAA,CAAAT,CAAAA,CAAA5gB,UAAA4gB,CAAApvC,CAAAA,GAAA,CAAAovC,CAAAS,CAAAA,IAAA,CAFAA,GAGAA,CAAAA,CAAAT,CAAAA,CAAA5gB,UAAA4gB,CAAApvC,CAAAA,GAAA,CAAAovC,CAAAS,CAJAJ,EAKAjiB,CAAAA,CAAAoiB,CAAAA,EAAApiB,CAAAA,GAAAiiB,CAAAA,IAAA,EAAAA,GAAA,GALAA,EAMAjiB,CAAAA,CAAAoiB,CAAAA,EAAApiB,CAAAA,GAAAiiB,CAAAA,IAAA,CAAAA,GAAA,GANAA,EAOAjiB,CAAAA,CAAAoiB,CAAAA,EAAApiB,CAAAA,GAAA,MAAAiiB,CAPAA;;AAUA,YAAAD,CAAA,KACAC,CAAAA,GACAI,CAAAA,CAAAT,CAAAA,CAAA5gB,UAAA4gB,CAAApvC,CAAAovC,CAAAS,CAAAA,IAAA,CAAAA,GACAA,CAAAA,CAAAT,CAAAA,CAAA5gB,UAAA4gB,CAAApvC,CAAAA,GAAA,CAAAovC,CAAAS,CAAAA,IAAA,CAFAJ,EAGAjiB,CAAAA,CAAAoiB,CAAAA,EAAApiB,CAAAA,GAAA,MAAAiiB,CAJA;AAOA,YAAAD,CAAA,KACAC,CAAAA,GACAI,CAAAA,CAAAT,CAAAA,CAAA5gB,UAAA4gB,CAAApvC,CAAAovC,CAAAS,CAAAA,IAAA,EAAAA,GACAA,CAAAA,CAAAT,CAAAA,CAAA5gB,UAAA4gB,CAAApvC,CAAAA,GAAA,CAAAovC,CAAAS,CAAAA,IAAA,CADAA,GAEAA,CAAAA,CAAAT,CAAAA,CAAA5gB,UAAA4gB,CAAApvC,CAAAA,GAAA,CAAAovC,CAAAS,CAAAA,IAAA,CAHAJ,EAIAjiB,CAAAA,CAAAoiB,CAAAA,EAAApiB,CAAAA,GAAAiiB,CAAAA,IAAA,CAAAA,GAAA,GAJAA,EAKAjiB,CAAAA,CAAAoiB,CAAAA,EAAApiB,CAAAA,GAAA,MAAAiiB,CANA;AASA,aAAAjiB,CAAA;AAAAA,KA5FA7tB,EAEAA,CAAAA,CAAAqvB,aAAArvB,GAiHA,UAAAmwC,CAAA,EAAAA;AAQA,WAPA,IAAAL,CAAA,EACAzpB,CAAAA,GAAA8pB,CAAAA,CAAAjtC,MADA,EAEAktC,CAAAA,GAAA/pB,CAAAA,GAAA,CAFA,EAGAgqB,CAAAA,GAAA,EAHA,EAOAhwC,CAAAA,GAAA,CAPA,EAOAiwC,CAAAA,GAAAjqB,CAAAA,GAAA+pB,CAAA,EAA0C/vC,CAAAA,GAAAiwC,CAA1C,EAAoDjwC,CAAAA,IAHpD,KAGA,EACAgwC,CAAAA,CAAAziC,IAAAyiC,CAAAE,CAAAA,CACAJ,CADAI,EACAlwC,CADAkwC,EACAlwC,CAAAA,GALA,KAKAA,GAAAiwC,CAAAjwC,GAAAiwC,CAAAjwC,GAAAA,CAAAA,GALA,KAIAkwC,CAAAF;;AAMA,YAAAD,CAAA,IACAN,CAAAA,GAAAK,CAAAA,CAAA9pB,CAAAA,GAAA,CAAA8pB,CAAAL,EACAO,CAAAA,CAAAziC,IAAAyiC,CACAG,CAAAA,CAAAV,CAAAA,IAAA,CAAAU,CAAAA,GACAA,CAAAA,CAAAV,CAAAA,IAAA,CAAAA,GAAA,EAAAU,CADAA,GAEA,IAHAH,CAFA,IAOG,MAAAD,CAAA,KACHN,CAAAA,GAAAA,CAAAK,CAAAA,CAAA9pB,CAAAA,GAAA,CAAA8pB,CAAAA,IAAA,CAAAL,IAAAK,CAAAA,CAAA9pB,CAAAA,GAAA,CAAA8pB,CAAAL,EACAO,CAAAA,CAAAziC,IAAAyiC,CACAG,CAAAA,CAAAV,CAAAA,IAAA,EAAAU,CAAAA,GACAA,CAAAA,CAAAV,CAAAA,IAAA,CAAAA,GAAA,EAAAU,CADAA,GAEAA,CAAAA,CAAAV,CAAAA,IAAA,CAAAA,GAAA,EAAAU,CAFAA,GAGA,GAJAH,CAFG,CAPH;AAiBA,aAAAA,CAAAA,CAAArkB,IAAAqkB,CAAA,EAAAA,CAAA;AAAA,KAnJArwC;;AASA,SALA,IAAAwwC,CAAAA,GAAA,EAAA,EACAN,CAAAA,GAAA,EADA,EAEAH,CAAAA,GAAA,eAAA,OAAAv7B,UAAA,GAAAA,UAAA,GAAA5P,KAFA,EAIA4wB,CAAAA,GAAA,kEAJA,EAKAn1B,CAAAA,GAAA,CALA,EAKAgmB,CAAAA,GAAAmP,CAAAA,CAAAtyB,MAAA,EAAkC7C,CAAAA,GAAAgmB,CAAlC,EAAkCA,EAAShmB,CAA3C,EACAmwC,CAAAA,CAAAnwC,CAAAmwC,CAAAA,GAAAhb,CAAAA,CAAAn1B,CAAAm1B,CAAAgb,EACAN,CAAAA,CAAA1a,CAAAA,CAAA3G,UAAA2G,CAAAn1B,CAAAm1B,CAAA0a,CAAAA,GAAA7vC,CADAmwC;;AASA,aAAAb,CAAA,CAAAF,CAAA,EAAAA;AACA,UAAAppB,CAAAA,GAAAopB,CAAAA,CAAAvsC,MAAA;AAEA,UAAAmjB,CAAAA,GAAA,CAAAA,GAAA,CAAA,EACA,MAAA,IAAA9e,KAAA,CAAA,gDAAA,CAAA;AAKA,UAAAqoC,CAAAA,GAAAH,CAAAA,CAAA9hC,OAAA8hC,CAAA,GAAAA,CAAA;AAOA,aAAA,CANA,CAMA,KANAG,CAMA,KANAA,CAAAA,GAAAvpB,CAMA,GAAA,CAAAupB,CAAA,EAJAA,CAAAA,KAAAvpB,CAAAupB,GACA,CADAA,GAEA,IAAAA,CAAAA,GAAA,CAEA,CAAA;AAmEA;;AAAA,aAAAW,CAAA,CAAAJ,CAAA,EAAA5lC,CAAA,EAAAC,CAAA,EAAAA;AAGA,WAFA,IAAAslC,CAAA,EARAW,CAQA,EACAv6B,CAAAA,GAAA,EADA,EAEA7V,CAAAA,GAAAkK,CAAA,EAAqBlK,CAAAA,GAAAmK,CAArB,EAA8BnK,CAAAA,IAAA,CAA9B,EACAyvC,CAAAA,GAAAA,CACAK,CAAAA,CAAA9vC,CAAA8vC,CAAAA,IAAA,EAAAA,GAAA,QADAL,KAEAK,CAAAA,CAAA9vC,CAAAA,GAAA,CAAA8vC,CAAAA,IAAA,CAAAA,GAAA,KAFAL,KAGA,MAAAK,CAAAA,CAAA9vC,CAAAA,GAAA,CAAA8vC,CAHAL,CAAAA,EAIA55B,CAAAA,CAAAtI,IAAAsI,CAdAs6B,CAAAA,CAAAA,CADAC,CAAAA,GAeAX,CAdAU,KAAA,EAAAA,GAAA,EAAAA,CAAAA,GACAA,CAAAA,CAAAC,CAAAA,IAAA,EAAAA,GAAA,EAAAD,CADAA,GAEAA,CAAAA,CAAAC,CAAAA,IAAA,CAAAA,GAAA,EAAAD,CAFAA,GAGAA,CAAAA,CAAA,KAAAC,CAAAD,CAWAt6B,CAJA45B;;AAMA,aAAA55B,CAAAA,CAAA8V,IAAA9V,CAAA,EAAAA,CAAA;AAhGAg6B;;AAAAA,IAAAA,CAAAA,CAAA,IAAArhB,UAAA,CAAA,CAAA,CAAAqhB,CAAAA,GAAA,EAAAA,EACAA,CAAAA,CAAA,IAAArhB,UAAA,CAAA,CAAA,CAAAqhB,CAAAA,GAAA,EADAA;AACA,GvD+DA,EuD/DA,UAAA,CAAA,EAAA,CAAA,EAAA;ACnBAlwC,IAAAA,CAAAA,CAAAiuB,IAAAjuB,GAAA,UAAAoT,CAAA,EAAA5L,CAAA,EAAAkpC,CAAA,EAAAC,CAAA,EAAAC,CAAA,EAAAA;AACA,UAAAl2B,CAAA;AAAA,UAAA7Z,CAAA;AAAA,UACAgwC,CAAAA,GAAA,IAAAD,CAAA,GAAAD,CAAA,GAAA,CADA;AAAA,UAEAG,CAAAA,GAAAA,CAAA,KAAAD,CAAAC,IAAA,CAFA;AAAA,UAGAC,CAAAA,GAAAD,CAAAA,IAAA,CAHA;AAAA,UAIAE,CAAAA,GAAAA,CAAA,CAJA;AAAA,UAKA3wC,CAAAA,GAAAqwC,CAAAA,GAAAE,CAAAA,GAAA,CAAAF,GAAA,CALA;AAAA,UAMA3vC,CAAAA,GAAA2vC,CAAAA,GAAAA,CAAA,CAAAA,GAAA,CANA;AAAA,UAOAluC,CAAAA,GAAA4Q,CAAAA,CAAA5L,CAAAA,GAAAnH,CAAA+S,CAPA;;AAcA,WALA/S,CAAAA,IAAAU,CAAAV,EAEAqa,CAAAA,GAAAlY,CAAAA,GAAAA,CAAA,KAAA,CAAAwuC,CAAAxuC,IAAA,CAFAnC,EAGAmC,CAAAA,KAAAA,CAAAwuC,CAHA3wC,EAIA2wC,CAAAA,IAAAH,CACA,EAAQG,CAAAA,GAAA,CAAR,EAAmBt2B,CAAAA,GAAA,MAAAA,CAAA,GAAAtH,CAAAA,CAAA5L,CAAAA,GAAAnH,CAAA+S,CAAAsH,EAAAra,CAAAA,IAAAU,CAAA2Z,EAAAs2B,CAAAA,IAAA,CAAnB,CAAmB;;AAKnB,WAHAnwC,CAAAA,GAAA6Z,CAAAA,GAAAA,CAAA,KAAA,CAAAs2B,CAAAt2B,IAAA,CAAA7Z,EACA6Z,CAAAA,KAAAA,CAAAs2B,CADAnwC,EAEAmwC,CAAAA,IAAAL,CACA,EAAQK,CAAAA,GAAA,CAAR,EAAmBnwC,CAAAA,GAAA,MAAAA,CAAA,GAAAuS,CAAAA,CAAA5L,CAAAA,GAAAnH,CAAA+S,CAAAvS,EAAAR,CAAAA,IAAAU,CAAAF,EAAAmwC,CAAAA,IAAA,CAAnB,CAAmB;;AAEnB,UAAA,MAAAt2B,CAAA,EACAA,CAAAA,GAAA,IAAAq2B,CAAAr2B,CADA,KAEG;AAAA,YAAAA,CAAAA,KAAAo2B,CAAA,EACH,OAAAjwC,CAAAA,GAAAowC,GAAApwC,GAAA60B,IAAAA,CAAAA,IAAAlzB,CAAAA,GAAAA,CAAA,CAAAA,GAAA,CAAAkzB,CAAA;AAEA70B,QAAAA,CAAAA,IAAA4D,IAAAA,CAAAyJ,GAAAzJ,CAAA,CAAAA,EAAAksC,CAAAlsC,CAAA5D,EACA6Z,CAAAA,IAAAq2B,CADAlwC;AAGA;AAAA,aAAA,CAAA2B,CAAAA,GAAAA,CAAA,CAAAA,GAAA,CAAA,IAAA3B,CAAA,GAAA4D,IAAAA,CAAAyJ,GAAAzJ,CAAA,CAAAA,EAAAiW,CAAAA,GAAAi2B,CAAAlsC,CAAA;AAAAksC,KA9BA3wC,EAiCAA,CAAAA,CAAA6sB,KAAA7sB,GAAA,UAAAoT,CAAA,EAAA1R,CAAA,EAAA8F,CAAA,EAAAkpC,CAAA,EAAAC,CAAA,EAAAC,CAAA,EAAAA;AACA,UAAAl2B,CAAA;AAAA,UAAA7Z,CAAA;AAAA,UAAAC,CAAA;AAAA,UACA+vC,CAAAA,GAAA,IAAAD,CAAA,GAAAD,CAAA,GAAA,CADA;AAAA,UAEAG,CAAAA,GAAAA,CAAA,KAAAD,CAAAC,IAAA,CAFA;AAAA,UAGAC,CAAAA,GAAAD,CAAAA,IAAA,CAHA;AAAA,UAIAI,CAAAA,GAAA,OAAAP,CAAA,GAAAlsC,IAAAA,CAAAyJ,GAAAzJ,CAAA,CAAAA,EAAA,CAAA,EAAAA,IAAAA,IAAAA,CAAAyJ,GAAAzJ,CAAA,CAAAA,EAAA,CAAA,EAAAA,CAAA,GAAA,CAJA;AAAA,UAKApE,CAAAA,GAAAqwC,CAAAA,GAAA,CAAAA,GAAAE,CAAAA,GAAA,CALA;AAAA,UAMA7vC,CAAAA,GAAA2vC,CAAAA,GAAA,CAAAA,GAAA,CAAA,CANA;AAAA,UAOAluC,CAAAA,GAAAd,CAAAA,GAAA,CAAAA,IAAA,MAAAA,CAAA,IAAA,IAAAA,CAAA,GAAA,CAAAA,GAAA,CAAAA,GAAA,CAPA;;AA0CA,WAjCAA,CAAAA,GAAA+C,IAAAA,CAAA+gC,GAAA/gC,CAAA/C,CAAA+C,CAAA/C,EAEAupB,KAAAA,CAAAvpB,CAAAupB,CAAAA,IAAAvpB,CAAAA,KAAAg0B,IAAAA,CAAAzK,IACApqB,CAAAA,GAAAoqB,KAAAA,CAAAvpB,CAAAupB,CAAAA,GAAA,CAAAA,GAAA,CAAApqB,EACA6Z,CAAAA,GAAAo2B,CAFA7lB,KAIAvQ,CAAAA,GAAAjW,IAAAA,CAAAkC,KAAAlC,CAAAA,IAAAA,CAAAmS,GAAAnS,CAAA/C,CAAA+C,IAAAA,IAAAA,CAAAy3B,GAAAz3B,CAAAiW,EACAhZ,CAAAA,IAAAZ,CAAAA,GAAA2D,IAAAA,CAAAyJ,GAAAzJ,CAAA,CAAAA,EAAA,CAAAiW,CAAAjW,CAAA/C,CAAAA,GAAA,CAAAA,KACAgZ,CAAAA,IACA5Z,CAAAA,IAAA,CAFAY,CADAgZ,EAGA,CAGAhZ,CAAAA,IADAgZ,CAAAA,GAAAq2B,CAAAr2B,IAAA,CAAAA,GACAw2B,CAAAA,GAAApwC,CADA4Z,GAGAw2B,CAAAA,GAAAzsC,IAAAA,CAAAyJ,GAAAzJ,CAAA,CAAAA,EAAA,IAAAssC,CAAAtsC,CALA,IAOA3D,CAPA,IAOA,CAPA,KAQA4Z,CAAAA,IACA5Z,CAAAA,IAAA,CATA,CAHA4Z,EAeAA,CAAAA,GAAAq2B,CAAAr2B,IAAAo2B,CAAAp2B,IACA7Z,CAAAA,GAAA,CAAAA,EACA6Z,CAAAA,GAAAo2B,CAFAp2B,IAGKA,CAAAA,GAAAq2B,CAAAr2B,IAAA,CAAAA,IACL7Z,CAAAA,GAAAA,CAAAa,CAAAA,GAAAZ,CAAAY,GAAA,CAAAb,IAAA4D,IAAAA,CAAAyJ,GAAAzJ,CAAA,CAAAA,EAAAksC,CAAAlsC,CAAA5D,EACA6Z,CAAAA,IAAAq2B,CAFKr2B,KAIL7Z,CAAAA,GAAAa,CAAAA,GAAA+C,IAAAA,CAAAyJ,GAAAzJ,CAAA,CAAAA,EAAAssC,CAAAA,GAAA,CAAAtsC,CAAA/C,GAAA+C,IAAAA,CAAAyJ,GAAAzJ,CAAA,CAAAA,EAAAksC,CAAAlsC,CAAA5D,EACA6Z,CAAAA,GAAA,CALKA,CAtBLuQ,CA+BA,EAAQ0lB,CAAAA,IAAA,CAAR,EAAmBv9B,CAAAA,CAAA5L,CAAAA,GAAAnH,CAAA+S,CAAAA,GAAA,MAAAvS,CAAAuS,EAAA/S,CAAAA,IAAAU,CAAAqS,EAAAvS,CAAAA,IAAA,GAAAuS,EAAAu9B,CAAAA,IAAA,CAAnB,CAAmB;;AAInB,WAFAj2B,CAAAA,GAAAA,CAAAA,IAAAi2B,CAAAj2B,GAAA7Z,CAAA6Z,EACAm2B,CAAAA,IAAAF,CACA,EAAQE,CAAAA,GAAA,CAAR,EAAkBz9B,CAAAA,CAAA5L,CAAAA,GAAAnH,CAAA+S,CAAAA,GAAA,MAAAsH,CAAAtH,EAAA/S,CAAAA,IAAAU,CAAAqS,EAAAsH,CAAAA,IAAA,GAAAtH,EAAAy9B,CAAAA,IAAA,CAAlB,CAAkB;;AAElBz9B,MAAAA,CAAAA,CAAA5L,CAAAA,GAAAnH,CAAAmH,GAAAzG,CAAAqS,CAAAA,IAAA,MAAA5Q,CAAA4Q;AAAA5Q,KAlFAxC;AAkFAwC,GxDAA,EwDAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AClFA,QAAA+Q,CAAAA,GAAA,GAAiBA,QAAjB;;AAEAtT,IAAAA,CAAAA,CAAAD,OAAAC,GAAA2E,KAAAA,CAAAqN,OAAArN,IAAA,UAAAipB,CAAA,EAAAA;AACA,aAAA,oBAAAta,CAAAA,CAAA3S,IAAA2S,CAAAsa,CAAAta,CAAA;AAAAsa,KADA5tB;AACA4tB,GzD+EA,EyD/EAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;ACAA5tB,IAAAA,CAAAA,CAAAD,OAAAC,GAAiBO,CAAAA,CAAQ,EAARA,CAAjBP;AAAyB,G1D+EzB,E0D/EyB,UAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA;AAAA;;ACFzB,QAAAkxC,CAAAA,GAAAnxC,CAAA;;AA2BA,aAAAoxC,CAAA,GAAAA;AACAD,MAAAA,CAAAA,CAAA5sB,MAAA4sB,CAAAttB,UAAAstB,CAAAA,CAAAA,CAAAxG,YAAAwG,GACAA,CAAAA,CAAA3xB,IAAA2xB,CAAAttB,UAAAstB,EADAA;AApBAA;;AAAAA,IAAAA,CAAAA,CAAAE,KAAAF,GAAA,SAAAA,EAGAA,CAAAA,CAAA1sB,MAAA0sB,GAAwB3wC,CAAAA,CAAQ,EAARA,CAHxB2wC,EAIAA,CAAAA,CAAA/H,YAAA+H,GAAwB3wC,CAAAA,CAAQ,EAARA,CAJxB2wC,EAKAA,CAAAA,CAAA5sB,MAAA4sB,GAAwB3wC,CAAAA,CAAQ,EAARA,CALxB2wC,EAMAA,CAAAA,CAAAxG,YAAAwG,GAAwB3wC,CAAAA,CAAQ,EAARA,CANxB2wC,EASAA,CAAAA,CAAA3xB,IAAA2xB,GAAwB3wC,CAAAA,CAAQ,CAARA,CATxB2wC,EAUAA,CAAAA,CAAAG,GAAAH,GAAwB3wC,CAAAA,CAAQ,EAARA,CAVxB2wC,EAWAA,CAAAA,CAAAvsB,KAAAusB,GAAwB3wC,CAAAA,CAAQ,EAARA,CAXxB2wC,EAYAA,CAAAA,CAAAC,SAAAD,GAAAC,CAZAD,EAyBAA,CAAAA,CAAA1sB,MAAA0sB,CAAAttB,UAAAstB,CAAAA,CAAAA,CAAA/H,YAAA+H,CAzBAA,EA0BAC,CAAAA,EA1BAD;AA0BAC,G3D+CA,E2D/CAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AClCAnxC,IAAAA,CAAAA,CAAAD,OAAAC,GAmBA,UAAAqpC,CAAA,EAAAiI,CAAA,EAAAA;AACA,UAAAj0B,CAAAA,GAAA,IAAA1Y,KAAA,CAAA3B,SAAAA,CAAAC,MAAAD,GAAA,CAAA,CAAA;AAAA,UACAuE,CAAAA,GAAA,CADA;AAAA,UAEAtC,CAAAA,GAAA,CAFA;AAAA,UAGAssC,CAAAA,GAAAA,CAAA,CAHA;;AAIA,aAAAtsC,CAAAA,GAAAjC,SAAAA,CAAAC,MAAA,GACAoa,CAAAA,CAAA9V,CAAAA,EAAA8V,CAAAA,GAAAra,SAAAA,CAAAiC,CAAAA,EAAAjC,CAAAqa;;AACA,aAAA,IAAAlD,OAAA,CAAA,UAAAC,CAAA,EAAAC,CAAA,EAAAA;AACAgD,QAAAA,CAAAA,CAAA9V,CAAA8V,CAAAA,GAAA,UAAAR,CAAA,EAAAA;AACA,cAAA00B,CAAA,EAEA,IADAA,CAAAA,GAAAA,CAAA,CAAAA,EACA10B,CAAA,EACAxC,CAAAA,CAAAwC,CAAAxC,CAAAA,CADA,KAEA;AAGA,iBAFA,IAAAgD,CAAAA,GAAA,IAAA1Y,KAAA,CAAA3B,SAAAA,CAAAC,MAAAD,GAAA,CAAA,CAAA,EACAuE,CAAAA,GAAA,CACA,EAAAA,CAAAA,GAAA8V,CAAAA,CAAApa,MAAA,GACAoa,CAAAA,CAAA9V,CAAAA,EAAA8V,CAAAA,GAAAra,SAAAA,CAAAuE,CAAAvE,CAAAqa;;AACAjD,YAAAA,CAAAA,CAAA6V,KAAA7V,CAAA,IAAAA,EAAAiD,CAAAjD;AAAAiD;AAAAA,SAVAA;;AAcA,YAAA;AACAgsB,UAAAA,CAAAA,CAAApZ,KAAAoZ,CAAAiI,CAAAA,IAAA,IAAAjI,EAAAhsB,CAAAgsB;AACS,SAFT,CAES,OAAAxsB,CAAA,EAAAA;AACT00B,UAAAA,CAAAA,KACAA,CAAAA,GAAAA,CAAA,CAAAA,EACAl3B,CAAAA,CAAAwC,CAAAxC,CAFAk3B,CAAAA;AAEA10B;AAAAA,OApBA,CAAA;AAoBAA,KA9CA7c;AA8CA6c,G5DmCA,E4DnCAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;ACxCA,QAAAsD,CAAAA,GAAApgB,CAAA;;AAOAogB,IAAAA,CAAAA,CAAAld,MAAAkd,GAAA,UAAAwF,CAAA,EAAAA;AACA,UAAArjB,CAAAA,GAAAqjB,CAAAA,CAAA1iB,MAAA;AACA,UAAA,CAAAX,CAAA,EACA,OAAA,CAAA;;AAEA,WADA,IAAAL,CAAAA,GAAA,CACA,EADA,EACAK,CADA,GACA,CADA,GACA,CADA,IACA,QAAAqjB,CAAAA,CAAA5C,MAAA4C,CAAArjB,CAAAqjB,CAAA,GAAArjB,EACAL,CADAK;;AAEA,aAAAkC,IAAAA,CAAAw3B,IAAAx3B,CAAA,IAAAmhB,CAAAA,CAAA1iB,MAAAuB,IAAA,CAAAA,GAAAvC,CAAA;AAAAA,KAPAke;;AAiBA,SANA,IAAAqvB,CAAAA,GAAA,IAAA7qC,KAAA,CAAA,EAAA,CAAA,EAGA6sC,CAAAA,GAAA,IAAA7sC,KAAA,CAAA,GAAA,CAHA,EAMAvE,CAAAA,GAAA,CAAA,EAAeA,CAAAA,GAAA,EAAf,GACAoxC,CAAAA,CAAAhC,CAAAA,CAAApvC,CAAAovC,CAAAA,GAAApvC,CAAAA,GAAA,EAAAA,GAAAA,CAAAA,GAAA,EAAAA,GAAAA,CAAAA,GAAA,EAAAA,GAAAA,CAAAA,GAAA,EAAAA,GAAAA,CAAAA,GAAA,EAAAA,GAAAA,CAAAA,GAAA,CAAAA,GAAAA,CAAAA,GAAA,EAAAA,GAAA,EAAAoxC,CAAAA,GAAApxC,CAAAA,EAAAoxC;;AASArxB,IAAAA,CAAAA,CAAAqF,MAAArF,GAAA,UAAAhN,CAAA,EAAA7I,CAAA,EAAAC,CAAA,EAAAA;AAMA,WALA,IAIA7I,CAJA,EAAA0uC,CAAAA,GAAA,IAAA,EACAqB,CAAAA,GAAA,EADA,EAEArxC,CAAAA,GAAA,CAFA,EAGAqG,CAAAA,GAAA,CAEA,EAAA6D,CAAAA,GAAAC,CAAA,GAAA;AACA,YAAAzG,CAAAA,GAAAqP,CAAAA,CAAA7I,CAAAA,EAAA6I,CAAA;;AACA,gBAAA1M,CAAA;AACA,eAAA,CAAA;AACAgrC,YAAAA,CAAAA,CAAArxC,CAAAA,EAAAqxC,CAAAA,GAAAjC,CAAAA,CAAA1rC,CAAAA,IAAA,CAAA0rC,CAAAiC,EACA/vC,CAAAA,GAAAA,CAAA,IAAAoC,CAAApC,KAAA,CADA+vC,EAEAhrC,CAAAA,GAAA,CAFAgrC;AAGA;;AACA,eAAA,CAAA;AACAA,YAAAA,CAAAA,CAAArxC,CAAAA,EAAAqxC,CAAAA,GAAAjC,CAAAA,CAAA9tC,CAAAA,GAAAoC,CAAAA,IAAA,CAAA0rC,CAAAiC,EACA/vC,CAAAA,GAAAA,CAAA,KAAAoC,CAAApC,KAAA,CADA+vC,EAEAhrC,CAAAA,GAAA,CAFAgrC;AAGA;;AACA,eAAA,CAAA;AACAA,YAAAA,CAAAA,CAAArxC,CAAAA,EAAAqxC,CAAAA,GAAAjC,CAAAA,CAAA9tC,CAAAA,GAAAoC,CAAAA,IAAA,CAAA0rC,CAAAiC,EACAA,CAAAA,CAAArxC,CAAAA,EAAAqxC,CAAAA,GAAAjC,CAAAA,CAAA,KAAA1rC,CAAA0rC,CADAiC,EAEAhrC,CAAAA,GAAA,CAFAgrC;AAZA;;AAiBArxC,QAAAA,CAAAA,GAAA,IAAAA,KAAA,CACAgwC,CAAAA,KAAAA,CAAAA,GAAA,EAAAA,CADA,EACAziC,IADA,CACAyT,MAAAA,CAAA4O,YAAA5O,CAAA6O,KAAA7O,CAAAA,MAAAA,EAAAqwB,CAAArwB,CADA,GAEAhhB,CAAAA,GAAA,CAFAA;AAWA;;AAAA,aANAqG,CAAAA,KACAgrC,CAAAA,CAAArxC,CAAAA,EAAAqxC,CAAAA,GAAAjC,CAAAA,CAAA9tC,CAAA8tC,CAAAiC,EACAA,CAAAA,CAAArxC,CAAAA,EAAAqxC,CAAAA,GAAA,EADAA,EAEA,MAAAhrC,CAAA,KACAgrC,CAAAA,CAAArxC,CAAAA,EAAAqxC,CAAAA,GAAA,EADA,CAHAhrC,CAAAA,EAMA2pC,CAAAA,IACAhwC,CAAAA,IACAgwC,CAAAA,CAAAziC,IAAAyiC,CAAAhvB,MAAAA,CAAA4O,YAAA5O,CAAA6O,KAAA7O,CAAAA,MAAAA,EAAAqwB,CAAAA,CAAA7mC,KAAA6mC,CAAA,CAAAA,EAAArxC,CAAAqxC,CAAArwB,CAAAgvB,CADAhwC,EAEAgwC,CAAAA,CAAArkB,IAAAqkB,CAAA,EAAAA,CAHAA,IAKAhvB,MAAAA,CAAA4O,YAAA5O,CAAA6O,KAAA7O,CAAAA,MAAAA,EAAAqwB,CAAAA,CAAA7mC,KAAA6mC,CAAA,CAAAA,EAAArxC,CAAAqxC,CAAArwB,CALA;AAKAhhB,KAzCA+f;;AAsDAA,IAAAA,CAAAA,CAAA+F,MAAA/F,GAAA,UAAAwF,CAAA,EAAAxS,CAAA,EAAA5L,CAAA,EAAAA;AAIA,WAHA,IAEA7F,CAFA,EAAA4I,CAAAA,GAAA/C,CAAA,EACAd,CAAAA,GAAA,CADA,EAGArG,CAAAA,GAAA,CAAA,EAAmBA,CAAAA,GAAAulB,CAAAA,CAAA1iB,MAAnB,GAAsC;AACtC,YAAApC,CAAAA,GAAA8kB,CAAAA,CAAAiJ,UAAAjJ,CAAAvlB,CAAAA,EAAAulB,CAAA;AACA,YAAA,OAAA9kB,CAAA,IAAA4F,CAAAA,GAAA,CAAA,EACA;AACA,YAAA,KAAA1C,CAAA,MAAAlD,CAAAA,GAAA2wC,CAAAA,CAAA3wC,CAAA2wC,CAAA,CAAA,EACA,MAAAlqC,KAAAA,CAnBA,kBAmBAA,CAAA;;AACA,gBAAAb,CAAA;AACA,eAAA,CAAA;AACA/E,YAAAA,CAAAA,GAAAb,CAAAa,EACA+E,CAAAA,GAAA,CADA/E;AAEA;;AACA,eAAA,CAAA;AACAyR,YAAAA,CAAAA,CAAA5L,CAAAA,EAAA4L,CAAAA,GAAAzR,CAAAA,IAAA,CAAAA,GAAA,CAAA,KAAAb,CAAA,KAAA,CAAAsS,EACAzR,CAAAA,GAAAb,CADAsS,EAEA1M,CAAAA,GAAA,CAFA0M;AAGA;;AACA,eAAA,CAAA;AACAA,YAAAA,CAAAA,CAAA5L,CAAAA,EAAA4L,CAAAA,GAAA5L,CAAA,KAAA7F,CAAA6F,KAAA,CAAAA,GAAA,CAAA,KAAA1G,CAAA,KAAA,CAAAsS,EACAzR,CAAAA,GAAAb,CADAsS,EAEA1M,CAAAA,GAAA,CAFA0M;AAGA;;AACA,eAAA,CAAA;AACAA,YAAAA,CAAAA,CAAA5L,CAAAA,EAAA4L,CAAAA,GAAA5L,CAAA,IAAA7F,CAAA6F,KAAA,CAAAA,GAAA1G,CAAAsS,EACA1M,CAAAA,GAAA,CADA0M;AAhBA;AAqBA;;AAAA,UAAA,MAAA1M,CAAA,EACA,MAAAa,KAAAA,CA1CA,kBA0CAA,CAAA;AACA,aAAAC,CAAAA,GAAA+C,CAAA;AAAAA,KAjCA6V,EAyCAA,CAAAA,CAAAuxB,IAAAvxB,GAAA,UAAAwF,CAAA,EAAAA;AACA,aAAA,sEAAwE+rB,IAAxE,CAAwE/rB,CAAxE,CAAA;AAAwEA,KA1CxExF;AA0CwEwF,G7DvDxE,E6DuDwEA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AChIxE,aAAAvF,CAAA,GAAAA;AAOAvO,WAAA8/B,UAAA9/B,GAAA,EAAAA;AAfA7R;;AAAAA,IAAAA,CAAAA,CAAAD,OAAAC,GAAAogB,CAAApgB,EAyBAogB,CAAAA,CAAAhe,SAAAge,CAAAsiB,EAAAtiB,GAAA,UAAAwxB,CAAA,EAAAvI,CAAA,EAAAiI,CAAA,EAAAA;AAKA,aAAA,CAJAz/B,KAAA8/B,UAAA9/B,CAAA+/B,CAAA//B,MAAAA,KAAA8/B,UAAA9/B,CAAA+/B,CAAA//B,IAAA,EAAAA,CAIA,EAJAlE,IAIA,CAJA;AACA07B,QAAAA,EAAAA,EAAAA,CADA;AAEAiI,QAAAA,GAAAA,EAAAA,CAAAA,IAAAz/B;AAFA,OAIA,GAAAA,IAAA;AAAAA,KA9BA7R,EAuCAogB,CAAAA,CAAAhe,SAAAge,CAAAyiB,GAAAziB,GAAA,UAAAwxB,CAAA,EAAAvI,CAAA,EAAAA;AACA,UAAA,KAAAtlC,CAAA,KAAA6tC,CAAA,EACA//B,KAAA8/B,UAAA9/B,GAAA,EAAAA,CADA,KAGA,IAAA,KAAA9N,CAAA,KAAAslC,CAAA,EACAx3B,KAAA8/B,UAAA9/B,CAAA+/B,CAAA//B,IAAA,EAAAA,CADA,KAIA,KADA,IAAAsxB,CAAAA,GAAAtxB,KAAA8/B,UAAA9/B,CAAA+/B,CAAA//B,CAAA,EACAzR,CAAAA,GAAA,CAAA,EAA2BA,CAAAA,GAAA+iC,CAAAA,CAAAlgC,MAA3B,GACAkgC,CAAAA,CAAA/iC,CAAA+iC,CAAAA,CAAAkG,EAAAlG,KAAAkG,CAAAlG,GACAA,CAAAA,CAAAx/B,MAAAw/B,CAAA/iC,CAAA+iC,EAAA,CAAAA,CADAA,GACA,EAEA/iC,CAHA+iC;AAMA,aAAAtxB,IAAA;AAAAA,KAtDA7R,EA+DAogB,CAAAA,CAAAhe,SAAAge,CAAA4iB,IAAA5iB,GAAA,UAAAwxB,CAAA,EAAAA;AACA,UAAAzO,CAAAA,GAAAtxB,KAAA8/B,UAAA9/B,CAAA+/B,CAAA//B,CAAA;;AACA,UAAAsxB,CAAA,EAAA;AAGA,aAFA,IAAAd,CAAAA,GAAA,EAAA,EACAjiC,CAAAA,GAAA,CACA,EAAcA,CAAAA,GAAA4C,SAAAA,CAAAC,MAAd,GACAo/B,CAAAA,CAAA10B,IAAA00B,CAAAr/B,SAAAA,CAAA5C,CAAAA,EAAA4C,CAAAq/B;;AACA,aAAAjiC,CAAAA,GAAA,CAAA,EAAmBA,CAAAA,GAAA+iC,CAAAA,CAAAlgC,MAAnB,GACAkgC,CAAAA,CAAA/iC,CAAA+iC,CAAAA,CAAAkG,EAAAlG,CAAAlT,KAAAkT,CAAAA,CAAAA,CAAA/iC,CAAAA,EAAA+iC,CAAAA,CAAAmO,GAAAnO,EAAAd,CAAAc;AAEA;;AAAA,aAAAtxB,IAAA;AAAAA,KAzEA7R;AAyEA6R,G9DQA,E8DRAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;ACaA,aAAA/R,CAAA,CAAAC,CAAA,EAAAA;AAwNA,aArNA,eAAA,OAAA8U,YAAA,GAAA,YAAA;AAEA,YAAAg9B,CAAAA,GAAA,IAAAh9B,YAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AAAA,YACAi9B,CAAAA,GAAA,IAAAv9B,UAAA,CAAAs9B,CAAAA,CAAA1+B,MAAA,CADA;AAAA,YAEAwmB,CAAAA,GAAA,QAAAmY,CAAAA,CAAA,CAAAA,CAFA;;AAIA,iBAAAC,CAAA,CAAA9kB,CAAA,EAAA9a,CAAA,EAAArC,CAAA,EAAAA;AACA+hC,UAAAA,CAAAA,CAAA,CAAAA,CAAAA,GAAA5kB,CAAA4kB,EACA1/B,CAAAA,CAAArC,CAAAqC,CAAAA,GAAA2/B,CAAAA,CAAA,CAAAA,CADAD,EAEA1/B,CAAAA,CAAArC,CAAAA,GAAA,CAAAqC,CAAAA,GAAA2/B,CAAAA,CAAA,CAAAA,CAFAD,EAGA1/B,CAAAA,CAAArC,CAAAA,GAAA,CAAAqC,CAAAA,GAAA2/B,CAAAA,CAAA,CAAAA,CAHAD,EAIA1/B,CAAAA,CAAArC,CAAAA,GAAA,CAAAqC,CAAAA,GAAA2/B,CAAAA,CAAA,CAAAA,CAJAD;AAOA;;AAAA,iBAAAG,CAAA,CAAA/kB,CAAA,EAAA9a,CAAA,EAAArC,CAAA,EAAAA;AACA+hC,UAAAA,CAAAA,CAAA,CAAAA,CAAAA,GAAA5kB,CAAA4kB,EACA1/B,CAAAA,CAAArC,CAAAqC,CAAAA,GAAA2/B,CAAAA,CAAA,CAAAA,CADAD,EAEA1/B,CAAAA,CAAArC,CAAAA,GAAA,CAAAqC,CAAAA,GAAA2/B,CAAAA,CAAA,CAAAA,CAFAD,EAGA1/B,CAAAA,CAAArC,CAAAA,GAAA,CAAAqC,CAAAA,GAAA2/B,CAAAA,CAAA,CAAAA,CAHAD,EAIA1/B,CAAAA,CAAArC,CAAAA,GAAA,CAAAqC,CAAAA,GAAA2/B,CAAAA,CAAA,CAAAA,CAJAD;AAYA;;AAAA,iBAAAI,CAAA,CAAA9/B,CAAA,EAAArC,CAAA,EAAAA;AAKA,iBAJAgiC,CAAAA,CAAA,CAAAA,CAAAA,GAAA3/B,CAAAA,CAAArC,CAAAqC,CAAA2/B,EACAA,CAAAA,CAAA,CAAAA,CAAAA,GAAA3/B,CAAAA,CAAArC,CAAAA,GAAA,CAAAqC,CADA2/B,EAEAA,CAAAA,CAAA,CAAAA,CAAAA,GAAA3/B,CAAAA,CAAArC,CAAAA,GAAA,CAAAqC,CAFA2/B,EAGAA,CAAAA,CAAA,CAAAA,CAAAA,GAAA3/B,CAAAA,CAAArC,CAAAA,GAAA,CAAAqC,CAHA2/B,EAIAD,CAAAA,CAAA,CAAAA,CAAA;AAGA;;AAAA,iBAAAK,CAAA,CAAA//B,CAAA,EAAArC,CAAA,EAAAA;AAKA,iBAJAgiC,CAAAA,CAAA,CAAAA,CAAAA,GAAA3/B,CAAAA,CAAArC,CAAAqC,CAAA2/B,EACAA,CAAAA,CAAA,CAAAA,CAAAA,GAAA3/B,CAAAA,CAAArC,CAAAA,GAAA,CAAAqC,CADA2/B,EAEAA,CAAAA,CAAA,CAAAA,CAAAA,GAAA3/B,CAAAA,CAAArC,CAAAA,GAAA,CAAAqC,CAFA2/B,EAGAA,CAAAA,CAAA,CAAAA,CAAAA,GAAA3/B,CAAAA,CAAArC,CAAAA,GAAA,CAAAqC,CAHA2/B,EAIAD,CAAAA,CAAA,CAAAA,CAAA;AAjBA9xC;;AAAAA,QAAAA,CAAAA,CAAAm1B,YAAAn1B,GAAA45B,CAAAA,GAAAoY,CAAApY,GAAAqY,CAAAjyC,EAEAA,CAAAA,CAAAo1B,YAAAp1B,GAAA45B,CAAAA,GAAAqY,CAAArY,GAAAoY,CAFAhyC,EAqBAA,CAAAA,CAAA+zB,WAAA/zB,GAAA45B,CAAAA,GAAAsY,CAAAtY,GAAAuY,CArBAnyC,EAuBAA,CAAAA,CAAAg0B,WAAAh0B,GAAA45B,CAAAA,GAAAuY,CAAAvY,GAAAsY,CAvBAlyC;AAvBA,OAAA,EAAA,GAiDS,YAAA;AAET,iBAAAoyC,CAAA,CAAAC,CAAA,EAAAnlB,CAAA,EAAA9a,CAAA,EAAArC,CAAA,EAAAA;AACA,cAAAu4B,CAAAA,GAAApb,CAAAA,GAAA,CAAAA,GAAA,CAAAA,GAAA,CAAA;AAGA,cAFAob,CAAAA,KACApb,CAAAA,GAAAA,CAAAA,CADAob,CAAAA,EAEA,MAAApb,CAAA,EACAmlB,CAAAA,CAAA,IAAAnlB,CAAA,GAAA,CAAA,GAAA,CAAA,GAAA,UAAAmlB,EAAAjgC,CAAAigC,EAAAtiC,CAAAsiC,CAAAA,CADA,KAEA,IAAApnB,KAAAA,CAAAiC,CAAAjC,CAAA,EACAonB,CAAAA,CAAA,UAAAA,EAAAjgC,CAAAigC,EAAAtiC,CAAAsiC,CAAAA,CADA,KAEA,IAAAnlB,CAAAA,GAAA,qBAAA,EACAmlB,CAAAA,CAAAA,CAAA/J,CAAAA,IAAA,EAAAA,GAAA,UAAA+J,MAAA,CAAAA,EAAAjgC,CAAAigC,EAAAtiC,CAAAsiC,CAAAA,CADA,KAEA,IAAAnlB,CAAAA,GAAA,sBAAA,EACAmlB,CAAAA,CAAAA,CAAA/J,CAAAA,IAAA,EAAAA,GAAA7jC,IAAAA,CAAA6tC,KAAA7tC,CAAAyoB,CAAAA,GAAA,qBAAAzoB,CAAA4tC,MAAA,CAAAA,EAAAjgC,CAAAigC,EAAAtiC,CAAAsiC,CAAAA,CADA,KAEA;AACA,gBAAAE,CAAAA,GAAA9tC,IAAAA,CAAAkC,KAAAlC,CAAAA,IAAAA,CAAAmS,GAAAnS,CAAAyoB,CAAAzoB,IAAAA,IAAAA,CAAAy3B,GAAAz3B,CAAA;AAEA4tC,YAAAA,CAAAA,CAAAA,CAAA/J,CAAAA,IAAA,EAAAA,GAAAiK,CAAAA,GAAA,GAAAA,IAAA,EAAAjK,GADA,UAAA7jC,IAAAA,CAAA6tC,KAAA7tC,CAAAyoB,CAAAA,GAAAzoB,IAAAA,CAAAyJ,GAAAzJ,CAAA,CAAAA,EAAA,CAAA8tC,CAAA9tC,CAAAyoB,GAAA,OAAAzoB,CACA4tC,MAAA,CAAAA,EAAAjgC,CAAAigC,EAAAtiC,CAAAsiC,CAAAA;AAAAtiC;AAOA;;AAAA,iBAAAyiC,CAAA,CAAAC,CAAA,EAAArgC,CAAA,EAAArC,CAAA,EAAAA;AACA,cAAA2iC,CAAAA,GAAAD,CAAAA,CAAArgC,CAAAqgC,EAAA1iC,CAAA0iC,CAAA;AAAA,cACAnK,CAAAA,GAAA,KAAAoK,CAAAA,IAAA,EAAA,IAAA,CADA;AAAA,cAEAH,CAAAA,GAAAG,CAAAA,KAAA,EAAAA,GAAA,GAFA;AAAA,cAGAC,CAAAA,GAAA,UAAAD,CAHA;AAIA,iBAAA,QAAAH,CAAA,GACAI,CAAAA,GACA1B,GADA0B,GAEArK,CAAAA,IAAA5S,IAAAA,CAAA4S,CAHA,GAIA,MAAAiK,CAAA,GACA,wBAAAjK,CAAA,GAAAqK,CADA,GAEArK,CAAAA,GAAA7jC,IAAAA,CAAAyJ,GAAAzJ,CAAA,CAAAA,EAAA8tC,CAAAA,GAAA,GAAA9tC,CAAA6jC,IAAAqK,CAAAA,GAAA,OAAArK,CANA;AARAtoC;;AAAAA,QAAAA,CAAAA,CAAAm1B,YAAAn1B,GAAAoyC,CAAAA,CAAAnwC,IAAAmwC,CAAA,IAAAA,EAAAQ,CAAAR,CAAApyC,EACAA,CAAAA,CAAAo1B,YAAAp1B,GAAAoyC,CAAAA,CAAAnwC,IAAAmwC,CAAA,IAAAA,EAAAS,CAAAT,CADApyC,EAiBAA,CAAAA,CAAA+zB,WAAA/zB,GAAAwyC,CAAAA,CAAAvwC,IAAAuwC,CAAA,IAAAA,EAAAM,CAAAN,CAjBAxyC,EAkBAA,CAAAA,CAAAg0B,WAAAh0B,GAAAwyC,CAAAA,CAAAvwC,IAAAuwC,CAAA,IAAAA,EAAAO,CAAAP,CAlBAxyC;AArBS,OAAA,EAjDT,EA6FA,eAAA,OAAA+U,YAAA,GAAA,YAAA;AAEA,YAAAi+B,CAAAA,GAAA,IAAAj+B,YAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AAAA,YACAg9B,CAAAA,GAAA,IAAAv9B,UAAA,CAAAw+B,CAAAA,CAAA5/B,MAAA,CADA;AAAA,YAEAwmB,CAAAA,GAAA,QAAAmY,CAAAA,CAAA,CAAAA,CAFA;;AAIA,iBAAAkB,CAAA,CAAA/lB,CAAA,EAAA9a,CAAA,EAAArC,CAAA,EAAAA;AACAijC,UAAAA,CAAAA,CAAA,CAAAA,CAAAA,GAAA9lB,CAAA8lB,EACA5gC,CAAAA,CAAArC,CAAAqC,CAAAA,GAAA2/B,CAAAA,CAAA,CAAAA,CADAiB,EAEA5gC,CAAAA,CAAArC,CAAAA,GAAA,CAAAqC,CAAAA,GAAA2/B,CAAAA,CAAA,CAAAA,CAFAiB,EAGA5gC,CAAAA,CAAArC,CAAAA,GAAA,CAAAqC,CAAAA,GAAA2/B,CAAAA,CAAA,CAAAA,CAHAiB,EAIA5gC,CAAAA,CAAArC,CAAAA,GAAA,CAAAqC,CAAAA,GAAA2/B,CAAAA,CAAA,CAAAA,CAJAiB,EAKA5gC,CAAAA,CAAArC,CAAAA,GAAA,CAAAqC,CAAAA,GAAA2/B,CAAAA,CAAA,CAAAA,CALAiB,EAMA5gC,CAAAA,CAAArC,CAAAA,GAAA,CAAAqC,CAAAA,GAAA2/B,CAAAA,CAAA,CAAAA,CANAiB,EAOA5gC,CAAAA,CAAArC,CAAAA,GAAA,CAAAqC,CAAAA,GAAA2/B,CAAAA,CAAA,CAAAA,CAPAiB,EAQA5gC,CAAAA,CAAArC,CAAAA,GAAA,CAAAqC,CAAAA,GAAA2/B,CAAAA,CAAA,CAAAA,CARAiB;AAWA;;AAAA,iBAAAE,CAAA,CAAAhmB,CAAA,EAAA9a,CAAA,EAAArC,CAAA,EAAAA;AACAijC,UAAAA,CAAAA,CAAA,CAAAA,CAAAA,GAAA9lB,CAAA8lB,EACA5gC,CAAAA,CAAArC,CAAAqC,CAAAA,GAAA2/B,CAAAA,CAAA,CAAAA,CADAiB,EAEA5gC,CAAAA,CAAArC,CAAAA,GAAA,CAAAqC,CAAAA,GAAA2/B,CAAAA,CAAA,CAAAA,CAFAiB,EAGA5gC,CAAAA,CAAArC,CAAAA,GAAA,CAAAqC,CAAAA,GAAA2/B,CAAAA,CAAA,CAAAA,CAHAiB,EAIA5gC,CAAAA,CAAArC,CAAAA,GAAA,CAAAqC,CAAAA,GAAA2/B,CAAAA,CAAA,CAAAA,CAJAiB,EAKA5gC,CAAAA,CAAArC,CAAAA,GAAA,CAAAqC,CAAAA,GAAA2/B,CAAAA,CAAA,CAAAA,CALAiB,EAMA5gC,CAAAA,CAAArC,CAAAA,GAAA,CAAAqC,CAAAA,GAAA2/B,CAAAA,CAAA,CAAAA,CANAiB,EAOA5gC,CAAAA,CAAArC,CAAAA,GAAA,CAAAqC,CAAAA,GAAA2/B,CAAAA,CAAA,CAAAA,CAPAiB,EAQA5gC,CAAAA,CAAArC,CAAAA,GAAA,CAAAqC,CAAAA,GAAA2/B,CAAAA,CAAA,CAAAA,CARAiB;AAgBA;;AAAA,iBAAAG,CAAA,CAAA/gC,CAAA,EAAArC,CAAA,EAAAA;AASA,iBARAgiC,CAAAA,CAAA,CAAAA,CAAAA,GAAA3/B,CAAAA,CAAArC,CAAAqC,CAAA2/B,EACAA,CAAAA,CAAA,CAAAA,CAAAA,GAAA3/B,CAAAA,CAAArC,CAAAA,GAAA,CAAAqC,CADA2/B,EAEAA,CAAAA,CAAA,CAAAA,CAAAA,GAAA3/B,CAAAA,CAAArC,CAAAA,GAAA,CAAAqC,CAFA2/B,EAGAA,CAAAA,CAAA,CAAAA,CAAAA,GAAA3/B,CAAAA,CAAArC,CAAAA,GAAA,CAAAqC,CAHA2/B,EAIAA,CAAAA,CAAA,CAAAA,CAAAA,GAAA3/B,CAAAA,CAAArC,CAAAA,GAAA,CAAAqC,CAJA2/B,EAKAA,CAAAA,CAAA,CAAAA,CAAAA,GAAA3/B,CAAAA,CAAArC,CAAAA,GAAA,CAAAqC,CALA2/B,EAMAA,CAAAA,CAAA,CAAAA,CAAAA,GAAA3/B,CAAAA,CAAArC,CAAAA,GAAA,CAAAqC,CANA2/B,EAOAA,CAAAA,CAAA,CAAAA,CAAAA,GAAA3/B,CAAAA,CAAArC,CAAAA,GAAA,CAAAqC,CAPA2/B,EAQAiB,CAAAA,CAAA,CAAAA,CAAA;AAGA;;AAAA,iBAAAI,CAAA,CAAAhhC,CAAA,EAAArC,CAAA,EAAAA;AASA,iBARAgiC,CAAAA,CAAA,CAAAA,CAAAA,GAAA3/B,CAAAA,CAAArC,CAAAqC,CAAA2/B,EACAA,CAAAA,CAAA,CAAAA,CAAAA,GAAA3/B,CAAAA,CAAArC,CAAAA,GAAA,CAAAqC,CADA2/B,EAEAA,CAAAA,CAAA,CAAAA,CAAAA,GAAA3/B,CAAAA,CAAArC,CAAAA,GAAA,CAAAqC,CAFA2/B,EAGAA,CAAAA,CAAA,CAAAA,CAAAA,GAAA3/B,CAAAA,CAAArC,CAAAA,GAAA,CAAAqC,CAHA2/B,EAIAA,CAAAA,CAAA,CAAAA,CAAAA,GAAA3/B,CAAAA,CAAArC,CAAAA,GAAA,CAAAqC,CAJA2/B,EAKAA,CAAAA,CAAA,CAAAA,CAAAA,GAAA3/B,CAAAA,CAAArC,CAAAA,GAAA,CAAAqC,CALA2/B,EAMAA,CAAAA,CAAA,CAAAA,CAAAA,GAAA3/B,CAAAA,CAAArC,CAAAA,GAAA,CAAAqC,CANA2/B,EAOAA,CAAAA,CAAA,CAAAA,CAAAA,GAAA3/B,CAAAA,CAAArC,CAAAA,GAAA,CAAAqC,CAPA2/B,EAQAiB,CAAAA,CAAA,CAAAA,CAAA;AAzBAhzC;;AAAAA,QAAAA,CAAAA,CAAAq1B,aAAAr1B,GAAA45B,CAAAA,GAAAqZ,CAAArZ,GAAAsZ,CAAAlzC,EAEAA,CAAAA,CAAAs1B,aAAAt1B,GAAA45B,CAAAA,GAAAsZ,CAAAtZ,GAAAqZ,CAFAjzC,EA6BAA,CAAAA,CAAAi0B,YAAAj0B,GAAA45B,CAAAA,GAAAuZ,CAAAvZ,GAAAwZ,CA7BApzC,EA+BAA,CAAAA,CAAAk0B,YAAAl0B,GAAA45B,CAAAA,GAAAwZ,CAAAxZ,GAAAuZ,CA/BAnzC;AA/BA,OAAA,EAAA,GAiES,YAAA;AAET,iBAAAqzC,CAAA,CAAAhB,CAAA,EAAAiB,CAAA,EAAAC,CAAA,EAAArmB,CAAA,EAAA9a,CAAA,EAAArC,CAAA,EAAAA;AACA,cAAAu4B,CAAAA,GAAApb,CAAAA,GAAA,CAAAA,GAAA,CAAAA,GAAA,CAAA;AAGA,cAFAob,CAAAA,KACApb,CAAAA,GAAAA,CAAAA,CADAob,CAAAA,EAEA,MAAApb,CAAA,EACAmlB,CAAAA,CAAA,CAAAA,EAAAjgC,CAAAigC,EAAAtiC,CAAAA,GAAAujC,CAAAjB,CAAAA,EACAA,CAAAA,CAAA,IAAAnlB,CAAA,GAAA,CAAA,GAAA,CAAA,GAAA,UAAAmlB,EAAAjgC,CAAAigC,EAAAtiC,CAAAA,GAAAwjC,CAAAlB,CADAA,CADA,KAGa,IAAApnB,KAAAA,CAAAiC,CAAAjC,CAAA,EACbonB,CAAAA,CAAA,CAAAA,EAAAjgC,CAAAigC,EAAAtiC,CAAAA,GAAAujC,CAAAjB,CAAAA,EACAA,CAAAA,CAAA,UAAAA,EAAAjgC,CAAAigC,EAAAtiC,CAAAA,GAAAwjC,CAAAlB,CADAA,CADa,KAGA,IAAAnlB,CAAAA,GAAA,sBAAA,EACbmlB,CAAAA,CAAA,CAAAA,EAAAjgC,CAAAigC,EAAAtiC,CAAAA,GAAAujC,CAAAjB,CAAAA,EACAA,CAAAA,CAAAA,CAAA/J,CAAAA,IAAA,EAAAA,GAAA,UAAA+J,MAAA,CAAAA,EAAAjgC,CAAAigC,EAAAtiC,CAAAA,GAAAwjC,CAAAlB,CADAA,CADa,KAGA;AACb,gBAAAM,CAAA;AACA,gBAAAzlB,CAAAA,GAAA,uBAAA,EAEAmlB,CAAAA,CAAAA,CADAM,CAAAA,GAAAzlB,CAAAA,GAAA,MACAmlB,MAAA,CAAAA,EAAAjgC,CAAAigC,EAAAtiC,CAAAA,GAAAujC,CAAAjB,CAAAA,EACAA,CAAAA,CAAAA,CAAA/J,CAAAA,IAAA,EAAAA,GAAAqK,CAAAA,GAAA,UAAAN,MAAA,CAAAA,EAAAjgC,CAAAigC,EAAAtiC,CAAAA,GAAAwjC,CAAAlB,CADAA,CAFA,KAIiB;AACjB,kBAAAE,CAAAA,GAAA9tC,IAAAA,CAAAkC,KAAAlC,CAAAA,IAAAA,CAAAmS,GAAAnS,CAAAyoB,CAAAzoB,IAAAA,IAAAA,CAAAy3B,GAAAz3B,CAAA;AACA,uBAAA8tC,CAAA,KACAA,CAAAA,GAAA,IADA,GAGAF,CAAAA,CAAA,oBADAM,CAAAA,GAAAzlB,CAAAA,GAAAzoB,IAAAA,CAAAyJ,GAAAzJ,CAAA,CAAAA,EAAA,CAAA8tC,CAAA9tC,CACA,MAAA,CAAA4tC,EAAAjgC,CAAAigC,EAAAtiC,CAAAA,GAAAujC,CAAAjB,CAHA,EAIAA,CAAAA,CAAAA,CAAA/J,CAAAA,IAAA,EAAAA,GAAAiK,CAAAA,GAAA,IAAAA,IAAA,EAAAjK,GAAA,UAAAqK,CAAA,GAAA,OAAAN,MAAA,CAAAA,EAAAjgC,CAAAigC,EAAAtiC,CAAAA,GAAAwjC,CAAAlB,CAJA;AAIAkB;AAAAA;AAQA;;AAAA,iBAAAC,CAAA,CAAAf,CAAA,EAAAa,CAAA,EAAAC,CAAA,EAAAnhC,CAAA,EAAArC,CAAA,EAAAA;AACA,cAAA8S,CAAAA,GAAA4vB,CAAAA,CAAArgC,CAAAqgC,EAAA1iC,CAAAA,GAAAujC,CAAAb,CAAA;AAAA,cACA3vB,CAAAA,GAAA2vB,CAAAA,CAAArgC,CAAAqgC,EAAA1iC,CAAAA,GAAAwjC,CAAAd,CADA;AAAA,cAEAnK,CAAAA,GAAA,KAAAxlB,CAAAA,IAAA,EAAA,IAAA,CAFA;AAAA,cAGAyvB,CAAAA,GAAAzvB,CAAAA,KAAA,EAAAA,GAAA,IAHA;AAAA,cAIA6vB,CAAAA,GAAA,cAAA,UAAA7vB,CAAA,IAAAD,CAJA;AAKA,iBAAA,SAAA0vB,CAAA,GACAI,CAAAA,GACA1B,GADA0B,GAEArK,CAAAA,IAAA5S,IAAAA,CAAA4S,CAHA,GAIA,MAAAiK,CAAA,GACA,SAAAjK,CAAA,GAAAqK,CADA,GAEArK,CAAAA,GAAA7jC,IAAAA,CAAAyJ,GAAAzJ,CAAA,CAAAA,EAAA8tC,CAAAA,GAAA,IAAA9tC,CAAA6jC,IAAAqK,CAAAA,GAAA,gBAAArK,CANA;AATAtoC;;AAAAA,QAAAA,CAAAA,CAAAq1B,aAAAr1B,GAAAqzC,CAAAA,CAAApxC,IAAAoxC,CAAA,IAAAA,EAAAT,CAAAS,EAAA,CAAAA,EAAA,CAAAA,CAAArzC,EACAA,CAAAA,CAAAs1B,aAAAt1B,GAAAqzC,CAAAA,CAAApxC,IAAAoxC,CAAA,IAAAA,EAAAR,CAAAQ,EAAA,CAAAA,EAAA,CAAAA,CADArzC,EAkBAA,CAAAA,CAAAi0B,YAAAj0B,GAAAwzC,CAAAA,CAAAvxC,IAAAuxC,CAAA,IAAAA,EAAAV,CAAAU,EAAA,CAAAA,EAAA,CAAAA,CAlBAxzC,EAmBAA,CAAAA,CAAAk0B,YAAAl0B,GAAAwzC,CAAAA,CAAAvxC,IAAAuxC,CAAA,IAAAA,EAAAT,CAAAS,EAAA,CAAAA,EAAA,CAAAA,CAnBAxzC;AAhCS,OAAA,EA9JT,EAqNAA,CAAA;AAKA;;AAAA,aAAA4yC,CAAA,CAAA1lB,CAAA,EAAA9a,CAAA,EAAArC,CAAA,EAAAA;AACAqC,MAAAA,CAAAA,CAAArC,CAAAqC,CAAAA,GAAA,MAAA8a,CAAA9a,EACAA,CAAAA,CAAArC,CAAAA,GAAA,CAAAqC,CAAAA,GAAA8a,CAAAA,KAAA,CAAAA,GAAA,GADA9a,EAEAA,CAAAA,CAAArC,CAAAA,GAAA,CAAAqC,CAAAA,GAAA8a,CAAAA,KAAA,EAAAA,GAAA,GAFA9a,EAGAA,CAAAA,CAAArC,CAAAA,GAAA,CAAAqC,CAAAA,GAAA8a,CAAAA,KAAA,EAHA9a;AAMA;;AAAA,aAAAygC,CAAA,CAAA3lB,CAAA,EAAA9a,CAAA,EAAArC,CAAA,EAAAA;AACAqC,MAAAA,CAAAA,CAAArC,CAAAqC,CAAAA,GAAA8a,CAAAA,KAAA,EAAA9a,EACAA,CAAAA,CAAArC,CAAAA,GAAA,CAAAqC,CAAAA,GAAA8a,CAAAA,KAAA,EAAAA,GAAA,GADA9a,EAEAA,CAAAA,CAAArC,CAAAA,GAAA,CAAAqC,CAAAA,GAAA8a,CAAAA,KAAA,CAAAA,GAAA,GAFA9a,EAGAA,CAAAA,CAAArC,CAAAA,GAAA,CAAAqC,CAAAA,GAAA,MAAA8a,CAHA9a;AAMA;;AAAA,aAAA0gC,CAAA,CAAA1gC,CAAA,EAAArC,CAAA,EAAAA;AACA,aAAA,CAAAqC,CAAAA,CAAArC,CAAAqC,CAAAA,GACAA,CAAAA,CAAArC,CAAAA,GAAA,CAAAqC,CAAAA,IAAA,CADAA,GAEAA,CAAAA,CAAArC,CAAAA,GAAA,CAAAqC,CAAAA,IAAA,EAFAA,GAGAA,CAAAA,CAAArC,CAAAA,GAAA,CAAAqC,CAAAA,IAAA,EAHA,MAGA,CAHA;AAMA;;AAAA,aAAA2gC,CAAA,CAAA3gC,CAAA,EAAArC,CAAA,EAAAA;AACA,aAAA,CAAAqC,CAAAA,CAAArC,CAAAqC,CAAAA,IAAA,EAAAA,GACAA,CAAAA,CAAArC,CAAAA,GAAA,CAAAqC,CAAAA,IAAA,EADAA,GAEAA,CAAAA,CAAArC,CAAAA,GAAA,CAAAqC,CAAAA,IAAA,CAFAA,GAGAA,CAAAA,CAAArC,CAAAA,GAAA,CAAAqC,CAHA,MAGA,CAHA;AAxUAnS;;AAAAA,IAAAA,CAAAA,CAAAD,OAAAC,GAAAF,CAAAA,CAAAA,CAAAA,CAAAE;AAAAF,G/DgFA,E+DhFAA,UAAAA,MAAAA,EAAAA,OAAAA,EAAAA,mBAAAA,EAAAA;AAAAA;;ACOA,aAAAwgB,OAAA,CAAAkzB,UAAA,EAAAA;AACA,UAAA;AACA,YAAAhX,GAAAA,GAAAiX,IAAAA,CAAA,QAAA5d,OAAA,CAAA,GAAA,EAAA,IAAA,CAAA4d,CAAAA,CAAAD,UAAAC,CAAA;AACA,YAAAjX,GAAAA,KAAAA,GAAAA,CAAAv5B,MAAAu5B,IAAAt7B,MAAAA,CAAA0e,IAAA1e,CAAAs7B,GAAAt7B,EAAA+B,MAAAu5B,CAAA,EACA,OAAAA,GAAA;AACK,OAJL,CAIK,OAAA/hB,CAAA,EAAAA,CACL;;AAAA,aAAA,IAAA;AAdAza;;AAAAA,IAAAA,MAAAA,CAAAD,OAAAC,GAAAsgB,OAAAtgB;AAAAsgB,GhEiFA,EgEjFAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;ACMA,QAAAC,CAAAA,GAAAxgB,CAAA;AAOAwgB,IAAAA,CAAAA,CAAAtd,MAAAsd,GAAA,UAAAoF,CAAA,EAAAA;AAGA,WAFA,IAAAS,CAAAA,GAAA,CAAA,EACAvlB,CAAAA,GAAA,CADA,EAEAT,CAAAA,GAAA,CAAA,EAAmBA,CAAAA,GAAAulB,CAAAA,CAAA1iB,MAAnB,EAAmBA,EAAmB7C,CAAtC,EAAsCA,CACtCS,CAAAA,GAAA8kB,CAAAA,CAAAiJ,UAAAjJ,CAAAvlB,CAAAulB,CADsCvlB,IAEtC,GAFsCA,GAGtCgmB,CAAAA,IAAA,CAHsChmB,GAItCS,CAAAA,GAAA,IAAAA,GACAulB,CAAAA,IAAA,CADAvlB,GAEA,UAAA,QAAAA,CAAA,KAAA,UAAA,QAAA8kB,CAAAA,CAAAiJ,UAAAjJ,CAAAvlB,CAAAA,GAAA,CAAAulB,CAAA,CAAA,IAAA,EACAvlB,CADA,EAEAgmB,CAAAA,IAAA,CAFA,IAIAA,CAAAA,IAAA,CAVsChmB;;AAYtC,aAAAgmB,CAAA;AAAAA,KAfA7F,EAyBAA,CAAAA,CAAAyN,IAAAzN,GAAA,UAAApN,CAAA,EAAA7I,CAAA,EAAAC,CAAA,EAAAA;AAEA,UADAA,CAAAA,GAAAD,CAAAC,GACA,CAAA,EACA,OAAA,EAAA;;AAKA,WAJA,IAGA7I,CAHA,EAAA0uC,CAAAA,GAAA,IAAA,EACAqB,CAAAA,GAAA,EADA,EAEArxC,CAAAA,GAAA,CAEA,EAAAkK,CAAAA,GAAAC,CAAA,GAAAA,CACA7I,CAAAA,GAAAyR,CAAAA,CAAA7I,CAAAA,EAAA6I,CADA5I,IAEA,GAFAA,GAGAknC,CAAAA,CAAArxC,CAAAA,EAAAqxC,CAAAA,GAAA/vC,CAHA6I,GAIA7I,CAAAA,GAAA,GAAAA,IAAAA,CAAAA,GAAA,GAAAA,GACA+vC,CAAAA,CAAArxC,CAAAA,EAAAqxC,CAAAA,GAAArxC,CAAA,KAAAsB,CAAAtB,KAAA,CAAAA,GAAA,KAAA+S,CAAAA,CAAA7I,CAAAA,EAAA6I,CADAzR,GAEAA,CAAAA,GAAA,GAAAA,IAAAA,CAAAA,GAAA,GAAAA,IACAA,CAAAA,GAAAA,CAAAA,CAAA,IAAAA,CAAAA,KAAA,EAAAA,GAAA,CAAA,KAAAyR,CAAAA,CAAA7I,CAAAA,EAAA6I,CAAA,KAAA,EAAAzR,GAAA,CAAA,KAAAyR,CAAAA,CAAA7I,CAAAA,EAAA6I,CAAA,KAAA,CAAAzR,GAAA,KAAAyR,CAAAA,CAAA7I,CAAAA,EAAA6I,CAAAzR,IAAA,KAAAA,EACA+vC,CAAAA,CAAArxC,CAAAA,EAAAqxC,CAAAA,GAAA,SAAA/vC,CAAAA,IAAA,EAAA,CADAA,EAEA+vC,CAAAA,CAAArxC,CAAAA,EAAAqxC,CAAAA,GAAA,SAAA,OAAA/vC,CAAA,CAHAA,IAKA+vC,CAAAA,CAAArxC,CAAAA,EAAAqxC,CAAAA,GAAArxC,CAAA,KAAAsB,CAAAtB,KAAA,EAAAA,GAAA,CAAA,KAAA+S,CAAAA,CAAA7I,CAAAA,EAAA6I,CAAA,KAAA,CAAA/S,GAAA,KAAA+S,CAAAA,CAAA7I,CAAAA,EAAA6I,CAXA5I,EAYAnK,CAAAA,GAAA,IAAAA,KAAA,CACAgwC,CAAAA,KAAAA,CAAAA,GAAA,EAAAA,CADA,EACAziC,IADA,CACAyT,MAAAA,CAAA4O,YAAA5O,CAAA6O,KAAA7O,CAAAA,MAAAA,EAAAqwB,CAAArwB,CADA,GAEAhhB,CAAAA,GAAA,CAFAA,CAZAmK;;AAiBA,aAAA6lC,CAAAA,IACAhwC,CAAAA,IACAgwC,CAAAA,CAAAziC,IAAAyiC,CAAAhvB,MAAAA,CAAA4O,YAAA5O,CAAA6O,KAAA7O,CAAAA,MAAAA,EAAAqwB,CAAAA,CAAA7mC,KAAA6mC,CAAA,CAAAA,EAAArxC,CAAAqxC,CAAArwB,CAAAgvB,CADAhwC,EAEAgwC,CAAAA,CAAArkB,IAAAqkB,CAAA,EAAAA,CAHAA,IAKAhvB,MAAAA,CAAA4O,YAAA5O,CAAA6O,KAAA7O,CAAAA,MAAAA,EAAAqwB,CAAAA,CAAA7mC,KAAA6mC,CAAA,CAAAA,EAAArxC,CAAAqxC,CAAArwB,CALA;AAKAhhB,KAvDAmgB,EAiEAA,CAAAA,CAAAqM,KAAArM,GAAA,UAAAoF,CAAA,EAAAxS,CAAA,EAAA5L,CAAA,EAAAA;AAIA,WAHA,IACAmsC,CADA,EAEAC,CAFA,EAAArpC,CAAAA,GAAA/C,CAAA,EAGAnH,CAAAA,GAAA,CAAA,EAAmBA,CAAAA,GAAAulB,CAAAA,CAAA1iB,MAAnB,EAAmBA,EAAmB7C,CAAtC,EAAsCA,CACtCszC,CAAAA,GAAA/tB,CAAAA,CAAAiJ,UAAAjJ,CAAAvlB,CAAAulB,CADsCvlB,IAEtC,GAFsCA,GAGtC+S,CAAAA,CAAA5L,CAAAA,EAAA4L,CAAAA,GAAAugC,CAHsCtzC,GAI7BszC,CAAAA,GAAA,IAAAA,IACTvgC,CAAAA,CAAA5L,CAAAA,EAAA4L,CAAAA,GAAAugC,CAAAA,IAAA,CAAAA,GAAA,GAAAvgC,EACAA,CAAAA,CAAA5L,CAAAA,EAAA4L,CAAAA,GAAA,KAAAugC,CAAA,GAAA,GAFSA,IAGA,UAAA,QAAAA,CAAA,KAAA,UAAA,SAAAC,CAAAA,GAAAhuB,CAAAA,CAAAiJ,UAAAjJ,CAAAvlB,CAAAA,GAAA,CAAAulB,CAAA,CAAA,CAAA,IACT+tB,CAAAA,GAAA,SAAA,CAAA,OAAAA,CAAA,KAAA,EAAA,KAAA,OAAAC,CAAA,CAAAD,EAAAC,EACAvzC,CADAszC,EAEAvgC,CAAAA,CAAA5L,CAAAA,EAAA4L,CAAAA,GAAAugC,CAAAA,IAAA,EAAAA,GAAA,GAFAA,EAGAvgC,CAAAA,CAAA5L,CAAAA,EAAA4L,CAAAA,GAAAugC,CAAAA,IAAA,EAAAA,GAAA,EAAAA,GAAA,GAHAA,EAIAvgC,CAAAA,CAAA5L,CAAAA,EAAA4L,CAAAA,GAAAugC,CAAAA,IAAA,CAAAA,GAAA,EAAAA,GAAA,GAJAA,EAKAvgC,CAAAA,CAAA5L,CAAAA,EAAA4L,CAAAA,GAAA,KAAAugC,CAAA,GAAA,GANS,KAQTvgC,CAAAA,CAAA5L,CAAAA,EAAA4L,CAAAA,GAAAugC,CAAAA,IAAA,EAAAA,GAAA,GAAAvgC,EACAA,CAAAA,CAAA5L,CAAAA,EAAA4L,CAAAA,GAAAugC,CAAAA,IAAA,CAAAA,GAAA,EAAAA,GAAA,GADAvgC,EAEAA,CAAAA,CAAA5L,CAAAA,EAAA4L,CAAAA,GAAA,KAAAugC,CAAA,GAAA,GAVS,CAP6BtzC;;AAoBtC,aAAAmH,CAAAA,GAAA+C,CAAA;AAAAA,KAzFAiW;AAyFAjW,GjErBA,EiEqBAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;ACtGAtK,IAAAA,CAAAA,CAAAD,OAAAC,GA6BA,UAAAowB,CAAA,EAAAxlB,CAAA,EAAA/E,CAAA,EAAAA;AACA,UAAA+tC,CAAAA,GAAA/tC,CAAAA,IAAA,IAAA;AAAA,UACAguC,CAAAA,GAAAD,CAAAA,KAAA,CADA;AAAA,UAEAE,CAAAA,GAAA,IAFA;AAAA,UAGAvsC,CAAAA,GAAAqsC,CAHA;AAIA,aAAA,UAAA/tC,CAAA,EAAAA;AACA,YAAAA,CAAAA,GAAA,CAAAA,IAAAA,CAAAA,GAAAguC,CAAA,EACA,OAAAzjB,CAAAA,CAAAvqB,CAAAuqB,CAAA;AACA7oB,QAAAA,CAAAA,GAAA1B,CAAA0B,GAAAqsC,CAAArsC,KACAusC,CAAAA,GAAA1jB,CAAAA,CAAAwjB,CAAAxjB,CAAA0jB,EACAvsC,CAAAA,GAAA,CAFAA;AAIA,YAAA4K,CAAAA,GAAAvH,CAAAA,CAAAjK,IAAAiK,CAAAkpC,CAAAlpC,EAAArD,CAAAqD,EAAArD,CAAAA,IAAA1B,CAAA+E,CAAA;AAGA,eAFA,IAAArD,CAAA,KACAA,CAAAA,GAAA,KAAA,IAAAA,CAAA,CADA,GAEA4K,CAAA;AAAAA,OAVA;AAUAA,KA5CAnS;AA4CAmS,GlEqCA,EkErCAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AC5CAnS,IAAAA,CAAAA,CAAAD,OAAAC,GAAAygB,CAAAzgB;AAEA,QAAAuf,CAAAA,GAAWhf,CAAAA,CAAQ,CAARA,CAAX;;AAUA,aAAAkgB,CAAA,CAAAmC,CAAA,EAAAC,CAAA,EAAAA;AASAhR,WAAA+Q,EAAA/Q,GAAA+Q,CAAAA,KAAA,CAAA/Q,EAMAA,KAAAgR,EAAAhR,GAAAgR,CAAAA,KAAA,CANAhR;AAcA;;AAAA,QAAAkiC,CAAAA,GAAAtzB,CAAAA,CAAAszB,IAAAtzB,GAAA,IAAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA;AAEAszB,IAAAA,CAAAA,CAAAtqC,QAAAsqC,GAAA,YAAA;AAA4B,aAAA,CAAA;AAAA,KAA5BA,EACAA,CAAAA,CAAA9J,QAAA8J,GAAAA,CAAAA,CAAA1I,QAAA0I,GAAA,YAAA;AAA4C,aAAAliC,IAAA;AAAAA,KAD5CkiC,EAEAA,CAAAA,CAAA9wC,MAAA8wC,GAAA,YAAA;AAA0B,aAAA,CAAA;AAAA,KAF1BA;AASA,QAAAzxB,CAAAA,GAAA7B,CAAAA,CAAA6B,QAAA7B,GAAA,kBAAA;AAOAA,IAAAA,CAAAA,CAAAgW,UAAAhW,GAAA,UAAAhf,CAAA,EAAAA;AACA,UAAA,MAAAA,CAAA,EACA,OAAAsyC,CAAA;AACA,UAAA1L,CAAAA,GAAA5mC,CAAAA,GAAA,CAAA;AACA4mC,MAAAA,CAAAA,KACA5mC,CAAAA,GAAAA,CAAAA,CADA4mC,CAAAA;AAEA,UAAAzlB,CAAAA,GAAAnhB,CAAAA,KAAA,CAAA;AAAA,UACAohB,CAAAA,GAAAA,CAAAphB,CAAAA,GAAAmhB,CAAAC,IAAA,UAAAA,KAAA,CADA;AAWA,aATAwlB,CAAAA,KACAxlB,CAAAA,GAAAA,CAAAA,CAAAA,KAAA,CAAAA,EACAD,CAAAA,GAAAA,CAAAA,CAAAA,KAAA,CADAC,EACA,EACAD,CADA,GACA,UADA,KAEAA,CAAAA,GAAA,CAAAA,EAAA,EACAC,CADA,GACA,UADA,KAEAA,CAAAA,GAAA,CAFA,CAFA,CAFAwlB,CAAAA,EASA,IAAA5nB,CAAA,CAAAmC,CAAA,EAAAC,CAAA,CAAA;AAAAA,KAjBApC,EAyBAA,CAAAA,CAAAvN,IAAAuN,GAAA,UAAAhf,CAAA,EAAAA;AACA,UAAA,YAAA,OAAAA,CAAA,EACA,OAAAgf,CAAAA,CAAAgW,UAAAhW,CAAAhf,CAAAgf,CAAA;;AACA,UAAAlB,CAAAA,CAAA4B,QAAA5B,CAAA9d,CAAA8d,CAAA,EAAA;AAEA,YAAA,CAAAA,CAAAA,CAAAwC,IAAA,EAGA,OAAAtB,CAAAA,CAAAgW,UAAAhW,CAAAqG,QAAAA,CAAArlB,CAAAqlB,EAAA,EAAAA,CAAArG,CAAA;AAFAhf,QAAAA,CAAAA,GAAA8d,CAAAA,CAAAwC,IAAAxC,CAAAsN,UAAAtN,CAAA9d,CAAA8d,CAAA9d;AAIA;;AAAA,aAAAA,CAAAA,CAAAilB,GAAAjlB,IAAAA,CAAAA,CAAAklB,IAAAllB,GAAA,IAAAgf,CAAA,CAAAhf,CAAAA,CAAAilB,GAAAjlB,KAAA,CAAA,EAAAA,CAAAA,CAAAklB,IAAAllB,KAAA,CAAA,CAAAA,GAAAsyC,CAAA;AAAAA,KAnCAtzB,EA2CAA,CAAAA,CAAAre,SAAAqe,CAAAhX,QAAAgX,GAAA,UAAAgC,CAAA,EAAAA;AACA,UAAA,CAAAA,CAAA,IAAA5Q,KAAAgR,EAAAhR,KAAA,EAAA,EAAA;AACA,YAAA+Q,CAAAA,GAAA,IAAA,CAAA/Q,KAAA+Q,EAAA,KAAA,CAAA;AAAA,YACAC,CAAAA,GAAAA,CAAAhR,KAAAgR,EAAAA,KAAA,CADA;AAIA,eAFAD,CAAAA,KACAC,CAAAA,GAAAA,CAAAA,GAAA,CAAAA,KAAA,CADAD,CAAAA,EACA,EACAA,CAAAA,GAAA,aAAAC,CADA,CACA;AAEA;;AAAA,aAAAhR,KAAA+Q,EAAA/Q,GAAA,aAAAA,KAAAgR,EAAA;AAAAA,KAnDApC,EA2DAA,CAAAA,CAAAre,SAAAqe,CAAAuzB,MAAAvzB,GAAA,UAAAgC,CAAA,EAAAA;AACA,aAAAlD,CAAAA,CAAAwC,IAAAxC,GACA,IAAAA,CAAAA,CAAAwC,IAAA,CAAA,IAAAlQ,KAAA+Q,EAAA,EAAA,IAAA/Q,KAAAgR,EAAA,EAAA9B,OAAAA,CAAA0B,CAAA1B,CAAA,CADAxB,GAGA;AAAWmH,QAAAA,GAAAA,EAAA,IAAA7U,KAAA+Q,EAAX;AAAW+D,QAAAA,IAAAA,EAAA,IAAA9U,KAAAgR,EAAX;AAAWJ,QAAAA,QAAAA,EAAA1B,OAAAA,CAAA0B,CAAA1B;AAAX,OAHA;AAGW0B,KA/DXhC;AAkEA,QAAAmO,CAAAA,GAAAxN,MAAAA,CAAAhf,SAAAgf,CAAAwN,UAAA;AAOAnO,IAAAA,CAAAA,CAAAkC,QAAAlC,GAAA,UAAA+B,CAAA,EAAAA;AACA,aAAAA,CAAAA,KAAAF,CAAAE,GACAuxB,CADAvxB,GAEA,IAAA/B,CAAA,CAAAA,CACAmO,CAAAA,CAAAjuB,IAAAiuB,CAAApM,CAAAoM,EAAA,CAAAA,IACAA,CAAAA,CAAAjuB,IAAAiuB,CAAApM,CAAAoM,EAAA,CAAAA,KAAA,CADAA,GAEAA,CAAAA,CAAAjuB,IAAAiuB,CAAApM,CAAAoM,EAAA,CAAAA,KAAA,EAFAA,GAGAA,CAAAA,CAAAjuB,IAAAiuB,CAAApM,CAAAoM,EAAA,CAAAA,KAAA,EAJAnO,MAIA,CAJA,EAIA,CAEAmO,CAAAA,CAAAjuB,IAAAiuB,CAAApM,CAAAoM,EAAA,CAAAA,IACAA,CAAAA,CAAAjuB,IAAAiuB,CAAApM,CAAAoM,EAAA,CAAAA,KAAA,CADAA,GAEAA,CAAAA,CAAAjuB,IAAAiuB,CAAApM,CAAAoM,EAAA,CAAAA,KAAA,EAFAA,GAGAA,CAAAA,CAAAjuB,IAAAiuB,CAAApM,CAAAoM,EAAA,CAAAA,KAAA,EALA,MAKA,CATA,CAFA;AAWA,KAZAnO,EAoBAA,CAAAA,CAAAre,SAAAqe,CAAA4B,MAAA5B,GAAA,YAAA;AACA,aAAAW,MAAAA,CAAA4O,YAAA5O,CACA,MAAAvP,KAAA+Q,EADAxB,EAEAvP,KAAA+Q,EAAA/Q,KAAA,CAAAA,GAAA,GAFAuP,EAGAvP,KAAA+Q,EAAA/Q,KAAA,EAAAA,GAAA,GAHAuP,EAIAvP,KAAA+Q,EAAA/Q,KAAA,EAJAuP,EAKA,MAAAvP,KAAAgR,EALAzB,EAMAvP,KAAAgR,EAAAhR,KAAA,CAAAA,GAAA,GANAuP,EAOAvP,KAAAgR,EAAAhR,KAAA,EAAAA,GAAA,GAPAuP,EAQAvP,KAAAgR,EAAAhR,KAAA,EARAuP,CAAA;AAQA,KA7BAX,EAqCAA,CAAAA,CAAAre,SAAAqe,CAAAwpB,QAAAxpB,GAAA,YAAA;AACA,UAAAwzB,CAAAA,GAAApiC,KAAAgR,EAAAhR,IAAA,EAAA;AAGA,aAFAA,KAAAgR,EAAAhR,GAAAgR,CAAAA,CAAAhR,KAAAgR,EAAAhR,IAAA,CAAAA,GAAAA,KAAA+Q,EAAA/Q,KAAA,EAAAgR,IAAAoxB,CAAApxB,MAAA,CAAAhR,EACAA,KAAA+Q,EAAA/Q,GAAA+Q,CAAA/Q,KAAA+Q,EAAA/Q,IAAA,CAAAA,GAAAoiC,CAAArxB,MAAA,CADA/Q,EAEAA,IAAA;AAAAA,KAzCA4O,EAgDAA,CAAAA,CAAAre,SAAAqe,CAAA4qB,QAAA5qB,GAAA,YAAA;AACA,UAAAwzB,CAAAA,GAAAA,EAAA,IAAApiC,KAAA+Q,EAAAqxB,CAAA;AAGA,aAFApiC,KAAA+Q,EAAA/Q,GAAA+Q,CAAAA,CAAA/Q,KAAA+Q,EAAA/Q,KAAA,CAAAA,GAAAA,KAAAgR,EAAAhR,IAAA,EAAA+Q,IAAAqxB,CAAArxB,MAAA,CAAA/Q,EACAA,KAAAgR,EAAAhR,GAAAgR,CAAAhR,KAAAgR,EAAAhR,KAAA,CAAAA,GAAAoiC,CAAApxB,MAAA,CADAhR,EAEAA,IAAA;AAAAA,KApDA4O,EA2DAA,CAAAA,CAAAre,SAAAqe,CAAAxd,MAAAwd,GAAA,YAAA;AACA,UAAAyzB,CAAAA,GAAAriC,KAAA+Q,EAAA;AAAA,UACAuxB,CAAAA,GAAAA,CAAAtiC,KAAA+Q,EAAA/Q,KAAA,EAAAA,GAAAA,KAAAgR,EAAAhR,IAAA,CAAAsiC,MAAA,CADA;AAAA,UAEAC,CAAAA,GAAAviC,KAAAgR,EAAAhR,KAAA,EAFA;AAGA,aAAA,MAAAuiC,CAAA,GACA,MAAAD,CAAA,GACAD,CAAAA,GAAA,KAAAA,GACAA,CAAAA,GAAA,GAAAA,GAAA,CAAAA,GAAA,CADAA,GAEAA,CAAAA,GAAA,OAAAA,GAAA,CAAAA,GAAA,CAHA,GAIAC,CAAAA,GAAA,KAAAA,GACAA,CAAAA,GAAA,GAAAA,GAAA,CAAAA,GAAA,CADAA,GAEAA,CAAAA,GAAA,OAAAA,GAAA,CAAAA,GAAA,CAPA,GAQAC,CAAAA,GAAA,GAAAA,GAAA,CAAAA,GAAA,EARA;AAQA,KAvEA3zB;AAuEA,GnEpHA,EmEoHA,UAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA;AAAA;;ACrMAzgB,IAAAA,CAAAA,CAAAD,OAAAC,GAAAmpC,CAAAnpC;AAGA,QAAAwkB,CAAAA,GAAajkB,CAAAA,CAAQ,EAARA,CAAb;AAAqB,KACrB4oC,CAAAA,CAAA/mC,SAAA+mC,GAAAjoC,MAAAA,CAAAY,MAAAZ,CAAAsjB,CAAAA,CAAApiB,SAAAlB,CADqB,EACrB+Q,WADqB,GACrBk3B,CADqB;AAGrB,QAAA5pB,CAAAA,GAAWhf,CAAAA,CAAQ,CAARA,CAAX;AAAA,QAEA0S,CAAAA,GAAAsM,CAAAA,CAAAtM,MAFA;;AAUA,aAAAk2B,CAAA,GAAAA;AACA3kB,MAAAA,CAAAA,CAAA7jB,IAAA6jB,CAAA3S,IAAA2S;AAQA2kB;;AAAAA,IAAAA,CAAAA,CAAA/Y,KAAA+Y,GAAA,UAAAtjC,CAAA,EAAAA;AACA,aAAA,CAAAsjC,CAAAA,CAAA/Y,KAAA+Y,GAAA5pB,CAAAA,CAAAqC,mBAAA,EAAA/b,CAAA,CAAA;AAAAA,KADAsjC;;AAIA,QAAAkL,CAAAA,GAAAphC,CAAAA,IAAAA,CAAAA,CAAA7Q,SAAA6Q,YAAAsB,UAAAtB,IAAA,UAAAA,CAAAA,CAAA7Q,SAAA6Q,CAAAjN,GAAAiN,CAAAlS,IAAAkS,GACA,UAAAga,CAAA,EAAA9a,CAAA,EAAArC,CAAA,EAAAA;AACAqC,MAAAA,CAAAA,CAAAnM,GAAAmM,CAAA8a,CAAA9a,EAAArC,CAAAqC;AAAArC,KAFAmD,GAMA,UAAAga,CAAA,EAAA9a,CAAA,EAAArC,CAAA,EAAAA;AACA,UAAAmd,CAAAA,CAAAD,IAAA,EACAC,CAAAA,CAAAD,IAAAC,CAAA9a,CAAA8a,EAAAnd,CAAAmd,EAAA,CAAAA,EAAAA,CAAAA,CAAAhqB,MAAAgqB,EADA,KAEA,KAAA,IAAA7sB,CAAAA,GAAA,CAAA,EAA4BA,CAAAA,GAAA6sB,CAAAA,CAAAhqB,MAA5B,GACAkP,CAAAA,CAAArC,CAAAA,EAAAqC,CAAAA,GAAA8a,CAAAA,CAAA7sB,CAAAA,EAAA6sB,CAAA9a;AAAA/R,KAVA;;AA0BA,aAAAk0C,CAAA,CAAArnB,CAAA,EAAA9a,CAAA,EAAArC,CAAA,EAAAA;AACAmd,MAAAA,CAAAA,CAAAhqB,MAAAgqB,GAAA,EAAAA,GACA1N,CAAAA,CAAAgB,IAAAhB,CAAAqN,KAAArN,CAAA0N,CAAA1N,EAAApN,CAAAoN,EAAAzP,CAAAyP,CADA0N,GAGA9a,CAAAA,CAAAuP,SAAAvP,CAAA8a,CAAA9a,EAAArC,CAAAqC,CAHA8a;AAXAkc;;AAAAA,IAAAA,CAAAA,CAAA/mC,SAAA+mC,CAAAzlB,KAAAylB,GAAA,UAAA1nC,CAAA,EAAAA;AACA8d,MAAAA,CAAAA,CAAA4B,QAAA5B,CAAA9d,CAAA8d,MACA9d,CAAAA,GAAA8d,CAAAA,CAAAoC,YAAApC,CAAA9d,CAAA8d,EAAA,QAAAA,CADAA;AAEA,UAAA6G,CAAAA,GAAA3kB,CAAAA,CAAAwB,MAAAxB,KAAA,CAAA;AAIA,aAHAoQ,KAAA6T,MAAA7T,CAAAuU,CAAAvU,GACAuU,CAAAA,IACAvU,KAAAi4B,KAAAj4B,CAAAwiC,CAAAxiC,EAAAuU,CAAAvU,EAAApQ,CAAAoQ,CAFAA,EAGAA,IAAA;AAAAA,KAPAs3B,EAoBAA,CAAAA,CAAA/mC,SAAA+mC,CAAAxjB,MAAAwjB,GAAA,UAAA1nC,CAAA,EAAAA;AACA,UAAA2kB,CAAAA,GAAAnT,CAAAA,CAAAI,UAAAJ,CAAAxR,CAAAwR,CAAA;AAIA,aAHApB,KAAA6T,MAAA7T,CAAAuU,CAAAvU,GACAuU,CAAAA,IACAvU,KAAAi4B,KAAAj4B,CAAAyiC,CAAAziC,EAAAuU,CAAAvU,EAAApQ,CAAAoQ,CAFAA,EAGAA,IAAA;AAAAA,KAzBAs3B;AAyBAt3B,GpEWA,EoEXAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;ACtEA7R,IAAAA,CAAAA,CAAAD,OAAAC,GAAA0qC,CAAA1qC;AAGA,QAAAskB,CAAAA,GAAa/jB,CAAAA,CAAQ,EAARA,CAAb;AAAqB,KACrBmqC,CAAAA,CAAAtoC,SAAAsoC,GAAAxpC,MAAAA,CAAAY,MAAAZ,CAAAojB,CAAAA,CAAAliB,SAAAlB,CADqB,EACrB+Q,WADqB,GACrBy4B,CADqB;AAGrB,QAAAnrB,CAAAA,GAAWhf,CAAAA,CAAQ,CAARA,CAAX;;AASA,aAAAmqC,CAAA,CAAAv3B,CAAA,EAAAA;AACAmR,MAAAA,CAAAA,CAAA3jB,IAAA2jB,CAAAzS,IAAAyS,EAAAnR,CAAAmR;AAUA/E;;AAAAA,IAAAA,CAAAA,CAAAtM,MAAAsM,KACAmrB,CAAAA,CAAAtoC,SAAAsoC,CAAAO,MAAAP,GAAAnrB,CAAAA,CAAAtM,MAAAsM,CAAAnd,SAAAmd,CAAA3U,KADA2U,GAMAmrB,CAAAA,CAAAtoC,SAAAsoC,CAAA/kB,MAAA+kB,GAAA,YAAA;AACA,UAAAtkB,CAAAA,GAAAvU,KAAA6T,MAAA7T,EAAA;AACA,aAAAA,KAAAM,GAAAN,CAAAwd,SAAAxd,CAAAA,KAAA/B,GAAA+B,EAAAA,KAAA/B,GAAA+B,GAAArN,IAAAA,CAAA8qB,GAAA9qB,CAAAqN,KAAA/B,GAAA+B,GAAAuU,CAAA5hB,EAAAqN,KAAAuU,GAAA5hB,CAAAqN,CAAA;AAAAuU,KARA7G;AAQA6G,GrE+CA,EqE/CAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AC7BArmB,IAAAA,CAAAA,CA6BAw0C,OA7BAx0C,GA6BcQ,CAAAA,CAAQ,EAARA,CA7BdR;AA6BsB,GtE+CtB,EsE/CsB,UAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA;AAAA;;AClCtBC,IAAAA,CAAAA,CAAAD,OAAAC,GAAAu0C,CAAAv0C;AAEA,QAAAuf,CAAAA,GAAWhf,CAAAA,CAAQ,CAARA,CAAX;;AAsCA,aAAAg0C,CAAA,CAAAC,CAAA,EAAAC,CAAA,EAAAC,CAAA,EAAAA;AAEA,UAAA,cAAA,OAAAF,CAAA,EACA,MAAAjoC,SAAAA,CAAA,4BAAAA,CAAA;AAEAgT,MAAAA,CAAAA,CAAAa,YAAAb,CAAA5e,IAAA4e,CAAA1N,IAAA0N,GAMA1N,KAAA2iC,OAAA3iC,GAAA2iC,CANAj1B,EAYA1N,KAAA4iC,gBAAA5iC,GAAAkP,OAAAA,CAAA0zB,CAAA1zB,CAZAxB,EAkBA1N,KAAA6iC,iBAAA7iC,GAAAkP,OAAAA,CAAA2zB,CAAA3zB,CAlBAxB;AAkBAm1B;;AAAAA,KA1DAH,CAAAA,CAAAnyC,SAAAmyC,GAAArzC,MAAAA,CAAAY,MAAAZ,CAAAqe,CAAAA,CAAAa,YAAAb,CAAAnd,SAAAlB,CA0DAwzC,EA1DAziC,WA0DAyiC,GA1DAH,CA0DAG,EAcAH,CAAAA,CAAAnyC,SAAAmyC,CAAAI,OAAAJ,GAAA,SAAAI,CAAA,CAAAC,CAAA,EAAAC,CAAA,EAAAC,CAAA,EAAAC,CAAA,EAAAC,CAAA,EAAAA;AAEA,UAAA,CAAAD,CAAA,EACA,MAAAxoC,SAAAA,CAAA,2BAAAA,CAAA;AAEA,UAAAmU,CAAAA,GAAA7O,IAAA;AACA,UAAA,CAAAmjC,CAAA,EACA,OAAAz1B,CAAAA,CAAAW,SAAAX,CAAAo1B,CAAAp1B,EAAAmB,CAAAnB,EAAAq1B,CAAAr1B,EAAAs1B,CAAAt1B,EAAAu1B,CAAAv1B,EAAAw1B,CAAAx1B,CAAA;AAEA,UAAAmB,CAAAA,CAAA8zB,OAAA,EAKA,IAAA;AACA,eAAA9zB,CAAAA,CAAA8zB,OAAA9zB,CACAk0B,CADAl0B,EAEAm0B,CAAAA,CAAAn0B,CAAAA,CAAA+zB,gBAAA/zB,GAAA,iBAAAA,GAAA,QAAAm0B,CAAAA,CAAAE,CAAAF,EAAArK,MAAAqK,EAFAn0B,EAGA,UAAA7D,CAAA,EAAAo4B,CAAA,EAAAA;AAEA,cAAAp4B,CAAA,EAEA,OADA6D,CAAAA,CAAAsiB,IAAAtiB,CAAA,OAAAA,EAAA7D,CAAA6D,EAAAk0B,CAAAl0B,GACAs0B,CAAAA,CAAAn4B,CAAAm4B,CAAA;;AAGA,cAAA,SAAAC,CAAA,EAAA;AAKA,gBAAA,EAAAA,CAAAA,YAAAH,CAAA,CAAA,EACA,IAAA;AACAG,cAAAA,CAAAA,GAAAH,CAAAA,CAAAp0B,CAAAA,CAAAg0B,iBAAAh0B,GAAA,iBAAAA,GAAA,QAAAo0B,CAAAA,CAAAG,CAAAH,CAAAG;AACqB,aAFrB,CAEqB,OAAAp4B,CAAA,EAAAA;AAErB,qBADA6D,CAAAA,CAAAsiB,IAAAtiB,CAAA,OAAAA,EAAA7D,CAAA6D,EAAAk0B,CAAAl0B,GACAs0B,CAAAA,CAAAn4B,CAAAm4B,CAAA;AAKA;AAAA,mBADAt0B,CAAAA,CAAAsiB,IAAAtiB,CAAA,MAAAA,EAAAu0B,CAAAv0B,EAAAk0B,CAAAl0B,GACAs0B,CAAAA,CAAA,IAAAA,EAAAC,CAAAD,CAAA;AAdAt0B;;AAAAA,UAAAA,CAAAA,CAAAnW,GAAAmW,CAAAnW,CAAA,CAAAmW;AAAA,SAXAA,CAAA;AA4BK,OA7BL,CA6BK,OAAA7D,CAAA,EAAAA;AAGL,eAFA6D,CAAAA,CAAAsiB,IAAAtiB,CAAA,OAAAA,EAAA7D,CAAA6D,EAAAk0B,CAAAl0B,GAAAk0B,KACA74B,UAAAA,CAAA,YAAA;AAA+Bi5B,UAAAA,CAAAA,CAAAn4B,CAAAm4B,CAAAA;AAAAn4B,SAA/Bd,EAAgD,CAAhDA,CACA;AADgD,OApChD,MACAA,UAAAA,CAAA,YAAA;AAA+Bi5B,QAAAA,CAAAA,CAAA1tC,KAAAA,CAAA,eAAAA,CAAA0tC,CAAAA;AAAA,OAA/Bj5B,EAAmE,CAAnEA,CAAAA;AAAmE,KAxBnE24B,EAqEAH,CAAAA,CAAAnyC,SAAAmyC,CAAAhqC,GAAAgqC,GAAA,UAAAW,CAAA,EAAAA;AAOA,aANArjC,KAAA2iC,OAAA3iC,KACAqjC,CAAAA,IACArjC,KAAA2iC,OAAA3iC,CAAA,IAAAA,EAAA,IAAAA,EAAA,IAAAA,CADAqjC,EAEArjC,KAAA2iC,OAAA3iC,GAAA,IAFAqjC,EAGArjC,KAAAmxB,IAAAnxB,CAAA,KAAAA,EAAAgxB,GAAAhxB,EAJAA,GAMAA,IAAA;AAAAA,KA5EA6iC;AA4EA7iC,GvE1DA,EuE0DAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AC3IA7R,IAAAA,CAAAA,CAAAD,OAAAC,GAAA,EAAAA;AAAA,GxEiFA,EwEjFA,UAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA;AAAA;;AAAA,QAAA,CAAA;AAAA,QAAA,CAAA,GAAA,QAAA,KAAA,SAAA,KAAA,CAAA,GAAA,UAAA,CAAA,EAAA,CAAA,EAAA;AAAA,aAAA,CAAA,CAAA,GAAA,MAAA,CAAA,cAAA,IAAA;AAAA,QAAA,SAAA,EAAA;AAAA,mBAAA,KAAA,IAAA,UAAA,CAAA,EAAA,CAAA,EAAA;AAAA,QAAA,CAAA,CAAA,SAAA,GAAA,CAAA;AAAA,OAAA,IAAA,UAAA,CAAA,EAAA,CAAA,EAAA;AAAA,aAAA,IAAA,CAAA,IAAA,CAAA,EAAA,CAAA,CAAA,cAAA,CAAA,CAAA,MAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA;AAAA,OAAA,EAAA,CAAA,EAAA,CAAA,CAAA;AAAA,KAAA,EAAA,UAAA,CAAA,EAAA,CAAA,EAAA;AAAA,eAAA,CAAA,GAAA;AAAA,aAAA,WAAA,GAAA,CAAA;AAAA;;AAAA,MAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,EAAA,CAAA,CAAA,SAAA,GAAA,SAAA,CAAA,GAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,IAAA,CAAA,CAAA,SAAA,GAAA,CAAA,CAAA,SAAA,EAAA,IAAA,CAAA,EAAA,CAAA;AAAA,KAAA,CAAA;AAAA,IAAA,MAAA,CAAA,cAAA,CAAA,CAAA,EAAA,YAAA,EAAA;AAAA,MAAA,KAAA,EAAA,CAAA;AAAA,KAAA;;ACEA,QAAA+jC,CAAAA,GAAAxjC,CAAAA,CAAA,EAAAA,CAAA;AAAA,QACAoC,CAAAA,GAAApC,CAAAA,CAAA,CAAAA,CADA;AAAA,QAIA4lC,CAAAA,GAAA,UAAAppB,CAAA,EAAAA;AAAA,eAAAopB,CAAA,GAAAA;AAAAA,eAAAA,SAAAA,CAAAA,IAAAA,CAAAA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,SAAAA,CAAAA,IAAAA,IAAAA;AAMA;;AAAA,aAN2CnpB,CAAAA,CAAAmpB,CAAAnpB,EAAAD,CAAAC,CAAAA,EACzCmpB,CAAAA,CAAA/jC,SAAA+jC,CAAAxc,GAAAwc,GAAA,UAAIvc,CAAJ,EAA2C/mB,CAA3C,EAA2CA;AAGzC,eAAO,CAFQsyC,CAAAA,CACXtyC,CAAAA,CAAO,CAAPA,CADWsyC,EACAtyC,CAAAA,CAAO,CAAPA,CADAsyC,EACWtyC,CAAAA,CAAO,CAAPA,CADXsyC,EACsBtyC,CAAAA,CAAO,CAAPA,CADtBsyC,EACiCtyC,CAAAA,CAAO,CAAPA,CADjCsyC,EAC4CtjC,KAAK8rB,OADjDwX,EAC0DtjC,KAAKgsB,QAD/DsX,EACyEtjC,KAAKisB,OAD9EqX,CAER,CAAP;AAD6FrX,OAHtD9gB,EAM3CmpB,CAAA;AANA,KAAA,CAA2CpC,CAAAA,CAAAvG,kBAA3C,CAJA;;AAYA,aAAgB2X,CAAhB,CACIjoC,CADJ,EACeixB,CADf,EAC8Br6B,CAD9B,EACyCu6B,CADzC,EACuD+W,CADvD,EACyEzX,CADzE,EAC0FE,CAD1F,EAEIC,CAFJ,EAEIA;AAOF,WANA,IAAMuX,CAAAA,GAAkBnoC,CAAAA,CAAEhK,IAA1B,EACM+E,CAAAA,GAAIotC,CAAAA,CAAgB,CAAhBA,CADV,EAEM1V,CAAAA,GAAI0V,CAAAA,CAAgB,CAAhBA,CAFV,EAKIC,CAAAA,GAAc,CALlB,EAMSl1C,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAIi1C,CAAAA,CAAgBpyC,MAApC,EAA4C7C,CAAAA,EAA5C,EACEk1C,CAAAA,IAAeD,CAAAA,CAAgBj1C,CAAhBi1C,CAAfC;;AAYF,WATA,IAAMr/B,CAAAA,GAAS,IAAItT,CAAAA,CAAAmD,MAAJ,CAAWoH,CAAAA,CAAEhK,IAAb,EAAmBgK,CAAAA,CAAEnH,IAArB,CAAf,EAEMm4B,CAAAA,GAAIhxB,CAAAA,CAAE8G,SAFZ,EAGMu7B,CAAAA,GAAIt5B,CAAAA,CAAOjC,SAHjB,EAIMuhC,CAAAA,GAAYpX,CAAAA,CAAM1uB,UAJxB,EAKM+lC,CAAAA,GAAQ1xC,CAAAA,CAAE2L,UALhB,EAMMgmC,CAAAA,GAAWpX,CAAAA,CAAK5uB,UANtB,EAOMimC,CAAAA,GAAeN,CAAAA,CAAS3lC,UAP9B,EASSkmC,CAAAA,GAAK,CAAd,EAAiBA,CAAAA,GAAK1tC,CAAAA,GAAI03B,CAA1B,EAA6BgW,CAAAA,EAA7B,EACE;AAAA,YAAMpuC,CAAAA,GAASouC,CAAAA,GAAKL,CAApB;;AACA,aAASl1C,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAIk1C,CAApB,EAAiCl1C,CAAAA,EAAjC,EACEmvC,CAAAA,CAAEhoC,CAAAA,GAASnH,CAAXmvC,CAAAA,GACIgG,CAAAA,CAAUI,CAAAA,GAAKhW,CAAf4V,CAAAA,IAAe5V,CAAOzB,CAAAA,CAAE32B,CAAAA,GAASnH,CAAX89B,CAAAA,GAAgBuX,CAAAA,CAASE,CAAAA,GAAKhW,CAAd8V,CAAvB9V,IAA2Cn7B,IAAAA,CAAKmkC,IAALnkC,CAAUkxC,CAAAA,CAAaC,CAAAA,GAAKhW,CAAlB+V,CAAAA,GAAuB/X,CAAjCn5B,CAA1D+wC,IACAC,CAAAA,CAAMG,CAAAA,GAAKhW,CAAX6V,CAFJjG;AAKJ;;AAAA,aAAOt5B,CAAP;AAtCWlW;;AAAAA,IAAAA,CAAAA,CAAAomC,qBAAApmC,GAAAomC,CAAApmC,EAQbA,CAAAA,CAAAo1C,kBAAAp1C,GAAAo1C,CARap1C;AAQbo1C,GzEmEA,EyEnEAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,QAAAA,CAAAA;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,SAAAA,KAAAA,CAAAA,GAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,CAAAA,CAAAA,GAAAA,MAAAA,CAAAA,cAAAA,IAAAA;AAAAA,QAAAA,SAAAA,EAAAA;AAAAA,mBAAAA,KAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,QAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA;AAAAA,OAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,IAAAA,CAAAA,IAAAA,CAAAA,EAAAA,CAAAA,CAAAA,cAAAA,CAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,OAAAA,EAAAA,CAAAA,EAAAA,CAAAA,CAAAA;AAAAA,KAAAA,EAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,eAAAA,CAAAA,GAAAA;AAAAA,aAAAA,WAAAA,GAAAA,CAAAA;AAAAA;;AAAAA,MAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,SAAAA,GAAAA,SAAAA,CAAAA,GAAAA,MAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA,CAAAA,SAAAA,EAAAA,IAAAA,CAAAA,EAAAA,CAAAA;AAAAA,KAAAA,CAAAA;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;ACXA,QAAAnR,CAAAA,GAAAzjC,CAAAA,CAAA,EAAAA,CAAA;AAAA,QAEAkR,CAAAA,GAAAlR,CAAAA,CAAA,CAAAA,CAFA;AAAA,QAKAmlC,CAAAA,GAAA,UAAA3oB,CAAA,EAAAA;AACE,eAAA2oB,CAAA,CACIlH,CADJ,EAC4DoX,CAD5D,EAEInuB,CAFJ,EAEqB/hB,CAFrB,EAEqBA;AAFrB,YAAA6U,CAAAA,GAGEwC,CAAAA,CAAApc,IAAAoc,CAAAlL,IAAAkL,EAAMyhB,CAANzhB,EAAsB0K,CAAtB1K,EAA8BrX,CAA9BqX,KAAyClL,IAH3C;AAG2CA,eAFiB0I,CAAAA,CAAAq7B,QAAAr7B,GAAAq7B,CAAAr7B,EAAAq7B,CAEjB/jC;AAsB7C;;AAAA,aA1BiCmL,CAAAA,CAAA0oB,CAAA1oB,EAAAD,CAAAC,CAAAA,EAQ/B0oB,CAAAA,CAAAtjC,SAAAsjC,CAAAjI,UAAAiI,GAAA,UAAWhI,CAAX,EAAWA;AACT,YAAA,CAAK7rB,KAAK4V,MAAV,IAAUA,CAAW5V,KAAK+jC,QAA1B,EACE,MAAM,IAAItuC,KAAJ,CAAU,4DAAV,CAAN;AAIF,YAAA,CAAKuK,KAAK+jC,QAAV,EAGM,MAFI/jC,KAAK4V,MAAL5V,EAEE,IAAIvK,KAAJ,CAAU,wDAAV,CAAN;AAAgB,OAjBO0V,EAsB/B0oB,CAAAA,CAAAtjC,SAAAsjC,CAAA/b,GAAA+b,GAAA,UAAI9b,CAAJ,EAA2C/mB,CAA3C,EAA2CA;AAEzC,eAAO,CAIX,UACIqK,CADJ,EACeC,CADf,EAC0ByoC,CAD1B,EACwEnwC,CADxE,EAEIC,CAFJ,EAEIA;AACF,cAAMqZ,CAAAA,GAAStN,CAAAA,CAAAzN,aAAAyN,CAAclM,IAAdkM,CAAmBvE,CAAnBuE,EAAsBtE,CAAtBsE,EAAyBmkC,CAAzBnkC,EAAmChM,CAAnCgM,EAA4C/L,CAA5C+L,CAAf;AACA,cAAA,CAAKsN,CAAL,EACE,MAAM,IAAIzX,KAAJ,CAAU,mBAAV,CAAN;AAEF,iBAAOyX,CAAP;AAZiB82B,SAKnB,CAL4BhzC,CAAAA,CAAO,CAAPA,CAK5B,EALuCA,CAAAA,CAAO,CAAPA,CAKvC,EALkDgP,KAAK+jC,QAKvD,EALuDA,CAAW,CAKlE,EALyE/jC,KAAKnM,UAK9E,CAJW,CAAP;AAD0EA,OAvB7CsX,EA0BjC0oB,CAAA;AA1BA,KAAA,CAAiC1B,CAAAA,CAAAzF,QAAjC,CALA;;AAKax+B,IAAAA,CAAAA,CAAA2lC,WAAA3lC,GAAA2lC,CAAA3lC;AAAA2lC,G1EyEb,E0EzEaA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,QAAAA,CAAAA;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,SAAAA,KAAAA,CAAAA,GAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,CAAAA,CAAAA,GAAAA,MAAAA,CAAAA,cAAAA,IAAAA;AAAAA,QAAAA,SAAAA,EAAAA;AAAAA,mBAAAA,KAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,QAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA;AAAAA,OAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,IAAAA,CAAAA,IAAAA,CAAAA,EAAAA,CAAAA,CAAAA,cAAAA,CAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,OAAAA,EAAAA,CAAAA,EAAAA,CAAAA,CAAAA;AAAAA,KAAAA,EAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,eAAAA,CAAAA,GAAAA;AAAAA,aAAAA,WAAAA,GAAAA,CAAAA;AAAAA;;AAAAA,MAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,SAAAA,GAAAA,SAAAA,CAAAA,GAAAA,MAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA,CAAAA,SAAAA,EAAAA,IAAAA,CAAAA,EAAAA,CAAAA;AAAAA,KAAAA,CAAAA;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,YAAAA,IAAAA,UAAAA,CAAAA,EAAAA;AAAAA,UAAAA,CAAAA,IAAAA,CAAAA,CAAAA,UAAAA,EAAAA,OAAAA,CAAAA;AAAAA,UAAAA,CAAAA,GAAAA,EAAAA;AAAAA,UAAAA,QAAAA,CAAAA,EAAAA,KAAAA,IAAAA,CAAAA,IAAAA,CAAAA,EAAAA,MAAAA,CAAAA,cAAAA,CAAAA,IAAAA,CAAAA,CAAAA,EAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,aAAAA,CAAAA,CAAAA,OAAAA,GAAAA,CAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;ACNb,QAAAzB,CAAAA,GAAA1jC,CAAAA,CAAA,EAAAA,CAAA;AAAA,QACAoC,CAAAA,GAAApC,CAAAA,CAAA,CAAAA,CADA;AAAA,QAEAu1C,CAAAA,GAAA36B,CAAAA,CAAA5a,CAAAA,CAAA,CAAAA,CAAA4a,CAFA;AAAA,QAKAmrB,CAAAA,GAAA,UAAAvpB,CAAA,EAAAA;AAAA,eAAAupB,CAAA,GAAAA;AAAAA,eAAAA,SAAAA,CAAAA,IAAAA,CAAAA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,SAAAA,CAAAA,IAAAA,IAAAA;AAKA;;AAAA,aAL+BtpB,CAAAA,CAAAspB,CAAAtpB,EAAAD,CAAAC,CAAAA,EAC7BspB,CAAAA,CAAAlkC,SAAAkkC,CAAA3c,GAAA2c,GAAA,UAAI1c,CAAJ,EAA2C/mB,CAA3C,EAA2CA;AAEzC,eAAO,CADQmuB,CAAAA,CAAOnuB,CAAPmuB,EAAenf,KAAKzH,IAApB4mB,CACR,CAAP;AADmC5mB,OAFR4S,EAK/BspB,CAAA;AALA,KAAA,CAA+BrC,CAAAA,CAAAqH,MAA/B,CALA;;AAYA,aAAgBta,CAAhB,CAAuB9jB,CAAvB,EAAoC9C,CAApC,EAAoCA;AAClC,UAAM2rC,CAAAA,GAAS7oC,CAAAA,CAAE,CAAFA,CAAf;AAAA,UACM8oC,CAAAA,GAAaD,CAAAA,CAAO7yC,IAD1B;AAGA,UAAIkH,CAAAA,IAAQ4rC,CAAAA,CAAW/yC,MAAnBmH,IAA6BA,CAAAA,GAAAA,CAAS,CAATA,GAAa4rC,CAAAA,CAAW/yC,MAAzD,EACE,MAAM,IAAIqE,KAAJ,CAAU,8DAAV,CAAN;AAGE8C,MAAAA,CAAAA,GAAO,CAAPA,KACFA,CAAAA,GAAO4rC,CAAAA,CAAW/yC,MAAX+yC,GAAoB5rC,CADzBA;;AASJ,WAHA,IAAI6rC,CAAAA,GAAiBD,CAAAA,CAAW5rC,CAAX4rC,CAArB,EACMxyC,CAAAA,GAAc,IAAImB,KAAJ,CAAkBqxC,CAAAA,CAAW/yC,MAA7B,CADpB,EAGS7C,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAI8M,CAAAA,CAAEjK,MAAtB,EAA8B7C,CAAAA,EAA9B,EAIE,KAHA,IACM81C,CAAAA,GAAAA,CADAC,CAAAA,GAAQjpC,CAAAA,CAAE9M,CAAF8M,CACRgpC,EAAmBhzC,IADzB,EAGSkzC,CAAAA,GAAY,CAArB,EAAwBA,CAAAA,GAAYJ,CAAAA,CAAW/yC,MAA/C,EAAuDmzC,CAAAA,EAAvD,EAAoE;AAElE,YAAIA,CAAAA,KAAchsC,CAAlB,EACE6rC,CAAAA,IAAkBC,CAAAA,CAAWE,CAAXF,CAAlBD,CADF,KAKK,IAAID,CAAAA,CAAWI,CAAXJ,CAAAA,KAA0BE,CAAAA,CAAWE,CAAXF,CAA9B,EACH,MAAM,IAAI5uC,KAAJ,CAAU,kCAAV,CAAN;AAIF9D,QAAAA,CAAAA,CAAY4yC,CAAZ5yC,CAAAA,GAAyB0yC,CAAAA,CAAWE,CAAXF,CAAzB1yC;AAKJA;;AAAAA,MAAAA,CAAAA,CAAY4G,CAAZ5G,CAAAA,GAAoByyC,CAApBzyC;AAGA,UAAMyS,CAAAA,GAAS,IAAItT,CAAAA,CAAAmD,MAAJ,CAAWtC,CAAX,EAAwBuyC,CAAAA,CAAOhwC,IAA/B,CAAf;AAAA,UACMwpC,CAAAA,GAAIt5B,CAAAA,CAAOxG,UADjB;AAAA,UAKI4mC,CAAAA,GAAY,CALhB;;AAMA,WAASj2C,CAAAA,GAAIoD,CAAAA,CAAYP,MAAZO,GAAqB,CAAlC,EAAqCpD,CAAAA,IAAKgK,CAA1C,EAAgDhK,CAAAA,EAAhD,EACEi2C,CAAAA,IAAa7yC,CAAAA,CAAYpD,CAAZoD,CAAb6yC;;AAIF,WADA,IAAIC,CAAAA,GAAa,CAAjB,EACSC,CAAAA,GAAa,CAAtB,EAAyBA,CAAAA,GAAarpC,CAAAA,CAAEjK,MAAxC,EAAgDszC,CAAAA,EAAhD,EAA8D;AAC5D,YAAMJ,CAAN;AAAA,YAIIK,CAAAA,GAAiB,CAJrB;;AAKA,aAASp2C,CAAAA,GAAAA,CALH+1C,CAAAA,GAAQjpC,CAAAA,CAAEqpC,CAAFrpC,CAKL9M,EAAU8C,IAAV9C,CAAe6C,MAAf7C,GAAwB,CAAjC,EAAoCA,CAAAA,IAAKgK,CAAzC,EAA+ChK,CAAAA,EAA/C,EACEo2C,CAAAA,IAAkBL,CAAAA,CAAMjzC,IAANizC,CAAW/1C,CAAX+1C,CAAlBK;;AAYF,aATA,IAAMC,CAAAA,GAAYN,CAAAA,CAAM1mC,UAAxB,EACMinC,CAAAA,GAAYZ,CAAAA,CAAKnwC,SAALmwC,CAAejwC,IAAfiwC,CAAoBK,CAAAA,CAAMjzC,IAA1B4yC,CADlB,EAOIa,CAAAA,GAAeL,CAPnB,EASgB7vC,CAAAA,IAAPrG,CAAAA,GAAI,CAAJA,EAAW,CAAJqG,CAAhB,EAAuBrG,CAAAA,GAAIs2C,CAA3B,EAAsCt2C,CAAAA,EAAtC,EACEmvC,CAAAA,CAAEoH,CAAAA,GAAev2C,CAAjBmvC,CAAAA,GAAsBkH,CAAAA,CAAUr2C,CAAVq2C,CAAtBlH,EAAgCnvC,EAC1BqG,CAD0BrG,KACpBo2C,CADoBp2C,KAG9Bu2C,CAAAA,IAAiBN,CAAAA,GAAYG,CAA7BG,EACAlwC,CAAAA,GAAI,CAJ0BrG,CAAhCmvC;;AAOF+G,QAAAA,CAAAA,IAAcE,CAAdF;AAGF;;AAAA,aAAOrgC,CAAP;AAzFWlW;;AAAAA,IAAAA,CAAAA,CAAAumC,SAAAvmC,GAAAumC,CAAAvmC,EAObA,CAAAA,CAAAixB,MAAAjxB,GAAAixB,CAPajxB;AAObixB,G3EmEA,E2EnEAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,QAAAA,CAAAA;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,SAAAA,KAAAA,CAAAA,GAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,CAAAA,CAAAA,GAAAA,MAAAA,CAAAA,cAAAA,IAAAA;AAAAA,QAAAA,SAAAA,EAAAA;AAAAA,mBAAAA,KAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,QAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA;AAAAA,OAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,IAAAA,CAAAA,IAAAA,CAAAA,EAAAA,CAAAA,CAAAA,cAAAA,CAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,OAAAA,EAAAA,CAAAA,EAAAA,CAAAA,CAAAA;AAAAA,KAAAA,EAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,eAAAA,CAAAA,GAAAA;AAAAA,aAAAA,WAAAA,GAAAA,CAAAA;AAAAA;;AAAAA,MAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,SAAAA,GAAAA,SAAAA,CAAAA,GAAAA,MAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA,CAAAA,SAAAA,EAAAA,IAAAA,CAAAA,EAAAA,CAAAA;AAAAA,KAAAA,CAAAA;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;ACZA,QAAAkT,CAAAA,GAAA3jC,CAAAA,CAAA,EAAAA,CAAA;AAAA,QACAoC,CAAAA,GAAApC,CAAAA,CAAA,CAAAA,CADA;AAAA,QAEAkR,CAAAA,GAAAlR,CAAAA,CAAA,CAAAA,CAFA;AAAA,QAKAu+B,CAAAA,GAAAv+B,CAAAA,CAAA,EAAAA,CALA;AAAA,QAOAgmC,CAAAA,GAAA,UAAAxpB,CAAA,EAAAA;AAAA,eAAAwpB,CAAA,GAAAA;AAAAA,eAAAA,SAAAA,CAAAA,IAAAA,CAAAA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,SAAAA,CAAAA,IAAAA,IAAAA;AAsBA;;AAAA,aAtB6BvpB,CAAAA,CAAAupB,CAAAvpB,EAAAD,CAAAC,CAAAA,EAC3BupB,CAAAA,CAAAnkC,SAAAmkC,CAAA5c,GAAA4c,GAAA,UAAI3c,CAAJ,EAA2C/mB,CAA3C,EAA2CA;AACzC,YAAMqK,CAAAA,GAAIrK,CAAAA,CAAO,CAAPA,CAAV;AAAA,YACM+zC,CAAAA,GAAI/zC,CAAAA,CAAO,CAAPA,CADV;AAAA,YAEMiB,CAAAA,GAAsB,MAAlBjB,CAAAA,CAAOI,MAAW,GAAIJ,CAAAA,CAAO,CAAPA,CAAJ,GAAW,KAAKkB,CAF5C;AAKA,YAAgC,MAA5B8N,KAAKtB,WAALsB,CAAiB5O,MAArB,EAEE,KADA,IAAM4zC,CAAAA,GAAQh0C,CAAAA,CAAO,CAAPA,CAAAA,CAAUK,IAAxB,EACS9C,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAIy2C,CAAAA,CAAM5zC,MAA1B,EAA0BA,EAAU7C,CAApC,EACEyR,KAAKtB,WAALsB,CAAiBlE,IAAjBkE,CAAsBglC,CAAAA,CAAMz2C,CAANy2C,CAAtBhlC;AAKJ,YAAMtE,CAAAA,GAAakE,CAAAA,CAAAtB,YAAAsB,CAAaV,sBAAbU,CACfvE,CAAAA,CAAEhK,IADauO,EACPmlC,CAAAA,CAAE1zC,IADKuO,EACCI,KAAKnH,OADN+G,EACeI,KAAKnB,SADpBe,EAC+BI,KAAKtB,WADpCkB,EACiDI,KAAKrB,IADtDiB,EAC4DI,KAAKlB,OADjEc,CAAnB;AAAA,YAEMtE,CAAAA,GAAI,IAAIxK,CAAAA,CAAAmD,MAAJ,CAAWyH,CAAX,EAAuBL,CAAAA,CAAEnH,IAAzB,CAFV;AAKA,eADA+wC,CAAAA,CAAO3pC,CAAP2pC,EAAU5pC,CAAV4pC,EAAaF,CAAbE,EAAgBhzC,CAAhBgzC,EAAmBjlC,KAAKnB,SAAxBomC,EAAmCjlC,KAAK+sB,KAAxCkY,EAA+CjlC,KAAKrB,IAApDsmC,EAA0DjlC,KAAKnH,OAA/DosC,CAAAA,EACO,CAAC3pC,CAAD,CAAP;AAAQA,OApBiB6P,EAsB7BupB,CAAA;AAtBA,KAAA,CAA6BrC,CAAAA,CAAAzF,IAA7B,CAPA;;AAgCA,aAAgBqY,CAAhB,CACIvH,CADJ,EACerR,CADf,EAC0B6Y,CAD1B,EACqC3Y,CADrC,EAC0D1tB,CAD1D,EAC4FkuB,CAD5F,EAEIpuB,CAFJ,EAEiC9F,CAFjC,EAEiCA;AA8B/B,WA7BA,IAAMssC,CAAAA,GAAY9Y,CAAAA,CAAEh7B,IAAFg7B,CAAO,CAAPA,CAAlB,EACM+Y,CAAAA,GAAiB/Y,CAAAA,CAAEh7B,IAAFg7B,CAAO,CAAPA,CADvB,EAEMgZ,CAAAA,GAAehZ,CAAAA,CAAEh7B,IAAFg7B,CAAO,CAAPA,CAFrB,EAGMiZ,CAAAA,GAAcjZ,CAAAA,CAAEh7B,IAAFg7B,CAAO,CAAPA,CAHpB,EAKMkZ,CAAAA,GAAaL,CAAAA,CAAE7zC,IAAF6zC,CAAO,CAAPA,CALnB,EAMMM,CAAAA,GAAkBN,CAAAA,CAAE7zC,IAAF6zC,CAAO,CAAPA,CANxB,EAOMO,CAAAA,GAAgBP,CAAAA,CAAE7zC,IAAF6zC,CAAO,CAAPA,CAPtB,EAQMQ,CAAAA,GAAeR,CAAAA,CAAE7zC,IAAF6zC,CAAO,CAAPA,CARrB,EASMS,CAAAA,GAAcJ,CAAAA,GAAaC,CAAbD,GAA+BE,CAA/BF,GAA+CG,CATnE,EAUME,CAAAA,GAAe,CAACH,CAAD,EAAgBC,CAAhB,CAVrB,EAYMG,CAAAA,GAAanI,CAAAA,CAAErsC,IAAFqsC,CAAO,CAAPA,CAZnB,EAaMoI,CAAAA,GAAkBpI,CAAAA,CAAErsC,IAAFqsC,CAAO,CAAPA,CAbxB,EAcMqI,CAAAA,GAAgBrI,CAAAA,CAAErsC,IAAFqsC,CAAO,CAAPA,CAdtB,EAeMsI,CAAAA,GAAetI,CAAAA,CAAErsC,IAAFqsC,CAAO,CAAPA,CAfrB,EAmBMuI,CAAAA,GAAoBF,CAAAA,GAAgBC,CAnB1C,EAqBME,CAAAA,GAAWd,CAAAA,GAAiBrY,CAAjBqY,IAHQC,CAAAA,GAAeC,CAGvBF,CArBjB,EAsBMe,CAAAA,GANcN,CAAAA,GAAaC,CAAbD,GAA+BE,CAA/BF,GAA+CG,CAA/CH,GAMWA,CANXA,GAMwB9Y,CAtB5C,EAuBMqZ,CAAAA,GAAWT,CAAAA,GAAc5Y,CAvB/B,EAwBMsZ,CAAAA,GAAajB,CAAAA,GAAiBrY,CAAjBqY,IAJCQ,CAAAA,CAAa,CAAbA,CAAAA,GAAkBA,CAAAA,CAAa,CAAbA,CAInBR,CAxBnB,EA2BMkB,CAAAA,GAAkB,IAAItjC,YAAJ,CAFAqjC,CAAAA,GAAaJ,CAEb,CA3BxB,EA6BSM,CAAAA,GAAW,CAApB,EAAuBA,CAAAA,GAAWpB,CAAlC,EAAkCA,EAAaoB,CAA/C,EAAyD;AAGvD,aAFA,IAAIC,CAAAA,GAAiB,CAArB,EACIC,CAAAA,GAAiB,CADrB,EAESC,CAAAA,GAAW,CAApB,EAAuBA,CAAAA,GAAW3Z,CAAlC,EAAkCA,EAAS2Z,CAA3C,EACEC,CAAAA,CACIta,CAAAA,CAAElqB,SAAFkqB,CAAY3N,QAAZ2N,CAAqBma,CAAAA,GAAiBE,CAAAA,GAAWR,CAAjD7Z,CADJsa,EACgEL,CADhEK,EACiFvB,CAAAA,GAAiBrY,CADlG4Z,EAEItB,CAFJsB,EAEkBrB,CAFlBqB,EAE+Bf,CAAAA,CAAa,CAAbA,CAF/Be,EAEgDf,CAAAA,CAAa,CAAbA,CAFhDe,EAEiE9nC,CAAAA,CAAU,CAAVA,CAFjE8nC,EAE+E9nC,CAAAA,CAAU,CAAVA,CAF/E8nC,EAE6FhoC,CAAAA,CAAK,CAALA,CAF7FgoC,EAEsGhoC,CAAAA,CAAK,CAALA,CAFtGgoC,EAGIhoC,CAAAA,CAAK,CAALA,CAHJgoC,EAGahoC,CAAAA,CAAK,CAALA,CAHbgoC,EAGsB9tC,CAAAA,CAAQ,CAARA,CAHtB8tC,EAGkC9tC,CAAAA,CAAQ,CAARA,CAHlC8tC,CAAAA,EAKA1Z,CAAAA,CAAAW,QAAAX,CACIiY,CAAAA,CAAE/iC,SAAF+iC,CAAYxmB,QAAZwmB,CAAqBwB,CAAAA,GAAWN,CAAhClB,CADJjY,EAC+CqZ,CAD/CrZ,EAEIyQ,CAAAA,CAAEv7B,SAAFu7B,CAAYhf,QAAZgf,CAAqB+I,CAAAA,GAAiBC,CAAAA,GAAWP,CAAjDzI,CAFJzQ,EAEqDkZ,CAAW,CAFhElZ,EAEgE,CAAO,CAFvEA,EAE8E,CAF9EA,EAEiF,CAFjFA,EAEoFsY,CAAAA,GAAaxY,CAFjGE,EAGIgZ,CAHJhZ,EAGuBoZ,CAHvBpZ,CALA0Z;;AAWFH,QAAAA,CAAAA,IAAkBN,CAAAA,GAAWnZ,CAA7ByZ,EACAC,CAAAA,IAAkBN,CAAAA,GAAWpZ,CAD7ByZ;AAKF;;AAAA,UAAIja,CAAJ,EAOE,KANA,IAAMqa,CAAAA,GAAWra,CAAAA,CAAEpqB,SAAnB,EACM0kC,CAAAA,GAAanJ,CAAAA,CAAEv7B,SADrB,EAEM2kC,CAAAA,GAAYpJ,CAAAA,CAAErsC,IAAFqsC,CAAO,CAAPA,CAFlB,EAGMqJ,CAAAA,GAAiBrJ,CAAAA,CAAErsC,IAAFqsC,CAAO,CAAPA,CAHvB,EAIM+F,CAAAA,GAAc/F,CAAAA,CAAErsC,IAAFqsC,CAAO,CAAPA,IAAYA,CAAAA,CAAErsC,IAAFqsC,CAAO,CAAPA,CAJhC,EAKMsJ,CAAAA,GAAWD,CAAAA,GAAiBtD,CALlC,EAMSwD,CAAAA,GAAQ,CAAjB,EAAoBA,CAAAA,GAAQH,CAA5B,EAA4BA,EAAaG,CAAzC,EACE,KAAK,IAAIC,CAAAA,GAAU,CAAnB,EAAsBA,CAAAA,GAAUH,CAAhC,EAAgCA,EAAkBG,CAAlD,EAEE,KADA,IAAMxxC,CAAAA,GAASuxC,CAAAA,GAAQD,CAARC,GAAmBC,CAAAA,GAAUzD,CAA5C,EACSrwC,CAAAA,GAAQ,CAAjB,EAAoBA,CAAAA,GAAQqwC,CAA5B,EAA4BA,EAAerwC,CAA3C,EACEyzC,CAAAA,CAAWnxC,CAAAA,GAAStC,CAApByzC,CAAAA,IAA8BD,CAAAA,CAASM,CAATN,CAA9BC;AAOV;;AAAA,aAASF,CAAT,CACIQ,CADJ,EACwCC,CADxC,EAC6E9uB,CAD7E,EAC+FG,CAD/F,EAEIC,CAFJ,EAEmB2uB,CAFnB,EAEqCC,CAFrC,EAEuDC,CAFvD,EAE2EC,CAF3E,EAE+FC,CAF/F,EAGIC,CAHJ,EAGmBC,CAHnB,EAGkCC,CAHlC,EAGiDC,CAHjD,EAGmEC,CAHnE,EAGmEA;AACjE,UAAMC,CAAAA,GAAyF,IAAA,CAAA,EAAA,CAA1EtvB,CAAAA,GAASkvB,CAATlvB,GAAiBgvB,CAAjBhvB,IAA0B8uB,CAAAA,IAAcF,CAAAA,GAAW,CAAzBE,CAAAA,GAA8B,CAAxD9uB,CAA0E,IAAZovB,CAAY,CAA/F;AAAA,UACMG,CAAAA,GAAwF,IAAA,CAAA,EAAA,CAAzEtvB,CAAAA,GAAQgvB,CAARhvB,GAAgBkvB,CAAhBlvB,IAAyB8uB,CAAAA,IAAcF,CAAAA,GAAW,CAAzBE,CAAAA,GAA8B,CAAvD9uB,CAAyE,IAAZovB,CAAY,CAD9F;AAKA,UAAmB,MAAfP,CAAe,IAAoB,MAAfC,CAAL,IAAmC,MAAVE,CAAzB,IAAkD,MAAVE,CAAxC,IAAiE,MAAVH,CAAvD,IAAgF,MAAVE,CAAzF,EAkCA,KAPA,IAGMM,CAAAA,GAAmE,IAAA,CAAA,EAAA,CAAlDxvB,CAAAA,GAASgvB,CAAThvB,GAAiBkvB,CAAjBlvB,IAHL8uB,CAAAA,IAAcF,CAAAA,GAAW,CAAzBE,CAAAA,GAA8B,CAGzB9uB,CAAkD,IAAZovB,CAAY,CAHzE,EAIMK,CAAAA,GAAiE,IAAA,CAAA,EAAA,CAAjDxvB,CAAAA,GAAQgvB,CAARhvB,GAAgBkvB,CAAhBlvB,IAHJ8uB,CAAAA,IAAcF,CAAAA,GAAW,CAAzBE,CAAAA,GAA8B,CAG1B9uB,CAAiD,IAAZovB,CAAY,CAJvE,EAMMK,CAAAA,GAAe7vB,CAAAA,GAAW+uB,CAAX/uB,GAAsBgvB,CAN3C,EAOSt4C,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAIm5C,CAApB,EAAoBA,EAAgBn5C,CAApC,EAIE,KAHA,IAAMo5C,CAAAA,GAAWp5C,CAAAA,GAAIs4C,CAArB,EACMe,CAAAA,GAAAA,CAAAA,EAAcr5C,CAAAA,GAAIs4C,CAAlBe,CAAAA,GAA8BhB,CADpC,EAEMiB,CAAAA,GAAAA,CAAAA,EAAUt5C,CAAAA,IAAKq4C,CAAAA,GAAWC,CAAhBt4C,CAAVs5C,CAFN,EAGSC,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAIN,CAApB,EAAoBA,EAAcM,CAAlC,EACE,KAAK,IAAIxD,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAImD,CAApB,EAAoBA,EAAanD,CAAjC,EAAoC;AAClC,YAAMyD,CAAAA,GAAQD,CAAAA,GAAIV,CAAJU,GAAed,CAAfc,GAAuBF,CAAAA,GAAWd,CAAhD;AAAA,YACMkB,CAAAA,GAAQ1D,CAAAA,GAAI+C,CAAJ/C,GAAe2C,CAAf3C,GAAuBqD,CAAAA,GAAWZ,CADhD;AAGEJ,QAAAA,CAAAA,CAAAA,CAAUp4C,CAAAA,GAAIi5C,CAAJj5C,GAAiBu5C,CAA3BnB,IAAgCc,CAAhCd,GAA4CrC,CAA5CqC,CAAAA,GADEoB,CAAAA,IAAS,CAATA,IAAcA,CAAAA,GAAQ/vB,CAAtB+vB,IAAgCC,CAAAA,IAAS,CAAzCD,IAA8CC,CAAAA,GAAQ/vB,CAAtD8vB,GAC+CrB,CAAAA,CAAAA,CAASmB,CAAAA,GAAO7vB,CAAP6vB,GAAgBE,CAAzBrB,IAAkCzuB,CAAlCyuB,GAA0CsB,CAA1CtB,CAD/CqB,GAG+C,CAFjDpB;AAEiD,OA7CzD,MACE,KAAK,IAAI5tC,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAI8e,CAAAA,GAAW+uB,CAAX/uB,GAAsBgvB,CAA1C,EAAoD9tC,CAAAA,EAApD,EAQE,KAPA,IAAMkvC,CAAAA,GAAAA,CAAAA,EAASlvC,CAAAA,IAAK6tC,CAAAA,GAAWC,CAAhB9tC,CAATkvC,CAAN,EACM/zC,CAAAA,GAAO6E,CAAAA,IAAK6tC,CAAAA,GAAWC,CAAhB9tC,CADb,EAEMmvC,CAAAA,GAAAA,CAAAA,EAAQh0C,CAAAA,GAAO2yC,CAAfqB,CAFN,EAGMC,CAAAA,GAAKj0C,CAAAA,GAAO2yC,CAHlB,EAIMuB,CAAAA,GAAaH,CAAAA,IAAOrB,CAAAA,GAAWC,CAAXD,GAAsBU,CAAtBV,GAAiCW,CAAxCU,CAAAA,GAAoDC,CAAAA,IAAMrB,CAAAA,GAAWS,CAAXT,GAAsBU,CAA5BW,CAApDD,GACfE,CAAAA,IAAMb,CAAAA,GAAWC,CAAjBY,CALJ,EAMME,CAAAA,GAAaJ,CAAAA,IAAOjwB,CAAAA,GAASC,CAAhBgwB,CANnB,EAOSptC,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAIysC,CAApB,EAA8BzsC,CAAAA,EAA9B,EAAmC;AACjC,YAAMytC,CAAAA,GAAKztC,CAAAA,GAAIusC,CAAJvsC,GAAeqtC,CAA1B;AAAA,YACMK,CAAAA,GAAKJ,CADX;AAEA,YAAiB,MAAbd,CAAJ,EACEV,CAAAA,CAASjzC,GAATizC,CACID,CAAAA,CAAQzoB,QAARyoB,CAAiB2B,CAAAA,GAAaC,CAAAA,GAAKrwB,CAAlBowB,GAA0BE,CAA3C7B,EAA+C2B,CAAAA,GAAaC,CAAAA,GAAKrwB,CAAlBowB,GAA0BE,CAA1BF,GAA+Bd,CAA9Eb,CADJC,EAEIyB,CAAAA,GAAavtC,CAAAA,GAAI0sC,CAFrBZ,EADF,KAKE,KAAK,IAAI/rC,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAI2sC,CAApB,EAA8B3sC,CAAAA,EAA9B,EACE+rC,CAAAA,CAASyB,CAAAA,IAAcvtC,CAAAA,GAAI0sC,CAAJ1sC,GAAeD,CAA7BwtC,CAATzB,CAAAA,GAA4CD,CAAAA,CAAQ2B,CAAAA,IAAcC,CAAAA,GAAKrwB,CAALqwB,GAAaC,CAAbD,GAAkB1tC,CAAAA,GAAIysC,CAApCgB,CAAR3B,CAA5CC;AAAwFU;AA1HvF55C;;AAAAA,IAAAA,CAAAA,CAAAwmC,OAAAxmC,GAAAwmC,CAAAxmC,EAyBbA,CAAAA,CAAA+2C,MAAA/2C,GAAA+2C,CAzBa/2C;AAyBb+2C,G5E+CA,E4E/CAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,QAAAA,CAAAA;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,SAAAA,KAAAA,CAAAA,GAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,CAAAA,CAAAA,GAAAA,MAAAA,CAAAA,cAAAA,IAAAA;AAAAA,QAAAA,SAAAA,EAAAA;AAAAA,mBAAAA,KAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,QAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA;AAAAA,OAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,IAAAA,CAAAA,IAAAA,CAAAA,EAAAA,CAAAA,CAAAA,cAAAA,CAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,OAAAA,EAAAA,CAAAA,EAAAA,CAAAA,CAAAA;AAAAA,KAAAA,EAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,eAAAA,CAAAA,GAAAA;AAAAA,aAAAA,WAAAA,GAAAA,CAAAA;AAAAA;;AAAAA,MAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,SAAAA,GAAAA,SAAAA,CAAAA,GAAAA,MAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA,CAAAA,SAAAA,EAAAA,IAAAA,CAAAA,EAAAA,CAAAA;AAAAA,KAAAA,CAAAA;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;AChCA,QAAA3S,CAAAA,GAAA5jC,CAAAA,CAAA,EAAAA,CAAA;AAAA,QACAoC,CAAAA,GAAApC,CAAAA,CAAA,CAAAA,CADA;AAAA,QAIAmmC,CAAAA,GAAA,UAAA3pB,CAAA,EAAAA;AAAA,eAAA2pB,CAAA,GAAAA;AAAAA,eAAAA,SAAAA,CAAAA,IAAAA,CAAAA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,SAAAA,CAAAA,IAAAA,IAAAA;AAKA;;AAAA,aALgC1pB,CAAAA,CAAA0pB,CAAA1pB,EAAAD,CAAAC,CAAAA,EAC9B0pB,CAAAA,CAAAtkC,SAAAskC,CAAA/c,GAAA+c,GAAA,UAAI9c,CAAJ,EAA2C/mB,CAA3C,EAA2CA;AAEzC,eAAO,CADQi4C,CAAAA,CAAQj4C,CAAAA,CAAO,CAAPA,CAARi4C,EAAmBjpC,KAAK+5B,KAAxBkP,EAA+BjpC,KAAKg6B,QAApCiP,CACR,CAAP;AADmDjP,OAFvB7uB,EAKhC0pB,CAAA;AALA,KAAA,CAAgCvC,CAAAA,CAAAwH,OAAhC,CAJA;;AAWA,aAAgBmP,CAAhB,CAAwB5tC,CAAxB,EAAmC0+B,CAAnC,EAAkDmP,CAAlD,EAAkDA;AAChD,UAAA,CAAKA,CAAL,EACE,MAAM,IAAIzzC,KAAJ,CAAU,6BAAV,CAAN;AAGF,UAAM2O,CAAAA,GAAS,IAAItT,CAAAA,CAAAmD,MAAJ,CAAWoH,CAAAA,CAAEhK,IAAb,EAAmBgK,CAAAA,CAAEnH,IAArB,CAAf;AAAA,UACMm4B,CAAAA,GAAIhxB,CAAAA,CAAE8G,SADZ;AAIA,aAFUiC,CAAAA,CAAOxG,UAAPwG,CACRjQ,GADQiQ,CACJioB,CADIjoB,GAEHA,CAAP;AAhBWlW;;AAAAA,IAAAA,CAAAA,CAAA2mC,UAAA3mC,GAAA2mC,CAAA3mC,EAObA,CAAAA,CAAA+6C,OAAA/6C,GAAA+6C,CAPa/6C;AAOb+6C,G7EoEA,E6EpEAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,QAAAA,CAAAA;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,SAAAA,KAAAA,CAAAA,GAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,CAAAA,CAAAA,GAAAA,MAAAA,CAAAA,cAAAA,IAAAA;AAAAA,QAAAA,SAAAA,EAAAA;AAAAA,mBAAAA,KAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,QAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA;AAAAA,OAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,IAAAA,CAAAA,IAAAA,CAAAA,EAAAA,CAAAA,CAAAA,cAAAA,CAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,OAAAA,EAAAA,CAAAA,EAAAA,CAAAA,CAAAA;AAAAA,KAAAA,EAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,eAAAA,CAAAA,GAAAA;AAAAA,aAAAA,WAAAA,GAAAA,CAAAA;AAAAA;;AAAAA,MAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,SAAAA,GAAAA,SAAAA,CAAAA,GAAAA,MAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA,CAAAA,SAAAA,EAAAA,IAAAA,CAAAA,EAAAA,CAAAA;AAAAA,KAAAA,CAAAA;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;ACXA,QAAA1W,CAAAA,GAAA7jC,CAAAA,CAAA,EAAAA,CAAA;AAAA,QACAoC,CAAAA,GAAApC,CAAAA,CAAA,CAAAA,CADA;AAAA,QAEAkR,CAAAA,GAAAlR,CAAAA,CAAA,CAAAA,CAFA;AAAA,QAKAumC,CAAAA,GAAA,UAAA/pB,CAAA,EAAAA;AAAA,eAAA+pB,CAAA,GAAAA;AAAAA,eAAAA,SAAAA,CAAAA,IAAAA,CAAAA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,SAAAA,CAAAA,IAAAA,IAAAA;AAKA;;AAAA,aALgC9pB,CAAAA,CAAA8pB,CAAA9pB,EAAAD,CAAAC,CAAAA,EAC9B8pB,CAAAA,CAAA1kC,SAAA0kC,CAAAnd,GAAAmd,GAAA,UAAIld,CAAJ,EAA2C/mB,CAA3C,EAA2CA;AAEzC,eAAO,CADQm4C,CAAAA,CAAQn4C,CAAAA,CAAO,CAAPA,CAARm4C,EAAmBnpC,KAAKzH,IAAxB4wC,CACR,CAAP;AADuC5wC,OAFX4S,EAKhC8pB,CAAA;AALA,KAAA,CAAgC1C,CAAAA,CAAA0H,OAAhC,CALA;;AAYA,aAAgBkP,CAAhB,CAAwB9tC,CAAxB,EAAmC9C,CAAnC,EAAmCA;AACjC,UAAMmD,CAAAA,GAAakE,CAAAA,CAAA9L,SAAA8L,CAAU1E,YAAV0E,CAAuBvE,CAAAA,CAAEhK,IAAzBuO,EAA+BrH,CAA/BqH,CAAnB;AAAA,UACMwE,CAAAA,GAAS,IAAItT,CAAAA,CAAAmD,MAAJ,CAAWyH,CAAX,EAAuBL,CAAAA,CAAEnH,IAAzB,CADf;AAAA,UAGMm4B,CAAAA,GAAIhxB,CAAAA,CAAEuC,UAHZ;AAQA,aAJUwG,CAAAA,CAAOxG,UAAPwG,CAERjQ,GAFQiQ,CAEJioB,CAFIjoB,GAIHA,CAAP;AAhBWlW;;AAAAA,IAAAA,CAAAA,CAAA+mC,UAAA/mC,GAAA+mC,CAAA/mC,EAObA,CAAAA,CAAAi7C,OAAAj7C,GAAAi7C,CAPaj7C;AAObi7C,G9EmEA,E8EnEAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,QAAAA,CAAAA;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,SAAAA,KAAAA,CAAAA,GAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,CAAAA,CAAAA,GAAAA,MAAAA,CAAAA,cAAAA,IAAAA;AAAAA,QAAAA,SAAAA,EAAAA;AAAAA,mBAAAA,KAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,QAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA;AAAAA,OAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,IAAAA,CAAAA,IAAAA,CAAAA,EAAAA,CAAAA,CAAAA,cAAAA,CAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,OAAAA,EAAAA,CAAAA,EAAAA,CAAAA,CAAAA;AAAAA,KAAAA,EAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,eAAAA,CAAAA,GAAAA;AAAAA,aAAAA,WAAAA,GAAAA,CAAAA;AAAAA;;AAAAA,MAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,SAAAA,GAAAA,SAAAA,CAAAA,GAAAA,MAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA,CAAAA,SAAAA,EAAAA,IAAAA,CAAAA,EAAAA,CAAAA;AAAAA,KAAAA,CAAAA;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;ACfA,QAAA3W,CAAAA,GAAA9jC,CAAAA,CAAA,EAAAA,CAAA;AAAA,QACAoC,CAAAA,GAAApC,CAAAA,CAAA,CAAAA,CADA;AAAA,QAEAkR,CAAAA,GAAAlR,CAAAA,CAAA,CAAAA,CAFA;AAAA,QAKAwmC,CAAAA,GAAA,UAAAhqB,CAAA,EAAAA;AAAA,eAAAgqB,CAAA,GAAAA;AAAAA,eAAAA,SAAAA,CAAAA,IAAAA,CAAAA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,SAAAA,CAAAA,IAAAA,IAAAA;AAKA;;AAAA,aAL+B/pB,CAAAA,CAAA+pB,CAAA/pB,EAAAD,CAAAC,CAAAA,EAC7B+pB,CAAAA,CAAA3kC,SAAA2kC,CAAApd,GAAAod,GAAA,UAAInd,CAAJ,EAA2C/mB,CAA3C,EAA2CA;AAEzC,eAAO,CADQo4C,CAAAA,CAAOp4C,CAAAA,CAAO,CAAPA,CAAPo4C,EAAkBp4C,CAAAA,CAAO,CAAPA,CAAlBo4C,EAA6BppC,KAAKzH,IAAlC6wC,CACR,CAAP;AADiD7wC,OAFtB4S,EAK/B+pB,CAAA;AALA,KAAA,CAA+B1C,CAAAA,CAAA0H,MAA/B,CALA;;AAYA,aAAgBkP,CAAhB,CAAuB/tC,CAAvB,EAAkCnC,CAAlC,EAAmDX,CAAnD,EAAmDA;AACjDA,MAAAA,CAAAA,GAAOqH,CAAAA,CAAA9L,SAAA8L,CAAUxG,SAAVwG,CAAoBrH,CAApBqH,EAA0BvE,CAAAA,CAAEhK,IAAFgK,CAAOjK,MAAjCwO,CAAPrH;AACA,UAAMlH,CAAAA,GAAOgK,CAAAA,CAAEhK,IAAFgK,CAAOtC,KAAPsC,EAAb;AAAA,UACMguC,CAAAA,GAAUh4C,CAAAA,CAAK0H,KAAL1H,EADhB;AAAA,UAEMi4C,CAAAA,GAAcpwC,CAAAA,CAAQ2E,IAF5B;AAGAwrC,MAAAA,CAAAA,CAAQ9wC,CAAR8wC,CAAAA,GAAgBC,CAAAA,CAAYl4C,MAA5Bi4C;;AAMA,WALA,IAAME,CAAAA,GAAc3pC,CAAAA,CAAA9L,SAAA8L,CAAUjH,cAAViH,CAAyBvO,CAAzBuO,CAApB,EACM4pC,CAAAA,GAAiB5pC,CAAAA,CAAA9L,SAAA8L,CAAUjH,cAAViH,CAAyBypC,CAAzBzpC,CADvB,EAGM89B,CAAAA,GADS,IAAI5sC,CAAAA,CAAAmD,MAAJ,CAAWo1C,CAAX,EAAoBhuC,CAAAA,CAAEnH,IAAtB,EACE0J,UAHjB,EAIMyuB,CAAAA,GAAIhxB,CAAAA,CAAEwC,IAJZ,EAKStP,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAImvC,CAAAA,CAAEtsC,MAAtB,EAAsBA,EAAU7C,CAAhC,EAAmC;AACjC,YAAMk7C,CAAAA,GAAkB7pC,CAAAA,CAAA9L,SAAA8L,CAAUzG,eAAVyG,CAA0BrR,CAA1BqR,EAA6B4pC,CAA7B5pC,CAAxB;AAAA,YACM8pC,CAAAA,GAAkBD,CAAAA,CAAgB1wC,KAAhB0wC,EADxB;AAEAC,QAAAA,CAAAA,CAAgBnxC,CAAhBmxC,CAAAA,GAAwBJ,CAAAA,CAAYG,CAAAA,CAAgBlxC,CAAhBkxC,CAAZH,CAAxBI;AACA,YAAMC,CAAAA,GAAY/pC,CAAAA,CAAA9L,SAAA8L,CAAU3G,eAAV2G,CAA0B8pC,CAA1B9pC,EAA2C2pC,CAA3C3pC,CAAlB;AACA89B,QAAAA,CAAAA,CAAEnvC,CAAFmvC,CAAAA,GAAOrR,CAAAA,CAAEsd,CAAFtd,CAAPqR;AAGF;;AAAA,UAAMhiC,CAAAA,GAAarK,CAAAA,CAAK0H,KAAL1H,CAAW,CAAXA,EAAckH,CAAdlH,EAAoB8tB,MAApB9tB,CAA2B6H,CAAAA,CAAQ7H,IAAnCA,EAAyC8tB,MAAzC9tB,CAAgDA,CAAAA,CAAK0H,KAAL1H,CAAWkH,CAAAA,GAAO,CAAlBlH,CAAhDA,CAAnB;AACA,aAAO,IAAIP,CAAAA,CAAAmD,MAAJ,CAAWyH,CAAX,EAAuBL,CAAAA,CAAEnH,IAAzB,EAAyBA,KAAMhC,CAA/B,EAA+BA,KAAWA,CAA1C,EAAqDwrC,CAArD,CAAP;AA3BWxvC;;AAAAA,IAAAA,CAAAA,CAAAgnC,SAAAhnC,GAAAgnC,CAAAhnC,EAObA,CAAAA,CAAAk7C,MAAAl7C,GAAAk7C,CAPal7C;AAObk7C,G/EsEA,E+EtEAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,QAAAA,CAAAA;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,SAAAA,KAAAA,CAAAA,GAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,CAAAA,CAAAA,GAAAA,MAAAA,CAAAA,cAAAA,IAAAA;AAAAA,QAAAA,SAAAA,EAAAA;AAAAA,mBAAAA,KAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,QAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA;AAAAA,OAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,IAAAA,CAAAA,IAAAA,CAAAA,EAAAA,CAAAA,CAAAA,cAAAA,CAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,OAAAA,EAAAA,CAAAA,EAAAA,CAAAA,CAAAA;AAAAA,KAAAA,EAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,eAAAA,CAAAA,GAAAA;AAAAA,aAAAA,WAAAA,GAAAA,CAAAA;AAAAA;;AAAAA,MAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,SAAAA,GAAAA,SAAAA,CAAAA,GAAAA,MAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA,CAAAA,SAAAA,EAAAA,IAAAA,CAAAA,EAAAA,CAAAA;AAAAA,KAAAA,CAAAA;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,MAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,UAAAA,CAAAA,GAAAA,cAAAA,OAAAA,MAAAA,IAAAA,CAAAA,CAAAA,MAAAA,CAAAA,QAAAA,CAAAA;AAAAA,UAAAA,CAAAA,CAAAA,EAAAA,OAAAA,CAAAA;AAAAA,UAAAA,CAAAA;AAAAA,UAAAA,CAAAA;AAAAA,UAAAA,CAAAA,GAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA;AAAAA,UAAAA,CAAAA,GAAAA,EAAAA;;AAAAA,UAAAA;AAAAA,eAAAA,CAAAA,KAAAA,CAAAA,KAAAA,CAAAA,IAAAA,CAAAA,KAAAA,CAAAA,KAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,IAAAA,EAAAA,EAAAA,IAAAA,GAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,KAAAA;AAAAA,OAAAA,CAAAA,OAAAA,CAAAA,EAAAA;AAAAA,QAAAA,CAAAA,GAAAA;AAAAA,UAAAA,KAAAA,EAAAA;AAAAA,SAAAA;AAAAA,OAAAA,SAAAA;AAAAA,YAAAA;AAAAA,UAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,IAAAA,KAAAA,CAAAA,GAAAA,CAAAA,CAAAA,MAAAA,KAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA;AAAAA,SAAAA,SAAAA;AAAAA,cAAAA,CAAAA,EAAAA,MAAAA,CAAAA,CAAAA,KAAAA;AAAAA;AAAAA;;AAAAA,aAAAA,CAAAA;AAAAA,KAAAA;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,YAAAA,IAAAA,UAAAA,CAAAA,EAAAA;AAAAA,UAAAA,CAAAA,IAAAA,CAAAA,CAAAA,UAAAA,EAAAA,OAAAA,CAAAA;AAAAA,UAAAA,CAAAA,GAAAA,EAAAA;AAAAA,UAAAA,QAAAA,CAAAA,EAAAA,KAAAA,IAAAA,CAAAA,IAAAA,CAAAA,EAAAA,MAAAA,CAAAA,cAAAA,CAAAA,IAAAA,CAAAA,CAAAA,EAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,aAAAA,CAAAA,CAAAA,OAAAA,GAAAA,CAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;ACTA,QAAA3W,CAAAA,GAAA/jC,CAAAA,CAAA,EAAAA,CAAA;AAAA,QACAoC,CAAAA,GAAApC,CAAAA,CAAA,CAAAA,CADA;AAAA,QAEAgf,CAAAA,GAAApE,CAAAA,CAAA5a,CAAAA,CAAA,CAAAA,CAAA4a,CAFA;AAAA,QAKA2jB,CAAAA,GAAAv+B,CAAAA,CAAA,EAAAA,CALA;AAAA,QAOAymC,CAAAA,GAAA,UAAAjqB,CAAA,EAAAA;AAAA,eAAAiqB,CAAA,GAAAA;AAAAA,eAAAA,SAAAA,CAAAA,IAAAA,CAAAA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,SAAAA,CAAAA,IAAAA,IAAAA;AAKA;;AAAA,aAL6BhqB,CAAAA,CAAAgqB,CAAAhqB,EAAAD,CAAAC,CAAAA,EAC3BgqB,CAAAA,CAAA5kC,SAAA4kC,CAAArd,GAAAqd,GAAA,UAAIpd,CAAJ,EAA2C/mB,CAA3C,EAA2CA;AAEzC,eAAO,CADQ44C,CAAAA,CAAK54C,CAAAA,CAAO,CAAPA,CAAL44C,EAAgB54C,CAAAA,CAAO,CAAPA,CAAhB44C,EAA2B54C,CAAAA,CAAO,CAAPA,CAA3B44C,EAAsC5pC,KAAK1D,KAA3CstC,EAAkD5pC,KAAKiuB,IAAvD2b,EAA6D5pC,KAAK+tB,MAAlE6b,EAA0E5pC,KAAKguB,MAA/E4b,CACR,CAAP;AAD8F5b,OAFrE7iB,EAK7BgqB,CAAA;AALA,KAAA,CAA6B1C,CAAAA,CAAA9D,IAA7B,CAPA;;AAcA,aAAgBib,CAAhB,CAAqBt7C,CAArB,EAAgC2D,CAAhC,EAA2CjD,CAA3C,EAAsDsN,CAAtD,EAAqE2xB,CAArE,EAAmFF,CAAnF,EAAoGC,CAApG,EAAoGA;AAC5F,UAAAh7B,CAAAA,GAAAC,CAAAA,CAAAya,CAAAA,CAAA/X,QAAA+X,CAAA9X,oBAAA8X,CAAApf,CAAAA,CAAA+C,IAAAqc,EAAAqgB,CAAArgB,EAAAzb,CAAAA,CAAAZ,IAAAqc,EAAAsgB,CAAAtgB,EAAA1e,CAAAA,CAAAqC,IAAAqc,CAAAza,EAAA,CAAAA,CAAA;AAAA,UAACiD,CAAAA,GAAAlD,CAAAA,CAAA,CAAAA,CAAD;AAAA,UAAIoD,CAAAA,GAAApD,CAAAA,CAAA,CAAAA,CAAJ;AAAA,UAAOmD,CAAAA,GAAAnD,CAAAA,CAAA,CAAAA,CAAP;AAAA,UAGAoR,CAAAA,GAAS,IAAItT,CAAAA,CAAAmD,MAAJ,CAAW,CAACiC,CAAD,EAAIE,CAAJ,CAAX,EAAmB9H,CAAAA,CAAE4F,IAArB,CAHT;AAKN,UAAIwZ,CAAAA,CAAKvb,aAALub,CAAmBha,IAAnBga,CAAwBtJ,CAAxBsJ,EAAgC1e,CAAhC0e,EAAmC,UAACpf,CAAD,EAAI2D,CAAJ,EAAIA;AAAM,eAAAA,CAAA;AAAAA,OAA7Cyb,EAA6Czb,CAAG,CAAhDyb,MAA0DtJ,CAA9D,EACE,MAAM,IAAI3O,KAAJ,CAAU,wCAAV,CAAN;AAKF,aAFAw3B,CAAAA,CAAAW,QAAAX,CAAS3+B,CAAAA,CAAE6T,SAAX8qB,EAAsBh7B,CAAAA,CAAEkQ,SAAxB8qB,EAAmC7oB,CAAAA,CAAOjC,SAA1C8qB,EAAqDc,CAArDd,EAA6De,CAA7Df,EAAqE3wB,CAArE2wB,EAA4EgB,CAA5EhB,EAAkF/2B,CAAlF+2B,EAAqF72B,CAArF62B,EAAwF92B,CAAxF82B,GAEO7oB,CAAP;AAnBWlW;;AAAAA,IAAAA,CAAAA,CAAAinC,OAAAjnC,GAAAinC,CAAAjnC,EAObA,CAAAA,CAAA07C,IAAA17C,GAAA07C,CAPa17C;AAOb07C,GhFiEA,EgFjEAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,QAAAA,CAAAA;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,SAAAA,KAAAA,CAAAA,GAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,CAAAA,CAAAA,GAAAA,MAAAA,CAAAA,cAAAA,IAAAA;AAAAA,QAAAA,SAAAA,EAAAA;AAAAA,mBAAAA,KAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,QAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA;AAAAA,OAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,IAAAA,CAAAA,IAAAA,CAAAA,EAAAA,CAAAA,CAAAA,cAAAA,CAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,OAAAA,EAAAA,CAAAA,EAAAA,CAAAA,CAAAA;AAAAA,KAAAA,EAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,eAAAA,CAAAA,GAAAA;AAAAA,aAAAA,WAAAA,GAAAA,CAAAA;AAAAA;;AAAAA,MAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,SAAAA,GAAAA,SAAAA,CAAAA,GAAAA,MAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA,CAAAA,SAAAA,EAAAA,IAAAA,CAAAA,EAAAA,CAAAA;AAAAA,KAAAA,CAAAA;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,MAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,UAAAA,CAAAA,GAAAA,cAAAA,OAAAA,MAAAA,IAAAA,CAAAA,CAAAA,MAAAA,CAAAA,QAAAA,CAAAA;AAAAA,UAAAA,CAAAA,CAAAA,EAAAA,OAAAA,CAAAA;AAAAA,UAAAA,CAAAA;AAAAA,UAAAA,CAAAA;AAAAA,UAAAA,CAAAA,GAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA;AAAAA,UAAAA,CAAAA,GAAAA,EAAAA;;AAAAA,UAAAA;AAAAA,eAAAA,CAAAA,KAAAA,CAAAA,KAAAA,CAAAA,IAAAA,CAAAA,KAAAA,CAAAA,KAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,IAAAA,EAAAA,EAAAA,IAAAA,GAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,KAAAA;AAAAA,OAAAA,CAAAA,OAAAA,CAAAA,EAAAA;AAAAA,QAAAA,CAAAA,GAAAA;AAAAA,UAAAA,KAAAA,EAAAA;AAAAA,SAAAA;AAAAA,OAAAA,SAAAA;AAAAA,YAAAA;AAAAA,UAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,IAAAA,KAAAA,CAAAA,GAAAA,CAAAA,CAAAA,MAAAA,KAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA;AAAAA,SAAAA,SAAAA;AAAAA,cAAAA,CAAAA,EAAAA,MAAAA,CAAAA,CAAAA,KAAAA;AAAAA;AAAAA;;AAAAA,aAAAA,CAAAA;AAAAA,KAAAA;;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;ACdA,QAAAlX,CAAAA,GAAAhkC,CAAAA,CAAA,EAAAA,CAAA;AAAA,QACAoC,CAAAA,GAAApC,CAAAA,CAAA,CAAAA,CADA;AAAA,QAIA4mC,CAAAA,GAAA,UAAApqB,CAAA,EAAAA;AAAA,eAAAoqB,CAAA,GAAAA;AAAAA,eAAAA,SAAAA,CAAAA,IAAAA,CAAAA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,SAAAA,CAAAA,IAAAA,IAAAA;AAKA;;AAAA,aALoCnqB,CAAAA,CAAAmqB,CAAAnqB,EAAAD,CAAAC,CAAAA,EAClCmqB,CAAAA,CAAA/kC,SAAA+kC,CAAAxd,GAAAwd,GAAA,UAAIvd,CAAJ,EAA2C/mB,CAA3C,EAA2CA;AAEzC,eAAO,CADQ64C,CAAAA,CAAY74C,CAAAA,CAAO,CAAPA,CAAZ64C,EAAuB7pC,KAAKo6B,IAA5ByP,EAAkC7pC,KAAKssB,KAAvCud,CACR,CAAP;AADsDvd,OAFtBnhB,EAKpCmqB,CAAA;AALA,KAAA,CAAoC5C,CAAAA,CAAAyH,WAApC,CAJA;;AAWA,aAAgB0P,CAAhB,CAA4BxuC,CAA5B,EAAuC++B,CAAvC,EAAuD9N,CAAvD,EAAuDA;AAKrD,WAJM,IAAAt5B,CAAAA,GAAAC,CAAAA,CAAAoI,CAAAA,CAAAhK,IAAA4B,EAAA,CAAAA,CAAA,EAACmD,CAAAA,GAAApD,CAAAA,CAAA,CAAAA,CAAD,EAAI86B,CAAAA,GAAA96B,CAAAA,CAAA,CAAAA,CAAJ,EAAO82C,CAAAA,GAAA92C,CAAAA,CAAA,CAAAA,CAAP,EAAUkyC,CAAAA,GAAAlyC,CAAAA,CAAA,CAAAA,CAAV,EACAoR,CAAAA,GAAS,IAAItT,CAAAA,CAAAmD,MAAJ,CAAW,CAACmC,CAAD,EAAI03B,CAAJ,EAAOgc,CAAP,EAAU5E,CAAV,CAAX,EAAyB7pC,CAAAA,CAAEnH,IAA3B,CADT,EAEAm4B,CAAAA,GAAIhxB,CAAAA,CAAE8G,SAFN,EAGAu7B,CAAAA,GAAIt5B,CAAAA,CAAOjC,SAHX,EAIG2hC,CAAAA,GAAK,CAAd,EAAiBA,CAAAA,GAAK1tC,CAAAA,GAAI03B,CAA1B,EAA6BgW,CAAAA,EAA7B,EACE,KAAK,IAAIiG,CAAAA,GAAK,CAAd,EAAiBA,CAAAA,GAAKD,CAAAA,GAAI5E,CAA1B,EAA6B6E,CAAAA,EAA7B,EAAmC;AACjC,YAAM32C,CAAAA,GAAQ0wC,CAAAA,GAAKgG,CAALhG,GAASoB,CAATpB,GAAaiG,CAA3B;AACArM,QAAAA,CAAAA,CAAEtqC,CAAFsqC,CAAAA,GAAWrR,CAAAA,CAAEj5B,CAAFi5B,CAAAA,GAAWC,CAAXD,GAAmB+N,CAAAA,CAAK0J,CAAAA,GAAKhW,CAAVsM,CAA9BsD;AAIJ;;AAAA,aAAOt5B,CAAP;AAnBWlW;;AAAAA,IAAAA,CAAAA,CAAAonC,cAAApnC,GAAAonC,CAAApnC,EAObA,CAAAA,CAAA27C,WAAA37C,GAAA27C,CAPa37C;AAOb27C,GjFoEA,EiFpEAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,QAAAA,CAAAA;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,SAAAA,KAAAA,CAAAA,GAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,CAAAA,CAAAA,GAAAA,MAAAA,CAAAA,cAAAA,IAAAA;AAAAA,QAAAA,SAAAA,EAAAA;AAAAA,mBAAAA,KAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,QAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA;AAAAA,OAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,IAAAA,CAAAA,IAAAA,CAAAA,EAAAA,CAAAA,CAAAA,cAAAA,CAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,OAAAA,EAAAA,CAAAA,EAAAA,CAAAA,CAAAA;AAAAA,KAAAA,EAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,eAAAA,CAAAA,GAAAA;AAAAA,aAAAA,WAAAA,GAAAA,CAAAA;AAAAA;;AAAAA,MAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,SAAAA,GAAAA,SAAAA,CAAAA,GAAAA,MAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA,CAAAA,SAAAA,EAAAA,IAAAA,CAAAA,EAAAA,CAAAA;AAAAA,KAAAA,CAAAA;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;ACXA,QAAAlX,CAAAA,GAAAjkC,CAAAA,CAAA,EAAAA,CAAA;AAAA,QACAoC,CAAAA,GAAApC,CAAAA,CAAA,CAAAA,CADA;AAAA,QAIA6mC,CAAAA,GAAA,UAAArqB,CAAA,EAAAA;AAAA,eAAAqqB,CAAA,GAAAA;AAAAA,eAAAA,SAAAA,CAAAA,IAAAA,CAAAA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,SAAAA,CAAAA,IAAAA,IAAAA;AAKA;;AAAA,aAL8CpqB,CAAAA,CAAAoqB,CAAApqB,EAAAD,CAAAC,CAAAA,EAC5CoqB,CAAAA,CAAAhlC,SAAAglC,CAAAzd,GAAAyd,GAAA,UAAIxd,CAAJ,EAA2C/mB,CAA3C,EAA2CA;AAEzC,eAAO,CADQg5C,CAAAA,CAAsBh5C,CAAAA,CAAO,CAAPA,CAAtBg5C,EAAiCh5C,CAAAA,CAAO,CAAPA,CAAjCg5C,EAA4Ch5C,CAAAA,CAAO,CAAPA,CAA5Cg5C,EAAuDhqC,KAAK8rB,OAA5Dke,CACR,CAAP;AAD2Ele,OAFjC3gB,EAK9CoqB,CAAA;AALA,KAAA,CAA8C5C,CAAAA,CAAA2H,qBAA9C,CAJA;;AAWA,aAAgB0P,CAAhB,CAAsC3uC,CAAtC,EAAiDixB,CAAjD,EAAgEr6B,CAAhE,EAA2E65B,CAA3E,EAA2EA;AAOzE,WANA,IAAM0X,CAAAA,GAAkBnoC,CAAAA,CAAEhK,IAA1B,EACM+E,CAAAA,GAAIotC,CAAAA,CAAgB,CAAhBA,CADV,EAEM1V,CAAAA,GAAI0V,CAAAA,CAAgB,CAAhBA,CAFV,EAKIC,CAAAA,GAAc,CALlB,EAMSl1C,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAIi1C,CAAAA,CAAgBpyC,MAApC,EAA4C7C,CAAAA,EAA5C,EACEk1C,CAAAA,IAAeD,CAAAA,CAAgBj1C,CAAhBi1C,CAAfC;;AAgBF,WAdA,IAOIwG,CAPJ,EAQIzd,CARJ,EASI+W,CATJ,EAUI2G,CAVJ,EAWIC,CAXJ,EAYIC,CAZJ,EAAMhmC,CAAAA,GAAS,IAAItT,CAAAA,CAAAmD,MAAJ,CAAWoH,CAAAA,CAAEhK,IAAb,EAAmBgK,CAAAA,CAAEnH,IAArB,CAAf,EAEMm4B,CAAAA,GAAIhxB,CAAAA,CAAE8G,SAFZ,EAGMu7B,CAAAA,GAAIt5B,CAAAA,CAAOjC,SAHjB,EAIMuhC,CAAAA,GAAYpX,CAAAA,CAAM1uB,UAJxB,EAKM+lC,CAAAA,GAAQ1xC,CAAAA,CAAE2L,UALhB,EAcSkmC,CAAAA,GAAK,CAAd,EAAiBA,CAAAA,GAAK1tC,CAAAA,GAAI03B,CAA1B,EAA6BgW,CAAAA,EAA7B,EAAmC;AAEjCqG,QAAAA,CAAAA,GAAAA,CADAD,CAAAA,GAAiBpG,CAAAA,GAAKL,CACtB0G,IAA2B1G,CAA3B0G,EACAC,CAAAA,GAAiBtG,CAAAA,GAAKhW,CADtBqc,EAIAF,CAAAA,GAAO,CAJPE;;AAKA,aAAS57C,CAAAA,GAAI27C,CAAb,EAA6B37C,CAAAA,GAAI47C,CAAjC,EAAiCA,EAAW57C,CAA5C,EACE07C,CAAAA,IAAQ5d,CAAAA,CAAE99B,CAAF89B,CAAR4d;;AAEFzd,QAAAA,CAAAA,GAAOyd,CAAAA,GAAOxG,CAAdjX,EAGAyd,CAAAA,GAAO,CAHPzd;;AAIA,aAASj+B,CAAAA,GAAI27C,CAAb,EAA6B37C,CAAAA,GAAI47C,CAAjC,EAAiCA,EAAW57C,CAA5C,EACE07C,CAAAA,IAAQt3C,IAAAA,CAAKyJ,GAALzJ,CAAS05B,CAAAA,CAAE99B,CAAF89B,CAAAA,GAAOG,CAAhB75B,EAAsB,CAAtBA,CAARs3C;;AAEF1G,QAAAA,CAAAA,GAAW0G,CAAAA,GAAOxG,CAAlBF;;AAGA,aAASh1C,CAAAA,GAAI27C,CAAb,EAA6B37C,CAAAA,GAAI47C,CAAjC,EAAiCA,EAAW57C,CAA5C,EACEmvC,CAAAA,CAAEnvC,CAAFmvC,CAAAA,GAAOgG,CAAAA,CAAU0G,CAAV1G,CAAAA,IAAU0G,CAAoB/d,CAAAA,CAAE99B,CAAF89B,CAAAA,GAAOG,CAA3B4d,IAAmCz3C,IAAAA,CAAKmkC,IAALnkC,CAAU4wC,CAAAA,GAAWzX,CAArBn5B,CAA7C+wC,IAA8EC,CAAAA,CAAMyG,CAANzG,CAArFjG;AAIJ;;AAAA,aAAOt5B,CAAP;AAxDWlW;;AAAAA,IAAAA,CAAAA,CAAAqnC,wBAAArnC,GAAAqnC,CAAArnC,EAObA,CAAAA,CAAA87C,qBAAA97C,GAAA87C,CAPa97C;AAOb87C,GlFoEA,EkFpEAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,QAAAA,CAAAA;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,SAAAA,KAAAA,CAAAA,GAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,CAAAA,CAAAA,GAAAA,MAAAA,CAAAA,cAAAA,IAAAA;AAAAA,QAAAA,SAAAA,EAAAA;AAAAA,mBAAAA,KAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,QAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA;AAAAA,OAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,IAAAA,CAAAA,IAAAA,CAAAA,EAAAA,CAAAA,CAAAA,cAAAA,CAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,OAAAA,EAAAA,CAAAA,EAAAA,CAAAA,CAAAA;AAAAA,KAAAA,EAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,eAAAA,CAAAA,GAAAA;AAAAA,aAAAA,WAAAA,GAAAA,CAAAA;AAAAA;;AAAAA,MAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,SAAAA,GAAAA,SAAAA,CAAAA,GAAAA,MAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA,CAAAA,SAAAA,EAAAA,IAAAA,CAAAA,EAAAA,CAAAA;AAAAA,KAAAA,CAAAA;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,YAAAA,IAAAA,UAAAA,CAAAA,EAAAA;AAAAA,UAAAA,CAAAA,IAAAA,CAAAA,CAAAA,UAAAA,EAAAA,OAAAA,CAAAA;AAAAA,UAAAA,CAAAA,GAAAA,EAAAA;AAAAA,UAAAA,QAAAA,CAAAA,EAAAA,KAAAA,IAAAA,CAAAA,IAAAA,CAAAA,EAAAA,MAAAA,CAAAA,cAAAA,CAAAA,IAAAA,CAAAA,CAAAA,EAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,aAAAA,CAAAA,CAAAA,OAAAA,GAAAA,CAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;ACXA,QAAApX,CAAAA,GAAAlkC,CAAAA,CAAA,EAAAA,CAAA;AAAA,QACAoC,CAAAA,GAAApC,CAAAA,CAAA,CAAAA,CADA;AAAA,QAEAgf,CAAAA,GAAApE,CAAAA,CAAA5a,CAAAA,CAAA,CAAAA,CAAA4a,CAFA;AAAA,QAKAqsB,CAAAA,GAAA,UAAAzqB,CAAA,EAAAA;AAAA,eAAAyqB,CAAA,GAAAA;AAAAA,eAAAA,SAAAA,CAAAA,IAAAA,CAAAA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,SAAAA,CAAAA,IAAAA,IAAAA;AAKA;;AAAA,aAL4BxqB,CAAAA,CAAAwqB,CAAAxqB,EAAAD,CAAAC,CAAAA,EAC1BwqB,CAAAA,CAAAplC,SAAAolC,CAAA7d,GAAA6d,GAAA,UAAI5d,CAAJ,EAA2C/mB,CAA3C,EAA2CA;AAEzC,eAAO,CADQq5C,CAAAA,CAAIr5C,CAAAA,CAAO,CAAPA,CAAJq5C,EAAerqC,KAAK1D,KAApB+tC,EAA2BrqC,KAAKiuB,IAAhCoc,EAAsCrqC,KAAKo6B,IAA3CiQ,EAAiDrqC,KAAKhM,IAAtDq2C,CACR,CAAP;AADqEr2C,OAF7CmX,EAK5BwqB,CAAA;AALA,KAAA,CAA4B/C,CAAAA,CAAA0X,GAA5B,CALA;;AAYA,aAAgBD,CAAhB,CAAoBhvC,CAApB,EAA+BiB,CAA/B,EAA8C2xB,CAA9C,EAA4DmM,CAA5D,EAA0EpmC,CAA1E,EAA0EA;AAMxE,WALA,IAAMoC,CAAAA,GAAIiF,CAAAA,CAAEhK,IAAFgK,CAAO,CAAPA,CAAV,EACMyyB,CAAAA,GAAIzyB,CAAAA,CAAEhK,IAAFgK,CAAO,CAAPA,CADV,EAEMgxB,CAAAA,GAAIhxB,CAAAA,CAAE8G,SAFZ,EAGIshC,CAAAA,GAAc,CAHlB,EAKSl1C,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAI8M,CAAAA,CAAEhK,IAAFgK,CAAOjK,MAA3B,EAA2BA,EAAU7C,CAArC,EACEk1C,CAAAA,IAAepoC,CAAAA,CAAEhK,IAAFgK,CAAO9M,CAAP8M,CAAfooC;;AAGF,UAAM8G,CAAAA,GAAiB9G,CAAAA,GAAc3V,CAArC;AAAA,UAGM1pB,CAAAA,GAAS,IAAItT,CAAAA,CAAAmD,MAAJ,CAAWoH,CAAAA,CAAEhK,IAAb,EAAmBgK,CAAAA,CAAEnH,IAArB,CAHf;AAAA,UAIMwpC,CAAAA,GAAc,IAAI5qC,KAAJ,CAAU4a,CAAAA,CAAK5Z,SAAL4Z,CAAe1Z,IAAf0Z,CAAoBrS,CAAAA,CAAEhK,IAAtBqc,CAAV,CAJpB;;AAOA,WAASnf,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAImvC,CAAAA,CAAEtsC,MAAtB,EAAsBA,EAAU7C,CAAhC,EACEmvC,CAAAA,CAAEnvC,CAAFmvC,CAAAA,GAAOtD,CAAPsD;;AAWF,WAPA,IACM8M,CAAAA,GAAmB,IAAIvnC,YAAJ,CAAIA,CADH6qB,CAAAA,GAAI95B,CAAJ85B,GAAW,CACR7qB,IADawgC,CACjB,CADzB,EAGMgH,CAAAA,GAAgBnuC,CAAAA,GAAQtI,CAH9B,EAIM02C,CAAAA,GAAAA,CAAU12C,CAAAA,GAAO,CAAjB02C,IAAsB,CAJ5B,EAOSt6C,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAIgG,CAApB,EAAoBA,EAAKhG,CAAzB,EAA4B;AAE1Bsd,QAAAA,CAAAA,CAAKxR,QAALwR,CAAcvR,GAAduR,CAAkB88B,CAAlB98B,EAAoC2e,CAApC3e,EAAuCg9B,CAAAA,GAASjH,CAAhD/1B,EAA6D68B,CAAAA,GAAiBn6C,CAA9Esd,EAAiF68B,CAAjF78B;;AAGA,aAAK,IAAI1e,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAIgF,CAApB,EAAoBA,EAAQhF,CAA5B,EACE0e,CAAAA,CAAKxR,QAALwR,CAAcrR,IAAdqR,CAAmBgwB,CAAnBhwB,EAAsB88B,CAAtB98B,EAAwC68B,CAAAA,GAAiBn6C,CAAzDsd,EAA4D1e,CAAAA,GAAIy0C,CAAhE/1B,EAA6E+1B,CAA7E/1B,EAA0F+8B,CAA1F/8B;;AAGF,aAAS1e,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAI8+B,CAApB,EAAoBA,EAAK9+B,CAAzB,EAA4B;AAC1B,cAAM27C,CAAAA,GAAkBv6C,CAAAA,GAAIm6C,CAAJn6C,GAAqBpB,CAAAA,GAAIy0C,CAAjD;AAGA/1B,UAAAA,CAAAA,CAAKvY,eAALuY,CAAqBgwB,CAArBhwB,EAAwBgwB,CAAxBhwB,EAA2Bi9B,CAA3Bj9B,EAA4Ci9B,CAAAA,GAAkBlH,CAA9D/1B,EAA2E+1B,CAA3E/1B,GAGAA,CAAAA,CAAKxR,QAALwR,CAAcrR,IAAdqR,CACIgwB,CADJhwB,EACO88B,CADP98B,EACyBi9B,CADzBj9B,EACyBi9B,CAAkB37C,CAAAA,GAAIgF,CAAJhF,GAAW,CAA7B27C,IAAkClH,CAD3D/1B,EACwE+1B,CADxE/1B,EACqF+8B,CADrF/8B,CAHAA,EAOAA,CAAAA,CAAKxR,QAALwR,CAAcrR,IAAdqR,CAAmBgwB,CAAnBhwB,EAAsB88B,CAAtB98B,EAAwCi9B,CAAxCj9B,EAAwCi9B,CAAkB37C,CAAAA,GAAI,CAAtB27C,IAA2BlH,CAAnE/1B,EAAgF+1B,CAAhF/1B,EAAgF+1B,CAAcgH,CAA9F/8B,CAPAA;AAO8F+8B;AAUlG;;AAAA,aANA/8B,CAAAA,CAAKxR,QAALwR,CAAcnR,IAAdmR,CAAmBgwB,CAAnBhwB,EAAsBgwB,CAAtBhwB,EAAyB,CAAzBA,EAA4B,CAA5BA,EAA+BA,CAAAA,CAAK5Z,SAAL4Z,CAAe1Z,IAAf0Z,CAAoBrS,CAAAA,CAAEhK,IAAtBqc,CAA/BA,EAAqDrc,CAAQ48B,CAA7DvgB,GAEAA,CAAAA,CAAKxR,QAALwR,CAAclR,GAAdkR,CAAkBgwB,CAAlBhwB,EAAqB2e,CAArB3e,EAAwB,CAAxBA,EAA2B,CAA3BA,EAA8BA,CAAAA,CAAK5Z,SAAL4Z,CAAe1Z,IAAf0Z,CAAoBrS,CAAAA,CAAEhK,IAAtBqc,CAA9BA,CAFAA,EAIAtJ,CAAAA,CAAOjC,SAAPiC,CAAiBjQ,GAAjBiQ,CAAqBs5B,CAArBt5B,CAJAsJ,EAMOtJ,CAAP;AAlEWlW;;AAAAA,IAAAA,CAAAA,CAAAynC,MAAAznC,GAAAynC,CAAAznC,EAObA,CAAAA,CAAAm8C,GAAAn8C,GAAAm8C,CAPan8C;AAObm8C,GnFmEA,EmFnEAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;ACPA,QAAAC,CAAAA,GAAA,YAAA;AAAA,eAAAA,CAAA,GAAAA,CAmCA;;AAAA,aAhCEA,CAAAA,CAAA/5C,SAAA+5C,CAAA1e,UAAA0e,GAAA,UAAWze,CAAX,EAAWA;AACT7rB,aAAK1D,KAAL0D,GAAa6rB,CAAAA,CAAWE,QAAXF,CAAoB,OAApBA,EAA6B,IAA7BA,CAAb7rB,EACAA,KAAKiuB,IAALjuB,GAAY6rB,CAAAA,CAAWE,QAAXF,CAAoB,MAApBA,EAA4B,GAA5BA,CADZ7rB,EAEAA,KAAKo6B,IAALp6B,GAAY6rB,CAAAA,CAAWE,QAAXF,CAAoB,MAApBA,EAA4B,CAA5BA,CAFZ7rB,EAGAA,KAAKhM,IAALgM,GAAY6rB,CAAAA,CAAWK,MAAXL,CAAkB,MAAlBA,CAHZ7rB;AAG8B,OAJhCsqC,EAOAA,CAAAA,CAAA/5C,SAAA+5C,CAAAne,WAAAme,GAAA,UAAYt5C,CAAZ,EAAYA;AACV,eAAA,EAAA,CAAKA,CAAL,IAAiC,MAAlBA,CAAAA,CAAOI,MAAtB,KAAsBA,EAKlBJ,CAAAA,CAAO,CAAPA,CAAAA,CAAUK,IAAVL,CAAeI,MAAfJ,GAAwB,CALNI,KASf4O,KAAKosB,eAALpsB,CAAqBhP,CAArBgP,CATP;AAS4BhP,OAjB9Bs5C,EAoBUA,CAAAA,CAAA/5C,SAAA+5C,CAAAle,eAAAke,GAAV,UAA0Bt5C,CAA1B,EAA0BA;AACxB,eAAuB,cAAnBA,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IAAS,IAAgC,cAAnBlD,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IAA9C;AAA8CA,OArBhDo2C,EAgCFA,CAAA;AAnCA,KAAA,EAAA;;AAAsBp8C,IAAAA,CAAAA,CAAAo8C,GAAAp8C,GAAAo8C,CAAAp8C;AAAAo8C,GpF0EtB,EoF1EsBA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,QAAAA,CAAAA;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,SAAAA,KAAAA,CAAAA,GAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,CAAAA,CAAAA,GAAAA,MAAAA,CAAAA,cAAAA,IAAAA;AAAAA,QAAAA,SAAAA,EAAAA;AAAAA,mBAAAA,KAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,QAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA;AAAAA,OAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,IAAAA,CAAAA,IAAAA,CAAAA,EAAAA,CAAAA,CAAAA,cAAAA,CAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,OAAAA,EAAAA,CAAAA,EAAAA,CAAAA,CAAAA;AAAAA,KAAAA,EAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,eAAAA,CAAAA,GAAAA;AAAAA,aAAAA,WAAAA,GAAAA,CAAAA;AAAAA;;AAAAA,MAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,SAAAA,GAAAA,SAAAA,CAAAA,GAAAA,MAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA,CAAAA,SAAAA,EAAAA,IAAAA,CAAAA,EAAAA,CAAAA;AAAAA,KAAAA,CAAAA;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;ACLtB,QAAAzX,CAAAA,GAAAnkC,CAAAA,CAAA,EAAAA,CAAA;AAAA,QACAoC,CAAAA,GAAApC,CAAAA,CAAA,CAAAA,CADA;AAAA,QAEAkR,CAAAA,GAAAlR,CAAAA,CAAA,CAAAA,CAFA;AAAA,QAKA2lC,CAAAA,GAAA,UAAAnpB,CAAA,EAAAA;AAAA,eAAAmpB,CAAA,GAAAA;AAAAA,eAAAA,SAAAA,CAAAA,IAAAA,CAAAA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,SAAAA,CAAAA,IAAAA,IAAAA;AAMA;;AAAA,aANoClpB,CAAAA,CAAAkpB,CAAAlpB,EAAAD,CAAAC,CAAAA,EAClCkpB,CAAAA,CAAA9jC,SAAA8jC,CAAAvc,GAAAuc,GAAA,UAAItc,CAAJ,EAA2C/mB,CAA3C,EAA2CA;AAGzC,eAAO,CADH45C,CAAAA,CAAY55C,CAAAA,CAAO,CAAPA,CAAZ45C,EAAuB5qC,KAAKlB,OAA5B8rC,EAAqC5qC,KAAK8uB,eAA1C8b,EAA2D5qC,KAAKtB,WAAhEksC,EAA6E5qC,KAAKrB,IAAlFisC,EAAwF5qC,KAAKnH,OAA7F+xC,CACG,CAAP;AADiG/xC,OAHjEsS,EAMpCkpB,CAAA;AANA,KAAA,CAAoCxB,CAAAA,CAAAhE,WAApC,CALA;;AAKa3gC,IAAAA,CAAAA,CAAAmmC,cAAAnmC,GAAAmmC,CAAAnmC;;AAQb,QAAAknC,CAAAA,GAAA,UAAAlqB,CAAA,EAAAA;AAAA,eAAAkqB,CAAA,GAAAA;AAAAA,eAAAA,SAAAA,CAAAA,IAAAA,CAAAA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,SAAAA,CAAAA,IAAAA,IAAAA;AAKA;;AAAA,aAL0CjqB,CAAAA,CAAAiqB,CAAAjqB,EAAAD,CAAAC,CAAAA,EACxCiqB,CAAAA,CAAA7kC,SAAA6kC,CAAAtd,GAAAsd,GAAA,UAAIrd,CAAJ,EAA2C/mB,CAA3C,EAA2CA;AAEzC,eAAO,CADQ65C,CAAAA,CAAkB75C,CAAAA,CAAO,CAAPA,CAAlB65C,CACR,CAAP;AADwC,OAFF1/B,EAK1CiqB,CAAA;AALA,KAAA,CAA0CvC,CAAAA,CAAA7D,iBAA1C,CAAA;;AAAa9gC,IAAAA,CAAAA,CAAAknC,oBAAAlnC,GAAAknC,CAAAlnC;;AAOb,QAAA0nC,CAAAA,GAAA,UAAA1qB,CAAA,EAAAA;AAAA,eAAA0qB,CAAA,GAAAA;AAAAA,eAAAA,SAAAA,CAAAA,IAAAA,CAAAA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,SAAAA,CAAAA,IAAAA,IAAAA;AAKA;;AAAA,aALgCzqB,CAAAA,CAAAyqB,CAAAzqB,EAAAD,CAAAC,CAAAA,EAC9ByqB,CAAAA,CAAArlC,SAAAqlC,CAAA9d,GAAA8d,GAAA,UAAI7d,CAAJ,EAA2C/mB,CAA3C,EAA2CA;AAEzC,eAAO,CADQ85C,CAAAA,CAAQ95C,CAAAA,CAAO,CAAPA,CAAR85C,EAAmB9qC,KAAKlB,OAAxBgsC,EAAiC9qC,KAAKtB,WAAtCosC,EAAmD9qC,KAAKrB,IAAxDmsC,EAA8D9qC,KAAKnH,OAAnEiyC,CACR,CAAP;AADkFjyC,OAFtDsS,EAKhCyqB,CAAA;AALA,KAAA,CAAgC/C,CAAAA,CAAA5D,OAAhC,CAAA;;AAAa/gC,IAAAA,CAAAA,CAAA0nC,UAAA1nC,GAAA0nC,CAAA1nC;;AAOb,QAAAmnC,CAAAA,GAAA,UAAAnqB,CAAA,EAAAA;AAAA,eAAAmqB,CAAA,GAAAA;AAAAA,eAAAA,SAAAA,CAAAA,IAAAA,CAAAA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,SAAAA,CAAAA,IAAAA,IAAAA;AAKA;;AAAA,aALsClqB,CAAAA,CAAAkqB,CAAAlqB,EAAAD,CAAAC,CAAAA,EACpCkqB,CAAAA,CAAA9kC,SAAA8kC,CAAAvd,GAAAud,GAAA,UAAItd,CAAJ,EAA2C/mB,CAA3C,EAA2CA;AAEzC,eAAO,CADQ+5C,CAAAA,CAAc/5C,CAAAA,CAAO,CAAPA,CAAd+5C,CACR,CAAP;AADoC,OAFF5/B,EAKtCkqB,CAAA;AALA,KAAA,CAAsCxC,CAAAA,CAAA1D,aAAtC,CAAA;;AAQA,aAAgByb,CAAhB,CACI7sC,CADJ,EACmBe,CADnB,EACoCgwB,CADpC,EAC8DpwB,CAD9D,EACqFC,CADrF,EAEI9F,CAFJ,EAEIA;AACF,aAAO8V,CAAAA,CAAAA,CACH,CADGA,EACI5Q,CADJ4Q,EACW7P,CADX6P,EACoBmgB,CADpBngB,EACqCjQ,CADrCiQ,EACkDhQ,CADlDgQ,EACwD9V,CADxD8V,EACiE,CADjEA,EACoE,UAACrgB,CAAD,EAAI2D,CAAJ,EAAIA;AAAM,eAAC3D,CAAAA,GAAI2D,CAAL;AAAKA,OADnF0c,EACuF,UAACrgB,CAAD,EAAI2D,CAAJ,EAAIA;AAAM,eAAC3D,CAAAA,GAAI2D,CAAL;AAAKA,OADtG0c,CAAP;AAIF;;AAAA,aAAgBk8B,CAAhB,CAAkC9sC,CAAlC,EAAkCA;AAChC,aAAO4Q,CAAAA,CAAAA,CAAK,CAALA,EAAW5Q,CAAX4Q,EAAkB,QAAlBA,EAAkB,CAAU,CAA5BA,EAAmC,EAAnCA,EAAuC,EAAvCA,EAA2C,EAA3CA,EAA+C,CAA/CA,EAAkD,UAACrgB,CAAD,EAAI2D,CAAJ,EAAIA;AAAM,eAAC3D,CAAAA,GAAI2D,CAAL;AAAKA,OAAjE0c,EAAqE,UAACrgB,CAAD,EAAI2D,CAAJ,EAAIA;AAAM,eAAC3D,CAAAA,GAAI2D,CAAL;AAAKA,OAApF0c,CAAP;AAGF;;AAAA,aAAgBm8B,CAAhB,CACI/sC,CADJ,EACmBe,CADnB,EACoCJ,CADpC,EAC2DC,CAD3D,EAC2E9F,CAD3E,EAC2EA;AACzE,aAAO8V,CAAAA,CAAAA,CACH,CADGA,EACI5Q,CADJ4Q,EACW7P,CADX6P,EACW7P,CAAS,CADpB6P,EAC2BjQ,CAD3BiQ,EACwChQ,CADxCgQ,EAC8C9V,CAD9C8V,EACuD3T,MAAAA,CAAOgwC,gBAD9Dr8B,EACgF,UAACrgB,CAAD,EAAI2D,CAAJ,EAAIA;AAAM,eAACU,IAAAA,CAAKC,GAALD,CAASrE,CAATqE,EAAYV,CAAZU,CAAD;AAAaV,OADvG0c,EAEH,UAACrgB,CAAD,EAAI2D,CAAJ,EAAIA;AAAM,eAAA3D,CAAA;AAAAA,OAFPqgB,CAAP;AAKF;;AAAA,aAAgBo8B,CAAhB,CAA8BhtC,CAA9B,EAA8BA;AAC5B,aAAO4Q,CAAAA,CAAAA,CACH,CADGA,EACG5Q,CADH4Q,EACU,QADVA,EACU,CAAU,CADpBA,EAC2B,EAD3BA,EAC+B,EAD/BA,EACmC,EADnCA,EACuC3T,MAAAA,CAAOgwC,gBAD9Cr8B,EACgE,UAACrgB,CAAD,EAAI2D,CAAJ,EAAIA;AAAM,eAACU,IAAAA,CAAKC,GAALD,CAASrE,CAATqE,EAAYV,CAAZU,CAAD;AAAaV,OADvF0c,EAC4F,UAACrgB,CAAD,EAAI2D,CAAJ,EAAIA;AAAM,eAAA3D,CAAA;AAAAA,OADtGqgB,CAAP;AAoBF;;AAAA,aAAgBA,CAAhB,CACInQ,CADJ,EAC+BT,CAD/B,EAC8Ce,CAD9C,EAC+DgwB,CAD/D,EACyFpwB,CADzF,EAEIC,CAFJ,EAEoB9F,CAFpB,EAEuCoyC,CAFvC,EAEyDC,CAFzD,EAGIC,CAHJ,EAGIA;AAEFvrC,MAAAA,CAAAA,CAAAtB,YAAAsB,CAAarB,oBAAbqB,CAAkCpB,CAAlCoB,EAAoD7B,CAAAA,CAAM1M,IAA1DuO,EAAgElB,CAAhEkB,EAA6E/G,CAA7E+G,EAAsFjB,CAAtFiB;;AAeA,WAZA,IAAMjO,CAAAA,GACFiO,CAAAA,CAAAtB,YAAAsB,CAAaZ,sBAAbY,CAAoCpB,CAApCoB,EAAsD7B,CAAAA,CAAM1M,IAA5DuO,EAAkE/G,CAAlE+G,EAA2ElB,CAA3EkB,EAAwFjB,CAAxFiB,EAA8Fd,CAA9Fc,CADJ,EAGMwrC,CAAAA,GAAaxrC,CAAAA,CAAA9L,SAAA8L,CAAU5L,IAAV4L,CAAelB,CAAfkB,CAHnB,EAIMyrC,CAAAA,GAAgBzrC,CAAAA,CAAA9L,SAAA8L,CAAUjH,cAAViH,CAAyBlB,CAAzBkB,CAJtB,EAKM0rC,CAAAA,GAAcD,CAAAA,CAAcj6C,MALlC,EAMMwH,CAAAA,GAAOjH,CAAAA,CAAYP,MANzB,EAQMm6C,CAAAA,GAAa3rC,CAAAA,CAAA9L,SAAA8L,CAAU5L,IAAV4L,CAAejO,CAAfiO,CARnB,EASMwE,CAAAA,GAAS,IAAItT,CAAAA,CAAAmD,MAAJ,CAAWtC,CAAX,EAAwBoM,CAAAA,CAAM7J,IAA9B,CATf,EAUMs3C,CAAAA,GAAe5rC,CAAAA,CAAA9L,SAAA8L,CAAUjH,cAAViH,CAAyBjO,CAAzBiO,CAVrB,EAYSrC,CAAAA,GAAM,CAAf,EAAkBA,CAAAA,GAAMguC,CAAxB,EAAoChuC,CAAAA,EAApC,EAA2C;AAKzC,aAJA,IAAMkuC,CAAAA,GAAS7rC,CAAAA,CAAA9L,SAAA8L,CAAUzG,eAAVyG,CAA0BrC,CAA1BqC,EAA+B4rC,CAA/B5rC,CAAf,EACM8rC,CAAAA,GAAWD,CAAAA,CAAO1yC,KAAP0yC,CAAa,CAAbA,CADjB,EAEMpwC,CAAAA,GAAIowC,CAAAA,CAAO1yC,KAAP0yC,CAAa,CAAbA,CAFV,EAISl9C,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAI+8C,CAApB,EAAiC/8C,CAAAA,EAAjC,EACEm9C,CAAAA,CAAS9yC,CAAAA,GAAO0yC,CAAP1yC,GAAqBrK,CAA9Bm9C,CAAAA,GAAmCD,CAAAA,CAAO7yC,CAAAA,GAAO0yC,CAAP1yC,GAAqBrK,CAA5Bk9C,CAAAA,GAAiC5yC,CAAAA,CAAQtK,CAARsK,CAApE6yC;;AAEF,YAAI97C,CAAAA,GAAQq7C,CAAZ;AAAA,YACI5wC,CAAAA,GAAM,CADV;AAAA,YAEIsxC,CAAAA,GAAAA,CAAQ,CAFZ;;AAIA,aAASp9C,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAI68C,CAApB,EAAgC78C,CAAAA,EAAhC,EAAqC;AACnC,cAAMmH,CAAAA,GAASkK,CAAAA,CAAA9L,SAAA8L,CAAUzG,eAAVyG,CAA0BrR,CAA1BqR,EAA6ByrC,CAA7BzrC,CAAf;AACA+rC,UAAAA,CAAAA,GAAAA,CAAQ,CAARA;;AAEA,eAAK,IAAI/2C,CAAAA,GAAIgE,CAAAA,GAAO0yC,CAApB,EAAiC12C,CAAAA,GAAIgE,CAArC,EAA2ChE,CAAAA,EAA3C,EAGE,IAFAyG,CAAAA,CAAEzG,CAAFyG,CAAAA,GAAOqwC,CAAAA,CAAS92C,CAAT82C,CAAAA,GAAch2C,CAAAA,CAAOd,CAAAA,GAAIgE,CAAJhE,GAAW02C,CAAlB51C,CAAdg2C,GAA+C/sC,CAAAA,CAAK/J,CAAAA,GAAI,CAAT+J,CAAtDtD,EAEIA,CAAAA,CAAEzG,CAAFyG,CAAAA,IAAQ0C,CAAAA,CAAM1M,IAAN0M,CAAWnJ,CAAXmJ,CAAR1C,IAAyBA,CAAAA,CAAEzG,CAAFyG,CAAAA,GAAO,CAApC,EAAuC;AACrChB,YAAAA,CAAAA,IACAsxC,CAAAA,GAAAA,CAAQ,CADRtxC;AAEA;AAGJzK;;AAAAA,UAAAA,CAAAA,GAAQ+7C,CAAAA,GAAQ/7C,CAAR+7C,GAAgBT,CAAAA,CAAUt7C,CAAVs7C,EAAiBntC,CAAAA,CAAMvO,GAANuO,CAAU1C,CAAV0C,CAAjBmtC,CAAxBt7C;AAEFA;;AAAAA,QAAAA,CAAAA,GAA0Bu7C,CAAAA,CAAQv7C,CAARu7C,EAAlBrc,CAAAA,GAAiCsc,CAAjCtc,GAA8Dsc,CAAAA,GAAa/wC,CAAzD8wC,CAA1Bv7C,EACAwU,CAAAA,CAAOjQ,GAAPiQ,CAAWqnC,CAAXrnC,EAAmBxU,CAAnBwU,CADAxU;AAIF;;AAAA,aAAOwU,CAAP;AAlGWlW;;AAAAA,IAAAA,CAAAA,CAAAmnC,gBAAAnnC,GAAAmnC,CAAAnnC,EAQbA,CAAAA,CAAA08C,WAAA18C,GAAA08C,CARa18C,EAebA,CAAAA,CAAA28C,iBAAA38C,GAAA28C,CAfa38C,EAmBbA,CAAAA,CAAA48C,OAAA58C,GAAA48C,CAnBa58C,EA0BbA,CAAAA,CAAA68C,aAAA78C,GAAA68C,CA1Ba78C,EA+CbA,CAAAA,CAAAygB,IAAAzgB,GAAAygB,CA/CazgB;AA+CbygB,GrFKA,EqFLAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,QAAAA,CAAAA;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,SAAAA,KAAAA,CAAAA,GAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,CAAAA,CAAAA,GAAAA,MAAAA,CAAAA,cAAAA,IAAAA;AAAAA,QAAAA,SAAAA,EAAAA;AAAAA,mBAAAA,KAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,QAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA;AAAAA,OAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,IAAAA,CAAAA,IAAAA,CAAAA,EAAAA,CAAAA,CAAAA,cAAAA,CAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,OAAAA,EAAAA,CAAAA,EAAAA,CAAAA,CAAAA;AAAAA,KAAAA,EAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,eAAAA,CAAAA,GAAAA;AAAAA,aAAAA,WAAAA,GAAAA,CAAAA;AAAAA;;AAAAA,MAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,SAAAA,GAAAA,SAAAA,CAAAA,GAAAA,MAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA,CAAAA,SAAAA,EAAAA,IAAAA,CAAAA,EAAAA,CAAAA;AAAAA,KAAAA,CAAAA;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;AC1EA,QAAAi9B,CAAAA,GAAAl9C,CAAAA,CAAA,EAAAA,CAAA;AAAA,QAEAkR,CAAAA,GAAAlR,CAAAA,CAAA,CAAAA,CAFA;AAAA,QAKAynC,CAAAA,GAAA,UAAAjrB,CAAA,EAAAA;AAAA,eAAAirB,CAAA,GAAAA;AAAAA,eAAAA,SAAAA,CAAAA,IAAAA,CAAAA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,SAAAA,CAAAA,IAAAA,IAAAA;AAKA;;AAAA,aALkChrB,CAAAA,CAAAgrB,CAAAhrB,EAAAD,CAAAC,CAAAA,EAChCgrB,CAAAA,CAAA5lC,SAAA4lC,CAAAre,GAAAqe,GAAA,UAAIpe,CAAJ,EAA2C/mB,CAA3C,EAA2CA;AAEzC,eAAO,CADQ66C,CAAAA,CAAU76C,CAAAA,CAAO,CAAPA,CAAV66C,EAAqB7rC,KAAKvE,IAA1BowC,EAAgC7rC,KAAK5B,QAArCytC,CACR,CAAP;AADoDztC,OAFtB+M,EAKlCgrB,CAAA;AALA,KAAA,CAAkCyV,CAAAA,CAAArR,UAAlC,CALA;;AAKarsC,IAAAA,CAAAA,CAAAioC,YAAAjoC,GAAAioC,CAAAjoC;;AAOb,QAAAkoC,CAAAA,GAAA,UAAAlrB,CAAA,EAAAA;AAAA,eAAAkrB,CAAA,GAAAA;AAAAA,eAAAA,SAAAA,CAAAA,IAAAA,CAAAA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,SAAAA,CAAAA,IAAAA,IAAAA;AAKA;;AAAA,aALwCjrB,CAAAA,CAAAirB,CAAAjrB,EAAAD,CAAAC,CAAAA,EACtCirB,CAAAA,CAAA7lC,SAAA6lC,CAAAte,GAAAse,GAAA,UAAIre,CAAJ,EAA2C/mB,CAA3C,EAA2CA;AAEzC,eAAO,CADQ86C,CAAAA,CAAgB96C,CAAAA,CAAO,CAAPA,CAAhB86C,EAA2B9rC,KAAKvE,IAAhCqwC,EAAsC9rC,KAAK5B,QAA3C0tC,CACR,CAAP;AAD0D1tC,OAFtB+M,EAKxCirB,CAAA;AALA,KAAA,CAAwCwV,CAAAA,CAAArR,UAAxC,CAAA;;AAAarsC,IAAAA,CAAAA,CAAAkoC,kBAAAloC,GAAAkoC,CAAAloC;;AAOb,QAAA4nC,CAAAA,GAAA,UAAA5qB,CAAA,EAAAA;AAAA,eAAA4qB,CAAA,GAAAA;AAAAA,eAAAA,SAAAA,CAAAA,IAAAA,CAAAA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,SAAAA,CAAAA,IAAAA,IAAAA;AAKA;;AAAA,aALqC3qB,CAAAA,CAAA2qB,CAAA3qB,EAAAD,CAAAC,CAAAA,EACnC2qB,CAAAA,CAAAvlC,SAAAulC,CAAAhe,GAAAge,GAAA,UAAI/d,CAAJ,EAA2C/mB,CAA3C,EAA2CA;AAEzC,eAAO,CADQ+6C,CAAAA,CAAa/6C,CAAAA,CAAO,CAAPA,CAAb+6C,EAAwB/rC,KAAKvE,IAA7BswC,EAAmC/rC,KAAK5B,QAAxC2tC,CACR,CAAP;AADuD3tC,OAFtB+M,EAKrC2qB,CAAA;AALA,KAAA,CAAqC8V,CAAAA,CAAArR,UAArC,CAAA;;AAAarsC,IAAAA,CAAAA,CAAA4nC,eAAA5nC,GAAA4nC,CAAA5nC;;AAOb,QAAA6nC,CAAAA,GAAA,UAAA7qB,CAAA,EAAAA;AAAA,eAAA6qB,CAAA,GAAAA;AAAAA,eAAAA,SAAAA,CAAAA,IAAAA,CAAAA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,SAAAA,CAAAA,IAAAA,IAAAA;AAKA;;AAAA,aALkC5qB,CAAAA,CAAA4qB,CAAA5qB,EAAAD,CAAAC,CAAAA,EAChC4qB,CAAAA,CAAAxlC,SAAAwlC,CAAAje,GAAAie,GAAA,UAAIhe,CAAJ,EAA2C/mB,CAA3C,EAA2CA;AAEzC,eAAO,CADQg7C,CAAAA,CAAUh7C,CAAAA,CAAO,CAAPA,CAAVg7C,EAAqBhsC,KAAKvE,IAA1BuwC,EAAgChsC,KAAK5B,QAArC4tC,CACR,CAAP;AADoD5tC,OAFtB+M,EAKlC4qB,CAAA;AALA,KAAA,CAAkC6V,CAAAA,CAAArR,UAAlC,CAAA;;AAAarsC,IAAAA,CAAAA,CAAA6nC,YAAA7nC,GAAA6nC,CAAA7nC;;AAOb,QAAA+nC,CAAAA,GAAA,UAAA/qB,CAAA,EAAAA;AAAA,eAAA+qB,CAAA,GAAAA;AAAAA,eAAAA,SAAAA,CAAAA,IAAAA,CAAAA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,SAAAA,CAAAA,IAAAA,IAAAA;AAKA;;AAAA,aALkC9qB,CAAAA,CAAA8qB,CAAA9qB,EAAAD,CAAAC,CAAAA,EAChC8qB,CAAAA,CAAA1lC,SAAA0lC,CAAAne,GAAAme,GAAA,UAAIle,CAAJ,EAA2C/mB,CAA3C,EAA2CA;AAEzC,eAAO,CADQi7C,CAAAA,CAAUj7C,CAAAA,CAAO,CAAPA,CAAVi7C,EAAqBjsC,KAAKvE,IAA1BwwC,EAAgCjsC,KAAK5B,QAArC6tC,CACR,CAAP;AADoD7tC,OAFtB+M,EAKlC8qB,CAAA;AALA,KAAA,CAAkC2V,CAAAA,CAAArR,UAAlC,CAAA;;AAAarsC,IAAAA,CAAAA,CAAA+nC,YAAA/nC,GAAA+nC,CAAA/nC;;AAOb,QAAA8nC,CAAAA,GAAA,UAAA9qB,CAAA,EAAAA;AAAA,eAAA8qB,CAAA,GAAAA;AAAAA,eAAAA,SAAAA,CAAAA,IAAAA,CAAAA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,SAAAA,CAAAA,IAAAA,IAAAA;AAKA;;AAAA,aALmC7qB,CAAAA,CAAA6qB,CAAA7qB,EAAAD,CAAAC,CAAAA,EACjC6qB,CAAAA,CAAAzlC,SAAAylC,CAAAle,GAAAke,GAAA,UAAIje,CAAJ,EAA2C/mB,CAA3C,EAA2CA;AAEzC,eAAO,CADQk7C,CAAAA,CAAWl7C,CAAAA,CAAO,CAAPA,CAAXk7C,EAAsBlsC,KAAKvE,IAA3BywC,EAAiClsC,KAAK5B,QAAtC8tC,CACR,CAAP;AADqD9tC,OAFtB+M,EAKnC6qB,CAAA;AALA,KAAA,CAAmC4V,CAAAA,CAAArR,UAAnC,CAAA;;AAAarsC,IAAAA,CAAAA,CAAA8nC,aAAA9nC,GAAA8nC,CAAA9nC;;AAOb,QAAAgoC,CAAAA,GAAA,UAAAhrB,CAAA,EAAAA;AAAA,eAAAgrB,CAAA,GAAAA;AAAAA,eAAAA,SAAAA,CAAAA,IAAAA,CAAAA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,SAAAA,CAAAA,IAAAA,IAAAA;AAKA;;AAAA,aALmC/qB,CAAAA,CAAA+qB,CAAA/qB,EAAAD,CAAAC,CAAAA,EACjC+qB,CAAAA,CAAA3lC,SAAA2lC,CAAApe,GAAAoe,GAAA,UAAIne,CAAJ,EAA2C/mB,CAA3C,EAA2CA;AAEzC,eAAO,CADQm7C,CAAAA,CAAWn7C,CAAAA,CAAO,CAAPA,CAAXm7C,EAAsBnsC,KAAKvE,IAA3B0wC,EAAiCnsC,KAAK5B,QAAtC+tC,CACR,CAAP;AADqD/tC,OAFtB+M,EAKnC+qB,CAAA;AALA,KAAA,CAAmC0V,CAAAA,CAAArR,UAAnC,CAAA;;AAQA,aAAgBsR,CAAhB,CAA0B9tC,CAA1B,EAAyCtC,CAAzC,EAAyD2C,CAAzD,EAAyDA;AACvD,aAAOwB,CAAAA,CAAA3C,UAAA2C,CAAW1C,UAAX0C,CAAsB7B,CAAtB6B,EAA6BnE,CAA7BmE,EAAmCxB,CAAnCwB,EAA6C,UAAA3N,CAAA,EAAAA;AAAK,eAAAA,CAAA;AAAAA,OAAlD2N,EAAqD,UAACtR,CAAD,EAAI2D,CAAJ,EAAIA;AAAM,eAAA3D,CAAAA,GAAI2D,CAAJ;AAAIA,OAAnE2N,CAAP;AAGF;;AAAA,aAAgBksC,CAAhB,CAAgC/tC,CAAhC,EAA+CtC,CAA/C,EAA+D2C,CAA/D,EAA+DA;AAC7D,aAAOwB,CAAAA,CAAA3C,UAAA2C,CAAW1C,UAAX0C,CAAsB7B,CAAtB6B,EAA6BnE,CAA7BmE,EAAmCxB,CAAnCwB,EAA6C,UAAA3N,CAAA,EAAAA;AAAK,eAAAA,CAAAA,GAAIA,CAAJ;AAAIA,OAAtD2N,EAAyD,UAACtR,CAAD,EAAI2D,CAAJ,EAAIA;AAAM,eAAA3D,CAAAA,GAAI2D,CAAJ;AAAIA,OAAvE2N,CAAP;AAGF;;AAAA,aAAgBmsC,CAAhB,CAA6BhuC,CAA7B,EAA4CtC,CAA5C,EAA4D2C,CAA5D,EAA4DA;AAG1D,WAFA,IAAMgG,CAAAA,GAASxE,CAAAA,CAAA3C,UAAA2C,CAAW1C,UAAX0C,CAAsB7B,CAAtB6B,EAA6BnE,CAA7BmE,EAAmCxB,CAAnCwB,EAA6C,UAAA3N,CAAA,EAAAA;AAAK,eAAAA,CAAA;AAAAA,OAAlD2N,EAAqD,UAACtR,CAAD,EAAI2D,CAAJ,EAAIA;AAAM,eAAA3D,CAAAA,GAAI2D,CAAJ;AAAIA,OAAnE2N,CAAf,EACMxO,CAAAA,GAASgT,CAAAA,CAAOjC,SAAPiC,CAAiBhT,MADhC,EAES7C,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAI6C,CAApB,EAA4B7C,CAAAA,EAA5B,EACE6V,CAAAA,CAAOjC,SAAPiC,CAAiB7V,CAAjB6V,IAAsBzR,IAAAA,CAAKmS,GAALnS,CAASyR,CAAAA,CAAOjC,SAAPiC,CAAiB7V,CAAjB6V,CAATzR,CAAtByR;;AAEF,aAAOA,CAAP;AAGF;;AAAA,aAAgB4nC,CAAhB,CAA0BjuC,CAA1B,EAAyCtC,CAAzC,EAAyD2C,CAAzD,EAAyDA;AACvD,aAAOwB,CAAAA,CAAA3C,UAAA2C,CAAW1C,UAAX0C,CAAsB7B,CAAtB6B,EAA6BnE,CAA7BmE,EAAmCxB,CAAnCwB,EAA6C,UAAA3N,CAAA,EAAAA;AAAK,eAAAA,CAAA;AAAAA,OAAlD2N,EAAqD,UAACtR,CAAD,EAAI2D,CAAJ,EAAIA;AAAM,eAAAU,IAAAA,CAAKC,GAALD,CAASrE,CAATqE,EAAYV,CAAZU,CAAA;AAAYV,OAA3E2N,CAAP;AAGF;;AAAA,aAAgBqsC,CAAhB,CAA0BluC,CAA1B,EAAyCtC,CAAzC,EAAyD2C,CAAzD,EAAyDA;AACvD,aAAOwB,CAAAA,CAAA3C,UAAA2C,CAAW1C,UAAX0C,CAAsB7B,CAAtB6B,EAA6BnE,CAA7BmE,EAAmCxB,CAAnCwB,EAA6C,UAAA3N,CAAA,EAAAA;AAAK,eAAAA,CAAA;AAAAA,OAAlD2N,EAAqD,UAACtR,CAAD,EAAI2D,CAAJ,EAAIA;AAAM,eAAAU,IAAAA,CAAK8qB,GAAL9qB,CAASrE,CAATqE,EAAYV,CAAZU,CAAA;AAAYV,OAA3E2N,CAAP;AAGF;;AAAA,aAAgBssC,CAAhB,CAA2BnuC,CAA3B,EAA0CtC,CAA1C,EAA0D2C,CAA1D,EAA0DA;AAOxD,WANA,IAAMgG,CAAAA,GAASxE,CAAAA,CAAA3C,UAAA2C,CAAW1C,UAAX0C,CAAsB7B,CAAtB6B,EAA6BnE,CAA7BmE,EAAmCxB,CAAnCwB,EAA6C,UAAA3N,CAAA,EAAAA;AAAK,eAAAA,CAAA;AAAAA,OAAlD2N,EAAqD,UAACtR,CAAD,EAAI2D,CAAJ,EAAIA;AAAM,eAAA3D,CAAAA,GAAI2D,CAAJ;AAAIA,OAAnE2N,CAAf,EACMlE,CAAAA,GAAakE,CAAAA,CAAA3C,UAAA2C,CAAWpC,eAAXoC,CAA2B7B,CAAAA,CAAM1M,IAAjCuO,EAAmDnE,CAAnDmE,EAAyDxB,CAAzDwB,CADnB,EAIMwsC,CAAAA,GAFYxsC,CAAAA,CAAA9L,SAAA8L,CAAU5L,IAAV4L,CAAe7B,CAAAA,CAAM1M,IAArBuO,IACCA,CAAAA,CAAA9L,SAAA8L,CAAU5L,IAAV4L,CAAelE,CAAfkE,CAHnB,EAKMxO,CAAAA,GAASgT,CAAAA,CAAOjC,SAAPiC,CAAiBhT,MALhC,EAMS7C,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAI6C,CAApB,EAA4B7C,CAAAA,EAA5B,EACE6V,CAAAA,CAAOjC,SAAPiC,CAAiB7V,CAAjB6V,IAAsBA,CAAAA,CAAOjC,SAAPiC,CAAiB7V,CAAjB6V,IAAsBgoC,CAA5ChoC;;AAEF,aAAOA,CAAP;AAGF;;AAAA,aAAgB+nC,CAAhB,CAA2BpuC,CAA3B,EAA0CtC,CAA1C,EAA0D2C,CAA1D,EAA0DA;AACxD,aAAOwB,CAAAA,CAAA3C,UAAA2C,CAAW1C,UAAX0C,CAAsB7B,CAAtB6B,EAA6BnE,CAA7BmE,EAAmCxB,CAAnCwB,EAA6C,UAAA3N,CAAA,EAAAA;AAAK,eAAAA,CAAA;AAAAA,OAAlD2N,EAAqD,UAACtR,CAAD,EAAI2D,CAAJ,EAAIA;AAAM,eAAA3D,CAAAA,GAAI2D,CAAJ;AAAIA,OAAnE2N,CAAP;AA/CW1R;;AAAAA,IAAAA,CAAAA,CAAAgoC,aAAAhoC,GAAAgoC,CAAAhoC,EAQbA,CAAAA,CAAA29C,SAAA39C,GAAA29C,CARa39C,EAYbA,CAAAA,CAAA49C,eAAA59C,GAAA49C,CAZa59C,EAgBbA,CAAAA,CAAA69C,YAAA79C,GAAA69C,CAhBa79C,EAyBbA,CAAAA,CAAA89C,SAAA99C,GAAA89C,CAzBa99C,EA6BbA,CAAAA,CAAA+9C,SAAA/9C,GAAA+9C,CA7Ba/9C,EAiCbA,CAAAA,CAAAg+C,UAAAh+C,GAAAg+C,CAjCah+C,EA8CbA,CAAAA,CAAAi+C,UAAAj+C,GAAAi+C,CA9Caj+C;AA8Cbi+C,GtFdA,EsFcAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,QAAAA,CAAAA;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,SAAAA,KAAAA,CAAAA,GAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,CAAAA,CAAAA,GAAAA,MAAAA,CAAAA,cAAAA,IAAAA;AAAAA,QAAAA,SAAAA,EAAAA;AAAAA,mBAAAA,KAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,QAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA;AAAAA,OAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,IAAAA,CAAAA,IAAAA,CAAAA,EAAAA,CAAAA,CAAAA,cAAAA,CAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,OAAAA,EAAAA,CAAAA,EAAAA,CAAAA,CAAAA;AAAAA,KAAAA,EAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,eAAAA,CAAAA,GAAAA;AAAAA,aAAAA,WAAAA,GAAAA,CAAAA;AAAAA;;AAAAA,MAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,SAAAA,GAAAA,SAAAA,CAAAA,GAAAA,MAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA,CAAAA,SAAAA,EAAAA,IAAAA,CAAAA,EAAAA,CAAAA;AAAAA,KAAAA,CAAAA;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;AC7FA,QAAAx0B,CAAAA,GAAAjpB,CAAAA,CAAA,EAAAA,CAAA;AAAA,QACAoC,CAAAA,GAAApC,CAAAA,CAAA,CAAAA,CADA;AAAA,QAEAkR,CAAAA,GAAAlR,CAAAA,CAAA,CAAAA,CAFA;AAAA,QAKA4nC,CAAAA,GAAA,UAAAprB,CAAA,EAAAA;AAAA,eAAAorB,CAAA,GAAAA;AAAAA,eAAAA,SAAAA,CAAAA,IAAAA,CAAAA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,SAAAA,CAAAA,IAAAA,IAAAA;AAKA;;AAAA,aALgCnrB,CAAAA,CAAAmrB,CAAAnrB,EAAAD,CAAAC,CAAAA,EAC9BmrB,CAAAA,CAAA/lC,SAAA+lC,CAAAxe,GAAAwe,GAAA,UAAIve,CAAJ,EAA2C/mB,CAA3C,EAA2CA;AAEzC,eAAO,CADQinB,CAAAA,CAAQjnB,CAAAA,CAAO,CAAPA,CAARinB,EAAmBjnB,CAAAA,CAAO,CAAPA,CAAnBinB,CACR,CAAP;AADyC,OAFb9M,EAKhCmrB,CAAA;AALA,KAAA,CAAgC3e,CAAAA,CAAAO,OAAhC,CALA;;AAYA,aAAgBD,CAAhB,CAAwB5c,CAAxB,EAAmCtG,CAAnC,EAAmCA;AACjC,UAAM8E,CAAAA,GAAe+F,CAAAA,CAAA9L,SAAA8L,CAAUnG,qBAAVmG,CAAgCvE,CAAAA,CAAEhK,IAAlCuO,EAAwC7K,CAAAA,CAAMijB,WAA9CpY,CAArB;AAAA,UACMwE,CAAAA,GAAS,IAAItT,CAAAA,CAAAmD,MAAJ,CAAW4F,CAAX,EAAyBwB,CAAAA,CAAEnH,IAA3B,CADf;AAIA,aAFUkQ,CAAAA,CAAOjC,SAAPiC,CACRjQ,GADQiQ,CACJ/I,CAAAA,CAAE8G,SADEiC,GAEHA,CAAP;AAZWlW;;AAAAA,IAAAA,CAAAA,CAAAooC,UAAApoC,GAAAooC,CAAApoC,EAObA,CAAAA,CAAA+pB,OAAA/pB,GAAA+pB,CAPa/pB;AAOb+pB,GvFmEA,EuFnEAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,QAAAA,CAAAA;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,SAAAA,KAAAA,CAAAA,GAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,CAAAA,CAAAA,GAAAA,MAAAA,CAAAA,cAAAA,IAAAA;AAAAA,QAAAA,SAAAA,EAAAA;AAAAA,mBAAAA,KAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,QAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA;AAAAA,OAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,IAAAA,CAAAA,IAAAA,CAAAA,EAAAA,CAAAA,CAAAA,cAAAA,CAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,OAAAA,EAAAA,CAAAA,EAAAA,CAAAA,CAAAA;AAAAA,KAAAA,EAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,eAAAA,CAAAA,GAAAA;AAAAA,aAAAA,WAAAA,GAAAA,CAAAA;AAAAA;;AAAAA,MAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,SAAAA,GAAAA,SAAAA,CAAAA,GAAAA,MAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA,CAAAA,SAAAA,EAAAA,IAAAA,CAAAA,EAAAA,CAAAA;AAAAA,KAAAA,CAAAA;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;ACZA,QAAA8a,CAAAA,GAAArkC,CAAAA,CAAA,EAAAA,CAAA;AAAA,QACAoC,CAAAA,GAAApC,CAAAA,CAAA,CAAAA,CADA;AAAA,QAEAkR,CAAAA,GAAAlR,CAAAA,CAAA,CAAAA,CAFA;AAAA,QAKAkoC,CAAAA,GAAA,UAAA1rB,CAAA,EAAAA;AAAA,eAAA0rB,CAAA,GAAAA;AAAAA,eAAAA,SAAAA,CAAAA,IAAAA,CAAAA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,SAAAA,CAAAA,IAAAA,IAAAA;AAKA;;AAAA,aAL8BzrB,CAAAA,CAAAyrB,CAAAzrB,EAAAD,CAAAC,CAAAA,EAC5ByrB,CAAAA,CAAArmC,SAAAqmC,CAAA9e,GAAA8e,GAAA,UAAI7e,CAAJ,EAA2C/mB,CAA3C,EAA2CA;AAEzC,eAAO,CADQ+H,CAAAA,CAAM/H,CAAAA,CAAO,CAAPA,CAAN+H,EAAiBiH,KAAKy6B,MAAtB1hC,EAA8BiH,KAAK06B,IAAnC3hC,EAAyCiH,KAAKvE,IAA9C1C,CACR,CAAP;AAD6D0C,OAFnC0P,EAK9ByrB,CAAA;AALA,KAAA,CAA8B7D,CAAAA,CAAAyH,KAA9B,CALA;;AAKatsC,IAAAA,CAAAA,CAAA0oC,QAAA1oC,GAAA0oC,CAAA1oC;;AAOb,QAAAyoC,CAAAA,GAAA,UAAAzrB,CAAA,EAAAA;AAAA,eAAAyrB,CAAA,GAAAA;AAAAA,eAAAA,SAAAA,CAAAA,IAAAA,CAAAA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,SAAAA,CAAAA,IAAAA,IAAAA;AAWA;;AAAA,aAXiCxrB,CAAAA,CAAAwrB,CAAAxrB,EAAAD,CAAAC,CAAAA,EAC/BwrB,CAAAA,CAAApmC,SAAAomC,CAAA7e,GAAA6e,GAAA,UAAI5e,CAAJ,EAA2C/mB,CAA3C,EAA2CA;AACzC,YAAIA,CAAAA,CAAOI,MAAPJ,IAAiB,CAAjBA,IAAsBA,CAAAA,CAAO,CAAPA,CAAAA,CAAUgnB,WAAVhnB,CAAsB2K,IAAtB3K,CAA2B,UAACzC,CAAD,EAACA;AAAc,iBAAM,MAANA,CAAA;AAAAA,SAA1CyC,CAA1B,EACE,MAAM,IAAIyE,KAAJ,CAAU,kDAAV,CAAN;AAEF,YAAMglC,CAAAA,GAAS3nC,KAAAA,CAAMuO,IAANvO,CAAW9B,CAAAA,CAAO,CAAPA,CAAAA,CAAUgnB,WAArBllB,CAAf;AAAA,YACM4nC,CAAAA,GAAO5nC,KAAAA,CAAMuO,IAANvO,CAAW9B,CAAAA,CAAO,CAAPA,CAAAA,CAAUgnB,WAArBllB,CADb;AAAA,YAEM2I,CAAAA,GAAOzK,CAAAA,CAAOI,MAAPJ,IAAiB,CAAjBA,GAAqB8B,KAAAA,CAAMuO,IAANvO,CAAW9B,CAAAA,CAAO,CAAPA,CAAAA,CAAUgnB,WAArBllB,CAArB9B,GAAyD,EAFtE;AAIA,eAAO,CADQ+H,CAAAA,CAAM/H,CAAAA,CAAO,CAAPA,CAAN+H,EAAiB0hC,CAAjB1hC,EAAyB2hC,CAAzB3hC,EAA+B0C,CAA/B1C,CACR,CAAP;AAD8C0C,OARjB0P,EAWjCwrB,CAAA;AAXA,KAAA,CAAiC5D,CAAAA,CAAA4H,QAAjC,CAAA;;AAaA,aAAgB5hC,CAAhB,CACIsC,CADJ,EACeo/B,CADf,EAC8CC,CAD9C,EAC2Ej/B,CAD3E,EAC2EA;AACrD,YAAhBA,CAAAA,CAAKrK,MAAW,KAClBqK,CAAAA,GAAOJ,CAAAA,CAAEhK,IAAFgK,CAAO5D,GAAP4D,CAAW,UAAC+f,CAAD,EAAM7d,CAAN,EAAMA;AAAQ,eAAAA,CAAA;AAAAA,OAAzBlC,CADW,GAGpBI,CAAAA,GAAOA,CAAAA,CAAKhE,GAALgE,CAAS,UAAAlD,CAAA,EAAAA;AAAQ,eAAAqH,CAAAA,CAAA9L,SAAA8L,CAAUxG,SAAVwG,CAAoBrH,CAApBqH,EAA0BvE,CAAAA,CAAEhK,IAAFgK,CAAOjK,MAAjCwO,CAAA;AAAiCxO,OAAlDqK,CAHa,EAIpBg/B,CAAAA,GAASA,CAAAA,CAAOhjC,GAAPgjC,CAAW,UAAChiC,CAAD,EAAQ8E,CAAR,EAAQA;AAC1B,eAAI9E,CAAAA,GAAQ4C,CAAAA,CAAEhK,IAAFgK,CAAOI,CAAAA,CAAK8B,CAAL9B,CAAPJ,IAAoB,CAA5B5C,GACK4C,CAAAA,CAAEhK,IAAFgK,CAAOI,CAAAA,CAAK8B,CAAL9B,CAAPJ,CADL5C,GAGGmH,CAAAA,CAAA9L,SAAA8L,CAAUxG,SAAVwG,CAAoBnH,CAApBmH,EAA2BvE,CAAAA,CAAEhK,IAAFgK,CAAOI,CAAAA,CAAK8B,CAAL9B,CAAPJ,CAA3BuE,CAHP;AAG8CrC,OAJvCk9B,CAJW,EAUpBC,CAAAA,GAAOA,CAAAA,CAAKjjC,GAALijC,CAAS,UAAChiC,CAAD,EAAM6E,CAAN,EAAMA;AACpB,eAAI7E,CAAAA,GAAM2C,CAAAA,CAAEhK,IAAFgK,CAAOI,CAAAA,CAAK8B,CAAL9B,CAAPJ,IAAoB,CAA1B3C,GACK2C,CAAAA,CAAEhK,IAAFgK,CAAOI,CAAAA,CAAK8B,CAAL9B,CAAPJ,CADL3C,GAGGkH,CAAAA,CAAA9L,SAAA8L,CAAUxG,SAAVwG,CAAoBlH,CAApBkH,EAAyBvE,CAAAA,CAAEhK,IAAFgK,CAAOI,CAAAA,CAAK8B,CAAL9B,CAAPJ,CAAzBuE,CAHP;AAG4CrC,OAJvCm9B,CAVa;AAgBpB,UAAM1mC,CAAAA,GAAiB,EAAvB;AAAA,UACMq4C,CAAAA,GAA2B,EADjC;AAEA5wC,MAAAA,CAAAA,CAAK6B,OAAL7B,CAAa,UAAC2f,CAAD,EAAM7d,CAAN,EAAMA;AACjBvJ,QAAAA,CAAAA,CAAKonB,CAALpnB,CAAAA,GAAY0mC,CAAAA,CAAKn9B,CAALm9B,CAAAA,GAAYD,CAAAA,CAAOl9B,CAAPk9B,CAAxBzmC,EACAq4C,CAAAA,CAAejxB,CAAfixB,CAAAA,GAAsB5R,CAAAA,CAAOl9B,CAAPk9B,CADtBzmC;AAC6BuJ,OAF/B9B;;AAIA,WAAK,IAAIlN,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAI8M,CAAAA,CAAEhK,IAAFgK,CAAOjK,MAA3B,EAAmC7C,CAAAA,EAAnC,EACEyF,CAAAA,CAAKzF,CAALyF,CAAAA,GAAUA,CAAAA,CAAKzF,CAALyF,CAAAA,IAAWqH,CAAAA,CAAEhK,IAAFgK,CAAO9M,CAAP8M,CAArBrH,EACAq4C,CAAAA,CAAe99C,CAAf89C,CAAAA,GAAoBA,CAAAA,CAAe99C,CAAf89C,CAAAA,IAAqB,CADzCr4C;;AAIF,UAAMs4C,CAAAA,GAAgB1sC,CAAAA,CAAA9L,SAAA8L,CAAUjH,cAAViH,CAAyB5L,CAAzB4L,CAAtB;AAAA,UACM2sC,CAAAA,GAAgB3sC,CAAAA,CAAA9L,SAAA8L,CAAUjH,cAAViH,CAAyBvE,CAAAA,CAAEhK,IAAFgK,GAASA,CAAAA,CAAEhK,IAAXgK,GAAkB,CAACA,CAAAA,CAAEwC,IAAFxC,CAAOjK,MAAR,CAA3CwO,CADtB;AAAA,UAEMysB,CAAAA,GAAIhxB,CAAAA,CAAEwC,IAFZ;AAAA,UAGMuG,CAAAA,GAAS,IAAItT,CAAAA,CAAAmD,MAAJ,CAAWD,CAAX,EAAiBqH,CAAAA,CAAEnH,IAAnB,CAHf;AAAA,UAIMwpC,CAAAA,GAAIt5B,CAAAA,CAAOvG,IAJjB;;AAKA,WAAStP,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAImvC,CAAAA,CAAEtsC,MAAtB,EAAsBA,EAAU7C,CAAhC,EAAmC;AACjC,YACMm7C,CAAAA,GADkB9pC,CAAAA,CAAA9L,SAAA8L,CAAUzG,eAAVyG,CAA0BrR,CAA1BqR,EAA6B0sC,CAA7B1sC,EACgBnI,GADhBmI,CACoB,UAAC87B,CAAD,EAAM9mC,CAAN,EAAMA;AAAM,iBAAA8mC,CAAAA,GAAM2Q,CAAAA,CAAez3C,CAAfy3C,CAAN;AAAqBz3C,SADrDgL,CAAxB;AAAA,YAEM+pC,CAAAA,GAAY/pC,CAAAA,CAAA9L,SAAA8L,CAAU3G,eAAV2G,CAA0B8pC,CAA1B9pC,EAA2C2sC,CAA3C3sC,CAFlB;AAGA89B,QAAAA,CAAAA,CAAEnvC,CAAFmvC,CAAAA,GAAOrR,CAAAA,CAAEsd,CAAFtd,CAAPqR;AAEF;;AAAA,aAAOt5B,CAAP;AArDWlW;;AAAAA,IAAAA,CAAAA,CAAAyoC,WAAAzoC,GAAAyoC,CAAAzoC,EAabA,CAAAA,CAAA6K,KAAA7K,GAAA6K,CAba7K;AAab6K,GxFsDA,EwFtDAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,QAAAA,CAAAA;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,SAAAA,KAAAA,CAAAA,GAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,CAAAA,CAAAA,GAAAA,MAAAA,CAAAA,cAAAA,IAAAA;AAAAA,QAAAA,SAAAA,EAAAA;AAAAA,mBAAAA,KAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,QAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA;AAAAA,OAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,IAAAA,CAAAA,IAAAA,CAAAA,EAAAA,CAAAA,CAAAA,cAAAA,CAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,OAAAA,EAAAA,CAAAA,EAAAA,CAAAA,CAAAA;AAAAA,KAAAA,EAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,eAAAA,CAAAA,GAAAA;AAAAA,aAAAA,WAAAA,GAAAA,CAAAA;AAAAA;;AAAAA,MAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,SAAAA,GAAAA,SAAAA,CAAAA,GAAAA,MAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA,CAAAA,SAAAA,EAAAA,IAAAA,CAAAA,EAAAA,CAAAA;AAAAA,KAAAA,CAAAA;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,YAAAA,IAAAA,UAAAA,CAAAA,EAAAA;AAAAA,UAAAA,CAAAA,IAAAA,CAAAA,CAAAA,UAAAA,EAAAA,OAAAA,CAAAA;AAAAA,UAAAA,CAAAA,GAAAA,EAAAA;AAAAA,UAAAA,QAAAA,CAAAA,EAAAA,KAAAA,IAAAA,CAAAA,IAAAA,CAAAA,EAAAA,MAAAA,CAAAA,cAAAA,CAAAA,IAAAA,CAAAA,CAAAA,EAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,aAAAA,CAAAA,CAAAA,OAAAA,GAAAA,CAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;ACzBA,QAAAi6B,CAAAA,GAAAtkC,CAAAA,CAAA,EAAAA,CAAA;AAAA,QACAoC,CAAAA,GAAApC,CAAAA,CAAA,CAAAA,CADA;AAAA,QAEAgf,CAAAA,GAAApE,CAAAA,CAAA5a,CAAAA,CAAA,CAAAA,CAAA4a,CAFA;AAAA,QAKAutB,CAAAA,GAAA,UAAA3rB,CAAA,EAAAA;AAAA,eAAA2rB,CAAA,GAAAA;AAAAA,eAAAA,SAAAA,CAAAA,IAAAA,CAAAA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,SAAAA,CAAAA,IAAAA,IAAAA;AAKA;;AAAA,aALgC1rB,CAAAA,CAAA0rB,CAAA1rB,EAAAD,CAAAC,CAAAA,EAC9B0rB,CAAAA,CAAAtmC,SAAAsmC,CAAA/e,GAAA+e,GAAA,UAAI9e,CAAJ,EAA2C/mB,CAA3C,EAA2CA;AAEzC,eAAO,CADQw7C,CAAAA,CAAQx7C,CAAAA,CAAO,CAAPA,CAARw7C,EAAmBxsC,KAAKzH,IAAxBi0C,CACR,CAAP;AADuCj0C,OAFX4S,EAKhC0rB,CAAA;AALA,KAAA,CAAgC7D,CAAAA,CAAA5D,OAAhC,CALA;;AAYA,aAAgBod,CAAhB,CAAwBnxC,CAAxB,EAAmC9C,CAAnC,EAAmCA;AAajC,WAZA,IAAMirC,CAAAA,GAAkBnoC,CAAAA,CAAEhK,IAA1B,EACM4D,CAAAA,GAAYuuC,CAAAA,CAAgBpyC,MADlC,EAGMq7C,CAAAA,GAAgB/+B,CAAAA,CAAK5Z,SAAL4Z,CAAetU,SAAfsU,CAAyBnV,CAAzBmV,EAA+BzY,CAA/ByY,CAHtB,EAIMtX,CAAAA,GAAIsX,CAAAA,CAAK5Z,SAAL4Z,CAAelV,eAAfkV,CAA+B81B,CAA/B91B,EAAgD++B,CAAhD/+B,CAJV,EAKMg/B,CAAAA,GAAIh/B,CAAAA,CAAK5Z,SAAL4Z,CAAepV,iBAAfoV,CAAiC81B,CAAjC91B,EAAkD++B,CAAlD/+B,CALV,EAOM2e,CAAAA,GAAIhxB,CAAAA,CAAEuC,UAPZ,EASMwG,CAAAA,GAAS,IAAItT,CAAAA,CAAAmD,MAAJ,CAAWoH,CAAAA,CAAEhK,IAAb,EAAmBgK,CAAAA,CAAEnH,IAArB,CATf,EAUMwpC,CAAAA,GAAIt5B,CAAAA,CAAOxG,UAVjB,EAYSrP,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAI6H,CAApB,EAAuB7H,CAAAA,EAAvB,EAA4B;AAM1B,aAJA,IAAMmH,CAAAA,GAASnH,CAAAA,GAAIm+C,CAAnB,EAGI95C,CAAAA,GAAMoI,MAAAA,CAAOkqB,SAHjB,EAIStwB,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAI83C,CAApB,EAAuB93C,CAAAA,EAAvB,EACMy3B,CAAAA,CAAE32B,CAAAA,GAASd,CAAXy3B,CAAAA,GAAgBz5B,CAAhBy5B,KACFz5B,CAAAA,GAAMy5B,CAAAA,CAAE32B,CAAAA,GAASd,CAAXy3B,CADJA;;AAMN,YAAIC,CAAAA,GAAQ,CAAZ;;AACA,aAAS13B,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAI83C,CAApB,EAAuB93C,CAAAA,EAAvB,EAA4B;AAC1B,cAAMhF,CAAAA,GAAQy8B,CAAAA,CAAE32B,CAAAA,GAASd,CAAXy3B,CAAAA,GAAgBz5B,CAA9B;AACA8qC,UAAAA,CAAAA,CAAEhoC,CAAAA,GAASd,CAAX8oC,CAAAA,GAAgB/qC,IAAAA,CAAKqiC,GAALriC,CAAS/C,CAAT+C,CAAhB+qC,EACApR,CAAAA,IAAS35B,IAAAA,CAAKqiC,GAALriC,CAAS/C,CAAT+C,CADT+qC;AAKF;;AAAA,aAAS9oC,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAI83C,CAApB,EAAuB93C,CAAAA,EAAvB,EACgB,MAAV03B,CAAU,GACZoR,CAAAA,CAAEhoC,CAAAA,GAASd,CAAX8oC,CAAAA,GAAgB,CADJ,GAGZA,CAAAA,CAAEhoC,CAAAA,GAASd,CAAX8oC,CAAAA,IAAiBpR,CAHL;AAQlB;;AAAA,aAAOloB,CAAP;AAlDWlW;;AAAAA,IAAAA,CAAAA,CAAA2oC,UAAA3oC,GAAA2oC,CAAA3oC,EAObA,CAAAA,CAAAs+C,OAAAt+C,GAAAs+C,CAPat+C;AAObs+C,GzFmEA,EyFnEAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,QAAAA,CAAAA;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,SAAAA,KAAAA,CAAAA,GAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,CAAAA,CAAAA,GAAAA,MAAAA,CAAAA,cAAAA,IAAAA;AAAAA,QAAAA,SAAAA,EAAAA;AAAAA,mBAAAA,KAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,QAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA;AAAAA,OAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,IAAAA,CAAAA,IAAAA,CAAAA,EAAAA,CAAAA,CAAAA,cAAAA,CAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,OAAAA,EAAAA,CAAAA,EAAAA,CAAAA,CAAAA;AAAAA,KAAAA,EAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,eAAAA,CAAAA,GAAAA;AAAAA,aAAAA,WAAAA,GAAAA,CAAAA;AAAAA;;AAAAA,MAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,SAAAA,GAAAA,SAAAA,CAAAA,GAAAA,MAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA,CAAAA,SAAAA,EAAAA,IAAAA,CAAAA,EAAAA,CAAAA;AAAAA,KAAAA,CAAAA;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;ACZA,QAAAvZ,CAAAA,GAAAvkC,CAAAA,CAAA,EAAAA,CAAA;AAAA,QACAoC,CAAAA,GAAApC,CAAAA,CAAA,CAAAA,CADA;AAAA,QAEAkR,CAAAA,GAAAlR,CAAAA,CAAA,CAAAA,CAFA;AAAA,QAKAqoC,CAAAA,GAAA,UAAA7rB,CAAA,EAAAA;AAAA,eAAA6rB,CAAA,GAAAA;AAAAA,eAAAA,SAAAA,CAAAA,IAAAA,CAAAA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,SAAAA,CAAAA,IAAAA,IAAAA;AAKA;;AAAA,aALgC5rB,CAAAA,CAAA4rB,CAAA5rB,EAAAD,CAAAC,CAAAA,EAC9B4rB,CAAAA,CAAAxmC,SAAAwmC,CAAAjf,GAAAif,GAAA,UAAIhf,CAAJ,EAA2C/mB,CAA3C,EAA2CA;AAEzC,eAAO,CADQ27C,CAAAA,CAAQ37C,CAAAA,CAAO,CAAPA,CAAR27C,EAAmB3sC,KAAKvE,IAAxBkxC,CACR,CAAP;AADuClxC,OAFX0P,EAKhC4rB,CAAA;AALA,KAAA,CAAgC9D,CAAAA,CAAA2H,OAAhC,CALA;;AAYA,aAAgB+R,CAAhB,CAAwBtxC,CAAxB,EAAmCI,CAAnC,EAAmCA;AACjC,UAAMC,CAAAA,GAAakE,CAAAA,CAAA9L,SAAA8L,CAAUpE,YAAVoE,CAAuBvE,CAAAA,CAAEhK,IAAzBuO,EAA+BnE,CAA/BmE,CAAnB;AAAA,UACMwE,CAAAA,GAAS,IAAItT,CAAAA,CAAAmD,MAAJ,CAAWyH,CAAX,EAAuBL,CAAAA,CAAEnH,IAAzB,CADf;AAAA,UAGMm4B,CAAAA,GAAIhxB,CAAAA,CAAEuC,UAHZ;AAQA,aAJUwG,CAAAA,CAAOxG,UAAPwG,CAERjQ,GAFQiQ,CAEJioB,CAFIjoB,GAIHA,CAAP;AAhBWlW;;AAAAA,IAAAA,CAAAA,CAAA6oC,UAAA7oC,GAAA6oC,CAAA7oC,EAObA,CAAAA,CAAAy+C,OAAAz+C,GAAAy+C,CAPaz+C;AAOby+C,G1FmEA,E0FnEAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,QAAAA,CAAAA;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,SAAAA,KAAAA,CAAAA,GAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,CAAAA,CAAAA,GAAAA,MAAAA,CAAAA,cAAAA,IAAAA;AAAAA,QAAAA,SAAAA,EAAAA;AAAAA,mBAAAA,KAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,QAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA;AAAAA,OAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,IAAAA,CAAAA,IAAAA,CAAAA,EAAAA,CAAAA,CAAAA,cAAAA,CAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,OAAAA,EAAAA,CAAAA,EAAAA,CAAAA,CAAAA;AAAAA,KAAAA,EAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,eAAAA,CAAAA,GAAAA;AAAAA,aAAAA,WAAAA,GAAAA,CAAAA;AAAAA;;AAAAA,MAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,SAAAA,GAAAA,SAAAA,CAAAA,GAAAA,MAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA,CAAAA,SAAAA,EAAAA,IAAAA,CAAAA,EAAAA,CAAAA;AAAAA,KAAAA,CAAAA;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;ACZA,QAAAzZ,CAAAA,GAAAxkC,CAAAA,CAAA,EAAAA,CAAA;AAAA,QACAoC,CAAAA,GAAApC,CAAAA,CAAA,CAAAA,CADA;AAAA,QAIAsoC,CAAAA,GAAA,UAAA9rB,CAAA,EAAAA;AAAA,eAAA8rB,CAAA,GAAAA;AAAAA,eAAAA,SAAAA,CAAAA,IAAAA,CAAAA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,SAAAA,CAAAA,IAAAA,IAAAA;AAKA;;AAAA,aAL4B7rB,CAAAA,CAAA6rB,CAAA7rB,EAAAD,CAAAC,CAAAA,EAC1B6rB,CAAAA,CAAAzmC,SAAAymC,CAAAlf,GAAAkf,GAAA,UAAIjf,CAAJ,EAA2C/mB,CAA3C,EAA2CA;AAEzC,eAAO,CADQq9B,CAAAA,CAAIr9B,CAAJq9B,CACR,CAAP;AADmBr9B,OAFKma,EAK5B6rB,CAAA;AALA,KAAA,CAA4B9D,CAAAA,CAAA7D,GAA5B,CAJA;;AAWA,aAAgBhB,CAAhB,CAAoBhzB,CAApB,EAAoBA;AAIlB,WAHA,IAAM+I,CAAAA,GAAS,IAAItT,CAAAA,CAAAmD,MAAJ,CAAWoH,CAAAA,CAAE,CAAFA,CAAAA,CAAKhK,IAAhB,EAAsBgK,CAAAA,CAAE,CAAFA,CAAAA,CAAKnH,IAA3B,CAAf,EACMF,CAAAA,GAAOqH,CAAAA,CAAE,CAAFA,CAAAA,CAAK8G,SAAL9G,CAAejK,MAD5B,EAEMssC,CAAAA,GAAIt5B,CAAAA,CAAOjC,SAFjB,EAGS5T,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAI8M,CAAAA,CAAEjK,MAAtB,EAA8B7C,CAAAA,EAA9B,EAEE,KADA,IAAMwtB,CAAAA,GAAM1gB,CAAAA,CAAE9M,CAAF8M,CAAAA,CAAK8G,SAAjB,EACSvN,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAIZ,CAApB,EAAoBA,EAAQY,CAA5B,EACE8oC,CAAAA,CAAE9oC,CAAF8oC,CAAAA,IAAQ3hB,CAAAA,CAAInnB,CAAJmnB,CAAR2hB;;AAIJ,aAAOt5B,CAAP;AAlBWlW;;AAAAA,IAAAA,CAAAA,CAAA8oC,MAAA9oC,GAAA8oC,CAAA9oC,EAObA,CAAAA,CAAAmgC,GAAAngC,GAAAmgC,CAPangC;AAObmgC,G3FoEA,E2FpEAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,QAAAA,CAAAA;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,SAAAA,KAAAA,CAAAA,GAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,CAAAA,CAAAA,GAAAA,MAAAA,CAAAA,cAAAA,IAAAA;AAAAA,QAAAA,SAAAA,EAAAA;AAAAA,mBAAAA,KAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,QAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA;AAAAA,OAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,IAAAA,CAAAA,IAAAA,CAAAA,EAAAA,CAAAA,CAAAA,cAAAA,CAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,OAAAA,EAAAA,CAAAA,EAAAA,CAAAA,CAAAA;AAAAA,KAAAA,EAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,eAAAA,CAAAA,GAAAA;AAAAA,aAAAA,WAAAA,GAAAA,CAAAA;AAAAA;;AAAAA,MAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,SAAAA,GAAAA,SAAAA,CAAAA,GAAAA,MAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA,CAAAA,SAAAA,EAAAA,IAAAA,CAAAA,EAAAA,CAAAA;AAAAA,KAAAA,CAAAA;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;ACdA,QAAA8E,CAAAA,GAAAzkC,CAAAA,CAAA,EAAAA,CAAA;AAAA,QACAoC,CAAAA,GAAApC,CAAAA,CAAA,CAAAA,CADA;AAAA,QAEAkR,CAAAA,GAAAlR,CAAAA,CAAA,CAAAA,CAFA;AAAA,QAKAyoC,CAAAA,GAAA,UAAAjsB,CAAA,EAAAA;AAAA,eAAAisB,CAAA,GAAAA;AAAAA,eAAAA,SAAAA,CAAAA,IAAAA,CAAAA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,SAAAA,CAAAA,IAAAA,IAAAA;AAKA;;AAAA,aAL6BhsB,CAAAA,CAAAgsB,CAAAhsB,EAAAD,CAAAC,CAAAA,EAC3BgsB,CAAAA,CAAA5mC,SAAA4mC,CAAArf,GAAAqf,GAAA,UAAIpf,CAAJ,EAA2C/mB,CAA3C,EAA2CA;AAEzC,eAAO,CADQ47C,CAAAA,CAAK57C,CAAAA,CAAO,CAAPA,CAAL47C,EAAgB57C,CAAAA,CAAO,CAAPA,CAAhB47C,CACR,CAAP;AADsC,OAFbzhC,EAK7BgsB,CAAA;AALA,KAAA,CAA6BhE,CAAAA,CAAA0H,IAA7B,CALA;;AAYA,aAAgB+R,CAAhB,CAAqBvxC,CAArB,EAAgCwxC,CAAhC,EAAgCA;AAI9B,WAHA,IAAMx7C,CAAAA,GAAOgK,CAAAA,CAAEhK,IAAFgK,GAASA,CAAAA,CAAEhK,IAAXgK,GAAkB,CAACA,CAAAA,CAAEwC,IAAFxC,CAAOjK,MAAR,CAA/B,EACMwH,CAAAA,GAAOvH,CAAAA,CAAKD,MADlB,EAEMi4C,CAAAA,GAAU,IAAIv2C,KAAJ,CAAU8F,CAAV,CAFhB,EAGSrK,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAIqK,CAApB,EAA0BrK,CAAAA,EAA1B,EACE86C,CAAAA,CAAQ96C,CAAR86C,CAAAA,GAAah4C,CAAAA,CAAK9C,CAAL8C,CAAAA,GAAUw7C,CAAAA,CAAQjvC,UAARivC,CAAmBt+C,CAAnBs+C,CAAvBxD;;AAEF,UAAME,CAAAA,GAAc3pC,CAAAA,CAAA9L,SAAA8L,CAAUjH,cAAViH,CAAyBvO,CAAzBuO,CAApB;AAAA,UACM4pC,CAAAA,GAAiB5pC,CAAAA,CAAA9L,SAAA8L,CAAUjH,cAAViH,CAAyBypC,CAAzBzpC,CADvB;AAAA,UAEMwE,CAAAA,GAAS,IAAItT,CAAAA,CAAAmD,MAAJ,CAAWo1C,CAAX,EAAoBhuC,CAAAA,CAAEnH,IAAtB,CAFf;AAAA,UAGMwpC,CAAAA,GAAIt5B,CAAAA,CAAOxG,UAHjB;AAAA,UAKMyuB,CAAAA,GAAIhxB,CAAAA,CAAEwC,IALZ;;AAMA,WAAStP,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAImvC,CAAAA,CAAEtsC,MAAtB,EAAsBA,EAAU7C,CAAhC,EAAmC;AAGjC,aAFA,IAAMk7C,CAAAA,GAAkB7pC,CAAAA,CAAA9L,SAAA8L,CAAUzG,eAAVyG,CAA0BrR,CAA1BqR,EAA6B4pC,CAA7B5pC,CAAxB,EACM8pC,CAAAA,GAAkB,IAAI52C,KAAJ,CAAU8F,CAAV,CADxB,EAEShE,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAIgE,CAApB,EAAoBA,EAAQhE,CAA5B,EACE80C,CAAAA,CAAgB90C,CAAhB80C,CAAAA,GAAqBD,CAAAA,CAAgB70C,CAAhB60C,CAAAA,GAAqBpuC,CAAAA,CAAEhK,IAAFgK,CAAOzG,CAAPyG,CAA1CquC;;AAEF,YAAMC,CAAAA,GAAY/pC,CAAAA,CAAA9L,SAAA8L,CAAU3G,eAAV2G,CAA0B8pC,CAA1B9pC,EAA2C2pC,CAA3C3pC,CAAlB;AACA89B,QAAAA,CAAAA,CAAEnvC,CAAFmvC,CAAAA,GAAOrR,CAAAA,CAAEsd,CAAFtd,CAAPqR;AAEF;;AAAA,aAAOt5B,CAAP;AA7BWlW;;AAAAA,IAAAA,CAAAA,CAAAipC,OAAAjpC,GAAAipC,CAAAjpC,EAObA,CAAAA,CAAA0+C,IAAA1+C,GAAA0+C,CAPa1+C;AAOb0+C,G5FsEA,E4FtEAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,QAAAA,CAAAA;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,SAAAA,KAAAA,CAAAA,GAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,CAAAA,CAAAA,GAAAA,MAAAA,CAAAA,cAAAA,IAAAA;AAAAA,QAAAA,SAAAA,EAAAA;AAAAA,mBAAAA,KAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,QAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA;AAAAA,OAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,IAAAA,CAAAA,IAAAA,CAAAA,EAAAA,CAAAA,CAAAA,cAAAA,CAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,OAAAA,EAAAA,CAAAA,EAAAA,CAAAA,CAAAA;AAAAA,KAAAA,EAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,eAAAA,CAAAA,GAAAA;AAAAA,aAAAA,WAAAA,GAAAA,CAAAA;AAAAA;;AAAAA,MAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,SAAAA,GAAAA,SAAAA,CAAAA,GAAAA,MAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA,CAAAA,SAAAA,EAAAA,IAAAA,CAAAA,EAAAA,CAAAA;AAAAA,KAAAA,CAAAA;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;ACTA,QAAAxZ,CAAAA,GAAA1kC,CAAAA,CAAA,EAAAA,CAAA;AAAA,QACAoC,CAAAA,GAAApC,CAAAA,CAAA,CAAAA,CADA;AAAA,QAEAkR,CAAAA,GAAAlR,CAAAA,CAAA,CAAAA,CAFA;AAAA,QAKA0oC,CAAAA,GAAA,UAAAlsB,CAAA,EAAAA;AAAA,eAAAksB,CAAA,GAAAA;AAAAA,eAAAA,SAAAA,CAAAA,IAAAA,CAAAA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,SAAAA,CAAAA,IAAAA,IAAAA;AAKA;;AAAA,aALkCjsB,CAAAA,CAAAisB,CAAAjsB,EAAAD,CAAAC,CAAAA,EAChCisB,CAAAA,CAAA7mC,SAAA6mC,CAAAtf,GAAAsf,GAAA,UAAIrf,CAAJ,EAA2C/mB,CAA3C,EAA2CA;AAEzC,eAAO,CADQ8H,CAAAA,CAAU9H,CAAAA,CAAO,CAAPA,CAAV8H,EAAqBkH,KAAK9F,IAA1BpB,CACR,CAAP;AADyCoB,OAFXiR,EAKlCisB,CAAA;AALA,KAAA,CAAkChE,CAAAA,CAAA0H,SAAlC,CALA;;AAYA,aAAgBhiC,CAAhB,CAA0BuC,CAA1B,EAAqCnB,CAArC,EAAqCA;AACnC,UAAMuE,CAAAA,GAAYpD,CAAAA,CAAEhK,IAApB;AAAA,UACMuH,CAAAA,GAAO6F,CAAAA,CAAUrN,MADvB;AAAA,UAMI07C,CAAAA,GAAY,IAAIh6C,KAAJ,CAAkB8F,CAAlB,CANhB;AAOA,UAAIsB,CAAAA,CAAK9I,MAAL8I,KAAgBtB,CAApB,EACEk0C,CAAAA,GAAY5yC,CAAZ4yC,CADF,KAGE,KAAK,IAAIv+C,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAIqK,CAApB,EAA0BrK,CAAAA,EAA1B,EACEu+C,CAAAA,CAAUv+C,CAAVu+C,CAAAA,GAAel0C,CAAAA,GAAOrK,CAAPqK,GAAW,CAA1Bk0C;AAIJ,UAAMpxC,CAAAA,GAAa,IAAI5I,KAAJ,CAAkB8F,CAAlB,CAAnB;AAAA,UACMyG,CAAAA,GAAS,IAAIvM,KAAJ,CAAkB8F,CAAlB,CADf;;AAMA,WAASrK,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAIqK,CAApB,EAA0BrK,CAAAA,EAA1B,EAA+B;AAC7B,YAAMw+C,CAAAA,GAASD,CAAAA,CAAUv+C,CAAVu+C,CAAf;AACApxC,QAAAA,CAAAA,CAAWnN,CAAXmN,CAAAA,GAAgB+C,CAAAA,CAAUsuC,CAAVtuC,CAAhB/C,EAEE2D,CAAAA,CAAO9Q,CAAP8Q,CAAAA,GADE0tC,CAAAA,GAAS,CAATA,GAAan0C,CAAbm0C,GACUntC,CAAAA,CAAA9L,SAAA8L,CAAUtH,iBAAVsH,CAA4BnB,CAA5BmB,EAAuCmtC,CAAAA,GAAS,CAAhDntC,CADVmtC,GAGU,CAJdrxC;AAQF;;AAAA,UAwE8BsxC,CAxE9B;AAAA,UAwE0D53C,CAxE1D;AAAA,UAwEoFC,CAxEpF;AAAA,UAAM+O,CAAAA,GAAS,IAAItT,CAAAA,CAAAmD,MAAJ,CAAWyH,CAAX,EAAuBL,CAAAA,CAAEnH,IAAzB,CAAf;AAAA,UAEMm4B,CAAAA,GAAIhxB,CAAAA,CAAE8G,SAFZ;AAAA,UAGMu7B,CAAAA,GAAIt5B,CAAAA,CAAOjC,SAHjB;AAAA,UAOI8qC,CAAAA,GAAkB,CAPtB;AAAA,UAQIC,CAAAA,GAAkB,CARtB;AAAA,UASIC,CAAAA,GAAkB,CATtB;AAAA,UAUIC,CAAAA,GAAAA,CAAW,CAVf;;AAWA,WAAS7+C,CAAAA,GAAIqK,CAAAA,GAAO,CAApB,EAAuBrK,CAAAA,IAAK,CAA5B,EAA4B,EAAKA,CAAjC,EAAoC;AAClC,YAAM8+C,CAAAA,GAAUP,CAAAA,CAAUv+C,CAAVu+C,CAAhB;AACIM,QAAAA,CAAAA,IAAaC,CAAAA,KAAY9+C,CAAzB6+C,GACFF,CAAAA,IAAmBzuC,CAAAA,CAAU4uC,CAAV5uC,CADjB2uC,IAGFA,CAAAA,GAAAA,CAAW,CAAXA,EACAD,CAAAA,IAAmB1uC,CAAAA,CAAU4uC,CAAV5uC,CADnB2uC,EAC6BC,EAC3BJ,CALAG;AAiBN;;AAAA,aARwB,MAApBD,CAAoB,IAkDMH,CAAAA,GAjDLE,CAiDKF,EAA4B53C,CAAAA,GAjDhBsoC,CAiDZsP,EAAsD33C,CAAAA,GAjDvCg3B,CAiDf2gB,EAC9BptC,CAAAA,CAAAzK,eAAAyK,CAAgBxK,CAAhBwK,EAAwBvK,CAAxBuK,EAAgC,CAAhCA,EAAmC,CAAnCA,EAAsCotC,CAAtCptC,CAnDwB,IAEO,MAApBstC,CAAoB,GA+BjC,UACII,CADJ,EACqBC,CADrB,EAC2CC,CAD3C,EAC8DnuC,CAD9D,EACgFjK,CADhF,EAEIC,CAFJ,EAEIA;AAKF,aAJA,IAAMC,CAAAA,GAAc,IAAIxC,KAAJ,CAAkBw6C,CAAlB,EAA2BtxC,IAA3B,CAAgC,CAAhC,CAApB,EAEIyxC,CAAAA,GAAmB,CAFvB,EAISl/C,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAIi/C,CAApB,EAAoBA,EAAaj/C,CAAjC,EAAoC;AAClC,cAAMm/C,CAAAA,GAAe9tC,CAAAA,CAAA9L,SAAA8L,CAAU3G,eAAV2G,CAA0BtK,CAA1BsK,EAAuCP,CAAvCO,EAA+C0tC,CAA/C1tC,CAArB;AACAxK,UAAAA,CAAAA,CAAOq4C,CAAAA,EAAPr4C,CAAAA,GAA6BC,CAAAA,CAAOq4C,CAAPr4C,CAA7BD,EACAwK,CAAAA,CAAA9L,SAAA8L,CAAUtG,cAAVsG,CAAyBtK,CAAzBsK,EAAsC2tC,CAAtC3tC,EAAkD0tC,CAAlD1tC,CADAxK;AACkDk4C;AAxClDK,OA8BJ,CA9BuBV,CA8BvB,EA9BwCvxC,CA8BxC,EA9BoDyxC,CA8BpD,EA9BqE9tC,CA8BrE,EA9B6Eq+B,CA8B7E,EA9BgFrR,CA8BhF,CA/BiC,GAWjC,UACIihB,CADJ,EACqBC,CADrB,EAC2CC,CAD3C,EAC8DR,CAD9D,EAC0F3tC,CAD1F,EAEIjK,CAFJ,EAE8BC,CAF9B,EAE8BA;AAM5B,aALA,IAAMC,CAAAA,GAAc,IAAIxC,KAAJ,CAAkBw6C,CAAlB,EAA2BtxC,IAA3B,CAAgC,CAAhC,CAApB,EAGIyxC,CAAAA,GAAmB,CAHvB,EAKSl/C,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAIi/C,CAApB,EAAoBA,EAAaj/C,CAAjC,EAAoC;AAClC,cAAMq/C,CAAAA,GAAahuC,CAAAA,CAAA9L,SAAA8L,CAAU3G,eAAV2G,CAA0BtK,CAA1BsK,EAAuCP,CAAvCO,EAA+C0tC,CAA/C1tC,CAAnB;AACAA,UAAAA,CAAAA,CAAAzK,eAAAyK,CAAgBxK,CAAhBwK,EAAwBvK,CAAxBuK,EAAgC6tC,CAAhC7tC,EALuB,IAK8CguC,CAArEhuC,EAAiFotC,CAAjFptC,GAEAA,CAAAA,CAAA9L,SAAA8L,CAAUtG,cAAVsG,CAAyBtK,CAAzBsK,EAAsC2tC,CAAtC3tC,EAAkD0tC,CAAlD1tC,CAFAA,EAGA6tC,CAAAA,IAAoBT,CAHpBptC;AAGoBotC;AArBpBa,OAQJ,CARgBZ,CAQhB,EARiCvxC,CAQjC,EAR6CyxC,CAQ7C,EAR8DD,CAQ9D,EAR+E7tC,CAQ/E,EARuFq+B,CAQvF,EAR0FrR,CAQ1F,CAb0B,EAQjBjoB,CAAP;AArEWlW;;AAAAA,IAAAA,CAAAA,CAAAkpC,YAAAlpC,GAAAkpC,CAAAlpC,EAObA,CAAAA,CAAA4K,SAAA5K,GAAA4K,CAPa5K;AAOb4K,G7FmEA,E6FnEAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,QAAAA,CAAAA;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,SAAAA,KAAAA,CAAAA,GAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,CAAAA,CAAAA,GAAAA,MAAAA,CAAAA,cAAAA,IAAAA;AAAAA,QAAAA,SAAAA,EAAAA;AAAAA,mBAAAA,KAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,QAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA;AAAAA,OAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,IAAAA,CAAAA,IAAAA,CAAAA,EAAAA,CAAAA,CAAAA,cAAAA,CAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,OAAAA,EAAAA,CAAAA,EAAAA,CAAAA,CAAAA;AAAAA,KAAAA,EAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,eAAAA,CAAAA,GAAAA;AAAAA,aAAAA,WAAAA,GAAAA,CAAAA;AAAAA;;AAAAA,MAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,SAAAA,GAAAA,SAAAA,CAAAA,GAAAA,MAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA,CAAAA,SAAAA,EAAAA,IAAAA,CAAAA,EAAAA,CAAAA;AAAAA,KAAAA,CAAAA;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;ACZA,QAAAy6B,CAAAA,GAAA7kC,CAAAA,CAAA,EAAAA,CAAA;AAAA,QACAoC,CAAAA,GAAApC,CAAAA,CAAA,CAAAA,CADA;AAAA,QAEAkR,CAAAA,GAAAlR,CAAAA,CAAA,CAAAA,CAFA;AAAA,QAKA2oC,CAAAA,GAAA,UAAAnsB,CAAA,EAAAA;AAAA,eAAAmsB,CAAA,GAAAA;AAAAA,eAAAA,SAAAA,CAAAA,IAAAA,CAAAA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,SAAAA,CAAAA,IAAAA,IAAAA;AAKA;;AAAA,aALkClsB,CAAAA,CAAAksB,CAAAlsB,EAAAD,CAAAC,CAAAA,EAChCksB,CAAAA,CAAA9mC,SAAA8mC,CAAAvf,GAAAuf,GAAA,UAAItf,CAAJ,EAA2C/mB,CAA3C,EAA2CA;AAEzC,eAAO,CADQ88C,CAAAA,CAAU98C,CAAAA,CAAO,CAAPA,CAAV88C,EAAqB9tC,KAAKvE,IAA1BqyC,CACR,CAAP;AADyCryC,OAFX0P,EAKlCksB,CAAA;AALA,KAAA,CAAkC9D,CAAAA,CAAA2H,SAAlC,CALA;;AAYA,aAAgB4S,CAAhB,CAA0BzyC,CAA1B,EAAqCI,CAArC,EAAqCA;AACnC,UAAMC,CAAAA,GAAakE,CAAAA,CAAA9L,SAAA8L,CAAU7D,cAAV6D,CAAyBvE,CAAAA,CAAEhK,IAA3BuO,EAAiCnE,CAAjCmE,CAAnB;AAAA,UACMwE,CAAAA,GAAS,IAAItT,CAAAA,CAAAmD,MAAJ,CAAWyH,CAAX,EAAuBL,CAAAA,CAAEnH,IAAzB,CADf;AAAA,UAGMm4B,CAAAA,GAAIhxB,CAAAA,CAAEuC,UAHZ;AAQA,aAJUwG,CAAAA,CAAOxG,UAAPwG,CAERjQ,GAFQiQ,CAEJioB,CAFIjoB,GAIHA,CAAP;AAhBWlW;;AAAAA,IAAAA,CAAAA,CAAAmpC,YAAAnpC,GAAAmpC,CAAAnpC,EAObA,CAAAA,CAAA4/C,SAAA5/C,GAAA4/C,CAPa5/C;AAOb4/C,G9FmEA,E8FnEAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,SAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,KAAAA,CAAAA,KAAAA,CAAAA,GAAAA,OAAAA,CAAAA,EAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,iBAAAA,CAAAA,CAAAA,CAAAA,EAAAA;AAAAA,cAAAA;AAAAA,YAAAA,CAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,WAAAA,CAAAA,OAAAA,CAAAA,EAAAA;AAAAA,YAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA;AAAAA;;AAAAA,iBAAAA,CAAAA,CAAAA,CAAAA,EAAAA;AAAAA,cAAAA;AAAAA,YAAAA,CAAAA,CAAAA,CAAAA,CAAAA,KAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,WAAAA,CAAAA,OAAAA,CAAAA,EAAAA;AAAAA,YAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA;AAAAA;;AAAAA,icAAAA,IAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,iBAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,SAAAA;AAAAA,QAAAA,IAAAA,EAAAA,EAAAA;AAAAA,QAAAA,GAAAA,EAAAA;AAAAA,OAAAA;AAAAA,aAAAA,CAAAA,GAAAA;AAAAA,QAAAA,IAAAA,EAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,QAAAA,KAAAA,EAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,QAAAA,MAAAA,EAAAA,CAAAA,CAAAA,CAAAA;AAAAA,OAAAA,EAAAA,cAAAA,OAAAA,MAAAA,KAAAA,CAAAA,CAAAA,MAAAA,CAAAA,QAAAA,CAAAA,GAAAA,YAAAA;AAAAA,eAAAA,IAAAA;AAAAA,OAAAA,CAAAA,EAAAA,CAAAA;;AAAAA,eAAAA,CAAAA,CAAAA,CAAAA,EAAAA;AAAAA,eAAAA,UAAAA,CAAAA,EAAAA;AAAAA,iBAAAA,UAAAA,CAAAA,EAAAA;AAAAA,gBAAAA,CAAAA,EAAAA,MAAAA,IAAAA,SAAAA,CAAAA,iCAAAA,CAAAA;;AAAAA,mBAAAA,CAAAA,GAAAA,IAAAA;AAAAA,kBAAAA,CAAAA,GAAAA,CAAAA,EAAAA,CAAAA,KAAAA,CAAAA,GAAAA,IAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,MAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,KAAAA,KAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,MAAAA,KAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,IAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAAA,IAAAA,EAAAA,OAAAA,CAAAA;;AAAAA,sBAAAA,CAAAA,GAAAA,CAAAA,EAAAA,CAAAA,KAAAA,CAAAA,GAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,KAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,qBAAAA,CAAAA;AAAAA,qBAAAA,CAAAA;AAAAA,kBAAAA,CAAAA,GAAAA,CAAAA;AAAAA;;AAAAA,qBAAAA,CAAAA;AAAAA,yBAAAA,CAAAA,CAAAA,KAAAA,IAAAA;AAAAA,oBAAAA,KAAAA,EAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,oBAAAA,IAAAA,EAAAA,CAAAA;AAAAA,mBAAAA;;AAAAA,qBAAAA,CAAAA;AAAAA,kBAAAA,CAAAA,CAAAA,KAAAA,IAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA;AAAAA;;AAAAA,qBAAAA,CAAAA;AAAAA,kBAAAA,CAAAA,GAAAA,CAAAA,CAAAA,GAAAA,CAAAA,GAAAA,EAAAA,EAAAA,CAAAA,CAAAA,IAAAA,CAAAA,GAAAA,EAAAA;AAAAA;;AAAAA;AAAAA,sBAAAA,EAAAA,CAAAA,GAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,IAAAA,EAAAA,MAAAA,GAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,CAAAA,MAAAA,GAAAA,CAAAA,CAAAA,MAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,IAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAAA;AAAAA,oBAAAA,CAAAA,GAAAA,CAAAA;AAAAA;AAAAA;;AAAAA,sBAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,KAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAAA;AAAAA,oBAAAA,CAAAA,CAAAA,KAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA;AAAAA;;AAAAA,sBAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,KAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAAA;AAAAA,oBAAAA,CAAAA,CAAAA,KAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,GAAAA,CAAAA;AAAAA;AAAAA;;AAAAA,sBAAAA,CAAAA,IAAAA,CAAAA,CAAAA,KAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAAA;AAAAA,oBAAAA,CAAAA,CAAAA,KAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,GAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA;AAAAA;AAAAA;;AAAAA,kBAAAA,CAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,GAAAA,CAAAA,GAAAA,EAAAA,EAAAA,CAAAA,CAAAA,IAAAA,CAAAA,GAAAA,EAAAA;AAAAA;AAAAA;;AAAAA,cAAAA,CAAAA,GAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA;AAAAA,aAAAA,CAAAA,OAAAA,CAAAA,EAAAA;AAAAA,cAAAA,CAAAA,GAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,EAAAA,CAAAA,GAAAA,CAAAA;AAAAA,aAAAA,SAAAA;AAAAA,cAAAA,CAAAA,GAAAA,CAAAA,GAAAA,CAAAA;AAAAA;;AAAAA,gBAAAA,IAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,mBAAAA;AAAAA,cAAAA,KAAAA,EAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,KAAAA,CAAAA;AAAAA,cAAAA,IAAAA,EAAAA,CAAAA;AAAAA,aAAAA;AAAAA,WAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,CAAAA;AAAAA,SAAAA;AAAAA;AAAAA,KAAAA;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,YAAAA,IAAAA,UAAAA,CAAAA,EAAAA;AAAAA,UAAAA,CAAAA,IAAAA,CAAAA,CAAAA,UAAAA,EAAAA,OAAAA,CAAAA;AAAAA,UAAAA,CAAAA,GAAAA,EAAAA;AAAAA,UAAAA,QAAAA,CAAAA,EAAAA,KAAAA,IAAAA,CAAAA,IAAAA,CAAAA,EAAAA,MAAAA,CAAAA,cAAAA,CAAAA,IAAAA,CAAAA,CAAAA,EAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,aAAAA,CAAAA,CAAAA,OAAAA,GAAAA,CAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;ACVA,QAAA1kC,CAAAA,GAAA1a,CAAAA,CAAA,CAAAA,CAAA;AAAA,QAEAq/C,CAAAA,GAAAzkC,CAAAA,CAAA5a,CAAAA,CAAA,CAAAA,CAAA4a,CAFA;AAAA,QAIAuzB,CAAAA,GAAAnuC,CAAAA,CAAA,GAAAA,CAJA;AAAA,QAUA8tC,CAAAA,GAAA,YAAA;AAKE,eAAAA,CAAA,GAAAA;AAIEx8B,aAAKguC,WAALhuC,GAAKguC,CAAc,CAAnBhuC,EAIAA,KAAKyK,MAALzK,GAAc,CAJdA,EAMAA,KAAK2J,WAAL3J,GAAmB,GANnBA;AAqCJ;;AAAA,aA7BQw8B,CAAAA,CAAAjsC,SAAAisC,CAAA5Q,UAAA4Q,GAAN,YAAA;AAAA,eAAA,CAAA,CAAA,IAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;AAAA,iBAAA,CAAA,CAAA,IAAA,EAAA,UAAA,CAAA,EAAA;AAAA,oBAAA,CAAA,CAAA,KAAA;AAAA,mBAAA,CAAA;AAEe,uBADbx8B,KAAKiuC,wBAALjuC,IACa,CAAA,CAAA,EAAMA,KAAKkuC,eAALluC,EAAN,CAAA;;AAAWkuC,mBAAAA,CAAAA;AACxB,uBADal7C,CAAAA,CAAA6N,IAAA7N,KAIb,CAAA,CAAA,EAAA,CAAO,CAAP,CAJaA,GAEX,CAAA,CAAA,EAAA,CAAO,CAAP,CADF;AAHF;AAIW,WAJX,CAAA;AAIW,SAJX,CAAA;AAIW,OAJLwpC,EAQNA,CAAAA,CAAAjsC,SAAAisC,CAAAM,oBAAAN,GAAA,UAAqBnwB,CAArB,EAAqBA;AACnB,eAAO,IAAIwwB,CAAAA,CAAAsR,kBAAJ,CAAuBnuC,IAAvB,EAA6BqM,CAA7B,EAAsCrM,KAAKguC,WAA3C,CAAP;AAAkDA,OAT9CxR,EAWNA,CAAAA,CAAAjsC,SAAAisC,CAAAQ,OAAAR,GAAA,YAAA,CAAA,CAXMA,EAYNA,CAAAA,CAAAjsC,SAAAisC,CAAAyR,wBAAAzR,GAAA,YAAA;AACE,YAAA,CAAKxhC,MAAAA,CAAOqU,QAAPrU,CAAgBgF,KAAKyK,MAArBzP,CAAL,IAAqCA,MAAAA,CAAOme,KAAPne,CAAagF,KAAKyK,MAAlBzP,CAArC,EACE,MAAM,IAAIvF,KAAJ,CAAauK,KAAKyK,MAALzK,GAAW,iCAAxB,CAAN;AAEF,YAAA,CAAKhF,MAAAA,CAAOC,SAAPD,CAAiBgF,KAAKyK,MAAtBzP,CAAL,EACE,MAAM,IAAIvF,KAAJ,CAAauK,KAAKyK,MAALzK,GAAW,0DAAxB,CAAN;AAA8B,OAjB5Bw8B,EAoBAA,CAAAA,CAAAjsC,SAAAisC,CAAA0R,eAAA1R,GAAN,YAAA;AAAA,eAAA,CAAA,CAAA,IAAA,EAAA,KAAA,CAAA,EAAA,KAAA,CAAA,EAAA,YAAA;AAAA,cAAA,CAAA;AAAA,iBAAA,CAAA,CAAA,IAAA,EAAA,UAAA,CAAA,EAAA;AAAA,oBAAA,CAAA,CAAA,KAAA;AAAA,mBAAA,CAAA;AAEI,uBAAA,CAAA,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA,CAAA,EAAA,CAAA,GAAA,CAAA,CAAA,GAAA,CAAA,CAAA,EAAMuR,CAAAA,CAAYtkC,IAAZskC,CAAiB/tC,KAAKyK,MAAtBsjC,EAA8B/tC,KAAK2J,WAAnCokC,CAAN,CAAA;;AAAyCpkC,mBAAAA,CAAAA;AACzC,uBADA3W,CAAAA,CAAA6N,IAAA7N,IACA,CAAA,CAAA,EAAA,CAAO,CAAP,CAAA;;AAAO,mBAAA,CAAA;AAGP,uBAAA,CAAA,GAAA,CAAA,CAAA,IAAA,EAAA,EADAoW,CAAAA,CAAAxC,MAAAwC,CAAO5D,OAAP4D,CAAe,aAAfA,EAA8B,+CAA6CglC,CAA3EhlC,CACA,EAAA,CAAA,CAAA,EAAA,CAAO,CAAP,CAAA;;AAAO,mBAAA,CAAA;AAAA,uBAAA,CAAA,CAAA,CAAA;AANX;AAMW,WANX,CAAA;AAMW,SANX,CAAA;AAMW,OA1BLozB,EA6BRA,CAAA;AA9CA,KAAA,EAVA;;AAUatuC,IAAAA,CAAAA,CAAAsuC,WAAAtuC,GAAAsuC,CAAAtuC;AAAAsuC,G/FmEb,E+FnEaA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;ACoCb,QAAIjL,CAAJ;AAAIA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;AACJ,QAAIhoB,CAAAA,GAAAA,CAAc,CAAlB;AAAA,QACIC,CAAAA,GAAAA,CAAe,CADnB;;AAQAtb,IAAAA,CAAAA,CAAAub,IAAAvb,GAAA,YAAA;AACE,UAAIqb,CAAJ,EACE,OAAOjB,OAAAA,CAAQC,OAARD,EAAP;AAEF,UAAIkB,CAAJ,EACE,MAAM,IAAI/T,KAAJ,CAAU,sCAAV,CAAN;AAKF,aAFA+T,CAAAA,GAAAA,CAAe,CAAfA,EAEO,IAAIlB,OAAJ,CAAkB,UAACC,CAAD,EAAUC,CAAV,EAAUA;AAAAA,SAEjC+oB,CAAAA,GAAU7iC,CAAAA,CAAQ,EAARA,CAFuB8Z,EAGzB+oB,CAHyB/oB,EAGhBH,IAHgBG,CAI7B,YAAA;AAEED,UAAAA,CAAAA,IACAiB,CAAAA,GAAAA,CAAe,CADfjB,EAEAgB,CAAAA,GAAAA,CAAc,CAFdhB;AAEc,SARaC,EAU7B,UAAAwC,CAAA,EAAAA;AACExB,UAAAA,CAAAA,GAAAA,CAAe,CAAfA,EACAhB,CAAAA,CAAOwC,CAAPxC,CADAgB;AACOwB,SAZoBxC;AAYpBwC,OAZR,CAAP;AAYeA,KAtBjB9c;;AA4BA,QAAA+c,CAAAA,GAAA,YAAA;AAGE,eAAAA,CAAA,GAAAA;AACEjL,aAAKquC,IAALruC,GAAY,CAAZA,EACAA,KAAKsuC,iBAALtuC,GAAyB,CADzBA;AAsOJ;;AAAA,aA7NEiL,CAAAA,CAAA1a,SAAA0a,CAAAsjC,KAAAtjC,GAAA,UAAMM,CAAN,EAAMA;AAAAA,aAAsB,IAAAC,CAAAA,GAAA,EAAA,EAAAta,CAAAA,GAAA,CAAtBqa,EAAsBra,CAAAA,GAAAC,SAAAA,CAAAC,MAAtBma,EAAsBra,CAAAA,EAAtBqa,EAAsBC,CAAAA,CAAAta,CAAAA,GAAA,CAAAsa,CAAAA,GAAAra,SAAAA,CAAAD,CAAAC,CAAAqa;;AAC1B,YAAA,CAAKjC,CAAL,EACE,MAAM,IAAI9T,KAAJ,CAAU,yDAAV,CAAN;AAEF,YAAMqR,CAAAA,GAAY5Y,CAAAA,CAAA2Z,GAAA3Z,EAAlB;AAAA,YAEMwH,CAAAA,GAAmB,EAFzB;AAAA,YAGM1B,CAAAA,GAAOiX,CAAAA,CAAYQ,gBAAZR,CAA6BvV,CAA7BuV,EAAqCO,CAArCP,CAHb;AAIIjX,QAAAA,CAAAA,GAAOgM,KAAKsuC,iBAAZt6C,IACFgM,KAAKwuC,YAALxuC,CAAkBhM,CAAlBgM,CADEhM,EAGJiX,CAAAA,CAAYS,cAAZT,CAA2BsmB,CAAAA,CAASkd,MAATld,CAAgB7S,QAAhB6S,CAAyBvxB,KAAKquC,IAA9B9c,EAAoCvxB,KAAKquC,IAALruC,GAAYhM,CAAhDu9B,CAA3BtmB,EAAkFvV,CAAlFuV,EAA0FO,CAA1FP,CAHIjX;AAKJ,YAAM06C,CAAAA,GAAgBxgD,CAAAA,CAAA2Z,GAAA3Z,EAAtB;AACA8R,aAAKiI,IAALjI,CAAUuL,CAAVvL,EAAwBA,KAAKquC,IAA7BruC;AACA,YAAM2uC,CAAAA,GAAczgD,CAAAA,CAAA2Z,GAAA3Z,EAApB;AAKA,eAHA+c,CAAAA,CAAYc,gBAAZd,CAA6BsmB,CAAAA,CAASkd,MAATld,CAAgB7S,QAAhB6S,CAAyBvxB,KAAKquC,IAA9B9c,EAAoCvxB,KAAKquC,IAALruC,GAAYhM,CAAhDu9B,CAA7BtmB,EAAoFvV,CAApFuV,EAA4FO,CAA5FP,GAGO;AAACnE,UAAAA,SAAAA,EAASA,CAAV;AAAYG,UAAAA,OAAAA,EAFH/Y,CAAAA,CAAA2Z,GAAA3Z,EAET;AAAqBwgD,UAAAA,aAAAA,EAAaA,CAAlC;AAAoCC,UAAAA,WAAAA,EAAWA;AAA/C,SAAP;AAAsDA,OApBxD1jC,EAyBAA,CAAAA,CAAA1a,SAAA0a,CAAA2jC,QAAA3jC,GAAA,UAASM,CAAT,EAA+B1N,CAA/B,EAA+BA;AAC7B,YAAA,CAAK0L,CAAL,EACE,MAAM,IAAI9T,KAAJ,CAAU,yDAAV,CAAN;AAEF,YAAMqR,CAAAA,GAAY5Y,CAAAA,CAAA2Z,GAAA3Z,EAAlB;AAAA,YAEM8F,CAAAA,GAAO6J,CAAAA,CAAK2D,UAFlB;AAGIxN,QAAAA,CAAAA,GAAOgM,KAAKsuC,iBAAZt6C,IACFgM,KAAKwuC,YAALxuC,CAAkBhM,CAAlBgM,CADEhM,EAKJu9B,CAAAA,CAASkd,MAATld,CAAgB7S,QAAhB6S,CAAyBvxB,KAAKquC,IAA9B9c,EAAoCvxB,KAAKquC,IAALruC,GAAYhM,CAAhDu9B,EAAsDp9B,GAAtDo9B,CAA0D1zB,CAA1D0zB,CALIv9B;AAOJ,YAAM06C,CAAAA,GAAgBxgD,CAAAA,CAAA2Z,GAAA3Z,EAAtB;AACA8R,aAAKiI,IAALjI,CAAUuL,CAAVvL,EAAwBA,KAAKquC,IAA7BruC;AACA,YAAM2uC,CAAAA,GAAczgD,CAAAA,CAAA2Z,GAAA3Z,EAApB;AAMA,eAHA2P,CAAAA,CAAK1J,GAAL0J,CAAS0zB,CAAAA,CAASkd,MAATld,CAAgB7S,QAAhB6S,CAAyBvxB,KAAKquC,IAA9B9c,EAAoCvxB,KAAKquC,IAALruC,GAAYhM,CAAhDu9B,CAAT1zB,GAGO;AAACiJ,UAAAA,SAAAA,EAASA,CAAV;AAAYG,UAAAA,OAAAA,EAFH/Y,CAAAA,CAAA2Z,GAAA3Z,EAET;AAAqBwgD,UAAAA,aAAAA,EAAaA,CAAlC;AAAoCC,UAAAA,WAAAA,EAAWA;AAA/C,SAAP;AAAsDA,OA/CxD1jC,EAkDUA,CAAAA,CAAA1a,SAAA0a,CAAAhD,IAAAgD,GAAV,UAAeM,CAAf,EAAqC8iC,CAArC,EAAqCA;AAAAA,SAGnCpmC,GADcspB,CAAAA,CAAgBhmB,CAAhBgmB,CAFqB8c,EAG9BA,CAH8BA;AAG9BA,OArDPpjC,EAwDOA,CAAAA,CAAAQ,gBAAAR,GAAP,UAAwBvV,CAAxB,EAA0C8V,CAA1C,EAA0CA;AAGxC,aADA,IAAIxX,CAAAA,GAAO,IAAI,IAAIwX,CAAAA,CAAOpa,MAA1B,EACS7C,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAIid,CAAAA,CAAOpa,MAA3B,EAAmC7C,CAAAA,EAAnC,EAAwC;AACtC,cAAMsgD,CAAAA,GAAQrjC,CAAAA,CAAOjd,CAAPid,CAAd;AAAA,cACMsjC,CAAAA,GAAYD,CAAAA,CAAM,CAANA,CADlB;AAAA,cAEME,CAAAA,GAAYF,CAAAA,CAAM,CAANA,CAFlB;AAAA,cAGMG,CAAAA,GAAYH,CAAAA,CAAM,CAANA,CAHlB;AAAA,cAKIt6B,CAAAA,GAAM,CALV;;AAMA,kBAAQw6B,CAAR;AACE,iBAAK,MAAL;AACA,iBAAK,OAAL;AACA,iBAAK,SAAL;AACEx6B,cAAAA,CAAAA,GAAM,CAANA;AACA;;AACF,iBAAK,SAAL;AACEA,cAAAA,CAAAA,GAAM,CAANA;AACA;;AACF,iBAAK,SAAL;AACE,kBAAA,CAAKu6B,CAAL,EAAgB;AAEdp5C,gBAAAA,CAAAA,CAAOoG,IAAPpG,CAAY,CAAZA;AACA;AACK;;AAAA,kBAAA,CAAI5C,KAAAA,CAAMqN,OAANrN,CAAcg8C,CAAdh8C,CAAJ,IAAkBg8C,CAAcvuC,WAAAA,CAAY+a,MAAZ/a,CAAmBuuC,CAAnBvuC,CAAhC,EAGL,MAAM,IAAI9K,KAAJ,CAAU,8CAAV,CAAN;AAFA8e,cAAAA,CAAAA,GAAM,IAAI5hB,IAAAA,CAAKw3B,IAALx3B,CAAUm8C,CAAAA,CAAU19C,MAAV09C,GAAmB,CAA7Bn8C,CAAV4hB;AAIF;;AACF,iBAAK,UAAL;AACA,iBAAK,YAAL;AACE,kBAAA,CAAKu6B,CAAL,EAAgB;AAEdp5C,gBAAAA,CAAAA,CAAOoG,IAAPpG,CAAY,CAAZA;AACA;AACK;;AAAA,kBAAI5C,KAAAA,CAAMqN,OAANrN,CAAcg8C,CAAdh8C,CAAJ,EAA8B;AACnC,oBAAkB,YAAdk8C,CAAc,IAAyB,UAAdA,CAA7B,EACE,MAAM,IAAIt0C,SAAJ,CAAc,6DAAd,CAAN;AAEF6Z,gBAAAA,CAAAA,GAAyB,IAAnBu6B,CAAAA,CAAU19C,MAAhBmjB;AAAgBnjB,eAJX,MAKA;AAAA,oBAAA,CAAImP,WAAAA,CAAY+a,MAAZ/a,CAAmBuuC,CAAnBvuC,CAAJ,EAGL,MAAM,IAAI7F,SAAJ,CAAc,oCAAd,CAAN;AAFA6Z,gBAAAA,CAAAA,GAAMu6B,CAAAA,CAAUttC,UAAhB+S;AAIF;;AAAA;;AACF;AACE,oBAAM,IAAI9e,KAAJ,CAAU,mCAAiCs5C,CAA3C,CAAN;AAtCJ;;AAyCAr5C,UAAAA,CAAAA,CAAOoG,IAAPpG,CAAY1B,CAAZ0B,GACA1B,CAAAA,IAAQugB,CADR7e;AAIF;;AAAA,eAAO1B,CAAP;AAAOA,OA/GTiX,EAmHOA,CAAAA,CAAAS,cAAAT,GAAP,UAAsBgkC,CAAtB,EAA0Cv5C,CAA1C,EAA4D8V,CAA5D,EAA4DA;AAC1D,YAAM0jC,CAAAA,GAAS,IAAIpsC,UAAJ,CAAemsC,CAAAA,CAAO3tC,MAAtB,EAA8B2tC,CAAAA,CAAO1tC,UAArC,CAAf;AAAA,YACM4tC,CAAAA,GAAU,IAAIpsC,WAAJ,CAAgBksC,CAAAA,CAAO3tC,MAAvB,EAA+B2tC,CAAAA,CAAO1tC,UAAtC,CADhB;AAAA,YAEM6tC,CAAAA,GAAU,IAAIpsC,YAAJ,CAAiBisC,CAAAA,CAAO3tC,MAAxB,EAAgC2tC,CAAAA,CAAO1tC,UAAvC,CAFhB;AAIA4tC,QAAAA,CAAAA,CAAQ,CAARA,CAAAA,GAAa3jC,CAAAA,CAAOpa,MAApB+9C;;AAEA,aAAK,IAAI5gD,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAIid,CAAAA,CAAOpa,MAA3B,EAAmC7C,CAAAA,EAAnC,EAAwC;AACtC,cAAMsgD,CAAAA,GAAQrjC,CAAAA,CAAOjd,CAAPid,CAAd;AAAA,cACMsjC,CAAAA,GAAYD,CAAAA,CAAM,CAANA,CADlB;AAAA,cAEME,CAAAA,GAAYF,CAAAA,CAAM,CAANA,CAFlB;AAAA,cAGMG,CAAAA,GAAYH,CAAAA,CAAM,CAANA,CAHlB;AAAA,cAIMQ,CAAAA,GAAU35C,CAAAA,CAAOnH,CAAPmH,CAJhB;AAAA,cAKM45C,CAAAA,GAAWD,CAAAA,IAAW,CAL5B;AASA,cAFAF,CAAAA,CAAQ5gD,CAAAA,GAAI,CAAZ4gD,CAAAA,GAAiBE,CAAjBF,EAEkB,UAAdH,CAAc,IAAqB,MAAZK,CAA3B,EAIA,QAAQN,CAAR;AACE,iBAAK,MAAL;AACEE,cAAAA,CAAAA,CAAOI,CAAPJ,CAAAA,GAAOI,CAA8D,CAA9DA,KAAYP,CAAZO,GAAqE,CAArEA,GAAyE,CAAhFJ;AACA;;AACF,iBAAK,OAAL;AACEC,cAAAA,CAAAA,CAAOI,CAAPJ,CAAAA,GAAmBJ,CAAnBI;AACA;;AACF,iBAAK,SAAL;AACEE,cAAAA,CAAAA,CAAQE,CAARF,CAAAA,GAAoBN,CAApBM;AACA;;AACF,iBAAK,SAAL;AACE,kBAAMG,CAAAA,GAAYT,CAAlB;AAEAG,cAAAA,CAAAA,CAAOvwB,QAAPuwB,CAAgBI,CAAhBJ,EAAyBI,CAAAA,GAAUE,CAAAA,CAAUn+C,MAA7C69C,EAAqD96C,GAArD86C,CAAyDH,CAAzDG;AACA;;AACF,iBAAK,UAAL;AACE,kBAAMO,CAAAA,GAAcV,CAApB;AACAI,cAAAA,CAAAA,CAAOxwB,QAAPwwB,CAAgBI,CAAhBJ,EAA0BI,CAAAA,GAAWE,CAAAA,CAAWp+C,MAAhD89C,EAAwD/6C,GAAxD+6C,CAA4DM,CAA5DN;AACA;;AACF,iBAAK,YAAL;AACE,kBAAMO,CAAAA,GAAgBX,CAAtB;AACAM,cAAAA,CAAAA,CAAQ1wB,QAAR0wB,CAAiBE,CAAjBF,EAA2BE,CAAAA,GAAWG,CAAAA,CAAar+C,MAAnDg+C,EAA2Dj7C,GAA3Di7C,CAA+DK,CAA/DL;AACA;;AACF;AACE,oBAAM,IAAI35C,KAAJ,CAAU,mCAAiCs5C,CAA3C,CAAN;AAxBJ;AAwBqDA;AAAAA,OAhKzD9jC,EAsKOA,CAAAA,CAAAc,gBAAAd,GAAP,UAAwB3J,CAAxB,EAA4C5L,CAA5C,EAA8D8V,CAA9D,EAA8DA;AAI5D,aAHA,IAAM4jC,CAAAA,GAAU,IAAIpsC,YAAJ,CAAiB1B,CAAAA,CAAOA,MAAxB,EAAgCA,CAAAA,CAAOC,UAAvC,CAAhB,EACM0tC,CAAAA,GAAS,IAAIvsC,UAAJ,CAAepB,CAAAA,CAAOA,MAAtB,EAA8BA,CAAAA,CAAOC,UAArC,CADf,EAGShT,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAIid,CAAAA,CAAOpa,MAA3B,EAAmC7C,CAAAA,EAAnC,EAAwC;AACtC,cAAMsgD,CAAAA,GAAQrjC,CAAAA,CAAOjd,CAAPid,CAAd;AAAA,cACMsjC,CAAAA,GAAYD,CAAAA,CAAM,CAANA,CADlB;AAAA,cAEME,CAAAA,GAAYF,CAAAA,CAAM,CAANA,CAFlB;AAAA,cAGMG,CAAAA,GAAYH,CAAAA,CAAM,CAANA,CAHlB;AAAA,cAIMQ,CAAAA,GAAU35C,CAAAA,CAAOnH,CAAPmH,CAJhB;AAAA,cAMM45C,CAAAA,GAAWD,CAAAA,IAAW,CAN5B;AASA,cAAkB,UAAdL,CAAc,IAAuB,YAAdA,CAA3B,EAIA,QAAQD,CAAR;AACE,iBAAK,YAAL;AACE,kBAAMU,CAAAA,GAAgBX,CAAtB;AACAW,cAAAA,CAAAA,CAAat7C,GAAbs7C,CAAiBL,CAAAA,CAAQ1wB,QAAR0wB,CAAiBE,CAAjBF,EAA2BE,CAAAA,GAAWG,CAAAA,CAAar+C,MAAnDg+C,CAAjBK;AACA;;AACF,iBAAK,SAAL;AACE,kBAAMF,CAAAA,GAAaT,CAAnB;AACAS,cAAAA,CAAAA,CAAUp7C,GAAVo7C,CAAcN,CAAAA,CAAOvwB,QAAPuwB,CAAgBI,CAAhBJ,EAAyBI,CAAAA,GAAUE,CAAAA,CAAUn+C,MAA7C69C,CAAdM;AACA;;AACF;AACE,oBAAM,IAAI95C,KAAJ,CAAU,mCAAiCs5C,CAA3C,CAAN;AAVJ;AAUqDA;AAAAA,OAlMzD9jC,EAwMQA,CAAAA,CAAA1a,SAAA0a,CAAAujC,YAAAvjC,GAAR,UAAqBykC,CAArB,EAAqBA;AAQnB,YANkB,MAAd1vC,KAAKquC,IAAS,IAChB9c,CAAAA,CAASoe,KAATpe,CAAevxB,KAAKquC,IAApB9c,CADgB,EAIlBvxB,KAAKsuC,iBAALtuC,GAAyB,IAAI0vC,CAJX,EAKlB1vC,KAAKquC,IAALruC,GAAYuxB,CAAAA,CAASqe,OAATre,CAAiBvxB,KAAKsuC,iBAAtB/c,CALM,EAMA,MAAdvxB,KAAKquC,IAAT,EACE,MAAM,IAAI54C,KAAJ,CAAU,yDAAV,CAAN;AAAgB,OAjNpBwV,EAqNAA,CAAAA,CAAA1a,SAAA0a,CAAA+xB,OAAA/xB,GAAA,YAAA;AACE,YAAA,CAAK1B,CAAL,EACE,MAAM,IAAI9T,KAAJ,CAAU,yDAAV,CAAN;AAEgB,cAAduK,KAAKquC,IAAS,IAChB9c,CAAAA,CAASoe,KAATpe,CAAevxB,KAAKquC,IAApB9c,CADgB;AACI8c,OA1NxBpjC,EA6NFA,CAAA;AA1OA,KAAA,EAAA;;AAAa/c,IAAAA,CAAAA,CAAA+c,WAAA/c,GAAA+c,CAAA/c,EA+OAA,CAAAA,CAAA2Z,GAAA3Z,GAA8B,eAAA,OAAhB8a,WAAgB,IAAeA,WAAAA,CAAYnB,GAA3B,GAAkC,YAAA;AAAM,aAAAmB,WAAAA,CAAYnB,GAAZmB,EAAA;AAAYnB,KAApD,GAA4DrB,IAAAA,CAAKqB,GA/O/F3Z;AA+O+F2Z,GhGrP5G,EgGqP4GA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,KAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;ACtU5G,UACAgoC,CADA;AAAA,UAAAvrB,CAAAA,IACAurB,CAAAA,GAAA,eAAA,OAAAC,QAAA,IAAAA,QAAAA,CAAAC,aAAA,GAAAD,QAAAA,CAAAC,aAAAD,CAAAjiC,GAAA,GAAAA,KAAA3b,CAAA29C,EACA,UACAvrB,CADA,EACAA;AAGAA,QAAAA,CAAAA,GAAAA,KAAA,CAAAA,MAFAA,CAAAA,GAAAA,CAAAA,IAAA,EAEAA,IAAAA,CAAAA,GAAA,EAAAA;AAAA,YAAwEp0B,CAAxE;AAAA,YAAiD8/C,CAAAA,GAAA,EAAjD;;AAAgF,aAAA9/C,CAAA,IAAAo0B,CAAA,EAAmBA,CAAAA,CAAA9zB,cAAA8zB,CAAAp0B,CAAAo0B,MAA+B0rB,CAAAA,CAAA9/C,CAAA8/C,CAAAA,GAAA1rB,CAAAA,CAAAp0B,CAAAo0B,CAA/BA;;AAAiEA,QAAAA,CAAAA,CAAA,SAAAA,GAAA,EAAAA,EAAuBA,CAAAA,CAAA,WAAAA,GAAA,gBAAvBA,EAA8DA,CAAAA,CAAA,IAAAA,GAAA,UAAA2rB,CAAA,EAAAC,CAAA,EAAAA;AAAwC,gBAAAA,CAAA;AAAAA,SAAtG5rB,EAAqHA,CAAAA,CAAA,MAAAA,GAAA,EAArHA,EAAyIA,CAAAA,CAAA,OAAAA,GAAA,EAAzIA;AAA8J,YAA6D6rB,CAA7D;AAAA,YAA2FC,CAA3F;AAAA,YAAAC,CAAAA,GAAAA,CAAA,CAAA;AAAA,YAA6BC,CAAAA,GAAAA,CAAA,CAA7B;AAA0HD,QAAAA,CAAAA,GAAA,YAAA,OAAA7hD,MAAA6hD,EAA4CC,CAAAA,GAAA,cAAA,OAAAC,aAA5CF,EAAoGF,CAAAA,GAAA,YAAA,OAAAhhC,CAAA,IAAAA,CAA6DkhC,CAA7D,IAA6DA,CAAAC,CAAjKD,EAA4ND,CAAAA,GAAAA,CAAAC,CAAAD,IAAAC,CAAAF,CAAAC,IAAAD,CAAAG,CAA5ND;AAAmT,YAAoNG,CAApN;AAAA,YAA+NC,CAA/N;AAAA,YAAAC,CAAAA,GAAA,EAAA;AAA8JP,QAAAA,CAAAA,IAAwBO,CAAAA,GAAAC,CAAAA,GAAA,GAAAD,EAAsDpsB,CAAAA,CAAA,IAAAA,GAAA,UAAAssB,CAAA,EAAAC,CAAA,EAAAA;AAAoD,cAAAxwB,CAAA;AAA4J,iBAApJmwB,CAAAA,KAAAA,CAAAA,GAAkB9hD,CAAAA,CAAQ,EAARA,CAAlB8hD,CAAAA,EAAgCC,CAAAA,KAAAA,CAAAA,GAAsB/hD,CAAAA,CAAQ,EAARA,CAAtB+hD,CAAhCD,EAAsEI,CAAAA,GAAAH,CAAAA,CAAA,SAAAA,CAAAG,CAAAH,CAAtED,EAA+GnwB,CAAAA,GAAAmwB,CAAAA,CAAA,YAAAA,CAAAI,CAAAJ,CAA/GA,EAAoJK,CAAAA,GAAAxwB,CAAAwwB,GAAAxwB,CAAAA,CAAA5e,QAAA4e,EAAA;AAAA5e,SAAtQivC,EAAwSpsB,CAAAA,CAAA,UAAAA,GAAA,UAAAssB,CAAA,EAAAA;AAAmD,cAAAvwB,CAAAA,GAAAiE,CAAAA,CAAA,IAAAA,CAAAssB,CAAAtsB,EAAAssB,CAAA,CAAAtsB,CAAA;AAAiG,iBAA3DjE,CAAAA,CAAA/e,MAAA+e,KAAgBA,CAAAA,GAAA,IAAA3d,UAAA,CAAA2d,CAAA,CAAhBA,GAAwCywB,CAAAA,CAAAzwB,CAAAA,CAAA/e,MAAAwvC,CAAxCzwB,EAA2DA,CAAA;AAAAA,SAA5bqwB,EAAwcvhC,CAAAA,CAAA,IAAAA,CAAA/d,MAAA+d,GAAA,CAAAA,KAA6BmV,CAAAA,CAAA,WAAAA,GAAAnV,CAAAA,CAAA,IAAAA,CAAA,CAAAA,EAAA6U,OAAA7U,CAAA,KAAAA,EAAA,GAAAA,CAA7BA,CAAxcuhC,EAAiiBpsB,CAAAA,CAAA,SAAAA,GAAAnV,CAAAA,CAAA,IAAAA,CAAApW,KAAAoW,CAAA,CAAAA,CAAjiBuhC,EAA8kBvhC,CAAAA,CAAA,EAAAA,CAAA,mBAAAA,EAAA,UAAA4hC,CAAA,EAAAA;AAA+C,cAAA,EAAAA,CAAAA,YAAAC,EAAA,CAAA,EAAgC,MAAAD,CAAA;AAAAA,SAA/E5hC,CAA9kBuhC,EAAyqBvhC,CAAAA,CAAA,EAAAA,CAAA,oBAAAA,EAAA8hC,EAAA9hC,CAAzqBuhC,EAAmtBpsB,CAAAA,CAAA,IAAAA,GAAA,UAAA2rB,CAAA,EAAAA;AAAgC9gC,UAAAA,CAAAA,CAAA,IAAAA,CAAA8gC,CAAA9gC;AAAA8gC,SAAnvBS,EAA4wBpsB,CAAAA,CAAA,OAAAA,GAAA,YAAA;AAA6B,iBAAA,4BAAA;AAAA,SAAj0B6rB,IAAq2BC,CAAAA,IAA8B,eAAA,OAAAj0B,IAAA,KAA6BmI,CAAAA,CAAA,IAAAA,GAAA,UAAA5Q,CAAA,EAAAA;AAAsC,iBAAAyI,IAAAA,CAAAzI,CAAAyI,CAAA;AAAAzI,SAAnE,GAAmF4Q,CAAAA,CAAA,UAAAA,GAAA,UAAA5Q,CAAA,EAAAA;AAA4C,cAAA7V,CAAA;AAAS,iBAAA,cAAA,OAAAqzC,UAAA,GAAmC,IAAAxuC,UAAA,CAAAwuC,UAAAA,CAAAx9B,CAAAw9B,CAAA,CAAnC,IAA8FJ,CAAAA,CAAA,YAAA,QAAtBjzC,CAAAA,GAAAse,IAAAA,CAAAzI,CAAAyI,EAAA,QAAAA,CAAsB,CAAA20B,CAAAA,EAA+BjzC,CAA7H,CAAA;AAA6HA,SAArQ,EAAkR,eAAA,OAAAszC,UAAA,GAAmC7sB,CAAAA,CAAA,SAAAA,GAAA6sB,UAAnC,GAAmCA,KAA+B,CAA/BA,KAA+BhgD,SAA/BggD,KAAsE7sB,CAAAA,CAAA,SAAAA,GAAAnzB,SAAtEggD,CAArT,EAAyZ,cAAA,OAAAC,IAAA,KAA6B9sB,CAAAA,CAAA,IAAAA,GAAA,UAAA2rB,CAAA,EAAAA;AAAgCmB,UAAAA,IAAAA,CAAAnB,CAAAmB,CAAAA;AAAAnB,SAA7D,CAAvbG,IAAofH,CAAeI,CAAAA,IAAAC,CAAfL,MAAkEK,CAAAA,GAA0BI,CAAAA,GAAA7hC,IAAAA,CAAAwiC,QAAAxiC,CAAAyiC,IAA1BhB,GAA6DR,QAAAA,CAAAC,aAAAD,KAAgCY,CAAAA,GAAAZ,QAAAA,CAAAC,aAAAD,CAAAjiC,GAAhCiiC,CAA7DQ,EAAwIT,CAAAA,KAAea,CAAAA,GAAAb,CAAfA,CAAxIS,EAA2NI,CAAAA,GAAzC,MAAAA,CAAAA,CAAA70C,OAAA60C,CAAA,OAAAA,CAAA,GAAyCA,CAAAA,CAAA/zB,MAAA+zB,CAAA,CAAAA,EAAAA,CAAAA,CAAA50B,WAAA40B,CAAA,GAAAA,IAAA,CAAAA,CAAzC,GAA2H,EAA7SJ,EAAgUhsB,CAAAA,CAAA,IAAAA,GAAA,UAAAitB,CAAA,EAAAA;AAAwC,cAAAC,CAAAA,GAAA,IAAAC,cAAA,EAAA;AAAoE,iBAAzCD,CAAAA,CAAAE,IAAAF,CAAA,KAAAA,EAAAD,CAAAC,EAAAD,CAAA,CAAAC,GAA0BA,CAAAA,CAAAG,IAAAH,CAAA,IAAAA,CAA1BA,EAAyCA,CAAAA,CAAAI,YAAA;AAAAA,SAA5atB,EAAqcA,CAAAA,KAA0BhsB,CAAAA,CAAA,UAAAA,GAAA,UAAAitB,CAAA,EAAAA;AAA8C,cAAAC,CAAAA,GAAA,IAAAC,cAAA,EAAA;AAAmG,iBAAxED,CAAAA,CAAAE,IAAAF,CAAA,KAAAA,EAAAD,CAAAC,EAAAD,CAAA,CAAAC,GAA0BA,CAAAA,CAAAK,YAAAL,GAAA,aAA1BA,EAAyDA,CAAAA,CAAAG,IAAAH,CAAA,IAAAA,CAAzDA,EAAwE,IAAA9uC,UAAA,CAAA8uC,CAAAA,CAAApO,QAAA,CAAA;AAAAA,SAA3KkN,CAArcA,EAAqpBhsB,CAAAA,CAAA,SAAAA,GAAA,UAAAitB,CAAA,EAAAO,CAAA,EAAApnC,CAAA,EAAAA;AAA2D,cAAA8mC,CAAAA,GAAA,IAAAC,cAAA,EAAA;AAA2BD,UAAAA,CAAAA,CAAAE,IAAAF,CAAA,KAAAA,EAAAD,CAAAC,EAAAD,CAAA,CAAAC,GAAyBA,CAAAA,CAAAK,YAAAL,GAAA,aAAzBA,EAAwDA,CAAAA,CAAAM,MAAAN,GAAA,YAAA;AAAiC,mBAAAA,CAAAA,CAAAvB,MAAA,IAAA,KAAAuB,CAAAA,CAAAvB,MAAA,IAAAuB,CAAAA,CAAApO,QAAA,GAAiD0O,CAAAA,CAAAN,CAAAA,CAAApO,QAAA0O,CAAjD,GAA6EpnC,CAAAA,EAA7E;AAA6EA,WAAtK8mC,EAAiLA,CAAAA,CAAA9mC,OAAA8mC,GAAA9mC,CAAjL8mC,EAAqMA,CAAAA,CAAAG,IAAAH,CAAA,IAAAA,CAArMA;AAAqM,SAAh7BlB,EAAg8BhsB,CAAAA,CAAA,cAAAA,GAAA,UAAAmM,CAAA,EAAAA;AAAyCqf,UAAAA,QAAAA,CAAArf,KAAAqf,GAAArf,CAAAqf;AAAArf,SAA3iCwf,CAAz1CE;AAAg6E,YAAA7vB,CAAAA,GAAAgE,CAAAA,CAAA,KAAAA,KAAA,eAAA,OAAAnf,OAAA,GAAAA,OAAAA,CAAAL,GAAAK,CAAAhV,IAAAgV,CAAAA,OAAAA,CAAA,GAAA,eAAA,OAAA4sC,KAAA,GAAAA,KAAA,GAAA,IAAAztB,CAAA;AAAA,YAAwHtZ,CAAAA,GAAAsZ,CAAAA,CAAA,QAAAA,KAAA,eAAA,OAAA0tB,QAAA,GAAAA,QAAA,GAAA,eAAA,OAAA7sC,OAAA,IAAAA,OAAAA,CAAA8sC,IAAA9sC,CAAAhV,IAAAgV,CAAAA,OAAAA,CAAA,IAAAmb,CAAAgE,CAAxH;;AAA2P,aAAAp0B,CAAA,IAAA8/C,CAAA,EAA4BA,CAAAA,CAAAx/C,cAAAw/C,CAAA9/C,CAAA8/C,MAAwC1rB,CAAAA,CAAAp0B,CAAAo0B,CAAAA,GAAA0rB,CAAAA,CAAA9/C,CAAA8/C,CAAxCA;;AAA0EA,QAAAA,CAAAA,GAAAA,KAAA99C,CAAA89C;AAA2wB,YAAAkC,CAAAA,GAAA;AAAqBC,qBAAA,UAAA92C,CAAA,EAAAC,CAAA,EAAAA;AAAwB,mBAAAD,CAAAA,GAAAC,CAAA;AAAAA,WAA7C;AAAwD82C,UAAAA,QAAAA,EAAA,YAAA,CAAA;AAAxD,SAAA;AAAiH,YAAAt/C,KAAA,CAAA,CAAA;;AAA63B,YAAoLu/C,CAApL;AAAA,YAAAC,CAAAA,GAAA,CAAA;AAAA,YAAeC,CAAAA,GAAA,UAAA3iD,CAAA,EAAAA;AAAgC0iD,UAAAA,CAAAA,GAAA1iD,CAAA0iD;AAAA1iD,SAA/C;;AAA2G,oBAAA,OAAAw0B,WAAA,IAAkCpZ,CAAAA,CAAA,iCAAAA,CAAlC;AAAsG,YAAAwnC,CAAAA,GAAAA,CAAA,CAAA;;AAAiC,iBAAA1B,CAAA,CAAA2B,CAAA,EAAAC,CAAA,EAAAA;AAAgCD,UAAAA,CAAAA,IAAexB,EAAAA,CAAA,uBAAAyB,CAAAzB,CAAfwB;AAAmmD;;AAAA,YAA8vFnxC,CAA9vF;AAAA,YAA8vFqxC,CAA9vF;AAAA,YAA8vFlE,CAA9vF;AAAA,YAA8vFmE,CAA9vF;AAAA,YAAiBC,CAAAA,GAAA,eAAA,OAAAC,WAAA,GAAA,IAAAA,WAAA,CAAA,MAAA,CAAA,GAAA,KAAA5gD,CAAjB;;AAAoG,iBAAA6gD,CAAA,CAAAC,CAAA,EAAAtX,CAAA,EAAAuX,CAAA,EAAAA;AAAoG,eAA7C,IAAAC,CAAAA,GAAAxX,CAAAA,GAAAuX,CAAA,EAA8BE,CAAAA,GAAAzX,CAAe,EAAAsX,CAAAA,CAAAG,CAAAH,CAAAA,IAAAG,EAAAA,CAAAA,IAAAD,CAAAC,CAAA,GAAAD,EAAAC,CAAAD;;AAAkD,cAAAC,CAAAA,GAAAzX,CAAAyX,GAAA,EAAAA,IAAAH,CAAAA,CAAAt0B,QAAAy0B,IAAAN,CAAA,EAAiD,OAAAA,CAAAA,CAAAx+B,MAAAw+B,CAAAG,CAAAA,CAAAt0B,QAAAs0B,CAAAtX,CAAAsX,EAAAG,CAAAH,CAAAH,CAAA;;AAAwE,eAAX,IAAA1xC,CAAAA,GAAA,EAAW,EAAAu6B,CAAAA,GAAAyX,CAAA,GAAA;AAAkB,gBAAAC,CAAAA,GAAAJ,CAAAA,CAAAtX,CAAAA,EAAAsX,CAAA;;AAAsB,gBAAA,MAAAI,CAAA,EAAA;AAAoD,kBAAAC,CAAAA,GAAA,KAAAL,CAAAA,CAAAtX,CAAAA,EAAAsX,CAAA;;AAAyB,kBAAA,QAAA,MAAAI,CAAA,CAAA,EAAA;AAAmE,oBAAAE,CAAAA,GAAA,KAAAN,CAAAA,CAAAtX,CAAAA,EAAAsX,CAAA;AAAqH,oBAAA,CAA1EI,CAAAA,GAAlB,QAAA,MAAAA,CAAA,IAAAA,CAAkB,KAAAA,CAAlBA,KAAkB,EAAlBA,GAAkBC,CAAAA,IAAA,CAAlBD,GAAkBE,CAAlB,GAAkBA,CAA6B,IAAAF,CAA7BE,KAA6B,EAA7BA,GAA6BD,CAAAA,IAAA,EAA7BC,GAA6BA,CAAAA,IAAA,CAA7BA,GAA6B,KAAAN,CAAAA,CAAAtX,CAAAA,EAAAsX,CAA6C,IAAA,KAAA,EAAa7xC,CAAAA,IAAAoO,MAAAA,CAAA4O,YAAA5O,CAAA6jC,CAAA7jC,CAAApO,CAAb,KAA0C;AAAK,sBAAAoyC,CAAAA,GAAAH,CAAAA,GAAA,KAAA;AAAgBjyC,kBAAAA,CAAAA,IAAAoO,MAAAA,CAAA4O,YAAA5O,CAAA,QAAAgkC,CAAAA,IAAA,EAAAhkC,EAAA,QAAA,OAAAgkC,CAAAhkC,CAAApO;AAAAoyC;AAAAA,eAAvP,MAAkBpyC,CAAAA,IAAAoO,MAAAA,CAAA4O,YAAA5O,CAAA4O,CAAA,KAAAi1B,CAAAj1B,KAAA,CAAAA,GAAAk1B,CAAA9jC,CAAApO;AAAAkyC,aAA/F,MAAclyC,CAAAA,IAAAoO,MAAAA,CAAA4O,YAAA5O,CAAA6jC,CAAA7jC,CAAApO;AAA6W;;AAAA,iBAAAA,CAAA;AAAW;;AAAA,iBAAAqyC,CAAA,CAAAC,CAAA,EAAAR,CAAA,EAAAA;AAA0C,iBAAAQ,CAAAA,GAAAV,CAAAA,CAAAtE,CAAAsE,EAAAU,CAAAV,EAAAE,CAAAF,CAAAU,GAAA,EAAA;AAAq2D;;AAAA,iBAAAC,CAAA,CAAAr4C,CAAA,EAAAs4C,CAAA,EAAAA;AAAqE,iBAAxCt4C,CAAAA,GAAAs4C,CAAAt4C,GAAA,CAAAA,KAAiBA,CAAAA,IAAAs4C,CAAAA,GAAAt4C,CAAAA,GAAAs4C,CAAjBt4C,GAAwCA,CAAA;AAA+E;;AAAA,iBAAAu4C,CAAA,GAAAA;AAAmCtvB,UAAAA,CAAAA,CAAA,KAAAA,GAAAquB,CAAAA,GAAA,IAAAhwC,SAAA,CAAArB,CAAA,CAAAgjB,EAA4CA,CAAAA,CAAA,MAAAA,GAAA,IAAA1hB,UAAA,CAAAtB,CAAA,CAA5CgjB,EAA2FA,CAAAA,CAAA,MAAAA,GAAAsuB,CAAAA,GAAA,IAAA9vC,UAAA,CAAAxB,CAAA,CAA3FgjB,EAA0IA,CAAAA,CAAA,MAAAA,GAAAmqB,CAAAA,GAAA,IAAA/rC,UAAA,CAAApB,CAAA,CAA1IgjB,EAAyLA,CAAAA,CAAA,OAAAA,GAAA,IAAAzhB,WAAA,CAAAvB,CAAA,CAAzLgjB,EAA2OA,CAAAA,CAAA,OAAAA,GAAA,IAAAvhB,WAAA,CAAAzB,CAAA,CAA3OgjB,EAA6RA,CAAAA,CAAA,OAAAA,GAAA,IAAAthB,YAAA,CAAA1B,CAAA,CAA7RgjB,EAAgVA,CAAAA,CAAA,OAAAA,GAAA,IAAArhB,YAAA,CAAA3B,CAAA,CAAhVgjB;AAAh2B;;AAAA,uBAAA,OAAAwuB,WAAA,IAAA,IAAAA,WAAA,CAAA,UAAA,CAAA;AAAmuC,YAAAe,CAAAA,GAAA,IAAA;AAAA,YAAqFC,CAAAA,GAAAxvB,CAAAA,CAAA,YAAAA,IAAA,QAArF;;AAAkoB,iBAAAyvB,CAAA,CAAAC,CAAA,EAAAA;AAAyC,iBAAAA,CAAAA,CAAA5iD,MAAA4iD,GAAA,CAAA,GAAA;AAA0B,gBAAA7Q,CAAAA,GAAA6Q,CAAAA,CAAAnpC,KAAAmpC,EAAA;;AAA+B,gBAAA,cAAA,OAAA7Q,CAAA,EAAA;AAAoD,kBAAAl7B,CAAAA,GAAAk7B,CAAAA,CAAAl7B,IAAA;AAAuB,0BAAA,OAAAA,CAAA,GAAAA,KAA2B/V,CAA3B+V,KAA2Bk7B,CAAAA,CAAA1oB,GAA3BxS,GAAwDqc,CAAAA,CAAA,SAAAA,CAAArc,CAAAqc,CAAxDrc,GAAuFqc,CAAAA,CAAA,UAAAA,CAAArc,CAAAqc,EAAA6e,CAAAA,CAAA1oB,GAAA6J,CAAvF,GAAqIrc,CAAAA,CAAAA,KAAA/V,CAAA+V,KAAAk7B,CAAAA,CAAA1oB,GAAAxS,GAAA,IAAAA,GAAAk7B,CAAAA,CAAA1oB,GAAAxS,CAArI;AAAqIwS,aAAhN,MAAgC0oB,CAAAA;AAAAA;AAArnB2Q;;AAAAA,QAAAA,CAAAA,GAAlF,OAAkFA,IAAA9oC,CAAAA,CAAA,yDAAA8oC,CAAA,GAAA,yBAAA9oC,CAAA8oC,EAAuJxvB,CAAAA,CAAA,MAAAA,GAAqBhjB,CAAAA,GAAAgjB,CAAAA,CAAA,MAArBA,GAAkD,YAAA,OAAAF,WAAA,IAAA,cAAA,OAAAA,WAAAA,CAAA6vB,MAAA,IAA0E5B,CAAAA,GAAA,IAAAjuB,WAAAA,CAAA6vB,MAAA,CAAA;AAAmCC,UAAAA,OAAAA,EAAAJ,CAAAA,GAAxhC;AAAq/B,SAAA,CAAAzB,EAAmF/wC,CAAAA,GAAA+wC,CAAAA,CAAA/wC,MAA7J,IAA2LA,CAAAA,GAAA,IAAAf,WAAA,CAAAuzC,CAAA,CAApYA,EAAkbF,CAAAA,EAAlbE,EAA4clB,CAAAA,CAAAiB,CAAAA,IAAA,CAAAjB,CAAAA,GAA3lB,OAA+IkB;AAAw1B,YAAAK,CAAAA,GAAA,EAAA;AAAA,YAAoBC,CAAAA,GAAA,EAApB;AAAA,YAAsCC,CAAAA,GAAA,EAAtC;AAAA,YAAwDC,CAAAA,GAAA,EAAxD;AAAA,YAA0EC,CAAAA,GAAA,EAA1E;AAAA,YAA+FC,CAAAA,GAAAA,CAAA,CAA/F;AAA26B7hD,QAAAA,IAAAA,CAAA+gC,GAAA/gC,EAAsBA,IAAAA,CAAAw3B,IAAtBx3B,EAA8CA,IAAAA,CAAAkC,KAA9ClC,EAAwEA,IAAAA,CAAA8qB,GAAxE9qB;AAAA,YAA8F8hD,CAAAA,GAAA,CAA9F;AAAA,YAAoHC,CAAAA,GAAA,IAApH;AAAA,YAAkJC,CAAAA,GAAA,IAAlJ;AAA6pBrwB,QAAAA,CAAAA,CAAA,eAAAA,GAAA,EAAAA,EAA6BA,CAAAA,CAAA,eAAAA,GAAA,EAA7BA;AAA0D,YAAAswB,CAAAA,GAAA,uCAAA;;AAA0D,iBAAAC,CAAA,CAAAjE,CAAA,EAAAA;AAA6B,iBAAArhC,MAAAA,CAAAhf,SAAAgf,CAAAulC,UAAAvlC,GAAAqhC,CAAAA,CAAAkE,UAAAlE,CAAAgE,CAAAhE,CAAArhC,GAAA,MAAAqhC,CAAAA,CAAA/0C,OAAA+0C,CAAAgE,CAAAhE,CAAA;AAA0G;;AAAA,YAA1gZmE,CAA0gZ;AAAA,YAAAC,CAAAA,GAAA,gBAAA;;AAA6G,iBAAAC,CAAA,GAAAA;AAAqB,cAAA;AAAI,gBAAA3wB,CAAAA,CAAA,UAAA,EAAyB,OAAA,IAAA5hB,UAAA,CAAA4hB,CAAAA,CAAA,UAAA,CAAA;AAA4C,gBAAAA,CAAAA,CAAA,UAAA,EAAyB,OAAAA,CAAAA,CAAA,UAAAA,CAAA0wB,CAAA1wB,CAAA;AAAiD,kBAAA,iDAAA;AAAwD,WAA3M,CAA2M,OAAAtZ,CAAA,EAAAA;AAAWimC,YAAAA,EAAAA,CAAAjmC,CAAAimC,CAAAA;AAAAjmC;AAA0b;;AAAA,iBAAAkqC,CAAA,CAAAvkB,CAAA,EAAAA;AAAyB,cAAAprB,CAAAA,GAAA;AAAUorB,YAAAA,GAAAA,EAAAA,CAAV;AAAUljB,YAAAA,MAAAA,EAAA;AAAoB0xB,cAAAA,GAAAA,EAAAA,GAApB;AAAoBvb,cAAAA,QAAAA,EAAAA,IAAAA;AAApB,aAAV;AAA0DuxB,2BAAAxiD,IAA1D;AAA0DyiD,YAAAA,QAAAA,EAAAlD;AAA1D,WAAA;;AAA0G,mBAAAmD,CAAA,CAAAhqC,CAAA,EAAAld,CAAA,EAAAA;AAA0C,gBAAAD,CAAAA,GAAAmd,CAAAA,CAAAnd,OAAA;AAA6Bo2B,YAAAA,CAAAA,CAAA,GAAAA,GAAAp2B,CAAAo2B,EAA3jD,UAAAgxB,CAAA,EAAAA;AAA0I,kBAAzGb,CAAAA,IAAkBnwB,CAAAA,CAAA,sBAAAA,IAAqCA,CAAAA,CAAA,sBAAAA,CAAAmwB,CAAAnwB,CAAvDmwB,EAAyG,KAAAA,CAAA,KAAuB,SAAAC,CAAA,KAAgCa,aAAAA,CAAAb,CAAAa,CAAAA,EAAoCb,CAAAA,GAAA,IAApE,GAA8FC,CAArH,CAAA,EAAqH;AAA0B,oBAAAxR,CAAAA,GAAAwR,CAAA;AAAmCA,gBAAAA,CAAAA,GAAA,IAAAA,EAA2BxR,CAAAA,EAA3BwR;AAA2BxR;AAA0vCqS,aAAjlD,EAA2jDlxB;AAAmG;;AAAA,cAAxwDmwB,CAAAA,IAAkBnwB,CAAAA,CAAA,sBAAAA,IAAqCA,CAAAA,CAAA,sBAAAA,CAAAmwB,CAAAnwB,CAAvDmwB,EAAwwDnwB,CAAAA,CAAA,eAAA,EAA8B,IAAA;AAAI,mBAAAA,CAAAA,CAAA,eAAAA,CAAA/e,CAAA+e,EAAA+wB,CAAA/wB,CAAA;AAAuD,WAA3D,CAA2D,OAAA1b,CAAA,EAAAA;AAAsE,mBAA7DoC,CAAAA,CAAA,wDAAApC,CAAAoC,CAAAA,EAAApC,CAA6D,CAAA;AAAc;;AAAA,mBAAA6sC,CAAA,CAAArxC,CAAA,EAAAA;AAA2CixC,YAAAA,CAAAA,CAAAjxC,CAAAA,CAAA,QAAAixC,CAAAA;AAAoC;;AAAA,mBAAAK,CAAA,CAAAC,CAAA,EAAAA;AAAAA,aAA37BrxB,CAAAA,CAAA,UAAAA,IAAA,CAAA+rB,CAAA,IAAAA,CAAAC,CAAAhsB,IAAA,cAAA,OAAAsxB,KAAAtxB,GAA+U,IAAAhc,OAAA,CAAA,UAAAC,CAAA,EAAAC,CAAA,EAAAA;AAA4CD,cAAAA,CAAAA,CAAA0sC,CAAAA,EAAA1sC,CAAAA;AAAA0sC,aAA5C,CAA/U3wB,GAAkGsxB,KAAAA,CAAAZ,CAAAY,EAAA;AAA6BC,cAAAA,WAAAA,EAAA;AAA7B,aAAAD,CAAAA,CAAuDvtC,IAAvDutC,CAAuD,UAAAxS,CAAA,EAAAA;AAA0B,kBAAA,CAAAA,CAAAA,CAAA,EAAA,EAAoB,MAAA,yCAAA4R,CAAA,GAAA,GAAA;AAA+D,qBAAA5R,CAAAA,CAAA,WAAAA,EAAA;AAAA,aAApKwS,EAAqME,KAArMF,CAAqM,YAAA;AAAmB,qBAAAX,CAAAA,EAAA;AAAAA,aAAxNW,CAAy1BD,EAA0CttC,IAA1CstC,CAA0C,UAAA9E,CAAA,EAAAA;AAAyC,qBAAAzsB,WAAAA,CAAA2xB,WAAA3xB,CAAAysB,CAAAzsB,EAAA7e,CAAA6e,CAAA;AAAA7e,aAAnFowC,EAA+HttC,IAA/HstC,CAA+HA,CAA/HA,EAA+H,UAAAltC,CAAA,EAAAA;AAAiCuC,cAAAA,CAAAA,CAAA,4CAAAvC,CAAAuC,CAAAA,EAAsDimC,EAAAA,CAAAxoC,CAAAwoC,CAAtDjmC;AAAsDvC,aAAtNktC;AAAgsB;;AAAA,iBAA1drxB,CAAAA,CAAA,UAAAA,IAAA,cAAA,OAAAF,WAAAA,CAAA4xB,oBAAA1xB,IAAAuwB,CAAAA,CAAAG,CAAAH,CAAAvwB,IAAA,cAAA,OAAAsxB,KAAAtxB,GAAwaoxB,CAAAA,CAAAD,CAAAC,CAAxapxB,GAAuIF,WAAAA,CAAA4xB,oBAAA5xB,CAAAwxB,KAAAA,CAAAZ,CAAAY,EAAA;AAAuDC,YAAAA,WAAAA,EAAA;AAAvD,WAAAD,CAAAxxB,EAAiF7e,CAAjF6e,EAAiF/b,IAAjF+b,CAAiFqxB,CAAjFrxB,EAAiF,UAAA3b,CAAA,EAAAA;AAAwDuC,YAAAA,CAAAA,CAAA,oCAAAvC,CAAAuC,CAAAA,EAA8CA,CAAAA,CAAA,2CAAAA,CAA9CA,EAA+F0qC,CAAAA,CAAAD,CAAAC,CAA/F1qC;AAA+FyqC,WAAxOrxB,CAAvIE,EAA0d,EAAA;AAA2jB;;AAAA,iBAAA2xB,CAAA,GAAAA;AAAsC,iBAAA,CAAA,CAAAA,CAAAA,CAAAC,kBAAA;AAAsD;;AAAA,iBAAAC,CAAA,CAAA1C,CAAA,EAAAA;AAAoC,cAAA;AAAI,mBAAA9D,EAAAA,CAAA8D,CAAA9D,CAAA;AAAkB,WAAtB,CAAsB,OAAA/mC,CAAA,EAAAA,CAAAA;AAAxqFisC;;AAAAA,QAAAA,CAAAA,CAAAG,CAAAH,CAAAA,KAA9iZE,CAAAA,GAA6kZC,CAA7kZD,EAA6kZC,CAAAA,GAAnjZ1wB,CAAAA,CAAA,UAAAA,GAAyBA,CAAAA,CAAA,UAAAA,CAAAywB,CAAAzwB,EAAAosB,CAAApsB,CAAzBA,GAAgFosB,CAAAA,GAAAqE,CAAo8YF,GAAg+DvwB,CAAAA,CAAA,GAAAA,GAAA,UAAA7W,CAAA,EAAAkjB,CAAA,EAAAylB,CAAA,EAAAA;AAAqP,iBAAnMzlB,CAAAA,CAAA,MAAAA,GAAA0hB,CAAA1hB,EAAyBA,CAAAA,CAAA,KAAAA,GAAA,IAAAvM,WAAAA,CAAAiyB,KAAA,CAAA;AAA8CnC,YAAAA,OAAAA,EAAA,EAA9C;AAA8CoC,YAAAA,OAAAA,EAAA,EAA9C;AAA8C9zC,YAAAA,OAAAA,EAAA;AAA9C,WAAA,CAAzBmuB,EAAuHA,CAAAA,CAAA,aAAAA,GAAA,IAAvHA,EAAiJA,CAAAA,CAAA,YAAAA,GAAA,CAAjJA,EAAuKukB,CAAAA,CAAAvkB,CAAAukB,CAA4B;AAA5BvkB,SAAzrEkkB;AAAmrF,YAAA0B,CAAAA,GAAA;AAAgBC,UAAAA,IAAAA,EAAA,CAAhB;AAAgBC,UAAAA,MAAAA,EAAA,EAAhB;AAAgBC,UAAAA,KAAAA,EAAA,EAAhB;AAAyCC,UAAAA,QAAAA,EAAA,UAAAC,CAAA,EAAAA;AAA6B,gBAAA,CAAAA,CAAA,IAAAL,CAAAA,CAAAG,KAAAH,CAAAK,CAAAL,CAAA,EAAA,OAAAK,CAAA;;AAAyD,iBAAA,IAAA1mD,CAAA,IAAAqmD,CAAAA,CAAAG,KAAA,EAAwG,KAAvE,IAAAjD,CAAAA,GAAAA,CAAAvjD,CAAA,EAAa2mD,CAAAA,GAAAN,CAAAA,CAAAG,KAAAH,CAAA9C,CAAA8C,EAAAK,QAAb,EAAoDriC,CAAAA,GAAAsiC,CAAAA,CAAAzlD,MAApD,EAAuE7C,CAAAA,GAAA,CAAA,EAAYA,CAAAA,GAAAgmB,CAAZ,EAAkBhmB,CAAAA,EAAlB,EAAuB,IAAAsoD,CAAAA,CAAAtoD,CAAAsoD,CAAAA,KAAAD,CAAA,EAAsB,OAAAnD,CAAA;;AAAa,mBAAAmD,CAAA;AAAAA,WAAjS;AAAiTE,UAAAA,MAAAA,EAAA,UAAArD,CAAA,EAAAA;AAAsBA,YAAAA,CAAAA,IAAe8C,CAAAA,CAAAG,KAAAH,CAAA9C,CAAA8C,EAA+BQ,QAA/BR,EAAf9C;AAA8CsD,WAArX;AAAqYC,UAAAA,MAAAA,EAAA,UAAAvD,CAAA,EAAAA;AAAsB,gBAAAA,CAAA,EAAA;AAAe,kBAAAluC,CAAAA,GAAAgxC,CAAAA,CAAAG,KAAAH,CAAA9C,CAAA8C,CAAA;AAA+BzF,cAAAA,CAAAA,CAAAvrC,CAAAA,CAAAwxC,QAAAxxC,GAAA,CAAAurC,CAAAA,EAAwBvrC,CAAAA,CAAAwxC,QAAAxxC,EAAxBurC,EAAwC,MAAAvrC,CAAAA,CAAAwxC,QAAA,IAAAxxC,CAAAA,CAAA0xC,QAAA,KAAsC1xC,CAAAA,CAAA2xC,UAAA3xC,IAAoB+e,CAAAA,CAAA,UAAAA,CAAA/e,CAAAA,CAAA2xC,UAAA5yB,EAAAmvB,CAAAnvB,CAApB/e,EAAoBkuC,OAA0C8C,CAAAA,CAAAG,KAAAH,CAAA9C,CAAA8C,CAA9DhxC,EAA2F4wC,CAAAA,CAAA1C,CAAA0C,CAAjI,CAAxCrF;AAAyK2C;AAAAA,WAAlnB;AAA8oB0D,UAAAA,QAAAA,EAAA,UAAA1D,CAAA,EAAAA;AAAwBA,YAAAA,CAAAA,KAAe8C,CAAAA,CAAAG,KAAAH,CAAA9C,CAAA8C,EAA+BQ,QAA/BR,GAA+B,CAA9C9C,CAAAA;AAA8C;AAAptB,SAAA;AAAA,YAAg9D2D,CAAAA,GAAA;AAAcC,UAAAA,OAAAA,EAAA,CAAA,IAAA,EAAA,EAAA,EAAA,EAAA,CAAd;AAAcC,UAAAA,SAAAA,EAAA,UAAAC,CAAA,EAAAC,CAAA,EAAAA;AAAqD,gBAAAl2C,CAAAA,GAAA81C,CAAAA,CAAAC,OAAAD,CAAAG,CAAAH,CAAA;AAAoC,kBAAAI,CAAA,IAAA,OAAAA,CAAA,IAAAA,CAAwB,MAAAD,CAAA,GAAAj3B,CAAA,GAAAtV,CAAxBwsC,EAAwBzE,CAAAA,CAAAzxC,CAAAyxC,EAAA,CAAAA,CAAxByE,GAA0El2C,CAAAA,CAAAlQ,MAAAkQ,GAAA,CAA1E,IAA+FA,CAAAA,CAAAxF,IAAAwF,CAAAk2C,CAAAl2C,CAA/F;AAA+Fk2C,WAAtM;AAAyNC,UAAAA,OAAAA,EAAA,CAAzN;AAAyNjoD,UAAAA,GAAAA,EAAA,UAAAioD,CAAA,EAAAA;AAA2F,mBAA1DL,CAAAA,CAAAK,OAAAL,IAAA,CAAAA,EAAoBxE,CAAAA,CAAAwE,CAAAA,CAAAK,OAAAL,GAAA,CAAAA,IAAA,CAAAxE,CAAsC;AAAtC,WAA9Q;AAA+T8E,UAAAA,MAAAA,EAAA,YAAA;AAAwD,mBAArClE,CAAAA,CAAA4D,CAAAA,CAAA5nD,GAAA4nD,EAAA5D,CAAqC;AAArChkD,WAAlV;AAAkYmoD,UAAAA,KAAAA,EAAA,YAAA;AAAkB,gBAAA9iC,CAAAA,GAAAuiC,CAAAA,CAAA5nD,GAAA4nD,EAAA;AAA2C,mBAA3CA,CAAAA,CAAA5nD,GAAA4nD,IAA2CviC,CAAA;AAAAA,WAA/b;AAA0c+iC,UAAAA,OAAAA,EAAA,YAAA;AAAoBR,YAAAA,CAAAA,CAAA5nD,GAAA4nD;AAAA5nD;AAA9d,SAAh9D;;AAAs4F,iBAAAqoD,CAAA,GAAAA;AAA+B,cAAAC,CAAAA,GAAAxzB,CAAAA,CAAA,OAAA;AAA6BwzB,UAAAA,CAAAA,IAAAA,CAAAA,CAAA,CAAAA,CAAAA;AAAoB,cAAAT,CAAAA,GAAAD,CAAAA,CAAAC,OAAA;AAA6BA,UAAAA,CAAAA,CAAA,CAAAA,CAAAA,CAAAjmD,MAAAimD,IAAAD,CAAAA,CAAAE,SAAAF,CAAA,CAAAA,EAAA,EAAAA,CAAAC,EAA8CA,CAAAA,CAAA,CAAAA,CAAAA,CAAAjmD,MAAAimD,IAAAD,CAAAA,CAAAE,SAAAF,CAAA,CAAAA,EAAA,EAAAA,CAA9CC;AAA86B;;AAAA,iBAAAU,EAAA,GAAAA;AAAqC,iBAAApF,CAAAA,CAAAvhD,MAAA;AAAiF;;AAAA,iBAAA4mD,EAAA,CAAAhkD,CAAA,EAAAA;AAAiEA,UAAAA,CAAAA,GAAA0/C,CAAAA,CAAA1/C,CAAA0/C,EAAxB,KAAwBA,CAAA1/C;AAAiC,cAAAikD,CAAAA,GAAA32C,CAAAA,CAAAE,UAAA;;AAA8B,cAAA;AAAqD,mBAAA,CAAA,CAAA,KAAjD6wC,CAAAA,CAAA6F,IAAA7F,CAAA6F,CAAAlkD,CAAAA,GAAAikD,CAAAC,IAAA,KAAA7F,CAAiD,GAAoB/wC,CAAAA,GAAA+wC,CAAAA,CAAA/wC,MAApB,GAAyD,IAAzD;AAAsE,WAA3H,CAA2H,OAAAsH,CAAA,EAAAA;AAAS,mBAAA,IAAA;AAAA;AAAa;;AAAA,iBAAAuvC,EAAA,CAAAC,CAAA,EAAAA;AAAgD,cAAAH,CAAAA,GAAAF,EAAAA,EAAA;AAAmG,cAAAK,CAAAA,GAAnC,UAAmC,EAAwB,OAAA,CAAA,CAAA;;AAA0F,eAA7E,IAA8BC,CAAAA,GAAA1lD,IAAAA,CAAAC,GAAAD,CAAAslD,CAAAtlD,EAA9B,QAA8BA,CAA+C,EAAA0lD,CAAAA,GAAAD,CAAA,GAAoDC,CAAAA,GAAvBA,CAAAA,IAAA,SAAAA,GAAuB3E,CAAAA,CAAA,IAAA2E,CAAA3E,EAAjO,KAAiOA,CAAvB2E,GAAqE1lD,IAAAA,CAAA8qB,GAAA9qB,CAAA+gD,CAAAA,CAAAA,CAAA,IAAA2E,CAAA,GAAA,UAAA3E,IAAA,CAAAA,EAA/Q,KAA+QA,CAAA/gD,EAAvP,UAAuPA,CAA9C0lD;;AAAuH,cAAAC,CAAAA,GAAAN,EAAAA,CAAAK,CAAAL,CAAA;AAAmD,iBAAA,EAAA,CAAAM,CAAA,IAAAA,CAAAA,CAAA92C,UAAA82C,IAAAD,CAAA,KAA+DzE,CAAAA,IAA0B,CAAzF,CAAA,CAAA;AAA6VU;;AAAAA,QAAAA,CAAAA,CAAAx4C,IAAAw4C,CAAAuD,CAAAvD;AAAqC,YAAyCiE,EAAAA,GAAA;AAAmBtH,UAAAA,KAAAA,EAAAA,EAAnB;AAAmBsB,UAAAA,WAAAA,EAAAA,CAAnB;AAAmBiG,UAAAA,WAAAA,EAA1uf,YAAA;AAA2B,mBAAAlG,CAAA;AAAAA,WAA4rf;AAAmB2D,UAAAA,0BAAAA,EAAAA,CAAnB;AAAmBwC,UAAAA,cAAAA,EAAhoL,UAAAhG,CAAA,EAAA7B,CAAA,EAAA8H,CAAA,EAAAzwC,CAAA,EAAAA;AAAsDgpC,YAAAA,EAAAA,CAAA,uBAAAuC,CAAAA,CAAAf,CAAAe,CAAA,GAAA,QAAA,GAAA,CAAA5C,CAAAA,GAAA4C,CAAAA,CAAA5C,CAAA4C,CAAA5C,GAAA,kBAAA,EAAA8H,CAAA,EAAAzwC,CAAAA,GAAAurC,CAAAA,CAAAvrC,CAAAurC,CAAAvrC,GAAA,kBAAA,CAAAgpC,CAAAA;AAAA,WAAujL;AAAmB0H,UAAAA,yBAAAA,EAAx6K,UAAA3kD,CAAA,EAAAA;AAAyC,mBAAA47C,EAAAA,CAAA57C,CAAA47C,CAAA;AAAA57C,WAA42K;AAAmB4kD,UAAAA,0BAAAA,EAA/4I,SAAAA,CAAA,GAAAA;AAAsC,gBAAAC,CAAAA,GAAAtC,CAAAA,CAAAC,IAAA;AAA2B,gBAAA,CAAAqC,CAAA,EAAY,OAAA,KAAAtG,CAAAA,CAAA,CAAAA,CAAAA,EAAA,CAAA,CAAA;AAA2B,gBAAAhtC,CAAAA,GAAAgxC,CAAAA,CAAAG,KAAAH,CAAAsC,CAAAtC,CAAA;AAAA,gBAAkCuC,CAAAA,GAAAvzC,CAAAA,CAAArR,IAAlC;AAA2D,gBAAA,CAAA4kD,CAAA,EAAgB,OAAA,KAAAvG,CAAAA,CAAA,CAAAA,CAAAA,EAAAsG,CAAA,CAAA;AAAgC,gBAAAE,CAAAA,GAAAjmD,KAAAA,CAAAvC,SAAAuC,CAAAiG,KAAAjG,CAAAhE,IAAAgE,CAAA3B,SAAA2B,CAAA;AAAoDwxB,YAAAA,CAAAA,CAAA,sBAAAA,CAAAw0B,CAAAx0B,GAAyDs0B,CAAAA,CAAAt3C,MAAAs3C,KAAAA,CAAAA,CAAAt3C,MAAAs3C,GAAAhJ,EAAAA,CAAA,CAAAA,CAAAgJ,CAAzDt0B,EAA4IsuB,CAAAA,CAAAgG,CAAAA,CAAAt3C,MAAAs3C,IAAA,CAAAhG,CAAAA,GAAAiG,CAA5Iv0B,EAAgMu0B,CAAAA,GAAAD,CAAAA,CAAAt3C,MAAhMgjB;;AAAyO,iBAAA,IAAA/1B,CAAAA,GAAA,CAAA,EAAYA,CAAAA,GAAAwqD,CAAAA,CAAA3nD,MAAZ,EAA+B7C,CAAAA,EAA/B,EAAoC,IAAAwqD,CAAAA,CAAAxqD,CAAAwqD,CAAAA,IAAAz0B,CAAAA,CAAA,gBAAAA,CAAAy0B,CAAAA,CAAAxqD,CAAAwqD,CAAAz0B,EAAAw0B,CAAAx0B,EAAAu0B,CAAAv0B,CAAA,EAAiI,OAApDu0B,CAAAA,GAAAjG,CAAAA,CAAAiG,CAAAA,IAAA,CAAAjG,CAAAiG,EAAyBtzC,CAAAA,CAAAqxC,QAAArxC,CAAAzJ,IAAAyJ,CAAAszC,CAAAtzC,CAAzBszC,EAAoD,KAAAtG,CAAAA,CAAAwG,CAAAA,CAAAxqD,CAAAwqD,CAAAxG,CAAAA,EAAAsG,CAAA,CAAA;;AAAqE,mBAAzBA,CAAAA,GAAAjG,CAAAA,CAAAiG,CAAAA,IAAA,CAAAjG,CAAAiG,EAAyB,KAAAtG,CAAAA,CAAAuG,CAAAvG,CAAAA,EAAAsG,CAAA,CAAA;AAAAA,WAAkqH;AAAmB1C,UAAAA,qBAAAA,EAAAA,CAAnB;AAAmB6C,UAAAA,YAAAA,EAA5oH,UAAAvF,CAAA,EAAAv/C,CAAA,EAAAgjD,CAAA,EAAAA;AAAmV,kBAAxSX,CAAAA,CAAAG,KAAAH,CAAA9C,CAAA8C,IAAA;AAAuB9C,cAAAA,GAAAA,EAAAA,CAAvB;AAAuBmD,cAAAA,QAAAA,EAAA,CAAAnD,CAAA,CAAvB;AAAuBv/C,cAAAA,IAAAA,EAAAA,CAAvB;AAAuBgjD,cAAAA,UAAAA,EAAAA,CAAvB;AAAuBH,cAAAA,QAAAA,EAAA,CAAvB;AAAuBN,cAAAA,MAAAA,EAAAA,CAAA,CAAvB;AAAuBQ,cAAAA,QAAAA,EAAAA,CAAA;AAAvB,aAAAV,EAAsHA,CAAAA,CAAAC,IAAAD,GAAA9C,CAAtH8C,EAA0I,wBAAAN,CAAA,GAA8GA,CAAAA,CAAAC,kBAAAD,EAA9G,GAAyDA,CAAAA,CAAAC,kBAAAD,GAAA,CAAnMM,EAAwS9C,CAAA;AAAAA,WAAsyG;AAAmBwF,UAAAA,qBAAAA,EAA/yG,YAAA,CAAA,CAA4xG;AAAmBC,UAAAA,OAAAA,EAA7wG,YAAA,CAAA,CAA0vG;AAAmBC,UAAAA,kBAAAA,EAAn+I,UAAA1F,CAAA,EAAAA;AAA0E,kBAAzC8C,CAAAA,CAAAC,IAAAD,KAAqBA,CAAAA,CAAAC,IAAAD,GAAA9C,CAArB8C,GAAyC9C,CAAA;AAAAA,WAAs4I;AAAmB2F,UAAAA,WAAAA,EAAxN,UAAAxpD,CAAA,EAAAA;AAA0G,mBAA9E00B,CAAAA,CAAA,iBAAAA,KAAAsuB,CAAAA,CAAAtuB,CAAAA,CAAA,iBAAAA,MAAA,CAAAsuB,CAAAA,GAAAhjD,CAAA00B,GAA8E10B,CAAA;AAAAA,WAA2F;AAAmBypD,UAAAA,aAAAA,EAA1wF,UAAAC,CAAA,EAAA7B,CAAA,EAAAA;AAAsCL,YAAAA,CAAAA,CAAAK,OAAAL,GAAAK,CAAAL;;AAAyB,gBAAA;AAAI,kBAAAG,CAAAA,GAAAH,CAAAA,CAAAmC,eAAAnC,EAAA;AAAA,kBAAAoC,CAAAA,IAAApC,CAAAA,CAAA5nD,GAAA4nD,IAAAA,CAAAA,CAAA5nD,GAAA4nD,EAAAoC,CAAA;AAAA,kBAAAtsC,CAAAA,GAAAkqC,CAAAA,CAAA5nD,GAAA4nD,EAAA;AAAA,kBAAAqC,CAAAA,GAAArC,CAAAA,CAAA5nD,GAAA4nD,EAAA;AAAA,kBAAuI1hD,CAAAA,GAAA8jD,CAAvI;AAA+R,qBAAlIE,EAAAA,CAAAC,MAAAD,CAAAnC,CAAAmC,EAAAhkD,CAAAgkD,EAAAD,CAAAC,GAAgC9G,CAAAA,CAAA1lC,CAAAA,IAAA,CAAA0lC,CAAAA,GAAA2E,CAAAA,CAAAqC,QAAhCF,EAAkEnC,CAAAA,CAAAsC,QAAAtC,IAAA,MAAA7hD,CAAA6hD,IAAA,MAAAkC,CAAAlC,KAAAA,CAAAA,CAAAsC,QAAAtC,GAAA,IAAAA,CAAlEmC,EAAkI,CAAA;AAAS,aAA5S,CAA4S,OAAA9wC,CAAA,EAAAA;AAA4E,qBAAnE,eAAA,OAAA8wC,EAAA,IAAA9wC,CAAAA,YAAA8wC,EAAAA,CAAAI,UAAA,IAAA7I,EAAAA,CAAAroC,CAAAqoC,CAAA,EAAAroC,CAAmEA,CAAAA,CAAAmxC,KAAA;AAAAA;AAAAA,WAAg0E;AAAmBC,UAAAA,aAAAA,EAA1nE,UAAAV,CAAA,EAAA7B,CAAA,EAAAA;AAAsCL,YAAAA,CAAAA,CAAAK,OAAAL,GAAAK,CAAAL;;AAAyB,gBAAA;AAAiF,mBAA7E,IAAAG,CAAAA,GAAAH,CAAAA,CAAA5nD,GAAA4nD,EAAA,EAAA6C,CAAAA,GAAA7C,CAAAA,CAAA5nD,GAAA4nD,EAAA,EAAA8C,CAAAA,GAAA9C,CAAAA,CAAA5nD,GAAA4nD,EAAA,EAAmE/2B,CAAAA,GAAA,CAAnE,EAA6E9xB,CAAAA,GAAA,CAAA,EAAYA,CAAAA,GAAA2rD,CAAZ,EAAqB3rD,CAAAA,EAArB,EAAqB;AAA+D,qBAA1D,IAAAklD,CAAAA,GAAAb,CAAAA,CAAAqH,CAAAA,GAAA,IAAA1rD,CAAA0rD,IAAA,CAAArH,CAAA,EAA2Br+B,CAAAA,GAAAq+B,CAAAA,CAAAqH,CAAAA,IAAA,IAAA1rD,CAAA,GAAA,CAAA0rD,CAAAA,IAAA,CAAArH,CAA3B,EAA0Dh+C,CAAAA,GAAA,CAAA,EAAYA,CAAAA,GAAA2f,CAAZ,EAAkB3f,CAAAA,EAAlB,EAAuBwiD,CAAAA,CAAAE,SAAAF,CAAAG,CAAAH,EAAA3I,CAAAA,CAAAgF,CAAAA,GAAA7+C,CAAA65C,CAAA2I;;AAAyC/2B,gBAAAA,CAAAA,IAAA9L,CAAA8L;AAAS;;AAAA,qBAAAA,CAAA;AAAW,aAAzP,CAAyP,OAAAzX,CAAA,EAAAA;AAA4E,qBAAnE,eAAA,OAAA8wC,EAAA,IAAA9wC,CAAAA,YAAA8wC,EAAAA,CAAAI,UAAA,IAAA7I,EAAAA,CAAAroC,CAAAqoC,CAAA,EAAAroC,CAAmEA,CAAAA,CAAAmxC,KAAA;AAAAA;AAAAA,WAAmuD;AAAmBI,UAAAA,YAAAA,EAAtuD,UAAAb,CAAA,EAAA7B,CAAA,EAAAA;AAAqCL,YAAAA,CAAAA,CAAAK,OAAAL,GAAAK,CAAAL;;AAAyB,gBAAA;AAAI,qBAAA,CAAA;AAAS,aAAb,CAAa,OAAAxuC,CAAA,EAAAA;AAA4E,qBAAnE,eAAA,OAAA8wC,EAAA,IAAA9wC,CAAAA,YAAA8wC,EAAAA,CAAAI,UAAA,IAAA7I,EAAAA,CAAAroC,CAAAqoC,CAAA,EAAAroC,CAAmEA,CAAAA,CAAAmxC,KAAA;AAAAA;AAAAA,WAA4jD;AAAmBK,UAAAA,WAAAA,EAA/jD,UAAAd,CAAA,EAAA7B,CAAA,EAAAA;AAAoCL,YAAAA,CAAAA,CAAAK,OAAAL,GAAAK,CAAAL;;AAAyB,gBAAA;AAAI,kBAAAG,CAAAA,GAAAH,CAAAA,CAAAmC,eAAAnC,EAAA;AAAuD,qBAAjBsC,EAAAA,CAAAW,KAAAX,CAAAnC,CAAAmC,GAAiB,CAAA;AAAS,aAApE,CAAoE,OAAA9wC,CAAA,EAAAA;AAA4E,qBAAnE,eAAA,OAAA8wC,EAAA,IAAA9wC,CAAAA,YAAA8wC,EAAAA,CAAAI,UAAA,IAAA7I,EAAAA,CAAAroC,CAAAqoC,CAAA,EAAAroC,CAAmEA,CAAAA,CAAAmxC,KAAA;AAAAA;AAAAA,WAA+1C;AAAmBO,UAAAA,SAAAA,EAAl2C,YAAA,CAAA,CAA+0C;AAAmBC,UAAAA,MAAAA,EAA50C,YAAA;AAAkBj2B,YAAAA,CAAAA,CAAA,KAAAA;AAAA,WAAuyC;AAAmByzB,UAAAA,yBAAAA,EAAAA,EAAnB;AAAmByC,UAAAA,sBAAAA,EAApT,UAAAC,CAAA,EAAA5sC,CAAA,EAAA8wB,CAAA,EAAAA;AAA8C8P,YAAAA,CAAAA,CAAAt6C,GAAAs6C,CAAAA,CAAAA,CAAA/vB,QAAA+vB,CAAA5gC,CAAA4gC,EAAA5gC,CAAAA,GAAA8wB,CAAA8P,CAAAA,EAAAgM,CAAAhM;AAAAgM,WAAmP;AAAmBtC,UAAAA,uBAAAA,EAAAA,EAAnB;AAAmBuC,UAAAA,UAAAA,EAAzV,YAAA;AAAsBzJ,YAAAA,EAAAA,CAAA,OAAAA,CAAAA;AAAA,WAAgT;AAAmB0J,UAAAA,uBAAAA,EAA/uC,UAAAvC,CAAA,EAAAA;AAAgDnH,YAAAA,EAAAA,CAAA,KAAAA,CAAAA;AAAA,WAA4qC;AAAmB+G,UAAAA,yBAAAA,EAAAA,EAAnB;AAAmBH,UAAAA,mBAAAA,EAAAA,CAAnB;AAAmB+C,UAAAA,aAAAA,EAAvpL,IAAooL;AAAmB/G,UAAAA,cAAAA,EAAAA;AAAnB,SAAzC;AAAA,YAAyiCgH,EAAAA,GAAAv2B,CAAAA,CAAA,GAAAA,CAAphC,EAAohCA,EAAAi0B,EAAAj0B,EAAAhjB,CAAAgjB,CAAziC;AAAkmCA,QAAAA,CAAAA,CAAA,GAAAA,GAAAu2B,EAAAv2B,EAAkBA,CAAAA,CAAA,iBAAAA,GAAA,YAAA;AAA6D,iBAAAA,CAAAA,CAAA,GAAAA,CAAA,iBAAAA,CAAAlG,KAAAkG,CAAA,IAAAA,EAAAnzB,SAAAmzB,CAAA;AAAAnzB,SAA/EmzB,EAAgJA,CAAAA,CAAA,QAAAA,GAAA,YAAA;AAA2C,iBAAAA,CAAAA,CAAA,GAAAA,CAAA,QAAAA,CAAAlG,KAAAkG,CAAA,IAAAA,EAAAnzB,SAAAmzB,CAAA;AAAAnzB,SAA3LmzB,EAAmPA,CAAAA,CAAA,OAAAA,GAAA,YAAA;AAAyC,iBAAAA,CAAAA,CAAA,GAAAA,CAAA,OAAAA,CAAAlG,KAAAkG,CAAA,IAAAA,EAAAnzB,SAAAmzB,CAAA;AAAAnzB,SAA5RmzB,EAAmVA,CAAAA,CAAA,iBAAAA,GAAA,YAAA;AAA6D,iBAAAA,CAAAA,CAAA,GAAAA,CAAA,iBAAAA,CAAAlG,KAAAkG,CAAA,IAAAA,EAAAnzB,SAAAmzB,CAAA;AAAAnzB,SAAhZmzB,EAAidA,CAAAA,CAAA,wBAAAA,GAAA,YAAA;AAA2E,iBAAAA,CAAAA,CAAA,GAAAA,CAAA,wBAAAA,CAAAlG,KAAAkG,CAAA,IAAAA,EAAAnzB,SAAAmzB,CAAA;AAAAnzB,SAA5hBmzB,EAAomBA,CAAAA,CAAA,SAAAA,GAAA,YAAA;AAA6C,iBAAAA,CAAAA,CAAA,GAAAA,CAAA,SAAAA,CAAAlG,KAAAkG,CAAA,IAAAA,EAAAnzB,SAAAmzB,CAAA;AAAAnzB,SAAjpBmzB,EAA0sBA,CAAAA,CAAA,SAAAA,GAAA,YAAA;AAA6C,iBAAAA,CAAAA,CAAA,GAAAA,CAAA,SAAAA,CAAAlG,KAAAkG,CAAA,IAAAA,EAAAnzB,SAAAmzB,CAAA;AAAAnzB,SAAvvBmzB,EAAgzBA,CAAAA,CAAA,QAAAA,GAAA,YAAA;AAA2C,iBAAAA,CAAAA,CAAA,GAAAA,CAAA,QAAAA,CAAAlG,KAAAkG,CAAA,IAAAA,EAAAnzB,SAAAmzB,CAAA;AAAAnzB,SAA31BmzB,EAAm5BA,CAAAA,CAAA,0BAAAA,GAAA,YAAA;AAA+E,iBAAAA,CAAAA,CAAA,GAAAA,CAAA,0BAAAA,CAAAlG,KAAAkG,CAAA,IAAAA,EAAAnzB,SAAAmzB,CAAA;AAAAnzB,SAAl+BmzB,EAA4iCA,CAAAA,CAAA,OAAAA,GAAA,YAAA;AAAyC,iBAAAA,CAAAA,CAAA,GAAAA,CAAA,OAAAA,CAAAlG,KAAAkG,CAAA,IAAAA,EAAAnzB,SAAAmzB,CAAA;AAAAnzB,SAArlCmzB;;AAAkB,YAA0nCqrB,EAAAA,GAAArrB,CAAAA,CAAA,KAAAA,GAAA,YAAA;AAAqC,iBAAAA,CAAAA,CAAA,GAAAA,CAAA,KAAAA,CAAAlG,KAAAkG,CAAA,IAAAA,EAAAnzB,SAAAmzB,CAAA;AAAAnzB,SAA/pC;AAAA,YAAs9Cy+C,EAAAA,IAAlQtrB,CAAAA,CAAA,SAAAA,GAAA,YAAA;AAA6C,iBAAAA,CAAAA,CAAA,GAAAA,CAAA,SAAAA,CAAAlG,KAAAkG,CAAA,IAAAA,EAAAnzB,SAAAmzB,CAAA;AAAAnzB,SAA7CmzB,EAAsGA,CAAAA,CAAA,2BAAAA,GAAA,YAAA;AAAiF,iBAAAA,CAAAA,CAAA,GAAAA,CAAA,2BAAAA,CAAAlG,KAAAkG,CAAA,IAAAA,EAAAnzB,SAAAmzB,CAAA;AAAAnzB,SAAvLmzB,EAAkQA,CAAAA,CAAA,OAAAA,GAAA,YAAA;AAAyC,iBAAAA,CAAAA,CAAA,GAAAA,CAAA,OAAAA,CAAAlG,KAAAkG,CAAA,IAAAA,EAAAnzB,SAAAmzB,CAAA;AAAAnzB,SAAzCy+C,CAAt9C;;AAAyoI,iBAAAoB,EAAA,CAAAf,CAAA,EAAAA;AAA4BjwC,eAAA9Q,IAAA8Q,GAAA,YAAAA,EAAuBA,KAAAkO,OAAAlO,GAAA,kCAAAiwC,CAAA,GAAA,GAAvBjwC,EAA+EA,KAAAiwC,MAAAjwC,GAAAiwC,CAA/EjwC;AAA+S;;AAAA,iBAAA8X,EAAA,CAAA0Y,CAAA,EAAAA;AAAkJ,mBAAAsqB,CAAA,GAAAA;AAAiBx2B,YAAAA,CAAAA,CAAA,SAAAA,KAA8BA,CAAAA,CAAA,SAAAA,GAAA,CAAA,CAAAA,EAAyBkuB,CAAAA,KAA7jegC,CAAAA,KAA6BA,CAAAA,GAAAA,CAAA,CAAAA,EAAwBT,CAAAA,CAAAK,CAAAL,CAArDS,CAAAA,EAAyGT,CAAAA,CAAAM,CAAAN,CAAzGS,EAA2melwB,CAAAA,CAAA,oBAAAA,IAAAA,CAAAA,CAAA,oBAAAA,EAA3mekwB,EAAqN,YAAA;AAAmB,kBAAAlwB,CAAAA,CAAA,OAAA,EAAoG,KAA9E,cAAA,OAAAA,CAAAA,CAAA,OAAA,KAAAA,CAAAA,CAAA,OAAAA,GAAA,CAAAA,CAAAA,CAAA,OAAA,CAAA,CAA8E,EAAAA,CAAAA,CAAA,OAAAA,CAAAlzB,MAAA,GAA+J2pD,CAAAA,GAA/Hz2B,CAAAA,CAAA,OAAAA,CAAAzZ,KAAAyZ,EAA+Hy2B,EAA0BxG,CAAAA,CAAAyG,OAAAzG,CAAAwG,CAAAxG,CAA1BwG;AAAA,kBAAAA,CAAA;AAAtFhH,cAAAA,CAAAA,CAAAQ,CAAAR,CAAAA;AAAyxdkH,aAAz9d,EAAw2dzI,CAAvDluB;AAAhJkM;;AAAAA,UAAAA,CAAAA,GAAAA,CAAAA,IAAAlM,CAAAA,CAAA,SAAAkM,EAA+BikB,CAAAA,GAAA,CAAAA,KAA7oe,YAAA;AAAkB,gBAAAnwB,CAAAA,CAAA,MAAA,EAAgG,KAA3E,cAAA,OAAAA,CAAAA,CAAA,MAAA,KAAAA,CAAAA,CAAA,MAAAA,GAAA,CAAAA,CAAAA,CAAA,MAAA,CAAA,CAA2E,EAAAA,CAAAA,CAAA,MAAAA,CAAAlzB,MAAA,GAA+jB2pD,CAAAA,GAAhiBz2B,CAAAA,CAAA,MAAAA,CAAAzZ,KAAAyZ,EAAgiBy2B,EAAyB5G,CAAAA,CAAA6G,OAAA7G,CAAA4G,CAAA5G,CAAzB4G;AAAA,gBAAAA,CAAA;AAAzfhH,YAAAA,CAAAA,CAAAI,CAAAJ,CAAAA;AAAk/dmH,WAA1qe,IAAmrezG,CAAAA,GAAA,CAAAA,IAA4BnwB,CAAAA,CAAA,SAA5BmwB,KAA6PnwB,CAAAA,CAAA,SAAAA,IAAwBA,CAAAA,CAAA,SAAAA,CAAA,YAAAA,GAAkCpa,UAAAA,CAAA,YAAA;AAAsBA,YAAAA,UAAAA,CAAA,YAAA;AAAsBoa,cAAAA,CAAAA,CAAA,SAAAA,CAAA,EAAAA;AAAA,aAAtBpa,EAA8C,CAA9CA,CAAAA,EAAkD4wC,CAAAA,EAAlD5wC;AAAkD4wC,WAAxE5wC,EAAgF,CAAhFA,CAA1Doa,IAAmJw2B,CAAAA,EAAhZrG,CAAtCA,CAA/BjkB;AAAgf;;AAAA,iBAAAygB,EAAA,CAAAkK,CAAA,EAAAA;AAA2K,gBAAtJ72B,CAAAA,CAAA,OAAAA,IAAsBA,CAAAA,CAAA,OAAAA,CAAA62B,CAAA72B,CAAtBA,EAAsB62B,KAAwBjpD,CAAxBipD,KAAwBA,CAAxBA,IAA6C76B,CAAAA,CAAA66B,CAAA76B,CAAAA,EAAUtV,CAAAA,CAAAmwC,CAAAnwC,CAAVsV,EAAoB66B,CAAAA,GAAAC,IAAAA,CAAAC,SAAAD,CAAAD,CAAAC,CAAjED,IAAgGA,CAAAA,GAAA,EAAtH72B,EAA8HkuB,CAAAA,GAAAA,CAAA,CAA9HluB,EAAsJ,WAAA62B,CAAA,GAAA,8CAAA;AAAwF;;AAAA,YAApqH72B,CAAAA,CAAA,WAAAA,GAAA,YAAA;AAAiD,iBAAAA,CAAAA,CAAA,GAAAA,CAAA,WAAAA,CAAAlG,KAAAkG,CAAA,IAAAA,EAAAnzB,SAAAmzB,CAAA;AAAAnzB,SAAjDmzB,EAA4GA,CAAAA,CAAA,aAAAA,GAAA,YAAA;AAAqD,iBAAAA,CAAAA,CAAA,GAAAA,CAAA,aAAAA,CAAAlG,KAAAkG,CAAA,IAAAA,EAAAnzB,SAAAmzB,CAAA;AAAAnzB,SAAjKmzB,EAA8NA,CAAAA,CAAA,OAAAA,GAAA,YAAA;AAAyC,iBAAAA,CAAAA,CAAA,GAAAA,CAAA,OAAAA,CAAAlG,KAAAkG,CAAA,IAAAA,EAAAnzB,SAAAmzB,CAAA;AAAAnzB,SAAvQmzB,EAA8TA,CAAAA,CAAA,OAAAA,GAAA,YAAA;AAAyC,iBAAAA,CAAAA,CAAA,GAAAA,CAAA,OAAAA,CAAAlG,KAAAkG,CAAA,IAAAA,EAAAnzB,SAAAmzB,CAAA;AAAAnzB,SAAvWmzB,EAA8ZA,CAAAA,CAAA,QAAAA,GAAA,YAAA;AAA2C,iBAAAA,CAAAA,CAAA,GAAAA,CAAA,QAAAA,CAAAlG,KAAAkG,CAAA,IAAAA,EAAAnzB,SAAAmzB,CAAA;AAAAnzB,SAAzcmzB,EAAigBA,CAAAA,CAAA,MAAAA,GAAA,YAAA;AAAuC,iBAAAA,CAAAA,CAAA,GAAAA,CAAA,MAAAA,CAAAlG,KAAAkG,CAAA,IAAAA,EAAAnzB,SAAAmzB,CAAA;AAAAnzB,SAAxiBmzB,EAA8lBA,CAAAA,CAAA,UAAAA,GAAA,YAAA;AAA+C,iBAAAA,CAAAA,CAAA,GAAAA,CAAA,UAAAA,CAAAlG,KAAAkG,CAAA,IAAAA,EAAAnzB,SAAAmzB,CAAA;AAAAnzB,SAA7oBmzB,EAAusBA,CAAAA,CAAA,KAAAA,GAAA,YAAA;AAAqC,iBAAAA,CAAAA,CAAA,GAAAA,CAAA,KAAAA,CAAAlG,KAAAkG,CAAA,IAAAA,EAAAnzB,SAAAmzB,CAAA;AAAAnzB,SAA5uBmzB,EAAiyBA,CAAAA,CAAA,YAAAA,GAAA,YAAA;AAAmD,iBAAAA,CAAAA,CAAA,GAAAA,CAAA,YAAAA,CAAAlG,KAAAkG,CAAA,IAAAA,EAAAnzB,SAAAmzB,CAAA;AAAAnzB,SAAp1BmzB,EAAg5BA,CAAAA,CAAA,QAAAA,GAAA,YAAA;AAA2C,iBAAAA,CAAAA,CAAA,GAAAA,CAAA,QAAAA,CAAAlG,KAAAkG,CAAA,IAAAA,EAAAnzB,SAAAmzB,CAAA;AAAAnzB,SAA37BmzB,EAAm/BA,CAAAA,CAAA,QAAAA,GAAA,YAAA;AAA2C,iBAAAA,CAAAA,CAAA,GAAAA,CAAA,QAAAA,CAAAlG,KAAAkG,CAAA,IAAAA,EAAAnzB,SAAAmzB,CAAA;AAAAnzB,SAA9hCmzB,EAAslCA,CAAAA,CAAA,OAAAA,GAAA,YAAA;AAAyC,iBAAAA,CAAAA,CAAA,GAAAA,CAAA,OAAAA,CAAAlG,KAAAkG,CAAA,IAAAA,EAAAnzB,SAAAmzB,CAAA;AAAAnzB,SAA/nCmzB,EAAsrCA,CAAAA,CAAA,mBAAAA,GAAA,YAAA;AAAiE,iBAAAA,CAAAA,CAAA,GAAAA,CAAA,mBAAAA,CAAAlG,KAAAkG,CAAA,IAAAA,EAAAnzB,SAAAmzB,CAAA;AAAAnzB,SAAvvCmzB,EAA0zCA,CAAAA,CAAA,UAAAA,GAAA,YAAA;AAA+C,iBAAAA,CAAAA,CAAA,GAAAA,CAAA,UAAAA,CAAAlG,KAAAkG,CAAA,IAAAA,EAAAnzB,SAAAmzB,CAAA;AAAAnzB,SAAz2CmzB,EAAm6CA,CAAAA,CAAA,YAAAA,GAAA,YAAA;AAAmD,iBAAAA,CAAAA,CAAA,GAAAA,CAAA,YAAAA,CAAAlG,KAAAkG,CAAA,IAAAA,EAAAnzB,SAAAmzB,CAAA;AAAAnzB,SAAt9CmzB,EAAkhDA,CAAAA,CAAA,SAAAA,GAAA,YAAA;AAA6C,iBAAAA,CAAAA,CAAA,GAAAA,CAAA,SAAAA,CAAAlG,KAAAkG,CAAA,IAAAA,EAAAnzB,SAAAmzB,CAAA;AAAAnzB,SAA/jDmzB,EAAwnDA,CAAAA,CAAA,UAAAA,GAAA,YAAA;AAA+C,iBAAAA,CAAAA,CAAA,GAAAA,CAAA,UAAAA,CAAAlG,KAAAkG,CAAA,IAAAA,EAAAnzB,SAAAmzB,CAAA;AAAAnzB,SAAvqDmzB,EAAiuDA,CAAAA,CAAA,YAAAA,GAAA,YAAA;AAAmD,iBAAAA,CAAAA,CAAA,GAAAA,CAAA,YAAAA,CAAAlG,KAAAkG,CAAA,IAAAA,EAAAnzB,SAAAmzB,CAAA;AAAAnzB,SAApxDmzB,EAAg1DA,CAAAA,CAAA,SAAAA,GAAA,YAAA;AAA6C,iBAAAA,CAAAA,CAAA,GAAAA,CAAA,SAAAA,CAAAlG,KAAAkG,CAAA,IAAAA,EAAAnzB,SAAAmzB,CAAA;AAAAnzB,SAA73DmzB,EAAs7DA,CAAAA,CAAA,UAAAA,GAAA,YAAA;AAA+C,iBAAAA,CAAAA,CAAA,GAAAA,CAAA,UAAAA,CAAAlG,KAAAkG,CAAA,IAAAA,EAAAnzB,SAAAmzB,CAAA;AAAAnzB,SAAr+DmzB,EAA+hEA,CAAAA,CAAA,aAAAA,GAAA,YAAA;AAAqD,iBAAAA,CAAAA,CAAA,GAAAA,CAAA,aAAAA,CAAAlG,KAAAkG,CAAA,IAAAA,EAAAnzB,SAAAmzB,CAAA;AAAAnzB,SAAplEmzB,EAAipEA,CAAAA,CAAA,cAAAA,GAAA,YAAA;AAAuD,iBAAAA,CAAAA,CAAA,GAAAA,CAAA,cAAAA,CAAAlG,KAAAkG,CAAA,IAAAA,EAAAnzB,SAAAmzB,CAAA;AAAAnzB,SAAxsEmzB,EAAswEA,CAAAA,CAAA,eAAAA,GAAA,YAAA;AAAyD,iBAAAA,CAAAA,CAAA,GAAAA,CAAA,eAAAA,CAAAlG,KAAAkG,CAAA,IAAAA,EAAAnzB,SAAAmzB,CAAA;AAAAnzB,SAA/zEmzB,EAA83EA,CAAAA,CAAA,GAAAA,GAAAu2B,EAA93Ev2B,EAAg5EA,CAAAA,CAAA,IAAAA,GAAA,UAAArc,CAAA,EAAAA;AAA8B,cAAAqc,CAAAA,CAAA,SAAA,EAAwBrc,CAAAA,CAAAqc,CAAArc,CAAAA,CAAxB,KAAqC;AAAK,gBAAAqzC,CAAAA,GAAAh3B,CAAAA,CAAA,oBAAA;;AAAuCA,YAAAA,CAAAA,CAAA,oBAAAA,GAAA,YAAA;AAA0Cg3B,cAAAA,CAAAA,IAAAA,CAAAA,EAAAA,EAAarzC,CAAAA,CAAAqc,CAAArc,CAAbqzC;AAAah3B,aAAvDA;AAAqE;AAAA,iBAAAA,CAAA;AAAAA,SAApkFA,EAAitF0sB,EAAAA,CAAAzgD,SAAAygD,GAAA,IAAAv7C,KAAA,EAAjtF6uB,EAAgvF0sB,EAAAA,CAAAzgD,SAAAygD,CAAA5wC,WAAA4wC,GAAAA,EAAhvF1sB,EAA4xFqwB,CAAAA,GAAA,SAAA4G,CAAA,GAAAA;AAA2Cj3B,UAAAA,CAAAA,CAAA,SAAAA,IAAAxM,EAAAA,EAAAwM,EAA8BA,CAAAA,CAAA,SAAAA,KAAAqwB,CAAAA,GAAA4G,CAAAj3B,CAA9BA;AAA8Bi3B,SAAr2Fj3B,EAA+4GA,CAAAA,CAAA,GAAAA,GAAAxM,EAA/4GwM,EAA8oHA,CAAAA,CAAA,KAAAA,GAAA2sB,EAA9oH3sB,EAAoqHA,CAAAA,CAAA,OAAA,EAAoG,KAA9E,cAAA,OAAAA,CAAAA,CAAA,OAAA,KAAAA,CAAAA,CAAA,OAAAA,GAAA,CAAAA,CAAAA,CAAA,OAAA,CAAA,CAA8E,EAAAA,CAAAA,CAAA,OAAAA,CAAAlzB,MAAAkzB,GAAA,CAAA,GAAkCA,CAAAA,CAAA,OAAAA,CAAAvyB,GAAAuyB;AAGxk3B,eAHmm3BxM,EAAAA,IAGnm3BwM,CAAA;AAAAA,OATAA,CAAA;AAcAn2B,MAAAA,CAAAA,CAAAD,OAAAC,GAAAm2B,CAAAn2B;AAAAm2B,KDwT4Gzc,ECxT5Gyc,IDwT4Gzc,CCxT5Gyc,IDwT4Gzc,ECxT5Gyc,CAAAA,CAAAA,EAAAA,CDwT4Gzc,ECxT5Gyc,GDwT4Gzc;ACxT5Gyc,GjGmEA,EiGnEAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,KCfA,UAAAnV,CAAA,EAAAA;AAyBA,eAAAqsC,CAAA,CAAAjd,CAAA,EAAAkd,CAAA,EAAAA;AAGA,aADA,IAAAC,CAAAA,GAAA,CAAA,EACAntD,CAAAA,GAAAgwC,CAAAA,CAAAntC,MAAAmtC,GAAA,CAAA,EAAgChwC,CAAAA,IAAA,CAAhC,EAAwCA,CAAAA,EAAxC,EAAwC;AACxC,cAAAioD,CAAAA,GAAAjY,CAAAA,CAAAhwC,CAAAgwC,CAAA;AACA,kBAAAiY,CAAA,GACAjY,CAAAA,CAAAzsC,MAAAysC,CAAAhwC,CAAAgwC,EAAA,CAAAA,CADA,GAEK,SAAAiY,CAAA,IACLjY,CAAAA,CAAAzsC,MAAAysC,CAAAhwC,CAAAgwC,EAAA,CAAAA,GACAmd,CAAAA,EAFK,IAGAA,CAAAA,KACLnd,CAAAA,CAAAzsC,MAAAysC,CAAAhwC,CAAAgwC,EAAA,CAAAA,GACAmd,CAAAA,EAFKA,CALL;AAYA;;AAAA,YAAAD,CAAA,EACA,OAAUC,CAAAA,EAAV,EAAgBA,CAAhB,EACAnd,CAAAA,CAAAyc,OAAAzc,CAAA,IAAAA;AAIA,eAAAA,CAAA;AAKA;;AAAA,UAAAod,CAAAA,GACA,+DADA;AAAA,UAEAC,CAAAA,GAAA,UAAAhL,CAAA,EAAAA;AACA,eAAA+K,CAAAA,CAAAE,IAAAF,CAAA/K,CAAA+K,EAAA5iD,KAAA4iD,CAAA,CAAAA,CAAA;AAAA,OAHA;;AA0JA,eAAAt9C,CAAA,CAAAy9C,CAAA,EAAApoC,CAAA,EAAAA;AACA,YAAAooC,CAAAA,CAAAz9C,MAAA,EAAA,OAAAy9C,CAAAA,CAAAz9C,MAAAy9C,CAAApoC,CAAAooC,CAAA;;AAEA,aADA,IAAA59C,CAAAA,GAAA,EAAA,EACA3P,CAAAA,GAAA,CAAA,EAAmBA,CAAAA,GAAAutD,CAAAA,CAAA1qD,MAAnB,EAAkC7C,CAAAA,EAAlC,EACAmlB,CAAAA,CAAAooC,CAAAA,CAAAvtD,CAAAutD,CAAApoC,EAAAnlB,CAAAmlB,EAAAooC,CAAApoC,CAAAA,IAAAxV,CAAAA,CAAApC,IAAAoC,CAAA49C,CAAAA,CAAAvtD,CAAAutD,CAAA59C,CAAAwV;;AAEA,eAAAxV,CAAA;AAxJAhQ;;AAAAA,MAAAA,CAAAA,CAAAqa,OAAAra,GAAA,YAAA;AAIA,aAHA,IAAA6tD,CAAAA,GAAA,EAAA,EACAC,CAAAA,GAAAA,CAAA,CADA,EAGAztD,CAAAA,GAAA4C,SAAAA,CAAAC,MAAAD,GAAA,CAAA,EAAoC5C,CAAAA,IAAAA,CAAA,CAAAA,IAAA,CAAAytD,CAApC,EAAkEztD,CAAAA,EAAlE,EAAkE;AAClE,cAAAwmD,CAAAA,GAAAxmD,CAAAA,IAAA,CAAAA,GAAA4C,SAAAA,CAAA5C,CAAA4C,CAAA5C,GAAA4gB,CAAAA,CAAAqiB,GAAAriB,EAAA;AAGA,cAAA,YAAA,OAAA4lC,CAAA,EACA,MAAA,IAAAr6C,SAAA,CAAA,2CAAA,CAAA;AACKq6C,UAAAA,CAAAA,KAILgH,CAAAA,GAAAhH,CAAAA,GAAA,GAAAA,GAAAgH,CAAAA,EACAC,CAAAA,GAAA,QAAAjH,CAAAA,CAAA7jC,MAAA6jC,CAAA,CAAAA,CALKA,CAAAA;AAgBL;;AAAA,eAAA,CAAAiH,CAAAA,GAAA,GAAAA,GAAA,EAAA,KAJAD,CAAAA,GAAAP,CAAAA,CAAAn9C,CAAAA,CAAA09C,CAAAA,CAAAp/C,KAAAo/C,CAAA,GAAAA,CAAA19C,EAAA,UAAA5N,CAAA,EAAAA;AACA,iBAAA,CAAA,CAAAA,CAAA;AAAAA,SADA4N,CAAAm9C,EACA/qD,CACGurD,CAFHR,CAAAA,CAEGthC,IAFHshC,CAEG,GAFHA,CAIA,KAAA,GAAA;AAAA,OA1BAttD,EA+BAA,CAAAA,CAAA+tD,SAAA/tD,GAAA,UAAA6mD,CAAA,EAAAA;AACA,YAAAmH,CAAAA,GAAAhuD,CAAAA,CAAAguD,UAAAhuD,CAAA6mD,CAAA7mD,CAAA;AAAA,YACAiuD,CAAAA,GAAA,QAAAx/B,CAAAA,CAAAo4B,CAAAp4B,EAAAo4B,CAAA,CAAAp4B,CADA;AAeA,eAAA,CAXAo4B,CAAAA,GAAAyG,CAAAA,CAAAn9C,CAAAA,CAAA02C,CAAAA,CAAAp4C,KAAAo4C,CAAA,GAAAA,CAAA12C,EAAA,UAAA5N,CAAA,EAAAA;AACA,iBAAA,CAAA,CAAAA,CAAA;AAAAA,SADA4N,CAAAm9C,EACA/qD,CACGyrD,CAFHV,CAAAA,CAEGthC,IAFHshC,CAEG,GAFHA,CAWA,KAPAU,CAOA,KANAnH,CAAAA,GAAA,GAMA,GAJAA,CAAAA,IAAAoH,CAAApH,KACAA,CAAAA,IAAA,GADAA,CAIA,EAHA,CAGAmH,CAAAA,GAAA,GAAAA,GAAA,EAHA,IAGAnH,CAAA;AAAAA,OA/CA7mD,EAmDAA,CAAAA,CAAAguD,UAAAhuD,GAAA,UAAA6mD,CAAA,EAAAA;AACA,eAAA,QAAAA,CAAAA,CAAA7jC,MAAA6jC,CAAA,CAAAA,CAAA;AAAA,OApDA7mD,EAwDAA,CAAAA,CAAAgsB,IAAAhsB,GAAA,YAAA;AACA,YAAAkuD,CAAAA,GAAAtpD,KAAAA,CAAAvC,SAAAuC,CAAAiG,KAAAjG,CAAAhE,IAAAgE,CAAA3B,SAAA2B,EAAA,CAAAA,CAAA;AACA,eAAA5E,CAAAA,CAAA+tD,SAAA/tD,CAAAmQ,CAAAA,CAAA+9C,CAAA/9C,EAAA,UAAA5N,CAAA,EAAA2C,CAAA,EAAAA;AACA,cAAA,YAAA,OAAA3C,CAAA,EACA,MAAA,IAAAiK,SAAA,CAAA,wCAAA,CAAA;AAEA,iBAAAjK,CAAA;AAAAA,SAJA4N,CAAAA,CAKG6b,IALH7b,CAKG,GALHA,CAAAnQ,CAAA;AAKG,OA/DHA,EAqEAA,CAAAA,CAAAmuD,QAAAnuD,GAAA,UAAAmT,CAAA,EAAAi7C,CAAA,EAAAA;AAIA,iBAAAv4B,CAAA,CAAAhI,CAAA,EAAAA;AAEA,eADA,IAAAtjB,CAAAA,GAAA,CACA,EAAUA,CAAAA,GAAAsjB,CAAAA,CAAA3qB,MAAAqH,IACV,OAAAsjB,CAAAA,CAAAtjB,CAAAsjB,CADA,EAA8BtjB,CAAAA,EAA9B,CAA8BA;;AAK9B,eADA,IAAAC,CAAAA,GAAAqjB,CAAAA,CAAA3qB,MAAA2qB,GAAA,CACA,EAAUrjB,CAAAA,IAAA,CAAAA,IACV,OAAAqjB,CAAAA,CAAArjB,CAAAqjB,CADA,EAAoBrjB,CAAAA,EAApB,CAAoBA;;AAIpB,iBAAAD,CAAAA,GAAAC,CAAAD,GAAA,EAAAA,GACAsjB,CAAAA,CAAAhjB,KAAAgjB,CAAAtjB,CAAAsjB,EAAArjB,CAAAA,GAAAD,CAAAC,GAAA,CAAAqjB,CADA;AAdA1a;;AAAAA,QAAAA,CAAAA,GAAAnT,CAAAA,CAAAqa,OAAAra,CAAAmT,CAAAnT,EAAAyuB,MAAAzuB,CAAA,CAAAA,CAAAmT,EACAi7C,CAAAA,GAAApuD,CAAAA,CAAAqa,OAAAra,CAAAouD,CAAApuD,EAAAyuB,MAAAzuB,CAAA,CAAAA,CADAmT;;AAuBA,aALA,IAAAk7C,CAAAA,GAAAx4B,CAAAA,CAAA1iB,CAAAA,CAAA1E,KAAA0E,CAAA,GAAAA,CAAA0iB,CAAA,EACAy4B,CAAAA,GAAAz4B,CAAAA,CAAAu4B,CAAAA,CAAA3/C,KAAA2/C,CAAA,GAAAA,CAAAv4B,CADA,EAGA3yB,CAAAA,GAAAuB,IAAAA,CAAA8qB,GAAA9qB,CAAA4pD,CAAAA,CAAAnrD,MAAAuB,EAAA6pD,CAAAA,CAAAprD,MAAAuB,CAHA,EAIA8pD,CAAAA,GAAArrD,CAJA,EAKA7C,CAAAA,GAAA,CAAA,EAAiBA,CAAAA,GAAA6C,CAAjB,EAA6B7C,CAAAA,EAA7B,EACA,IAAAguD,CAAAA,CAAAhuD,CAAAguD,CAAAA,KAAAC,CAAAA,CAAAjuD,CAAAiuD,CAAA,EAAA;AACAC,UAAAA,CAAAA,GAAAluD,CAAAkuD;AACA;AAIA;;AAAA,YAAAC,CAAAA,GAAA,EAAA;;AACA,aAAAnuD,CAAAA,GAAAkuD,CAAA,EAA+BluD,CAAAA,GAAAguD,CAAAA,CAAAnrD,MAA/B,EAAqD7C,CAAAA,EAArD,EACAmuD,CAAAA,CAAA5gD,IAAA4gD,CAAA,IAAAA;;AAKA,eAAA,CAFAA,CAAAA,GAAAA,CAAAA,CAAAv9B,MAAAu9B,CAAAF,CAAAA,CAAAzjD,KAAAyjD,CAAAC,CAAAD,CAAAE,CAEA,EAAAxiC,IAAA,CAAA,GAAA,CAAA;AAAA,OA3GAhsB,EA8GAA,CAAAA,CAAAyuD,GAAAzuD,GAAA,GA9GAA,EA+GAA,CAAAA,CAAA0uD,SAAA1uD,GAAA,GA/GAA,EAiHAA,CAAAA,CAAA2uD,OAAA3uD,GAAA,UAAA6mD,CAAA,EAAAA;AACA,YAAA7nC,CAAAA,GAAA0uC,CAAAA,CAAA7G,CAAA6G,CAAA;AAAA,YACA5tD,CAAAA,GAAAkf,CAAAA,CAAA,CAAAA,CADA;AAAA,YAEA0O,CAAAA,GAAA1O,CAAAA,CAAA,CAAAA,CAFA;AAIA,eAAAlf,CAAAA,IAAA4tB,CAAA5tB,IAKA4tB,CAAAA,KAEAA,CAAAA,GAAAA,CAAAA,CAAAe,MAAAf,CAAA,CAAAA,EAAAA,CAAAA,CAAAxqB,MAAAwqB,GAAA,CAAAA,CAFAA,CAAAA,EAKA5tB,CAAAA,GAAA4tB,CAVA5tB,IAEA,GAFA;AAEA,OAxHAE,EAoIAA,CAAAA,CAAA4uD,QAAA5uD,GAAA,UAAA6mD,CAAA,EAAAt0B,CAAA,EAAAA;AACA,YAAA/M,CAAAA,GAAAkoC,CAAAA,CAAA7G,CAAA6G,CAAAA,CAAA,CAAAA,CAAA;AAKA,eAHAn7B,CAAAA,IAAA/M,CAAAA,CAAAiJ,MAAAjJ,CAAAiJ,CAAA,CAAAA,GAAA8D,CAAAA,CAAArvB,MAAAsiB,MAAA+M,CAAAA,KACA/M,CAAAA,GAAAA,CAAAA,CAAAiJ,MAAAjJ,CAAA,CAAAA,EAAAA,CAAAA,CAAAtiB,MAAAsiB,GAAA+M,CAAAA,CAAArvB,MAAAsiB,CADA+M,GAGA/M,CAAA;AAAAA,OA1IAxlB,EA8IAA,CAAAA,CAAA6uD,OAAA7uD,GAAA,UAAA6mD,CAAA,EAAAA;AACA,eAAA6G,CAAAA,CAAA7G,CAAA6G,CAAAA,CAAA,CAAAA,CAAA;AAAA,OA/IA1tD;AA4JA,UAAAyuB,CAAAA,GAAA,QAAA,KAAAA,MAAA,CAAAA,CAAA,CAAA,CAAA,GACA,UAAAxb,CAAA,EAAA1I,CAAA,EAAA8b,CAAA,EAAAA;AAAkC,eAAApT,CAAAA,CAAAwb,MAAAxb,CAAA1I,CAAA0I,EAAAoT,CAAApT,CAAA;AAAAoT,OADlC,GAEA,UAAApT,CAAA,EAAA1I,CAAA,EAAA8b,CAAA,EAAAA;AAEA,eADA9b,CAAAA,GAAA,CAAAA,KAAAA,CAAAA,GAAA0I,CAAAA,CAAA/P,MAAA+P,GAAA1I,CAAAA,GACA0I,CAAAA,CAAAwb,MAAAxb,CAAA1I,CAAA0I,EAAAoT,CAAApT,CAAA;AAAAoT,OAJA;AAIAA,KD9MA+P,EC8MA/P,ID9MA+P,CC8MA/P,ID9MA+P,EC8MA/P,CAAAA,CAAAA,EAAAA,CD9MA+P;AC8MA/P,GlG3IA,EkG2IAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AC7NApmB,IAAAA,CAAAA,CAAAD,OAAAC,GAAA,YAAA;AACA,aAAA,IAAAgc,MAAA,CAAoBzb,CAAAA,CAAA+B,CAAA/B,GAAuB,kBAA3C,CAAA;AAA2C,KAD3CP;AAC2C,GnGiF3C,EmGjF2C,UAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA;AAAA;;AAAA,IAAA,MAAA,CAAA,cAAA,CAAA,CAAA,EAAA,YAAA,EAAA;AAAA,MAAA,KAAA,EAAA,CAAA;AAAA,KAAA;;ACK3C,QAAA8uC,CAAAA,GAAAvuC,CAAAA,CAAA,EAAAA,CAAA;AAAA,QAEAyuC,CAAAA,GAAAzuC,CAAAA,CAAA,EAAAA,CAFA;AAAA,QAIAwuC,CAAAA,GAAAxuC,CAAAA,CAAA,GAAAA,CAJA;AAAA,QAKAsuD,CAAAA,GAAAtuD,CAAAA,CAAA,GAAAA,CALA;AAAA,QAOAy/C,CAAAA,GAAA,YAAA;AAEE,eAAAA,CAAA,CAAqBtc,CAArB,EAAgDxlB,CAAhD,EAA0E4wC,CAA1E,EAA0EA;AAArDj9C,aAAA6xB,OAAA7xB,GAAA6xB,CAAA7xB,EAA2BA,KAAAqM,OAAArM,GAAAqM,CAA3BrM,EACnBA,KAAKk9C,cAALl9C,GAAsBi9C,CAAAA,GAAmBD,CAAAA,CAAAG,qBAAAH,CAAsB79B,MAAtB69B,CAA6B7f,CAAAA,CAAA3J,oBAA7BwpB,CAAnBC,GAAwED,CAAAA,CAAAG,qBAD3En9C;AAevB;;AAAA,aAXEmuC,CAAAA,CAAA59C,SAAA49C,CAAA/Q,sBAAA+Q,GAAA,YAAA;AACE,eAAO,IAAIjR,CAAAA,CAAAkgB,oBAAJ,CAAyBp9C,IAAzB,EAA+BA,KAAKqM,OAALrM,CAAas9B,QAA5C,CAAP;AAAmDA,OADrD6Q,EAIAA,CAAAA,CAAA59C,SAAA49C,CAAAnR,OAAAmR,GAAA,YAAA,CAAA,CAJAA,EAMAA,CAAAA,CAAA59C,SAAA49C,CAAA5lC,OAAA4lC,GAAA,UAAQxhC,CAAR,EAA0B4M,CAA1B,EAA0BA;AACxB,YAAM5lB,CAAAA,GAAKspC,CAAAA,CAAA3jB,eAAA2jB,CAAgBtwB,CAAhBswB,EAAsB1jB,CAAtB0jB,EAA8Bj9B,KAAKk9C,cAAnCjgB,CAAX;AAEA,eADAtpC,CAAAA,CAAGi4B,UAAHj4B,CAAcgZ,CAAAA,CAAKkf,UAAnBl4B,GACOA,CAAP;AAAOA,OATTw6C,EAWFA,CAAA;AAjBA,KAAA,EAPA;;AAOajgD,IAAAA,CAAAA,CAAAigD,kBAAAjgD,GAAAigD,CAAAjgD;AAAAigD,GpGqEb,EoGrEaA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;ACLb,QAAAiP,CAAAA,GAAA,YAAA;AACE,eAAAA,CAAA,CAA4B7f,CAA5B,EAAyED,CAAzE,EAAyEA;AAA7Ct9B,aAAAu9B,OAAAv9B,GAAAu9B,CAAAv9B,EAA6CA,KAAAs9B,QAAAt9B,GAAAs9B,CAA7Ct9B;AAG9B;;AAAA,aADEo9C,CAAAA,CAAA7sD,SAAA6sD,CAAApgB,OAAAogB,GAAA,YAAA,CAAA,CAAAA,EACFA,CAAA;AAJA,KAAA,EAAA;;AAAalvD,IAAAA,CAAAA,CAAAkvD,oBAAAlvD,GAAAkvD,CAAAlvD;AAAAkvD,GrG0Eb,EqG1EaA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;ACHb,QAAAlrB,CAAAA,GAAAxjC,CAAAA,CAAA,GAAAA,CAAA;AAAA,QACAyjC,CAAAA,GAAAzjC,CAAAA,CAAA,GAAAA,CADA;AAAA,QAEA2uD,CAAAA,GAAA3uD,CAAAA,CAAA,GAAAA,CAFA;AAAA,QAGA2jC,CAAAA,GAAA3jC,CAAAA,CAAA,GAAAA,CAHA;AAAA,QAIA+jC,CAAAA,GAAA/jC,CAAAA,CAAA,GAAAA,CAJA;AAAA,QAKAikC,CAAAA,GAAAjkC,CAAAA,CAAA,GAAAA,CALA;AAAA,QAMAu+B,CAAAA,GAAAv+B,CAAAA,CAAA,GAAAA,CANA;AAAA,QAOAmkC,CAAAA,GAAAnkC,CAAAA,CAAA,GAAAA,CAPA;AAAA,QAQAskC,CAAAA,GAAAtkC,CAAAA,CAAA,GAAAA,CARA;AAAA,QASAwkC,CAAAA,GAAAxkC,CAAAA,CAAA,GAAAA,CATA;AAWaR,IAAAA,CAAAA,CAAAivD,qBAAAjvD,GAA0D,CACrE,CAAC,KAAD,EAAQ,EAAR,EAAY,IAAZ,EAAkB,YAAA;AAAM,aAAA,IAAIikC,CAAAA,CAAAmrB,YAAJ,CAAiB,CAAC,SAAD,CAAjB,EAA8B,KAA9B,CAAA;AAA8B,KAAtD,CADqE,EAErE,CAAC,KAAD,EAAQ,EAAR,EAAY,IAAZ,EAAkB,YAAA;AAAM,aAAA,IAAInrB,CAAAA,CAAAmrB,YAAJ,CAAiB,CAAC,MAAD,CAAjB,EAA2B,KAA3B,CAAA;AAA2B,KAAnD,CAFqE,EAGrE,CAAC,aAAD,EAAgB,EAAhB,EAAoB,IAApB,EAA0B,YAAA;AAAM,aAAA,IAAIzqB,CAAAA,CAAA0qB,eAAJ,EAAA;AAAIA,KAApC,CAHqE,EAIrE,CAAC,oBAAD,EAAuB,EAAvB,EAA2B,IAA3B,EAAiC,YAAA;AAAM,aAAA,IAAIrrB,CAAAA,CAAAsrB,sBAAJ,EAAA;AAAIA,KAA3C,CAJqE,EAKrE,CAAC,MAAD,EAAS,EAAT,EAAa,IAAb,EAAmB,YAAA;AAAM,aAAA,IAAIH,CAAAA,CAAAI,QAAJ,EAAA;AAAIA,KAA7B,CALqE,EAMrE,CAAC,MAAD,EAAS,EAAT,EAAa,IAAb,EAAmB,YAAA;AAAM,aAAA,IAAIprB,CAAAA,CAAAqrB,QAAJ,EAAA;AAAIA,KAA7B,CANqE,EAOrE,CAAC,KAAD,EAAQ,EAAR,EAAY,IAAZ,EAAkB,YAAA;AAAM,aAAA,IAAIvrB,CAAAA,CAAAmrB,YAAJ,CAAiB,CAAC,SAAD,CAAjB,EAA8B,KAA9B,CAAA;AAA8B,KAAtD,CAPqE,EAQrE,CAAC,MAAD,EAAS,EAAT,EAAa,IAAb,EAAmB,YAAA;AAAM,aAAA,IAAI7qB,CAAAA,CAAAkrB,QAAJ,EAAA;AAAIA,KAA7B,CARqE,EASrE,CAAC,mBAAD,EAAsB,EAAtB,EAA0B,IAA1B,EAAgC,YAAA;AAAM,aAAA,IAAI9qB,CAAAA,CAAA+qB,qBAAJ,EAAA;AAAIA,KAA1C,CATqE,EAUrE,CAAC,eAAD,EAAkB,EAAlB,EAAsB,IAAtB,EAA4B,YAAA;AAAM,aAAA,IAAI/qB,CAAAA,CAAAgrB,iBAAJ,EAAA;AAAIA,KAAtC,CAVqE,EAWrE,CAAC,uBAAD,EAA0B,EAA1B,EAA8B,IAA9B,EAAoC,YAAA;AAAM,aAAA,IAAIlrB,CAAAA,CAAAmrB,yBAAJ,EAAA;AAAIA,KAA9C,CAXqE,EAYrE,CAAC,QAAD,EAAW,EAAX,EAAe,IAAf,EAAqB,YAAA;AAAM,aAAA,IAAI7wB,CAAAA,CAAA8wB,UAAJ,EAAA;AAAIA,KAA/B,CAZqE,EAarE,CAAC,SAAD,EAAY,EAAZ,EAAgB,IAAhB,EAAsB,YAAA;AAAM,aAAA,IAAIlrB,CAAAA,CAAAmrB,WAAJ,EAAA;AAAIA,KAAhC,CAbqE,EAcrE,CAAC,KAAD,EAAQ,EAAR,EAAY,IAAZ,EAAkB,YAAA;AAAM,aAAA,IAAI7rB,CAAAA,CAAAmrB,YAAJ,CAAiB,CAAC,SAAD,CAAjB,EAA8B,KAA9B,CAAA;AAA8B,KAAtD,CAdqE,EAerE,CAAC,IAAD,EAAO,EAAP,EAAW,IAAX,EAAiB,YAAA;AAAM,aAAA,IAAInrB,CAAAA,CAAAmrB,YAAJ,CAAiB,CAAC,MAAD,CAAjB,EAA2B,IAA3B,CAAA;AAA2B,KAAlD,CAfqE,EAgBrE,CAAC,OAAD,EAAU,EAAV,EAAc,IAAd,EAAoB,YAAA;AAAM,aAAA,IAAInrB,CAAAA,CAAAmrB,YAAJ,CAAiB,CAAC,SAAD,CAAjB,EAA8B,OAA9B,CAAA;AAA8B,KAAxD,CAhBqE,EAiBrE,CAAC,SAAD,EAAY,EAAZ,EAAgB,IAAhB,EAAsB,YAAA;AAAM,aAAA,IAAItqB,CAAAA,CAAAirB,WAAJ,EAAA;AAAIA,KAAhC,CAjBqE,EAkBrE,CAAC,KAAD,EAAQ,EAAR,EAAY,IAAZ,EAAkB,YAAA;AAAM,aAAA,IAAI9rB,CAAAA,CAAAmrB,YAAJ,CAAiB,CAAC,SAAD,CAAjB,EAA8B,KAA9B,CAAA;AAA8B,KAAtD,CAlBqE,EAmBrE,CAAC,KAAD,EAAQ,EAAR,EAAY,IAAZ,EAAkB,YAAA;AAAM,aAAA,IAAIpqB,CAAAA,CAAAgrB,OAAJ,EAAA;AAAIA,KAA5B,CAnBqE,EAoBrE,CAAC,KAAD,EAAQ,EAAR,EAAY,IAAZ,EAAkB,YAAA;AAAM,aAAA,IAAI/rB,CAAAA,CAAAmrB,YAAJ,CAAiB,CAAC,MAAD,CAAjB,EAA2B,KAA3B,CAAA;AAA2B,KAAnD,CApBqE,CAA1DpvD;AAoBwC,GtG8CrD,EsG9CqD,UAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA;AAAA;;AAAA,QAAA,CAAA;AAAA,QAAA,CAAA,GAAA,QAAA,KAAA,SAAA,KAAA,CAAA,GAAA,UAAA,CAAA,EAAA,CAAA,EAAA;AAAA,aAAA,CAAA,CAAA,GAAA,MAAA,CAAA,cAAA,IAAA;AAAA,QAAA,SAAA,EAAA;AAAA,mBAAA,KAAA,IAAA,UAAA,CAAA,EAAA,CAAA,EAAA;AAAA,QAAA,CAAA,CAAA,SAAA,GAAA,CAAA;AAAA,OAAA,IAAA,UAAA,CAAA,EAAA,CAAA,EAAA;AAAA,aAAA,IAAA,CAAA,IAAA,CAAA,EAAA,CAAA,CAAA,cAAA,CAAA,CAAA,MAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA;AAAA,OAAA,EAAA,CAAA,EAAA,CAAA,CAAA;AAAA,KAAA,EAAA,UAAA,CAAA,EAAA,CAAA,EAAA;AAAA,eAAA,CAAA,GAAA;AAAA,aAAA,WAAA,GAAA,CAAA;AAAA;;AAAA,MAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,EAAA,CAAA,CAAA,SAAA,GAAA,SAAA,CAAA,GAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,IAAA,CAAA,CAAA,SAAA,GAAA,CAAA,CAAA,SAAA,EAAA,IAAA,CAAA,EAAA,CAAA;AAAA,KAAA,CAAA;AAAA,IAAA,MAAA,CAAA,cAAA,CAAA,CAAA,EAAA,YAAA,EAAA;AAAA,MAAA,KAAA,EAAA,CAAA;AAAA,KAAA;;ACjCrD,QAAAgkC,CAAAA,GAAAxjC,CAAAA,CAAA,EAAAA,CAAA;AAAA,QACAoC,CAAAA,GAAApC,CAAAA,CAAA,CAAAA,CADA;AAAA,QAEAyvD,CAAAA,GAAAzvD,CAAAA,CAAA,CAAAA,CAFA;AAAA,QAKA8uD,CAAAA,GAAA,UAAAtyC,CAAA,EAAAA;AAAA,eAAAsyC,CAAA,GAAAA;AAAAA,eAAAA,SAAAA,CAAAA,IAAAA,CAAAA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,SAAAA,CAAAA,IAAAA,IAAAA;AAkDA;;AAAA,aAlD4CryC,CAAAA,CAAAqyC,CAAAryC,EAAAD,CAAAC,CAAAA,EAC1CqyC,CAAAA,CAAAjtD,SAAAitD,CAAA1lC,GAAA0lC,GAAA,UAAIzlC,CAAJ,EAA4C/mB,CAA5C,EAA4CA;AAS1C,aARA,IAAMqK,CAAAA,GAAIrK,CAAAA,CAAO,CAAPA,CAAV,EACMs7B,CAAAA,GAAQt7B,CAAAA,CAAO,CAAPA,CADd,EAEMiB,CAAAA,GAAIjB,CAAAA,CAAO,CAAPA,CAFV,EAGMw7B,CAAAA,GAAOx7B,CAAAA,CAAO,CAAPA,CAHb,EAIMuyC,CAAAA,GAAWvyC,CAAAA,CAAO,CAAPA,CAJjB,EAOIyyC,CAAAA,GAAc,CAPlB,EAQSl1C,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAI8M,CAAAA,CAAEhK,IAAFgK,CAAOjK,MAA3B,EAAmC7C,CAAAA,EAAnC,EACEk1C,CAAAA,IAAepoC,CAAAA,CAAEhK,IAAFgK,CAAO9M,CAAP8M,CAAfooC;;AAIF,YAAMnoC,CAAAA,GAAI,IAAIxK,CAAAA,CAAAmD,MAAJ,CAAWoH,CAAAA,CAAEhK,IAAb,EAAmBgK,CAAAA,CAAEnH,IAArB,CAAV;AAOA,eANAiqD,CAAAA,CAAAlzC,WAAAkzC,CAAY/yC,WAAZ+yC,GAA0B5P,KAA1B4P,CACI,0BADJA,EACgC,CAAC9iD,CAAAA,CAAE8G,SAAH,EAAc,YAAd,CADhCg8C,EAC6D,CAAC7iD,CAAAA,CAAE6G,SAAH,EAAc,YAAd,EAA4B,KAA5B,CAD7Dg8C,EAEI,CAAC9iD,CAAAA,CAAEhK,IAAFgK,CAAO,CAAPA,CAAD,EAAY,OAAZ,CAFJ8iD,EAE0B,CAAC9iD,CAAAA,CAAEhK,IAAFgK,CAAO,CAAPA,CAAD,EAAY,OAAZ,CAF1B8iD,EAEgD,CAAC1a,CAAD,EAAc,OAAd,CAFhD0a,EAEwE,CAAC7xB,CAAAA,CAAMnqB,SAAP,EAAkB,YAAlB,CAFxEg8C,EAGI,CAAClsD,CAAAA,CAAEkQ,SAAH,EAAc,YAAd,CAHJg8C,EAGiC,CAAC3xB,CAAAA,CAAKrqB,SAAN,EAAiB,YAAjB,CAHjCg8C,EAGiE,CAAC5a,CAAAA,CAASphC,SAAV,EAAqB,YAArB,CAHjEg8C,EAII,CAACn+C,KAAK8rB,OAAN,EAAe,SAAf,CAJJqyB,GAMO,CAAC7iD,CAAD,CAAP;AAAQA,OAtBgC6P,EA0B1CqyC,CAAAA,CAAAjtD,SAAAitD,CAAApxB,eAAAoxB,GAAA,UAAgBxsD,CAAhB,EAAgBA;AACd,YAAMq7B,CAAAA,GAAIr7B,CAAAA,CAAO,CAAPA,CAAV;AAAA,YACMs7B,CAAAA,GAAQt7B,CAAAA,CAAO,CAAPA,CADd;AAAA,YAEMu7B,CAAAA,GAAIv7B,CAAAA,CAAO,CAAPA,CAFV;AAAA,YAGMw7B,CAAAA,GAAOx7B,CAAAA,CAAO,CAAPA,CAHb;AAAA,YAIMy7B,CAAAA,GAAOz7B,CAAAA,CAAO,CAAPA,CAJb;AAQA,eAAA,EAAIq7B,CAAAA,CAAEh7B,IAAFg7B,CAAOj7B,MAAPi7B,GAAgB,CAAhBA,IAA2C,MAAtBC,CAAAA,CAAMj7B,IAANi7B,CAAWl7B,MAAhCi7B,IAAkE,MAAlBE,CAAAA,CAAEl7B,IAAFk7B,CAAOn7B,MAAvDi7B,IAA4F,MAArBG,CAAAA,CAAKn7B,IAALm7B,CAAUp7B,MAAjFi7B,IACqB,MAArBI,CAAAA,CAAKp7B,IAALo7B,CAAUr7B,MADd,KAIIk7B,CAAAA,CAAMj7B,IAANi7B,CAAW,CAAXA,MAAkBD,CAAAA,CAAEh7B,IAAFg7B,CAAO,CAAPA,CAAlBC,IAA+BC,CAAAA,CAAEl7B,IAAFk7B,CAAO,CAAPA,MAAcF,CAAAA,CAAEh7B,IAAFg7B,CAAO,CAAPA,CAA7CC,IAA0DE,CAAAA,CAAKn7B,IAALm7B,CAAU,CAAVA,MAAiBH,CAAAA,CAAEh7B,IAAFg7B,CAAO,CAAPA,CAA3EC,IACAG,CAAAA,CAAKp7B,IAALo7B,CAAU,CAAVA,MAAiBJ,CAAAA,CAAEh7B,IAAFg7B,CAAO,CAAPA,CADjBC,IAKW,cAAXD,CAAAA,CAAEn4B,IAAS,IAA4B,cAAfo4B,CAAAA,CAAMp4B,IAAnB,IAAoD,cAAXq4B,CAAAA,CAAEr4B,IAA3C,IAA+E,cAAds4B,CAAAA,CAAKt4B,IAAtE,IACG,cAAdu4B,CAAAA,CAAKv4B,IAVT;AAUSA,OA7C+BiX,EAkD5CqyC,CAAA;AAlDA,KAAA,CAA4CtrB,CAAAA,CAAAvG,kBAA5C,CALA;;AAKaz9B,IAAAA,CAAAA,CAAAsvD,sBAAAtvD,GAAAsvD,CAAAtvD;AAAAsvD,GvG0Eb,EuG1EaA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,QAAAA,CAAAA;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,SAAAA,KAAAA,CAAAA,GAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,CAAAA,CAAAA,GAAAA,MAAAA,CAAAA,cAAAA,IAAAA;AAAAA,QAAAA,SAAAA,EAAAA;AAAAA,mBAAAA,KAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,QAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA;AAAAA,OAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,IAAAA,CAAAA,IAAAA,CAAAA,EAAAA,CAAAA,CAAAA,cAAAA,CAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,OAAAA,EAAAA,CAAAA,EAAAA,CAAAA,CAAAA;AAAAA,KAAAA,EAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,eAAAA,CAAAA,GAAAA;AAAAA,aAAAA,WAAAA,GAAAA,CAAAA;AAAAA;;AAAAA,MAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,SAAAA,GAAAA,SAAAA,CAAAA,GAAAA,MAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA,CAAAA,SAAAA,EAAAA,IAAAA,CAAAA,EAAAA,CAAAA;AAAAA,KAAAA,CAAAA;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;ACLb,QAAArrB,CAAAA,GAAAzjC,CAAAA,CAAA,EAAAA,CAAA;AAAA,QACAoC,CAAAA,GAAApC,CAAAA,CAAA,CAAAA,CADA;AAAA,QAEAkR,CAAAA,GAAAlR,CAAAA,CAAA,CAAAA,CAFA;AAAA,QAGAyvD,CAAAA,GAAAzvD,CAAAA,CAAA,CAAAA,CAHA;AAAA,QAMA4uD,CAAAA,GAAA,UAAApyC,CAAA,EAAAA;AACE,eAAAoyC,CAAA,CAAY3wB,CAAZ,EAA4D/W,CAA5D,EAA4E/hB,CAA5E,EAA4EA;AAAAA,eAC1EqX,CAAAA,CAAApc,IAAAoc,CAAAlL,IAAAkL,EAAMyhB,CAANzhB,EAAsB0K,CAAtB1K,EAA8BrX,CAA9BqX,KAAyClL,IADiCnM;AA+E9E;;AAAA,aAhFkCsX,CAAAA,CAAAmyC,CAAAnyC,EAAAD,CAAAC,CAAAA,EAKhCmyC,CAAAA,CAAA/sD,SAAA+sD,CAAAxlC,GAAAwlC,GAAA,UAAIvlC,CAAJ,EAA4C/mB,CAA5C,EAA4CA;AAC1C,YAAMW,CAAAA,GAAciO,CAAAA,CAAAzN,aAAAyN,CAAcxN,SAAdwN,CAAwB5O,CAAAA,CAAO,CAAPA,CAAAA,CAAUK,IAAlCuO,EAAwC5O,CAAAA,CAAO,CAAPA,CAAAA,CAAUK,IAAlDuO,EAAkDvO,CAAM,CAAxDuO,CAApB;AACA,YAAA,CAAKjO,CAAL,EACE,MAAM,IAAI8D,KAAJ,CAAU,mBAAV,CAAN;AAEF,YAiDIyX,CAjDJ;AAAA,YAAIyiB,CAAAA,GAAM,EAAV;AAAA,YAEIyuB,CAAAA,GAAe,EAFnB;;AAGA,gBAAQp+C,KAAK4V,MAAb;AACE,eAAK,KAAL;AACyB,0BAAnB5kB,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IAAS,KACrBy7B,CAAAA,GAAM,UAANA,EACAyuB,CAAAA,GAAe,qBAFM;AAIvB;;AACF,eAAK,KAAL;AACyB,0BAAnBptD,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IAAS,KACrBy7B,CAAAA,GAAM,UAANA,EACAyuB,CAAAA,GAAe,qBAFM;AAIvB;;AACF,eAAK,KAAL;AACyB,0BAAnBptD,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IAAS,KACrBy7B,CAAAA,GAAM,UAANA,EACAyuB,CAAAA,GAAe,qBAFM;AAIvB;;AACF,eAAK,KAAL;AACyB,0BAAnBptD,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IAAS,KACrBy7B,CAAAA,GAAM,UAANA,EACAyuB,CAAAA,GAAe,qBAFM;AAIvB;;AACF,eAAK,OAAL;AACyB,0BAAnBptD,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IAAS,KACrBy7B,CAAAA,GAAM,YAANA,EACAyuB,CAAAA,GAAe,qBAFM;AAIvB;;AACF,eAAK,KAAL;AACEzuB,YAAAA,CAAAA,GAAM,SAANA,EACAyuB,CAAAA,GAAe,eADfzuB;AAEA;;AACF,eAAK,IAAL;AACEA,YAAAA,CAAAA,GAAM,QAANA,EACAyuB,CAAAA,GAAe,eADfzuB;AAEA;;AACF,eAAK,KAAL;AACEA,YAAAA,CAAAA,GAAM,SAANA,EACAyuB,CAAAA,GAAe,eADfzuB;AAEA;;AACF;AACE,kBAAMl6B,KAAAA,CAAM,2CAANA,CAAN;AA5CJ;;AA+CA,YAAqB,0BAAjB2oD,CAAJ,EACElxC,CAAAA,GAAS,IAAIpc,CAAAA,CAAAmD,MAAJ,CAAWtC,CAAX,EAAwB,SAAxB,CAATub,EACAixC,CAAAA,CAAAlzC,WAAAkzC,CAAY/yC,WAAZ+yC,GAA0B5P,KAA1B4P,CACIxuB,CADJwuB,EACS,CAACntD,CAAAA,CAAO,CAAPA,CAAAA,CAAUmR,SAAX,EAAsB,YAAtB,CADTg8C,EAC8C,CAACntD,CAAAA,CAAO,CAAPA,CAAAA,CAAUK,IAAVL,CAAeI,MAAhB,EAAwB,OAAxB,CAD9C+sD,EACgF,CAACntD,CAAAA,CAAO,CAAPA,CAAAA,CAAUK,IAAX,EAAiB,UAAjB,CADhF8sD,EAEI,CAACntD,CAAAA,CAAO,CAAPA,CAAAA,CAAUmR,SAAX,EAAsB,YAAtB,CAFJg8C,EAEyC,CAACntD,CAAAA,CAAO,CAAPA,CAAAA,CAAUK,IAAVL,CAAeI,MAAhB,EAAwB,OAAxB,CAFzC+sD,EAE2E,CAACntD,CAAAA,CAAO,CAAPA,CAAAA,CAAUK,IAAX,EAAiB,UAAjB,CAF3E8sD,EAGI,CAACjxC,CAAAA,CAAO/K,SAAR,EAAmB,YAAnB,EAAiC,KAAjC,CAHJg8C,EAG6C,CAACjxC,CAAAA,CAAO/K,SAAP+K,CAAiB9b,MAAlB,EAA0B,OAA1B,CAH7C+sD,EAGiF,CAACxsD,CAAAA,CAAYP,MAAb,EAAqB,OAArB,CAHjF+sD,EAII,CAACxsD,CAAD,EAAc,UAAd,CAJJwsD,CADAjxC,CADF,KAOO;AAAA,cAAqB,oBAAjBkxC,CAAJ,EASL,MAAM,IAAI3oD,KAAJ,CAAU,gEAAV,CAAN;AARAyX,UAAAA,CAAAA,GAAS,IAAIpc,CAAAA,CAAAmD,MAAJ,CAAWtC,CAAX,EAAwB,MAAxB,CAATub,EACAixC,CAAAA,CAAAlzC,WAAAkzC,CAAY/yC,WAAZ+yC,GAA0B5P,KAA1B4P,CACIxuB,CADJwuB,EACS,CAACntD,CAAAA,CAAO,CAAPA,CAAAA,CAAUgnB,WAAX,EAAsC,SAAtC,CADTmmC,EAC2D,CAACntD,CAAAA,CAAO,CAAPA,CAAAA,CAAUK,IAAVL,CAAeI,MAAhB,EAAwB,OAAxB,CAD3D+sD,EAEI,CAACntD,CAAAA,CAAO,CAAPA,CAAAA,CAAUK,IAAX,EAAiB,UAAjB,CAFJ8sD,EAEkC,CAACntD,CAAAA,CAAO,CAAPA,CAAAA,CAAUgnB,WAAX,EAAsC,SAAtC,CAFlCmmC,EAGI,CAACntD,CAAAA,CAAO,CAAPA,CAAAA,CAAUK,IAAVL,CAAeI,MAAhB,EAAwB,OAAxB,CAHJ+sD,EAGsC,CAACntD,CAAAA,CAAO,CAAPA,CAAAA,CAAUK,IAAX,EAAiB,UAAjB,CAHtC8sD,EAII,CAACjxC,CAAAA,CAAO8K,WAAR,EAAmC,SAAnC,EAA8C,KAA9C,CAJJmmC,EAI0D,CAACjxC,CAAAA,CAAO8K,WAAP9K,CAAmB9b,MAApB,EAA4B,OAA5B,CAJ1D+sD,EAKI,CAACxsD,CAAAA,CAAYP,MAAb,EAAqB,OAArB,CALJ+sD,EAKmC,CAACxsD,CAAD,EAAc,UAAd,CALnCwsD,CADAjxC;AAUF;AAAA,eAAO,CAACA,CAAD,CAAP;AAAQA,OA9EsB/B,EAgFlCmyC,CAAA;AAhFA,KAAA,CAAkCnrB,CAAAA,CAAAzF,QAAlC,CANA;;AAMax+B,IAAAA,CAAAA,CAAAovD,YAAApvD,GAAAovD,CAAApvD;AAAAovD,GxGyEb,EwGzEaA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,QAAAA,CAAAA;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,SAAAA,KAAAA,CAAAA,GAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,CAAAA,CAAAA,GAAAA,MAAAA,CAAAA,cAAAA,IAAAA;AAAAA,QAAAA,SAAAA,EAAAA;AAAAA,mBAAAA,KAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,QAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA;AAAAA,OAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,IAAAA,CAAAA,IAAAA,CAAAA,EAAAA,CAAAA,CAAAA,cAAAA,CAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,OAAAA,EAAAA,CAAAA,EAAAA,CAAAA,CAAAA;AAAAA,KAAAA,EAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,eAAAA,CAAAA,GAAAA;AAAAA,aAAAA,WAAAA,GAAAA,CAAAA;AAAAA;;AAAAA,MAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,SAAAA,GAAAA,SAAAA,CAAAA,GAAAA,MAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA,CAAAA,SAAAA,EAAAA,IAAAA,CAAAA,EAAAA,CAAAA;AAAAA,KAAAA,CAAAA;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;ACNb,QAAAD,CAAAA,GAAA3uD,CAAAA,CAAA,EAAAA,CAAA;AAAA,QACAoC,CAAAA,GAAApC,CAAAA,CAAA,CAAAA,CADA;AAAA,QAEAyvD,CAAAA,GAAAzvD,CAAAA,CAAA,CAAAA,CAFA;AAAA,QAKA+uD,CAAAA,GAAA,UAAAvyC,CAAA,EAAAA;AAAA,eAAAuyC,CAAA,GAAAA;AAAAA,eAAAA,SAAAA,CAAAA,IAAAA,CAAAA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,SAAAA,CAAAA,IAAAA,IAAAA;AAyBA;;AAAA,aAzB8BtyC,CAAAA,CAAAsyC,CAAAtyC,EAAAD,CAAAC,CAAAA,EAC5BsyC,CAAAA,CAAAltD,SAAAktD,CAAA3lC,GAAA2lC,GAAA,UAAI1lC,CAAJ,EAA4C/mB,CAA5C,EAA4CA;AAC1C,YAAMkc,CAAAA,GAAS,IAAIpc,CAAAA,CAAAmD,MAAJ,CAAWjD,CAAAA,CAAO,CAAPA,CAAAA,CAAUK,IAArB,EAA2BL,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IAArC,CAAf;AAAA,YACMF,CAAAA,GAAOkZ,CAAAA,CAAO/K,SAAP+K,CAAiB9b,MAD9B;AAEA,YAAuB,cAAnBJ,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IAAd,EAOE,MAAM,IAAIuB,KAAJ,CAAU,2CAAV,CAAN;AAEF,eARE0oD,CAAAA,CAAAlzC,WAAAkzC,CAAY/yC,WAAZ+yC,GAA0B5P,KAA1B4P,CACI,WADJA,EACiB,CAACntD,CAAAA,CAAO,CAAPA,CAAAA,CAAUmR,SAAX,EAAsB,YAAtB,CADjBg8C,EACsD,CAACjxC,CAAAA,CAAO/K,SAAR,EAAmB,YAAnB,EAAiC,KAAjC,CADtDg8C,EAC+F,CAACnqD,CAAD,EAAO,OAAP,CAD/FmqD,EAEI,CAACn+C,KAAKyd,GAAN,EAAW,SAAX,CAFJ0gC,EAE2B,CAACn+C,KAAKpN,GAAN,EAAW,SAAX,CAF3BurD,GAQK,CAACjxC,CAAD,CAAP;AAAQA,OAbkB/B,EAiB5BsyC,CAAAA,CAAAltD,SAAAktD,CAAArxB,eAAAqxB,GAAA,UAAgBzsD,CAAhB,EAAgBA;AAEd,eAAuB,cAAnBA,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IAAd;AAAcA,OAnBYiX,EAyB9BsyC,CAAA;AAzBA,KAAA,CAA8BJ,CAAAA,CAAAliB,IAA9B,CALA;;AAKajtC,IAAAA,CAAAA,CAAAuvD,QAAAvvD,GAAAuvD,CAAAvvD;AAAAuvD,GzG0Eb,EyG1EaA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,QAAAA,CAAAA;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,SAAAA,KAAAA,CAAAA,GAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,CAAAA,CAAAA,GAAAA,MAAAA,CAAAA,cAAAA,IAAAA;AAAAA,QAAAA,SAAAA,EAAAA;AAAAA,mBAAAA,KAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,QAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA;AAAAA,OAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,IAAAA,CAAAA,IAAAA,CAAAA,EAAAA,CAAAA,CAAAA,cAAAA,CAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,OAAAA,EAAAA,CAAAA,EAAAA,CAAAA,CAAAA;AAAAA,KAAAA,EAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,eAAAA,CAAAA,GAAAA;AAAAA,aAAAA,WAAAA,GAAAA,CAAAA;AAAAA;;AAAAA,MAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,SAAAA,GAAAA,SAAAA,CAAAA,GAAAA,MAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA,CAAAA,SAAAA,EAAAA,IAAAA,CAAAA,EAAAA,CAAAA;AAAAA,KAAAA,CAAAA;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,SAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,KAAAA,CAAAA,KAAAA,CAAAA,GAAAA,OAAAA,CAAAA,EAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,iBAAAA,CAAAA,CAAAA,CAAAA,EAAAA;AAAAA,cAAAA;AAAAA,YAAAA,CAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,WAAAA,CAAAA,OAAAA,CAAAA,EAAAA;AAAAA,YAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA;AAAAA;;AAAAA,iBAAAA,CAAAA,CAAAA,CAAAA,EAAAA;AAAAA,cAAAA;AAAAA,YAAAA,CAAAA,CAAAA,CAAAA,CAAAA,KAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,WAAAA,CAAAA,OAAAA,CAAAA,EAAAA;AAAAA,YAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA;AAAAA;;AAAAA,icAAAA,IAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,iBAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,SAAAA;AAAAA,QAAAA,IAAAA,EAAAA,EAAAA;AAAAA,QAAAA,GAAAA,EAAAA;AAAAA,OAAAA;AAAAA,aAAAA,CAAAA,GAAAA;AAAAA,QAAAA,IAAAA,EAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,QAAAA,KAAAA,EAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,QAAAA,MAAAA,EAAAA,CAAAA,CAAAA,CAAAA;AAAAA,OAAAA,EAAAA,cAAAA,OAAAA,MAAAA,KAAAA,CAAAA,CAAAA,MAAAA,CAAAA,QAAAA,CAAAA,GAAAA,YAAAA;AAAAA,eAAAA,IAAAA;AAAAA,OAAAA,CAAAA,EAAAA,CAAAA;;AAAAA,eAAAA,CAAAA,CAAAA,CAAAA,EAAAA;AAAAA,eAAAA,UAAAA,CAAAA,EAAAA;AAAAA,iBAAAA,UAAAA,CAAAA,EAAAA;AAAAA,gBAAAA,CAAAA,EAAAA,MAAAA,IAAAA,SAAAA,CAAAA,iCAAAA,CAAAA;;AAAAA,mBAAAA,CAAAA,GAAAA,IAAAA;AAAAA,kBAAAA,CAAAA,GAAAA,CAAAA,EAAAA,CAAAA,KAAAA,CAAAA,GAAAA,IAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,MAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,KAAAA,KAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,MAAAA,KAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,IAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAAA,IAAAA,EAAAA,OAAAA,CAAAA;;AAAAA,sBAAAA,CAAAA,GAAAA,CAAAA,EAAAA,CAAAA,KAAAA,CAAAA,GAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,KAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,qBAAAA,CAAAA;AAAAA,qBAAAA,CAAAA;AAAAA,kBAAAA,CAAAA,GAAAA,CAAAA;AAAAA;;AAAAA,qBAAAA,CAAAA;AAAAA,yBAAAA,CAAAA,CAAAA,KAAAA,IAAAA;AAAAA,oBAAAA,KAAAA,EAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,oBAAAA,IAAAA,EAAAA,CAAAA;AAAAA,mBAAAA;;AAAAA,qBAAAA,CAAAA;AAAAA,kBAAAA,CAAAA,CAAAA,KAAAA,IAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA;AAAAA;;AAAAA,qBAAAA,CAAAA;AAAAA,kBAAAA,CAAAA,GAAAA,CAAAA,CAAAA,GAAAA,CAAAA,GAAAA,EAAAA,EAAAA,CAAAA,CAAAA,IAAAA,CAAAA,GAAAA,EAAAA;AAAAA;;AAAAA;AAAAA,sBAAAA,EAAAA,CAAAA,GAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,IAAAA,EAAAA,MAAAA,GAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,CAAAA,MAAAA,GAAAA,CAAAA,CAAAA,MAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,IAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAAA;AAAAA,oBAAAA,CAAAA,GAAAA,CAAAA;AAAAA;AAAAA;;AAAAA,sBAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,KAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAAA;AAAAA,oBAAAA,CAAAA,CAAAA,KAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA;AAAAA;;AAAAA,sBAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,KAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAAA;AAAAA,oBAAAA,CAAAA,CAAAA,KAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,GAAAA,CAAAA;AAAAA;AAAAA;;AAAAA,sBAAAA,CAAAA,IAAAA,CAAAA,CAAAA,KAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAAA;AAAAA,oBAAAA,CAAAA,CAAAA,KAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,GAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA;AAAAA;AAAAA;;AAAAA,kBAAAA,CAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,GAAAA,CAAAA,GAAAA,EAAAA,EAAAA,CAAAA,CAAAA,IAAAA,CAAAA,GAAAA,EAAAA;AAAAA;AAAAA;;AAAAA,cAAAA,CAAAA,GAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA;AAAAA,aAAAA,CAAAA,OAAAA,CAAAA,EAAAA;AAAAA,cAAAA,CAAAA,GAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,EAAAA,CAAAA,GAAAA,CAAAA;AAAAA,aAAAA,SAAAA;AAAAA,cAAAA,CAAAA,GAAAA,CAAAA,GAAAA,CAAAA;AAAAA;;AAAAA,gBAAAA,IAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,mBAAAA;AAAAA,cAAAA,KAAAA,EAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,KAAAA,CAAAA;AAAAA,cAAAA,IAAAA,EAAAA,CAAAA;AAAAA,aAAAA;AAAAA,WAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,CAAAA;AAAAA,SAAAA;AAAAA;AAAAA,KAAAA;;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;ACLb,QAAAprB,CAAAA,GAAA3jC,CAAAA,CAAA,EAAAA,CAAA;AAAA,QACAoC,CAAAA,GAAApC,CAAAA,CAAA,CAAAA,CADA;AAAA,QAEAkR,CAAAA,GAAAlR,CAAAA,CAAA,CAAAA,CAFA;AAAA,QAGAyvD,CAAAA,GAAAzvD,CAAAA,CAAA,CAAAA,CAHA;AAAA,QAOAgvD,CAAAA,GAAA,UAAAxyC,CAAA,EAAAA;AAAA,eAAAwyC,CAAA,GAAAA;AAAAA,eAAAA,SAAAA,CAAAA,IAAAA,CAAAA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,SAAAA,CAAAA,IAAAA,IAAAA;AAiGA;;AAAA,aAjG8BvyC,CAAAA,CAAAuyC,CAAAvyC,EAAAD,CAAAC,CAAAA,EACtBuyC,CAAAA,CAAAntD,SAAAmtD,CAAA5lC,GAAA4lC,GAAN,UAAU3lC,CAAV,EAAkD/mB,CAAlD,EAAkDA;AAAAA,eAAAA,CAAAA,CAAAA,IAAAA,EAAAA,KAAAA,CAAAA,EAAAA,KAAAA,CAAAA,EAAAA,YAAAA;AAAAA,cAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA;;AAAAA,iBAAAA,CAAAA,CAAAA,IAAAA,EAAAA,UAAAA,CAAAA,EAAAA;AAAAA,oBAAAA,CAAAA,CAAAA,KAAAA;AAAAA,mBAAAA,CAAAA;AAMhD,oBALMqK,CAAAA,GAAIrK,CAAAA,CAAO,CAAPA,CAAJqK,EACA0pC,CAAAA,GAAI/zC,CAAAA,CAAO,CAAPA,CADJqK,EAEApJ,CAAAA,GAAsB,MAAlBjB,CAAAA,CAAOI,MAAW,GAAIJ,CAAAA,CAAO,CAAPA,CAAJ,GAAW,KAAKkB,CAFtCmJ,EAK0B,MAA5B2E,KAAKtB,WAALsB,CAAiB5O,MAArB,EAEE,KADM4zC,CAAAA,GAAQh0C,CAAAA,CAAO,CAAPA,CAAAA,CAAUK,IAAlB2zC,EACGz2C,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAIy2C,CAAAA,CAAM5zC,MAA1B,EAA0BA,EAAU7C,CAApC,EACEyR,KAAKtB,WAALsB,CAAiBlE,IAAjBkE,CAAsBglC,CAAAA,CAAMz2C,CAANy2C,CAAtBhlC;AAA4BzR,uBAK1BmN,CAAAA,GAAakE,CAAAA,CAAAtB,YAAAsB,CAAaV,sBAAbU,CACfvE,CAAAA,CAAEhK,IADauO,EACPmlC,CAAAA,CAAE1zC,IADKuO,EACCI,KAAKnH,OADN+G,EACeI,KAAKnB,SADpBe,EAC+BI,KAAKtB,WADpCkB,EACiDI,KAAKrB,IADtDiB,EAC4DI,KAAKlB,OADjEc,CAAblE,EAEAJ,CAAAA,GAAI,IAAIxK,CAAAA,CAAAmD,MAAJ,CAAWyH,CAAX,EAAuBL,CAAAA,CAAEnH,IAAzB,CAFJwH,EAQa,OAHb2iD,CAAAA,GAkFV,UAA6BvX,CAA7B,EAAgD/Z,CAAhD,EAA+DuxB,CAA/D,EAAsFC,CAAtF,EAAsFA;AAMpF,sBAAkB,MAAdzX,CAAc,IAAe,MAAV/Z,CAAL,IAAsC,MAAlBuxB,CAApB,IAA2CC,CAAAA,IAAiB,CAA9E,EACE,OAAO,CAAP;AAKF,yBAAO5rD,IAAAA,CAAK8qB,GAAL9qB,CAAS2rD,CAAT3rD,EAAwB4rD,CAAAA,GAAgB,CAAxC5rD,CAAP;AA9FqB6rD,iBAkFvB,CAlF2CnjD,CAAAA,CAAEhK,IAAFgK,CAAO,CAAPA,CAkF3C,EAlFsD2E,KAAK+sB,KAkF3D,EAlFkEgY,CAAAA,CAAE1zC,IAAF0zC,CAAO,CAAPA,CAkFlE,EAlF6EoZ,CAAAA,CAAAlzC,WAAAkzC,CAAYM,YAkFzF,CA/EuB,IAAf,CAAA,CAAA,EAAA,CAAA,CAAe,IACjBN,CAAAA,CAAAlzC,WAAAkzC,CAAY/yC,WAAZ+yC,GAA0B5P,KAA1B4P,CACI,WADJA,EACiB,CAAC9iD,CAAAA,CAAE8G,SAAH,EAAc,YAAd,CADjBg8C,EAC8C,CAAC9iD,CAAAA,CAAEhK,IAAH,EAAS,UAAT,CAD9C8sD,EACoE,CAACpZ,CAAAA,CAAE5iC,SAAH,EAAc,YAAd,CADpEg8C,EAEI,CAACpZ,CAAAA,CAAE1zC,IAAH,EAAS,UAAT,CAFJ8sD,EAE0B,CAAC7iD,CAAAA,CAAE6G,SAAH,EAAc,YAAd,EAA4B,KAA5B,CAF1Bg8C,EAE8D,CAAC7iD,CAAAA,CAAEjK,IAAH,EAAS,UAAT,CAF9D8sD,EAGI,CAAClsD,CAAAA,GAAIA,CAAAA,CAAEkQ,SAANlQ,GAAkB,IAAnB,EAAyB,YAAzB,CAHJksD,EAG4C,CAACn+C,KAAKnB,SAAN,EAAiB,UAAjB,CAH5Cs/C,EAG0E,CAACn+C,KAAK+sB,KAAN,EAAa,OAAb,CAH1EoxB,EAII,CAACn+C,KAAKrB,IAAN,EAAY,UAAZ,CAJJw/C,EAI6B,CAACn+C,KAAKnH,OAAN,EAAe,UAAf,CAJ7BslD,GAKA,CAAA,CAAA,EAAO,CAAC7iD,CAAD,CAAP,CANiB,CAba/M;;AAmBtB+M,mBAAAA,CAAAA;AAwBR,qBAAA,CAlBMojD,CAAAA,GAAU3Z,CAAAA,CAAE1zC,IAAF0zC,CAAOhsC,KAAPgsC,CAAa,CAAbA,CAkBhB,EAjBQ,CAiBR,IAjBapyC,IAAAA,CAAKkC,KAALlC,CAAWoyC,CAAAA,CAAE1zC,IAAF0zC,CAAO,CAAPA,IAAYsZ,CAAvB1rD,CAiBb,EAhBMgsD,CAAAA,GAAUD,CAAAA,CAAQ,CAARA,CAAAA,GAAaA,CAAAA,CAAQ,CAARA,CAAbA,GAA0BA,CAAAA,CAAQ,CAARA,CAA1BA,GAAuCA,CAAAA,CAAQ,CAARA,CAgBvD,EAhB+D,CAEzDE,CAAAA,GAAa7Z,CAAAA,CAAE1zC,IAAF0zC,CAAOhsC,KAAPgsC,CAAa,CAAbA,CAF4C,EAGpD,CAHoD,IAG/CA,CAAAA,CAAE1zC,IAAF0zC,CAAO,CAAPA,IAAO,CAAMsZ,CAAAA,GAAa,CAAnB,IAAwBK,CAAAA,CAAQ,CAARA,CAa/C,EAXMG,CAAAA,GAAU,CAAC,CAAD,EAAIH,CAAAA,CAAQ,CAARA,CAAJ,EAAgBhjD,CAAAA,CAAW,CAAXA,CAAhB,EAA+BA,CAAAA,CAAW,CAAXA,CAA/B,CAWhB,EAVMojD,CAAAA,GAAUJ,CAAAA,CAAQ,CAARA,CAAAA,GAAahjD,CAAAA,CAAW,CAAXA,CAAbgjD,GAA6BhjD,CAAAA,CAAW,CAAXA,CAU7C,EARMqjD,CAAAA,GAAa,CAAC,CAAD,EAAIH,CAAAA,CAAW,CAAXA,CAAJ,EAAmBljD,CAAAA,CAAW,CAAXA,CAAnB,EAAkCA,CAAAA,CAAW,CAAXA,CAAlC,CAQnB,EANMsjD,CAAAA,GAAS,IAAIlsD,KAAJ,CAAwBurD,CAAxB,CAMf,EALMY,CAAAA,GAAS,IAAInsD,KAAJ,CAAwBurD,CAAxB,CAKf,EAJMa,CAAAA,GAAS,IAAIpsD,KAAJ,CAAwBurD,CAAxB,CAIf,EAHMc,CAAAA,GAAc,IAAIrsD,KAAJ,CAAoCurD,CAAAA,GAAa,CAAjD,CAGpB,EAAS9vD,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAI8vD,CAApB,EAAoBA,EAAc9vD,CAAlC,EACMA,CAAAA,KAAM8vD,CAAAA,GAAa,CAAnB9vD,IACFywD,CAAAA,CAAOzwD,CAAPywD,CAAAA,GAAYja,CAAAA,CAAE5iC,SAAF4iC,CAAYrmB,QAAZqmB,CAAqBx2C,CAAAA,GAAIowD,CAAzB5Z,EAAyB4Z,CAAUpwD,CAAAA,GAAI,CAAdowD,IAAmBA,CAA5C5Z,CAAZia,EACAC,CAAAA,CAAO1wD,CAAP0wD,CAAAA,GAAY3jD,CAAAA,CAAE6G,SAAF7G,CAAYojB,QAAZpjB,CAAqB/M,CAAAA,GAAIuwD,CAAzBxjD,EAAyBwjD,CAAUvwD,CAAAA,GAAI,CAAduwD,IAAmBA,CAA5CxjD,CADZ0jD,EAEI/sD,CAAAA,KACFitD,CAAAA,CAAO3wD,CAAP2wD,CAAAA,GAAYjtD,CAAAA,CAAEkQ,SAAFlQ,CAAYysB,QAAZzsB,CAAqB1D,CAAAA,GAAImwD,CAAAA,CAAQ,CAARA,CAAzBzsD,EAAiC,CAAK1D,CAAAA,GAAI,CAAT,IAAcmwD,CAAAA,CAAQ,CAARA,CAA/CzsD,CADVA,CAFJ+sD,EAKAG,CAAAA,CAAY5wD,CAAZ4wD,CAAAA,GAAiBhB,CAAAA,CAAAlzC,WAAAkzC,CAAY/yC,WAAZ+yC,GAA0B7yC,WAA1B6yC,CACb5vD,CADa4vD,EACV,WADUA,EACG,CAAC9iD,CAAAA,CAAE8G,SAAH,EAAc,YAAd,CADHg8C,EACgC,CAAC9iD,CAAAA,CAAEhK,IAAH,EAAS,UAAT,CADhC8sD,EACsD,CAACa,CAAAA,CAAOzwD,CAAPywD,CAAD,EAAY,YAAZ,CADtDb,EAEb,CAACO,CAAD,EAAU,UAAV,CAFaP,EAEU,CAACc,CAAAA,CAAO1wD,CAAP0wD,CAAD,EAAY,YAAZ,EAA0B,KAA1B,CAFVd,EAE4C,CAACU,CAAD,EAAU,UAAV,CAF5CV,EAGb,CAACe,CAAAA,CAAO9tD,MAAP8tD,GAAgB,CAAhBA,GAAoBA,CAAAA,CAAO3wD,CAAP2wD,CAApBA,GAAgC,IAAjC,EAAuC,YAAvC,CAHaf,EAGyC,CAACn+C,KAAKnB,SAAN,EAAiB,UAAjB,CAHzCs/C,EAGuE,CAACn+C,KAAK+sB,KAAN,EAAa,OAAb,CAHvEoxB,EAIb,CAACn+C,KAAKrB,IAAN,EAAY,UAAZ,CAJaw/C,EAIY,CAACn+C,KAAKnH,OAAN,EAAe,UAAf,CAJZslD,CANf5vD,KAYFywD,CAAAA,CAAOzwD,CAAPywD,CAAAA,GAAYja,CAAAA,CAAE5iC,SAAF4iC,CAAYrmB,QAAZqmB,CAAqBx2C,CAAAA,GAAIowD,CAAzB5Z,CAAZia,EACAC,CAAAA,CAAO1wD,CAAP0wD,CAAAA,GAAY3jD,CAAAA,CAAE6G,SAAF7G,CAAYojB,QAAZpjB,CAAqB/M,CAAAA,GAAIuwD,CAAzBxjD,CADZ0jD,EAEI/sD,CAAAA,KACFitD,CAAAA,CAAO3wD,CAAP2wD,CAAAA,GAAYjtD,CAAAA,CAAEkQ,SAAFlQ,CAAYysB,QAAZzsB,CAAqB1D,CAAAA,GAAImwD,CAAAA,CAAQ,CAARA,CAAzBzsD,CADVA,CAFJ+sD,EAKAb,CAAAA,CAAAlzC,WAAAkzC,CAAY/yC,WAAZ+yC,GAA0B5P,KAA1B4P,CACI,WADJA,EACiB,CAAC9iD,CAAAA,CAAE8G,SAAH,EAAc,YAAd,CADjBg8C,EAC8C,CAAC9iD,CAAAA,CAAEhK,IAAH,EAAS,UAAT,CAD9C8sD,EACoE,CAACa,CAAAA,CAAOzwD,CAAPywD,CAAD,EAAY,YAAZ,CADpEb,EAEI,CAACS,CAAD,EAAa,UAAb,CAFJT,EAE8B,CAACc,CAAAA,CAAO1wD,CAAP0wD,CAAD,EAAY,YAAZ,EAA0B,KAA1B,CAF9Bd,EAEgE,CAACY,CAAD,EAAa,UAAb,CAFhEZ,EAGI,CAACe,CAAAA,CAAO9tD,MAAP8tD,GAAgB,CAAhBA,GAAoBA,CAAAA,CAAO3wD,CAAP2wD,CAApBA,GAAgC,IAAjC,EAAuC,YAAvC,CAHJf,EAG0D,CAACn+C,KAAKnB,SAAN,EAAiB,UAAjB,CAH1Ds/C,EAGwF,CAACn+C,KAAK+sB,KAAN,EAAa,OAAb,CAHxFoxB,EAII,CAACn+C,KAAKrB,IAAN,EAAY,UAAZ,CAJJw/C,EAI6B,CAACn+C,KAAKnH,OAAN,EAAe,UAAf,CAJ7BslD,CAjBE5vD;;AAyBN,uBAAA,CAAA,CAAA,EAAM+Z,OAAAA,CAAQyC,GAARzC,CAAY62C,CAAZ72C,CAAN,CAAA;;AAAkB62C,mBAAAA,CAAAA;AAClB,uBADAnsD,CAAAA,CAAA6N,IAAA7N,IACA,CAAA,CAAA,EAAO,CAACsI,CAAD,CAAP,CAAA;AA/E8CtK;AA+EtCsK,WA/EsCtK,CAAAA;AA+EtCsK,SA/EsCtK,CAAAA;AA+EtCsK,OAhFgB6P,EAqF5BuyC,CAAAA,CAAAntD,SAAAmtD,CAAAtxB,eAAAsxB,GAAA,UAAgB1sD,CAAhB,EAAgBA;AAEd,eAAuB,cAAnBA,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IAAS,IAAgC,cAAnBlD,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IAAvB,KAID,MAAlBlD,CAAAA,CAAOI,MAAW,IAAwB,cAAnBJ,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IAJd,CAAvB;AAIqCA,OA3FXiX,EAiG9BuyC,CAAA;AAjGA,KAAA,CAA8BrrB,CAAAA,CAAAzF,IAA9B,CAPA;;AAOa1+B,IAAAA,CAAAA,CAAAwvD,QAAAxvD,GAAAwvD,CAAAxvD;AAAAwvD,G1GwEb,E0GxEaA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,QAAAA,CAAAA;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,SAAAA,KAAAA,CAAAA,GAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,CAAAA,CAAAA,GAAAA,MAAAA,CAAAA,cAAAA,IAAAA;AAAAA,QAAAA,SAAAA,EAAAA;AAAAA,mBAAAA,KAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,QAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA;AAAAA,OAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,IAAAA,CAAAA,IAAAA,CAAAA,EAAAA,CAAAA,CAAAA,cAAAA,CAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,OAAAA,EAAAA,CAAAA,EAAAA,CAAAA,CAAAA;AAAAA,KAAAA,EAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,eAAAA,CAAAA,GAAAA;AAAAA,aAAAA,WAAAA,GAAAA,CAAAA;AAAAA;;AAAAA,MAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,SAAAA,GAAAA,SAAAA,CAAAA,GAAAA,MAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA,CAAAA,SAAAA,EAAAA,IAAAA,CAAAA,EAAAA,CAAAA;AAAAA,KAAAA,CAAAA;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,MAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,UAAAA,CAAAA,GAAAA,cAAAA,OAAAA,MAAAA,IAAAA,CAAAA,CAAAA,MAAAA,CAAAA,QAAAA,CAAAA;AAAAA,UAAAA,CAAAA,CAAAA,EAAAA,OAAAA,CAAAA;AAAAA,UAAAA,CAAAA;AAAAA,UAAAA,CAAAA;AAAAA,UAAAA,CAAAA,GAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA;AAAAA,UAAAA,CAAAA,GAAAA,EAAAA;;AAAAA,UAAAA;AAAAA,eAAAA,CAAAA,KAAAA,CAAAA,KAAAA,CAAAA,IAAAA,CAAAA,KAAAA,CAAAA,KAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,IAAAA,EAAAA,EAAAA,IAAAA,GAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,KAAAA;AAAAA,OAAAA,CAAAA,OAAAA,CAAAA,EAAAA;AAAAA,QAAAA,CAAAA,GAAAA;AAAAA,UAAAA,KAAAA,EAAAA;AAAAA,SAAAA;AAAAA,OAAAA,SAAAA;AAAAA,YAAAA;AAAAA,UAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,IAAAA,KAAAA,CAAAA,GAAAA,CAAAA,CAAAA,MAAAA,KAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA;AAAAA,SAAAA,SAAAA;AAAAA,cAAAA,CAAAA,EAAAA,MAAAA,CAAAA,CAAAA,KAAAA;AAAAA;AAAAA;;AAAAA,aAAAA,CAAAA;AAAAA,KAAAA;;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;ACPb,QAAAjrB,CAAAA,GAAA/jC,CAAAA,CAAA,EAAAA,CAAA;AAAA,QACAoC,CAAAA,GAAApC,CAAAA,CAAA,CAAAA,CADA;AAAA,QAEAkR,CAAAA,GAAAlR,CAAAA,CAAA,CAAAA,CAFA;AAAA,QAGAyvD,CAAAA,GAAAzvD,CAAAA,CAAA,CAAAA,CAHA;AAAA,QAMAivD,CAAAA,GAAA,UAAAzyC,CAAA,EAAAA;AAAA,eAAAyyC,CAAA,GAAAA;AAAAA,eAAAA,SAAAA,CAAAA,IAAAA,CAAAA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,SAAAA,CAAAA,IAAAA,IAAAA;AAiCA;;AAAA,aAjC8BxyC,CAAAA,CAAAwyC,CAAAxyC,EAAAD,CAAAC,CAAAA,EAC5BwyC,CAAAA,CAAAptD,SAAAotD,CAAA7lC,GAAA6lC,GAAA,UAAI5lC,CAAJ,EAA4C/mB,CAA5C,EAA4CA;AAC1C,YAAM1C,CAAAA,GAAI0C,CAAAA,CAAO,CAAPA,CAAV;AAAA,YACMiB,CAAAA,GAAIjB,CAAAA,CAAO,CAAPA,CADV;AAAA,YAEMhC,CAAAA,GAAIgC,CAAAA,CAAO,CAAPA,CAFV;AAAA,YAIMgC,CAAAA,GAAAC,CAAAA,CAAA2M,CAAAA,CAAAjK,QAAAiK,CAAAhK,oBAAAgK,CAAAtR,CAAAA,CAAA+C,IAAAuO,EAAAI,KAAA+tB,MAAAnuB,EAAA3N,CAAAA,CAAAZ,IAAAuO,EAAAI,KAAAguB,MAAApuB,EAAA5Q,CAAAA,CAAAqC,IAAAuO,CAAA3M,EAAA,CAAAA,CAJN;AAAA,YAIOiD,CAAAA,GAAAlD,CAAAA,CAAA,CAAAA,CAJP;AAAA,YAIUoD,CAAAA,GAAApD,CAAAA,CAAA,CAAAA,CAJV;AAAA,YAKMsI,CAAAA,GAAI,IAAIxK,CAAAA,CAAAmD,MAAJ,CAAW,CAACiC,CAAD,EAAIE,CAAJ,CAAX,EAAmB9H,CAAAA,CAAE4F,IAArB,CALV;AAMA,YAAA,CAAK0L,CAAAA,CAAAzN,aAAAyN,CAAclM,IAAdkM,CAAmBtE,CAAnBsE,EAAsB5Q,CAAtB4Q,EAAyB,UAACtR,CAAD,EAAI2D,CAAJ,EAAIA;AAAM,iBAAA,CAAA;AAAA,SAAnC2N,EAAmC,CAAK,CAAxCA,CAAL,EACE,MAAM,IAAInK,KAAJ,CAAU,wEAAV,CAAN;AAQF,eANA0oD,CAAAA,CAAAlzC,WAAAkzC,CAAY/yC,WAAZ+yC,GAA0B5P,KAA1B4P,CACI,WADJA,EACiB,CAACn+C,KAAK+tB,MAAN,EAAc,MAAd,CADjBowB,EACwC,CAACn+C,KAAKguB,MAAN,EAAc,MAAd,CADxCmwB,EAC+D,CAACn+C,KAAK+tB,MAAL/tB,GAAc1R,CAAAA,CAAE+C,IAAF/C,CAAO,CAAPA,CAAd0R,GAA0B1R,CAAAA,CAAE+C,IAAF/C,CAAO,CAAPA,CAA3B,EAAsC,OAAtC,CAD/D6vD,EAEI,CAACn+C,KAAKguB,MAALhuB,GAAc/N,CAAAA,CAAEZ,IAAFY,CAAO,CAAPA,CAAd+N,GAA0B/N,CAAAA,CAAEZ,IAAFY,CAAO,CAAPA,CAA3B,EAAsC,OAAtC,CAFJksD,EAEoD,CAACn+C,KAAK+tB,MAAL/tB,GAAc1R,CAAAA,CAAE+C,IAAF/C,CAAO,CAAPA,CAAd0R,GAA0B1R,CAAAA,CAAE+C,IAAF/C,CAAO,CAAPA,CAA3B,EAAsC,OAAtC,CAFpD6vD,EAGI,CAACn+C,KAAK1D,KAAN,EAAa,SAAb,CAHJ6hD,EAG6B,CAAC7vD,CAAAA,CAAE6T,SAAH,EAAc,YAAd,CAH7Bg8C,EAG0D,CAAClsD,CAAAA,CAAEkQ,SAAH,EAAc,YAAd,CAH1Dg8C,EAGuF,CAACn+C,KAAKiuB,IAAN,EAAY,SAAZ,CAHvFkwB,EAII,CAAC7iD,CAAAA,CAAE6G,SAAH,EAAc,YAAd,EAA4B,OAA5B,CAJJg8C,GAMO,CAAC7iD,CAAD,CAAP;AAAQA,OAjBkB6P,EAqB5BwyC,CAAAA,CAAAptD,SAAAotD,CAAAvxB,eAAAuxB,GAAA,UAAgB3sD,CAAhB,EAAgBA;AAEd,eAAuB,cAAnBA,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IAAS,IAAgC,cAAnBlD,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IAAvB,IAAgE,cAAnBlD,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IAAvD,IAIlBlD,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IAAVlD,KAAmBA,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IAA7BlD,IAAuCA,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IAAVlD,KAAmBA,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IAJzE;AAIyEA,OA3B/CiX,EAiC9BwyC,CAAA;AAjCA,KAAA,CAA8BlrB,CAAAA,CAAA9D,IAA9B,CANA;;AAMazgC,IAAAA,CAAAA,CAAAyvD,QAAAzvD,GAAAyvD,CAAAzvD;AAAAyvD,G3GyEb,E2GzEaA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,QAAAA,CAAAA;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,SAAAA,KAAAA,CAAAA,GAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,CAAAA,CAAAA,GAAAA,MAAAA,CAAAA,cAAAA,IAAAA;AAAAA,QAAAA,SAAAA,EAAAA;AAAAA,mBAAAA,KAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,QAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA;AAAAA,OAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,IAAAA,CAAAA,IAAAA,CAAAA,EAAAA,CAAAA,CAAAA,cAAAA,CAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,OAAAA,EAAAA,CAAAA,EAAAA,CAAAA,CAAAA;AAAAA,KAAAA,EAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,eAAAA,CAAAA,GAAAA;AAAAA,aAAAA,WAAAA,GAAAA,CAAAA;AAAAA;;AAAAA,MAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,SAAAA,GAAAA,SAAAA,CAAAA,GAAAA,MAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA,CAAAA,SAAAA,EAAAA,IAAAA,CAAAA,EAAAA,CAAAA;AAAAA,KAAAA,CAAAA;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;ACNb,QAAAhrB,CAAAA,GAAAjkC,CAAAA,CAAA,EAAAA,CAAA;AAAA,QACAoC,CAAAA,GAAApC,CAAAA,CAAA,CAAAA,CADA;AAAA,QAEAyvD,CAAAA,GAAAzvD,CAAAA,CAAA,CAAAA,CAFA;AAAA,QAKAovD,CAAAA,GAAA,UAAA5yC,CAAA,EAAAA;AAAA,eAAA4yC,CAAA,GAAAA;AAAAA,eAAAA,SAAAA,CAAAA,IAAAA,CAAAA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,SAAAA,CAAAA,IAAAA,IAAAA;AA0CA;;AAAA,aA1C+C3yC,CAAAA,CAAA2yC,CAAA3yC,EAAAD,CAAAC,CAAAA,EAC7C2yC,CAAAA,CAAAvtD,SAAAutD,CAAAhmC,GAAAgmC,GAAA,UAAI/lC,CAAJ,EAA4C/mB,CAA5C,EAA4CA;AAO1C,aANA,IAAMqK,CAAAA,GAAIrK,CAAAA,CAAO,CAAPA,CAAV,EACMs7B,CAAAA,GAAQt7B,CAAAA,CAAO,CAAPA,CADd,EAEMiB,CAAAA,GAAIjB,CAAAA,CAAO,CAAPA,CAFV,EAKIyyC,CAAAA,GAAc,CALlB,EAMSl1C,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAI8M,CAAAA,CAAEhK,IAAFgK,CAAOjK,MAA3B,EAAmC7C,CAAAA,EAAnC,EACEk1C,CAAAA,IAAepoC,CAAAA,CAAEhK,IAAFgK,CAAO9M,CAAP8M,CAAfooC;;AAIF,YAAMnoC,CAAAA,GAAI,IAAIxK,CAAAA,CAAAmD,MAAJ,CAAWoH,CAAAA,CAAEhK,IAAb,EAAmBgK,CAAAA,CAAEnH,IAArB,CAAV;AAMA,eALAiqD,CAAAA,CAAAlzC,WAAAkzC,CAAY/yC,WAAZ+yC,GAA0B5P,KAA1B4P,CACI,6BADJA,EACmC,CAAC9iD,CAAAA,CAAE8G,SAAH,EAAc,YAAd,CADnCg8C,EACgE,CAAC7iD,CAAAA,CAAE6G,SAAH,EAAc,YAAd,EAA4B,KAA5B,CADhEg8C,EAEI,CAAC9iD,CAAAA,CAAEhK,IAAFgK,CAAO,CAAPA,CAAD,EAAY,OAAZ,CAFJ8iD,EAE0B,CAAC9iD,CAAAA,CAAEhK,IAAFgK,CAAO,CAAPA,CAAD,EAAY,OAAZ,CAF1B8iD,EAEgD,CAAC1a,CAAD,EAAc,OAAd,CAFhD0a,EAEwE,CAAC7xB,CAAAA,CAAMnqB,SAAP,EAAkB,YAAlB,CAFxEg8C,EAGI,CAAClsD,CAAAA,CAAEkQ,SAAH,EAAc,YAAd,CAHJg8C,EAGiC,CAACn+C,KAAK8rB,OAAN,EAAe,SAAf,CAHjCqyB,GAKO,CAAC7iD,CAAD,CAAP;AAAQA,OAnBmC6P,EAuB7C2yC,CAAAA,CAAAvtD,SAAAutD,CAAA1xB,eAAA0xB,GAAA,UAAgB9sD,CAAhB,EAAgBA;AACd,YAAMq7B,CAAAA,GAAIr7B,CAAAA,CAAO,CAAPA,CAAV;AAAA,YACMs7B,CAAAA,GAAQt7B,CAAAA,CAAO,CAAPA,CADd;AAAA,YAEMu7B,CAAAA,GAAIv7B,CAAAA,CAAO,CAAPA,CAFV;AAMA,eAAA,EAAIq7B,CAAAA,CAAEh7B,IAAFg7B,CAAOj7B,MAAPi7B,GAAgB,CAAhBA,IAA2C,MAAtBC,CAAAA,CAAMj7B,IAANi7B,CAAWl7B,MAAhCi7B,IAAkE,MAAlBE,CAAAA,CAAEl7B,IAAFk7B,CAAOn7B,MAA3D,KAGIk7B,CAAAA,CAAMj7B,IAANi7B,CAAW,CAAXA,MAAkBD,CAAAA,CAAEh7B,IAAFg7B,CAAO,CAAPA,CAAlBC,IAA+BC,CAAAA,CAAEl7B,IAAFk7B,CAAO,CAAPA,MAAcF,CAAAA,CAAEh7B,IAAFg7B,CAAO,CAAPA,CAA7CC,IAIW,cAAXD,CAAAA,CAAEn4B,IAAS,IAA4B,cAAfo4B,CAAAA,CAAMp4B,IAAnB,IAAoD,cAAXq4B,CAAAA,CAAEr4B,IAP1D;AAO0DA,OArCfiX,EA0C/C2yC,CAAA;AA1CA,KAAA,CAA+CnrB,CAAAA,CAAA2H,qBAA/C,CALA;;AAKapsC,IAAAA,CAAAA,CAAA4vD,yBAAA5vD,GAAA4vD,CAAA5vD;AAAA4vD,G5G0Eb,E4G1EaA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,QAAAA,CAAAA;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,SAAAA,KAAAA,CAAAA,GAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,CAAAA,CAAAA,GAAAA,MAAAA,CAAAA,cAAAA,IAAAA;AAAAA,QAAAA,SAAAA,EAAAA;AAAAA,mBAAAA,KAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,QAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA;AAAAA,OAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,IAAAA,CAAAA,IAAAA,CAAAA,EAAAA,CAAAA,CAAAA,cAAAA,CAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,OAAAA,EAAAA,CAAAA,EAAAA,CAAAA,CAAAA;AAAAA,KAAAA,EAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,eAAAA,CAAAA,GAAAA;AAAAA,aAAAA,WAAAA,GAAAA,CAAAA;AAAAA;;AAAAA,MAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,SAAAA,GAAAA,SAAAA,CAAAA,GAAAA,MAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA,CAAAA,SAAAA,EAAAA,IAAAA,CAAAA,EAAAA,CAAAA;AAAAA,KAAAA,CAAAA;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,MAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,UAAAA,CAAAA,GAAAA,cAAAA,OAAAA,MAAAA,IAAAA,CAAAA,CAAAA,MAAAA,CAAAA,QAAAA,CAAAA;AAAAA,UAAAA,CAAAA,CAAAA,EAAAA,OAAAA,CAAAA;AAAAA,UAAAA,CAAAA;AAAAA,UAAAA,CAAAA;AAAAA,UAAAA,CAAAA,GAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA;AAAAA,UAAAA,CAAAA,GAAAA,EAAAA;;AAAAA,UAAAA;AAAAA,eAAAA,CAAAA,KAAAA,CAAAA,KAAAA,CAAAA,IAAAA,CAAAA,KAAAA,CAAAA,KAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,IAAAA,EAAAA,EAAAA,IAAAA,GAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,KAAAA;AAAAA,OAAAA,CAAAA,OAAAA,CAAAA,EAAAA;AAAAA,QAAAA,CAAAA,GAAAA;AAAAA,UAAAA,KAAAA,EAAAA;AAAAA,SAAAA;AAAAA,OAAAA,SAAAA;AAAAA,YAAAA;AAAAA,UAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,IAAAA,KAAAA,CAAAA,GAAAA,CAAAA,CAAAA,MAAAA,KAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA;AAAAA,SAAAA,SAAAA;AAAAA,cAAAA,CAAAA,EAAAA,MAAAA,CAAAA,CAAAA,KAAAA;AAAAA;AAAAA;;AAAAA,aAAAA,CAAAA;AAAAA,KAAAA;;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;ACLb,QAAA7wB,CAAAA,GAAAv+B,CAAAA,CAAA,EAAAA,CAAA;AAAA,QACAoC,CAAAA,GAAApC,CAAAA,CAAA,CAAAA,CADA;AAAA,QAEAkR,CAAAA,GAAAlR,CAAAA,CAAA,CAAAA,CAFA;AAAA,QAGAyvD,CAAAA,GAAAzvD,CAAAA,CAAA,CAAAA,CAHA;AAAA,QAMAqvD,CAAAA,GAAA,UAAA7yC,CAAA,EAAAA;AAAA,eAAA6yC,CAAA,GAAAA;AAAAA,eAAAA,SAAAA,CAAAA,IAAAA,CAAAA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,SAAAA,CAAAA,IAAAA,IAAAA;AAmCA;;AAAA,aAnCgC5yC,CAAAA,CAAA4yC,CAAA5yC,EAAAD,CAAAC,CAAAA,EAC9B4yC,CAAAA,CAAAxtD,SAAAwtD,CAAAjmC,GAAAimC,GAAA,UAAIhmC,CAAJ,EAA4C/mB,CAA5C,EAA4CA;AACpC,YAAAgC,CAAAA,GAAAC,CAAAA,CAAA2M,CAAAA,CAAAtO,UAAAsO,CAAArO,qBAAAqO,CAAA5O,CAAAA,CAAA,CAAAA,CAAAA,CAAAK,IAAAuO,EAAA5O,CAAAA,CAAA,CAAAA,CAAAA,CAAAK,IAAAuO,CAAA3M,EAAA,CAAAA,CAAA;AAAA,YAACzB,CAAAA,GAAAwB,CAAAA,CAAA,CAAAA,CAAD;AAAA,YAAQvB,CAAAA,GAAAuB,CAAAA,CAAA,CAAAA,CAAR;AAAA,YACArB,CAAAA,GAAciO,CAAAA,CAAAzN,aAAAyN,CAAcxN,SAAdwN,CAAwBpO,CAAxBoO,EAA+BnO,CAA/BmO,EAA+BnO,CAAO,CAAtCmO,CADd;AAEN,YAAA,CAAKjO,CAAL,EAEE,MAAM,IAAI8D,KAAJ,CAAU,+CAAV,CAAN;AAGF,YAAM81C,CAAAA,GAAa3rC,CAAAA,CAAA9L,SAAA8L,CAAU5L,IAAV4L,CAAejO,CAAfiO,CAAnB;AAAA,YACMw/C,CAAAA,GAAa,IAAIp8C,YAAJ,CAAiBuoC,CAAjB,CADnB;AAEA4S,QAAAA,CAAAA,CAAAlzC,WAAAkzC,CAAY/yC,WAAZ+yC,GAA0B5P,KAA1B4P,CACI,aADJA,EACmB,CAACntD,CAAAA,CAAO,CAAPA,CAAAA,CAAUmR,SAAX,EAAsB,YAAtB,CADnBg8C,EACwD,CAACntD,CAAAA,CAAO,CAAPA,CAAAA,CAAUK,IAAX,EAAiB,UAAjB,CADxD8sD,EAEI,CAACntD,CAAAA,CAAO,CAAPA,CAAAA,CAAUK,IAAVL,CAAeI,MAAhB,EAAwB,OAAxB,CAFJ+sD,EAEsC,CAACntD,CAAAA,CAAO,CAAPA,CAAAA,CAAUmR,SAAX,EAAsB,YAAtB,CAFtCg8C,EAE2E,CAACntD,CAAAA,CAAO,CAAPA,CAAAA,CAAUK,IAAX,EAAiB,UAAjB,CAF3E8sD,EAGI,CAACntD,CAAAA,CAAO,CAAPA,CAAAA,CAAUK,IAAVL,CAAeI,MAAhB,EAAwB,OAAxB,CAHJ+sD,EAGsC,CAACiB,CAAD,EAAa,YAAb,EAA2B,KAA3B,CAHtCjB,EAGyE,CAACiB,CAAAA,CAAWhuD,MAAZ,EAAoB,OAApB,CAHzE+sD,EAII,CAACxsD,CAAD,EAAc,UAAd,CAJJwsD,EAI+B,CAACxsD,CAAAA,CAAYP,MAAb,EAAqB,OAArB,CAJ/B+sD,GAKAv+C,CAAAA,CAAAtO,UAAAsO,CAAWlO,sBAAXkO,CAAkCjO,CAAlCiO,EAA2D5O,CAAAA,CAAO,CAAPA,CAAAA,CAAUK,IAAVL,CAAeI,MAA1EwO,EAAkF5O,CAAAA,CAAO,CAAPA,CAAAA,CAAUK,IAAVL,CAAeI,MAAjGwO,CALAu+C;AAMA,YAAMjxC,CAAAA,GAAS,IAAIpc,CAAAA,CAAAmD,MAAJ,CAAWtC,CAAX,EAAwBX,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IAAlC,CAAf;AAEA,eADAgZ,CAAAA,CAAO/K,SAAP+K,CAAiB/Y,GAAjB+Y,CAAqBkyC,CAArBlyC,GACO,CAACA,CAAD,CAAP;AAAQA,OAnBoB/B,EAuB9B4yC,CAAAA,CAAAxtD,SAAAwtD,CAAA3xB,eAAA2xB,GAAA,UAAgB/sD,CAAhB,EAAgBA;AAEd,eAAuB,cAAnBA,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IAAS,IAAgC,cAAnBlD,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IAAvB,IAInBlD,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IAAVlD,KAAmBA,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IAJjC;AAIiCA,OA7BLiX,EAmChC4yC,CAAA;AAnCA,KAAA,CAAgC9wB,CAAAA,CAAAG,MAAhC,CANA;;AAMal/B,IAAAA,CAAAA,CAAA6vD,UAAA7vD,GAAA6vD,CAAA7vD;AAAA6vD,G7GyEb,E6GzEaA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,QAAAA,CAAAA;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,SAAAA,KAAAA,CAAAA,GAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,CAAAA,CAAAA,GAAAA,MAAAA,CAAAA,cAAAA,IAAAA;AAAAA,QAAAA,SAAAA,EAAAA;AAAAA,mBAAAA,KAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,QAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA;AAAAA,OAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,IAAAA,CAAAA,IAAAA,CAAAA,EAAAA,CAAAA,CAAAA,cAAAA,CAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,OAAAA,EAAAA,CAAAA,EAAAA,CAAAA,CAAAA;AAAAA,KAAAA,EAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,eAAAA,CAAAA,GAAAA;AAAAA,aAAAA,WAAAA,GAAAA,CAAAA;AAAAA;;AAAAA,MAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,SAAAA,GAAAA,SAAAA,CAAAA,GAAAA,MAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA,CAAAA,SAAAA,EAAAA,IAAAA,CAAAA,EAAAA,CAAAA;AAAAA,KAAAA,CAAAA;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,SAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,KAAAA,CAAAA,KAAAA,CAAAA,GAAAA,OAAAA,CAAAA,EAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,iBAAAA,CAAAA,CAAAA,CAAAA,EAAAA;AAAAA,cAAAA;AAAAA,YAAAA,CAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,WAAAA,CAAAA,OAAAA,CAAAA,EAAAA;AAAAA,YAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA;AAAAA;;AAAAA,iBAAAA,CAAAA,CAAAA,CAAAA,EAAAA;AAAAA,cAAAA;AAAAA,YAAAA,CAAAA,CAAAA,CAAAA,CAAAA,KAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,WAAAA,CAAAA,OAAAA,CAAAA,EAAAA;AAAAA,YAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA;AAAAA;;AAAAA,icAAAA,IAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,iBAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,SAAAA;AAAAA,QAAAA,IAAAA,EAAAA,EAAAA;AAAAA,QAAAA,GAAAA,EAAAA;AAAAA,OAAAA;AAAAA,aAAAA,CAAAA,GAAAA;AAAAA,QAAAA,IAAAA,EAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,QAAAA,KAAAA,EAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,QAAAA,MAAAA,EAAAA,CAAAA,CAAAA,CAAAA;AAAAA,OAAAA,EAAAA,cAAAA,OAAAA,MAAAA,KAAAA,CAAAA,CAAAA,MAAAA,CAAAA,QAAAA,CAAAA,GAAAA,YAAAA;AAAAA,eAAAA,IAAAA;AAAAA,OAAAA,CAAAA,EAAAA,CAAAA;;AAAAA,eAAAA,CAAAA,CAAAA,CAAAA,EAAAA;AAAAA,eAAAA,UAAAA,CAAAA,EAAAA;AAAAA,iBAAAA,UAAAA,CAAAA,EAAAA;AAAAA,gBAAAA,CAAAA,EAAAA,MAAAA,IAAAA,SAAAA,CAAAA,iCAAAA,CAAAA;;AAAAA,mBAAAA,CAAAA,GAAAA,IAAAA;AAAAA,kBAAAA,CAAAA,GAAAA,CAAAA,EAAAA,CAAAA,KAAAA,CAAAA,GAAAA,IAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,MAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,KAAAA,KAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,MAAAA,KAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,IAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAAA,IAAAA,EAAAA,OAAAA,CAAAA;;AAAAA,sBAAAA,CAAAA,GAAAA,CAAAA,EAAAA,CAAAA,KAAAA,CAAAA,GAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,KAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,qBAAAA,CAAAA;AAAAA,qBAAAA,CAAAA;AAAAA,kBAAAA,CAAAA,GAAAA,CAAAA;AAAAA;;AAAAA,qBAAAA,CAAAA;AAAAA,yBAAAA,CAAAA,CAAAA,KAAAA,IAAAA;AAAAA,oBAAAA,KAAAA,EAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,oBAAAA,IAAAA,EAAAA,CAAAA;AAAAA,mBAAAA;;AAAAA,qBAAAA,CAAAA;AAAAA,kBAAAA,CAAAA,CAAAA,KAAAA,IAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA;AAAAA;;AAAAA,qBAAAA,CAAAA;AAAAA,kBAAAA,CAAAA,GAAAA,CAAAA,CAAAA,GAAAA,CAAAA,GAAAA,EAAAA,EAAAA,CAAAA,CAAAA,IAAAA,CAAAA,GAAAA,EAAAA;AAAAA;;AAAAA;AAAAA,sBAAAA,EAAAA,CAAAA,GAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,IAAAA,EAAAA,MAAAA,GAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,CAAAA,MAAAA,GAAAA,CAAAA,CAAAA,MAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,IAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAAA;AAAAA,oBAAAA,CAAAA,GAAAA,CAAAA;AAAAA;AAAAA;;AAAAA,sBAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,KAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAAA;AAAAA,oBAAAA,CAAAA,CAAAA,KAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA;AAAAA;;AAAAA,sBAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,KAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAAA;AAAAA,oBAAAA,CAAAA,CAAAA,KAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,GAAAA,CAAAA;AAAAA;AAAAA;;AAAAA,sBAAAA,CAAAA,IAAAA,CAAAA,CAAAA,KAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAAA;AAAAA,oBAAAA,CAAAA,CAAAA,KAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,GAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA;AAAAA;AAAAA;;AAAAA,kBAAAA,CAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,GAAAA,CAAAA,GAAAA,EAAAA,EAAAA,CAAAA,CAAAA,IAAAA,CAAAA,GAAAA,EAAAA;AAAAA;AAAAA;;AAAAA,cAAAA,CAAAA,GAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA;AAAAA,aAAAA,CAAAA,OAAAA,CAAAA,EAAAA;AAAAA,cAAAA,CAAAA,GAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,EAAAA,CAAAA,GAAAA,CAAAA;AAAAA,aAAAA,SAAAA;AAAAA,cAAAA,CAAAA,GAAAA,CAAAA,GAAAA,CAAAA;AAAAA;;AAAAA,gBAAAA,IAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,mBAAAA;AAAAA,cAAAA,KAAAA,EAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,KAAAA,CAAAA;AAAAA,cAAAA,IAAAA,EAAAA,CAAAA;AAAAA,aAAAA;AAAAA,WAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,CAAAA;AAAAA,SAAAA;AAAAA;AAAAA,KAAAA;;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;ACNb,QAAAlrB,CAAAA,GAAAnkC,CAAAA,CAAA,EAAAA,CAAA;AAAA,QACAoC,CAAAA,GAAApC,CAAAA,CAAA,CAAAA,CADA;AAAA,QAEAkR,CAAAA,GAAAlR,CAAAA,CAAA,CAAAA,CAFA;AAAA,QAGAyvD,CAAAA,GAAAzvD,CAAAA,CAAA,CAAAA,CAHA;AAAA,QAOA6uD,CAAAA,GAAA,UAAAryC,CAAA,EAAAA;AAAA,eAAAqyC,CAAA,GAAAA;AAAAA,eAAAA,SAAAA,CAAAA,IAAAA,CAAAA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,SAAAA,CAAAA,IAAAA,IAAAA;AASA;;AAAA,aATqCpyC,CAAAA,CAAAoyC,CAAApyC,EAAAD,CAAAC,CAAAA,EAEnCoyC,CAAAA,CAAAhtD,SAAAgtD,CAAAnxB,eAAAmxB,GAAA,UAAgBvsD,CAAhB,EAAgBA;AACd,eAAOo7B,CAAAA,CAAgBp7B,CAAhBo7B,CAAP;AAAuBp7B,OAHUma,EAM7BoyC,CAAAA,CAAAhtD,SAAAgtD,CAAAzlC,GAAAylC,GAAN,UAAUxlC,CAAV,EAAkD/mB,CAAlD,EAAkDA;AAAAA,eAAAA,CAAAA,CAAAA,IAAAA,EAAAA,KAAAA,CAAAA,EAAAA,KAAAA,CAAAA,EAAAA,YAAAA;AAAAA,iBAAAA,CAAAA,CAAAA,IAAAA,EAAAA,UAAAA,CAAAA,EAAAA;AAChD,mBAAA,CAAA,CAAA,EAAO45C,CAAAA,CAAY55C,CAAAA,CAAO,CAAPA,CAAZ45C,EAAuB5qC,KAAKlB,OAA5B8rC,EAAqC5qC,KAAK8uB,eAA1C8b,EAA2D5qC,KAAKtB,WAAhEksC,EAA6E5qC,KAAKrB,IAAlFisC,EAAwF5qC,KAAKnH,OAA7F+xC,CAAP,CAAA;AAAoG/xC,WADpD7H,CAAAA;AACoD6H,SADpD7H,CAAAA;AACoD6H,OAPnEsS,EASrCoyC,CAAA;AATA,KAAA,CAAqC1qB,CAAAA,CAAAhE,WAArC,CAPA;;AAOa3gC,IAAAA,CAAAA,CAAAqvD,eAAArvD,GAAAqvD,CAAArvD;;AAWb,QAAA0vD,CAAAA,GAAA,UAAA1yC,CAAA,EAAAA;AAAA,eAAA0yC,CAAA,GAAAA;AAAAA,eAAAA,SAAAA,CAAAA,IAAAA,CAAAA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,SAAAA,CAAAA,IAAAA,IAAAA;AASA;;AAAA,aAT2CzyC,CAAAA,CAAAyyC,CAAAzyC,EAAAD,CAAAC,CAAAA,EAEzCyyC,CAAAA,CAAArtD,SAAAqtD,CAAAxxB,eAAAwxB,GAAA,UAAgB5sD,CAAhB,EAAgBA;AACd,eAAOo7B,CAAAA,CAAgBp7B,CAAhBo7B,CAAP;AAAuBp7B,OAHgBma,EAMnCyyC,CAAAA,CAAArtD,SAAAqtD,CAAA9lC,GAAA8lC,GAAN,UAAU7lC,CAAV,EAAkD/mB,CAAlD,EAAkDA;AAAAA,eAAAA,CAAAA,CAAAA,IAAAA,EAAAA,KAAAA,CAAAA,EAAAA,KAAAA,CAAAA,EAAAA,YAAAA;AAAAA,iBAAAA,CAAAA,CAAAA,IAAAA,EAAAA,UAAAA,CAAAA,EAAAA;AAChD,mBAAA,CAAA,CAAA,EAAO65C,CAAAA,CAAkB75C,CAAAA,CAAO,CAAPA,CAAlB65C,CAAP,CAAA;AAAgC,WADgB75C,CAAAA;AAChB,SADgBA,CAAAA;AAChB,OAPOma,EAS3CyyC,CAAA;AATA,KAAA,CAA2C/qB,CAAAA,CAAA7D,iBAA3C,CAAA;;AAAa9gC,IAAAA,CAAAA,CAAA0vD,qBAAA1vD,GAAA0vD,CAAA1vD;;AAWb,QAAA8vD,CAAAA,GAAA,UAAA9yC,CAAA,EAAAA;AAAA,eAAA8yC,CAAA,GAAAA;AAAAA,eAAAA,SAAAA,CAAAA,IAAAA,CAAAA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,SAAAA,CAAAA,IAAAA,IAAAA;AASA;;AAAA,aATiC7yC,CAAAA,CAAA6yC,CAAA7yC,EAAAD,CAAAC,CAAAA,EAE/B6yC,CAAAA,CAAAztD,SAAAytD,CAAA5xB,eAAA4xB,GAAA,UAAgBhtD,CAAhB,EAAgBA;AACd,eAAOo7B,CAAAA,CAAgBp7B,CAAhBo7B,CAAP;AAAuBp7B,OAHMma,EAMzB6yC,CAAAA,CAAAztD,SAAAytD,CAAAlmC,GAAAkmC,GAAN,UAAUjmC,CAAV,EAAkD/mB,CAAlD,EAAkDA;AAAAA,eAAAA,CAAAA,CAAAA,IAAAA,EAAAA,KAAAA,CAAAA,EAAAA,KAAAA,CAAAA,EAAAA,YAAAA;AAAAA,iBAAAA,CAAAA,CAAAA,IAAAA,EAAAA,UAAAA,CAAAA,EAAAA;AAChD,mBAAA,CAAA,CAAA,EAAO85C,CAAAA,CAAQ95C,CAAAA,CAAO,CAAPA,CAAR85C,EAAmB9qC,KAAKlB,OAAxBgsC,EAAiC9qC,KAAKtB,WAAtCosC,EAAmD9qC,KAAKrB,IAAxDmsC,EAA8D9qC,KAAKnH,OAAnEiyC,CAAP,CAAA;AAA0EjyC,WAD1B7H,CAAAA;AAC0B6H,SAD1B7H,CAAAA;AAC0B6H,OAP7CsS,EASjC6yC,CAAA;AATA,KAAA,CAAiCnrB,CAAAA,CAAA5D,OAAjC,CAAA;;AAAa/gC,IAAAA,CAAAA,CAAA8vD,WAAA9vD,GAAA8vD,CAAA9vD;;AAWb,QAAA2vD,CAAAA,GAAA,UAAA3yC,CAAA,EAAAA;AAAA,eAAA2yC,CAAA,GAAAA;AAAAA,eAAAA,SAAAA,CAAAA,IAAAA,CAAAA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,SAAAA,CAAAA,IAAAA,IAAAA;AASA;;AAAA,aATuC1yC,CAAAA,CAAA0yC,CAAA1yC,EAAAD,CAAAC,CAAAA,EAErC0yC,CAAAA,CAAAttD,SAAAstD,CAAAzxB,eAAAyxB,GAAA,UAAgB7sD,CAAhB,EAAgBA;AACd,eAAOo7B,CAAAA,CAAgBp7B,CAAhBo7B,CAAP;AAAuBp7B,OAHYma,EAM/B0yC,CAAAA,CAAAttD,SAAAstD,CAAA/lC,GAAA+lC,GAAN,UAAU9lC,CAAV,EAAkD/mB,CAAlD,EAAkDA;AAAAA,eAAAA,CAAAA,CAAAA,IAAAA,EAAAA,KAAAA,CAAAA,EAAAA,KAAAA,CAAAA,EAAAA,YAAAA;AAAAA,iBAAAA,CAAAA,CAAAA,IAAAA,EAAAA,UAAAA,CAAAA,EAAAA;AAChD,mBAAA,CAAA,CAAA,EAAO+5C,CAAAA,CAAc/5C,CAAAA,CAAO,CAAPA,CAAd+5C,CAAP,CAAA;AAA4B,WADoB/5C,CAAAA;AACpB,SADoBA,CAAAA;AACpB,OAPOma,EASvC0yC,CAAA;AATA,KAAA,CAAuChrB,CAAAA,CAAA1D,aAAvC,CAAA;;AAYA,aAAS/C,CAAT,CAAyBp7B,CAAzB,EAAyBA;AAEvB,aAAuB,cAAnBA,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IAAd;AAQF;;AAAA,aAAe02C,CAAf,CACI7sC,CADJ,EACmBe,CADnB,EACoCgwB,CADpC,EAC8DpwB,CAD9D,EACqFC,CADrF,EAEI9F,CAFJ,EAEIA;AAAAA,aAAAA,CAAAA,CAAAA,IAAAA,EAAAA,KAAAA,CAAAA,EAAAA,KAAAA,CAAAA,EAAAA,YAAAA;AAAAA,eAAAA,CAAAA,CAAAA,IAAAA,EAAAA,UAAAA,CAAAA,EAAAA;AACF,iBAAA,CAAA,CAAA,EAAO8V,CAAAA,CAAAA,CAAK,CAALA,EAAY,CAAZA,EAAe5Q,CAAf4Q,EAAsB7P,CAAtB6P,EAA+BmgB,CAA/BngB,EAAgDjQ,CAAhDiQ,EAA6DhQ,CAA7DgQ,EAAmE9V,CAAnE8V,CAAP,CAAA;AAA0E9V,SADxEA,CAAAA;AACwEA,OADxEA,CAAAA;AAIJ;;AAAA,aAAegyC,CAAf,CAAiC9sC,CAAjC,EAAiCA;AAAAA,aAAAA,CAAAA,CAAAA,IAAAA,EAAAA,KAAAA,CAAAA,EAAAA,KAAAA,CAAAA,EAAAA,YAAAA;AAAAA,eAAAA,CAAAA,CAAAA,IAAAA,EAAAA,UAAAA,CAAAA,EAAAA;AAC/B,iBAAA,CAAA,CAAA,EAAO4Q,CAAAA,CAAAA,CAAK,CAALA,EAAW,CAAXA,EAAc5Q,CAAd4Q,EAAqB,QAArBA,EAAqB,CAAU,CAA/BA,EAAsC,EAAtCA,EAA0C,EAA1CA,EAA8C,EAA9CA,CAAP,CAAA;AAAqD,SADtB5Q,CAAAA;AACsB,OADtBA,CAAAA;AAIjC;;AAAA,aAAe+sC,CAAf,CACI/sC,CADJ,EACmBe,CADnB,EACoCJ,CADpC,EAC2DC,CAD3D,EAC2E9F,CAD3E,EAC2EA;AAAAA,aAAAA,CAAAA,CAAAA,IAAAA,EAAAA,KAAAA,CAAAA,EAAAA,KAAAA,CAAAA,EAAAA,YAAAA;AAAAA,eAAAA,CAAAA,CAAAA,IAAAA,EAAAA,UAAAA,CAAAA,EAAAA;AACzE,iBAAA,CAAA,CAAA,EAAO8V,CAAAA,CAAAA,CAAK,CAALA,EAAY,CAAZA,EAAe5Q,CAAf4Q,EAAsB7P,CAAtB6P,EAAsB7P,CAAS,CAA/B6P,EAAsCjQ,CAAtCiQ,EAAmDhQ,CAAnDgQ,EAAyD9V,CAAzD8V,CAAP,CAAA;AAAgE9V,SADSA,CAAAA;AACTA,OADSA,CAAAA;AAI3E;;AAAA,aAAekyC,CAAf,CAA6BhtC,CAA7B,EAA6BA;AAAAA,aAAAA,CAAAA,CAAAA,IAAAA,EAAAA,KAAAA,CAAAA,EAAAA,KAAAA,CAAAA,EAAAA,YAAAA;AAAAA,eAAAA,CAAAA,CAAAA,IAAAA,EAAAA,UAAAA,CAAAA,EAAAA;AAC3B,iBAAA,CAAA,CAAA,EAAO4Q,CAAAA,CAAAA,CAAK,CAALA,EAAW,CAAXA,EAAc5Q,CAAd4Q,EAAqB,QAArBA,EAAqB,CAAU,CAA/BA,EAAsC,EAAtCA,EAA0C,EAA1CA,EAA8C,EAA9CA,CAAP,CAAA;AAAqD,SAD1B5Q,CAAAA;AAC0B,OAD1BA,CAAAA;AAkB7B;;AAAA,aAAe4Q,CAAf,CACInQ,CADJ,EAC+B6gD,CAD/B,EACiDthD,CADjD,EACgEe,CADhE,EACiFgwB,CADjF,EAEIpwB,CAFJ,EAE2BC,CAF3B,EAE2C9F,CAF3C,EAE2CA;AAAAA,aAAAA,CAAAA,CAAAA,IAAAA,EAAAA,KAAAA,CAAAA,EAAAA,KAAAA,CAAAA,EAAAA,YAAAA;AAAAA,YAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA;;AAAAA,eAAAA,CAAAA,CAAAA,IAAAA,EAAAA,UAAAA,CAAAA,EAAAA;AAAAA,kBAAAA,CAAAA,CAAAA,KAAAA;AAAAA,iBAAAA,CAAAA;AAGzC,sBADIymD,CAAAA,GAAW,EAAXA,EACID,CAAR;AACE,qBAAK,CAAL;AACEC,kBAAAA,CAAAA,GAAW,mBAAXA;AACA;;AACF,qBAAK,CAAL;AACEA,kBAAAA,CAAAA,GAAW,eAAXA;AACA;;AACF;AACE,wBAAM,IAAI7pD,KAAJ,CAAU,mBAAV,CAAN;AARJ;;AAQoB,qBAGpBmK,CAAAA,CAAAtB,YAAAsB,CAAarB,oBAAbqB,CAAkCpB,CAAlCoB,EAAoD7B,CAAAA,CAAM1M,IAA1DuO,EAAgElB,CAAhEkB,EAA6E/G,CAA7E+G,EAAsFjB,CAAtFiB,GAGMlE,CAAAA,GACFkE,CAAAA,CAAAtB,YAAAsB,CAAaZ,sBAAbY,CAAoCpB,CAApCoB,EAAsD7B,CAAAA,CAAM1M,IAA5DuO,EAAkE/G,CAAlE+G,EAA2ElB,CAA3EkB,EAAwFjB,CAAxFiB,EAA8Fd,CAA9Fc,CAJJA,EAOMtE,CAAAA,GAAI,IAAIxK,CAAAA,CAAAmD,MAAJ,CAAWyH,CAAX,EAAuBqC,CAAAA,CAAM7J,IAA7B,CAPV0L,EAamB,OAHby+C,CAAAA,GAyDR,UAA6BvX,CAA7B,EAAgDyY,CAAhD,EAAqEhB,CAArE,EAAqEA;AAKnE,oBAAkB,MAAdzX,CAAc,IAAqB,MAAhByY,CAAL,IAA0BhB,CAAAA,IAAiB,CAA7D,EACE,OAAO,CAAP;AAKF,uBAAO5rD,IAAAA,CAAK8qB,GAAL9qB,CAAS4sD,CAAT5sD,EAAsB4rD,CAAAA,GAAgB,CAAtC5rD,CAAP;AApEmB6rD,eAyDrB,CAzDyCzgD,CAAAA,CAAM1M,IAAN0M,CAAW,CAAXA,CAyDzC,EAzDwDA,CAAAA,CAAM1M,IAAN0M,CAAW,CAAXA,CAyDxD,EAzDuEogD,CAAAA,CAAAlzC,WAAAkzC,CAAYM,YAyDnF,CAtDqB,IAAf,CAAA,CAAA,EAAA,CAAA,CAAe,IACjBN,CAAAA,CAAAlzC,WAAAkzC,CAAY/yC,WAAZ+yC,GAA0B5P,KAA1B4P,CACImB,CADJnB,EACc,CAACz/C,CAAAA,CAAYtN,MAAb,EAAqB,OAArB,CADd+sD,EAC6C,CAAC3/C,CAAD,EAAmB,MAAnB,CAD7C2/C,EACyE,CAACpgD,CAAAA,CAAMoE,SAAP,EAAkB,YAAlB,CADzEg8C,EAEI,CAACpgD,CAAAA,CAAM1M,IAAP,EAAa,UAAb,CAFJ8sD,EAE8B,CAAC7iD,CAAAA,CAAE6G,SAAH,EAAc,YAAd,EAA4B,KAA5B,CAF9Bg8C,EAEkE,CAAC7iD,CAAAA,CAAEjK,IAAH,EAAS,UAAT,CAFlE8sD,EAEwF,CAACz/C,CAAD,EAAc,UAAd,CAFxFy/C,EAGI,CAACx/C,CAAD,EAAO,UAAP,CAHJw/C,EAGwB,CAACtlD,CAAD,EAAU,UAAV,CAHxBslD,EAG+C,CAACrvB,CAAD,EAAkB,MAAlB,CAH/CqvB,GAGiE,CAAA,CAAA,EAAA,CAAA,CAJhD,CAhBC;;AAoB+C,iBAAA,CAAA;AA0BjE,mBAAA,CApBMqB,CAAAA,GAAUzhD,CAAAA,CAAM1M,IAAN0M,CAAWhF,KAAXgF,CAAiB,CAAjBA,CAoBhB,EAnBQ,CAmBR,IAnBapL,IAAAA,CAAKkC,KAALlC,CAAWoL,CAAAA,CAAM1M,IAAN0M,CAAW,CAAXA,IAAgBsgD,CAA3B1rD,CAmBb,EAlBM8sD,CAAAA,GAAU7/C,CAAAA,CAAA9L,SAAA8L,CAAU5L,IAAV4L,CAAe4/C,CAAf5/C,CAkBhB,EAlB+B4/C,CAEzBE,CAAAA,GAAa3hD,CAAAA,CAAM1M,IAAN0M,CAAWhF,KAAXgF,CAAiB,CAAjBA,CAFYyhD,EAGpB,CAHoBA,IAGfzhD,CAAAA,CAAM1M,IAAN0M,CAAW,CAAXA,IAAW,CAAMsgD,CAAAA,GAAa,CAAnB,IAAwBmB,CAAAA,CAAQ,CAARA,CAenD,EAf2D,CAErDX,CAAAA,GAAUnjD,CAAAA,CAAW3C,KAAX2C,CAAiB,CAAjBA,CAF2C,EAGnD,CAHmD,IAG9C8jD,CAAAA,CAAQ,CAARA,CAYb,EAXMV,CAAAA,GAAUl/C,CAAAA,CAAA9L,SAAA8L,CAAU5L,IAAV4L,CAAei/C,CAAfj/C,CAWhB,EAX+Bi/C,CAEzBE,CAAAA,GAAarjD,CAAAA,CAAW3C,KAAX2C,CAAiB,CAAjBA,CAFYmjD,EAGpB,CAHoBA,IAGfa,CAAAA,CAAW,CAAXA,CAQhB,EANMP,CAAAA,GAAc,IAAIrsD,KAAJ,CAAoCurD,CAAAA,GAAa,CAAjD,CAMpB,EAJMhyB,CAAAA,GAAItuB,CAAAA,CAAMoE,SAIhB,EAHMu7B,CAAAA,GAAIpiC,CAAAA,CAAE6G,SAGZ,EAAS5T,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAI8vD,CAApB,EAAoBA,EAAc9vD,CAAlC,EACMA,CAAAA,KAAM8vD,CAAAA,GAAa,CAAnB9vD,GACF4wD,CAAAA,CAAY5wD,CAAZ4wD,CAAAA,GAAiBhB,CAAAA,CAAAlzC,WAAAkzC,CAAY/yC,WAAZ+yC,GAA0B7yC,WAA1B6yC,CACb5vD,CADa4vD,EACVmB,CADUnB,EACA,CAACz/C,CAAAA,CAAYtN,MAAb,EAAqB,OAArB,CADA+sD,EAC+B,CAAC3/C,CAAD,EAAmB,MAAnB,CAD/B2/C,EAEb,CAAC9xB,CAAAA,CAAE3N,QAAF2N,CAAW99B,CAAAA,GAAIkxD,CAAfpzB,EAAeozB,CAAUlxD,CAAAA,GAAI,CAAdkxD,IAAmBA,CAAlCpzB,CAAD,EAA6C,YAA7C,CAFa8xB,EAE+C,CAACqB,CAAD,EAAU,UAAV,CAF/CrB,EAGb,CAACzgB,CAAAA,CAAEhf,QAAFgf,CAAWnvC,CAAAA,GAAIuwD,CAAfphB,EAAeohB,CAAUvwD,CAAAA,GAAI,CAAduwD,IAAmBA,CAAlCphB,CAAD,EAA6C,YAA7C,EAA2D,KAA3D,CAHaygB,EAGsD,CAACU,CAAD,EAAU,UAAV,CAHtDV,EAIb,CAACz/C,CAAD,EAAc,UAAd,CAJay/C,EAIc,CAACx/C,CAAD,EAAO,UAAP,CAJdw/C,EAIkC,CAACtlD,CAAD,EAAU,UAAV,CAJlCslD,EAIyD,CAACrvB,CAAD,EAAkB,MAAlB,CAJzDqvB,CADf5vD,GAOF4vD,CAAAA,CAAAlzC,WAAAkzC,CAAY/yC,WAAZ+yC,GAA0B5P,KAA1B4P,CACImB,CADJnB,EACc,CAACz/C,CAAAA,CAAYtN,MAAb,EAAqB,OAArB,CADd+sD,EAC6C,CAAC3/C,CAAD,EAAmB,MAAnB,CAD7C2/C,EAEI,CAAC9xB,CAAAA,CAAE3N,QAAF2N,CAAE3N,CAAU2/B,CAAAA,GAAa,CAAvB3/B,IAA4B+gC,CAA9BpzB,CAAD,EAAyC,YAAzC,CAFJ8xB,EAE4D,CAACuB,CAAD,EAAa,UAAb,CAF5DvB,EAGI,CAACzgB,CAAAA,CAAEhf,QAAFgf,CAAEhf,CAAU2/B,CAAAA,GAAa,CAAvB3/B,IAA4BogC,CAA9BphB,CAAD,EAAyC,YAAzC,EAAuD,KAAvD,CAHJygB,EAGmE,CAACY,CAAD,EAAa,UAAb,CAHnEZ,EAII,CAACz/C,CAAD,EAAc,UAAd,CAJJy/C,EAI+B,CAACx/C,CAAD,EAAO,UAAP,CAJ/Bw/C,EAImD,CAACtlD,CAAD,EAAU,UAAV,CAJnDslD,EAI0E,CAACrvB,CAAD,EAAkB,MAAlB,CAJ1EqvB,CAPE5vD;;AAeN,qBAAA,CAAA,CAAA,EAAM+Z,OAAAA,CAAQyC,GAARzC,CAAY62C,CAAZ72C,CAAN,CAAA;;AAAkB62C,iBAAAA,CAAAA;AAAlBnsD,cAAAA,CAAAA,CAAA6N,IAAA7N,IAAA6N,CAAAA,CAAAA,KAAAA,GAAAA,CAAA7N;;AAAA6N,iBAAAA,CAAAA;AAGF,qBAAA,CAAA,CAAA,EAAO,CAACvF,CAAD,CAAP,CAAA;AA5EyCzC;AA4EjCyC,SA5EiCzC,CAAAA;AA4EjCyC,OA5EiCzC,CAAAA;AAzD9B3K;;AAAAA,IAAAA,CAAAA,CAAA2vD,iBAAA3vD,GAAA2vD,CAAA3vD;AAAA2vD,G9GuCb,E8GvCaA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,QAAAA,CAAAA;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,SAAAA,KAAAA,CAAAA,GAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,CAAAA,CAAAA,GAAAA,MAAAA,CAAAA,cAAAA,IAAAA;AAAAA,QAAAA,SAAAA,EAAAA;AAAAA,mBAAAA,KAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,QAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA;AAAAA,OAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,IAAAA,CAAAA,IAAAA,CAAAA,EAAAA,CAAAA,CAAAA,cAAAA,CAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,OAAAA,EAAAA,CAAAA,EAAAA,CAAAA,CAAAA;AAAAA,KAAAA,EAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,eAAAA,CAAAA,GAAAA;AAAAA,aAAAA,WAAAA,GAAAA,CAAAA;AAAAA;;AAAAA,MAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,SAAAA,GAAAA,SAAAA,CAAAA,GAAAA,MAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA,CAAAA,SAAAA,EAAAA,IAAAA,CAAAA,EAAAA,CAAAA;AAAAA,KAAAA,CAAAA;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;ACxCb,QAAA7qB,CAAAA,GAAAtkC,CAAAA,CAAA,EAAAA,CAAA;AAAA,QACAoC,CAAAA,GAAApC,CAAAA,CAAA,CAAAA,CADA;AAAA,QAEAkR,CAAAA,GAAAlR,CAAAA,CAAA,CAAAA,CAFA;AAAA,QAGAyvD,CAAAA,GAAAzvD,CAAAA,CAAA,CAAAA,CAHA;AAAA,QAMAuvD,CAAAA,GAAA,UAAA/yC,CAAA,EAAAA;AAAA,eAAA+yC,CAAA,GAAAA;AAAAA,eAAAA,SAAAA,CAAAA,IAAAA,CAAAA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,SAAAA,CAAAA,IAAAA,IAAAA;AAsBA;;AAAA,aAtBiC9yC,CAAAA,CAAA8yC,CAAA9yC,EAAAD,CAAAC,CAAAA,EAC/B8yC,CAAAA,CAAA1tD,SAAA0tD,CAAAnmC,GAAAmmC,GAAA,UAAIlmC,CAAJ,EAA4C/mB,CAA5C,EAA4CA;AAC1C,YAAMqK,CAAAA,GAAIrK,CAAAA,CAAO,CAAPA,CAAV;AAAA,YACMy7C,CAAAA,GAAgB7sC,CAAAA,CAAA9L,SAAA8L,CAAUxG,SAAVwG,CAAoBI,KAAKzH,IAAzBqH,EAA+BvE,CAAAA,CAAEhK,IAAFgK,CAAOjK,MAAtCwO,CADtB;AAAA,YAEMxJ,CAAAA,GAAIwJ,CAAAA,CAAA9L,SAAA8L,CAAUpH,eAAVoH,CAA0BvE,CAAAA,CAAEhK,IAA5BuO,EAAkC6sC,CAAlC7sC,CAFV;AAAA,YAGM8sC,CAAAA,GAAI9sC,CAAAA,CAAA9L,SAAA8L,CAAUtH,iBAAVsH,CAA4BvE,CAAAA,CAAEhK,IAA9BuO,EAAoC6sC,CAApC7sC,CAHV;AAAA,YAIMtE,CAAAA,GAAI,IAAIxK,CAAAA,CAAAmD,MAAJ,CAAWoH,CAAAA,CAAEhK,IAAb,EAAmBgK,CAAAA,CAAEnH,IAArB,CAJV;AAQA,eAHAiqD,CAAAA,CAAAlzC,WAAAkzC,CAAY/yC,WAAZ+yC,GAA0B5P,KAA1B4P,CACI,cADJA,EACoB,CAAC9iD,CAAAA,CAAE8G,SAAH,EAAc,YAAd,CADpBg8C,EACiD,CAAC7iD,CAAAA,CAAE6G,SAAH,EAAc,YAAd,EAA4B,KAA5B,CADjDg8C,EACqF,CAAC/nD,CAAD,EAAI,OAAJ,CADrF+nD,EACmG,CAACzR,CAAD,EAAI,OAAJ,CADnGyR,GAGO,CAAC7iD,CAAD,CAAP;AAAQA,OAVqB6P,EAc/B8yC,CAAAA,CAAA1tD,SAAA0tD,CAAA7xB,eAAA6xB,GAAA,UAAgBjtD,CAAhB,EAAgBA;AAEd,eAAuB,cAAnBA,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IAAd;AAAcA,OAhBeiX,EAsBjC8yC,CAAA;AAtBA,KAAA,CAAiCjrB,CAAAA,CAAA5D,OAAjC,CANA;;AAMalhC,IAAAA,CAAAA,CAAA+vD,WAAA/vD,GAAA+vD,CAAA/vD;AAAA+vD,G/GyEb,E+GzEaA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,QAAAA,CAAAA;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,SAAAA,KAAAA,CAAAA,GAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,CAAAA,CAAAA,GAAAA,MAAAA,CAAAA,cAAAA,IAAAA;AAAAA,QAAAA,SAAAA,EAAAA;AAAAA,mBAAAA,KAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,QAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA;AAAAA,OAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,IAAAA,CAAAA,IAAAA,CAAAA,EAAAA,CAAAA,CAAAA,cAAAA,CAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,OAAAA,EAAAA,CAAAA,EAAAA,CAAAA,CAAAA;AAAAA,KAAAA,EAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,eAAAA,CAAAA,GAAAA;AAAAA,aAAAA,WAAAA,GAAAA,CAAAA;AAAAA;;AAAAA,MAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,SAAAA,GAAAA,SAAAA,CAAAA,GAAAA,MAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA,CAAAA,SAAAA,EAAAA,IAAAA,CAAAA,EAAAA,CAAAA;AAAAA,KAAAA,CAAAA;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,MAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,UAAAA,CAAAA,GAAAA,cAAAA,OAAAA,MAAAA,IAAAA,CAAAA,CAAAA,MAAAA,CAAAA,QAAAA,CAAAA;AAAAA,UAAAA,CAAAA,CAAAA,EAAAA,OAAAA,CAAAA;AAAAA,UAAAA,CAAAA;AAAAA,UAAAA,CAAAA;AAAAA,UAAAA,CAAAA,GAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA;AAAAA,UAAAA,CAAAA,GAAAA,EAAAA;;AAAAA,UAAAA;AAAAA,eAAAA,CAAAA,KAAAA,CAAAA,KAAAA,CAAAA,IAAAA,CAAAA,KAAAA,CAAAA,KAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,IAAAA,EAAAA,EAAAA,IAAAA,GAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,KAAAA;AAAAA,OAAAA,CAAAA,OAAAA,CAAAA,EAAAA;AAAAA,QAAAA,CAAAA,GAAAA;AAAAA,UAAAA,KAAAA,EAAAA;AAAAA,SAAAA;AAAAA,OAAAA,SAAAA;AAAAA,YAAAA;AAAAA,UAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,IAAAA,KAAAA,CAAAA,GAAAA,CAAAA,CAAAA,MAAAA,KAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA;AAAAA,SAAAA,SAAAA;AAAAA,cAAAA,CAAAA,EAAAA,MAAAA,CAAAA,CAAAA,KAAAA;AAAAA;AAAAA;;AAAAA,aAAAA,CAAAA;AAAAA,KAAAA;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,QAAAA,IAAAA,YAAAA;AAAAA,WAAAA,IAAAA,CAAAA,GAAAA,EAAAA,EAAAA,CAAAA,GAAAA,CAAAA,EAAAA,CAAAA,GAAAA,SAAAA,CAAAA,MAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,GAAAA,CAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,SAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA;;AAAAA,aAAAA,CAAAA;AAAAA,KAAAA;;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;ACNb,QAAA/qB,CAAAA,GAAAxkC,CAAAA,CAAA,EAAAA,CAAA;AAAA,QACAoC,CAAAA,GAAApC,CAAAA,CAAA,CAAAA,CADA;AAAA,QAEAyvD,CAAAA,GAAAzvD,CAAAA,CAAA,CAAAA,CAFA;AAAA,QAKAwvD,CAAAA,GAAA,UAAAhzC,CAAA,EAAAA;AAAA,eAAAgzC,CAAA,GAAAA;AAAAA,eAAAA,SAAAA,CAAAA,IAAAA,CAAAA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,SAAAA,CAAAA,IAAAA,IAAAA;AA4BA;;AAAA,aA5B6B/yC,CAAAA,CAAA+yC,CAAA/yC,EAAAD,CAAAC,CAAAA,EAC3B+yC,CAAAA,CAAA3tD,SAAA2tD,CAAApmC,GAAAomC,GAAA,UAAInmC,CAAJ,EAA4C/mB,CAA5C,EAA4CA;AAI1C,aAAA,IAAA,CAAA,EAHMsK,CAAAA,GAAI,IAAIxK,CAAAA,CAAAmD,MAAJ,CAAWjD,CAAAA,CAAO,CAAPA,CAAAA,CAAUK,IAArB,EAA2BL,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IAArC,CAGV,EAFMF,CAAAA,GAAOhD,CAAAA,CAAO,CAAPA,CAAAA,CAAUmR,SAAVnR,CAAoBI,MAEjC,EADM2M,CAAAA,GAAQ,IAAIjL,KAAJ,CAA4B9B,CAAAA,CAAOI,MAAnC,CACd,EAAS7C,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAIyC,CAAAA,CAAOI,MAA3B,EAAmC7C,CAAAA,EAAnC,EACEwP,CAAAA,CAAMxP,CAANwP,CAAAA,GAAW,CAAC/M,CAAAA,CAAOzC,CAAPyC,CAAAA,CAAUmR,SAAX,EAAsB,YAAtB,CAAXpE;;AAKF,eAAA,CAHA/K,CAAAA,GAAAmrD,CAAAA,CAAAlzC,WAAAkzC,CAAY/yC,WAAZ+yC,EAGA,EAH0B5P,KAG1B,CAH+BnwB,KAG/B,CAH+BprB,CAG/B,EAH+BwoC,CAAAA,CAAA,CAC3B,UAD2B,EACf,CAACxqC,CAAAA,CAAOI,MAAR,EAAgB,OAAhB,CADe,EACW,CAAC4C,CAAD,EAAO,OAAP,CADX,EAC4B,CAACsH,CAAAA,CAAE6G,SAAH,EAAc,YAAd,EAA4B,OAA5B,CAD5B,CAAAq5B,EACqEz9B,CADrEy9B,CAG/B,GAAO,CAAClgC,CAAD,CAAP;AAAQA,OAXiB6P,EAe3B+yC,CAAAA,CAAA3tD,SAAA2tD,CAAA9xB,eAAA8xB,GAAA,UAAgBltD,CAAhB,EAAgBA;AAEd,YAAuB,cAAnBA,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IAAd,EACE,OAAA,CAAO,CAAP;;AAEF,aAAK,IAAI3F,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAIyC,CAAAA,CAAOI,MAA3B,EAAmC7C,CAAAA,EAAnC,EACE,IAAIyC,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IAAVlD,KAAmBA,CAAAA,CAAOzC,CAAPyC,CAAAA,CAAUkD,IAAjC,EACE,OAAA,CAAO,CAAP;;AAIJ,eAAA,CAAO,CAAP;AAAO,OA1BkBiX,EA4B7B+yC,CAAA;AA5BA,KAAA,CAA6BhrB,CAAAA,CAAA7D,GAA7B,CALA;;AAKanhC,IAAAA,CAAAA,CAAAgwD,OAAAhwD,GAAAgwD,CAAAhwD;AAAAgwD,GhH0Eb,EgH1EaA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;ACHb,QAAA90C,CAAAA,GAAA1a,CAAAA,CAAA,CAAAA,CAAA;AAAA,QAGAmuC,CAAAA,GAAAnuC,CAAAA,CAAA,GAAAA,CAHA;AAAA,QAKAixD,CAAAA,GAAAjxD,CAAAA,CAAA,GAAAA,CALA;AAAA,QAcAguC,CAAAA,GAAA,YAAA;AAAA,eAAAA,CAAA,GAAAA,CA6BA;;AAAA,aAtBEA,CAAAA,CAAAnsC,SAAAmsC,CAAA9Q,UAAA8Q,GAAA,YAAA;AACE,YAAA;AASE,iBARA18B,KAAKkM,SAALlM,GAAiB2/C,CAAAA,CAAAC,kBAAAD,CAAmB3/C,KAAK6/C,SAAxBF,CAAjB3/C,EACuC,YAAA,OAA5BA,KAAK8/C,kBAAuB,KACrC9/C,KAAK8/C,kBAAL9/C,GAA0B,EADW,CADvCA,EAIqC,YAAA,OAA1BA,KAAK+/C,gBAAqB,KACnC//C,KAAK+/C,gBAAL//C,GAAwB,MADW,CAJrCA,EAOAoJ,CAAAA,CAAAxC,MAAAwC,CAAO9D,OAAP8D,CAAe,cAAfA,EAA+B,2BAAA,OAAgCpJ,KAAKkM,SAApE9C,CAPApJ,EAOoEkM,CAC7D,CAAP;AACA,SAVF,CAUE,OAAOtD,CAAP,EAAOA;AAEP,iBADAQ,CAAAA,CAAAxC,MAAAwC,CAAO5D,OAAP4D,CAAe,cAAfA,EAA+B,wCAAsCR,CAArEQ,GAAqER,CAC9D,CAAP;AAAO;AAAA,OAbX8zB,EAgBAA,CAAAA,CAAAnsC,SAAAmsC,CAAAI,oBAAAJ,GAAA,UAAqBrwB,CAArB,EAAqBA;AACnB,eAAO,IAAIwwB,CAAAA,CAAAmjB,mBAAJ,CAAwBhgD,IAAxB,EAA8BqM,CAA9B,CAAP;AAAqCA,OAjBvCqwB,EAmBAA,CAAAA,CAAAnsC,SAAAmsC,CAAAM,OAAAN,GAAA,YAAA;AACE18B,aAAKkM,SAALlM,CAAeg9B,OAAfh9B;AAAeg9B,OApBjBN,EAsBFA,CAAA;AA7BA,KAAA,EAdA;;AAcaxuC,IAAAA,CAAAA,CAAAwuC,YAAAxuC,GAAAwuC,CAAAxuC;AAAAwuC,GjH+Db,EiH/DaA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;ACdb,QAAAtzB,CAAAA,GAAA1a,CAAAA,CAAA,CAAAA,CAAA;AAAA,QAEAuuC,CAAAA,GAAAvuC,CAAAA,CAAA,EAAAA,CAFA;AAAA,QAOAwuC,CAAAA,GAAAxuC,CAAAA,CAAA,GAAAA,CAPA;AAAA,QAQAyuC,CAAAA,GAAAzuC,CAAAA,CAAA,GAAAA,CARA;AAAA,QASAuxD,CAAAA,GAAAvxD,CAAAA,CAAA,GAAAA,CATA;AAAA,QAUAwxD,CAAAA,GAAAxxD,CAAAA,CAAA,GAAAA,CAVA;AAAA,QAWAyxD,CAAAA,GAAAzxD,CAAAA,CAAA,GAAAA,CAXA;AAAA,QAcAsxD,CAAAA,GAAA,YAAA;AAOE,eAAAA,CAAA,CAA4BnuB,CAA5B,EAAmExlB,CAAnE,EAAmEA;AAAvCrM,aAAA6xB,OAAA7xB,GAAA6xB,CAAA7xB,EAAuCA,KAAAqM,OAAArM,GAAAqM,CAAvCrM,EAC1BA,KAAKogD,cAALpgD,GAAsB,IAAIigD,CAAAA,CAAAI,cAAJ,CAAmBrgD,KAAKqM,OAALrM,CAAas9B,QAAhC,EAA0CzL,CAAAA,CAAQ3lB,SAAlD,CADIlM,EAE1BA,KAAKsgD,cAALtgD,GAAsB,IAAIkgD,CAAAA,CAAAK,8BAAJ,CAAmC1uB,CAAAA,CAAQ3lB,SAAR2lB,CAAkB2uB,cAArD,CAFIxgD,EAG1BA,KAAKygD,cAALzgD,GAAsB,IAAImgD,CAAAA,CAAAO,cAAJ,CAClB7uB,CAAAA,CAAQ3lB,SADU,EACClM,KAAKsgD,cADN,EACsBtgD,KAAKqM,OAALrM,CAAas9B,QADnC,EAElB;AAACqjB,UAAAA,aAAAA,EAA4C,WAA7B9uB,CAAAA,CAAQkuB;AAAxB,SAFkB,CAHI//C,EAM1BA,KAAK4gD,gBAAL5gD,GAAwB,IAAI6gD,GAAJ,EANE7gD;AAqC9B;;AAAA,aA5BEggD,CAAAA,CAAAzvD,SAAAyvD,CAAA5iB,sBAAA4iB,GAAA,YAAA;AACE,eAAO,IAAI9iB,CAAAA,CAAA4jB,qBAAJ,CAA0B9gD,IAA1B,CAAP;AAAiCA,OADnCggD,EAGAA,CAAAA,CAAAzvD,SAAAyvD,CAAAe,kBAAAf,GAAA,UAAmB3pC,CAAnB,EAAmBA;AACjB,YAAM2qC,CAAAA,GAAe3qC,CAAAA,CAAM4qC,SAAN5qC,GAAkBhY,MAAlBgY,CAAyB,UAAAlc,CAAA,EAAAA;AAAK,iBAAA,CAAY,CAAZ,KAAAA,CAAAA,CAAEkH,IAAF,IAAiBlH,CAAAA,CAAE2e,MAAnB;AAAmBA,SAAjDzC,EAAyD5e,GAAzD4e,CAA6D,UAAAlc,CAAA,EAAAA;AAAK,iBAAAA,CAAAA,CAAE2e,MAAF3e,CAAU2D,MAAV;AAAUA,SAA5EuY,CAArB;AACArW,aAAKghD,YAALhhD,GAAoB,IAAIgN,GAAJ,CAAQg0C,CAAR,CAApBhhD;AAA4BghD,OAL9BhB,EAOAA,CAAAA,CAAAzvD,SAAAyvD,CAAAkB,aAAAlB,GAAA,UAAcmB,CAAd,EAAcA;AACZ,eAAA,CAAA,CAAOnhD,KAAKghD,YAAZ,IAA2BhhD,KAAKghD,YAALhhD,CAAkBsN,GAAlBtN,CAAsBmhD,CAAtBnhD,CAA3B;AAAiDmhD,OARnDnB,EAUAA,CAAAA,CAAAzvD,SAAAyvD,CAAAoB,cAAApB,GAAA,UAAemB,CAAf,EAAeA;AACb,eAAOnhD,KAAK4gD,gBAAL5gD,CAAsBxQ,GAAtBwQ,CAA0BmhD,CAA1BnhD,CAAP;AAAiCmhD,OAXnCnB,EAaAA,CAAAA,CAAAzvD,SAAAyvD,CAAAqB,cAAArB,GAAA,UAAemB,CAAf,EAAoCG,CAApC,EAAoCA;AAClCl4C,QAAAA,CAAAA,CAAAxC,MAAAwC,CAAO9D,OAAP8D,CAAe,qBAAfA,EAAsC,+BAAtCA,GACApJ,KAAK4gD,gBAAL5gD,CAAsB7L,GAAtB6L,CAA0BmhD,CAA1BnhD,EAAoCshD,CAApCthD,CADAoJ;AACoCk4C,OAftCtB,EAiBAA,CAAAA,CAAAzvD,SAAAyvD,CAAAhjB,OAAAgjB,GAAA,YAAA;AAAA,YAAAt3C,CAAAA,GAAA1I,IAAA;AACEA,aAAKogD,cAALpgD,CAAoBg9B,OAApBh9B,IACAA,KAAKygD,cAALzgD,CAAoBuhD,mBAApBvhD,EADAA,EAEAA,KAAK4gD,gBAAL5gD,CAAsB1C,OAAtB0C,CAA8B,UAAAwhD,CAAA,EAAAA;AAAM,iBAAA94C,CAAAA,CAAK+3C,cAAL/3C,CAAoB+4C,cAApB/4C,CAAmC84C,CAAnC94C,EAAmC84C,CAAI,CAAvC94C,CAAA;AAAuC,SAA3E1I,CAFAA,EAGAA,KAAK4gD,gBAAL5gD,GAAwB,IAAI6gD,GAAJ,EAHxB7gD;AAG4B6gD,OArB9Bb,EAuBAA,CAAAA,CAAAzvD,SAAAyvD,CAAAz3C,OAAAy3C,GAAA,UAAQrzC,CAAR,EAA0B4M,CAA1B,EAA0BA;AACxB,YAAM5lB,CAAAA,GAAKspC,CAAAA,CAAA3jB,eAAA2jB,CAAgBtwB,CAAhBswB,EAAsB1jB,CAAtB0jB,EAA8BE,CAAAA,CAAAukB,sBAA9BzkB,CAAX;AAEA,eADAtpC,CAAAA,CAAGi4B,UAAHj4B,CAAcgZ,CAAAA,CAAKkf,UAAnBl4B,GACOA,CAAP;AAAOA,OA1BTqsD,EA4BFA,CAAA;AA5CA,KAAA,EAdA;;AAca9xD,IAAAA,CAAAA,CAAA8xD,mBAAA9xD,GAAA8xD,CAAA9xD;AAAA8xD,GlH+Db,EkH/DaA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,QAAAA,IAAAA,YAAAA;AAAAA,aAAAA,CAAAA,CAAAA,GAAAA,MAAAA,CAAAA,MAAAA,IAAAA,UAAAA,CAAAA,EAAAA;AAAAA,aAAAA,IAAAA,CAAAA,EAAAA,CAAAA,GAAAA,CAAAA,EAAAA,CAAAA,GAAAA,SAAAA,CAAAA,MAAAA,EAAAA,CAAAA,GAAAA,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,KAAAA,IAAAA,CAAAA,IAAAA,CAAAA,GAAAA,SAAAA,CAAAA,CAAAA,CAAAA,EAAAA,MAAAA,CAAAA,SAAAA,CAAAA,cAAAA,CAAAA,IAAAA,CAAAA,CAAAA,EAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;;AAAAA,eAAAA,CAAAA;AAAAA,OAAAA,EAAAA,KAAAA,CAAAA,IAAAA,EAAAA,SAAAA,CAAAA;AAAAA,KAAAA;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,MAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,UAAAA,CAAAA,GAAAA,cAAAA,OAAAA,MAAAA,IAAAA,CAAAA,CAAAA,MAAAA,CAAAA,QAAAA,CAAAA;AAAAA,UAAAA,CAAAA,CAAAA,EAAAA,OAAAA,CAAAA;AAAAA,UAAAA,CAAAA;AAAAA,UAAAA,CAAAA;AAAAA,UAAAA,CAAAA,GAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA;AAAAA,UAAAA,CAAAA,GAAAA,EAAAA;;AAAAA,UAAAA;AAAAA,eAAAA,CAAAA,KAAAA,CAAAA,KAAAA,CAAAA,IAAAA,CAAAA,KAAAA,CAAAA,KAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,IAAAA,EAAAA,EAAAA,IAAAA,GAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,KAAAA;AAAAA,OAAAA,CAAAA,OAAAA,CAAAA,EAAAA;AAAAA,QAAAA,CAAAA,GAAAA;AAAAA,UAAAA,KAAAA,EAAAA;AAAAA,SAAAA;AAAAA,OAAAA,SAAAA;AAAAA,YAAAA;AAAAA,UAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,IAAAA,KAAAA,CAAAA,GAAAA,CAAAA,CAAAA,MAAAA,KAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA;AAAAA,SAAAA,SAAAA;AAAAA,cAAAA,CAAAA,EAAAA,MAAAA,CAAAA,CAAAA,KAAAA;AAAAA;AAAAA;;AAAAA,aAAAA,CAAAA;AAAAA,KAAAA;;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;ACfb,QAAA52C,CAAAA,GAAA1a,CAAAA,CAAA,CAAAA,CAAA;AAAA,QACAoC,CAAAA,GAAApC,CAAAA,CAAA,CAAAA,CADA;AAAA,QAEAkR,CAAAA,GAAAlR,CAAAA,CAAA,CAAAA,CAFA;AAAA,QAIAizD,CAAAA,GAAAjzD,CAAAA,CAAA,GAAAA,CAJA;AAAA,QASAkpB,CAAAA,GAAAlpB,CAAAA,CAAA,EAAAA,CATA;AAAA,QAWAoyD,CAAAA,GAAA,YAAA;AAEE,eAAAA,CAAA,CAAmBvjB,CAAnB,EAAmBA;AAAAv9B,aAAAu9B,OAAAv9B,GAAAu9B,CAAAv9B,EACjBA,KAAK4gD,gBAAL5gD,GAAwB,IAAI6gD,GAAJ,EADP7gD;AAuKrB;;AAAA,aAnKE8gD,CAAAA,CAAAvwD,SAAAuwD,CAAAhpC,GAAAgpC,GAAA,UAAIntD,CAAJ,EAAuB3C,CAAvB,EAAuBA;AACrB,YAAI4wD,CAAAA,GAAW5hD,KAAKu9B,OAALv9B,CAAaogD,cAAbpgD,CAA4B6hD,WAA5B7hD,CAAwCrM,CAAxCqM,CAAf;;AACA,YAAA,CAAK4hD,CAAL,EAAe;AACb,cAAMz1C,CAAAA,GAAcxY,CAAAA,CAAGmuD,iBAAHnuD,CAAqBqM,IAArBrM,EAA2B3C,CAA3B2C,CAApB;AACAiuD,UAAAA,CAAAA,GAAW5hD,KAAKu9B,OAALv9B,CAAaogD,cAAbpgD,CAA4Bu/B,KAA5Bv/B,CAAkCmM,CAAlCnM,CAAX4hD,EACA5hD,KAAKu9B,OAALv9B,CAAaogD,cAAbpgD,CAA4B+hD,WAA5B/hD,CAAwCrM,CAAxCqM,EAA4C4hD,CAA5C5hD,CADA4hD;AAGF;;AAAA,YAAMI,CAAAA,GAAUruD,CAAAA,CAAGsuD,aAAHtuD,CAAiBqM,IAAjBrM,EAAuBiuD,CAAAA,CAASz1C,WAAhCxY,EAA6C3C,CAA7C2C,CAAhB;AAEA,eADAqM,KAAKu9B,OAALv9B,CAAaogD,cAAbpgD,CAA4B8X,GAA5B9X,CAAgC4hD,CAAhC5hD,EAA0CgiD,CAA1ChiD,GACO,CAACgiD,CAAAA,CAAQE,iBAARF,CAA0BlpC,MAA3B,CAAP;AAAkCA,OATpCgoC,EAuBAA,CAAAA,CAAAvwD,SAAAuwD,CAAA1oC,sBAAA0oC,GAAA,UAAuBhoC,CAAvB,EAAuCqpC,CAAvC,EAAuCA;AACrC,YAAIX,CAAAA,GAAKxhD,KAAKohD,cAALphD,CAAoB8Y,CAAAA,CAAOhb,MAA3BkC,CAAT;AAWA,eAVKwhD,CAAAA,GAQHp4C,CAAAA,CAAAxC,MAAAwC,CAAO9D,OAAP8D,CAAe,kBAAfA,EAAmC,yCAAuC0P,CAAAA,CAAOznB,IAA9C,GAAkD,GAArF+X,CARGo4C,IACHp4C,CAAAA,CAAAxC,MAAAwC,CAAO9D,OAAP8D,CAAe,kBAAfA,EAAmC,yCAAuC0P,CAAAA,CAAOznB,IAA9C,GAAkD,GAArF+X,GACK+4C,CAAAA,KACHA,CAAAA,GAASniD,KAAKoiD,4BAALpiD,CAAkC8Y,CAAAA,CAAOznB,IAAPynB,CAAY/f,KAAZ+f,EAAlC9Y,CADNmiD,CADL/4C,EAKAo4C,CAAAA,GAAKxhD,KAAKqiD,iBAALriD,CAAuBmiD,CAAvBniD,EAA+B8Y,CAAAA,CAAO5kB,IAAtC8L,EAA4C8Y,CAAAA,CAAOlb,UAAnDoC,EAA+D8Y,CAA/D9Y,EAAqE,CAArEA,CANFwhD,CAAAA,EAUEA,CAAP;AAAOA,OAnCTV,EA2CAA,CAAAA,CAAAvwD,SAAAuwD,CAAAwB,2BAAAxB,GAAA,UAA4BqB,CAA5B,EAAmDlhD,CAAnD,EAAmDA;AACjD,eAAOjB,KAAKqiD,iBAALriD,CAAuBmiD,CAAvBniD,EAA+BiB,CAA/BjB,CAAP;AAAsCiB,OA5CxC6/C,EAwDAA,CAAAA,CAAAvwD,SAAAuwD,CAAAyB,qCAAAzB,GAAA,UACIqB,CADJ,EAC2BlhD,CAD3B,EACsDpD,CADtD,EAC+Eib,CAD/E,EAC+EA;AAC7E,eAAO9Y,KAAKqiD,iBAALriD,CAAuBmiD,CAAvBniD,EAA+BiB,CAA/BjB,EAAyCnC,CAAzCmC,EAA+C8Y,CAA/C9Y,EAAqD,CAArDA,CAAP;AAA4D,OA1D9D8gD,EA6DQA,CAAAA,CAAAvwD,SAAAuwD,CAAAuB,iBAAAvB,GAAR,UACIqB,CADJ,EAC2BlhD,CAD3B,EACsDpD,CADtD,EACgFib,CADhF,EAEI0pC,CAFJ,EAEIA;AACFp5C,QAAAA,CAAAA,CAAAxC,MAAAwC,CAAO9D,OAAP8D,CAAe,kBAAfA,EAAmC,mCAAiCgyC,IAAAA,CAAKC,SAALD,CAAe+G,CAAf/G,CAAjC,GAAuD,GAA1FhyC;AACA,YAAMyP,CAAAA,GAAU7Y,KAAKu9B,OAALv9B,CAAaygD,cAAbzgD,CAA4ByiD,uBAA5BziD,CAAoDiB,CAApDjB,EAA8DmiD,CAA9DniD,EAAsEnC,CAAtEmC,EAA4EwiD,CAA5ExiD,CAAhB;AACA,eAAOA,KAAK0iD,4BAAL1iD,CAAkCmiD,CAAlCniD,EAA0CiB,CAA1CjB,EAAoD6Y,CAApD7Y,EAA6D8Y,CAA7D9Y,CAAP;AAAoE8Y,OAlEtEgoC,EA4EAA,CAAAA,CAAAvwD,SAAAuwD,CAAAloC,uBAAAkoC,GAAA,UAAwBqB,CAAxB,EAA+ClhD,CAA/C,EAA0E4X,CAA1E,EAAiGsoC,CAAjG,EAAiGA;AAE/F,eAAOnhD,KAAK0iD,4BAAL1iD,CAAkCmiD,CAAlCniD,EAA0CiB,CAA1CjB,EAAoD6Y,CAApD7Y,EAAoD6Y,KAAS3mB,CAA7D8N,EAAwEmhD,CAAxEnhD,CAAP;AAA+EmhD,OA9EjFL,EAiFQA,CAAAA,CAAAvwD,SAAAuwD,CAAA4B,4BAAA5B,GAAR,UACIqB,CADJ,EAC2BlhD,CAD3B,EACsD4X,CADtD,EAC6EC,CAD7E,EAC8FqoC,CAD9F,EAC8FA;AAD9F,YAAAz4C,CAAAA,GAAA1I,IAAA;AAAA,YAEQshD,CAAAA,GAAWqB,CAAAA,CAAA,EAAAA,EACZR,CADYQ,EACN;AACT7pC,UAAAA,MAAAA,EAAQA,CAAAA,IACJ,IAAIhoB,CAAAA,CAAAmD,MAAJ,CACQkuD,CAAAA,CAAOxpC,aADf,EAC8B1X,CAD9B,EAEQ,UAACq0C,CAAD,EAACA;AACC,mBAAO5sC,CAAAA,CAAKk6C,WAALl6C,CAAiB44C,CAAjB54C,CAAP;AAAwB44C,WAHlC,EAGkCA,KAE1BpvD,CALR,EAKQA,KAAWA,CALnB,EAK8BivD,CAL9B,CAFK;AAQTtoC,UAAAA,OAAAA,EAAOA;AARE,SADM8pC,CAFnB;AAcE,eADA3iD,KAAKqhD,cAALrhD,CAAoBshD,CAAAA,CAAYxoC,MAAZwoC,CAAmBxjD,MAAvCkC,EAA+CshD,CAA/CthD,GACOshD,CAAP;AAAOA,OA/FTR,EAkGAA,CAAAA,CAAAvwD,SAAAuwD,CAAAM,cAAAN,GAAA,UAAeK,CAAf,EAAeA;AACb,eAAOnhD,KAAKu9B,OAALv9B,CAAakhD,aAAblhD,CAA2BmhD,CAA3BnhD,IAAuCA,KAAKu9B,OAALv9B,CAAaohD,cAAbphD,CAA4BmhD,CAA5BnhD,CAAvCA,GACuCA,KAAK4gD,gBAAL5gD,CAAsBxQ,GAAtBwQ,CAA0BmhD,CAA1BnhD,CAD9C;AACwEmhD,OApG1EL,EAsGAA,CAAAA,CAAAvwD,SAAAuwD,CAAAO,cAAAP,GAAA,UAAeK,CAAf,EAAoCK,CAApC,EAAoCA;AAC9BxhD,aAAKu9B,OAALv9B,CAAakhD,aAAblhD,CAA2BmhD,CAA3BnhD,IACFA,KAAKu9B,OAALv9B,CAAaqhD,cAAbrhD,CAA4BmhD,CAA5BnhD,EAAsCwhD,CAAtCxhD,CADEA,GAGFA,KAAK4gD,gBAAL5gD,CAAsB7L,GAAtB6L,CAA0BmhD,CAA1BnhD,EAAoCwhD,CAApCxhD,CAHEA;AAGkCwhD,OA1GxCV,EAiHAA,CAAAA,CAAAvwD,SAAAuwD,CAAA+B,wBAAA/B,GAAA,UAAyBhoC,CAAzB,EAAyCR,CAAzC,EAAgEK,CAAhE,EAAgEA;AAAAA,aAAvB,CAAuBA,KAAvBL,CAAuBK,KAAvBL,CAAAA,GAAA,CAAuBK;AAE9D,YAAM6oC,CAAAA,GAAKxhD,KAAKohD,cAALphD,CAAoB8Y,CAAAA,CAAOhb,MAA3BkC,CAAX;AACA,eAAIwhD,CAAAA,IAGGxhD,KAAKoiD,4BAALpiD,CACU,MAAbsY,CAAa,GAAIQ,CAAAA,CAAOznB,IAAPynB,CAAY/f,KAAZ+f,EAAJ,GAA0BlB,CAAAA,CAAAW,cAAAX,CAAekB,CAAAA,CAAOznB,IAAPynB,CAAY/f,KAAZ+f,EAAflB,CADpC5X,EACyEsY,CADzEtY,EACmF2Y,CADnF3Y,CAHP;AAI0F2Y,OAxH5FmoC,EA6HAA,CAAAA,CAAAvwD,SAAAuwD,CAAAsB,4BAAAtB,GAAA,UACI/rD,CADJ,EACkCujB,CADlC,EACyDK,CADzD,EAEImqC,CAFJ,EAEIA;AAAAA,aAD8B,CAC9BA,KAD8BxqC,CAC9BwqC,KAD8BxqC,CAAAA,GAAA,CAC9BwqC;AACI,YAAA9vD,CAAAA,GAAAC,CAAAA,CAAA+M,KAAAu9B,OAAAv9B,CAAAsgD,cAAAtgD,CAAA+iD,gBAAA/iD,CAAAjL,CAAAiL,EAAA8iD,CAAA9iD,CAAA/M,EAAA,CAAAA,CAAA;AAAA,YAACylB,CAAAA,GAAA1lB,CAAAA,CAAA,CAAAA,CAAD;AAAA,YAAQylB,CAAAA,GAAAzlB,CAAAA,CAAA,CAAAA,CAAR;AAAA,YACFqoC,CAAAA,GAAetmC,CADb;AAKN,YAHqB,MAAjBA,CAAAA,CAAM3D,MAAW,KACnBiqC,CAAAA,GAAe,CAAC,CAAD,CADI,GAGJ,MAAb/iB,CAAJ,EAEEK,CAAAA,GAAgB5jB,CAAhB4jB,CAFF,KAGO,IAAA,CAAKA,CAAL,EACL,MAAM,IAAIljB,KAAJ,CAAU,kDAAV,CAAN;AAEF,eAAO;AACLijB,UAAAA,KAAAA,EAAKA,CADA;AAELD,UAAAA,MAAAA,EAAMA,CAFD;AAGLH,UAAAA,QAAAA,EAAUA,CAAAA,IAAsB,CAH3B;AAILvjB,UAAAA,KAAAA,EAAOsmC,CAJF;AAKLxiC,UAAAA,OAAAA,EAAS+G,CAAAA,CAAA9L,SAAA8L,CAAUjH,cAAViH,CAAyBy7B,CAAzBz7B,CALJ;AAML+Y,UAAAA,aAAAA,EAAaA;AANR,SAAP;AAMeA,OAjJjBmoC,EAqJAA,CAAAA,CAAAvwD,SAAAuwD,CAAA9jB,OAAA8jB,GAAA,YAAA;AAAA,YAAAp4C,CAAAA,GAAA1I,IAAA;AACEA,aAAKu9B,OAALv9B,CAAaygD,cAAbzgD,CAA4BuhD,mBAA5BvhD,IACAA,KAAK4gD,gBAAL5gD,CAAsB1C,OAAtB0C,CAA8B,UAAAwhD,CAAA,EAAAA;AAAM,iBAAA94C,CAAAA,CAAK60B,OAAL70B,CAAa+3C,cAAb/3C,CAA4B+4C,cAA5B/4C,CAA2C84C,CAA3C94C,CAAA;AAA2C84C,SAA/ExhD,CADAA,EAEAA,KAAK4gD,gBAAL5gD,GAAwB,IAAI6gD,GAAJ,EAFxB7gD;AAE4B6gD,OAxJ9BC,EA2JAA,CAAAA,CAAAvwD,SAAAuwD,CAAA8B,WAAA9B,GAAA,UAAYQ,CAAZ,EAAYA;AACV,YAAA,CAAKthD,KAAKu9B,OAALv9B,CAAa6xB,OAAb7xB,CAAqBkM,SAArBlM,CAA+BgjD,0BAApC,EAAgE;AAC9D,cACMC,CAAAA,GADK,IAAItB,CAAAA,CAAAuB,gBAAJ,EACLD,CAAaE,WAAbF,CAAyBjjD,IAAzBijD,EAA+B3B,CAA/B2B,CADN;AAEA,iBAAOjjD,KAAKu9B,OAALv9B,CAAaygD,cAAbzgD,CAA4BojD,uBAA5BpjD,CAAoDijD,CAApDjjD,CAAP;AAEF;;AAAA,eAAOA,KAAKu9B,OAALv9B,CAAaygD,cAAbzgD,CAA4B4iD,WAA5B5iD,CAAwCshD,CAAxCthD,EAAqDshD,CAAAA,CAAYxoC,MAAZwoC,CAAmBptD,IAAxE8L,EAA8EshD,CAAAA,CAAYhpC,QAA1FtY,CAAP;AAAiGsY,OAjKnGwoC,EAmKFA,CAAA;AAzKA,KAAA,EAXA;;AAWa5yD,IAAAA,CAAAA,CAAA4yD,qBAAA5yD,GAAA4yD,CAAA5yD;AAAA4yD,GnHmEb,EmHnEaA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,MAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,UAAAA,CAAAA,GAAAA,cAAAA,OAAAA,MAAAA,IAAAA,CAAAA,CAAAA,MAAAA,CAAAA,QAAAA,CAAAA;AAAAA,UAAAA,CAAAA,CAAAA,EAAAA,OAAAA,CAAAA;AAAAA,UAAAA,CAAAA;AAAAA,UAAAA,CAAAA;AAAAA,UAAAA,CAAAA,GAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA;AAAAA,UAAAA,CAAAA,GAAAA,EAAAA;;AAAAA,UAAAA;AAAAA,eAAAA,CAAAA,KAAAA,CAAAA,KAAAA,CAAAA,IAAAA,CAAAA,KAAAA,CAAAA,KAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,IAAAA,EAAAA,EAAAA,IAAAA,GAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,KAAAA;AAAAA,OAAAA,CAAAA,OAAAA,CAAAA,EAAAA;AAAAA,QAAAA,CAAAA,GAAAA;AAAAA,UAAAA,KAAAA,EAAAA;AAAAA,SAAAA;AAAAA,OAAAA,SAAAA;AAAAA,YAAAA;AAAAA,UAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,IAAAA,KAAAA,CAAAA,GAAAA,CAAAA,CAAAA,MAAAA,KAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA;AAAAA,SAAAA,SAAAA;AAAAA,cAAAA,CAAAA,EAAAA,MAAAA,CAAAA,CAAAA,KAAAA;AAAAA;AAAAA;;AAAAA,aAAAA,CAAAA;AAAAA,KAAAA;;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;ACZb,QAAAlhD,CAAAA,GAAAlR,CAAAA,CAAA,CAAAA,CAAA;AAAA,QACA20D,CAAAA,GAAA30D,CAAAA,CAAA,CAAAA,CADA;AAAA,QAKAw0D,CAAAA,GAAA,YAAA;AAAA,eAAAA,CAAA,GAAAA,CA6EA;;AAAA,aA5EEA,CAAAA,CAAA3yD,SAAA2yD,CAAAC,WAAAD,GAAA,UAAYnrC,CAAZ,EAAqDha,CAArD,EAAqDA;AACnD,YAAMpM,CAAAA,GAAcoM,CAAAA,CAAMhJ,KAA1B;AAAA,YACM/B,CAAAA,GAAAC,CAAAA,CAAA8kB,CAAAA,CAAAwlB,OAAAxlB,CAAAuoC,cAAAvoC,CAAAgrC,gBAAAhrC,CAAAha,CAAAA,CAAAhJ,KAAAgjB,CAAA9kB,EAAA,CAAAA,CADN;AAAA,YAEMqwD,CAAAA,GAA8B;AAClC5qC,UAAAA,KAAAA,EAFK1lB,CAAAA,CAAA,CAAAA,CAC6B;AAElCylB,UAAAA,MAAAA,EAHYzlB,CAAAA,CAAA,CAAAA,CACsB;AAGlCslB,UAAAA,QAAAA,EAAU,CAHwB;AAIlCvjB,UAAAA,KAAAA,EAAOpD,CAJ2B;AAKlCkH,UAAAA,OAAAA,EAAS+G,CAAAA,CAAA9L,SAAA8L,CAAUjH,cAAViH,CAAyBjO,CAAzBiO,CALyB;AAMlC+Y,UAAAA,aAAAA,EAAehnB;AANmB,SAFpC;AAAA,YAUM8S,CAAAA,GAAO4+C,CAAAA,CAAA9+C,OAAA8+C,CAAQtrC,CAAAA,CAAiBwlB,OAAjBxlB,CAAyB8Z,OAAzB9Z,CAAiC7L,SAAjC6L,CAA2ChU,OAAnDs/C,CAVb;AAAA,YA+DMl3C,CAAAA,GAAc;AAACo3C,UAAAA,YAAAA,EAAc,CAACxlD,CAAD,CAAf;AAAwBulD,UAAAA,YAAAA,EAAYA,CAApC;AAAsCE,UAAAA,QAAAA,EAAU,CAAC,GAAD,CAAhD;AAAuDC,UAAAA,YAAAA,EAhDtD,gtCA6CDh/C,CAAAA,CAAKN,SA7CJ,GA6Ca,4BA7Cb,GA8CfM,CAAAA,CAAKL,MA9CU,GA8CJ,mCAEG;AAAqEs/C,UAAAA,OAAAA,EAAAA,CAAS;AAA9E,SA/DpB;AAAA,YAgEM9B,CAAAA,GAAW7pC,CAAAA,CAAiBwlB,OAAjBxlB,CAAyBqoC,cAAzBroC,CAAwCwnB,KAAxCxnB,CAA8C5L,CAA9C4L,CAhEjB;AAAA,YAkEM4rC,CAAAA,GAAU5rC,CAAAA,CAAiBwlB,OAAjBxlB,CAAyB8Z,OAAzB9Z,CAAiC7L,SAAjC6L,CAA2C6rC,UAA3C7rC,CAAsD,MAAtDA,EAA8D,CAA9DA,CAlEhB;AAAA,YAmEMc,CAAAA,GACFd,CAAAA,CAAiBwlB,OAAjBxlB,CAAyB8Z,OAAzB9Z,CAAiC7L,SAAjC6L,CAA2C8rC,eAA3C9rC,CAA2DurC,CAAAA,CAAa5qC,KAAxEX,EAA+EurC,CAAAA,CAAa7qC,MAA5FV,EAAoG4rC,CAApG5rC,CApEJ;AAAA,YAsEMiqC,CAAAA,GAAU;AAAC8B,UAAAA,iBAAAA,EAAmB,CAAC/lD,CAAD,CAApB;AAA6BmkD,UAAAA,iBAAAA,EADnBnqC,CAAAA,CAAiBa,uBAAjBb,CAAyCurC,CAAzCvrC,EAAuD,OAAvDA,EAAgEc,CAAhEd,EAAyE,EAAzEA,CACV;AAAgDgsC,UAAAA,WAAAA,EAAa;AAA7D,SAtEhB;AAyEA,eADAhsC,CAAAA,CAAiBwlB,OAAjBxlB,CAAyBqoC,cAAzBroC,CAAwCD,GAAxCC,CAA4C6pC,CAA5C7pC,EAAsDiqC,CAAtDjqC,GACOiqC,CAAAA,CAAQE,iBAAf;AAAeA,OA1EjBgB,EA4EFA,CAAA;AA7EA,KAAA,EALA;;AAKah1D,IAAAA,CAAAA,CAAAg1D,gBAAAh1D,GAAAg1D,CAAAh1D;AAAAg1D,GpH0Eb,EoH1EaA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,YAAAA,IAAAA,UAAAA,CAAAA,EAAAA;AAAAA,UAAAA,CAAAA,IAAAA,CAAAA,CAAAA,UAAAA,EAAAA,OAAAA,CAAAA;AAAAA,UAAAA,CAAAA,GAAAA,EAAAA;AAAAA,UAAAA,QAAAA,CAAAA,EAAAA,KAAAA,IAAAA,CAAAA,IAAAA,CAAAA,EAAAA,MAAAA,CAAAA,cAAAA,CAAAA,IAAAA,CAAAA,CAAAA,EAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,aAAAA,CAAAA,CAAAA,OAAAA,GAAAA,CAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;ACLb,QAAAlxB,CAAAA,GAAAtjC,CAAAA,CAAA,CAAAA,CAAA;AAAA,QAGAwjC,CAAAA,GAAAxjC,CAAAA,CAAA,GAAAA,CAHA;AAAA,QAIAs1D,CAAAA,GAAA16C,CAAAA,CAAA5a,CAAAA,CAAA,GAAAA,CAAA4a,CAJA;AAAA,QAKA+zC,CAAAA,GAAA3uD,CAAAA,CAAA,GAAAA,CALA;AAAA,QAMA0jC,CAAAA,GAAA1jC,CAAAA,CAAA,GAAAA,CANA;AAAA,QAOA2jC,CAAAA,GAAA3jC,CAAAA,CAAA,GAAAA,CAPA;AAAA,QAQA4jC,CAAAA,GAAA5jC,CAAAA,CAAA,GAAAA,CARA;AAAA,QASAu1D,CAAAA,GAAAv1D,CAAAA,CAAA,GAAAA,CATA;AAAA,QAUA6jC,CAAAA,GAAA7jC,CAAAA,CAAA,GAAAA,CAVA;AAAA,QAWA8jC,CAAAA,GAAA9jC,CAAAA,CAAA,GAAAA,CAXA;AAAA,QAYA+jC,CAAAA,GAAA/jC,CAAAA,CAAA,GAAAA,CAZA;AAAA,QAaAgkC,CAAAA,GAAAhkC,CAAAA,CAAA,GAAAA,CAbA;AAAA,QAcAw1D,CAAAA,GAAAx1D,CAAAA,CAAA,GAAAA,CAdA;AAAA,QAeAu+B,CAAAA,GAAAv+B,CAAAA,CAAA,GAAAA,CAfA;AAAA,QAgBAy1D,CAAAA,GAAAz1D,CAAAA,CAAA,GAAAA,CAhBA;AAAA,QAiBAmkC,CAAAA,GAAAnkC,CAAAA,CAAA,GAAAA,CAjBA;AAAA,QAkBA01D,CAAAA,GAAA96C,CAAAA,CAAA5a,CAAAA,CAAA,GAAAA,CAAA4a,CAlBA;AAAA,QAmBAqO,CAAAA,GAAAjpB,CAAAA,CAAA,EAAAA,CAnBA;AAAA,QAoBAqkC,CAAAA,GAAArkC,CAAAA,CAAA,GAAAA,CApBA;AAAA,QAqBAskC,CAAAA,GAAAtkC,CAAAA,CAAA,GAAAA,CArBA;AAAA,QAsBA21D,CAAAA,GAAA31D,CAAAA,CAAA,GAAAA,CAtBA;AAAA,QAuBAukC,CAAAA,GAAAvkC,CAAAA,CAAA,GAAAA,CAvBA;AAAA,QAwBAwkC,CAAAA,GAAAxkC,CAAAA,CAAA,GAAAA,CAxBA;AAAA,QAyBAykC,CAAAA,GAAAzkC,CAAAA,CAAA,GAAAA,CAzBA;AAAA,QA0BA0kC,CAAAA,GAAA1kC,CAAAA,CAAA,GAAAA,CA1BA;AAAA,QA2BA2kC,CAAAA,GAAA/pB,CAAAA,CAAA5a,CAAAA,CAAA,GAAAA,CAAA4a,CA3BA;AAAA,QA4BAiqB,CAAAA,GAAA7kC,CAAAA,CAAA,GAAAA,CA5BA;;AA8BaR,IAAAA,CAAAA,CAAAwzD,sBAAAxzD,GAA2D,CACtE,CAAC,KAAD,EAAQ,EAAR,EAAY,IAAZ,EAAkB,YAAA;AAAM,aAAA,IAAImlC,CAAAA,CAASixB,YAAb,CAA0BtyB,CAAAA,CAAA9f,YAA1B,EAAwCmhB,CAAAA,CAASkxB,OAATlxB,EAAxC,CAAA;AAAiDkxB,KAAzE,CADsE,EAEtE,CAAC,MAAD,EAAS,EAAT,EAAa,IAAb,EAAmB,YAAA;AAAM,aAAA,IAAIlxB,CAAAA,CAASixB,YAAb,CAA0BtyB,CAAAA,CAAA5f,WAA1B,EAAuCihB,CAAAA,CAASmxB,QAATnxB,EAAvC,CAAA;AAAgDmxB,KAAzE,CAFsE,EAGtE,CAAC,KAAD,EAAQ,EAAR,EAAY,IAAZ,EAAkB,YAAA;AAAM,aAAA,IAAIR,CAAAA,CAAUS,aAAd,CAA4BzyB,CAAAA,CAAA9f,YAA5B,EAA0C8xC,CAAAA,CAAUU,OAAVV,EAA1C,CAAA;AAAoDU,KAA5E,CAHsE,EAItE,CAAC,KAAD,EAAQ,EAAR,EAAY,IAAZ,EAAkB,YAAA;AAAM,aAAA,IAAIV,CAAAA,CAAUS,aAAd,CAA4B,CAAC,MAAD,CAA5B,EAAsCT,CAAAA,CAAUW,OAAVX,EAAtC,CAAA;AAAgDW,KAAxE,CAJsE,EAKtE,CAAC,MAAD,EAAS,EAAT,EAAa,IAAb,EAAmB,YAAA;AAAM,aAAA,IAAItxB,CAAAA,CAASixB,YAAb,CAA0BtyB,CAAAA,CAAA5f,WAA1B,EAAuCihB,CAAAA,CAASuxB,QAATvxB,EAAvC,CAAA;AAAgDuxB,KAAzE,CALsE,EAMtE,CAAC,MAAD,EAAS,EAAT,EAAa,IAAb,EAAmB,YAAA;AAAM,aAAA,IAAIvxB,CAAAA,CAASixB,YAAb,CAA0BtyB,CAAAA,CAAA5f,WAA1B,EAAuCihB,CAAAA,CAASwxB,QAATxxB,EAAvC,CAAA;AAAgDwxB,KAAzE,CANsE,EAOtE,CAAC,aAAD,EAAgB,EAAhB,EAAoB,IAApB,EAA0B,YAAA;AAAM,aAAA,IAAIhyB,CAAAA,CAAAiyB,gBAAJ,EAAA;AAAIA,KAApC,CAPsE,EAQtE,CAAC,oBAAD,EAAuB,EAAvB,EAA2B,IAA3B,EAAiC,YAAA;AAAM,aAAA,IAAI5yB,CAAAA,CAAA6yB,uBAAJ,EAAA;AAAIA,KAA3C,CARsE,EAStE,CAAC,MAAD,EAAS,EAAT,EAAa,IAAb,EAAmB,YAAA;AAAM,aAAA,IAAI1xB,CAAAA,CAASixB,YAAb,CAA0BtyB,CAAAA,CAAA5f,WAA1B,EAAuCihB,CAAAA,CAAS2xB,QAAT3xB,EAAvC,CAAA;AAAgD2xB,KAAzE,CATsE,EAUtE,CAAC,MAAD,EAAS,EAAT,EAAa,IAAb,EAAmB,YAAA;AAAM,aAAA,IAAI3H,CAAAA,CAAA4H,SAAJ,EAAA;AAAIA,KAA7B,CAVsE,EAWtE,CAAC,QAAD,EAAW,EAAX,EAAe,IAAf,EAAqB,YAAA;AAAM,aAAA,IAAI7yB,CAAAA,CAAA8yB,WAAJ,EAAA;AAAIA,KAA/B,CAXsE,EAYtE,CAAC,MAAD,EAAS,EAAT,EAAa,IAAb,EAAmB,YAAA;AAAM,aAAA,IAAI7yB,CAAAA,CAAA8yB,SAAJ,EAAA;AAAIA,KAA7B,CAZsE,EAatE,CAAC,KAAD,EAAQ,EAAR,EAAY,IAAZ,EAAkB,YAAA;AAAM,aAAA,IAAI9xB,CAAAA,CAASixB,YAAb,CAA0BtyB,CAAAA,CAAA5f,WAA1B,EAAuCihB,CAAAA,CAAS+xB,OAAT/xB,EAAvC,CAAA;AAAgD+xB,KAAxE,CAbsE,EActE,CAAC,KAAD,EAAQ,EAAR,EAAY,IAAZ,EAAkB,YAAA;AAAM,aAAA,IAAIpB,CAAAA,CAAUS,aAAd,CAA4BzyB,CAAAA,CAAA9f,YAA5B,EAA0C8xC,CAAAA,CAAUqB,OAAVrB,EAA1C,CAAA;AAAoDqB,KAA5E,CAdsE,EAetE,CAAC,SAAD,EAAY,EAAZ,EAAgB,IAAhB,EAAsB,YAAA;AAAM,aAAA,IAAI/yB,CAAAA,CAAAgzB,YAAJ,EAAA;AAAIA,KAAhC,CAfsE,EAgBtE,CAAC,OAAD,EAAU,EAAV,EAAc,IAAd,EAAoB,YAAA;AAAM,aAAA,IAAItB,CAAAA,CAAUS,aAAd,CAA4BzyB,CAAAA,CAAA9f,YAA5B,EAA0C8xC,CAAAA,CAAUuB,SAAVvB,EAA1C,EAAoDuB,KAAarzD,CAAjE,EAA4E,MAA5E,CAAA;AAA4E,KAAtG,CAhBsE,EAiBtE,CAAC,KAAD,EAAQ,EAAR,EAAY,IAAZ,EAAkB,YAAA;AAAM,aAAA,IAAI+xD,CAAAA,CAAAuB,QAAJ,EAAA;AAAIA,KAA5B,CAjBsE,EAkBtE,CAAC,KAAD,EAAQ,EAAR,EAAY,IAAZ,EAAkB,YAAA;AAAM,aAAA,IAAInyB,CAAAA,CAASixB,YAAb,CAA0BtyB,CAAAA,CAAA5f,WAA1B,EAAuCihB,CAAAA,CAASoyB,OAATpyB,EAAvC,CAAA;AAAgDoyB,KAAxE,CAlBsE,EAmBtE,CAAC,SAAD,EAAY,EAAZ,EAAgB,IAAhB,EAAsB,YAAA;AAAM,aAAA,IAAIlzB,CAAAA,CAAAmzB,YAAJ,EAAA;AAAIA,KAAhC,CAnBsE,EAoBtE,CAAC,OAAD,EAAU,EAAV,EAAc,IAAd,EAAoB,YAAA;AAAM,aAAA,IAAIryB,CAAAA,CAASixB,YAAb,CAA0BtyB,CAAAA,CAAA5f,WAA1B,EAAuCihB,CAAAA,CAASsyB,SAATtyB,EAAvC,CAAA;AAAgDsyB,KAA1E,CApBsE,EAqBtE,CAAC,QAAD,EAAW,EAAX,EAAe,IAAf,EAAqB,YAAA;AAAM,aAAA,IAAInzB,CAAAA,CAAAozB,WAAJ,EAAA;AAAIA,KAA/B,CArBsE,EAsBtE,CAAC,MAAD,EAAS,EAAT,EAAa,IAAb,EAAmB,YAAA;AAAM,aAAA,IAAInzB,CAAAA,CAAAozB,SAAJ,EAAA;AAAIA,KAA7B,CAtBsE,EAuBtE,CAAC,mBAAD,EAAsB,EAAtB,EAA0B,IAA1B,EAAgC,YAAA;AAAM,aAAA,IAAIhzB,CAAAA,CAAAizB,sBAAJ,EAAA;AAAIA,KAA1C,CAvBsE,EAwBtE,CAAC,eAAD,EAAkB,EAAlB,EAAsB,IAAtB,EAA4B,YAAA;AAAM,aAAA,IAAIjzB,CAAAA,CAAAkzB,kBAAJ,EAAA;AAAIA,KAAtC,CAxBsE,EAyBtE,CAAC,SAAD,EAAY,EAAZ,EAAgB,IAAhB,EAAsB,YAAA;AAAM,aAAA,IAAI/B,CAAAA,CAAUS,aAAd,CAA4BzyB,CAAAA,CAAA9f,YAA5B,EAA0C8xC,CAAAA,CAAUgC,WAAVhC,EAA1C,EAAoDgC,KAAe9zD,CAAnE,EAA8E,MAA9E,CAAA;AAA8E,KAA1G,CAzBsE,EA0BtE,CAAC,UAAD,EAAa,EAAb,EAAiB,IAAjB,EAAuB,YAAA;AAAM,aAAA,IAAImhC,CAAAA,CAASixB,YAAb,CAA0BtyB,CAAAA,CAAA9f,YAA1B,EAAwCmhB,CAAAA,CAAS4yB,YAAT5yB,EAAxC,CAAA;AAAiD4yB,KAA9E,CA1BsE,EA2BtE,CAAC,aAAD,EAAgB,EAAhB,EAAoB,IAApB,EAA0B,YAAA;AAAM,aAAA,IAAIvzB,CAAAA,CAAAwzB,gBAAJ,EAAA;AAAIA,KAApC,CA3BsE,EA4BtE,CAAC,WAAD,EAAc,EAAd,EAAkB,IAAlB,EAAwB,YAAA;AAAM,aAAA,IAAIhC,CAAAA,CAAAiC,cAAJ,EAAA;AAAIA,KAAlC,CA5BsE,EA6BtE,CAAC,MAAD,EAAS,EAAT,EAAa,IAAb,EAAmB,YAAA;AAAM,aAAA,IAAInC,CAAAA,CAAUS,aAAd,CAA4BzyB,CAAAA,CAAA9f,YAA5B,EAA0C8xC,CAAAA,CAAUoC,QAAVpC,EAA1C,EAAoDoC,KAAYl0D,CAAhE,EAA2E,MAA3E,CAAA;AAA2E,KAApG,CA7BsE,EA8BtE,CAAC,KAAD,EAAQ,EAAR,EAAY,IAAZ,EAAkB,YAAA;AAAM,aAAA,IAAImhC,CAAAA,CAASixB,YAAb,CAA0BtyB,CAAAA,CAAA5f,WAA1B,EAAuCihB,CAAAA,CAASgzB,OAAThzB,EAAvC,CAAA;AAAgDgzB,KAAxE,CA9BsE,EA+BtE,CAAC,QAAD,EAAW,EAAX,EAAe,IAAf,EAAqB,YAAA;AAAM,aAAA,IAAIp5B,CAAAA,CAAAq5B,WAAJ,EAAA;AAAIA,KAA/B,CA/BsE,EAgCtE,CAAC,SAAD,EAAY,EAAZ,EAAgB,IAAhB,EAAsB,YAAA;AAAM,aAAA,IAAIzzB,CAAAA,CAAA0zB,YAAJ,EAAA;AAAIA,KAAhC,CAhCsE,EAiCtE,CAAC,KAAD,EAAQ,EAAR,EAAY,IAAZ,EAAkB,YAAA;AAAM,aAAA,IAAIvC,CAAAA,CAAUS,aAAd,CAA4BzyB,CAAAA,CAAA9f,YAA5B,EAA0C8xC,CAAAA,CAAUwC,OAAVxC,EAA1C,CAAA;AAAoDwC,KAA5E,CAjCsE,EAkCtE,CAAC,KAAD,EAAQ,EAAR,EAAY,IAAZ,EAAkB,YAAA;AAAM,aAAA,IAAInzB,CAAAA,CAASixB,YAAb,CAA0BtyB,CAAAA,CAAA9f,YAA1B,EAAwCmhB,CAAAA,CAASozB,OAATpzB,EAAxC,CAAA;AAAiDozB,KAAzE,CAlCsE,EAmCtE,CAAC,KAAD,EAAQ,EAAR,EAAY,IAAZ,EAAkB,YAAA;AAAM,aAAA,IAAIpzB,CAAAA,CAASixB,YAAb,CAA0B,CAAC,MAAD,CAA1B,EAAoCjxB,CAAAA,CAASqzB,OAATrzB,EAApC,CAAA;AAA6CqzB,KAArE,CAnCsE,EAoCtE,CAAC,IAAD,EAAO,EAAP,EAAW,IAAX,EAAiB,YAAA;AAAM,aAAA,IAAI1C,CAAAA,CAAUS,aAAd,CAA4B,CAAC,MAAD,CAA5B,EAAsCT,CAAAA,CAAU2C,MAAV3C,EAAtC,CAAA;AAAgD2C,KAAvE,CApCsE,EAqCtE,CAAC,KAAD,EAAQ,EAAR,EAAY,IAAZ,EAAkB,YAAA;AAAM,aAAA,IAAIxC,CAAAA,CAAAyC,QAAJ,EAAA;AAAIA,KAA5B,CArCsE,EAsCtE,CAAC,KAAD,EAAQ,EAAR,EAAY,IAAZ,EAAkB,YAAA;AAAM,aAAA,IAAI5C,CAAAA,CAAUS,aAAd,CAA4BzyB,CAAAA,CAAA5f,WAA5B,EAAyC4xC,CAAAA,CAAU6C,OAAV7C,EAAzC,CAAA;AAAmD6C,KAA3E,CAtCsE,EAuCtE,CAAC,OAAD,EAAU,EAAV,EAAc,IAAd,EAAoB,YAAA;AAAM,aAAA,IAAI7C,CAAAA,CAAUS,aAAd,CAA4BzyB,CAAAA,CAAA5f,WAA5B,EAAyC4xC,CAAAA,CAAU8C,SAAV9C,EAAzC,CAAA;AAAmD8C,KAA7E,CAvCsE,EAwCtE,CAAC,cAAD,EAAiB,EAAjB,EAAqB,IAArB,EAA2B,YAAA;AAAM,aAAA,IAAI1C,CAAAA,CAAU2C,iBAAd,EAAA;AAAcA,KAA/C,CAxCsE,EAyCtE,CAAC,WAAD,EAAc,EAAd,EAAkB,IAAlB,EAAwB,YAAA;AAAM,aAAA,IAAI3C,CAAAA,CAAU4C,cAAd,EAAA;AAAcA,KAA5C,CAzCsE,EA0CtE,CAAC,YAAD,EAAe,EAAf,EAAmB,IAAnB,EAAyB,YAAA;AAAM,aAAA,IAAI5C,CAAAA,CAAU6C,eAAd,EAAA;AAAcA,KAA7C,CA1CsE,EA2CtE,CAAC,WAAD,EAAc,EAAd,EAAkB,IAAlB,EAAwB,YAAA;AAAM,aAAA,IAAI7C,CAAAA,CAAU8C,cAAd,EAAA;AAAcA,KAA5C,CA3CsE,EA4CtE,CAAC,YAAD,EAAe,EAAf,EAAmB,IAAnB,EAAyB,YAAA;AAAM,aAAA,IAAI9C,CAAAA,CAAU+C,eAAd,EAAA;AAAcA,KAA7C,CA5CsE,EA6CtE,CAAC,WAAD,EAAc,EAAd,EAAkB,IAAlB,EAAwB,YAAA;AAAM,aAAA,IAAI/C,CAAAA,CAAUgD,cAAd,EAAA;AAAcA,KAA5C,CA7CsE,EA8CtE,CAAC,iBAAD,EAAoB,EAApB,EAAwB,IAAxB,EAA8B,YAAA;AAAM,aAAA,IAAIhD,CAAAA,CAAUiD,oBAAd,EAAA;AAAcA,KAAlD,CA9CsE,EA+CtE,CAAC,MAAD,EAAS,EAAT,EAAa,IAAb,EAAmB,YAAA;AAAM,aAAA,IAAIh0B,CAAAA,CAASixB,YAAb,CAA0BtyB,CAAAA,CAAA5f,WAA1B,EAAuCihB,CAAAA,CAASi0B,QAATj0B,EAAvC,CAAA;AAAgDi0B,KAAzE,CA/CsE,EAgDtE,CAAC,SAAD,EAAY,EAAZ,EAAgB,IAAhB,EAAsB,YAAA;AAAM,aAAA,IAAI3vC,CAAAA,CAAAE,YAAJ,EAAA;AAAIA,KAAhC,CAhDsE,EAiDtE,CAAC,SAAD,EAAY,EAAZ,EAAgB,IAAhB,EAAsB,YAAA;AAAM,aAAA,IAAIwb,CAAAA,CAASixB,YAAb,CAA0BtyB,CAAAA,CAAA5f,WAA1B,EAAuCihB,CAAAA,CAASk0B,WAATl0B,EAAvC,CAAA;AAAgDk0B,KAA5E,CAjDsE,EAkDtE,CAAC,KAAD,EAAQ,EAAR,EAAY,IAAZ,EAAkB,YAAA;AAAM,aAAA,IAAIl0B,CAAAA,CAASixB,YAAb,CAA0BtyB,CAAAA,CAAA5f,WAA1B,EAAuCihB,CAAAA,CAASm0B,OAATn0B,EAAvC,CAAA;AAAgDm0B,KAAxE,CAlDsE,EAmDtE,CAAC,OAAD,EAAU,EAAV,EAAc,KAAd,EAAqB,YAAA;AAAM,aAAA,IAAIz0B,CAAAA,CAAA00B,aAAJ,EAAA;AAAIA,KAA/B,CAnDsE,EAoDtE,CAAC,OAAD,EAAU,EAAV,EAAc,KAAd,EAAqB,YAAA;AAAM,aAAA,IAAI10B,CAAAA,CAAA20B,UAAJ,EAAA;AAAIA,KAA/B,CApDsE,EAqDtE,CAAC,SAAD,EAAY,EAAZ,EAAgB,IAAhB,EAAsB,YAAA;AAAM,aAAA,IAAI10B,CAAAA,CAAA20B,YAAJ,EAAA;AAAIA,KAAhC,CArDsE,EA0DtE,CAAC,OAAD,EAAU,EAAV,EAAc,IAAd,EAAoB,UAACh7C,CAAD,EAACA;AAAS,aAAA,IAAI03C,CAAAA,CAAAuD,UAAJ,CAAej7C,CAAAA,CAAKk7C,OAALl7C,CAAavb,MAA5B,CAAA;AAA4BA,KAA1D,CA1DsE,EA2DtE,CAAC,MAAD,EAAS,EAAT,EAAa,IAAb,EAAmB,YAAA;AAAM,aAAA,IAAIiiC,CAAAA,CAASixB,YAAb,CAA0BtyB,CAAAA,CAAA5f,WAA1B,EAAuCihB,CAAAA,CAASy0B,QAATz0B,EAAvC,CAAA;AAAgDy0B,KAAzE,CA3DsE,EA4DtE,CAAC,SAAD,EAAY,EAAZ,EAAgB,IAAhB,EAAsB,YAAA;AAAM,aAAA,IAAI70B,CAAAA,CAAA80B,YAAJ,EAAA;AAAIA,KAAhC,CA5DsE,EA6DtE,CAAC,KAAD,EAAQ,EAAR,EAAY,IAAZ,EAAkB,YAAA;AAAM,aAAA,IAAI/D,CAAAA,CAAUS,aAAd,CAA4BzyB,CAAAA,CAAA9f,YAA5B,EAA0C8xC,CAAAA,CAAUgE,OAAVhE,EAA1C,CAAA;AAAoDgE,KAA5E,CA7DsE,EA8DtE,CAAC,KAAD,EAAQ,EAAR,EAAY,IAAZ,EAAkB,YAAA;AAAM,aAAA,IAAI90B,CAAAA,CAAA+0B,QAAJ,EAAA;AAAIA,KAA5B,CA9DsE,EA+DtE,CAAC,KAAD,EAAQ,EAAR,EAAY,IAAZ,EAAkB,YAAA;AAAM,aAAA,IAAI50B,CAAAA,CAASixB,YAAb,CAA0BtyB,CAAAA,CAAA5f,WAA1B,EAAuCihB,CAAAA,CAAS60B,OAAT70B,EAAvC,CAAA;AAAgD60B,KAAxE,CA/DsE,EAgEtE,CAAC,MAAD,EAAS,EAAT,EAAa,IAAb,EAAmB,YAAA;AAAM,aAAA,IAAI70B,CAAAA,CAASixB,YAAb,CAA0BtyB,CAAAA,CAAA5f,WAA1B,EAAuCihB,CAAAA,CAAS80B,QAAT90B,EAAvC,CAAA;AAAgD80B,KAAzE,CAhEsE,EAiEtE,CAAC,MAAD,EAAS,EAAT,EAAa,IAAb,EAAmB,YAAA;AAAM,aAAA,IAAIh1B,CAAAA,CAAAi1B,SAAJ,EAAA;AAAIA,KAA7B,CAjEsE,EAkEtE,CAAC,WAAD,EAAc,EAAd,EAAkB,IAAlB,EAAwB,YAAA;AAAM,aAAA,IAAIh1B,CAAAA,CAAAi1B,cAAJ,EAAA;AAAIA,KAAlC,CAlEsE,EAmEtE,CAAC,WAAD,EAAc,EAAd,EAAkB,IAAlB,EAAwB,YAAA;AAAM,aAAA,IAAI90B,CAAAA,CAAA+0B,cAAJ,EAAA;AAAIA,KAAlC,CAnEsE,EAoEtE,CAAC,KAAD,EAAQ,EAAR,EAAY,IAAZ,EAAkB,YAAA;AAAM,aAAA,IAAItE,CAAAA,CAAUS,aAAd,CAA4B,CAAC,MAAD,CAA5B,EAAsCT,CAAAA,CAAUuE,OAAVvE,EAAtC,CAAA;AAAgDuE,KAAxE,CApEsE,CAA3Dr6D;AAoE6Dq6D,GrHnB1E,EqHmB0EA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,QAAAA,CAAAA;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,SAAAA,KAAAA,CAAAA,GAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,CAAAA,CAAAA,GAAAA,MAAAA,CAAAA,cAAAA,IAAAA;AAAAA,QAAAA,SAAAA,EAAAA;AAAAA,mBAAAA,KAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,QAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA;AAAAA,OAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,IAAAA,CAAAA,IAAAA,CAAAA,EAAAA,CAAAA,CAAAA,cAAAA,CAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,OAAAA,EAAAA,CAAAA,EAAAA,CAAAA,CAAAA;AAAAA,KAAAA,EAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,eAAAA,CAAAA,GAAAA;AAAAA,aAAAA,WAAAA,GAAAA,CAAAA;AAAAA;;AAAAA,MAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,SAAAA,GAAAA,SAAAA,CAAAA,GAAAA,MAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA,CAAAA,SAAAA,EAAAA,IAAAA,CAAAA,EAAAA,CAAAA;AAAAA,KAAAA,CAAAA;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;AClG1E,QAAAr2B,CAAAA,GAAAxjC,CAAAA,CAAA,EAAAA,CAAA;AAAA,QAEA20D,CAAAA,GAAA30D,CAAAA,CAAA,CAAAA,CAFA;AAAA,QAMAq2D,CAAAA,GAAA,UAAA75C,CAAA,EAAAA;AAAA,eAAA65C,CAAA,GAAAA;AAAAA,eAAAA,SAAAA,CAAAA,IAAAA,CAAAA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,SAAAA,CAAAA,IAAAA,IAAAA;AAiCA;;AAAA,aAjC6C55C,CAAAA,CAAA45C,CAAA55C,EAAAD,CAAAC,CAAAA,EAC3C45C,CAAAA,CAAAx0D,SAAAw0D,CAAAjtC,GAAAitC,GAAA,UAAIhtC,CAAJ,EAA6C/mB,CAA7C,EAA6CA;AAC3C,eAAO+mB,CAAAA,CAAiBD,GAAjBC,CAAqB/X,IAArB+X,EAA2B/mB,CAA3B+mB,CAAP;AAAkC/mB,OAFOma,EAI3C45C,CAAAA,CAAAx0D,SAAAw0D,CAAAjD,iBAAAiD,GAAA,UAAkByD,CAAlB,EAAkDx3D,CAAlD,EAAkDA;AAChD,YAAMuyD,CAAAA,GAAevyD,CAAAA,CAAOyG,GAAPzG,CAAW,UAAAnB,CAAA,EAAAA;AAAK,iBAAA24D,CAAAA,CAAQ3F,wBAAR2F,CAAiC34D,CAAjC24D,CAAA;AAAiC34D,SAAjDmB,CAArB;AAAA,YACMW,CAAAA,GAAcX,CAAAA,CAAO,CAAPA,CAAAA,CAAUK,IAAVL,CAAe+H,KAAf/H,EADpB;AAAA,YAEM4H,CAAAA,GAAOjH,CAAAA,CAAYP,MAFzB;AAAA,YAGMk7B,CAAAA,GAAQi3B,CAAAA,CAAa,CAAbA,CAHd;AAAA,YAIM9+C,CAAAA,GAAO4+C,CAAAA,CAAA9+C,OAAA8+C,CAAQmF,CAAAA,CAAQjrB,OAARirB,CAAgB32B,OAAhB22B,CAAwBt8C,SAAxBs8C,CAAkCzkD,OAA1Cs/C,CAJb;AAAA,YAKMI,CAAAA,GAAe,+BACC7qD,CADD,GACK,mEADL,GAE4B0zB,CAAAA,CAAM5T,KAFlC,GAEuC,IAFvC,GAE4C4T,CAAAA,CAAM7T,MAFlD,GAEwD,4CAFxD,GAGehU,CAAAA,CAAKN,SAHpB,GAG6B,4DAH7B,GAIcM,CAAAA,CAAKN,SAJnB,GAI4B,+DAJ5B,GAKkBM,CAAAA,CAAKN,SALvB,GAKgC,4DALhC,GAMWM,CAAAA,CAAKN,SANhB,GAMyB,2FANzB,GAQ+CnE,KAAK8rB,OARpD,GAQ2D,oBAbhF;AAeA,eAAO;AACLy3B,UAAAA,YAAAA,EAAYA,CADP;AAELD,UAAAA,YAAAA,EAAckF,CAAAA,CAAQpG,4BAARoG,CAAqC72D,CAArC62D,CAFT;AAGLhF,UAAAA,QAAAA,EAAU,CAAC,GAAD,EAAM,OAAN,EAAe,GAAf,EAAoB,MAApB,EAA4B,UAA5B,CAHL;AAILC,UAAAA,YAAAA,EAAYA;AAJP,SAAP;AAIcA,OAxB2Bt4C,EA2B3C45C,CAAAA,CAAAx0D,SAAAw0D,CAAA9C,aAAA8C,GAAA,UAAcyD,CAAd,EAA8Cr8C,CAA9C,EAAwEnb,CAAxE,EAAwEA;AACtE,YAAMy3D,CAAAA,GAAW,CAACD,CAAAA,CAAQpwC,sBAARowC,CAA+Bx3D,CAAAA,CAAO,CAAPA,CAA/Bw3D,EAA0Cr8C,CAAAA,CAAYo3C,YAAZp3C,CAAyB,CAAzBA,CAA1Cq8C,CAAD,CAAjB;AACAx3D,QAAAA,CAAAA,CAAO+H,KAAP/H,CAAa,CAAbA,EAAgBsM,OAAhBtM,CAAwB,UAAAnB,CAAA,EAAAA;AAAK,iBAAA44D,CAAAA,CAAS3sD,IAAT2sD,CAAcD,CAAAA,CAAQpwC,sBAARowC,CAA+B34D,CAA/B24D,CAAdC,CAAA;AAA6C54D,SAA1EmB;AACA,YAAM03D,CAAAA,GAAWF,CAAAA,CAAQlG,2BAARkG,CAAoCr8C,CAAAA,CAAYm3C,YAAhDkF,EAA8DC,CAAAA,CAAS,CAATA,CAAAA,CAAY3vC,MAAZ2vC,CAAmBv0D,IAAjFs0D,CAAjB;AACA,eAAO;AAAC1E,UAAAA,iBAAAA,EAAmB2E,CAApB;AAA8BvG,UAAAA,iBAAAA,EAAmBwG,CAAjD;AAA2D3E,UAAAA,WAAAA,EAAa;AAAxE,SAAP;AAA+E,OA/BtC54C,EAiC7C45C,CAAA;AAjCA,KAAA,CAA6C7yB,CAAAA,CAAAvG,kBAA7C,CANA;;AAMaz9B,IAAAA,CAAAA,CAAA62D,uBAAA72D,GAAA62D,CAAA72D;AAAA62D,GtHyEb,EsHzEaA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,QAAAA,CAAAA;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,SAAAA,KAAAA,CAAAA,GAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,CAAAA,CAAAA,GAAAA,MAAAA,CAAAA,cAAAA,IAAAA;AAAAA,QAAAA,SAAAA,EAAAA;AAAAA,mBAAAA,KAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,QAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA;AAAAA,OAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,IAAAA,CAAAA,IAAAA,CAAAA,EAAAA,CAAAA,CAAAA,cAAAA,CAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,OAAAA,EAAAA,CAAAA,EAAAA,CAAAA,CAAAA;AAAAA,KAAAA,EAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,eAAAA,CAAAA,GAAAA;AAAAA,aAAAA,WAAAA,GAAAA,CAAAA;AAAAA;;AAAAA,MAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,SAAAA,GAAAA,SAAAA,CAAAA,GAAAA,MAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA,CAAAA,SAAAA,EAAAA,IAAAA,CAAAA,EAAAA,CAAAA;AAAAA,KAAAA,CAAAA;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;ACNb,QAAA5yB,CAAAA,GAAAzjC,CAAAA,CAAA,EAAAA,CAAA;AAAA,QAEAkR,CAAAA,GAAAlR,CAAAA,CAAA,CAAAA,CAFA;AAAA,QAGAi6D,CAAAA,GAAAj6D,CAAAA,CAAA,CAAAA,CAHA;AAAA,QAIA20D,CAAAA,GAAA30D,CAAAA,CAAA,CAAAA,CAJA;AAAA,QAQA+1D,CAAAA,GAAA,UAAAv5C,CAAA,EAAAA;AACE,eAAAu5C,CAAA,CACI93B,CADJ,EAC8Di8B,CAD9D,EAC2FhzC,CAD3F,EAEI/hB,CAFJ,EAEIA;AAFJ,YAAA6U,CAAAA,GAGEwC,CAAAA,CAAApc,IAAAoc,CAAAlL,IAAAkL,EAAMyhB,CAANzhB,EAAsB0K,CAAtB1K,EAA8BrX,CAA9BqX,KAAyClL,IAH3C;AAG2CA,eAFmB0I,CAAAA,CAAAkgD,QAAAlgD,GAAAkgD,CAAAlgD,EAAAkgD,CAEnB5oD;AA6D7C;;AAAA,aAjEmCmL,CAAAA,CAAAs5C,CAAAt5C,EAAAD,CAAAC,CAAAA,EAMjCs5C,CAAAA,CAAAl0D,SAAAk0D,CAAA3sC,GAAA2sC,GAAA,UAAI1sC,CAAJ,EAA6C/mB,CAA7C,EAA6CA;AAC3C,eAAO+mB,CAAAA,CAAiBD,GAAjBC,CAAqB/X,IAArB+X,EAA2B/mB,CAA3B+mB,CAAP;AAAkC/mB,OAPHma,EASjCs5C,CAAAA,CAAAl0D,SAAAk0D,CAAA3C,iBAAA2C,GAAA,UAAkB+D,CAAlB,EAAkDx3D,CAAlD,EAAkDA;AAChD,YAAMuyD,CAAAA,GAAevyD,CAAAA,CAAOyG,GAAPzG,CAAW,UAAAnB,CAAA,EAAAA;AAAK,iBAAA24D,CAAAA,CAAQ3F,wBAAR2F,CAAiC34D,CAAjC24D,CAAA;AAAiC34D,SAAjDmB,CAArB;;AAEA,YAAA,CADqB4O,CAAAA,CAAA9L,SAAA8L,CAAU7L,QAAV6L,CAAmB5O,CAAAA,CAAO,CAAPA,CAAAA,CAAUK,IAA7BuO,EAAmC5O,CAAAA,CAAO,CAAPA,CAAAA,CAAUK,IAA7CuO,CACrB,EAAiB;AACf,cAAMjO,CAAAA,GAAciO,CAAAA,CAAAzN,aAAAyN,CAAcxN,SAAdwN,CAAwB5O,CAAAA,CAAO,CAAPA,CAAAA,CAAUK,IAAlCuO,EAAwC5O,CAAAA,CAAO,CAAPA,CAAAA,CAAUK,IAAlDuO,EAAkDvO,CAAM,CAAxDuO,CAApB;AACA,cAAA,CAAKjO,CAAL,EACE,MAAM,IAAI8D,KAAJ,CAAU,8CAAV,CAAN;AAEF,cAAMozD,CAAAA,GAAal3D,CAAAA,CAAYP,MAA/B;AAAA,cACMQ,CAAAA,GAAkC,MAA1BZ,CAAAA,CAAO,CAAPA,CAAAA,CAAUK,IAAVL,CAAeI,MAAW,GAAIJ,CAAAA,CAAO,CAAPA,CAAAA,CAAUK,IAAVL,CAAeI,MAAnB,GAA4B,CADpE;AAAA,cAEMS,CAAAA,GAAkC,MAA1Bb,CAAAA,CAAO,CAAPA,CAAAA,CAAUK,IAAVL,CAAeI,MAAW,GAAIJ,CAAAA,CAAO,CAAPA,CAAAA,CAAUK,IAAVL,CAAeI,MAAnB,GAA4B,CAFpE;AAAA,cAGM03D,CAAAA,GAAmC,MAA1B93D,CAAAA,CAAO,CAAPA,CAAAA,CAAUK,IAAVL,CAAeI,MAAW,GAAI,oCAAJ,GAA2C,kBAHpF;AAAA,cAIM23D,CAAAA,GAAmC,MAA1B/3D,CAAAA,CAAO,CAAPA,CAAAA,CAAUK,IAAVL,CAAeI,MAAW,GAAI,oCAAJ,GAA2C,kBAJpF;AAAA,cAKM43D,CAAAA,GAAe,aACnBhpD,KAAK4oD,QAAL5oD,CAAcipD,IADK,GACD,oCADC,GAEOJ,CAFP,GAEiB,6BAFjB,GAGJj3D,CAHI,GAGC,2BAHD,GAIJC,CAJI,GAIC,cAJD,GAKjBi3D,CALiB,GAKX,YALW,GAMjBC,CANiB,GAMX,mBANW,GAOV/oD,KAAK4oD,QAAL5oD,CAAc9Q,IAPJ,GAOQ,sCAZ7B;AAcA,iBAAO;AACLq0D,YAAAA,YAAAA,EAAYA,CADP;AAELD,YAAAA,YAAAA,EAAckF,CAAAA,CAAQpG,4BAARoG,CAAqC72D,CAArC62D,CAFT;AAGLhF,YAAAA,QAAAA,EAAU,CAAC,GAAD,EAAM,GAAN,CAHL;AAILC,YAAAA,YAAAA,EAAYuF;AAJP,WAAP;AAOF;;AAAA,YAAMvkD,CAAAA,GAAO4+C,CAAAA,CAAA9+C,OAAA8+C,CAAQmF,CAAAA,CAAQjrB,OAARirB,CAAgB32B,OAAhB22B,CAAwBt8C,SAAxBs8C,CAAkCzkD,OAA1Cs/C,CAAb;AAAA,YACMI,CAAAA,GAAe,WACnBzjD,KAAK4oD,QAAL5oD,CAAcipD,IADK,GACD,uCADC,GAGPxkD,CAAAA,CAAKN,SAHE,GAGO,mCAHP,GAIPM,CAAAA,CAAKN,SAJE,GAIO,uCAJP,GAKHnE,KAAK4oD,QAAL5oD,CAAc9Q,IALX,GAKe,mBALf,GAMjBuV,CAAAA,CAAKL,MANY,GAMN,yBAPf;AAUA,eAAO;AACLs/C,UAAAA,OAAAA,EAAAA,CAAS,CADJ;AAELH,UAAAA,YAAAA,EAAYA,CAFP;AAGLD,UAAAA,YAAAA,EAAckF,CAAAA,CAAQpG,4BAARoG,CAAqCx3D,CAAAA,CAAO,CAAPA,CAAAA,CAAUK,IAA/Cm3D,CAHT;AAILhF,UAAAA,QAAAA,EAAU,CAAC,GAAD,EAAM,GAAN,CAJL;AAKLC,UAAAA,YAAAA,EAAYA;AALP,SAAP;AAKcA,OArDiBt4C,EAwDjCs5C,CAAAA,CAAAl0D,SAAAk0D,CAAAxC,aAAAwC,GAAA,UAAc+D,CAAd,EAA8Cr8C,CAA9C,EAAwEnb,CAAxE,EAAwEA;AAEtE,eAAO;AACL8yD,UAAAA,iBAAAA,EAFe9yD,CAAAA,CAAOyG,GAAPzG,CAAW,UAACnB,CAAD,EAAItB,CAAJ,EAAIA;AAAM,mBAAAi6D,CAAAA,CAAQpwC,sBAARowC,CAA+B34D,CAA/B24D,EAAkCr8C,CAAAA,CAAYo3C,YAAZp3C,CAAyB5d,CAAzB4d,CAAlCq8C,CAAA;AAA2Dj6D,WAAhFyC,CACV;AAELkxD,UAAAA,iBAAAA,EAAmBsG,CAAAA,CAAQlG,2BAARkG,CACfr8C,CAAAA,CAAYm3C,YADGkF,EACWxoD,KAAKnM,UAALmM,GAAkBA,KAAKnM,UAAvBmM,GAAoChP,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IADzDs0D,CAFd;AAILzE,UAAAA,WAAAA,EAAa;AAJR,SAAP;AAIe,OA9DgB54C,EAiEnCs5C,CAAA;AAjEA,KAAA,CAAmCtyB,CAAAA,CAAAzF,QAAnC,CARA;;AAQax+B,IAAAA,CAAAA,CAAAu2D,aAAAv2D,GAAAu2D,CAAAv2D,EAmEbA,CAAAA,CAAAw2D,OAAAx2D,GAAA,YAAA;AAUE,aAAO;AAAC+6D,QAAAA,IAAAA,EARK,2HAQN;AAAO/5D,QAAAA,IAAAA,EATD,MASN;AAAagF,QAAAA,IAAAA,EAAMy0D,CAAAA,CAAA38C,YAAA28C,CAAaO;AAAhC,OAAP;AAAuCA,KA7E5Bh7D,EA+EbA,CAAAA,CAAAm3D,OAAAn3D,GAAA,YAAA;AAUE,aAAO;AAAC+6D,QAAAA,IAAAA,EARK,2HAQN;AAAO/5D,QAAAA,IAAAA,EATD,MASN;AAAagF,QAAAA,IAAAA,EAAMy0D,CAAAA,CAAA38C,YAAA28C,CAAaO;AAAhC,OAAP;AAAuCA,KAzF5Bh7D,EA2FbA,CAAAA,CAAAs4D,OAAAt4D,GAAA,YAAA;AAUE,aAAO;AAAC+6D,QAAAA,IAAAA,EARK,2HAQN;AAAO/5D,QAAAA,IAAAA,EATD,MASN;AAAagF,QAAAA,IAAAA,EAAMy0D,CAAAA,CAAA38C,YAAA28C,CAAaO;AAAhC,OAAP;AAAuCA,KArG5Bh7D,EAuGbA,CAAAA,CAAA85D,OAAA95D,GAAA,YAAA;AAUE,aAAO;AAAC+6D,QAAAA,IAAAA,EARK,2HAQN;AAAO/5D,QAAAA,IAAAA,EATD,MASN;AAAagF,QAAAA,IAAAA,EAAMy0D,CAAAA,CAAA38C,YAAA28C,CAAaO;AAAhC,OAAP;AAAuCA,KAjH5Bh7D,EAmHbA,CAAAA,CAAAq3D,SAAAr3D,GAAA,YAAA;AAUE,aAAO;AAAC+6D,QAAAA,IAAAA,EARK,gJAQN;AAAO/5D,QAAAA,IAAAA,EATD,QASN;AAAagF,QAAAA,IAAAA,EAAMy0D,CAAAA,CAAA38C,YAAA28C,CAAaO;AAAhC,OAAP;AAAuCA,KA7H5Bh7D,EA+HbA,CAAAA,CAAA83D,WAAA93D,GAAA,YAAA;AACE,UAAMgB,CAAAA,GAAO,UAAb;AAYA,aAAO;AAAC+5D,QAAAA,IAAAA,EAXK,mNAWN;AAAO/5D,QAAAA,IAAAA,EAAIA,CAAX;AAAagF,QAAAA,IAAAA,EAAMy0D,CAAAA,CAAA38C,YAAA28C,CAAaO;AAAhC,OAAP;AAAuCA,KA5I5Bh7D,EA8IbA,CAAAA,CAAAk4D,QAAAl4D,GAAA,YAAA;AAaE,aAAO;AAAC+6D,QAAAA,IAAAA,EAXK,2OAWN;AAAO/5D,QAAAA,IAAAA,EAZD,OAYN;AAAagF,QAAAA,IAAAA,EAAMy0D,CAAAA,CAAA38C,YAAA28C,CAAaO;AAAhC,OAAP;AAAuCA,KA3J5Bh7D,EA6JbA,CAAAA,CAAAy2D,OAAAz2D,GAAA,YAAA;AAeE,aAAO;AAAC+6D,QAAAA,IAAAA,EAbK,kTAaN;AAAO/5D,QAAAA,IAAAA,EAdD,MAcN;AAAagF,QAAAA,IAAAA,EAAMy0D,CAAAA,CAAA38C,YAAA28C,CAAaO;AAAhC,OAAP;AAAuCA,KA5K5Bh7D,EA8KbA,CAAAA,CAAAy4D,MAAAz4D,GAAA,YAAA;AAeE,aAAO;AAAC+6D,QAAAA,IAAAA,EAbK,gTAaN;AAAO/5D,QAAAA,IAAAA,EAdD,KAcN;AAAagF,QAAAA,IAAAA,EAAMy0D,CAAAA,CAAA38C,YAAA28C,CAAaO;AAAhC,OAAP;AAAuCA,KA7L5Bh7D,EA+LbA,CAAAA,CAAAq6D,OAAAr6D,GAAA,YAAA;AAeE,aAAO;AAAC+6D,QAAAA,IAAAA,EAbK,kTAaN;AAAO/5D,QAAAA,IAAAA,EAdD,MAcN;AAAagF,QAAAA,IAAAA,EAAMy0D,CAAAA,CAAA38C,YAAA28C,CAAaO;AAAhC,OAAP;AAAuCA,KA9M5Bh7D,EAgNbA,CAAAA,CAAA24D,OAAA34D,GAAA,YAAA;AACE,aAoBF,UAA2Bi7D,CAA3B,EAA2BA;AACzB,YAAMj6D,CAAAA,GAAUi6D,CAAAA,GAAK,GAArB;AASA,eAAO;AAACF,UAAAA,IAAAA,EARK,eACL/5D,CADK,GACD,mCADC,GAEFi6D,CAFE,GAEG,uBAFH,GAINj6D,CAJM,GAIF,mCAJE,GAKFi6D,CALE,GAKG,oBAGT;AAAOj6D,UAAAA,IAAAA,EAAIA,CAAX;AAAagF,UAAAA,IAAAA,EAAMy0D,CAAAA,CAAA38C,YAAA28C,CAAaO;AAAhC,SAAP;AA9BOE,OAoBT,CApB2B,KAoB3B,CApBE;AAAyB,KAjNdl7D,EAmNbA,CAAAA,CAAA44D,SAAA54D,GAAA,YAAA;AAeE,aAAO;AAAC+6D,QAAAA,IAAAA,EAbK,8SAaN;AAAO/5D,QAAAA,IAAAA,EAdD,QAcN;AAAagF,QAAAA,IAAAA,EAAMy0D,CAAAA,CAAA38C,YAAA28C,CAAaO;AAAhC,OAAP;AAAuCA,KAlO5Bh7D;AAkO4Bg7D,GvH3JzC,EuH2JyCA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,QAAAA,CAAAA;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,SAAAA,KAAAA,CAAAA,GAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,CAAAA,CAAAA,GAAAA,MAAAA,CAAAA,cAAAA,IAAAA;AAAAA,QAAAA,SAAAA,EAAAA;AAAAA,mBAAAA,KAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,QAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA;AAAAA,OAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,IAAAA,CAAAA,IAAAA,CAAAA,EAAAA,CAAAA,CAAAA,cAAAA,CAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,OAAAA,EAAAA,CAAAA,EAAAA,CAAAA,CAAAA;AAAAA,KAAAA,EAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,eAAAA,CAAAA,GAAAA;AAAAA,aAAAA,WAAAA,GAAAA,CAAAA;AAAAA;;AAAAA,MAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,SAAAA,GAAAA,SAAAA,CAAAA,GAAAA,MAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA,CAAAA,SAAAA,EAAAA,IAAAA,CAAAA,EAAAA,CAAAA;AAAAA,KAAAA,CAAAA;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;AC1OzC,QAAA7L,CAAAA,GAAA3uD,CAAAA,CAAA,EAAAA,CAAA;AAAA,QAEA20D,CAAAA,GAAA30D,CAAAA,CAAA,CAAAA,CAFA;AAAA,QAMAu2D,CAAAA,GAAA,UAAA/5C,CAAA,EAAAA;AAAA,eAAA+5C,CAAA,GAAAA;AAAAA,eAAAA,SAAAA,CAAAA,IAAAA,CAAAA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,SAAAA,CAAAA,IAAAA,IAAAA;AA+BA;;AAAA,aA/B+B95C,CAAAA,CAAA85C,CAAA95C,EAAAD,CAAAC,CAAAA,EAC7B85C,CAAAA,CAAA10D,SAAA00D,CAAAntC,GAAAmtC,GAAA,UAAIltC,CAAJ,EAA6C/mB,CAA7C,EAA6CA;AAC3C,eAAO+mB,CAAAA,CAAiBD,GAAjBC,CAAqB/X,IAArB+X,EAA2B/mB,CAA3B+mB,CAAP;AAAkC/mB,OAFPma,EAI7B85C,CAAAA,CAAA10D,SAAA00D,CAAAnD,iBAAAmD,GAAA,UAAkBuD,CAAlB,EAAkDx3D,CAAlD,EAAkDA;AAChD,YAAMW,CAAAA,GAAcX,CAAAA,CAAO,CAAPA,CAAAA,CAAUK,IAAVL,CAAe+H,KAAf/H,EAApB;AAAA,YACMyT,CAAAA,GAAO4+C,CAAAA,CAAA9+C,OAAA8+C,CAAQmF,CAAAA,CAAQjrB,OAARirB,CAAgB32B,OAAhB22B,CAAwBt8C,SAAxBs8C,CAAkCzkD,OAA1Cs/C,CADb;AAAA,YAEMI,CAAAA,GAAe,qCACOzjD,KAAKyd,GADZ,GACe,oCADf,GAEOzd,KAAKpN,GAFZ,GAEe,6CAFf,GAIL6R,CAAAA,CAAKN,SAJA,GAIS,6BAJT,GAKfM,CAAAA,CAAKL,MALU,GAKJ,+CAPjB;AAUA,eAAO;AACLm/C,UAAAA,YAAAA,EAAc,CAACiF,CAAAA,CAAQ3F,wBAAR2F,CAAiCx3D,CAAAA,CAAO,CAAPA,CAAjCw3D,CAAD,CADT;AAELlF,UAAAA,YAAAA,EAAckF,CAAAA,CAAQpG,4BAARoG,CAAqC72D,CAArC62D,CAFT;AAGLhF,UAAAA,QAAAA,EAAU,CAAC,GAAD,CAHL;AAILC,UAAAA,YAAAA,EAAYA,CAJP;AAKLC,UAAAA,OAAAA,EAAAA,CAAS;AALJ,SAAP;AAKW,OApBgBv4C,EAuB7B85C,CAAAA,CAAA10D,SAAA00D,CAAAhD,aAAAgD,GAAA,UAAcuD,CAAd,EAA8Cr8C,CAA9C,EAAwEnb,CAAxE,EAAwEA;AACtE,YAAMy3D,CAAAA,GAAW,CAACD,CAAAA,CAAQpwC,sBAARowC,CAA+Bx3D,CAAAA,CAAO,CAAPA,CAA/Bw3D,EAA0Cr8C,CAAAA,CAAYo3C,YAAZp3C,CAAyB,CAAzBA,CAA1Cq8C,CAAD,CAAjB;AACA,eAAO;AACL1E,UAAAA,iBAAAA,EAAmB2E,CADd;AAELvG,UAAAA,iBAAAA,EAAmBsG,CAAAA,CAAQlG,2BAARkG,CAAoCr8C,CAAAA,CAAYm3C,YAAhDkF,EAA8DC,CAAAA,CAAS,CAATA,CAAAA,CAAY3vC,MAAZ2vC,CAAmBv0D,IAAjFs0D,CAFd;AAGLzE,UAAAA,WAAAA,EAAa;AAHR,SAAP;AAGe,OA5BY54C,EA+B/B85C,CAAA;AA/BA,KAAA,CAA+B5H,CAAAA,CAAAliB,IAA/B,CANA;;AAMajtC,IAAAA,CAAAA,CAAA+2D,SAAA/2D,GAAA+2D,CAAA/2D;AAAA+2D,GxHyEb,EwHzEaA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,QAAAA,CAAAA;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,SAAAA,KAAAA,CAAAA,GAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,CAAAA,CAAAA,GAAAA,MAAAA,CAAAA,cAAAA,IAAAA;AAAAA,QAAAA,SAAAA,EAAAA;AAAAA,mBAAAA,KAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,QAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA;AAAAA,OAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,IAAAA,CAAAA,IAAAA,CAAAA,EAAAA,CAAAA,CAAAA,cAAAA,CAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,OAAAA,EAAAA,CAAAA,EAAAA,CAAAA,CAAAA;AAAAA,KAAAA,EAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,eAAAA,CAAAA,GAAAA;AAAAA,aAAAA,WAAAA,GAAAA,CAAAA;AAAAA;;AAAAA,MAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,SAAAA,GAAAA,SAAAA,CAAAA,GAAAA,MAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA,CAAAA,SAAAA,EAAAA,IAAAA,CAAAA,EAAAA,CAAAA;AAAAA,KAAAA,CAAAA;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;ACNb,QAKAC,CAAAA,GAAA,UAAAh6C,CAAA,EAAAA;AAAA,eAAAg6C,CAAA,GAAAA;AAAAA,eAAAA,SAAAA,CAAAA,IAAAA,CAAAA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,SAAAA,CAAAA,IAAAA,IAAAA;AA4IA;;AAAA,aA5IiC/5C,CAAAA,CAAA+5C,CAAA/5C,EAAAD,CAAAC,CAAAA,EAC/B+5C,CAAAA,CAAA30D,SAAA20D,CAAAptC,GAAAotC,GAAA,UAAIntC,CAAJ,EAA6C/mB,CAA7C,EAA6CA;AAC3C,eAAO+mB,CAAAA,CAAiBD,GAAjBC,CAAqB/X,IAArB+X,EAA2B/mB,CAA3B+mB,CAAP;AAAkC/mB,OAFLma,EAI/B+5C,CAAAA,CAAA30D,SAAA20D,CAAApD,iBAAAoD,GAAA,UAAkBsD,CAAlB,EAAkDx3D,CAAlD,EAAkDA;AAChD,YAAMmzC,CAAAA,GAAanzC,CAAAA,CAAO,CAAPA,CAAAA,CAAUK,IAAVL,CAAe+H,KAAf/H,EAAnB;AACA,YAAIgP,KAAKzH,IAALyH,IAAamkC,CAAAA,CAAW/yC,MAAxB4O,IAAkCA,KAAKzH,IAALyH,GAAKzH,CAAS,CAATA,GAAa4rC,CAAAA,CAAW/yC,MAAnE,EACE,MAAM,IAAIqE,KAAJ,CAAU,8DAAV,CAAN;AAEEuK,aAAKzH,IAALyH,GAAY,CAAZA,KACFA,KAAKzH,IAALyH,GAAYmkC,CAAAA,CAAW/yC,MAAX+yC,GAAoBnkC,KAAKzH,IADnCyH;;AAMJ,aADA,IAAMrO,CAAAA,GAAcwyC,CAAAA,CAAWprC,KAAXorC,CAAiB,CAAjBA,CAApB,EACS51C,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAIyC,CAAAA,CAAOI,MAA3B,EAAmC7C,CAAAA,EAAnC,EAEE,KADA,IAAM81C,CAAAA,GAAarzC,CAAAA,CAAOzC,CAAPyC,CAAAA,CAAUK,IAAVL,CAAe+H,KAAf/H,EAAnB,EACSuzC,CAAAA,GAAY,CAArB,EAAwBA,CAAAA,GAAYJ,CAAAA,CAAW/yC,MAA/C,EAAuDmzC,CAAAA,EAAvD,EAEE,IAAIA,CAAAA,KAAcvkC,KAAKzH,IAAvB,EACE5G,CAAAA,CAAYqO,KAAKzH,IAAjB5G,CAAAA,IAA0B0yC,CAAAA,CAAWE,CAAXF,CAA1B1yC,CADF,KAIK,IAAIwyC,CAAAA,CAAWI,CAAXJ,CAAAA,KAA0BE,CAAAA,CAAWE,CAAXF,CAA9B,EACH,MAAM,IAAI5uC,KAAJ,CAAU,kCAAV,CAAN;;AAKN,YAAMmD,CAAAA,GAAOjH,CAAAA,CAAYP,MAAzB;AAAA,YAEIi4D,CAAAA,GAAwC,EAF5C;AAKEA,QAAAA,CAAAA,GADEr4D,CAAAA,CAAOI,MAAPJ,GAAgB,CAAhBA,GACsCgP,KAAKspD,2CAALtpD,CAAiDhP,CAAAA,CAAOI,MAAxD4O,CADtChP,GAGsCgP,KAAKupD,2CAALvpD,CAAiDhP,CAAAA,CAAOI,MAAxD4O,CAFxCqpD;AAKF,YAAMG,CAAAA,GAAoCxpD,KAAKwpD,iCAALxpD,CAAuChP,CAAAA,CAAOI,MAA9C4O,EAAsDpH,CAAtDoH,CAA1C;AAAA,YACMypD,CAAAA,GAA+BzpD,KAAKypD,4BAALzpD,CAAkChP,CAAAA,CAAOI,MAAzC4O,CADrC;AAAA,YAEMwjD,CAAAA,GAAWxyD,CAAAA,CAAOyG,GAAPzG,CAAW,UAACmJ,CAAD,EAAI5L,CAAJ,EAAIA;AAAM,iBAAA,MAAIA,CAAJ;AAAIA,SAAzByC,CAFjB;AAAA,YAGMyyD,CAAAA,GAAe,aACjB+F,CADiB,GACgB,UADhB,GAEjBC,CAFiB,GAEW,UAFX,GAGjBJ,CAHiB,GAGoB,oCAHpB,GAISzwD,CAJT,GAIa,uEAJb,GAKwCoH,KAAKzH,IAL7C,GAKiD,4DALjD,GAQLyH,KAAKzH,IARA,GAQI,cARJ,GASjByH,KAAKzH,IATY,GASR,mKAZb;AAiBA,eAAO;AACLgrD,UAAAA,YAAAA,EAAcvyD,CAAAA,CAAOyG,GAAPzG,CAAW,UAAAnB,CAAA,EAAAA;AAAK,mBAAA24D,CAAAA,CAAQ3F,wBAAR2F,CAAiC34D,CAAjC24D,CAAA;AAAiC34D,WAAjDmB,CADT;AAELsyD,UAAAA,YAAAA,EAAckF,CAAAA,CAAQpG,4BAARoG,CAAqC72D,CAArC62D,CAFT;AAGLhF,UAAAA,QAAAA,EAAQA,CAHH;AAILkG,UAAAA,SAAAA,EAAW,CAAC;AAACx6D,YAAAA,IAAAA,EAAM,kBAAP;AAA2BgF,YAAAA,IAAAA,EAAM,KAAjC;AAAwCy1D,YAAAA,WAAAA,EAAa34D,CAAAA,CAAOI;AAA5D,WAAD,CAJN;AAKLqyD,UAAAA,YAAAA,EAAYA;AALP,SAAP;AAKcA,OA7Det4C,EAgE/B+5C,CAAAA,CAAA30D,SAAA20D,CAAAjD,aAAAiD,GAAA,UAAcsD,CAAd,EAA8Cr8C,CAA9C,EAAwEnb,CAAxE,EAAwEA;AAItE,aAHA,IAAMy3D,CAAAA,GAAWz3D,CAAAA,CAAOyG,GAAPzG,CAAW,UAACnB,CAAD,EAAItB,CAAJ,EAAIA;AAAM,iBAAAi6D,CAAAA,CAAQpwC,sBAARowC,CAA+B34D,CAA/B24D,EAAkCr8C,CAAAA,CAAYo3C,YAAZp3C,CAAyB5d,CAAzB4d,CAAlCq8C,CAAA;AAA2Dj6D,SAAhFyC,CAAjB,EACM44D,CAAAA,GAAmB,IAAI92D,KAAJ,CAAkBqZ,CAAAA,CAAYo3C,YAAZp3C,CAAyB/a,MAA3C,CADzB,EAEIy4D,CAAAA,GAAc,CAFlB,EAGSt7D,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAI4d,CAAAA,CAAYo3C,YAAZp3C,CAAyB/a,MAA7C,EAA6CA,EAAU7C,CAAvD,EACEs7D,CAAAA,IAAe19C,CAAAA,CAAYo3C,YAAZp3C,CAAyB5d,CAAzB4d,EAA4BpX,KAA5BoX,CAAkCnM,KAAKzH,IAAvC4T,CAAf09C,EACAD,CAAAA,CAAiBr7D,CAAjBq7D,CAAAA,GAAsBC,CADtBA;;AAGF,YAAM9F,CAAAA,GAAc;AAAC6F,UAAAA,gBAAAA,EAAoBA;AAArB,SAApB;AACA,eAAO;AACL9F,UAAAA,iBAAAA,EAAmB2E,CADd;AAELvG,UAAAA,iBAAAA,EAAmBsG,CAAAA,CAAQlG,2BAARkG,CAAoCr8C,CAAAA,CAAYm3C,YAAhDkF,EAA8DC,CAAAA,CAAS,CAATA,CAAAA,CAAY3vC,MAAZ2vC,CAAmBv0D,IAAjFs0D,CAFd;AAGLzE,UAAAA,WAAAA,EAAWA;AAHN,SAAP;AAGaA,OA5EgB54C,EA+EvB+5C,CAAAA,CAAA30D,SAAA20D,CAAAoE,2CAAApE,GAAR,UAAoD4E,CAApD,EAAoDA;AAClD,eAAO,uEACYA,CADZ,GAC2B,qHADlC;AACkC,OAjFL3+C,EA0FvB+5C,CAAAA,CAAA30D,SAAA20D,CAAAqE,2CAAArE,GAAR,UAAoD4E,CAApD,EAAoDA;AAClD,eAAO9pD,KAAKspD,2CAALtpD,CAAiD8pD,CAAjD9pD,CAAP;AAAwD8pD,OA3F3B3+C,EA8FvB+5C,CAAAA,CAAA30D,SAAA20D,CAAAsE,iCAAAtE,GAAR,UAA0C4E,CAA1C,EAAmEzwD,CAAnE,EAAmEA;AAEjE,aADA,IAAM0wD,CAAAA,GAAsB,CAAC,qEAAmE1wD,CAAnE,GAA6E,MAA9E,CAA5B,EACS9K,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAIu7D,CAApB,EAAoBA,EAAmBv7D,CAAvC,EACY,MAANA,CAAM,GACRw7D,CAAAA,CAAUjuD,IAAViuD,CACI,2BACuBx7D,CADvB,GACwB,eADxB,GACwCA,CADxC,GACyC,cAF7Cw7D,CADQ,GAICx7D,CAAAA,KAAMu7D,CAAAA,GAAkB,CAAxBv7D,GACTw7D,CAAAA,CAAUjuD,IAAViuD,CACI,uBACmBx7D,CADnB,GACoB,cAFxBw7D,CADSx7D,GAKTw7D,CAAAA,CAAUjuD,IAAViuD,CACI,gCAC4Bx7D,CAD5B,GAC6B,eAD7B,GAC6CA,CAD7C,GAC8C,cAFlDw7D,CATQ;;AAiBZ,eAHAA,CAAAA,CAAUjuD,IAAViuD,CACI,KADJA,GAGOA,CAAAA,CAAU7vC,IAAV6vC,CAAe,IAAfA,CAAP;AAAsB,OAlHO5+C,EAqHvB+5C,CAAAA,CAAA30D,SAAA20D,CAAAuE,4BAAAvE,GAAR,UAAqC8E,CAArC,EAAqCA;AAEnC,aADA,IAAMD,CAAAA,GAAsB,CAAC,wCAAsCC,CAAtC,GAA+C,iBAAhD,CAA5B,EACSz7D,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAIy7D,CAApB,EAAoBA,EAAaz7D,CAAjC,EACY,MAANA,CAAM,GACRw7D,CAAAA,CAAUjuD,IAAViuD,CACI,oBACgBx7D,CADhB,GACiB,iBADjB,GACmCA,CADnC,GACoC,MAFxCw7D,CADQ,GAICx7D,CAAAA,KAAMy7D,CAAAA,GAAY,CAAlBz7D,GACTw7D,CAAAA,CAAUjuD,IAAViuD,CACI,yBACqBx7D,CADrB,GACsB,MAF1Bw7D,CADSx7D,GAKTw7D,CAAAA,CAAUjuD,IAAViuD,CACI,yBACqBx7D,CADrB,GACsB,iBADtB,GACwCA,CADxC,GACyC,MAF7Cw7D,CATQ;;AAkBZ,eAJAA,CAAAA,CAAUjuD,IAAViuD,CACI,KADJA,GAIOA,CAAAA,CAAU7vC,IAAV6vC,CAAe,IAAfA,CAAP;AAAsB,OA1IO5+C,EA4IjC+5C,CAAA;AA5IA,KAAA,CALAx2D,CAAAA,CAAA,EAAAA,CAAAA,CAKiC+qC,MAAjC,CALA;;AAKavrC,IAAAA,CAAAA,CAAAg3D,WAAAh3D,GAAAg3D,CAAAh3D;AAAAg3D,GzH0Eb,EyH1EaA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,QAAAA,CAAAA;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,SAAAA,KAAAA,CAAAA,GAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,CAAAA,CAAAA,GAAAA,MAAAA,CAAAA,cAAAA,IAAAA;AAAAA,QAAAA,SAAAA,EAAAA;AAAAA,mBAAAA,KAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,QAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA;AAAAA,OAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,IAAAA,CAAAA,IAAAA,CAAAA,EAAAA,CAAAA,CAAAA,cAAAA,CAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,OAAAA,EAAAA,CAAAA,EAAAA,CAAAA,CAAAA;AAAAA,KAAAA,EAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,eAAAA,CAAAA,GAAAA;AAAAA,aAAAA,WAAAA,GAAAA,CAAAA;AAAAA;;AAAAA,MAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,SAAAA,GAAAA,SAAAA,CAAAA,GAAAA,MAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA,CAAAA,SAAAA,EAAAA,IAAAA,CAAAA,EAAAA,CAAAA;AAAAA,KAAAA,CAAAA;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,MAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,UAAAA,CAAAA,GAAAA,cAAAA,OAAAA,MAAAA,IAAAA,CAAAA,CAAAA,MAAAA,CAAAA,QAAAA,CAAAA;AAAAA,UAAAA,CAAAA,CAAAA,EAAAA,OAAAA,CAAAA;AAAAA,UAAAA,CAAAA;AAAAA,UAAAA,CAAAA;AAAAA,UAAAA,CAAAA,GAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA;AAAAA,UAAAA,CAAAA,GAAAA,EAAAA;;AAAAA,UAAAA;AAAAA,eAAAA,CAAAA,KAAAA,CAAAA,KAAAA,CAAAA,IAAAA,CAAAA,KAAAA,CAAAA,KAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,IAAAA,EAAAA,EAAAA,IAAAA,GAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,KAAAA;AAAAA,OAAAA,CAAAA,OAAAA,CAAAA,EAAAA;AAAAA,QAAAA,CAAAA,GAAAA;AAAAA,UAAAA,KAAAA,EAAAA;AAAAA,SAAAA;AAAAA,OAAAA,SAAAA;AAAAA,YAAAA;AAAAA,UAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,IAAAA,KAAAA,CAAAA,GAAAA,CAAAA,CAAAA,MAAAA,KAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA;AAAAA,SAAAA,SAAAA;AAAAA,cAAAA,CAAAA,EAAAA,MAAAA,CAAAA,CAAAA,KAAAA;AAAAA;AAAAA;;AAAAA,aAAAA,CAAAA;AAAAA,KAAAA;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,QAAAA,IAAAA,YAAAA;AAAAA,WAAAA,IAAAA,CAAAA,GAAAA,EAAAA,EAAAA,CAAAA,GAAAA,CAAAA,EAAAA,CAAAA,GAAAA,SAAAA,CAAAA,MAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,GAAAA,CAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,SAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA;;AAAAA,aAAAA,CAAAA;AAAAA,KAAAA;;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;ACLb,QAAA97C,CAAAA,GAAA1a,CAAAA,CAAA,CAAAA,CAAA;AAAA,QACA2jC,CAAAA,GAAA3jC,CAAAA,CAAA,EAAAA,CADA;AAAA,QAGAkR,CAAAA,GAAAlR,CAAAA,CAAA,CAAAA,CAHA;AAAA,QAIA20D,CAAAA,GAAA30D,CAAAA,CAAA,CAAAA,CAJA;AAAA,QASAy2D,CAAAA,GAAA,UAAAj6C,CAAA,EAAAA;AAAA,eAAAi6C,CAAA,GAAAA;AAAA,YAAAz8C,CAAAA,GAAA,SAAAwC,CAAA,IAAAA,CAAAA,CAAAkT,KAAAlT,CAAAlL,IAAAkL,EAAA/Z,SAAA+Z,CAAA,IAAAlL,IAAA;AAAAA,eAgRY0I,CAAAA,CAAAuhD,QAAAvhD,GAAW,CAAXA,EACAA,CAAAA,CAAAlT,SAAAkT,GAAY,EADZA,EACY,CAjRxB1I;AAkRA;;AAAA,aAlR+BmL,CAAAA,CAAAg6C,CAAAh6C,EAAAD,CAAAC,CAAAA,EAC7Bg6C,CAAAA,CAAA50D,SAAA40D,CAAArtC,GAAAqtC,GAAA,UAAIptC,CAAJ,EAA6C/mB,CAA7C,EAA6CA;AAC3C,YAAMovD,CAAAA,GAAiBroC,CAAAA,CAAiBwlB,OAAjBxlB,CAAyBqoC,cAAhD;;AACA,YAAA,CAAKpgD,KAAKkqD,SAAV,EAAqB;AACnBlqD,eAAKkqD,SAALlqD,GAAiB,EAAjBA;;AAEA,eADA,IAAMmqD,CAAAA,GAAenqD,KAAKoqD,kBAALpqD,CAAwB+X,CAAxB/X,EAA0ChP,CAA1CgP,CAArB,EACSzR,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAI47D,CAAAA,CAAa/4D,MAAjC,EAAiCA,EAAU7C,CAA3C,EAA8C;AAC5C,gBAAMqzD,CAAAA,GAAW7pC,CAAAA,CAAiBwlB,OAAjBxlB,CAAyBqoC,cAAzBroC,CAAwCwnB,KAAxCxnB,CAA8CoyC,CAAAA,CAAa57D,CAAb47D,CAA9CpyC,CAAjB;AACA/X,iBAAKkqD,SAALlqD,CAAelE,IAAfkE,CAAoB4hD,CAApB5hD;AAAoB4hD;AAGxB;;AAAA,YAAMyI,CAAAA,GAAWrqD,KAAKsqD,cAALtqD,CAAoB+X,CAApB/X,EAAsCA,KAAKkqD,SAALlqD,CAAevI,GAAfuI,CAAmB,UAAA1R,CAAA,EAAAA;AAAK,iBAAAA,CAAAA,CAAE6d,WAAF;AAAEA,SAA1BnM,CAAtCA,EAA8EhP,CAA9EgP,CAAjB;AAGA,eAFAogD,CAAAA,CAAetoC,GAAfsoC,CAAmBpgD,KAAKkqD,SAALlqD,CAAe,CAAfA,CAAnBogD,EAAsCiK,CAAAA,CAAS,CAATA,CAAtCjK,GACAA,CAAAA,CAAetoC,GAAfsoC,CAAmBpgD,KAAKkqD,SAALlqD,CAAe,CAAfA,CAAnBogD,EAAsCiK,CAAAA,CAAS,CAATA,CAAtCjK,CADAA,EAEO,CAACiK,CAAAA,CAAS,CAATA,CAAAA,CAAYnI,iBAAZmI,CAA8BvxC,MAA/B,CAAP;AAAsCA,OAdX3N,EAgB7Bg6C,CAAAA,CAAA50D,SAAA40D,CAAAiF,kBAAAjF,GAAA,UAAmBptC,CAAnB,EAA4D/mB,CAA5D,EAA4DA;AAC1D,YAAMu5D,CAAAA,GAASv5D,CAAAA,CAAO,CAAPA,CAAAA,CAAUK,IAAVL,CAAe+H,KAAf/H,EAAf;AAAA,YACMw5D,CAAAA,GAASx5D,CAAAA,CAAO,CAAPA,CAAAA,CAAUK,IAAVL,CAAe+H,KAAf/H,EADf;AAGA,YAAgC,MAA5BgP,KAAKtB,WAALsB,CAAiB5O,MAArB,EAEE,KADA,IAAM4zC,CAAAA,GAAQh0C,CAAAA,CAAO,CAAPA,CAAAA,CAAUK,IAAxB,EACS9C,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAIy2C,CAAAA,CAAM5zC,MAA1B,EAA0BA,EAAU7C,CAApC,EACEyR,KAAKtB,WAALsB,CAAiBlE,IAAjBkE,CAAsBglC,CAAAA,CAAMz2C,CAANy2C,CAAtBhlC;AAGJJ,QAAAA,CAAAA,CAAAtB,YAAAsB,CAAahB,wBAAbgB,CACI5O,CAAAA,CAAO,CAAPA,CAAAA,CAAUK,IADduO,EACoBI,KAAKnH,OADzB+G,EACkCI,KAAKnB,SADvCe,EACkDI,KAAKtB,WADvDkB,EACoEI,KAAKrB,IADzEiB,EAC+EI,KAAKlB,OADpFc,GAEAwJ,CAAAA,CAAAxC,MAAAwC,CAAO9D,OAAP8D,CACI,MADJA,EAEI,aAAWpJ,KAAKlB,OAAhB,GAAuB,cAAvB,GAAsCkB,KAAKnB,SAA3C,GAAoD,UAApD,GAA+DmB,KAAK+sB,KAApE,GAAyE,gBAAzE,GACI/sB,KAAKtB,WADT,GACoB,SADpB,GAC8BsB,KAAKrB,IADnC,GACuC,YADvC,GACoDqB,KAAKnH,OAH7DuQ,CAFAxJ;AAMA,YAAMjO,CAAAA,GAAcwzD,CAAAA,CAAUsF,eAAVtF,CAA0BoF,CAA1BpF,EAAkCqF,CAAlCrF,EAA0CnlD,KAAKnB,SAA/CsmD,EAA0DnlD,KAAKrB,IAA/DwmD,EAAqEnlD,KAAKnH,OAA1EssD,CAApB;AAAA,YACMuF,CAAAA,GAAoB1qD,KAAK2qD,uBAAL3qD,CAA6B+X,CAA7B/X,EAA+ChP,CAA/CgP,EAAuDrO,CAAvDqO,CAD1B;AAIA,eAAO,CAAC0qD,CAAD,EADH1qD,KAAK4qD,2BAAL5qD,CAAiC+X,CAAjC/X,EAAmD0qD,CAAAA,CAAkBpH,YAArEtjD,EAAmFhP,CAAnFgP,EAA2FrO,CAA3FqO,CACG,CAAP;AAD+FrO,OAnCpEwZ,EAsC7Bg6C,CAAAA,CAAA50D,SAAA40D,CAAAmF,cAAAnF,GAAA,UAAeptC,CAAf,EAAwDoyC,CAAxD,EAAqFn5D,CAArF,EAAqFA;AACnF,YAAMwI,CAAAA,GAAIxI,CAAAA,CAAO,CAAPA,CAAV;AAAA,YACMiB,CAAAA,GAAIjB,CAAAA,CAAOI,MAAPJ,IAAiB,CAAjBA,GAAqBA,CAAAA,CAAO,CAAPA,CAArBA,GAA4B,KAAKkB,CAD3C;AAAA,YAEI24D,CAAAA,GAAM9yC,CAAAA,CAAiBqpC,cAAjBrpC,CAAgCve,CAAAA,CAAEsE,MAAlCia,CAFV;;AAGA,YAAA,CAAK8yC,CAAL,EAAU;AACRzhD,UAAAA,CAAAA,CAAAxC,MAAAwC,CAAO9D,OAAP8D,CAAe,MAAfA,EAAuB,qEAAvBA;AACA,cAAM0hD,CAAAA,GACF3F,CAAAA,CAAU4F,uBAAV5F,CAAkC3rD,CAAAA,CAAEnI,IAAFmI,CAAOT,KAAPS,EAAlC2rD,EAAkDnlD,KAAK+sB,KAAvDo4B,EAA8D,CAA9DA,EAAiE3rD,CAAAA,CAAE2I,SAAnEgjD,CADJ;AAGA0F,UAAAA,CAAAA,GAAM9yC,CAAAA,CAAiBwqC,qCAAjBxqC,CACFoyC,CAAAA,CAAa,CAAbA,CAAAA,CAAgB5G,YAAhB4G,CAA6B,CAA7BA,CADEpyC,EAC+Bve,CAAAA,CAAEtF,IADjC6jB,EACuC+yC,CADvC/yC,EACsDve,CADtDue,CAAN8yC;AAGF;;AAAA,YAAMG,CAAAA,GAAiB;AACrBlH,UAAAA,iBAAAA,EAAmB,CAAC/rC,CAAAA,CAAiBK,sBAAjBL,CAAwC/mB,CAAAA,CAAO,CAAPA,CAAxC+mB,CAAD,CADE;AAErBmqC,UAAAA,iBAAAA,EAAmBnqC,CAAAA,CAAiBuqC,2BAAjBvqC,CAA6CoyC,CAAAA,CAAa,CAAbA,CAAAA,CAAgB7G,YAA7DvrC,EAA2E/mB,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IAArF6jB,CAFE;AAGrBgsC,UAAAA,WAAAA,EAAa;AAHQ,SAAvB;AAAA,YAKM0E,CAAAA,GAAW,CAACuC,CAAAA,CAAe9I,iBAAhB,EAAmC2I,CAAnC,CALjB;AA4CA,eAtCI54D,CAAAA,IACFw2D,CAAAA,CAAS3sD,IAAT2sD,CAAc1wC,CAAAA,CAAiBK,sBAAjBL,CAAwC9lB,CAAxC8lB,CAAd0wC,CADEx2D,EAsCG,CAAC+4D,CAAD,EAlCmB;AACxBlH,UAAAA,iBAAAA,EAAmB2E,CADK;AAExBvG,UAAAA,iBAAAA,EAHenqC,CAAAA,CAAiBuqC,2BAAjBvqC,CAA6CoyC,CAAAA,CAAa,CAAbA,CAAAA,CAAgB7G,YAA7DvrC,EAA2E/mB,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IAArF6jB,CACS;AAGxBgsC,UAAAA,WAAAA,EAAa,EAHW;AAIxBkH,UAAAA,IAAAA,EAAM,UAAC/+C,CAAD,EAA0B01C,CAA1B,EAA0BA;AAM9B,iBALA,IAAMsJ,CAAAA,GAAKh/C,CAAAA,CAAUg/C,EAArB,EACMC,CAAAA,GAAYvJ,CAAAA,CAASz1C,WAATy1C,CAAqBp2C,MAArBo2C,CAA6BuJ,SAD/C,EAEMC,CAAAA,GAAoBxJ,CAAAA,CAASz1C,WAATy1C,CAAqBp2C,MAArBo2C,CAA6BwJ,iBAFvD,EAGMC,CAAAA,GAA0BzJ,CAAAA,CAAS0J,gBAAT1J,CAA0B2J,IAA1B3J,CAA+B,UAAAhzD,CAAA,EAAAA;AAAK,qBAAW,sBAAXA,CAAAA,CAAEM,IAAF;AAAEA,aAAtC0yD,EAAmEvQ,QAHnG,EAIIma,CAAAA,GAAAA,CAAQ,CAJZ,EAKSC,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAIN,CAApB,EAA+BM,CAAAA,IAAKL,CAApC,EACEhiD,CAAAA,CAAAxC,MAAAwC,CAAO9D,OAAP8D,CAAe,UAAfA,EAA2B,SAAOqiD,CAAP,GAAQ,eAAR,GAAwBN,CAAxB,GAAiC,eAAjC,GAAiDC,CAA5EhiD,GAEIqiD,CAAAA,KAAML,CAANK,KACFD,CAAAA,GAAAA,CAAQ,CAARA,EACAN,CAAAA,CAAGQ,MAAHR,CAAUA,CAAAA,CAAGS,KAAbT,CADAM,EAEAt/C,CAAAA,CAAU0/C,UAAV1/C,EAFAs/C,EAGAN,CAAAA,CAAGW,aAAHX,CAAiBA,CAAAA,CAAGY,QAApBZ,CAHAM,EAIAt/C,CAAAA,CAAU0/C,UAAV1/C,EAJAs/C,EAKAN,CAAAA,CAAGa,SAAHb,CAAaA,CAAAA,CAAGplC,GAAhBolC,EAAqBA,CAAAA,CAAGplC,GAAxBolC,CALAM,EAMAt/C,CAAAA,CAAU0/C,UAAV1/C,EAPEu/C,CAFJriD,EAYA8hD,CAAAA,CAAGc,SAAHd,CAAaG,CAAbH,EAAsCO,CAAtCP,CAZA9hD,EAaA8C,CAAAA,CAAU0/C,UAAV1/C,EAbA9C,EAcA8C,CAAAA,CAAU++C,IAAV/+C,EAdA9C;;AAiBEoiD,YAAAA,CAAAA,KACFN,CAAAA,CAAGe,OAAHf,CAAWA,CAAAA,CAAGS,KAAdT,GACAh/C,CAAAA,CAAU0/C,UAAV1/C,EAFEs/C,CAAAA;AAEQI;AA9BU,SAkCnB,CAAP;AAJgBA,OA1FWzgD,EAgG7Bg6C,CAAAA,CAAA50D,SAAA40D,CAAAwF,uBAAAxF,GAAA,UAAwBptC,CAAxB,EAAiE/mB,CAAjE,EAAmFW,CAAnF,EAAmFA;AAEjF,YAAM44D,CAAAA,GAASv5D,CAAAA,CAAO,CAAPA,CAAAA,CAAUK,IAAVL,CAAe+H,KAAf/H,EAAf;AAAA,YACMw5D,CAAAA,GAASx5D,CAAAA,CAAO,CAAPA,CAAAA,CAAUK,IAAVL,CAAe+H,KAAf/H,EADf;AAAA,YAGM4H,CAAAA,GAAOjH,CAAAA,CAAYP,MAHzB;AAAA,YAIM86D,CAAAA,GAAa/G,CAAAA,CAAUgH,cAAVhH,CAAyBoF,CAAzBpF,EAAiCqF,CAAjCrF,EAAyCxzD,CAAzCwzD,EAAsD,CAAtDA,CAJnB;AAAA,YAKM7B,CAAAA,GAAevrC,CAAAA,CAAiBqqC,4BAAjBrqC,CACjBm0C,CADiBn0C,EACL,CADKA,EACF,CAACm0C,CAAAA,CAAW,CAAXA,CAAD,EAAgBA,CAAAA,CAAW,CAAXA,CAAhB,EAA+BA,CAAAA,CAAW,CAAXA,CAA/B,EAA8D,IAAhBA,CAAAA,CAAW,CAAXA,CAA9C,CADEn0C,EACgE;AAACq0C,UAAAA,SAAAA,EAAW;AAAZ,SADhEr0C,CALrB;AAAA,YAOM0rC,CAAAA,GAAe,4BACF8G,CAAAA,CAAO,CAAPA,CADE,GACO,0BADP,GAEFA,CAAAA,CAAO,CAAPA,CAFE,GAEO,0BAFP,GAGFA,CAAAA,CAAO,CAAPA,CAHE,GAGO,0BAHP,GAIFvqD,KAAKtB,WAALsB,CAAiB,CAAjBA,CAJE,GAIiB,0BAJjB,GAKFA,KAAKtB,WAALsB,CAAiB,CAAjBA,CALE,GAKiB,iCALjB,GAMKA,KAAKnB,SAALmB,CAAe,CAAfA,CANL,GAMsB,iCANtB,GAOKA,KAAKnB,SAALmB,CAAe,CAAfA,CAPL,GAOsB,+BAPtB,GAQGA,KAAKnH,OAALmH,CAAa,CAAbA,CARH,GAQkB,+BARlB,GASGA,KAAKnH,OAALmH,CAAa,CAAbA,CATH,GASkB,4BATlB,GAUAA,KAAKrB,IAALqB,CAAU,CAAVA,CAVA,GAUY,4BAVZ,GAWAA,KAAKrB,IAALqB,CAAU,CAAVA,CAXA,GAWY,+IAXZ,GAgBQpH,CAhBR,GAgBY,olBAhBZ,GA6BL2xD,CAAAA,CAAOn5D,MA7BF,GA6BQ,oVApC7B;AAqDA,eAAO;AACLmyD,UAAAA,YAAAA,EAAc,CAACxrC,CAAAA,CAAiBqqC,4BAAjBrqC,CAA8CwyC,CAA9CxyC,CAAD,CADT;AAELurC,UAAAA,YAAAA,EAAYA,CAFP;AAGLE,UAAAA,QAAAA,EAAU,CAAC,GAAD,CAHL;AAILC,UAAAA,YAAAA,EAAYA;AAJP,SAAP;AAIcA,OA3Jat4C,EA8J7Bg6C,CAAAA,CAAA50D,SAAA40D,CAAAyF,2BAAAzF,GAAA,UACIptC,CADJ,EAC6Cs0C,CAD7C,EAC0Er7D,CAD1E,EAEIW,CAFJ,EAEIA;AACF,YAMI26D,CANJ;AAAA,YAAM/B,CAAAA,GAASv5D,CAAAA,CAAO,CAAPA,CAAAA,CAAUK,IAAVL,CAAe+H,KAAf/H,EAAf;AAAA,YACMw5D,CAAAA,GAASx5D,CAAAA,CAAO,CAAPA,CAAAA,CAAUK,IAAVL,CAAe+H,KAAf/H,EADf;AAAA,YAEMu7D,CAAAA,GAAsB,CAAC/B,CAAAA,CAAO,CAAPA,CAAD,EAAY73D,IAAAA,CAAKw3B,IAALx3B,CAAW43D,CAAAA,CAAO,CAAPA,CAAAA,GAAYC,CAAAA,CAAO,CAAPA,CAAZD,GAAwBC,CAAAA,CAAO,CAAPA,CAAxBD,GAAqC,CAAhD53D,CAAZ,CAF5B;AAAA,YAGM65D,CAAAA,GAAUz0C,CAAAA,CAAiBqqC,4BAAjBrqC,CACZw0C,CADYx0C,EACS,CADTA,EACY,CAACw0C,CAAAA,CAAoB,CAApBA,CAAD,EAAkD,IAAzBA,CAAAA,CAAoB,CAApBA,CAAzB,CADZx0C,EACkE;AAACq0C,UAAAA,SAAAA,EAAW;AAAZ,SADlEr0C,CAHhB;AAAA,YAOMnf,CAAAA,GAAOjH,CAAAA,CAAYP,MAPzB;AAAA,YASMmyD,CAAAA,GAAe,CAAC8I,CAAD,EAAeG,CAAf,CATrB;AAUsB,cAAlBx7D,CAAAA,CAAOI,MAAW,KACpBk7D,CAAAA,GAAUv0C,CAAAA,CAAiBqqC,4BAAjBrqC,CAA8C/mB,CAAAA,CAAO,CAAPA,CAAAA,CAAUK,IAAVL,CAAe+H,KAAf/H,EAA9C+mB,CAAVu0C,EACA/I,CAAAA,CAAaznD,IAAbynD,CAAkB+I,CAAlB/I,CAFoB;AAItB,YAAMD,CAAAA,GAAevrC,CAAAA,CAAiBqqC,4BAAjBrqC,CAA8CpmB,CAA9ComB,CAArB;AAAA,YACM00C,CAAAA,GAAaz7D,CAAAA,CAAOI,MAAPJ,GAAgB,CAAhBA,GAAqB,KAArBA,GAA6B,OADhD;AAAA,YAEMm6D,CAAAA,GAAYkB,CAAAA,CAAat3D,KAAbs3D,CAAmB,CAAnBA,CAFlB;AAAA,YAIMjB,CAAAA,GADerzC,CAAAA,CAAiBwlB,OAAjBxlB,CAAyB8Z,OAAzB9Z,CAAiC7L,SAAjC6L,CAA2C20C,gBAA3C30C,IACqBA,CAAAA,CAAiBwlB,OAAjBxlB,CAAyB8Z,OAAzB9Z,CAAiC+nC,kBADtD/nC,GAEjB/X,KAAK2sD,qBAAL3sD,CAA2B+X,CAAAA,CAAiBwlB,OAAjBxlB,CAAyB8Z,OAAzB9Z,CAAiC+nC,kBAA5D9/C,EAAgFmrD,CAAhFnrD,CAFiB+X,GAGjBozC,CANJ;AAAA,YAOM3H,CAAAA,GAAW,CAAC,QAAD,EAAW,GAAX,CAPjB;AAQsB,cAAlBxyD,CAAAA,CAAOI,MAAW,IACpBoyD,CAAAA,CAAS1nD,IAAT0nD,CAAc,GAAdA,CADoB;AAGtB,YAAM/+C,CAAAA,GAAO4+C,CAAAA,CAAA9+C,OAAA8+C,CAAQtrC,CAAAA,CAAiBwlB,OAAjBxlB,CAAyB8Z,OAAzB9Z,CAAiC7L,SAAjC6L,CAA2ChU,OAAnDs/C,CAAb;AAAA,YACMI,CAAAA,GAAe,qCACO7qD,CADP,GACW,oEADX,GAINyzD,CAAAA,CAAat3D,KAAbs3D,CAAmBj7D,MAJb,GAImB,wIAJnB,GAQci7D,CAAAA,CAAaxzD,OAAbwzD,CAAqB,CAArBA,CARd,GAQqC,iBARrC,GASjBA,CAAAA,CAAaxzD,OAAbwzD,CAAqB,CAArBA,CATiB,GASM,iBATN,GASwBA,CAAAA,CAAaxzD,OAAbwzD,CAAqB,CAArBA,CATxB,GAS+C,6DAT/C,GAUeG,CAAAA,CAAQ3zD,OAAR2zD,CAAgB,CAAhBA,CAVf,GAUiC,gEAVjC,GAWkBC,CAXlB,GAW2B,qCAX3B,GAYGrB,CAZH,GAYoB,qEAZpB,GAakCiB,CAAAA,CAAa3zC,KAb/C,GAaoD,IAbpD,GAayD2zC,CAAAA,CAAa5zC,MAbtE,GAa4E,+DAb5E,GAckC+zC,CAAAA,CAAQ9zC,KAd1C,GAc+C,IAd/C,GAcoD8zC,CAAAA,CAAQ/zC,MAd5D,GAckE,yBAdlE,GAeJhU,CAAAA,CAAKN,SAfD,GAeU,0BAfV,GAeqCM,CAAAA,CAAKN,SAf1C,GAemD,0GAhBxE;AAsBA,eAAO;AACLo/C,UAAAA,YAAAA,EAAgC,MAAlBvyD,CAAAA,CAAOI,MAAW,GAAI,CAACi7D,CAAD,EAAeG,CAAf,EAAwBF,CAAxB,CAAJ,GAAwC,CAACD,CAAD,EAAeG,CAAf,CADnE;AAELlJ,UAAAA,YAAAA,EAAYA,CAFP;AAGLG,UAAAA,YAAAA,EAAYA,CAHP;AAILD,UAAAA,QAAAA,EAAQA,CAJH;AAKLkG,UAAAA,SAAAA,EAAW,CAAC;AAACx6D,YAAAA,IAAAA,EAAM,iBAAP;AAA0BgF,YAAAA,IAAAA,EAAM;AAAhC,WAAD,CALN;AAMLsX,UAAAA,MAAAA,EAAQ;AAAC2/C,YAAAA,SAAAA,EAAaA,CAAd;AAAyBC,YAAAA,iBAAAA,EAAqBA;AAA9C;AANH,SAAP;AAMwDA,OAtN7BjgD,EAyNtBg6C,CAAAA,CAAA4F,uBAAA5F,GAAP,UAA+BpwD,CAA/B,EAAgDg4B,CAAhD,EAA+DzU,CAA/D,EAAiF/Y,CAAjF,EAAiFA;AAC/E,YAAc,MAAVwtB,CAAU,KAAmB,MAAbzU,CAAa,IAAMvjB,CAAAA,CAAM,CAANA,CAAAA,GAAWA,CAAAA,CAAM,CAANA,CAAXA,GAAuBujB,CAAvBvjB,IAAoC,CAA7D,CAAd,EACE,OAAOwK,CAAP;;AASF,aAPA,IAAM1G,CAAAA,GAAU+G,CAAAA,CAAA9L,SAAA8L,CAAUjH,cAAViH,CAAyB7K,CAAzB6K,CAAhB,EACMgtD,CAAAA,GAAa73D,CAAAA,CAAM,CAANA,CAAAA,GAAWA,CAAAA,CAAM,CAANA,CAAXA,GAAsBA,CAAAA,CAAM,CAANA,CADzC,EAEM83D,CAAAA,GAAal6D,IAAAA,CAAKw3B,IAALx3B,CAAUi6D,CAAAA,GAAat0C,CAAvB3lB,IAAmC2lB,CAFtD,EAGM+/B,CAAAA,GAAUtjD,CAAAA,CAAM,CAANA,CAAAA,GAAW83D,CAH3B,EAIMvrD,CAAAA,GAAS,IAAI0B,YAAJ,CAAiBq1C,CAAjB,CAJf,EAMMyU,CAAAA,GAAS,IAAI9pD,YAAJ,CAAiB6pD,CAAjB,CANf,EAOSn5C,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAI3e,CAAAA,CAAM,CAANA,CAApB,EAA0B,EAAM2e,CAAhC,EAAmC;AACjC,cAAMi2B,CAAAA,GAAYj2B,CAAAA,GAAI7a,CAAAA,CAAQ,CAARA,CAAtB;AACAi0D,UAAAA,CAAAA,CAAO34D,GAAP24D,CAAWvtD,CAAAA,CAAOxG,KAAPwG,CAAaoqC,CAAbpqC,EAAwBoqC,CAAAA,GAAYijB,CAApCrtD,CAAXutD,EAA4D,CAA5DA;AACA,cAAMC,CAAAA,GAAYr5C,CAAAA,GAAIm5C,CAAtB;AACAvrD,UAAAA,CAAAA,CAAOnN,GAAPmN,CAAWwrD,CAAXxrD,EAAmByrD,CAAnBzrD;AAEF;;AAAA,eAAOA,CAAP;AAAOA,OA1OoB6J,EA4OtBg6C,CAAAA,CAAAgH,cAAAhH,GAAP,UAAsBhhB,CAAtB,EAA4CzlC,CAA5C,EAAmE/M,CAAnE,EAA0F2mB,CAA1F,EAA0FA;AACxF,eAAA,KADwF,CACxF,KADwFA,CACxF,KADwFA,CAAAA,GAAA,CACxF,GAAO,CACL3mB,CAAAA,CAAY,CAAZA,CADK,EACWA,CAAAA,CAAY,CAAZA,CADX,EAC2BA,CAAAA,CAAY,CAAZA,CAD3B,EAELgB,IAAAA,CAAKw3B,IAALx3B,CAAUwxC,CAAAA,CAAW,CAAXA,CAAAA,GAAgBzlC,CAAAA,CAAY,CAAZA,CAAhBylC,GAAiCzlC,CAAAA,CAAY,CAAZA,CAAjCylC,GAAkD7rB,CAA5D3lB,CAFK,CAAP;AAE8D2lB,OA/OnCnN,EAkPtBg6C,CAAAA,CAAAsF,eAAAtF,GAAP,UACIhhB,CADJ,EAC0BzlC,CAD1B,EACiDG,CADjD,EACsEmuD,CADtE,EAEIn0D,CAFJ,EAEIA;AAAAA,YAAAA,CAAAA;AAAAA,YACIiuC,CAAAA,GAAY3C,CAAAA,CAAW,CAAXA,CADhBtrC;AAAAA,YAEIo0D,CAAAA,GAAoB9oB,CAAAA,CAAWprC,KAAXorC,CAAiB,CAAjBA,CAFxBtrC;AAAAA,YAGIm0B,CAAAA,GAAcigC,CAAAA,CAAkB77D,MAHpCyH;AAAAA,YAIIq0D,CAAAA,GAAcxuD,CAAAA,CAAY,CAAZA,CAJlB7F;AAAAA,YAMIs0D,CAAAA,GADqBzuD,CAAAA,CAAY3F,KAAZ2F,CAAkB,CAAlBA,EACmBjH,GADnBiH,CACuB,UAACvE,CAAD,EAAI5L,CAAJ,EAAIA;AAAM,iBAAA4L,CAAAA,GAAAA,CAAKA,CAAAA,GAAI,CAATA,KAAe0E,CAAAA,CAAUtQ,CAAVsQ,CAAAA,GAAe,CAA9B1E,CAAA;AAA8B,SAD/DuE,CALzB7F;AAAAA,YAQIu0D,CAAAA,GAD2BH,CAAAA,CAAkBx1D,GAAlBw1D,CAAsB,UAAC9yD,CAAD,EAAI5L,CAAJ,EAAIA;AAAM,iBAAA4L,CAAAA,GAAI6yD,CAAAA,CAAWz+D,CAAXy+D,CAAJ7yD,GAAoB6yD,CAAAA,CAAWz+D,CAAAA,GAAIy+B,CAAfggC,CAApB;AAAmChgC,SAAnEigC,EAEJx1D,GAFIw1D,CAEA,UAAC9yD,CAAD,EAAI5L,CAAJ,EAAIA;AAAM,iBAAAoE,IAAAA,CAAKkC,KAALlC,CAAKkC,CAAOsF,CAAAA,GAAIgzD,CAAAA,CAAmB5+D,CAAnB4+D,CAAJhzD,GAA4BtB,CAAAA,CAAQtK,CAARsK,CAAnChE,IAAiDgE,CAAAA,CAAQtK,CAARsK,CAAtDlG,CAAA;AAA8DpE,SAFxE0+D,CAP/Bp0D;AAWF,eAAA,CADoB7F,CAAAA,GAAA,CAAC8zC,CAAD,EAAYomB,CAAZ,CACpB,EAD6C/tC,MAC7C,CADmDf,KACnD,CADmDprB,CACnD,EADmDwoC,CAAAA,CAAI4xB,CAAJ5xB,CACnD,CAAA;AADuD4xB,OA9P5BjiD,EAiQnBg6C,CAAAA,CAAA50D,SAAA40D,CAAAwH,qBAAAxH,GAAV,UAAgCkI,CAAhC,EAA4DlC,CAA5D,EAA4DA;AAC1D,eAAIkC,CAAAA,IAAsB,CAAtBA,IAA2BlC,CAAAA,GAAYkC,CAAvCA,IAA6DlC,CAAAA,GAAYkC,CAAZlC,IAAmC,CAAhGkC,GACKlC,CADLkC,GAGGA,CAHP;AAGOA,OArQoBliD,EAuQnBg6C,CAAAA,CAAA50D,SAAA40D,CAAAmI,aAAAnI,GAAV,UAAwB7B,CAAxB,EAAwBA;AAGtB,YAAA,EAAIA,CAAAA,CAAa7qC,MAAb6qC,GAFsB,EAE1B,CAAA,EAGA,OAAO,CAJmB,EAInB,EALmB,EAKnB,CAAP;AAL0B,OAxQCn4C,EAkR/Bg6C,CAAA;AAlRA,KAAA,CAA+B9yB,CAAAA,CAAAzF,IAA/B,CATA;;AASa1+B,IAAAA,CAAAA,CAAAi3D,SAAAj3D,GAAAi3D,CAAAj3D;AAAAi3D,G1HsEb,E0HtEaA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,QAAAA,CAAAA;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,SAAAA,KAAAA,CAAAA,GAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,CAAAA,CAAAA,GAAAA,MAAAA,CAAAA,cAAAA,IAAAA;AAAAA,QAAAA,SAAAA,EAAAA;AAAAA,mBAAAA,KAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,QAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA;AAAAA,OAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,IAAAA,CAAAA,IAAAA,CAAAA,EAAAA,CAAAA,CAAAA,cAAAA,CAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,OAAAA,EAAAA,CAAAA,EAAAA,CAAAA,CAAAA;AAAAA,KAAAA,EAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,eAAAA,CAAAA,GAAAA;AAAAA,aAAAA,WAAAA,GAAAA,CAAAA;AAAAA;;AAAAA,MAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,SAAAA,GAAAA,SAAAA,CAAAA,GAAAA,MAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA,CAAAA,SAAAA,EAAAA,IAAAA,CAAAA,EAAAA,CAAAA;AAAAA,KAAAA,CAAAA;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;ACTb,QAKAG,CAAAA,GAAA,UAAAp6C,CAAA,EAAAA;AAAA,eAAAo6C,CAAA,GAAAA;AAAAA,eAAAA,SAAAA,CAAAA,IAAAA,CAAAA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,SAAAA,CAAAA,IAAAA,IAAAA;AAaA;;AAAA,aAbkCn6C,CAAAA,CAAAm6C,CAAAn6C,EAAAD,CAAAC,CAAAA,EAChCm6C,CAAAA,CAAA/0D,SAAA+0D,CAAAxtC,GAAAwtC,GAAA,UAAIvtC,CAAJ,EAA6C/mB,CAA7C,EAA6CA;AAC3C,YAAIgP,KAAKg6B,QAAT,EACE,OAAO,CAAChpC,CAAAA,CAAO,CAAPA,CAAD,CAAP;AAEF,cAAM,IAAIyE,KAAJ,CAAU,8CAAV,CAAN;AAAgB,OALc0V,EAOhCm6C,CAAAA,CAAA/0D,SAAA+0D,CAAAxD,iBAAAwD,GAAA,UAAkBkD,CAAlB,EAAkDx3D,CAAlD,EAAkDA;AAChD,cAAM,IAAIyE,KAAJ,CAAU,8CAAV,CAAN;AAAgB,OARc0V,EAUhCm6C,CAAAA,CAAA/0D,SAAA+0D,CAAArD,aAAAqD,GAAA,UAAckD,CAAd,EAA8Cr8C,CAA9C,EAAwEnb,CAAxE,EAAwEA;AACtE,cAAM,IAAIyE,KAAJ,CAAU,8CAAV,CAAN;AAAgB,OAXc0V,EAalCm6C,CAAA;AAbA,KAAA,CALA52D,CAAAA,CAAA,EAAAA,CAAAA,CAKkCorC,OAAlC,CALA;;AAKa5rC,IAAAA,CAAAA,CAAAo3D,YAAAp3D,GAAAo3D,CAAAp3D;AAAAo3D,G3H0Eb,E2H1EaA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,QAAAA,CAAAA;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,SAAAA,KAAAA,CAAAA,GAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,CAAAA,CAAAA,GAAAA,MAAAA,CAAAA,cAAAA,IAAAA;AAAAA,QAAAA,SAAAA,EAAAA;AAAAA,mBAAAA,KAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,QAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA;AAAAA,OAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,IAAAA,CAAAA,IAAAA,CAAAA,EAAAA,CAAAA,CAAAA,cAAAA,CAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,OAAAA,EAAAA,CAAAA,EAAAA,CAAAA,CAAAA;AAAAA,KAAAA,EAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,eAAAA,CAAAA,GAAAA;AAAAA,aAAAA,WAAAA,GAAAA,CAAAA;AAAAA;;AAAAA,MAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,SAAAA,GAAAA,SAAAA,CAAAA,GAAAA,MAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA,CAAAA,SAAAA,EAAAA,IAAAA,CAAAA,EAAAA,CAAAA;AAAAA,KAAAA,CAAAA;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;ACLb,QAAArB,CAAAA,GAAAv1D,CAAAA,CAAA,GAAAA,CAAA;AAAA,QAEA20D,CAAAA,GAAA30D,CAAAA,CAAA,CAAAA,CAFA;AAAA,QAMA82D,CAAAA,GAAA,UAAAt6C,CAAA,EAAAA;AAAA,eAAAs6C,CAAA,GAAAA;AAAAA,eAAAA,SAAAA,CAAAA,IAAAA,CAAAA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,SAAAA,CAAAA,IAAAA,IAAAA;AA6BA;;AAAA,aA7B8Br6C,CAAAA,CAAAq6C,CAAAr6C,EAAAD,CAAAC,CAAAA,EAC5Bq6C,CAAAA,CAAAj1D,SAAAi1D,CAAA1tC,GAAA0tC,GAAA,UAAIztC,CAAJ,EAA6C/mB,CAA7C,EAA6CA;AAC3C,eAAO+mB,CAAAA,CAAiBD,GAAjBC,CAAqB/X,IAArB+X,EAA2B/mB,CAA3B+mB,CAAP;AAAkC/mB,OAFRma,EAI5Bq6C,CAAAA,CAAAj1D,SAAAi1D,CAAA1D,iBAAA0D,GAAA,UAAkBgD,CAAlB,EAAkDx3D,CAAlD,EAAkDA;AAChD,YAAMW,CAAAA,GAAcX,CAAAA,CAAO,CAAPA,CAAAA,CAAUK,IAAVL,CAAe+H,KAAf/H,EAApB;AAAA,YACMyT,CAAAA,GAAO4+C,CAAAA,CAAA9+C,OAAA8+C,CAAQmF,CAAAA,CAAQjrB,OAARirB,CAAgB32B,OAAhB22B,CAAwBt8C,SAAxBs8C,CAAkCzkD,OAA1Cs/C,CADb;AAAA,YAEMI,CAAAA,GAAe,8CAELh/C,CAAAA,CAAKN,SAFA,GAES,6BAFT,GAGfM,CAAAA,CAAKL,MAHU,GAGJ,yCAHI,GAGsCpE,KAAK1D,KAAL0D,CAAWutD,aAAXvtD,EAHtC,GAGgE,+CALrF;AAQA,eAAO;AACLujD,UAAAA,YAAAA,EAAc,CAACiF,CAAAA,CAAQ3F,wBAAR2F,CAAiCx3D,CAAAA,CAAO,CAAPA,CAAjCw3D,CAAD,CADT;AAELlF,UAAAA,YAAAA,EAAckF,CAAAA,CAAQpG,4BAARoG,CAAqC72D,CAArC62D,CAFT;AAGLhF,UAAAA,QAAAA,EAAU,CAAC,GAAD,CAHL;AAILC,UAAAA,YAAAA,EAAYA,CAJP;AAKLC,UAAAA,OAAAA,EAAAA,CAAS;AALJ,SAAP;AAKW,OAlBev4C,EAqB5Bq6C,CAAAA,CAAAj1D,SAAAi1D,CAAAvD,aAAAuD,GAAA,UAAcgD,CAAd,EAA8Cr8C,CAA9C,EAAwEnb,CAAxE,EAAwEA;AACtE,YAAMy3D,CAAAA,GAAW,CAACD,CAAAA,CAAQpwC,sBAARowC,CAA+Bx3D,CAAAA,CAAO,CAAPA,CAA/Bw3D,EAA0Cr8C,CAAAA,CAAYo3C,YAAZp3C,CAAyB,CAAzBA,CAA1Cq8C,CAAD,CAAjB;AACA,eAAO;AACL1E,UAAAA,iBAAAA,EAAmB2E,CADd;AAELvG,UAAAA,iBAAAA,EAAmBsG,CAAAA,CAAQlG,2BAARkG,CAAoCr8C,CAAAA,CAAYm3C,YAAhDkF,EAA8DC,CAAAA,CAAS,CAATA,CAAAA,CAAY3vC,MAAZ2vC,CAAmBv0D,IAAjFs0D,CAFd;AAGLzE,UAAAA,WAAAA,EAAa;AAHR,SAAP;AAGe,OA1BW54C,EA6B9Bq6C,CAAA;AA7BA,KAAA,CAA8BvB,CAAAA,CAAAuJ,GAA9B,CANA;;AAMat/D,IAAAA,CAAAA,CAAAs3D,QAAAt3D,GAAAs3D,CAAAt3D;AAAAs3D,G5HyEb,E4HzEaA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;ACDb,QAAAgI,CAAAA,GAAA,YAAA;AAAA,eAAAA,CAAA,GAAAA,CAwBA;;AAAA,aArBEA,CAAAA,CAAAj9D,SAAAi9D,CAAA5hC,UAAA4hC,GAAA,UAAW3hC,CAAX,EAAWA;AACT7rB,aAAK1D,KAAL0D,GAAa6rB,CAAAA,CAAWE,QAAXF,CAAoB,OAApBA,EAA6B,CAA7BA,CAAb7rB;AAA0C,OAD5CwtD,EAIAA,CAAAA,CAAAj9D,SAAAi9D,CAAArhC,WAAAqhC,GAAA,UAAYx8D,CAAZ,EAAYA;AACV,eAAA,EAAA,CAAKA,CAAL,IAAiC,MAAlBA,CAAAA,CAAOI,MAAtB,KAIO4O,KAAKosB,eAALpsB,CAAqBhP,CAArBgP,CAJP;AAI4BhP,OAT9Bw8D,EAYUA,CAAAA,CAAAj9D,SAAAi9D,CAAAphC,eAAAohC,GAAV,UAA0Bx8D,CAA1B,EAA0BA;AACxB,eAAuB,cAAnBA,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IAAS,IAAgC,cAAnBlD,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IAA9C;AAA8CA,OAbhDs5D,EAqBFA,CAAA;AAxBA,KAAA,EAAA;;AAAsBt/D,IAAAA,CAAAA,CAAAs/D,GAAAt/D,GAAAs/D,CAAAt/D;AAAAs/D,G7H0EtB,E6H1EsBA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,QAAAA,CAAAA;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,SAAAA,KAAAA,CAAAA,GAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,CAAAA,CAAAA,GAAAA,MAAAA,CAAAA,cAAAA,IAAAA;AAAAA,QAAAA,SAAAA,EAAAA;AAAAA,mBAAAA,KAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,QAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA;AAAAA,OAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,IAAAA,CAAAA,IAAAA,CAAAA,EAAAA,CAAAA,CAAAA,cAAAA,CAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,OAAAA,EAAAA,CAAAA,EAAAA,CAAAA,CAAAA;AAAAA,KAAAA,EAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,eAAAA,CAAAA,GAAAA;AAAAA,aAAAA,WAAAA,GAAAA,CAAAA;AAAAA;;AAAAA,MAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,SAAAA,GAAAA,SAAAA,CAAAA,GAAAA,MAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA,CAAAA,SAAAA,EAAAA,IAAAA,CAAAA,EAAAA,CAAAA;AAAAA,KAAAA,CAAAA;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;ACLtB,QAAAj7B,CAAAA,GAAA7jC,CAAAA,CAAA,EAAAA,CAAA;AAAA,QAEAkR,CAAAA,GAAAlR,CAAAA,CAAA,CAAAA,CAFA;AAAA,QAKAipB,CAAAA,GAAAjpB,CAAAA,CAAA,EAAAA,CALA;AAAA,QAOAg3D,CAAAA,GAAA,UAAAx6C,CAAA,EAAAA;AAAA,eAAAw6C,CAAA,GAAAA;AAAAA,eAAAA,SAAAA,CAAAA,IAAAA,CAAAA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,SAAAA,CAAAA,IAAAA,IAAAA;AAMA;;AAAA,aANkCv6C,CAAAA,CAAAu6C,CAAAv6C,EAAAD,CAAAC,CAAAA,EAChCu6C,CAAAA,CAAAn1D,SAAAm1D,CAAA5tC,GAAA4tC,GAAA,UAAI3tC,CAAJ,EAA6C/mB,CAA7C,EAA6CA;AAC3C,YAAM0K,CAAAA,GAAakE,CAAAA,CAAA9L,SAAA8L,CAAU1E,YAAV0E,CAAuB5O,CAAAA,CAAO,CAAPA,CAAAA,CAAUK,IAAjCuO,EAAuCI,KAAKzH,IAA5CqH,CAAnB;AAEA,eAAO,CAAC+X,CAAAA,CAAAM,OAAAN,CAAQI,CAARJ,EAA0B3mB,CAAAA,CAAO,CAAPA,CAA1B2mB,EAAqCjc,CAArCic,CAAD,CAAP;AAA6Cjc,OAJfyP,EAMlCu6C,CAAA;AANA,KAAA,CAAkCnzB,CAAAA,CAAA0H,OAAlC,CAPA;;AAOa/rC,IAAAA,CAAAA,CAAAw3D,YAAAx3D,GAAAw3D,CAAAx3D;AAAAw3D,G9HwEb,E8HxEaA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,QAAAA,CAAAA;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,SAAAA,KAAAA,CAAAA,GAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,CAAAA,CAAAA,GAAAA,MAAAA,CAAAA,cAAAA,IAAAA;AAAAA,QAAAA,SAAAA,EAAAA;AAAAA,mBAAAA,KAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,QAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA;AAAAA,OAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,IAAAA,CAAAA,IAAAA,CAAAA,EAAAA,CAAAA,CAAAA,cAAAA,CAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,OAAAA,EAAAA,CAAAA,EAAAA,CAAAA,CAAAA;AAAAA,KAAAA,EAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,eAAAA,CAAAA,GAAAA;AAAAA,aAAAA,WAAAA,GAAAA,CAAAA;AAAAA;;AAAAA,MAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,SAAAA,GAAAA,SAAAA,CAAAA,GAAAA,MAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA,CAAAA,SAAAA,EAAAA,IAAAA,CAAAA,EAAAA,CAAAA;AAAAA,KAAAA,CAAAA;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;ACRb,QAKAE,CAAAA,GAAA,UAAA16C,CAAA,EAAAA;AAAA,eAAA06C,CAAA,GAAAA;AAAAA,eAAAA,SAAAA,CAAAA,IAAAA,CAAAA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,SAAAA,CAAAA,IAAAA,IAAAA;AA6DA;;AAAA,aA7DiCz6C,CAAAA,CAAAy6C,CAAAz6C,EAAAD,CAAAC,CAAAA,EAC/By6C,CAAAA,CAAAr1D,SAAAq1D,CAAA9tC,GAAA8tC,GAAA,UAAI7tC,CAAJ,EAA6C/mB,CAA7C,EAA6CA;AAC3C,eAAO+mB,CAAAA,CAAiBD,GAAjBC,CAAqB/X,IAArB+X,EAA2B/mB,CAA3B+mB,CAAP;AAAkC/mB,OAFLma,EAK/By6C,CAAAA,CAAAr1D,SAAAq1D,CAAA9D,iBAAA8D,GAAA,UAAkB4C,CAAlB,EAAkDx3D,CAAlD,EAAkDA;AAChD,YAAMmzC,CAAAA,GAAanzC,CAAAA,CAAO,CAAPA,CAAAA,CAAUK,IAAVL,CAAe+H,KAAf/H,EAAnB;AAAA,YACMy8D,CAAAA,GAAiBz8D,CAAAA,CAAO,CAAPA,CAAAA,CAAUK,IAAVL,CAAe+H,KAAf/H,EADvB;AAAA,YAEMW,CAAAA,GAAc,IAAImB,KAAJ,CAAUqxC,CAAAA,CAAW/yC,MAAX+yC,GAAoBspB,CAAAA,CAAer8D,MAAnC+yC,GAA4C,CAAtD,CAFpB;AAIA,YAA2B,MAAvBxyC,CAAAA,CAAYP,MAAhB,EACE,MAAMqE,KAAAA,CAAM,+CAANA,CAAN;;AAIF,aADA,IAAMi4D,CAAAA,GAAyB,EAA/B,EACSn/D,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAIoD,CAAAA,CAAYP,MAAhC,EAAwC7C,CAAAA,EAAxC,EAMMA,CAAAA,GAAIyR,KAAKzH,IAAThK,IACFoD,CAAAA,CAAYpD,CAAZoD,CAAAA,GAAiBwyC,CAAAA,CAAW51C,CAAX41C,CAAjBxyC,EACA+7D,CAAAA,CAAa5xD,IAAb4xD,CAAkB,cAAYn/D,CAAZ,GAAa,gBAAb,GAA8BA,CAA9B,GAA+B,IAAjDm/D,CAFEn/D,IAIEA,CAAAA,GAAIyR,KAAKzH,IAALyH,GAAYytD,CAAAA,CAAer8D,MAA/B7C,IACFoD,CAAAA,CAAYpD,CAAZoD,CAAAA,GAAiB87D,CAAAA,CAAel/D,CAAAA,GAAIyR,KAAKzH,IAAxBk1D,CAAjB97D,EACA+7D,CAAAA,CAAa5xD,IAAb4xD,CAAkB,mBAAgBn/D,CAAAA,GAAIyR,KAAKzH,IAAzB,IAA6B,gBAA7B,GAA8ChK,CAA9C,GAA+C,IAAjEm/D,CAFEn/D,KAIFoD,CAAAA,CAAYpD,CAAZoD,CAAAA,GAAiBwyC,CAAAA,CAAW51C,CAAAA,GAAIk/D,CAAAA,CAAer8D,MAAnB7C,GAA4B,CAAvC41C,CAAjBxyC,EACA+7D,CAAAA,CAAa5xD,IAAb4xD,CAAkB,eAAYn/D,CAAAA,GAAIk/D,CAAAA,CAAer8D,MAAnB7C,GAA4B,CAAxC,IAAyC,gBAAzC,GAA0DA,CAA1D,GAA2D,IAA7Em/D,CALEn/D,CAJFA;;AAcN,YAGMk1D,CAAAA,GAAe,yCAHP9xD,CAAAA,CAAYP,MAGL,GACgB,6BADhB,GAFP+yC,CAAAA,CAAW/yC,MAEJ,GAEG,+BAFH,GADNq8D,CAAAA,CAAer8D,MACT,GAGQ,cAHR,GAIfs8D,CAAAA,CAAaxzC,IAAbwzC,CAAkB,YAAlBA,CAJe,GAIgB,qBAJhB,GAKN1tD,KAAKzH,IALC,GAKG,mEARxB;AAWA,eAAO;AACLgrD,UAAAA,YAAAA,EAAcvyD,CAAAA,CAAOyG,GAAPzG,CAAW,UAAAnB,CAAA,EAAAA;AAAK,mBAAA24D,CAAAA,CAAQ3F,wBAAR2F,CAAiC34D,CAAjC24D,CAAA;AAAiC34D,WAAjDmB,CADT;AAELsyD,UAAAA,YAAAA,EAAckF,CAAAA,CAAQpG,4BAARoG,CAAqC72D,CAArC62D,CAFT;AAGLhF,UAAAA,QAAAA,EAAU,CAAC,GAAD,EAAM,GAAN,CAHL;AAILC,UAAAA,YAAAA,EAAYA;AAJP,SAAP;AAIcA,OAlDet4C,EAqD/By6C,CAAAA,CAAAr1D,SAAAq1D,CAAA3D,aAAA2D,GAAA,UAAc4C,CAAd,EAA8Cr8C,CAA9C,EAAwEnb,CAAxE,EAAwEA;AACtE,YAAMy3D,CAAAA,GAAWz3D,CAAAA,CAAOyG,GAAPzG,CAAW,UAACnB,CAAD,EAAItB,CAAJ,EAAIA;AAAM,iBAAAi6D,CAAAA,CAAQpwC,sBAARowC,CAA+B34D,CAA/B24D,EAAkCr8C,CAAAA,CAAYo3C,YAAZp3C,CAAyB5d,CAAzB4d,CAAlCq8C,CAAA;AAA2Dj6D,SAAhFyC,CAAjB;AACA,eAAO;AACL8yD,UAAAA,iBAAAA,EAAmB2E,CADd;AAELvG,UAAAA,iBAAAA,EAAmBsG,CAAAA,CAAQlG,2BAARkG,CAAoCr8C,CAAAA,CAAYm3C,YAAhDkF,EAA8DC,CAAAA,CAAS,CAATA,CAAAA,CAAY3vC,MAAZ2vC,CAAmBv0D,IAAjFs0D,CAFd;AAGLzE,UAAAA,WAAAA,EAAa;AAHR,SAAP;AAGe,OA1Dc54C,EA6DjCy6C,CAAA;AA7DA,KAAA,CALAl3D,CAAAA,CAAA,EAAAA,CAAAA,CAKiCwrC,MAAjC,CALA;;AAKahsC,IAAAA,CAAAA,CAAA03D,WAAA13D,GAAA03D,CAAA13D;AAAA03D,G/H2Eb,E+H3EaA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,QAAAA,CAAAA;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,SAAAA,KAAAA,CAAAA,GAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,CAAAA,CAAAA,GAAAA,MAAAA,CAAAA,cAAAA,IAAAA;AAAAA,QAAAA,SAAAA,EAAAA;AAAAA,mBAAAA,KAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,QAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA;AAAAA,OAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,IAAAA,CAAAA,IAAAA,CAAAA,EAAAA,CAAAA,CAAAA,cAAAA,CAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,OAAAA,EAAAA,CAAAA,EAAAA,CAAAA,CAAAA;AAAAA,KAAAA,EAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,eAAAA,CAAAA,GAAAA;AAAAA,aAAAA,WAAAA,GAAAA,CAAAA;AAAAA;;AAAAA,MAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,SAAAA,GAAAA,SAAAA,CAAAA,GAAAA,MAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA,CAAAA,SAAAA,EAAAA,IAAAA,CAAAA,EAAAA,CAAAA;AAAAA,KAAAA,CAAAA;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,MAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,UAAAA,CAAAA,GAAAA,cAAAA,OAAAA,MAAAA,IAAAA,CAAAA,CAAAA,MAAAA,CAAAA,QAAAA,CAAAA;AAAAA,UAAAA,CAAAA,CAAAA,EAAAA,OAAAA,CAAAA;AAAAA,UAAAA,CAAAA;AAAAA,UAAAA,CAAAA;AAAAA,UAAAA,CAAAA,GAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA;AAAAA,UAAAA,CAAAA,GAAAA,EAAAA;;AAAAA,UAAAA;AAAAA,eAAAA,CAAAA,KAAAA,CAAAA,KAAAA,CAAAA,IAAAA,CAAAA,KAAAA,CAAAA,KAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,IAAAA,EAAAA,EAAAA,IAAAA,GAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,KAAAA;AAAAA,OAAAA,CAAAA,OAAAA,CAAAA,EAAAA;AAAAA,QAAAA,CAAAA,GAAAA;AAAAA,UAAAA,KAAAA,EAAAA;AAAAA,SAAAA;AAAAA,OAAAA,SAAAA;AAAAA,YAAAA;AAAAA,UAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,IAAAA,KAAAA,CAAAA,GAAAA,CAAAA,CAAAA,MAAAA,KAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA;AAAAA,SAAAA,SAAAA;AAAAA,cAAAA,CAAAA,EAAAA,MAAAA,CAAAA,CAAAA,KAAAA;AAAAA;AAAAA;;AAAAA,aAAAA,CAAAA;AAAAA,KAAAA;;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;ACJb,QAAAnzB,CAAAA,GAAA/jC,CAAAA,CAAA,EAAAA,CAAA;AAAA,QAEAkR,CAAAA,GAAAlR,CAAAA,CAAA,CAAAA,CAFA;AAAA,QAMAm3D,CAAAA,GAAA,UAAA36C,CAAA,EAAAA;AAAA,eAAA26C,CAAA,GAAAA;AAAAA,eAAAA,SAAAA,CAAAA,IAAAA,CAAAA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,SAAAA,CAAAA,IAAAA,IAAAA;AAoEA;;AAAA,aApE+B16C,CAAAA,CAAA06C,CAAA16C,EAAAD,CAAAC,CAAAA,EAC7B06C,CAAAA,CAAAt1D,SAAAs1D,CAAA/tC,GAAA+tC,GAAA,UAAI9tC,CAAJ,EAA6C/mB,CAA7C,EAA6CA;AAC3C,eAAO+mB,CAAAA,CAAiBD,GAAjBC,CAAqB/X,IAArB+X,EAA2B/mB,CAA3B+mB,CAAP;AAAkC/mB,OAFPma,EAI7B06C,CAAAA,CAAAt1D,SAAAs1D,CAAA/D,iBAAA+D,GAAA,UAAkB9tC,CAAlB,EAA2D/mB,CAA3D,EAA2DA;AACzD,YAAM28D,CAAAA,GAAS38D,CAAAA,CAAO,CAAPA,CAAAA,CAAUK,IAAVL,CAAe+H,KAAf/H,EAAf;AAAA,YACM48D,CAAAA,GAAS58D,CAAAA,CAAO,CAAPA,CAAAA,CAAUK,IAAVL,CAAe+H,KAAf/H,EADf;AAAA,YAEM68D,CAAAA,GAAS78D,CAAAA,CAAO,CAAPA,CAAAA,CAAUK,IAAVL,CAAe+H,KAAf/H,EAFf;AAAA,YAGMgC,CAAAA,GAAAC,CAAAA,CAAA2M,CAAAA,CAAAjK,QAAAiK,CAAAhK,oBAAAgK,CAAA+tD,CAAA/tD,EAAAI,KAAA+tB,MAAAnuB,EAAAguD,CAAAhuD,EAAAI,KAAAguB,MAAApuB,EAAAiuD,CAAAjuD,CAAA3M,EAAA,CAAAA,CAHN;AAAA,YAIM66D,CAAAA,GAAS,CADR96D,CAAAA,CAAA,CAAAA,CACQ,EADLA,CAAAA,CAAA,CAAAA,CACK,CAJf;AAKA,YAAA,CAAK86D,CAAL,EACE,MAAM,IAAIr4D,KAAJ,CAAU,qCAAV,CAAN;AAEF,YAAI01D,CAAAA,GAAYwC,CAAAA,CAAOA,CAAAA,CAAOv8D,MAAPu8D,GAAgB,CAAvBA,CAAhB;AAAA,YACIjV,CAAAA,GAAO,EADX;AAEI14C,aAAK+tB,MAAL/tB,KACFmrD,CAAAA,GAAYwC,CAAAA,CAAO,CAAPA,CADV3tD,GAGAA,KAAK+tB,MAAL/tB,IAAeA,KAAKguB,MAApBhuB,GACF04C,CAAAA,GAAO,6BADL14C,GAEOA,KAAK+tB,MAAL/tB,IAAK+tB,CAAW/tB,KAAKguB,MAArBhuB,GACT04C,CAAAA,GAAO,2BADE14C,GACF,CACGA,KAAK+tB,MADR,IACkB/tB,KAAKguB,MADvB,GAEP0qB,CAAAA,GAAO,2BAFA,GAGG14C,KAAK+tB,MAAL/tB,IAAgBA,KAAKguB,MAArBhuB,KACV04C,CAAAA,GAAO,yBADG14C,CATRA;AAYJ,YAAMpH,CAAAA,GAAOk1D,CAAAA,CAAO18D,MAApB;AAAA,YAEMqyD,CAAAA,GAAe,uCACS7qD,CADT,GACa,wBADb,GAEPA,CAFO,GAEH,sBAFG,GAGPA,CAHO,GAGH,sBAHG,GADPi1D,CAAAA,CAAOz8D,MACA,GAIF,yKAJE,GAWG+5D,CAXH,GAWY,4BAXZ,IAYPvyD,CAAAA,GAAO,CAZA,IAYC,0BAZD,IAaPA,CAAAA,GAAO,CAbA,IAaC,wBAbD,GAcT8/C,CAdS,GAcL,uHAhBhB;AAwBA,eAAO;AACL6K,UAAAA,YAAAA,EAFmBvyD,CAAAA,CAAOyG,GAAPzG,CAAW,UAAAnB,CAAA,EAAAA;AAAK,mBAAAkoB,CAAAA,CAAiB8qC,wBAAjB9qC,CAA0CloB,CAA1CkoB,CAAA;AAA0CloB,WAA1DmB,CACd;AAELsyD,UAAAA,YAAAA,EAAcvrC,CAAAA,CAAiBqqC,4BAAjBrqC,CAA8C+1C,CAA9C/1C,CAFT;AAGLyrC,UAAAA,QAAAA,EAAU,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAHL;AAILkG,UAAAA,SAAAA,EAAW,CAAC;AAACx6D,YAAAA,IAAAA,EAAM,OAAP;AAAgBgF,YAAAA,IAAAA,EAAM;AAAtB,WAAD,EAAiC;AAAChF,YAAAA,IAAAA,EAAM,MAAP;AAAegF,YAAAA,IAAAA,EAAM;AAArB,WAAjC,CAJN;AAKLuvD,UAAAA,YAAAA,EAAYA;AALP,SAAP;AAKcA,OAxDat4C,EA2D7B06C,CAAAA,CAAAt1D,SAAAs1D,CAAA5D,aAAA4D,GAAA,UAAc9tC,CAAd,EAAuD5L,CAAvD,EAAiFnb,CAAjF,EAAiFA;AAC/E,YAAMy3D,CAAAA,GAAWz3D,CAAAA,CAAOyG,GAAPzG,CAAW,UAACnB,CAAD,EAAItB,CAAJ,EAAIA;AAAM,iBAAAwpB,CAAAA,CAAiBK,sBAAjBL,CAAwCloB,CAAxCkoB,EAA2C5L,CAAAA,CAAYo3C,YAAZp3C,CAAyB5d,CAAzB4d,CAA3C4L,CAAA;AAAoExpB,SAAzFyC,CAAjB;AACA,eAAO;AACL8yD,UAAAA,iBAAAA,EAAmB2E,CADd;AAELvG,UAAAA,iBAAAA,EACInqC,CAAAA,CAAiBuqC,2BAAjBvqC,CAA6C5L,CAAAA,CAAYm3C,YAAzDvrC,EAAuE0wC,CAAAA,CAAS,CAATA,CAAAA,CAAY3vC,MAAZ2vC,CAAmBv0D,IAA1F6jB,CAHC;AAILgsC,UAAAA,WAAAA,EAAa;AAACznD,YAAAA,KAAAA,EAAS0D,KAAK1D,KAAf;AAAsB2xB,YAAAA,IAAAA,EAAQjuB,KAAKiuB;AAAnC;AAJR,SAAP;AAIkDA,OAjEvB9iB,EAoE/B06C,CAAA;AApEA,KAAA,CAA+BpzB,CAAAA,CAAA9D,IAA/B,CANA;;AAMazgC,IAAAA,CAAAA,CAAA23D,SAAA33D,GAAA23D,CAAA33D;AAAA23D,GhIyEb,EgIzEaA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,QAAAA,CAAAA;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,SAAAA,KAAAA,CAAAA,GAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,CAAAA,CAAAA,GAAAA,MAAAA,CAAAA,cAAAA,IAAAA;AAAAA,QAAAA,SAAAA,EAAAA;AAAAA,mBAAAA,KAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,QAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA;AAAAA,OAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,IAAAA,CAAAA,IAAAA,CAAAA,EAAAA,CAAAA,CAAAA,cAAAA,CAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,OAAAA,EAAAA,CAAAA,EAAAA,CAAAA,CAAAA;AAAAA,KAAAA,EAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,eAAAA,CAAAA,GAAAA;AAAAA,aAAAA,WAAAA,GAAAA,CAAAA;AAAAA;;AAAAA,MAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,SAAAA,GAAAA,SAAAA,CAAAA,GAAAA,MAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA,CAAAA,SAAAA,EAAAA,IAAAA,CAAAA,EAAAA,CAAAA;AAAAA,KAAAA,CAAAA;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;ACNb,QAKAK,CAAAA,GAAA,UAAAh7C,CAAA,EAAAA;AAAA,eAAAg7C,CAAA,GAAAA;AAAAA,eAAAA,SAAAA,CAAAA,IAAAA,CAAAA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,SAAAA,CAAAA,IAAAA,IAAAA;AAmDA;;AAAA,aAnDsC/6C,CAAAA,CAAA+6C,CAAA/6C,EAAAD,CAAAC,CAAAA,EACpC+6C,CAAAA,CAAA31D,SAAA21D,CAAApuC,GAAAouC,GAAA,UAAInuC,CAAJ,EAA6C/mB,CAA7C,EAA6CA;AAC3C,eAAO+mB,CAAAA,CAAiBD,GAAjBC,CAAqB/X,IAArB+X,EAA2B/mB,CAA3B+mB,CAAP;AAAkC/mB,OAFAma,EAIpC+6C,CAAAA,CAAA31D,SAAA21D,CAAApE,iBAAAoE,GAAA,UAAkBsC,CAAlB,EAAkDx3D,CAAlD,EAAkDA;AAChD,YAAMW,CAAAA,GAAcX,CAAAA,CAAO,CAAPA,CAAAA,CAAUK,IAAVL,CAAe+H,KAAf/H,EAApB;AAAA,YACM4H,CAAAA,GAAOjH,CAAAA,CAAYP,MADzB;AAAA,YAGMqyD,CAAAA,GAAe,aADCzjD,KAAK+tD,mBAAL/tD,CAAyBA,KAAKo6B,IAALp6B,CAAU5O,MAAnC4O,CACD,GACJ,oCADI,GAESpH,CAFT,GAEa,gFALlC;AAQA,eAAO;AACL2qD,UAAAA,YAAAA,EAAc,CAACiF,CAAAA,CAAQ3F,wBAAR2F,CAAiCx3D,CAAAA,CAAO,CAAPA,CAAjCw3D,CAAD,CADT;AAELlF,UAAAA,YAAAA,EAAckF,CAAAA,CAAQpG,4BAARoG,CAAqC72D,CAArC62D,CAFT;AAGLhF,UAAAA,QAAAA,EAAU,CAAC,GAAD,CAHL;AAILkG,UAAAA,SAAAA,EAAW,CAAC;AAACx6D,YAAAA,IAAAA,EAAM,MAAP;AAAegF,YAAAA,IAAAA,EAAM,OAArB;AAA8By1D,YAAAA,WAAAA,EAAa3pD,KAAKo6B,IAALp6B,CAAU5O;AAArD,WAAD,EAA+D;AAAClC,YAAAA,IAAAA,EAAM,OAAP;AAAgBgF,YAAAA,IAAAA,EAAM;AAAtB,WAA/D,CAJN;AAKLuvD,UAAAA,YAAAA,EAAYA;AALP,SAAP;AAKcA,OAlBoBt4C,EAqBpC+6C,CAAAA,CAAA31D,SAAA21D,CAAAjE,aAAAiE,GAAA,UAAcsC,CAAd,EAA8Cr8C,CAA9C,EAAwEnb,CAAxE,EAAwEA;AACtE,YAAMy3D,CAAAA,GAAW,CAACD,CAAAA,CAAQpwC,sBAARowC,CAA+Bx3D,CAAAA,CAAO,CAAPA,CAA/Bw3D,EAA0Cr8C,CAAAA,CAAYo3C,YAAZp3C,CAAyB,CAAzBA,CAA1Cq8C,CAAD,CAAjB;AACA,eAAO;AACL1E,UAAAA,iBAAAA,EAAmB2E,CADd;AAELvG,UAAAA,iBAAAA,EAAmBsG,CAAAA,CAAQlG,2BAARkG,CAAoCr8C,CAAAA,CAAYm3C,YAAhDkF,EAA8DC,CAAAA,CAAS,CAATA,CAAAA,CAAY3vC,MAAZ2vC,CAAmBv0D,IAAjFs0D,CAFd;AAGLzE,UAAAA,WAAAA,EAAa;AAAC3pB,YAAAA,IAAAA,EAAQp6B,KAAKo6B,IAAd;AAAoB9N,YAAAA,KAAAA,EAAStsB,KAAKssB;AAAlC;AAHR,SAAP;AAGiDA,OA1BfnhB,EA6B5B+6C,CAAAA,CAAA31D,SAAA21D,CAAA6H,mBAAA7H,GAAR,UAA4B3G,CAA5B,EAA4BA;AAE1B,aADA,IAAMwK,CAAAA,GAAsB,CAAC,8BAA4BxK,CAA5B,GAAuC,mBAAxC,CAA5B,EACShxD,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAIgxD,CAApB,EAAoBA,EAAehxD,CAAnC,EACY,MAANA,CAAM,GACRw7D,CAAAA,CAAUjuD,IAAViuD,CACI,sBACkBx7D,CADlB,GACmB,kBADnB,GACsCA,CADtC,GACuC,MAF3Cw7D,CADQ,GAICx7D,CAAAA,KAAMgxD,CAAAA,GAAc,CAApBhxD,GACTw7D,CAAAA,CAAUjuD,IAAViuD,CACI,0BACsBx7D,CADtB,GACuB,MAF3Bw7D,CADSx7D,GAKTw7D,CAAAA,CAAUjuD,IAAViuD,CACI,2BACuBx7D,CADvB,GACwB,kBADxB,GAC2CA,CAD3C,GAC4C,MAFhDw7D,CATQ;;AAiBZ,eAHAA,CAAAA,CAAUjuD,IAAViuD,CACI,KADJA,GAGOA,CAAAA,CAAU7vC,IAAV6vC,CAAe,IAAfA,CAAP;AAAsB,OAjDY5+C,EAmDtC+6C,CAAA;AAnDA,KAAA,CALAx3D,CAAAA,CAAA,EAAAA,CAAAA,CAKsCyrC,WAAtC,CALA;;AAKajsC,IAAAA,CAAAA,CAAAg4D,gBAAAh4D,GAAAg4D,CAAAh4D;AAAAg4D,GjI0Eb,EiI1EaA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,QAAAA,CAAAA;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,SAAAA,KAAAA,CAAAA,GAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,CAAAA,CAAAA,GAAAA,MAAAA,CAAAA,cAAAA,IAAAA;AAAAA,QAAAA,SAAAA,EAAAA;AAAAA,mBAAAA,KAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,QAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA;AAAAA,OAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,IAAAA,CAAAA,IAAAA,CAAAA,EAAAA,CAAAA,CAAAA,cAAAA,CAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,OAAAA,EAAAA,CAAAA,EAAAA,CAAAA,CAAAA;AAAAA,KAAAA,EAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,eAAAA,CAAAA,GAAAA;AAAAA,aAAAA,WAAAA,GAAAA,CAAAA;AAAAA;;AAAAA,MAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,SAAAA,GAAAA,SAAAA,CAAAA,GAAAA,MAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA,CAAAA,SAAAA,EAAAA,IAAAA,CAAAA,EAAAA,CAAAA;AAAAA,KAAAA,CAAAA;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;ACLb,QAAAhC,CAAAA,GAAAx1D,CAAAA,CAAA,GAAAA,CAAA;AAAA,QAEA20D,CAAAA,GAAA30D,CAAAA,CAAA,CAAAA,CAFA;AAAA,QAMAy3D,CAAAA,GAAA,UAAAj7C,CAAA,EAAAA;AAAA,eAAAi7C,CAAA,GAAAA;AAAAA,eAAAA,SAAAA,CAAAA,IAAAA,CAAAA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,SAAAA,CAAAA,IAAAA,IAAAA;AA6BA;;AAAA,aA7BoCh7C,CAAAA,CAAAg7C,CAAAh7C,EAAAD,CAAAC,CAAAA,EAClCg7C,CAAAA,CAAA51D,SAAA41D,CAAAruC,GAAAquC,GAAA,UAAIpuC,CAAJ,EAA6C/mB,CAA7C,EAA6CA;AAC3C,eAAO+mB,CAAAA,CAAiBD,GAAjBC,CAAqB/X,IAArB+X,EAA2B/mB,CAA3B+mB,CAAP;AAAkC/mB,OAFFma,EAIlCg7C,CAAAA,CAAA51D,SAAA41D,CAAArE,iBAAAqE,GAAA,UAAkBqC,CAAlB,EAAkDx3D,CAAlD,EAAkDA;AAChD,YAAMW,CAAAA,GAAcX,CAAAA,CAAO,CAAPA,CAAAA,CAAUK,IAAVL,CAAe+H,KAAf/H,EAApB;AAAA,YACMyT,CAAAA,GAAO4+C,CAAAA,CAAA9+C,OAAA8+C,CAAQmF,CAAAA,CAAQjrB,OAARirB,CAAgB32B,OAAhB22B,CAAwBt8C,SAAxBs8C,CAAkCzkD,OAA1Cs/C,CADb;AAAA,YAEMI,CAAAA,GAAe,8CAELh/C,CAAAA,CAAKN,SAFA,GAES,6BAFT,GAGfM,CAAAA,CAAKL,MAHU,GAGJ,8BAHI,GAG2BpE,KAAK1D,KAHhC,GAGqC,0BAL1D;AAQA,eAAO;AACLonD,UAAAA,OAAAA,EAAAA,CAAS,CADJ;AAELH,UAAAA,YAAAA,EAAc,CAACiF,CAAAA,CAAQ3F,wBAAR2F,CAAiCx3D,CAAAA,CAAO,CAAPA,CAAjCw3D,CAAD,CAFT;AAGLlF,UAAAA,YAAAA,EAAckF,CAAAA,CAAQpG,4BAARoG,CAAqC72D,CAArC62D,CAHT;AAILhF,UAAAA,QAAAA,EAAU,CAAC,GAAD,CAJL;AAKLC,UAAAA,YAAAA,EAAYA;AALP,SAAP;AAKcA,OAlBkBt4C,EAqBlCg7C,CAAAA,CAAA51D,SAAA41D,CAAAlE,aAAAkE,GAAA,UAAcqC,CAAd,EAA8Cr8C,CAA9C,EAAwEnb,CAAxE,EAAwEA;AACtE,YAAMy3D,CAAAA,GAAW,CAACD,CAAAA,CAAQpwC,sBAARowC,CAA+Bx3D,CAAAA,CAAO,CAAPA,CAA/Bw3D,EAA0Cr8C,CAAAA,CAAYo3C,YAAZp3C,CAAyB,CAAzBA,CAA1Cq8C,CAAD,CAAjB;AACA,eAAO;AACL1E,UAAAA,iBAAAA,EAAmB2E,CADd;AAELvG,UAAAA,iBAAAA,EAAmBsG,CAAAA,CAAQlG,2BAARkG,CAAoCr8C,CAAAA,CAAYm3C,YAAhDkF,EAA8DC,CAAAA,CAAS,CAATA,CAAAA,CAAY3vC,MAAZ2vC,CAAmBv0D,IAAjFs0D,CAFd;AAGLzE,UAAAA,WAAAA,EAAa;AAHR,SAAP;AAGe,OA1BiB54C,EA6BpCg7C,CAAA;AA7BA,KAAA,CAAoCjC,CAAAA,CAAA8J,SAApC,CANA;;AAMa9/D,IAAAA,CAAAA,CAAAi4D,cAAAj4D,GAAAi4D,CAAAj4D;AAAAi4D,GlIyEb,EkIzEaA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;ACDb,QAAA6H,CAAAA,GAAA,YAAA;AAAA,eAAAA,CAAA,GAAAA,CAwBA;;AAAA,aArBEA,CAAAA,CAAAz9D,SAAAy9D,CAAApiC,UAAAoiC,GAAA,UAAWniC,CAAX,EAAWA;AACT7rB,aAAK1D,KAAL0D,GAAa6rB,CAAAA,CAAWE,QAAXF,CAAoB,OAApBA,EAA6B,GAA7BA,CAAb7rB;AAA0C,OAD5CguD,EAIAA,CAAAA,CAAAz9D,SAAAy9D,CAAA7hC,WAAA6hC,GAAA,UAAYh9D,CAAZ,EAAYA;AACV,eAAA,EAAA,CAAKA,CAAL,IAAiC,MAAlBA,CAAAA,CAAOI,MAAtB,KAIO4O,KAAKosB,eAALpsB,CAAqBhP,CAArBgP,CAJP;AAI4BhP,OAT9Bg9D,EAYUA,CAAAA,CAAAz9D,SAAAy9D,CAAA5hC,eAAA4hC,GAAV,UAA0Bh9D,CAA1B,EAA0BA;AACxB,eAAuB,cAAnBA,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IAAS,IAAgC,cAAnBlD,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IAA9C;AAA8CA,OAbhD85D,EAqBFA,CAAA;AAxBA,KAAA,EAAA;;AAAsB9/D,IAAAA,CAAAA,CAAA8/D,SAAA9/D,GAAA8/D,CAAA9/D;AAAA8/D,GnI0EtB,EmI1EsBA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,QAAAA,CAAAA;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,SAAAA,KAAAA,CAAAA,GAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,CAAAA,CAAAA,GAAAA,MAAAA,CAAAA,cAAAA,IAAAA;AAAAA,QAAAA,SAAAA,EAAAA;AAAAA,mBAAAA,KAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,QAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA;AAAAA,OAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,IAAAA,CAAAA,IAAAA,CAAAA,EAAAA,CAAAA,CAAAA,cAAAA,CAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,OAAAA,EAAAA,CAAAA,EAAAA,CAAAA,CAAAA;AAAAA,KAAAA,EAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,eAAAA,CAAAA,GAAAA;AAAAA,aAAAA,WAAAA,GAAAA,CAAAA;AAAAA;;AAAAA,MAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,SAAAA,GAAAA,SAAAA,CAAAA,GAAAA,MAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA,CAAAA,SAAAA,EAAAA,IAAAA,CAAAA,EAAAA,CAAAA;AAAAA,KAAAA,CAAAA;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;ACLtB,QAAA/gC,CAAAA,GAAAv+B,CAAAA,CAAA,EAAAA,CAAA;AAAA,QAEAkR,CAAAA,GAAAlR,CAAAA,CAAA,CAAAA,CAFA;AAAA,QAMA43D,CAAAA,GAAA,UAAAp7C,CAAA,EAAAA;AAAA,eAAAo7C,CAAA,GAAAA;AAAAA,eAAAA,SAAAA,CAAAA,IAAAA,CAAAA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,SAAAA,CAAAA,IAAAA,IAAAA;AA6CA;;AAAA,aA7CiCn7C,CAAAA,CAAAm7C,CAAAn7C,EAAAD,CAAAC,CAAAA,EAC/Bm7C,CAAAA,CAAA/1D,SAAA+1D,CAAAxuC,GAAAwuC,GAAA,UAAIvuC,CAAJ,EAA6C/mB,CAA7C,EAA6CA;AAC3C,eAAO+mB,CAAAA,CAAiBD,GAAjBC,CAAqB/X,IAArB+X,EAA2B/mB,CAA3B+mB,CAAP;AAAkC/mB,OAFLma,EAI/Bm7C,CAAAA,CAAA/1D,SAAA+1D,CAAAxE,iBAAAwE,GAAA,UAAkBkC,CAAlB,EAAkDx3D,CAAlD,EAAkDA;AAChD,YAAM28D,CAAAA,GAAS38D,CAAAA,CAAO,CAAPA,CAAAA,CAAUK,IAAzB;AAAA,YACMu8D,CAAAA,GAAS58D,CAAAA,CAAO,CAAPA,CAAAA,CAAUK,IADzB;AAAA,YAEMM,CAAAA,GAAciO,CAAAA,CAAAzN,aAAAyN,CAAcxN,SAAdwN,CAAwB+tD,CAAxB/tD,EAAgCguD,CAAhChuD,EAAgCguD,CAAQ,CAAxChuD,CAFpB;AAGA,YAAA,CAAKjO,CAAL,EACE,MAAM,IAAI8D,KAAJ,CAAU,uCAAV,CAAN;AAEF,YAAMmD,CAAAA,GAAOjH,CAAAA,CAAYP,MAAzB;AAAA,YACMoB,CAAAA,GAAQm7D,CAAAA,CAAOv8D,MADrB;AAAA,YAEMqB,CAAAA,GAAQm7D,CAAAA,CAAOx8D,MAFrB;AAAA,YAIMqyD,CAAAA,GAAe,uCACS7qD,CADT,GACa,wBADb,GAEPpG,CAFO,GAEF,sBAFE,GAGPC,CAHO,GAGF,oJAHE,GADHk7D,CAAAA,CAAOA,CAAAA,CAAOv8D,MAAPu8D,GAAgB,CAAvBA,CACG,GAQY,4BARZ,IASPn7D,CAAAA,GAAQ,CATD,IASE,0BATF,IAUPC,CAAAA,GAAQ,CAVD,IAUE,8FAdvB;AAmBA,eAAO;AACL8wD,UAAAA,YAAAA,EAAcvyD,CAAAA,CAAOyG,GAAPzG,CAAW,UAAAnB,CAAA,EAAAA;AAAK,mBAAA24D,CAAAA,CAAQ3F,wBAAR2F,CAAiC34D,CAAjC24D,CAAA;AAAiC34D,WAAjDmB,CADT;AAELsyD,UAAAA,YAAAA,EAAckF,CAAAA,CAAQpG,4BAARoG,CAAqC72D,CAArC62D,CAFT;AAGLhF,UAAAA,QAAAA,EAAU,CAAC,GAAD,EAAM,GAAN,CAHL;AAILC,UAAAA,YAAAA,EAAYA;AAJP,SAAP;AAIcA,OAlCet4C,EAqC/Bm7C,CAAAA,CAAA/1D,SAAA+1D,CAAArE,aAAAqE,GAAA,UAAckC,CAAd,EAA8Cr8C,CAA9C,EAAwEnb,CAAxE,EAAwEA;AACtE,YAAMy3D,CAAAA,GAAWz3D,CAAAA,CAAOyG,GAAPzG,CAAW,UAACnB,CAAD,EAAItB,CAAJ,EAAIA;AAAM,iBAAAi6D,CAAAA,CAAQpwC,sBAARowC,CAA+B34D,CAA/B24D,EAAkCr8C,CAAAA,CAAYo3C,YAAZp3C,CAAyB5d,CAAzB4d,CAAlCq8C,CAAA;AAA2Dj6D,SAAhFyC,CAAjB;AACA,eAAO;AACL8yD,UAAAA,iBAAAA,EAAmB2E,CADd;AAELvG,UAAAA,iBAAAA,EAAmBsG,CAAAA,CAAQlG,2BAARkG,CAAoCr8C,CAAAA,CAAYm3C,YAAhDkF,EAA8DC,CAAAA,CAAS,CAATA,CAAAA,CAAY3vC,MAAZ2vC,CAAmBv0D,IAAjFs0D,CAFd;AAGLzE,UAAAA,WAAAA,EAAa;AAHR,SAAP;AAGe,OA1Cc54C,EA6CjCm7C,CAAA;AA7CA,KAAA,CAAiCr5B,CAAAA,CAAAG,MAAjC,CANA;;AAMal/B,IAAAA,CAAAA,CAAAo4D,WAAAp4D,GAAAo4D,CAAAp4D;AAAAo4D,GpIyEb,EoIzEaA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,QAAAA,CAAAA;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,SAAAA,KAAAA,CAAAA,GAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,CAAAA,CAAAA,GAAAA,MAAAA,CAAAA,cAAAA,IAAAA;AAAAA,QAAAA,SAAAA,EAAAA;AAAAA,mBAAAA,KAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,QAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA;AAAAA,OAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,IAAAA,CAAAA,IAAAA,CAAAA,EAAAA,CAAAA,CAAAA,cAAAA,CAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,OAAAA,EAAAA,CAAAA,EAAAA,CAAAA,CAAAA;AAAAA,KAAAA,EAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,eAAAA,CAAAA,GAAAA;AAAAA,aAAAA,WAAAA,GAAAA,CAAAA;AAAAA;;AAAAA,MAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,SAAAA,GAAAA,SAAAA,CAAAA,GAAAA,MAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA,CAAAA,SAAAA,EAAAA,IAAAA,CAAAA,EAAAA,CAAAA;AAAAA,KAAAA,CAAAA;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;ACNb,QAAAnC,CAAAA,GAAAz1D,CAAAA,CAAA,GAAAA,CAAA;AAAA,QAEAkR,CAAAA,GAAAlR,CAAAA,CAAA,CAAAA,CAFA;AAAA,QAGA20D,CAAAA,GAAA30D,CAAAA,CAAA,CAAAA,CAHA;AAAA,QAOAk4D,CAAAA,GAAA,UAAA17C,CAAA,EAAAA;AAAA,eAAA07C,CAAA,GAAAA;AAAAA,eAAAA,SAAAA,CAAAA,IAAAA,CAAAA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,SAAAA,CAAAA,IAAAA,IAAAA;AA+BA;;AAAA,aA/B8Bz7C,CAAAA,CAAAy7C,CAAAz7C,EAAAD,CAAAC,CAAAA,EAC5By7C,CAAAA,CAAAr2D,SAAAq2D,CAAA9uC,GAAA8uC,GAAA,UAAI7uC,CAAJ,EAA6C/mB,CAA7C,EAA6CA;AAC3C,eAAO+mB,CAAAA,CAAiBD,GAAjBC,CAAqB/X,IAArB+X,EAA2B/mB,CAA3B+mB,CAAP;AAAkC/mB,OAFRma,EAI5By7C,CAAAA,CAAAr2D,SAAAq2D,CAAA9E,iBAAA8E,GAAA,UAAkB7uC,CAAlB,EAA2D/mB,CAA3D,EAA2DA;AACzD,YAAMW,CAAAA,GAAciO,CAAAA,CAAA9L,SAAA8L,CAAUxF,QAAVwF,CAAmB5O,CAAAA,CAAO,CAAPA,CAAAA,CAAUK,IAAVL,CAAe+H,KAAf/H,EAAnB4O,EAA2CI,KAAKrB,IAAhDiB,CAApB;AAAA,YACMhH,CAAAA,GAAOjH,CAAAA,CAAYP,MADzB;AAAA,YAEM68D,CAAAA,GAAUl2C,CAAAA,CAAiB8qC,wBAAjB9qC,CAA0C/mB,CAAAA,CAAO,CAAPA,CAA1C+mB,CAFhB;AAAA,YAKM0rC,CAAAA,GAAe,aAFDyK,CAAAA,CAChB7K,CAAAA,CAAA9+C,OAAA8+C,CAAQtrC,CAAAA,CAAiBwlB,OAAjBxlB,CAAyB8Z,OAAzB9Z,CAAiC7L,SAAjC6L,CAA2ChU,OAAnDs/C,CADgB6K,EAC6C,GAD7CA,EACkDD,CADlDC,EAC2DluD,KAAKlQ,IADhEo+D,EACsEluD,KAAKrB,IAD3EuvD,EACiFluD,KAAKpQ,KADtFs+D,CAEC,GACN,4BADM,GAECt1D,CAFD,GAEK,wDAP1B;AAUA,eAAO;AACL2qD,UAAAA,YAAAA,EAAc,CAAC0K,CAAD,CADT;AAEL3K,UAAAA,YAAAA,EAAcvrC,CAAAA,CAAiBqqC,4BAAjBrqC,CAA8CpmB,CAA9ComB,CAFT;AAGLyrC,UAAAA,QAAAA,EAAU,CAAC,GAAD,CAHL;AAILC,UAAAA,YAAAA,EAAYA;AAJP,SAAP;AAIcA,OAnBYt4C,EAsB5By7C,CAAAA,CAAAr2D,SAAAq2D,CAAA3E,aAAA2E,GAAA,UAAc7uC,CAAd,EAAuD5L,CAAvD,EAAiFnb,CAAjF,EAAiFA;AAC/E,YAAMy3D,CAAAA,GAAW,CAAC1wC,CAAAA,CAAiBK,sBAAjBL,CAAwC/mB,CAAAA,CAAO,CAAPA,CAAxC+mB,EAAmD5L,CAAAA,CAAYo3C,YAAZp3C,CAAyB,CAAzBA,CAAnD4L,CAAD,CAAjB;AACA,eAAO;AACL+rC,UAAAA,iBAAAA,EAAmB2E,CADd;AAELvG,UAAAA,iBAAAA,EACInqC,CAAAA,CAAiBuqC,2BAAjBvqC,CAA6C5L,CAAAA,CAAYm3C,YAAzDvrC,EAAuE0wC,CAAAA,CAAS,CAATA,CAAAA,CAAY3vC,MAAZ2vC,CAAmBv0D,IAA1F6jB,CAHC;AAILgsC,UAAAA,WAAAA,EAAa;AAJR,SAAP;AAIe,OA5BW54C,EA+B9By7C,CAAA;AA/BA,KAAA,CAA8BzC,CAAAA,CAAAgK,GAA9B,CAPA;;AAuCA,aAAgBD,CAAhB,CACIzpD,CADJ,EACgBvV,CADhB,EAC8Bk/D,CAD9B,EAC0Dt+D,CAD1D,EACwE6O,CADxE,EACwF/O,CADxF,EACwFA;AACtF,cAAQE,CAAR;AACE,aAAK,UAAL;AACE,iBAYN,UACI2U,CADJ,EACgBvV,CADhB,EAC8B6F,CAD9B,EAC4D8D,CAD5D,EAC4F6f,CAD5F,EAEID,CAFJ,EAEoB9Z,CAFpB,EAEoC/O,CAFpC,EAEoCA;AAGlC,iBAFA,IAAMgJ,CAAAA,GAAO7D,CAAAA,CAAM3D,MAAnB,EACIi9D,CAAAA,GAAQ,EADZ,EAES9/D,CAAAA,GAAIqK,CAAAA,GAAO,CAApB,EAAuBrK,CAAAA,IAAK,CAA5B,EAA4B,EAAKA,CAAjC,EACE8/D,CAAAA,IAAS,uBACK9/D,CADL,GACM,MADN,GACaoQ,CAAAA,CAAKpQ,CAALoQ,CADb,GACoB,gEADpB,GAGQ5J,CAAAA,CAAMxG,CAANwG,CAHR,GAGgB,8CAHhB,GAIa8D,CAAAA,CAAQtK,CAARsK,CAJb,GAIuB,eAJhCw1D;;AAOF,mBAAO,wBACUn/D,CADV,GACc,SADd,GACwB0J,CADxB,GAC4B,+CAD5B,GAEgChJ,CAFhC,GAEqC,iEAFrC,GAKGy+D,CALH,GAKQ,mDALR,GAMwC31C,CANxC,GAM6C,IAN7C,GAMkDD,CANlD,GAMwD,8CANxD,GAOiChU,CAAAA,CAAKN,SAPtC,GAO+C,GAP/C,GAOmDjV,CAPnD,GAOuD,2DAP9D;AAzBWo/D,WAYb,CAXU7pD,CAWV,EAXgBvV,CAWhB,EAXsBk/D,CAAAA,CAAYr5D,KAWlC,EAXyCq5D,CAAAA,CAAYv1D,OAWrD,EAX8Du1D,CAAAA,CAAY11C,KAW1E,EAXiF01C,CAAAA,CAAY31C,MAW7F,EAXqG9Z,CAWrG,EAX2G/O,CAW3G,CAZM;;AAEF,aAAK,SAAL;AACE,iBAkCN,UACI6U,CADJ,EACgBvV,CADhB,EAC8B6F,CAD9B,EAC4D8D,CAD5D,EAC4F6f,CAD5F,EAEID,CAFJ,EAEoB9Z,CAFpB,EAEoBA;AAIlB,iBAHA,IAAM/F,CAAAA,GAAO7D,CAAAA,CAAM3D,MAAnB,EAEIi9D,CAAAA,GAAQ,EAFZ,EAGS9/D,CAAAA,GAAIqK,CAAAA,GAAO,CAApB,EAAuBrK,CAAAA,IAAK,CAA5B,EAA4B,EAAKA,CAAjC,EACE8/D,CAAAA,IAAS,qBACG9/D,CADH,GACI,MADJ,GACWoQ,CAAAA,CAAKpQ,CAALoQ,CADX,GACkB,4EADlB,GAIiB,KAAK5J,CAAAA,CAAMxG,CAANwG,CAAAA,GAAW,CAAhB,CAJjB,GAImC,6EAJnC,GAMOA,CAAAA,CAAMxG,CAANwG,CANP,GAMe,yDANf,GAQW8D,CAAAA,CAAQtK,CAARsK,CARX,GAQqB,aAR9Bw1D;;AAWF,mBAAO,sBACQn/D,CADR,GACY,SADZ,GACsB0J,CADtB,GAC0B,6DAD1B,GAICy1D,CAJD,GAIM,iDAJN,GAKsC31C,CALtC,GAK2C,IAL3C,GAKgDD,CALhD,GAKsD,4CALtD,GAM+BhU,CAAAA,CAAKN,SANpC,GAM6C,GAN7C,GAMiDjV,CANjD,GAMqD,qDAN5D;AApDWq/D,WAkCb,CAjCU9pD,CAiCV,EAjCgBvV,CAiChB,EAjCsBk/D,CAAAA,CAAYr5D,KAiClC,EAjCyCq5D,CAAAA,CAAYv1D,OAiCrD,EAjC8Du1D,CAAAA,CAAY11C,KAiC1E,EAjCiF01C,CAAAA,CAAY31C,MAiC7F,EAjCqG9Z,CAiCrG,CAlCM;;AAEF,aAAK,MAAL;AACE,iBA4DN,UACI8F,CADJ,EACgBvV,CADhB,EAC8B6F,CAD9B,EAC4D8D,CAD5D,EAC4F6f,CAD5F,EAEID,CAFJ,EAEoB9Z,CAFpB,EAEoBA;AAIlB,iBAHA,IAAM/F,CAAAA,GAAO7D,CAAAA,CAAM3D,MAAnB,EAEIi9D,CAAAA,GAAQ,EAFZ,EAGS9/D,CAAAA,GAAIqK,CAAAA,GAAO,CAApB,EAAuBrK,CAAAA,IAAK,CAA5B,EAA4B,EAAKA,CAAjC,EACE8/D,CAAAA,IAAS,mBACC9/D,CADD,GACE,MADF,GACSoQ,CAAAA,CAAKpQ,CAALoQ,CADT,GACgB,8CADhB,GAGI5J,CAAAA,CAAMxG,CAANwG,CAHJ,GAGY,QAHZ,IAGqBA,CAAAA,CAAMxG,CAANwG,CAAAA,GAAW,CAHhC,IAGiC,yBAHjC,GAIS8D,CAAAA,CAAQtK,CAARsK,CAJT,GAImB,WAJ5Bw1D;;AAOF,mBAAO,oBACMn/D,CADN,GACU,SADV,GACoB0J,CADpB,GACwB,uDADxB,GAIDy1D,CAJC,GAII,+CAJJ,GAKoC31C,CALpC,GAKyC,IALzC,GAK8CD,CAL9C,GAKoD,0CALpD,GAM6BhU,CAAAA,CAAKN,SANlC,GAM2C,GAN3C,GAM+CjV,CAN/C,GAMmD,+CAN1D;AA1EWs/D,WA4Db,CA3DU/pD,CA2DV,EA3DgBvV,CA2DhB,EA3DsBk/D,CAAAA,CAAYr5D,KA2DlC,EA3DyCq5D,CAAAA,CAAYv1D,OA2DrD,EA3D8Du1D,CAAAA,CAAY11C,KA2D1E,EA3DiF01C,CAAAA,CAAY31C,MA2D7F,EA3DqG9Z,CA2DrG,CA5DM;;AAEF;AACE,gBAAM,IAAIlJ,KAAJ,CAAU,cAAV,CAAN;AAXJ;AAlCWvH;;AAAAA,IAAAA,CAAAA,CAAA04D,QAAA14D,GAAA04D,CAAA14D,EAgCbA,CAAAA,CAAAggE,cAAAhgE,GAAAggE,CAhCahgE;AAgCbggE,GrIwCA,EqIxCAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;AClCA,QAAAC,CAAAA,GAAA,YAAA;AAAA,eAAAA,CAAA,GAAAA,CA4BA;;AAAA,aAzBEA,CAAAA,CAAA59D,SAAA49D,CAAAviC,UAAAuiC,GAAA,UAAWtiC,CAAX,EAAWA;AACT7rB,aAAKlQ,IAALkQ,GAAY6rB,CAAAA,CAAWgB,SAAXhB,CAAqB,MAArBA,EAA6B,UAA7BA,CAAZ7rB,EACAA,KAAKpQ,KAALoQ,GAAa6rB,CAAAA,CAAWE,QAAXF,CAAoB,OAApBA,EAA6B,CAA7BA,CADb7rB,EAEAA,KAAKrB,IAALqB,GAAY6rB,CAAAA,CAAWiB,OAAXjB,CAAmB,MAAnBA,CAFZ7rB;AAE+B,OAHjCmuD,EAMAA,CAAAA,CAAA59D,SAAA49D,CAAAhiC,WAAAgiC,GAAA,UAAYn9D,CAAZ,EAAYA;AACV,eAAA,EAAA,CAAKA,CAAL,IAAiC,MAAlBA,CAAAA,CAAOI,MAAtB,KAIO4O,KAAKosB,eAALpsB,CAAqBhP,CAArBgP,CAJP;AAI4BhP,OAX9Bm9D,EAcUA,CAAAA,CAAA59D,SAAA49D,CAAA/hC,eAAA+hC,GAAV,UAA0Bn9D,CAA1B,EAA0BA;AACxB,eAAuB,cAAnBA,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IAAS,IAAgC,cAAnBlD,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IAA9C;AAA8CA,OAfhDi6D,EAyBFA,CAAA;AA5BA,KAAA,EAAA;;AAAsBjgE,IAAAA,CAAAA,CAAAigE,GAAAjgE,GAAAigE,CAAAjgE;AAAAigE,GtI0EtB,EsI1EsBA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,QAAAA,CAAAA;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,SAAAA,KAAAA,CAAAA,GAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,CAAAA,CAAAA,GAAAA,MAAAA,CAAAA,cAAAA,IAAAA;AAAAA,QAAAA,SAAAA,EAAAA;AAAAA,mBAAAA,KAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,QAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA;AAAAA,OAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,IAAAA,CAAAA,IAAAA,CAAAA,EAAAA,CAAAA,CAAAA,cAAAA,CAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,OAAAA,EAAAA,CAAAA,EAAAA,CAAAA,CAAAA;AAAAA,KAAAA,EAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,eAAAA,CAAAA,GAAAA;AAAAA,aAAAA,WAAAA,GAAAA,CAAAA;AAAAA;;AAAAA,MAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,SAAAA,GAAAA,SAAAA,CAAAA,GAAAA,MAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA,CAAAA,SAAAA,EAAAA,IAAAA,CAAAA,EAAAA,CAAAA;AAAAA,KAAAA,CAAAA;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;ACLtB,QAAAt7B,CAAAA,GAAAnkC,CAAAA,CAAA,EAAAA,CAAA;AAAA,QAEAkR,CAAAA,GAAAlR,CAAAA,CAAA,CAAAA,CAFA;AAAA,QAMAo3D,CAAAA,GAAA,UAAA56C,CAAA,EAAAA;AAAA,eAAA46C,CAAA,GAAAA;AAAAA,eAAAA,SAAAA,CAAAA,IAAAA,CAAAA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,SAAAA,CAAAA,IAAAA,IAAAA;AAiBA;;AAAA,aAjB4C36C,CAAAA,CAAA26C,CAAA36C,EAAAD,CAAAC,CAAAA,EAC1C26C,CAAAA,CAAAv1D,SAAAu1D,CAAAhuC,GAAAguC,GAAA,UAAI/tC,CAAJ,EAA6C/mB,CAA7C,EAA6CA;AAC3C,eAAO+mB,CAAAA,CAAiBD,GAAjBC,CAAqB/X,IAArB+X,EAA2B/mB,CAA3B+mB,CAAP;AAAkC/mB,OAFMma,EAI1C26C,CAAAA,CAAAv1D,SAAAu1D,CAAAhE,iBAAAgE,GAAA,UAAkB/tC,CAAlB,EAA2D/mB,CAA3D,EAA2DA;AACzD,eAAOy9D,CAAAA,CACH12C,CADG02C,EACez9D,CADfy9D,EACez9D,CAAQ,CADvBy9D,EAC6BzuD,KAAKtB,WADlC+vD,EAC+CzuD,KAAKlB,OADpD2vD,EAC6DzuD,KAAKnH,OADlE41D,EAC2EzuD,KAAKrB,IADhF8vD,EACsFzuD,KAAK8uB,eAD3F2/B,CAAP;AACkG3/B,OAN1D3jB,EAQ1C26C,CAAAA,CAAAv1D,SAAAu1D,CAAA7D,aAAA6D,GAAA,UAAc/tC,CAAd,EAAuD5L,CAAvD,EAAiFnb,CAAjF,EAAiFA;AAC/E,YAAMy3D,CAAAA,GAAW,CAAC1wC,CAAAA,CAAiBK,sBAAjBL,CAAwC/mB,CAAAA,CAAO,CAAPA,CAAxC+mB,EAAmD5L,CAAAA,CAAYo3C,YAAZp3C,CAAyB,CAAzBA,CAAnD4L,CAAD,CAAjB;AACA,eAAO;AACL+rC,UAAAA,iBAAAA,EAAmB2E,CADd;AAELvG,UAAAA,iBAAAA,EACInqC,CAAAA,CAAiBuqC,2BAAjBvqC,CAA6C5L,CAAAA,CAAYm3C,YAAzDvrC,EAAuE0wC,CAAAA,CAAS,CAATA,CAAAA,CAAY3vC,MAAZ2vC,CAAmBv0D,IAA1F6jB,CAHC;AAILgsC,UAAAA,WAAAA,EAAa;AAJR,SAAP;AAIe,OAdyB54C,EAiB5C26C,CAAA;AAjBA,KAAA,CAA4CjzB,CAAAA,CAAA7D,iBAA5C,CANA;;AAMa9gC,IAAAA,CAAAA,CAAA43D,sBAAA53D,GAAA43D,CAAA53D;;AAmBb,QAAA42D,CAAAA,GAAA,UAAA55C,CAAA,EAAAA;AAAA,eAAA45C,CAAA,GAAAA;AAAAA,eAAAA,SAAAA,CAAAA,IAAAA,CAAAA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,SAAAA,CAAAA,IAAAA,IAAAA;AAiBA;;AAAA,aAjBsC35C,CAAAA,CAAA25C,CAAA35C,EAAAD,CAAAC,CAAAA,EACpC25C,CAAAA,CAAAv0D,SAAAu0D,CAAAhtC,GAAAgtC,GAAA,UAAI/sC,CAAJ,EAA6C/mB,CAA7C,EAA6CA;AAC3C,eAAO+mB,CAAAA,CAAiBD,GAAjBC,CAAqB/X,IAArB+X,EAA2B/mB,CAA3B+mB,CAAP;AAAkC/mB,OAFAma,EAIpC25C,CAAAA,CAAAv0D,SAAAu0D,CAAAhD,iBAAAgD,GAAA,UAAkB/sC,CAAlB,EAA2D/mB,CAA3D,EAA2DA;AACzD,eAAOy9D,CAAAA,CACH12C,CADG02C,EACez9D,CADfy9D,EACez9D,CAAQ,CADvBy9D,EAC8BzuD,KAAKtB,WADnC+vD,EACgDzuD,KAAKlB,OADrD2vD,EAC8DzuD,KAAKnH,OADnE41D,EAC4EzuD,KAAKrB,IADjF8vD,EACuFzuD,KAAK8uB,eAD5F2/B,CAAP;AACmG3/B,OANjE3jB,EAQpC25C,CAAAA,CAAAv0D,SAAAu0D,CAAA7C,aAAA6C,GAAA,UAAc/sC,CAAd,EAAuD5L,CAAvD,EAAiFnb,CAAjF,EAAiFA;AAC/E,YAAMy3D,CAAAA,GAAW,CAAC1wC,CAAAA,CAAiBK,sBAAjBL,CAAwC/mB,CAAAA,CAAO,CAAPA,CAAxC+mB,EAAmD5L,CAAAA,CAAYo3C,YAAZp3C,CAAyB,CAAzBA,CAAnD4L,CAAD,CAAjB;AACA,eAAO;AACL+rC,UAAAA,iBAAAA,EAAmB2E,CADd;AAELvG,UAAAA,iBAAAA,EACInqC,CAAAA,CAAiBuqC,2BAAjBvqC,CAA6C5L,CAAAA,CAAYm3C,YAAzDvrC,EAAuE0wC,CAAAA,CAAS,CAATA,CAAAA,CAAY3vC,MAAZ2vC,CAAmBv0D,IAA1F6jB,CAHC;AAILgsC,UAAAA,WAAAA,EAAa;AAJR,SAAP;AAIe,OAdmB54C,EAiBtC25C,CAAA;AAjBA,KAAA,CAAsCjyB,CAAAA,CAAAhE,WAAtC,CAAA;;AAkBA,aAAS4/B,CAAT,CACI12C,CADJ,EAC6C/mB,CAD7C,EAC+DwN,CAD/D,EAC0FE,CAD1F,EAEII,CAFJ,EAEkBjG,CAFlB,EAE0C8F,CAF1C,EAE+DmwB,CAF/D,EAE+DA;AAAAA,WAD2B,CAC3BA,KAD2BpwB,CAC3BowB,KAD2BpwB,CAAAA,GAAA,EAC3BowB,GAD2B,KACtF,CADsF,KACtFhwB,CADsF,KACtFA,CAAAA,GAAA,EADsF,CAC3BgwB,EAA3D,KAAc,CAAd,KAAcj2B,CAAd,KAAcA,CAAAA,GAAA,EAAd,CAA2Di2B,EAA7C,KAAwB,CAAxB,KAAwBnwB,CAAxB,KAAwBA,CAAAA,GAAA,EAAxB,CAA6CmwB;AAC7D,UAAMqV,CAAAA,GAAanzC,CAAAA,CAAO,CAAPA,CAAAA,CAAUK,IAAVL,CAAe+H,KAAf/H,EAAnB;AACA4O,MAAAA,CAAAA,CAAAtB,YAAAsB,CAAarB,oBAAbqB,CAAkCpB,CAAlCoB,EAAoDukC,CAApDvkC,EAAgElB,CAAhEkB,EAA6E/G,CAA7E+G,EAAsFjB,CAAtFiB;AACA,UAAMjO,CAAAA,GACFiO,CAAAA,CAAAtB,YAAAsB,CAAaZ,sBAAbY,CAAoCpB,CAApCoB,EAAsDukC,CAAtDvkC,EAAkE/G,CAAlE+G,EAA2ElB,CAA3EkB,EAAwFjB,CAAxFiB,EAA8Fd,CAA9Fc,CADJ;AAAA,UAEMwrC,CAAAA,GAAaxrC,CAAAA,CAAA9L,SAAA8L,CAAU5L,IAAV4L,CAAelB,CAAfkB,CAFnB;AAAA,UAIIvC,CAAAA,GAAM,EAJV;AAMEA,MAAAA,CAAAA,IADEyxB,CAAAA,GACK,oBAAkBsc,CAAlB,GAA4B,IADjCtc,GAGK,oBAAkBsc,CAAlB,GAA4B,UAFnC/tC;AAIF,UAAM+wD,CAAAA,GAAcr2C,CAAAA,CAAiB8qC,wBAAjB9qC,CAA0C/mB,CAAAA,CAAO,CAAPA,CAA1C+mB,CAApB;AAAA,UAEM0rC,CAAAA,GAAe,aADDiL,CAAAA,CAAoBN,CAApBM,EAAiChwD,CAAjCgwD,EAA8C/vD,CAA9C+vD,EAAoD71D,CAApD61D,EARR,iBAQQA,EAAkErxD,CAAlEqxD,EAAuE,KAAvEA,CACC,GACJ,QAHjB;AAKA,aAAO;AACLnL,QAAAA,YAAAA,EAAc,CAAC6K,CAAD,CADT;AAEL9K,QAAAA,YAAAA,EAAcvrC,CAAAA,CAAiBqqC,4BAAjBrqC,CAA8CpmB,CAA9ComB,CAFT;AAGLyrC,QAAAA,QAAAA,EAAU,CAAC,GAAD,CAHL;AAILC,QAAAA,YAAAA,EAAYA;AAJP,OAAP;AAtCWv1D;;AAAAA,IAAAA,CAAAA,CAAA42D,gBAAA52D,GAAA42D,CAAA52D;;AA8Cb,QAAA63D,CAAAA,GAAA,UAAA76C,CAAA,EAAAA;AAAA,eAAA66C,CAAA,GAAAA;AAAAA,eAAAA,SAAAA,CAAAA,IAAAA,CAAAA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,SAAAA,CAAAA,IAAAA,IAAAA;AAiBA;;AAAA,aAjBwC56C,CAAAA,CAAA46C,CAAA56C,EAAAD,CAAAC,CAAAA,EACtC46C,CAAAA,CAAAx1D,SAAAw1D,CAAAjuC,GAAAiuC,GAAA,UAAIhuC,CAAJ,EAA6C/mB,CAA7C,EAA6CA;AAC3C,eAAO+mB,CAAAA,CAAiBD,GAAjBC,CAAqB/X,IAArB+X,EAA2B/mB,CAA3B+mB,CAAP;AAAkC/mB,OAFEma,EAItC46C,CAAAA,CAAAx1D,SAAAw1D,CAAAjE,iBAAAiE,GAAA,UAAkBhuC,CAAlB,EAA2D/mB,CAA3D,EAA2DA;AACzD,eAAO29D,CAAAA,CACH52C,CADG42C,EACe39D,CADf29D,EACe39D,CAAQ,CADvB29D,EAC6B3uD,KAAKtB,WADlCiwD,EAC+C3uD,KAAKlB,OADpD6vD,EAC6D3uD,KAAKnH,OADlE81D,EAC2E3uD,KAAKrB,IADhFgwD,CAAP;AACuFhwD,OANnDwM,EAQtC46C,CAAAA,CAAAx1D,SAAAw1D,CAAA9D,aAAA8D,GAAA,UAAchuC,CAAd,EAAuD5L,CAAvD,EAAiFnb,CAAjF,EAAiFA;AAC/E,YAAMy3D,CAAAA,GAAW,CAAC1wC,CAAAA,CAAiBK,sBAAjBL,CAAwC/mB,CAAAA,CAAO,CAAPA,CAAxC+mB,CAAD,CAAjB;AACA,eAAO;AACL+rC,UAAAA,iBAAAA,EAAmB2E,CADd;AAELvG,UAAAA,iBAAAA,EACInqC,CAAAA,CAAiBuqC,2BAAjBvqC,CAA6C5L,CAAAA,CAAYm3C,YAAzDvrC,EAAuE0wC,CAAAA,CAAS,CAATA,CAAAA,CAAY3vC,MAAZ2vC,CAAmBv0D,IAA1F6jB,CAHC;AAILgsC,UAAAA,WAAAA,EAAa;AAJR,SAAP;AAIe,OAdqB54C,EAiBxC46C,CAAA;AAjBA,KAAA,CAAwClzB,CAAAA,CAAA1D,aAAxC,CAAA;;AAAajhC,IAAAA,CAAAA,CAAA63D,kBAAA73D,GAAA63D,CAAA73D;;AAmBb,QAAAq4D,CAAAA,GAAA,UAAAr7C,CAAA,EAAAA;AAAA,eAAAq7C,CAAA,GAAAA;AAAAA,eAAAA,SAAAA,CAAAA,IAAAA,CAAAA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,SAAAA,CAAAA,IAAAA,IAAAA;AAiBA;;AAAA,aAjBkCp7C,CAAAA,CAAAo7C,CAAAp7C,EAAAD,CAAAC,CAAAA,EAChCo7C,CAAAA,CAAAh2D,SAAAg2D,CAAAzuC,GAAAyuC,GAAA,UAAIxuC,CAAJ,EAA6C/mB,CAA7C,EAA6CA;AAC3C,eAAO+mB,CAAAA,CAAiBD,GAAjBC,CAAqB/X,IAArB+X,EAA2B/mB,CAA3B+mB,CAAP;AAAkC/mB,OAFJma,EAIhCo7C,CAAAA,CAAAh2D,SAAAg2D,CAAAzE,iBAAAyE,GAAA,UAAkBxuC,CAAlB,EAA2D/mB,CAA3D,EAA2DA;AACzD,eAAO29D,CAAAA,CACH52C,CADG42C,EACe39D,CADf29D,EACe39D,CAAQ,CADvB29D,EAC8B3uD,KAAKtB,WADnCiwD,EACgD3uD,KAAKlB,OADrD6vD,EAC8D3uD,KAAKnH,OADnE81D,EAC4E3uD,KAAKrB,IADjFgwD,CAAP;AACwFhwD,OAN1DwM,EAQhCo7C,CAAAA,CAAAh2D,SAAAg2D,CAAAtE,aAAAsE,GAAA,UAAcxuC,CAAd,EAAuD5L,CAAvD,EAAiFnb,CAAjF,EAAiFA;AAC/E,YAAMy3D,CAAAA,GAAW,CAAC1wC,CAAAA,CAAiBK,sBAAjBL,CAAwC/mB,CAAAA,CAAO,CAAPA,CAAxC+mB,CAAD,CAAjB;AACA,eAAO;AACL+rC,UAAAA,iBAAAA,EAAmB2E,CADd;AAELvG,UAAAA,iBAAAA,EACInqC,CAAAA,CAAiBuqC,2BAAjBvqC,CAA6C5L,CAAAA,CAAYm3C,YAAzDvrC,EAAuE0wC,CAAAA,CAAS,CAATA,CAAAA,CAAY3vC,MAAZ2vC,CAAmBv0D,IAA1F6jB,CAHC;AAILgsC,UAAAA,WAAAA,EAAa;AAJR,SAAP;AAIe,OAde54C,EAiBlCo7C,CAAA;AAjBA,KAAA,CAAkC1zB,CAAAA,CAAA5D,OAAlC,CAAA;;AAkBA,aAAS0/B,CAAT,CACI52C,CADJ,EAC6C/mB,CAD7C,EAC+DwN,CAD/D,EAC0FE,CAD1F,EAEII,CAFJ,EAEkBjG,CAFlB,EAE0C8F,CAF1C,EAE0CA;AAAAA,WADgD,CAChDA,KADgDD,CAChDC,KADgDD,CAAAA,GAAA,EAChDC,GADgD,KACtF,CADsF,KACtFG,CADsF,KACtFA,CAAAA,GAAA,EADsF,CAChDH,EAAtC,KAAc,CAAd,KAAc9F,CAAd,KAAcA,CAAAA,GAAA,EAAd,CAAsC8F,EAAxB,KAAwB,CAAxB,KAAwBA,CAAxB,KAAwBA,CAAAA,GAAA,EAAxB,CAAwBA;AACxC,UAAMwlC,CAAAA,GAAanzC,CAAAA,CAAO,CAAPA,CAAAA,CAAUK,IAAVL,CAAe+H,KAAf/H,EAAnB;AACA4O,MAAAA,CAAAA,CAAAtB,YAAAsB,CAAarB,oBAAbqB,CAAkCpB,CAAlCoB,EAAoDukC,CAApDvkC,EAAgElB,CAAhEkB,EAA6E/G,CAA7E+G,EAAsFjB,CAAtFiB;AACA,UAAMjO,CAAAA,GACFiO,CAAAA,CAAAtB,YAAAsB,CAAaZ,sBAAbY,CAAoCpB,CAApCoB,EAAsDukC,CAAtDvkC,EAAkE/G,CAAlE+G,EAA2ElB,CAA3EkB,EAAwFjB,CAAxFiB,EAA8Fd,CAA9Fc,CADJ;AAAA,UAMMwuD,CAAAA,GAAcr2C,CAAAA,CAAiBqqC,4BAAjBrqC,CAA8CosB,CAA9CpsB,CANpB;AAAA,UAQM0rC,CAAAA,GAAe,WADDiL,CAAAA,CAAoBN,CAApBM,EAAiChwD,CAAjCgwD,EAA8C/vD,CAA9C+vD,EAAoD71D,CAApD61D,EALR,oDAKQA,EAFR,EAEQA,EAAuE,MAAvEA,CACC,GACN,MATf;AAWA,aAAO;AACLnL,QAAAA,YAAAA,EAAc,CAAC6K,CAAD,CADT;AAEL9K,QAAAA,YAAAA,EAAcvrC,CAAAA,CAAiBqqC,4BAAjBrqC,CAA8CpmB,CAA9ComB,CAFT;AAGLyrC,QAAAA,QAAAA,EAAU,CAAC,GAAD,CAHL;AAILC,QAAAA,YAAAA,EAAYA;AAJP,OAAP;AAQF;;AAAA,aAAgBiL,CAAhB,CACIrzD,CADJ,EACsBqD,CADtB,EAC6CC,CAD7C,EAC6D9F,CAD7D,EACgFuE,CADhF,EAC6FC,CAD7F,EAEI4tC,CAFJ,EAEIA;AACF,UAAMxsC,CAAAA,GAAYpD,CAAAA,CAAEtG,KAApB;AAAA,UACM6D,CAAAA,GAAOyC,CAAAA,CAAEtG,KAAFsG,CAAQjK,MADrB;;AAEA,UAAIsN,CAAAA,CAAYtN,MAAZsN,IAAsB,CAA1B,EAA6B;AAC3B,YAAMkqC,CAAAA,GAAKlqC,CAAAA,CAAYA,CAAAA,CAAYtN,MAAZsN,GAAqB,CAAjCA,CAAX;AAAA,YACMkwD,CAAAA,GAAK/1D,CAAAA,CAAQA,CAAAA,CAAQzH,MAARyH,GAAiB,CAAzBA,CADX;AAAA,YAEMg2D,CAAAA,GAAUlwD,CAAAA,CAAKA,CAAAA,CAAKvN,MAALuN,GAAc,CAAdA,GAAkB,CAAvBA,CAFhB;AAAA,YAGMmwD,CAAAA,GAAQnwD,CAAAA,CAAKA,CAAAA,CAAKvN,MAALuN,GAAc,CAAnBA,CAHd;AAAA,YAIMowD,CAAAA,GAAOtwD,CAAAA,CAAU7F,CAAAA,GAAO,CAAjB6F,CAJb;AAAA,YAKIuwD,CAAAA,GAAQ,EALZ;AAAA,YAMIC,CAAAA,GAAQ,EANZ;AAAA,YAOIC,CAAAA,GAAW,EAPf;;AA0BA,YAjBEF,CAAAA,GADEH,CAAAA,GAAUC,CAAVD,KAAoB,CAApBA,GACM,2CACwBjmB,CADxB,GAC0B,gCAD1B,GAEQhwC,CAFR,GAEY,kBAFZ,GAE+BA,CAF/B,GAEmC,UAFnC,GAE8Cg2D,CAF9C,GAEgD,KAFhD,GAEsDC,CAFtD,GAE6D,iCAF7D,GAGYj2D,CAHZ,GAGgB,iBAHhB,GAGkCA,CAHlC,GAGsC,WAHtC,GAGkDm2D,CAHlD,GAGsD,yGAHtD,GAOM3xD,CAPN,GAOS,qBARfyxD,GAWM,2CACwBjmB,CADxB,GAC0B,gCAD1B,GAEQhwC,CAFR,GAEY,kBAFZ,GAE+BA,CAF/B,GAEmC,UAFnC,GAE8Cg2D,CAF9C,GAEgD,KAFhD,GAEsDC,CAFtD,GAE6D,2BAF7D,GAGMzxD,CAHN,GAGS,qBAbjB4xD,EAiByB,MAAvBtwD,CAAAA,CAAYtN,MAAhB,EAA8B;AAC5B,cAAMu3C,CAAAA,GAAKjqC,CAAAA,CAAYA,CAAAA,CAAYtN,MAAZsN,GAAqB,CAAjCA,CAAX;AAAA,cACMywD,CAAAA,GAAKt2D,CAAAA,CAAQA,CAAAA,CAAQzH,MAARyH,GAAiB,CAAzBA,CADX;AAAA,cAEMu2D,CAAAA,GAAUzwD,CAAAA,CAAKA,CAAAA,CAAKvN,MAALuN,GAAc,CAAdA,GAAkB,CAAvBA,CAFhB;AAAA,cAGM0wD,CAAAA,GAAQ1wD,CAAAA,CAAKA,CAAAA,CAAKvN,MAALuN,GAAc,CAAnBA,CAHd;AAAA,cAIM2wD,CAAAA,GAAO7wD,CAAAA,CAAU7F,CAAAA,GAAO,CAAjB6F,CAJb;AAMEwwD,UAAAA,CAAAA,GADEG,CAAAA,GAAUC,CAAVD,KAAoB,CAApBA,GACM,yCACoBzmB,CADpB,GACsB,8BADtB,GAEI/vC,CAFJ,GAEQ,kBAFR,GAE2BA,CAF3B,GAE+B,UAF/B,GAE0Cu2D,CAF1C,GAE4C,KAF5C,GAEkDC,CAFlD,GAEyD,+BAFzD,GAGQx2D,CAHR,GAGY,iBAHZ,GAG8BA,CAH9B,GAGkC,WAHlC,GAG8C02D,CAH9C,GAGkD,+BAHlD,GAIU1mB,CAJV,GAIY,iEALlBwmB,GAUM,2CACsBzmB,CADtB,GACwB,gCADxB,GAEM/vC,CAFN,GAEU,kBAFV,GAE6BA,CAF7B,GAEiC,UAFjC,GAE4Cu2D,CAF5C,GAE8C,KAF9C,GAEoDC,CAFpD,GAE2D,yBAXnEH,EAcFC,CAAAA,GAAW,iCAdTD;AAiCJ;;AAAA,eAdoB,6CACgBr2D,CADhB,GACoB,4BADpB,GAEFA,CAFE,GAEE,wEAFF,GAKMqyC,CALN,GAKc,+CALd,GAORgkB,CAPQ,GAOH,kBAPG,GAQRD,CARQ,GAQH,kBARG,GASRE,CATQ,GASA,kBATA,GAUR7xD,CAVQ,GAUL,0DAIf;AAEA;;AAAA,UAAM+tC,CAAAA,GAAaxrC,CAAAA,CAAA9L,SAAA8L,CAAU5L,IAAV4L,CAAelB,CAAfkB,CAAnB;AAAA,UACMyrC,CAAAA,GAAgBzrC,CAAAA,CAAA9L,SAAA8L,CAAUjH,cAAViH,CAAyBlB,CAAzBkB,CADtB;AAAA,UAEM0rC,CAAAA,GAAcD,CAAAA,CAAcj6C,MAFlC;AAAA,UAGMm+D,CAAAA,GAAW5wD,CAAAA,CAAKvN,MAHtB;AAAA,UAIMo+D,CAAAA,GAA0Br2D,CAAAA,CAAgBmyC,CAAhBnyC,CAJhC;AAAA,UAKMs2D,CAAAA,GAAgBC,CAAAA,CAAUjxD,CAAVixD,EAAqB,WAArBA,CALtB;AAAA,UAMMC,CAAAA,GAAWD,CAAAA,CAAU/wD,CAAV+wD,EAAgB,MAAhBA,CANjB;AAAA,UAOME,CAAAA,GAAoBF,CAAAA,CAAUrkB,CAAVqkB,EAAyB,eAAzBA,CAP1B;AAyDA,aA9BoB,mBACVF,CADU,GACa,0CADb,GAEgB52D,CAFhB,GAEoB,8BAFpB,GAGAA,CAHA,GAGI,uEAHJ,GAKK0yC,CALL,GAKgB,+BALhB,GAMGikB,CANH,GAMW,oCANX,GAOQ32D,CAPR,GAOY,wCAPZ,GAQY0yC,CARZ,GAQuB,kCARvB,GASMA,CATN,GASiB,sBATjB,GAUNqkB,CAVM,GAUE,oBAVF,GAWNF,CAXM,GAWO,oBAXP,GAnBAC,CAAAA,CAAU72D,CAAV62D,EAAmB,SAAnBA,CAmBA,GAYK,oBAZL,GAaNE,CAbM,GAaW,oCAbX,GAeQ3kB,CAfR,GAegB,4GAfhB,GAkBcG,CAlBd,GAkBwB,iJAlBxB,GAqBWxyC,CArBX,GAqBe,KArBf,GAqBqB0yC,CArBrB,GAqBgC,QArBhC,GAqByC1yC,CArBzC,GAqB6C,kEArB7C,GAsBgCA,CAtBhC,GAsBoC,KAtBpC,GAsB0C0yC,CAtB1C,GAsBqD,0CAtBrD,GAuBe1yC,CAvBf,GAuBmB,KAvBnB,GAuByB0yC,CAvBzB,GAuBoC,0CAvBpC,IAlBJ3sC,CAAAA,CAAKvD,MAALuD,CAAY,UAAC0vB,CAAD,EAAMwhC,CAAN,EAAMA;AAAQ,eAAAxhC,CAAAA,GAAMwhC,CAAN;AAAMA,OAAhClxD,IAGJ,sOAQEvB,CARF,GAQK,mBAXDuB,GAcJ,8CAEIvB,CAEI,IAwBO,uCAxBP,GA0BNC,CA1BM,GA0BH,kDAIjB;AAIJ;;AAAA,aAAgBqyD,CAAhB,CAA0BxtD,CAA1B,EAAwD4tD,CAAxD,EAAwDA;AAEtD,WADA,IAAIzB,CAAAA,GAAQ,EAAZ,EACS9/D,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAI2T,CAAAA,CAAM9Q,MAA1B,EAAkC7C,CAAAA,EAAlC,EACE8/D,CAAAA,IAAS,aACLyB,CADK,GACI,GADJ,GACQvhE,CADR,GACS,MADT,GACgB2T,CAAAA,CAAM3T,CAAN2T,CADhB,GACwB,SADjCmsD;;AAIF,aAAOA,CAAP;AAGF;;AAAA,aAAgBl1D,CAAhB,CAAgCP,CAAhC,EAAgCA;AAC9B,aAAO,gDACkCA,CADlC,GACsC,qBADtC,GAC4DA,CAD5D,GACgE,0BADhE,GAEGA,CAFH,GAEO,gEAFP,GAKmBA,CALnB,GAKuB,8HALvB,GASOA,CATP,GASW,wBATlB;AA5LW1K;;AAAAA,IAAAA,CAAAA,CAAAq4D,YAAAr4D,GAAAq4D,CAAAr4D,EA0CbA,CAAAA,CAAAwgE,mBAAAxgE,GAAAwgE,CA1CaxgE,EAiLbA,CAAAA,CAAAwhE,SAAAxhE,GAAAwhE,CAjLaxhE,EA2LbA,CAAAA,CAAAiL,eAAAjL,GAAAiL,CA3LajL;AA2LbiL,GvItMA,EuIsMAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,QAAAA,CAAAA;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,SAAAA,KAAAA,CAAAA,GAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,CAAAA,CAAAA,GAAAA,MAAAA,CAAAA,cAAAA,IAAAA;AAAAA,QAAAA,SAAAA,EAAAA;AAAAA,mBAAAA,KAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,QAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA;AAAAA,OAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,IAAAA,CAAAA,IAAAA,CAAAA,EAAAA,CAAAA,CAAAA,cAAAA,CAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,OAAAA,EAAAA,CAAAA,EAAAA,CAAAA,CAAAA;AAAAA,KAAAA,EAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,eAAAA,CAAAA,GAAAA;AAAAA,aAAAA,WAAAA,GAAAA,CAAAA;AAAAA;;AAAAA,MAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,SAAAA,GAAAA,SAAAA,CAAAA,GAAAA,MAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA,CAAAA,SAAAA,EAAAA,IAAAA,CAAAA,EAAAA,CAAAA;AAAAA,KAAAA,CAAAA;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;ACtRA,QAKA42D,CAAAA,GAAA,UAAA7kD,CAAA,EAAAA;AAAA,eAAA6kD,CAAA,GAAAA;AAAAA,eAAAA,SAAAA,CAAAA,IAAAA,CAAAA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,SAAAA,CAAAA,IAAAA,IAAAA;AAgEA;;AAAA,aAhE0C5kD,CAAAA,CAAA4kD,CAAA5kD,EAAAD,CAAAC,CAAAA,EAGxC4kD,CAAAA,CAAAx/D,SAAAw/D,CAAAj4C,GAAAi4C,GAAA,UAAIh4C,CAAJ,EAA6C/mB,CAA7C,EAA6CA;AAC3C,eAAO+mB,CAAAA,CAAiBD,GAAjBC,CAAqB/X,IAArB+X,EAA2B/mB,CAA3B+mB,CAAP;AAAkC/mB,OAJIma,EAMxC4kD,CAAAA,CAAAx/D,SAAAw/D,CAAAjO,iBAAAiO,GAAA,UAAkBvH,CAAlB,EAAkDx3D,CAAlD,EAAkDA;AAShD,aARA,IAAMW,CAAAA,GAAwB,EAA9B,EACMq+D,CAAAA,GAAQh/D,CAAAA,CAAO,CAAPA,CAAAA,CAAUK,IAAVL,CAAeI,MAAfJ,IAAyB,CADvC,EAGMi/D,CAAAA,GAAU,EAHhB,EAKMC,CAAAA,GAAMlwD,KAAKmwD,MAALnwD,CAAYhP,CAAZgP,CALZ,EAMIokD,CAAAA,GAAY8L,CAAAA,CAAI,CAAJA,CANhB,EAQS12D,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAIxI,CAAAA,CAAO,CAAPA,CAAAA,CAAUK,IAAVL,CAAeI,MAAnC,EAA2CoI,CAAAA,EAA3C,EAEMwG,KAAKvE,IAALuE,CAAUnE,OAAVmE,CAAkBxG,CAAlBwG,KAAwB,CAAxBA,IAAkD,MAArBA,KAAKvE,IAALuE,CAAU5O,MAAvC4O,IACEA,KAAK5B,QAAL4B,IACFrO,CAAAA,CAAYmK,IAAZnK,CAAiB,CAAjBA,CADEqO,EAKJokD,CAAAA,GAAY,wBACD5qD,CADC,GACA,SADA,GACUA,CADV,GACW,KADX,GACiBxI,CAAAA,CAAO,CAAPA,CAAAA,CAAUK,IAAVL,CAAewI,CAAfxI,CADjB,GACkC,KADlC,GACwCwI,CADxC,GACyC,4BADzC,GAECA,CAFD,GAEE,OAFF,GAEUA,CAFV,GAEW,eAFX,GAGR4qD,CAHQ,GAGC,uBATXpkD,KAaFiwD,CAAAA,CAAQn0D,IAARm0D,CAAa,cAAYz2D,CAAZ,GAAa,gBAAb,GAA8B7H,CAAAA,CAAYP,MAA1C,GAAgD,IAA7D6+D,GAEAt+D,CAAAA,CAAYmK,IAAZnK,CAAiBX,CAAAA,CAAO,CAAPA,CAAAA,CAAUK,IAAVL,CAAewI,CAAfxI,CAAjBW,CAfEqO;;AAmBN,YAEMyjD,CAAAA,GAAe,0CAFP9xD,CAAAA,CAAYP,MAAZO,IAAsB,CAEf,IACgB,mFADhB,GAGFq+D,CAHE,GAGG,4CAHH,GAIfC,CAAAA,CAAQ/1C,IAAR+1C,CAAa,IAAbA,CAJe,GAIG,YAJH,GAKfC,CAAAA,CAAI,CAAJA,CALe,GAKT,iDALS,GAMf9L,CANe,GAMN,YANM,GAOf8L,CAAAA,CAAI,CAAJA,CAPe,GAOT,6EATZ;AAaA,eAAO;AACL3M,UAAAA,YAAAA,EAAcvyD,CAAAA,CAAOyG,GAAPzG,CAAW,UAAAnB,CAAA,EAAAA;AAAK,mBAAA24D,CAAAA,CAAQ3F,wBAAR2F,CAAiC34D,CAAjC24D,CAAA;AAAiC34D,WAAjDmB,CADT;AAELsyD,UAAAA,YAAAA,EAAckF,CAAAA,CAAQpG,4BAARoG,CAAqC72D,CAArC62D,CAFT;AAGLhF,UAAAA,QAAAA,EAAU,CAAC,GAAD,CAHL;AAILC,UAAAA,YAAAA,EAAYA;AAJP,SAAP;AAIcA,OArDwBt4C,EAwDxC4kD,CAAAA,CAAAx/D,SAAAw/D,CAAA9N,aAAA8N,GAAA,UAAcvH,CAAd,EAA8Cr8C,CAA9C,EAAwEnb,CAAxE,EAAwEA;AACtE,YAAMy3D,CAAAA,GAAWz3D,CAAAA,CAAOyG,GAAPzG,CAAW,UAACnB,CAAD,EAAItB,CAAJ,EAAIA;AAAM,iBAAAi6D,CAAAA,CAAQpwC,sBAARowC,CAA+B34D,CAA/B24D,EAAkCr8C,CAAAA,CAAYo3C,YAAZp3C,CAAyB5d,CAAzB4d,CAAlCq8C,CAAA;AAA2Dj6D,SAAhFyC,CAAjB;AACA,eAAO;AACL8yD,UAAAA,iBAAAA,EAAmB2E,CADd;AAELvG,UAAAA,iBAAAA,EAAmBsG,CAAAA,CAAQlG,2BAARkG,CAAoCr8C,CAAAA,CAAYm3C,YAAhDkF,EAA8DC,CAAAA,CAAS,CAATA,CAAAA,CAAY3vC,MAAZ2vC,CAAmBv0D,IAAjFs0D,CAFd;AAGLzE,UAAAA,WAAAA,EAAa;AAHR,SAAP;AAGe,OA7DuB54C,EAgE1C4kD,CAAA;AAhEA,KAAA,CALArhE,CAAAA,CAAA,EAAAA,CAAAA,CAK0C6rC,UAA1C,CALA;AAAA,QAuEA6sB,CAAAA,GAAA,UAAAl8C,CAAA,EAAAA;AAAA,eAAAk8C,CAAA,GAAAA;AAAAA,eAAAA,SAAAA,CAAAA,IAAAA,CAAAA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,SAAAA,CAAAA,IAAAA,IAAAA;AAIA;;AAAA,aAJoCj8C,CAAAA,CAAAi8C,CAAAj8C,EAAAD,CAAAC,CAAAA,EAClCi8C,CAAAA,CAAA72D,SAAA62D,CAAA+I,MAAA/I,GAAA,UAAOp2D,CAAP,EAAOA;AACL,eAAO,CAAC,cAAD,EAAiB,wBAAjB,EAA2C,EAA3C,CAAP;AAAkD,OAFlBma,EAIpCi8C,CAAA;AAJA,KAAA,CAAoC2I,CAApC,CAvEA;;AAuEa7hE,IAAAA,CAAAA,CAAAk5D,cAAAl5D,GAAAk5D,CAAAl5D;;AAMb,QAAA+4D,CAAAA,GAAA,UAAA/7C,CAAA,EAAAA;AAAA,eAAA+7C,CAAA,GAAAA;AAAAA,eAAAA,SAAAA,CAAAA,IAAAA,CAAAA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,SAAAA,CAAAA,IAAAA,IAAAA;AAWA;;AAAA,aAXqC97C,CAAAA,CAAA87C,CAAA97C,EAAAD,CAAAC,CAAAA,EACnC87C,CAAAA,CAAA12D,SAAA02D,CAAAkJ,MAAAlJ,GAAA,UAAOj2D,CAAP,EAAOA;AAEL,aADA,IAAIgD,CAAAA,GAAO,CAAX,EACSwF,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAIxI,CAAAA,CAAO,CAAPA,CAAAA,CAAUK,IAAVL,CAAeI,MAAnC,EAA2CoI,CAAAA,EAA3C,EAA2CA,CACrCwG,KAAKvE,IAALuE,CAAUnE,OAAVmE,CAAkBxG,CAAlBwG,KAAwB,CAAxBA,IAAkD,MAArBA,KAAKvE,IAALuE,CAAU5O,MADFoI,MAEvCxF,CAAAA,IAAQhD,CAAAA,CAAO,CAAPA,CAAAA,CAAUK,IAAVL,CAAewI,CAAfxI,CAF+BwI;;AAM3C,eAAO,CAAC,cAAD,EAAiB,wBAAjB,EAA2C,cAAYxF,CAAZ,GAAgB,IAA3D,CAAP;AAAkE,OATjCmX,EAWrC87C,CAAA;AAXA,KAAA,CAAqC8I,CAArC,CAAA;;AAAa7hE,IAAAA,CAAAA,CAAA+4D,eAAA/4D,GAAA+4D,CAAA/4D;;AAab,QAAA84D,CAAAA,GAAA,UAAA97C,CAAA,EAAAA;AAAA,eAAA87C,CAAA,GAAAA;AAAAA,eAAAA,SAAAA,CAAAA,IAAAA,CAAAA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,SAAAA,CAAAA,IAAAA,IAAAA;AAWA;;AAAA,aAXoC77C,CAAAA,CAAA67C,CAAA77C,EAAAD,CAAAC,CAAAA,EAClC67C,CAAAA,CAAAz2D,SAAAy2D,CAAAmJ,MAAAnJ,GAAA,UAAOh2D,CAAP,EAAOA;AAEL,aADA,IAAMo/D,CAAAA,GAAU,EAAhB,EACS52D,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAIxI,CAAAA,CAAO,CAAPA,CAAAA,CAAUK,IAAVL,CAAeI,MAAnC,EAA2CoI,CAAAA,EAA3C,EAA2CA,CACrCwG,KAAKvE,IAALuE,CAAUnE,OAAVmE,CAAkBxG,CAAlBwG,KAAwB,CAAxBA,IAAkD,MAArBA,KAAKvE,IAALuE,CAAU5O,MADFoI,KAEvC42D,CAAAA,CAAQt0D,IAARs0D,CAAa,cAAY52D,CAAZ,GAAa,QAA1B42D,CAFuC52D;;AAM3C,eAAO,CAAI42D,CAAAA,CAAQl2C,IAARk2C,CAAa,IAAbA,IAAkB,yBAAtB,EAAiD,mCAAjD,EAAsF,EAAtF,CAAP;AAA6F,OAT7DjlD,EAWpC67C,CAAA;AAXA,KAAA,CAAoC+I,CAApC,CAAA;;AAAa7hE,IAAAA,CAAAA,CAAA84D,cAAA94D,GAAA84D,CAAA94D;;AAab,QAAAg5D,CAAAA,GAAA,UAAAh8C,CAAA,EAAAA;AAAA,eAAAg8C,CAAA,GAAAA;AAAAA,eAAAA,SAAAA,CAAAA,IAAAA,CAAAA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,SAAAA,CAAAA,IAAAA,IAAAA;AAWA;;AAAA,aAXoC/7C,CAAAA,CAAA+7C,CAAA/7C,EAAAD,CAAAC,CAAAA,EAClC+7C,CAAAA,CAAA32D,SAAA22D,CAAAiJ,MAAAjJ,GAAA,UAAOl2D,CAAP,EAAOA;AAEL,aADA,IAAMo/D,CAAAA,GAAU,EAAhB,EACS52D,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAIxI,CAAAA,CAAO,CAAPA,CAAAA,CAAUK,IAAVL,CAAeI,MAAnC,EAA2CoI,CAAAA,EAA3C,EAA2CA,CACrCwG,KAAKvE,IAALuE,CAAUnE,OAAVmE,CAAkBxG,CAAlBwG,KAAwB,CAAxBA,IAAkD,MAArBA,KAAKvE,IAALuE,CAAU5O,MADFoI,KAEvC42D,CAAAA,CAAQt0D,IAARs0D,CAAa,cAAY52D,CAAZ,GAAa,QAA1B42D,CAFuC52D;;AAM3C,eAAO,CAAI42D,CAAAA,CAAQl2C,IAARk2C,CAAa,IAAbA,IAAkB,yBAAtB,EAAiD,mCAAjD,EAAsF,EAAtF,CAAP;AAA6F,OAT7DjlD,EAWpC+7C,CAAA;AAXA,KAAA,CAAoC6I,CAApC,CAAA;;AAAa7hE,IAAAA,CAAAA,CAAAg5D,cAAAh5D,GAAAg5D,CAAAh5D;;AAab,QAAAi5D,CAAAA,GAAA,UAAAj8C,CAAA,EAAAA;AAAA,eAAAi8C,CAAA,GAAAA;AAAAA,eAAAA,SAAAA,CAAAA,IAAAA,CAAAA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,SAAAA,CAAAA,IAAAA,IAAAA;AAIA;;AAAA,aAJqCh8C,CAAAA,CAAAg8C,CAAAh8C,EAAAD,CAAAC,CAAAA,EACnCg8C,CAAAA,CAAA52D,SAAA42D,CAAAgJ,MAAAhJ,GAAA,UAAOn2D,CAAP,EAAOA;AACL,eAAO,CAAC,cAAD,EAAiB,wBAAjB,EAA2C,EAA3C,CAAP;AAAkD,OAFjBma,EAIrCg8C,CAAA;AAJA,KAAA,CAAqC4I,CAArC,CAAA;;AAAa7hE,IAAAA,CAAAA,CAAAi5D,eAAAj5D,GAAAi5D,CAAAj5D;;AAMb,QAAA64D,CAAAA,GAAA,UAAA77C,CAAA,EAAAA;AAAA,eAAA67C,CAAA,GAAAA;AAAAA,eAAAA,SAAAA,CAAAA,IAAAA,CAAAA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,SAAAA,CAAAA,IAAAA,IAAAA;AAIA;;AAAA,aAJuC57C,CAAAA,CAAA47C,CAAA57C,EAAAD,CAAAC,CAAAA,EACrC47C,CAAAA,CAAAx2D,SAAAw2D,CAAAoJ,MAAApJ,GAAA,UAAO/1D,CAAP,EAAOA;AACL,eAAO,CAAC,cAAD,EAAiB,wBAAjB,EAA2C,qBAA3C,CAAP;AAAkD,OAFfma,EAIvC47C,CAAA;AAJA,KAAA,CAAuCgJ,CAAvC,CAAA;;AAAa7hE,IAAAA,CAAAA,CAAA64D,iBAAA74D,GAAA64D,CAAA74D;;AAMb,QAAAm5D,CAAAA,GAAA,UAAAn8C,CAAA,EAAAA;AAAA,eAAAm8C,CAAA,GAAAA;AAAAA,eAAAA,SAAAA,CAAAA,IAAAA,CAAAA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,SAAAA,CAAAA,IAAAA,IAAAA;AAIA;;AAAA,aAJ0Cl8C,CAAAA,CAAAk8C,CAAAl8C,EAAAD,CAAAC,CAAAA,EACxCk8C,CAAAA,CAAA92D,SAAA82D,CAAA8I,MAAA9I,GAAA,UAAOr2D,CAAP,EAAOA;AACL,eAAO,CAAC,uBAAD,EAA0B,mCAA1B,EAA+D,EAA/D,CAAP;AAAsE,OAFhCma,EAI1Ck8C,CAAA;AAJA,KAAA,CAA0C0I,CAA1C,CAAA;;AAAa7hE,IAAAA,CAAAA,CAAAm5D,oBAAAn5D,GAAAm5D,CAAAn5D;AAAAm5D,GxIhDb,EwIgDaA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,QAAAA,CAAAA;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,SAAAA,KAAAA,CAAAA,GAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,CAAAA,CAAAA,GAAAA,MAAAA,CAAAA,cAAAA,IAAAA;AAAAA,QAAAA,SAAAA,EAAAA;AAAAA,mBAAAA,KAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,QAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA;AAAAA,OAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,IAAAA,CAAAA,IAAAA,CAAAA,EAAAA,CAAAA,CAAAA,cAAAA,CAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,OAAAA,EAAAA,CAAAA,EAAAA,CAAAA,CAAAA;AAAAA,KAAAA,EAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,eAAAA,CAAAA,GAAAA;AAAAA,aAAAA,WAAAA,GAAAA,CAAAA;AAAAA;;AAAAA,MAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,SAAAA,GAAAA,SAAAA,CAAAA,GAAAA,MAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA,CAAAA,SAAAA,EAAAA,IAAAA,CAAAA,EAAAA,CAAAA;AAAAA,KAAAA,CAAAA;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;AChIb,QAAAt0B,CAAAA,GAAArkC,CAAAA,CAAA,EAAAA,CAAA;AAAA,QAEAkR,CAAAA,GAAAlR,CAAAA,CAAA,CAAAA,CAFA;AAAA,QAMAg5D,CAAAA,GAAA,UAAAx8C,CAAA,EAAAA;AAAA,eAAAw8C,CAAA,GAAAA;AAAAA,eAAAA,SAAAA,CAAAA,IAAAA,CAAAA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,SAAAA,CAAAA,IAAAA,IAAAA;AAWA;;AAAA,aAXgCv8C,CAAAA,CAAAu8C,CAAAv8C,EAAAD,CAAAC,CAAAA,EAC9Bu8C,CAAAA,CAAAn3D,SAAAm3D,CAAA5vC,GAAA4vC,GAAA,UAAI3vC,CAAJ,EAA6C/mB,CAA7C,EAA6CA;AAC3C,eAAO+mB,CAAAA,CAAiBD,GAAjBC,CAAqB/X,IAArB+X,EAA2B/mB,CAA3B+mB,CAAP;AAAkC/mB,OAFNma,EAK9Bu8C,CAAAA,CAAAn3D,SAAAm3D,CAAA5F,iBAAA4F,GAAA,UAAkBc,CAAlB,EAAkDx3D,CAAlD,EAAkDA;AAChD,eAAO8wD,CAAAA,CAAkB0G,CAAlB1G,EAA2B9wD,CAAAA,CAAO,CAAPA,CAA3B8wD,EAAsC9hD,KAAKy6B,MAA3CqnB,EAAmD9hD,KAAK06B,IAAxDonB,EAA8D9hD,KAAKvE,IAAnEqmD,CAAP;AAA0ErmD,OAN9C0P,EAQ9Bu8C,CAAAA,CAAAn3D,SAAAm3D,CAAAzF,aAAAyF,GAAA,UAAcc,CAAd,EAA8Cr8C,CAA9C,EAAwEnb,CAAxE,EAAwEA;AACtE,eAAOixD,CAAAA,CAAcuG,CAAdvG,EAAuB91C,CAAvB81C,EAAoCjxD,CAApCixD,CAAP;AAA2CjxD,OATfma,EAWhCu8C,CAAA;AAXA,KAAA,CAAgC30B,CAAAA,CAAAyH,KAAhC,CANA;;AAMatsC,IAAAA,CAAAA,CAAAw5D,UAAAx5D,GAAAw5D,CAAAx5D;;AAab,QAAAu5D,CAAAA,GAAA,UAAAv8C,CAAA,EAAAA;AAAA,eAAAu8C,CAAA,GAAAA;AAAAA,eAAAA,SAAAA,CAAAA,IAAAA,CAAAA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,SAAAA,CAAAA,IAAAA,IAAAA;AAwBA;;AAAA,aAxBmCt8C,CAAAA,CAAAs8C,CAAAt8C,EAAAD,CAAAC,CAAAA,EACjCs8C,CAAAA,CAAAl3D,SAAAk3D,CAAA3vC,GAAA2vC,GAAA,UAAI1vC,CAAJ,EAA6C/mB,CAA7C,EAA6CA;AAC3C,eAAO+mB,CAAAA,CAAiBD,GAAjBC,CAAqB/X,IAArB+X,EAA2B/mB,CAA3B+mB,CAAP;AAAkC/mB,OAFHma,EAKjCs8C,CAAAA,CAAAl3D,SAAAk3D,CAAA3F,iBAAA2F,GAAA,UAAkBe,CAAlB,EAAkDx3D,CAAlD,EAAkDA;AAChD,YAAA,CAAKw3D,CAAAA,CAAQjrB,OAARirB,CAAgBtH,aAAhBsH,CAA8Bx3D,CAAAA,CAAO,CAAPA,CAAAA,CAAU8M,MAAxC0qD,CAAL,IAA6C1qD,CAAY0qD,CAAAA,CAAQjrB,OAARirB,CAAgBtH,aAAhBsH,CAA8Bx3D,CAAAA,CAAO,CAAPA,CAAAA,CAAU8M,MAAxC0qD,CAAzD,IACKx3D,CAAAA,CAAOI,MAAPJ,IAAiB,CAAjBA,IAAiB,CAAMw3D,CAAAA,CAAQjrB,OAARirB,CAAgBtH,aAAhBsH,CAA8Bx3D,CAAAA,CAAO,CAAPA,CAAAA,CAAU8M,MAAxC0qD,CAD5B,IAEKx3D,CAAAA,CAAOI,MAAPJ,IAAiB,CAAjBA,IAAiB,CAAMw3D,CAAAA,CAAQjrB,OAARirB,CAAgBtH,aAAhBsH,CAA8Bx3D,CAAAA,CAAO,CAAPA,CAAAA,CAAU8M,MAAxC0qD,CAF5B,EAGE,MAAM,IAAI/yD,KAAJ,CAAU,0CAAV,CAAN;AAEF,YAAIzE,CAAAA,CAAOI,MAAPJ,IAAiB,CAAjBA,IAAsBA,CAAAA,CAAO,CAAPA,CAAAA,CAAUgnB,WAAVhnB,CAAsB2K,IAAtB3K,CAA2B,UAACzC,CAAD,EAACA;AAAc,iBAAM,MAANA,CAAA;AAAAA,SAA1CyC,CAA1B,EACE,MAAM,IAAIyE,KAAJ,CAAU,kDAAV,CAAN;AAEF,YAAMglC,CAAAA,GAAS3nC,KAAAA,CAAMuO,IAANvO,CAAW9B,CAAAA,CAAO,CAAPA,CAAAA,CAAUgnB,WAArBllB,CAAf;AAAA,YACM4nC,CAAAA,GAAO5nC,KAAAA,CAAMuO,IAANvO,CAAW9B,CAAAA,CAAO,CAAPA,CAAAA,CAAUgnB,WAArBllB,CADb;AAAA,YAEM2I,CAAAA,GAAOzK,CAAAA,CAAOI,MAAPJ,IAAiB,CAAjBA,GAAqB8B,KAAAA,CAAMuO,IAANvO,CAAW9B,CAAAA,CAAO,CAAPA,CAAAA,CAAUgnB,WAArBllB,CAArB9B,GAAyD,EAFtE;AAIA,eAAO8wD,CAAAA,CAAkB0G,CAAlB1G,EAA2B9wD,CAAAA,CAAO,CAAPA,CAA3B8wD,EAAsCrnB,CAAtCqnB,EAA8CpnB,CAA9ConB,EAAoDrmD,CAApDqmD,CAAP;AAA2DrmD,OAlB5B0P,EAqBjCs8C,CAAAA,CAAAl3D,SAAAk3D,CAAAxF,aAAAwF,GAAA,UAAce,CAAd,EAA8Cr8C,CAA9C,EAAwEnb,CAAxE,EAAwEA;AACtE,eAAOixD,CAAAA,CAAcuG,CAAdvG,EAAuB91C,CAAvB81C,EAAoCjxD,CAApCixD,CAAP;AAA2CjxD,OAtBZma,EAwBnCs8C,CAAA;AAxBA,KAAA,CAAmC10B,CAAAA,CAAA4H,QAAnC,CAAA;;AA0BA,aAASmnB,CAAT,CACI0G,CADJ,EACoCntD,CADpC,EAC+Co/B,CAD/C,EAC8EC,CAD9E,EAEIj/B,CAFJ,EAEIA;AACkB,YAAhBA,CAAAA,CAAKrK,MAAW,KAClBqK,CAAAA,GAAOJ,CAAAA,CAAEhK,IAAFgK,CAAOtC,KAAPsC,CAAa,CAAbA,EAAgB5D,GAAhB4D,CAAoB,UAAC+f,CAAD,EAAM7d,CAAN,EAAMA;AAAQ,eAAAA,CAAA;AAAAA,OAAlClC,CADW,GAGpBI,CAAAA,GAAOA,CAAAA,CAAKhE,GAALgE,CAAS,UAAAlD,CAAA,EAAAA;AAAQ,eAAAqH,CAAAA,CAAA9L,SAAA8L,CAAUxG,SAAVwG,CAAoBrH,CAApBqH,EAA0BvE,CAAAA,CAAEhK,IAAFgK,CAAOjK,MAAjCwO,CAAA;AAAiCxO,OAAlDqK,CAHa,EAIpBg/B,CAAAA,GAASA,CAAAA,CAAOhjC,GAAPgjC,CAAW,UAAChiC,CAAD,EAAQ8E,CAAR,EAAQA;AAC1B,eAAI9E,CAAAA,GAAQ4C,CAAAA,CAAEhK,IAAFgK,CAAOI,CAAAA,CAAK8B,CAAL9B,CAAPJ,IAAoB,CAA5B5C,GACK4C,CAAAA,CAAEhK,IAAFgK,CAAOI,CAAAA,CAAK8B,CAAL9B,CAAPJ,CADL5C,GAGGmH,CAAAA,CAAA9L,SAAA8L,CAAUxG,SAAVwG,CAAoBnH,CAApBmH,EAA2BvE,CAAAA,CAAEhK,IAAFgK,CAAOI,CAAAA,CAAK8B,CAAL9B,CAAPJ,CAA3BuE,CAHP;AAG8CrC,OAJvCk9B,CAJW,EAUpBC,CAAAA,GAAOA,CAAAA,CAAKjjC,GAALijC,CAAS,UAAChiC,CAAD,EAAM6E,CAAN,EAAMA;AACpB,eAAI7E,CAAAA,GAAM2C,CAAAA,CAAEhK,IAAFgK,CAAOI,CAAAA,CAAK8B,CAAL9B,CAAPJ,IAAoB,CAA1B3C,GACK2C,CAAAA,CAAEhK,IAAFgK,CAAOI,CAAAA,CAAK8B,CAAL9B,CAAPJ,CADL3C,GAGGkH,CAAAA,CAAA9L,SAAA8L,CAAUxG,SAAVwG,CAAoBlH,CAApBkH,EAAyBvE,CAAAA,CAAEhK,IAAFgK,CAAOI,CAAAA,CAAK8B,CAAL9B,CAAPJ,CAAzBuE,CAHP;AAG4CrC,OAJvCm9B,CAVa;;AAoBpB,WAHA,IAAM/oC,CAAAA,GAAc0J,CAAAA,CAAEhK,IAAFgK,CAAOtC,KAAPsC,EAApB,EAEMg1D,CAAAA,GAAqB,EAF3B,EAGS9hE,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAIkN,CAAAA,CAAKrK,MAAzB,EAAiC7C,CAAAA,EAAjC,EACEoD,CAAAA,CAAY8J,CAAAA,CAAKlN,CAALkN,CAAZ9J,CAAAA,GAAuB+oC,CAAAA,CAAKnsC,CAALmsC,CAAAA,GAAUD,CAAAA,CAAOlsC,CAAPksC,CAAjC9oC,EACI8oC,CAAAA,CAAOlsC,CAAPksC,CAAAA,GAAY,CAAZA,IACF41B,CAAAA,CAASv0D,IAATu0D,CAAc,eAAa50D,CAAAA,CAAKlN,CAALkN,CAAb,GAAoB,OAApB,GAA4Bg/B,CAAAA,CAAOlsC,CAAPksC,CAA5B,GAAqC,GAAnD41B,CAFF1+D;;AAMF,UACM8xD,CAAAA,GAAe,yCADR9xD,CAAAA,CAAYP,MACJ,GACiB,gBADjB,GAEbi/D,CAAAA,CAASn2C,IAATm2C,CAAc,UAAdA,CAFa,GAEY,0CAHjC;AAMA,aAAO;AACL9M,QAAAA,YAAAA,EAAc,CAACiF,CAAAA,CAAQ3F,wBAAR2F,CAAiCntD,CAAjCmtD,CAAD,CADT;AAELlF,QAAAA,YAAAA,EAAckF,CAAAA,CAAQpG,4BAARoG,CAAqC72D,CAArC62D,CAFT;AAGLhF,QAAAA,QAAAA,EAAU,CAAC,GAAD,CAHL;AAILC,QAAAA,YAAAA,EAAYA;AAJP,OAAP;AAQF;;AAAA,aAASxB,CAAT,CAAuBuG,CAAvB,EAAuDr8C,CAAvD,EAAiFnb,CAAjF,EAAiFA;AAC/E,UAAMy3D,CAAAA,GAAW,CAACD,CAAAA,CAAQpwC,sBAARowC,CAA+Bx3D,CAAAA,CAAO,CAAPA,CAA/Bw3D,EAA0Cr8C,CAAAA,CAAYo3C,YAAZp3C,CAAyB,CAAzBA,CAA1Cq8C,CAAD,CAAjB;AACA,aAAO;AACL1E,QAAAA,iBAAAA,EAAmB2E,CADd;AAELvG,QAAAA,iBAAAA,EAAmBsG,CAAAA,CAAQlG,2BAARkG,CAAoCr8C,CAAAA,CAAYm3C,YAAhDkF,EAA8DC,CAAAA,CAAS,CAATA,CAAAA,CAAY3vC,MAAZ2vC,CAAmBv0D,IAAjFs0D,CAFd;AAGLzE,QAAAA,WAAAA,EAAa;AAHR,OAAP;AAxEW71D;;AAAAA,IAAAA,CAAAA,CAAAu5D,aAAAv5D,GAAAu5D,CAAAv5D;AAAAu5D,GzI6Db,EyI7DaA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,QAAAA,CAAAA;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,SAAAA,KAAAA,CAAAA,GAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,CAAAA,CAAAA,GAAAA,MAAAA,CAAAA,cAAAA,IAAAA;AAAAA,QAAAA,SAAAA,EAAAA;AAAAA,mBAAAA,KAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,QAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA;AAAAA,OAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,IAAAA,CAAAA,IAAAA,CAAAA,EAAAA,CAAAA,CAAAA,cAAAA,CAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,OAAAA,EAAAA,CAAAA,EAAAA,CAAAA,CAAAA;AAAAA,KAAAA,EAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,eAAAA,CAAAA,GAAAA;AAAAA,aAAAA,WAAAA,GAAAA,CAAAA;AAAAA;;AAAAA,MAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,SAAAA,GAAAA,SAAAA,CAAAA,GAAAA,MAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA,CAAAA,SAAAA,EAAAA,IAAAA,CAAAA,EAAAA,CAAAA;AAAAA,KAAAA,CAAAA;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,MAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,UAAAA,CAAAA,GAAAA,cAAAA,OAAAA,MAAAA,IAAAA,CAAAA,CAAAA,MAAAA,CAAAA,QAAAA,CAAAA;AAAAA,UAAAA,CAAAA,CAAAA,EAAAA,OAAAA,CAAAA;AAAAA,UAAAA,CAAAA;AAAAA,UAAAA,CAAAA;AAAAA,UAAAA,CAAAA,GAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA;AAAAA,UAAAA,CAAAA,GAAAA,EAAAA;;AAAAA,UAAAA;AAAAA,eAAAA,CAAAA,KAAAA,CAAAA,KAAAA,CAAAA,IAAAA,CAAAA,KAAAA,CAAAA,KAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,IAAAA,EAAAA,EAAAA,IAAAA,GAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,KAAAA;AAAAA,OAAAA,CAAAA,OAAAA,CAAAA,EAAAA;AAAAA,QAAAA,CAAAA,GAAAA;AAAAA,UAAAA,KAAAA,EAAAA;AAAAA,SAAAA;AAAAA,OAAAA,SAAAA;AAAAA,YAAAA;AAAAA,UAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,IAAAA,KAAAA,CAAAA,GAAAA,CAAAA,CAAAA,MAAAA,KAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA;AAAAA,SAAAA,SAAAA;AAAAA,cAAAA,CAAAA,EAAAA,MAAAA,CAAAA,CAAAA,KAAAA;AAAAA;AAAAA;;AAAAA,aAAAA,CAAAA;AAAAA,KAAAA;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,QAAAA,IAAAA,YAAAA;AAAAA,WAAAA,IAAAA,CAAAA,GAAAA,EAAAA,EAAAA,CAAAA,GAAAA,CAAAA,EAAAA,CAAAA,GAAAA,SAAAA,CAAAA,MAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,GAAAA,CAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,SAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA;;AAAAA,aAAAA,CAAAA;AAAAA,KAAAA;;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;AClBb,QAAAz0B,CAAAA,GAAAtkC,CAAAA,CAAA,EAAAA,CAAA;AAAA,QAEAkR,CAAAA,GAAAlR,CAAAA,CAAA,CAAAA,CAFA;AAAA,QAGA20D,CAAAA,GAAA30D,CAAAA,CAAA,CAAAA,CAHA;AAAA,QAOAi5D,CAAAA,GAAA,UAAAz8C,CAAA,EAAAA;AACE,eAAAy8C,CAAA,GAAAA;AAAAA,eACEz8C,CAAAA,CAAApc,IAAAoc,CAAAlL,IAAAkL,KAAOlL,IADT2nD;AA0MF;;AAAA,aA3MkCx8C,CAAAA,CAAAw8C,CAAAx8C,EAAAD,CAAAC,CAAAA,EAIhCw8C,CAAAA,CAAAp3D,SAAAo3D,CAAA7vC,GAAA6vC,GAAA,UAAI5vC,CAAJ,EAA6C/mB,CAA7C,EAA6CA;AAA7C,YAAA0X,CAAAA,GAAA1I,IAAA;AACOA,aAAKkqD,SAALlqD,KACHA,KAAKkqD,SAALlqD,GAAiB,EAAjBA,EACqBA,KAAKoqD,kBAALpqD,CAAwB+X,CAAxB/X,EAA0ChP,CAA1CgP,EACR1C,OADQ0C,CACA,UAACswD,CAAD,EAAK/hE,CAAL,EAAKA;AACxB,cAAMqzD,CAAAA,GAAW7pC,CAAAA,CAAiBwlB,OAAjBxlB,CAAyBqoC,cAAzBroC,CAAwCwnB,KAAxCxnB,CAA8Cu4C,CAA9Cv4C,CAAjB;AACArP,UAAAA,CAAAA,CAAKwhD,SAALxhD,CAAe5M,IAAf4M,CAAoBk5C,CAApBl5C;AAAoBk5C,SAHD5hD,CAFlBA;AASL,YAAMqqD,CAAAA,GAAWrqD,KAAKsqD,cAALtqD,CAAoB+X,CAApB/X,EAAsCA,KAAKkqD,SAALlqD,CAAevI,GAAfuI,CAAmB,UAAA1R,CAAA,EAAAA;AAAK,iBAAAA,CAAAA,CAAE6d,WAAF;AAAEA,SAA1BnM,CAAtCA,EAA8EhP,CAA9EgP,CAAjB;AAGA,eAFAqqD,CAAAA,CAAS/sD,OAAT+sD,CAAiB,UAAClwD,CAAD,EAAI5L,CAAJ,EAAIA;AAAM,iBAAAwpB,CAAAA,CAAiBwlB,OAAjBxlB,CAAyBqoC,cAAzBroC,CAAwCD,GAAxCC,CAA4CrP,CAAAA,CAAKwhD,SAALxhD,CAAena,CAAfma,CAA5CqP,EAA+D5d,CAA/D4d,CAAA;AAA+D5d,SAA1FkwD,GAEO,CAACA,CAAAA,CAASA,CAAAA,CAASj5D,MAATi5D,GAAkB,CAA3BA,CAAAA,CAA8BnI,iBAA9BmI,CAAgDvxC,MAAjD,CAAP;AAAwDA,OAjB1B3N,EAmBhCw8C,CAAAA,CAAAp3D,SAAAo3D,CAAA4I,wBAAA5I,GAAA,UACI5vC,CADJ,EAC6Cha,CAD7C,EAC4D3H,CAD5D,EACuEs2C,CADvE,EAEI8jB,CAFJ,EAE4CC,CAF5C,EAE4CA;AAC1C,YAAMtsB,CAAAA,GAAapmC,CAAAA,CAAM1M,IAAN0M,CAAWhF,KAAXgF,EAAnB;AAAA,YACMqwD,CAAAA,GAAcr2C,CAAAA,CAAiBqqC,4BAAjBrqC,CAA8CosB,CAA9CpsB,CADpB;AAAA,YAEMpmB,CAAAA,GAAcwyC,CAFpB;AAAA,YAGMvrC,CAAAA,GAAOjH,CAAAA,CAAYP,MAHzB;AAAA,YAIMs/D,CAAAA,GAAetC,CAAAA,CAAY11C,KAJjC;AAAA,YAKMi4C,CAAAA,GAAgBvC,CAAAA,CAAY31C,MALlC;AAOA,YAAIriB,CAAAA,GAAI,CAAJA,IAASs2C,CAAAA,GAAI,CAAjB,EACE,MAAM,IAAIj3C,KAAJ,CAAU,4EAAV,CAAN;AAGF,YAA6C,MAAzC+6D,CAAAA,CAAwBz7D,KAAxBy7D,CAA8Bp/D,MAAW,IAAiD,MAA5Cq/D,CAAAA,CAA2B17D,KAA3B07D,CAAiCr/D,MAAnF,EACE,MAAM,IAAIqE,KAAJ,CAAU,wDAAV,CAAN;AAGF,YAAI+6D,CAAAA,CAAwBz7D,KAAxBy7D,CAA8B,CAA9BA,MAAqCp6D,CAArCo6D,IAA0CC,CAAAA,CAA2B17D,KAA3B07D,CAAiC,CAAjCA,MAAwCr6D,CAAtF,EACE,MAAM,IAAIX,KAAJ,CAAU,wEAAV,CAAN;AAGF,YAAMguD,CAAAA,GAAe,6BACD7qD,CADC,GACG,iKADH,GAIsB83D,CAJtB,GAIkC,IAJlC,GAIuCC,CAJvC,GAIoD,iIAJpD,GAQejkB,CARf,GAQgB,qTARrC;AAoBA,eAAO;AACL6W,UAAAA,YAAAA,EAAc,CAAC6K,CAAD,EAAcoC,CAAd,EAAuCC,CAAvC,CADT;AAELnN,UAAAA,YAAAA,EAAcvrC,CAAAA,CAAiBqqC,4BAAjBrqC,CAA8CpmB,CAA9ComB,CAFT;AAGLyrC,UAAAA,QAAAA,EAAU,CAAC,GAAD,EAAM,KAAN,EAAa,MAAb,CAHL;AAILC,UAAAA,YAAAA,EAAYA;AAJP,SAAP;AAIcA,OAjEgBt4C,EAwEhCw8C,CAAAA,CAAAp3D,SAAAo3D,CAAAiJ,4BAAAjJ,GAAA,UACI5vC,CADJ,EAC6C1c,CAD7C,EACwDjF,CADxD,EACmEs2C,CADnE,EAC8E8jB,CAD9E,EAEI7+D,CAFJ,EAEIA;AACF,YAAMk/D,CAAAA,GAAU94C,CAAAA,CAAiBqqC,4BAAjBrqC,CAA8C1c,CAAAA,CAAEhK,IAAFgK,CAAOtC,KAAPsC,EAA9C0c,CAAhB;AAAA,YACMnf,CAAAA,GAAOjH,CAAAA,CAAYP,MADzB;AAAA,YAEMs/D,CAAAA,GAAeG,CAAAA,CAAQn4C,KAF7B;AAAA,YAGMi4C,CAAAA,GAAgBE,CAAAA,CAAQp4C,MAH9B;AAKA,YAAIriB,CAAAA,GAAI,CAAJA,IAASs2C,CAAAA,GAAI,CAAjB,EACE,MAAM,IAAIj3C,KAAJ,CAAU,4EAAV,CAAN;AAGF,YAA2B,MAAvB9D,CAAAA,CAAYP,MAAhB,EACE,MAAM,IAAIqE,KAAJ,CAAU,0CAAV,CAAN;AAGF,YAAI9D,CAAAA,CAAY,CAAZA,CAAAA,KAAmByE,CAAvB,EACE,MAAM,IAAIX,KAAJ,CAAU,0DAAV,CAAN;AAGF,YAA6C,MAAzC+6D,CAAAA,CAAwBz7D,KAAxBy7D,CAA8Bp/D,MAAlC,EACE,MAAM,IAAIqE,KAAJ,CAAU,wDAAV,CAAN;AAGF,YAAI+6D,CAAAA,CAAwBz7D,KAAxBy7D,CAA8B,CAA9BA,MAAqCp6D,CAAzC,EACE,MAAM,IAAIX,KAAJ,CAAU,wEAAV,CAAN;AAGF,YACMguD,CAAAA,GAAe,6BACD7qD,CADC,GACG,oEADH,GAG2B8zC,CAH3B,GAG4B,8FAH5B,GAOFA,CAPE,GAOD,8DAPC,GADR2W,CAAAA,CAAA9+C,OAAA8+C,CAAQtrC,CAAAA,CAAiBwlB,OAAjBxlB,CAAyB8Z,OAAzB9Z,CAAiC7L,SAAjC6L,CAA2ChU,OAAnDs/C,EAUiCl/C,SATzB,GASkC,mDATlC,GAUjBusD,CAViB,GAUL,IAVK,GAUAC,CAVA,GAUa,0DAXlC;AAgBA,eAAO;AACLpN,UAAAA,YAAAA,EAAc,CAACsN,CAAD,EAAUL,CAAV,CADT;AAELlN,UAAAA,YAAAA,EAAcvrC,CAAAA,CAAiBqqC,4BAAjBrqC,CAA8CpmB,CAA9ComB,CAFT;AAGLyrC,UAAAA,QAAAA,EAAU,CAAC,GAAD,EAAM,KAAN,CAHL;AAILC,UAAAA,YAAAA,EAAYA;AAJP,SAAP;AAIcA,OAxHgBt4C,EA8HhCw8C,CAAAA,CAAAp3D,SAAAo3D,CAAAmJ,2BAAAnJ,GAAA,UACI5vC,CADJ,EAC6C1c,CAD7C,EACwDjF,CADxD,EACmEs2C,CADnE,EAC8E/6C,CAD9E,EAC8EA;AAC5E,YAAMk/D,CAAAA,GAAU94C,CAAAA,CAAiBqqC,4BAAjBrqC,CAA8C1c,CAAAA,CAAEhK,IAAFgK,CAAOtC,KAAPsC,EAA9C0c,CAAhB;AAAA,YACMnf,CAAAA,GAAOjH,CAAAA,CAAYP,MADzB;AAAA,YAEMs/D,CAAAA,GAAeG,CAAAA,CAAQn4C,KAF7B;AAAA,YAGMi4C,CAAAA,GAAgBE,CAAAA,CAAQp4C,MAH9B;AAKA,YAAIriB,CAAAA,GAAI,CAAJA,IAASs2C,CAAAA,GAAI,CAAjB,EACE,MAAM,IAAIj3C,KAAJ,CAAU,4EAAV,CAAN;AAGF,YAA2B,MAAvB9D,CAAAA,CAAYP,MAAhB,EACE,MAAM,IAAIqE,KAAJ,CAAU,0CAAV,CAAN;AAGF,YAAI9D,CAAAA,CAAY,CAAZA,CAAAA,KAAmByE,CAAvB,EACE,MAAM,IAAIX,KAAJ,CAAU,0DAAV,CAAN;AAGF,YAAMgP,CAAAA,GAAO4+C,CAAAA,CAAA9+C,OAAA8+C,CAAQtrC,CAAAA,CAAiBwlB,OAAjBxlB,CAAyB8Z,OAAzB9Z,CAAiC7L,SAAjC6L,CAA2ChU,OAAnDs/C,CAAb;AAAA,YACMI,CAAAA,GAAe,iCACG7qD,CADH,GACO,wEADP,GAG+B8zC,CAH/B,GAGgC,6CAHhC,GAKejoC,CAAAA,CAAKN,SALpB,GAK6B,+CAL7B,GAK6EusD,CAL7E,GAKyF,IALzF,GAMjBC,CANiB,GAMJ,kCANI,GAOEjkB,CAPF,GAOG,mEAPH,GASqBjoC,CAAAA,CAAKN,SAT1B,GASmC,mDATnC,GAUjBusD,CAViB,GAUL,IAVK,GAUAC,CAVA,GAUa,oHAXlC;AAkBA,eAAO;AACLpN,UAAAA,YAAAA,EAAc,CAACsN,CAAD,CADT;AAELvN,UAAAA,YAAAA,EAAcvrC,CAAAA,CAAiBqqC,4BAAjBrqC,CAA8CpmB,CAA9ComB,CAFT;AAGLyrC,UAAAA,QAAAA,EAAU,CAAC,GAAD,CAHL;AAILC,UAAAA,YAAAA,EAAYA;AAJP,SAAP;AAIcA,OAvKgBt4C,EA0KhCw8C,CAAAA,CAAAp3D,SAAAo3D,CAAAyC,kBAAAzC,GAAA,UAAmB5vC,CAAnB,EAA4D/mB,CAA5D,EAA4DA;AAC1D,YAAMmzC,CAAAA,GAAanzC,CAAAA,CAAO,CAAPA,CAAAA,CAAUK,IAAVL,CAAe+H,KAAf/H,EAAnB;AAAA,YACMy7C,CAAAA,GAAgB7sC,CAAAA,CAAA9L,SAAA8L,CAAUxG,SAAVwG,CAAoBI,KAAKzH,IAAzBqH,EAA+BukC,CAAAA,CAAW/yC,MAA1CwO,CADtB;AAAA,YAEMxJ,CAAAA,GAAIwJ,CAAAA,CAAA9L,SAAA8L,CAAUpH,eAAVoH,CAA0BukC,CAA1BvkC,EAAsC6sC,CAAtC7sC,CAFV;AAAA,YAGM8sC,CAAAA,GAAI9sC,CAAAA,CAAA9L,SAAA8L,CAAUtH,iBAAVsH,CAA4BukC,CAA5BvkC,EAAwC6sC,CAAxC7sC,CAHV;AAAA,YAIMmxD,CAAAA,GAAwB/wD,KAAK8wD,2BAAL9wD,CAAiC+X,CAAjC/X,EAAmDhP,CAAAA,CAAO,CAAPA,CAAnDgP,EAA8D5J,CAA9D4J,EAAiE0sC,CAAjE1sC,EAAoE,CAAC5J,CAAD,CAApE4J,CAJ9B;AAAA,YAKMgxD,CAAAA,GACFhxD,KAAK4wD,4BAAL5wD,CAAkC+X,CAAlC/X,EAAoDhP,CAAAA,CAAO,CAAPA,CAApDgP,EAA+D5J,CAA/D4J,EAAkE0sC,CAAlE1sC,EAAqE+wD,CAAAA,CAAsBzN,YAA3FtjD,EAAyG,CAAC5J,CAAD,CAAzG4J,CANJ;AAWA,eADoC,CAAC+wD,CAAD,EAAwBC,CAAxB,EAHThxD,KAAKuwD,wBAALvwD,CACvB+X,CADuB/X,EACLhP,CAAAA,CAAO,CAAPA,CADKgP,EACM5J,CADN4J,EACS0sC,CADT1sC,EACY+wD,CAAAA,CAAsBzN,YADlCtjD,EACgDgxD,CAAAA,CAAwB1N,YADxEtjD,CAGS,CACpC;AAHmGsjD,OAnLrEn4C,EAwLhCw8C,CAAAA,CAAAp3D,SAAAo3D,CAAA2C,cAAA3C,GAAA,UAAe5vC,CAAf,EAAwDoyC,CAAxD,EAAqFn5D,CAArF,EAAqFA;AACnF,YAAMiQ,CAAAA,GAAWjQ,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IAA3B;AAAA,YACMikB,CAAAA,GAAUJ,CAAAA,CAAiBK,sBAAjBL,CAAwC/mB,CAAAA,CAAO,CAAPA,CAAxC+mB,EAAmDoyC,CAAAA,CAAa,CAAbA,CAAAA,CAAgB5G,YAAhB4G,CAA6B,CAA7BA,CAAnDpyC,CADhB;AAAA,YAEMsyC,CAAAA,GAAsB,EAF5B;AAGAA,QAAAA,CAAAA,CAASvuD,IAATuuD,CAAc;AACZvG,UAAAA,iBAAAA,EAAmB,CAAC3rC,CAAD,CADP;AAEZ+pC,UAAAA,iBAAAA,EAAmBnqC,CAAAA,CAAiBuqC,2BAAjBvqC,CAA6CoyC,CAAAA,CAAa,CAAbA,CAAAA,CAAgB7G,YAA7DvrC,EAA2E9W,CAA3E8W,CAFP;AAGZgsC,UAAAA,WAAAA,EAAa;AAHD,SAAdsG;;AAKA,aAAK,IAAI97D,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAI47D,CAAAA,CAAa/4D,MAAjC,EAAiCA,EAAU7C,CAA3C,EACE87D,CAAAA,CAASvuD,IAATuuD,CAAc;AACZvG,UAAAA,iBAAAA,EAAiBtoB,CAAAA,CAAM6uB,CAAAA,CAAS97D,CAAAA,GAAI,CAAb87D,CAAAA,CAAgBvG,iBAAtBtoB,EAAuC,CAAE6uB,CAAAA,CAAS97D,CAAAA,GAAI,CAAb87D,CAAAA,CAAgBnI,iBAAlB,CAAvC1mB,CADL;AAEZ0mB,UAAAA,iBAAAA,EAAmBnqC,CAAAA,CAAiBuqC,2BAAjBvqC,CAA6CoyC,CAAAA,CAAa57D,CAAb47D,CAAAA,CAAgB7G,YAA7DvrC,EAA2E9W,CAA3E8W,CAFP;AAGZgsC,UAAAA,WAAAA,EAAa;AAHD,SAAdsG;;AAMF,eAAOA,CAAP;AAAOA,OAxMuBl/C,EA2MlCw8C,CAAA;AA3MA,KAAA,CAAkC30B,CAAAA,CAAA5D,OAAlC,CAPA;;AAOalhC,IAAAA,CAAAA,CAAAy5D,YAAAz5D,GAAAy5D,CAAAz5D;AAAAy5D,G1IwEb,E0IxEaA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,QAAAA,CAAAA;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,SAAAA,KAAAA,CAAAA,GAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,CAAAA,CAAAA,GAAAA,MAAAA,CAAAA,cAAAA,IAAAA;AAAAA,QAAAA,SAAAA,EAAAA;AAAAA,mBAAAA,KAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,QAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA;AAAAA,OAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,IAAAA,CAAAA,IAAAA,CAAAA,EAAAA,CAAAA,CAAAA,cAAAA,CAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,OAAAA,EAAAA,CAAAA,EAAAA,CAAAA,CAAAA;AAAAA,KAAAA,EAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,eAAAA,CAAAA,GAAAA;AAAAA,aAAAA,WAAAA,GAAAA,CAAAA;AAAAA;;AAAAA,MAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,SAAAA,GAAAA,SAAAA,CAAAA,GAAAA,MAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA,CAAAA,SAAAA,EAAAA,IAAAA,CAAAA,EAAAA,CAAAA;AAAAA,KAAAA,CAAAA;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,MAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,UAAAA,CAAAA,GAAAA,cAAAA,OAAAA,MAAAA,IAAAA,CAAAA,CAAAA,MAAAA,CAAAA,QAAAA,CAAAA;AAAAA,UAAAA,CAAAA,CAAAA,EAAAA,OAAAA,CAAAA;AAAAA,UAAAA,CAAAA;AAAAA,UAAAA,CAAAA;AAAAA,UAAAA,CAAAA,GAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA;AAAAA,UAAAA,CAAAA,GAAAA,EAAAA;;AAAAA,UAAAA;AAAAA,eAAAA,CAAAA,KAAAA,CAAAA,KAAAA,CAAAA,IAAAA,CAAAA,KAAAA,CAAAA,KAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,IAAAA,EAAAA,EAAAA,IAAAA,GAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,KAAAA;AAAAA,OAAAA,CAAAA,OAAAA,CAAAA,EAAAA;AAAAA,QAAAA,CAAAA,GAAAA;AAAAA,UAAAA,KAAAA,EAAAA;AAAAA,SAAAA;AAAAA,OAAAA,SAAAA;AAAAA,YAAAA;AAAAA,UAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,IAAAA,KAAAA,CAAAA,GAAAA,CAAAA,CAAAA,MAAAA,KAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA;AAAAA,SAAAA,SAAAA;AAAAA,cAAAA,CAAAA,EAAAA,MAAAA,CAAAA,CAAAA,KAAAA;AAAAA;AAAAA;;AAAAA,aAAAA,CAAAA;AAAAA,KAAAA;;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;ACPb,QAAAtD,CAAAA,GAAA31D,CAAAA,CAAA,GAAAA,CAAA;AAAA,QAEAkR,CAAAA,GAAAlR,CAAAA,CAAA,CAAAA,CAFA;AAAA,QAMAk5D,CAAAA,GAAA,UAAA18C,CAAA,EAAAA;AAAA,eAAA08C,CAAA,GAAAA;AAAAA,eAAAA,SAAAA,CAAAA,IAAAA,CAAAA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,SAAAA,CAAAA,IAAAA,IAAAA;AAmDA;;AAAA,aAnDgCz8C,CAAAA,CAAAy8C,CAAAz8C,EAAAD,CAAAC,CAAAA,EAC9By8C,CAAAA,CAAAr3D,SAAAq3D,CAAA9vC,GAAA8vC,GAAA,UAAI7vC,CAAJ,EAA6C/mB,CAA7C,EAA6CA;AAA7C,YAAA0X,CAAAA,GAAA1I,IAAA;AAAA,YACQixD,CAAAA,GAAQjxD,KAAKkxD,eAALlxD,CAAqB+X,CAArB/X,EAAuChP,CAAvCgP,CADhB;;AAEE,YAAA,CAAKA,KAAKkqD,SAAV,EAAqB;AACnBlqD,eAAKkqD,SAALlqD,GAAiB,EAAjBA;;AACA,eAAK,IAAIzR,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAI0iE,CAApB,EAAoBA,EAAS1iE,CAA7B,EAAgC;AAC9B,gBAAM4d,CAAAA,GAAcnM,KAAK8hD,iBAAL9hD,CAAuB+X,CAAvB/X,EAAyChP,CAAAA,CAAO,CAAPA,CAAzCgP,EAAoDzR,CAApDyR,CAApB;AAAA,gBACM4hD,CAAAA,GAAW7pC,CAAAA,CAAiBwlB,OAAjBxlB,CAAyBqoC,cAAzBroC,CAAwCwnB,KAAxCxnB,CAA8C5L,CAA9C4L,CADjB;AAEA/X,iBAAKkqD,SAALlqD,CAAelE,IAAfkE,CAAoB4hD,CAApB5hD;AAAoB4hD;AAGxB;;AAAA,YAAMuP,CAAAA,GAAoB,EAA1B;AAOA,eALAnxD,KAAKkqD,SAALlqD,CAAe1C,OAAf0C,CAAuB,UAAA4hD,CAAA,EAAAA;AACrB,cAAMwP,CAAAA,GAAU1oD,CAAAA,CAAKu5C,aAALv5C,CAAmBqP,CAAnBrP,EAAqCk5C,CAAAA,CAASz1C,WAA9CzD,EAA2D1X,CAA3D0X,CAAhB;AACAqP,UAAAA,CAAAA,CAAiBwlB,OAAjBxlB,CAAyBqoC,cAAzBroC,CAAwCD,GAAxCC,CAA4C6pC,CAA5C7pC,EAAsDq5C,CAAtDr5C,GACAo5C,CAAAA,CAAQr1D,IAARq1D,CAAaC,CAAAA,CAAQlP,iBAARkP,CAA0Bt4C,MAAvCq4C,CADAp5C;AACuCe,SAHzC9Y,GAKOmxD,CAAP;AAAOA,OAlBqBhmD,EAoB9By8C,CAAAA,CAAAr3D,SAAAq3D,CAAAsJ,eAAAtJ,GAAA,UAAgB7vC,CAAhB,EAAyD/mB,CAAzD,EAAyDA;AAEvD,eADMiC,CAAAA,CAAA2M,CAAAA,CAAAnD,SAAAmD,CAAAlD,UAAAkD,CAAA5O,CAAAA,CAAA,CAAAA,CAAAA,CAAAK,IAAAuO,EAAAI,KAAAzH,IAAAqH,EAAAI,KAAArD,KAAAiD,EAAAI,KAAApD,UAAAgD,CAAA3M,EAAA,CAAAA,CAAAA,CAAG,CAAHA,EACS7B,MAAf;AAAeA,OAtBa+Z,EAwB9By8C,CAAAA,CAAAr3D,SAAAq3D,CAAA9F,iBAAA8F,GAAA,UAAkB7vC,CAAlB,EAA2Dha,CAA3D,EAA0E3K,CAA1E,EAA0EA;AAClE,YAAAJ,CAAAA,GAAAC,CAAAA,CAAA2M,CAAAA,CAAAnD,SAAAmD,CAAAlD,UAAAkD,CAAA7B,CAAAA,CAAA1M,IAAAuO,EAAAI,KAAAzH,IAAAqH,EAAAI,KAAArD,KAAAiD,EAAAI,KAAApD,UAAAgD,CAAA3M,EAAA,CAAAA,CAAA;AAAA,YAAC6J,CAAAA,GAAA9J,CAAAA,CAAA,CAAAA,CAAD;AAAA,YACA0C,CAAAA,GADS1C,CAAAA,CAAA,CAAAA,CAAAA,CACQI,CADRJ,CAAT;AAAA,YAEArB,CAAAA,GAAcmL,CAAAA,CAAO1J,CAAP0J,CAFd;AAAA,YAIA2mD,CAAAA,GAAe,uCADR9xD,CAAAA,CAAYP,MACJ,GACa,wBADb,GAEP4O,KAAKzH,IAFE,GAEE,OAFF,GAEU7C,CAFV,GAEgB,yCAN/B;AASN,eAAO;AACL6tD,UAAAA,YAAAA,EAAc,CAACxrC,CAAAA,CAAiB8qC,wBAAjB9qC,CAA0Cha,CAA1Cga,CAAD,CADT;AAELurC,UAAAA,YAAAA,EAAcvrC,CAAAA,CAAiBqqC,4BAAjBrqC,CAA8CpmB,CAA9ComB,CAFT;AAGLyrC,UAAAA,QAAAA,EAAU,CAAC,GAAD,CAHL;AAILC,UAAAA,YAAAA,EAAYA;AAJP,SAAP;AAIcA,OAtCct4C,EAyC9By8C,CAAAA,CAAAr3D,SAAAq3D,CAAA3F,aAAA2F,GAAA,UAAc7vC,CAAd,EAAuD5L,CAAvD,EAAiFnb,CAAjF,EAAiFA;AAC/E,YAAMy3D,CAAAA,GAAW,CAAC1wC,CAAAA,CAAiBK,sBAAjBL,CAAwC/mB,CAAAA,CAAO,CAAPA,CAAxC+mB,EAAmD5L,CAAAA,CAAYo3C,YAAZp3C,CAAyB,CAAzBA,CAAnD4L,CAAD,CAAjB;AACA,eAAO;AACL+rC,UAAAA,iBAAAA,EAAmB2E,CADd;AAELvG,UAAAA,iBAAAA,EACInqC,CAAAA,CAAiBuqC,2BAAjBvqC,CAA6C5L,CAAAA,CAAYm3C,YAAzDvrC,EAAuE0wC,CAAAA,CAAS,CAATA,CAAAA,CAAY3vC,MAAZ2vC,CAAmBv0D,IAA1F6jB,CAHC;AAILgsC,UAAAA,WAAAA,EAAa;AAJR,SAAP;AAIe,OA/Ca54C,EAmDhCy8C,CAAA;AAnDA,KAAA,CAAgCvD,CAAAA,CAAAgN,KAAhC,CANA;;AAManjE,IAAAA,CAAAA,CAAA05D,UAAA15D,GAAA05D,CAAA15D;AAAA05D,G3IyEb,E2IzEaA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;ACDb,QAAAyJ,CAAAA,GAAA,YAAA;AACE,eAAAA,CAAA,CAAsBz0D,CAAtB,EAAsBA;AAAAoD,aAAApD,UAAAoD,GAAApD,CAAAoD;AA6BxB;;AAAA,aAzBEqxD,CAAAA,CAAA9gE,SAAA8gE,CAAAzlC,UAAAylC,GAAA,UAAWxlC,CAAX,EAAWA;AACT7rB,aAAKzH,IAALyH,GAAY6rB,CAAAA,CAAWK,MAAXL,CAAkB,MAAlBA,EAA0B,CAA1BA,CAAZ7rB,EACAA,KAAKrD,KAALqD,GAAa6rB,CAAAA,CAAWiB,OAAXjB,CAAmB,OAAnBA,EAA4B,EAA5BA,CADb7rB;AACyC,OAF3CqxD,EAKAA,CAAAA,CAAA9gE,SAAA8gE,CAAAllC,WAAAklC,GAAA,UAAYrgE,CAAZ,EAAYA;AACV,eAAA,EAAA,CAAKA,CAAL,IAAiC,MAAlBA,CAAAA,CAAOI,MAAtB,KAIO4O,KAAKosB,eAALpsB,CAAqBhP,CAArBgP,CAJP;AAI4BhP,OAV9BqgE,EAaUA,CAAAA,CAAA9gE,SAAA8gE,CAAAjlC,eAAAilC,GAAV,UAA0BrgE,CAA1B,EAA0BA;AACxB,eAAuB,WAAnBA,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IAAS,IAA6B,YAAnBlD,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IAApB,IAA2D,YAAnBlD,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IAAlD,IACA,aAAnBlD,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IADS,IAC+B,YAAnBlD,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IADtB,IAC6D,aAAnBlD,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IADpD,IAEA,cAAnBlD,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IAFS,IAEgC,cAAnBlD,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IAFvB,IAEgE,WAAnBlD,CAAAA,CAAO,CAAPA,CAAAA,CAAUkD,IAF9E;AAE8EA,OAhBhFm9D,EAyBFA,CAAA;AA9BA,KAAA,EAAA;;AAAsBnjE,IAAAA,CAAAA,CAAAmjE,KAAAnjE,GAAAmjE,CAAAnjE;AAAAmjE,G5I0EtB,E4I1EsBA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,QAAAA,CAAAA;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,SAAAA,KAAAA,CAAAA,GAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,CAAAA,CAAAA,GAAAA,MAAAA,CAAAA,cAAAA,IAAAA;AAAAA,QAAAA,SAAAA,EAAAA;AAAAA,mBAAAA,KAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,QAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA;AAAAA,OAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,IAAAA,CAAAA,IAAAA,CAAAA,EAAAA,CAAAA,CAAAA,cAAAA,CAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,OAAAA,EAAAA,CAAAA,EAAAA,CAAAA,CAAAA;AAAAA,KAAAA,EAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,eAAAA,CAAAA,GAAAA;AAAAA,aAAAA,WAAAA,GAAAA,CAAAA;AAAAA;;AAAAA,MAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,SAAAA,GAAAA,SAAAA,CAAAA,GAAAA,MAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA,CAAAA,SAAAA,EAAAA,IAAAA,CAAAA,EAAAA,CAAAA;AAAAA,KAAAA,CAAAA;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;ACLtB,QAAAp+B,CAAAA,GAAAvkC,CAAAA,CAAA,EAAAA,CAAA;AAAA,QAEAkR,CAAAA,GAAAlR,CAAAA,CAAA,CAAAA,CAFA;AAAA,QAIAipB,CAAAA,GAAAjpB,CAAAA,CAAA,EAAAA,CAJA;AAAA,QAMAq5D,CAAAA,GAAA,UAAA78C,CAAA,EAAAA;AAAA,eAAA68C,CAAA,GAAAA;AAAAA,eAAAA,SAAAA,CAAAA,IAAAA,CAAAA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,SAAAA,CAAAA,IAAAA,IAAAA;AAKA;;AAAA,aALkC58C,CAAAA,CAAA48C,CAAA58C,EAAAD,CAAAC,CAAAA,EAChC48C,CAAAA,CAAAx3D,SAAAw3D,CAAAjwC,GAAAiwC,GAAA,UAAIhwC,CAAJ,EAA6C/mB,CAA7C,EAA6CA;AAC3C,YAAM0K,CAAAA,GAAakE,CAAAA,CAAA9L,SAAA8L,CAAUpE,YAAVoE,CAAuB5O,CAAAA,CAAO,CAAPA,CAAAA,CAAUK,IAAjCuO,EAAuCI,KAAKvE,IAA5CmE,CAAnB;AACA,eAAO,CAAC+X,CAAAA,CAAAM,OAAAN,CAAQI,CAARJ,EAA0B3mB,CAAAA,CAAO,CAAPA,CAA1B2mB,EAAqCjc,CAArCic,CAAD,CAAP;AAA6Cjc,OAHfyP,EAKlC48C,CAAA;AALA,KAAA,CAAkC90B,CAAAA,CAAA2H,OAAlC,CANA;;AAMa1sC,IAAAA,CAAAA,CAAA65D,YAAA75D,GAAA65D,CAAA75D;AAAA65D,G7IyEb,E6IzEaA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,QAAAA,CAAAA;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,SAAAA,KAAAA,CAAAA,GAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,CAAAA,CAAAA,GAAAA,MAAAA,CAAAA,cAAAA,IAAAA;AAAAA,QAAAA,SAAAA,EAAAA;AAAAA,mBAAAA,KAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,QAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA;AAAAA,OAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,IAAAA,CAAAA,IAAAA,CAAAA,EAAAA,CAAAA,CAAAA,cAAAA,CAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,OAAAA,EAAAA,CAAAA,EAAAA,CAAAA,CAAAA;AAAAA,KAAAA,EAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,eAAAA,CAAAA,GAAAA;AAAAA,aAAAA,WAAAA,GAAAA,CAAAA;AAAAA;;AAAAA,MAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,SAAAA,GAAAA,SAAAA,CAAAA,GAAAA,MAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA,CAAAA,SAAAA,EAAAA,IAAAA,CAAAA,EAAAA,CAAAA;AAAAA,KAAAA,CAAAA;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;ACNb,QAAA70B,CAAAA,GAAAxkC,CAAAA,CAAA,EAAAA,CAAA;AAAA,QAEA20D,CAAAA,GAAA30D,CAAAA,CAAA,CAAAA,CAFA;AAAA,QAMAu5D,CAAAA,GAAA,UAAA/8C,CAAA,EAAAA;AAAA,eAAA+8C,CAAA,GAAAA;AAAAA,eAAAA,SAAAA,CAAAA,IAAAA,CAAAA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,SAAAA,CAAAA,IAAAA,IAAAA;AA6BA;;AAAA,aA7B8B98C,CAAAA,CAAA88C,CAAA98C,EAAAD,CAAAC,CAAAA,EAC5B88C,CAAAA,CAAA13D,SAAA03D,CAAAnwC,GAAAmwC,GAAA,UAAIlwC,CAAJ,EAA6C/mB,CAA7C,EAA6CA;AAC3C,eAAO+mB,CAAAA,CAAiBD,GAAjBC,CAAqB/X,IAArB+X,EAA2B/mB,CAA3B+mB,CAAP;AAAkC/mB,OAFRma,EAI5B88C,CAAAA,CAAA13D,SAAA03D,CAAAnG,iBAAAmG,GAAA,UAAkBO,CAAlB,EAAkDx3D,CAAlD,EAAkDA;AAChD,YAAMyT,CAAAA,GAAO4+C,CAAAA,CAAA9+C,OAAA8+C,CAAQmF,CAAAA,CAAQjrB,OAARirB,CAAgB32B,OAAhB22B,CAAwBt8C,SAAxBs8C,CAAkCzkD,OAA1Cs/C,CAAb;AAAA,YACM1xD,CAAAA,GAAcX,CAAAA,CAAO,CAAPA,CAAAA,CAAUK,IAAVL,CAAe+H,KAAf/H,EADpB;AAAA,YAEMsgE,CAAAA,GAAUtgE,CAAAA,CAAOyG,GAAPzG,CAAW,UAACmJ,CAAD,EAAI5L,CAAJ,EAAIA;AAAM,iBAAGkW,CAAAA,CAAKN,SAALM,GAAc,IAAdA,GAAmBlW,CAAnBkW,GAAoB,aAAvB;AAAuB,SAA5CzT,EAA2DkpB,IAA3DlpB,CAAgE,KAAhEA,CAFhB;AAAA,YAGMwyD,CAAAA,GAAWxyD,CAAAA,CAAOyG,GAAPzG,CAAW,UAACmJ,CAAD,EAAI5L,CAAJ,EAAIA;AAAM,iBAAA,MAAIA,CAAJ;AAAIA,SAAzByC,CAHjB;AAIA,eAAO;AACLuyD,UAAAA,YAAAA,EAAcvyD,CAAAA,CAAOyG,GAAPzG,CAAW,UAAAnB,CAAA,EAAAA;AAAK,mBAAA24D,CAAAA,CAAQ3F,wBAAR2F,CAAiC34D,CAAjC24D,CAAA;AAAiC34D,WAAjDmB,CADT;AAELsyD,UAAAA,YAAAA,EAAckF,CAAAA,CAAQpG,4BAARoG,CAAqC72D,CAArC62D,CAFT;AAGLhF,UAAAA,QAAAA,EAAQA,CAHH;AAILC,UAAAA,YAAAA,EAAc,kDAEI6N,CAFJ,GAEW,aAFX,GAGV7sD,CAAAA,CAAKL,MAHK,GAGC,qBAPV;AASLs/C,UAAAA,OAAAA,EAAAA,CAAS;AATJ,SAAP;AASW,OAlBev4C,EAqB5B88C,CAAAA,CAAA13D,SAAA03D,CAAAhG,aAAAgG,GAAA,UAAcO,CAAd,EAA8Cr8C,CAA9C,EAAwEnb,CAAxE,EAAwEA;AACtE,YAAMy3D,CAAAA,GAAWz3D,CAAAA,CAAOyG,GAAPzG,CAAW,UAACnB,CAAD,EAAItB,CAAJ,EAAIA;AAAM,iBAAAi6D,CAAAA,CAAQpwC,sBAARowC,CAA+B34D,CAA/B24D,EAAkCr8C,CAAAA,CAAYo3C,YAAZp3C,CAAyB5d,CAAzB4d,CAAlCq8C,CAAA;AAA2Dj6D,SAAhFyC,CAAjB;AACA,eAAO;AACL8yD,UAAAA,iBAAAA,EAAmB2E,CADd;AAELvG,UAAAA,iBAAAA,EAAmBsG,CAAAA,CAAQlG,2BAARkG,CAAoCr8C,CAAAA,CAAYm3C,YAAhDkF,EAA8DC,CAAAA,CAAS,CAATA,CAAAA,CAAY3vC,MAAZ2vC,CAAmBv0D,IAAjFs0D,CAFd;AAGLzE,UAAAA,WAAAA,EAAa;AAHR,SAAP;AAGe,OA1BW54C,EA6B9B88C,CAAA;AA7BA,KAAA,CAA8B/0B,CAAAA,CAAA7D,GAA9B,CANA;;AAManhC,IAAAA,CAAAA,CAAA+5D,QAAA/5D,GAAA+5D,CAAA/5D;AAAA+5D,G9IyEb,E8IzEaA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,QAAAA,CAAAA;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,SAAAA,KAAAA,CAAAA,GAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,CAAAA,CAAAA,GAAAA,MAAAA,CAAAA,cAAAA,IAAAA;AAAAA,QAAAA,SAAAA,EAAAA;AAAAA,mBAAAA,KAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,QAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA;AAAAA,OAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,IAAAA,CAAAA,IAAAA,CAAAA,EAAAA,CAAAA,CAAAA,cAAAA,CAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,OAAAA,EAAAA,CAAAA,EAAAA,CAAAA,CAAAA;AAAAA,KAAAA,EAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,eAAAA,CAAAA,GAAAA;AAAAA,aAAAA,WAAAA,GAAAA,CAAAA;AAAAA;;AAAAA,MAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,SAAAA,GAAAA,SAAAA,CAAAA,GAAAA,MAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA,CAAAA,SAAAA,EAAAA,IAAAA,CAAAA,EAAAA,CAAAA;AAAAA,KAAAA,CAAAA;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;ACPb,QAKAG,CAAAA,GAAA,UAAAl9C,CAAA,EAAAA;AAAA,eAAAk9C,CAAA,GAAAA;AAAAA,eAAAA,SAAAA,CAAAA,IAAAA,CAAAA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,SAAAA,CAAAA,IAAAA,IAAAA;AAqCA;;AAAA,aArC+Bj9C,CAAAA,CAAAi9C,CAAAj9C,EAAAD,CAAAC,CAAAA,EAC7Bi9C,CAAAA,CAAA73D,SAAA63D,CAAAtwC,GAAAswC,GAAA,UAAIrwC,CAAJ,EAA6C/mB,CAA7C,EAA6CA;AAC3C,eAAO+mB,CAAAA,CAAiBD,GAAjBC,CAAqB/X,IAArB+X,EAA2B/mB,CAA3B+mB,CAAP;AAAkC/mB,OAFPma,EAK7Bi9C,CAAAA,CAAA73D,SAAA63D,CAAAtG,iBAAAsG,GAAA,UAAkBI,CAAlB,EAAkDx3D,CAAlD,EAAkDA;AAKhD,aAJA,IAAMmzC,CAAAA,GAAanzC,CAAAA,CAAO,CAAPA,CAAAA,CAAUK,IAAVL,CAAe+H,KAAf/H,EAAnB,EACMW,CAAAA,GAAc,IAAImB,KAAJ,CAAUqxC,CAAAA,CAAW/yC,MAArB,CADpB,EAGMmgE,CAAAA,GAAoB,EAH1B,EAIShjE,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAI41C,CAAAA,CAAW/yC,MAA/B,EAAuC7C,CAAAA,EAAvC,EACEoD,CAAAA,CAAYpD,CAAZoD,CAAAA,GAAiBwyC,CAAAA,CAAW51C,CAAX41C,CAAAA,GAAgBnzC,CAAAA,CAAO,CAAPA,CAAAA,CAAU4M,UAAV5M,CAAqBzC,CAArByC,CAAjCW,EACA4/D,CAAAA,CAAQz1D,IAARy1D,CAAa,cAAYhjE,CAAZ,GAAa,8BAAb,GAA4CA,CAA5C,GAA6C,MAA7C,GAAoD41C,CAAAA,CAAW51C,CAAX41C,CAApD,GAAiE,MAA9EotB,CADA5/D;;AAIF,YAAMiH,CAAAA,GAAOjH,CAAAA,CAAYP,MAAzB;AAAA,YACMqyD,CAAAA,GAAe,uCACS7qD,CADT,GACa,2BADb,GAEJA,CAFI,GAEA,YAFA,GAGjB24D,CAAAA,CAAQr3C,IAARq3C,CAAa,IAAbA,CAHiB,GAGC,qCAJtB;AAOA,eAAO;AACLhO,UAAAA,YAAAA,EAAcvyD,CAAAA,CAAOyG,GAAPzG,CAAW,UAAAnB,CAAA,EAAAA;AAAK,mBAAA24D,CAAAA,CAAQ3F,wBAAR2F,CAAiC34D,CAAjC24D,CAAA;AAAiC34D,WAAjDmB,CADT;AAELsyD,UAAAA,YAAAA,EAAckF,CAAAA,CAAQpG,4BAARoG,CAAqC72D,CAArC62D,CAFT;AAGLhF,UAAAA,QAAAA,EAAU,CAAC,GAAD,CAHL;AAILC,UAAAA,YAAAA,EAAYA;AAJP,SAAP;AAIcA,OA1Bat4C,EA6B7Bi9C,CAAAA,CAAA73D,SAAA63D,CAAAnG,aAAAmG,GAAA,UAAcI,CAAd,EAA8Cr8C,CAA9C,EAAwEnb,CAAxE,EAAwEA;AACtE,YAAMy3D,CAAAA,GAAWz3D,CAAAA,CAAOyG,GAAPzG,CAAW,UAACnB,CAAD,EAAItB,CAAJ,EAAIA;AAAM,iBAAAi6D,CAAAA,CAAQpwC,sBAARowC,CAA+B34D,CAA/B24D,EAAkCr8C,CAAAA,CAAYo3C,YAAZp3C,CAAyB5d,CAAzB4d,CAAlCq8C,CAAA;AAA2Dj6D,SAAhFyC,CAAjB;AACA,eAAO;AACL8yD,UAAAA,iBAAAA,EAAmB2E,CADd;AAELvG,UAAAA,iBAAAA,EAAmBsG,CAAAA,CAAQlG,2BAARkG,CAAoCr8C,CAAAA,CAAYm3C,YAAhDkF,EAA8DC,CAAAA,CAAS,CAATA,CAAAA,CAAY3vC,MAAZ2vC,CAAmBv0D,IAAjFs0D,CAFd;AAGLzE,UAAAA,WAAAA,EAAa;AAHR,SAAP;AAGe,OAlCY54C,EAqC/Bi9C,CAAA;AArCA,KAAA,CALA15D,CAAAA,CAAA,EAAAA,CAAAA,CAK+BmsC,IAA/B,CALA;;AAKa3sC,IAAAA,CAAAA,CAAAk6D,SAAAl6D,GAAAk6D,CAAAl6D;AAAAk6D,G/I2Eb,E+I3EaA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,QAAAA,CAAAA;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,SAAAA,KAAAA,CAAAA,GAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,CAAAA,CAAAA,GAAAA,MAAAA,CAAAA,cAAAA,IAAAA;AAAAA,QAAAA,SAAAA,EAAAA;AAAAA,mBAAAA,KAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,QAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA;AAAAA,OAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,IAAAA,CAAAA,IAAAA,CAAAA,EAAAA,CAAAA,CAAAA,cAAAA,CAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,OAAAA,EAAAA,CAAAA,EAAAA,CAAAA,CAAAA;AAAAA,KAAAA,EAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,eAAAA,CAAAA,GAAAA;AAAAA,aAAAA,WAAAA,GAAAA,CAAAA;AAAAA;;AAAAA,MAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,SAAAA,GAAAA,SAAAA,CAAAA,GAAAA,MAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA,CAAAA,SAAAA,EAAAA,IAAAA,CAAAA,EAAAA,CAAAA;AAAAA,KAAAA,CAAAA;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,MAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,UAAAA,CAAAA,GAAAA,cAAAA,OAAAA,MAAAA,IAAAA,CAAAA,CAAAA,MAAAA,CAAAA,QAAAA,CAAAA;AAAAA,UAAAA,CAAAA,CAAAA,EAAAA,OAAAA,CAAAA;AAAAA,UAAAA,CAAAA;AAAAA,UAAAA,CAAAA;AAAAA,UAAAA,CAAAA,GAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA;AAAAA,UAAAA,CAAAA,GAAAA,EAAAA;;AAAAA,UAAAA;AAAAA,eAAAA,CAAAA,KAAAA,CAAAA,KAAAA,CAAAA,IAAAA,CAAAA,KAAAA,CAAAA,KAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,IAAAA,EAAAA,EAAAA,IAAAA,GAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,KAAAA;AAAAA,OAAAA,CAAAA,OAAAA,CAAAA,EAAAA;AAAAA,QAAAA,CAAAA,GAAAA;AAAAA,UAAAA,KAAAA,EAAAA;AAAAA,SAAAA;AAAAA,OAAAA,SAAAA;AAAAA,YAAAA;AAAAA,UAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,IAAAA,KAAAA,CAAAA,GAAAA,CAAAA,CAAAA,MAAAA,KAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA;AAAAA,SAAAA,SAAAA;AAAAA,cAAAA,CAAAA,EAAAA,MAAAA,CAAAA,CAAAA,KAAAA;AAAAA;AAAAA;;AAAAA,aAAAA,CAAAA;AAAAA,KAAAA;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,QAAAA,IAAAA,YAAAA;AAAAA,WAAAA,IAAAA,CAAAA,GAAAA,EAAAA,EAAAA,CAAAA,GAAAA,CAAAA,EAAAA,CAAAA,GAAAA,SAAAA,CAAAA,MAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,GAAAA,CAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,SAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA;;AAAAA,aAAAA,CAAAA;AAAAA,KAAAA;;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;ACJb,QAAAh1B,CAAAA,GAAA1kC,CAAAA,CAAA,EAAAA,CAAA;AAAA,QAEAkR,CAAAA,GAAAlR,CAAAA,CAAA,CAAAA,CAFA;AAAA,QAGAi6D,CAAAA,GAAAj6D,CAAAA,CAAA,CAAAA,CAHA;AAAA,QAOA25D,CAAAA,GAAA,UAAAn9C,CAAA,EAAAA;AAAA,eAAAm9C,CAAA,GAAAA;AAAAA,eAAAA,SAAAA,CAAAA,IAAAA,CAAAA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,SAAAA,CAAAA,IAAAA,IAAAA;AA+DA;;AAAA,aA/DoCl9C,CAAAA,CAAAk9C,CAAAl9C,EAAAD,CAAAC,CAAAA,EAClCk9C,CAAAA,CAAA93D,SAAA83D,CAAAvwC,GAAAuwC,GAAA,UAAItwC,CAAJ,EAA6C/mB,CAA7C,EAA6CA;AAC3C,eAAO+mB,CAAAA,CAAiBD,GAAjBC,CAAqB/X,IAArB+X,EAA2B/mB,CAA3B+mB,CAAP;AAAkC/mB,OAFFma,EAIlCk9C,CAAAA,CAAA93D,SAAA83D,CAAAmJ,cAAAnJ,GAAA,UAAeoJ,CAAf,EAAeA;AACb,YAAMv3D,CAAAA,GAAO8F,KAAK0xD,eAAL1xD,CAAqByxD,CAAAA,CAAY,CAAZA,CAArBzxD,CAAb;AACA,eAAOJ,CAAAA,CAAA9L,SAAA8L,CAAU3F,eAAV2F,CAA0B6xD,CAAAA,CAAY,CAAZA,CAA1B7xD,EAA0C1F,CAA1C0F,CAAP;AAAiD1F,OANjBiR,EAQlCk9C,CAAAA,CAAA93D,SAAA83D,CAAAvG,iBAAAuG,GAAA,UAAkBG,CAAlB,EAAkDx3D,CAAlD,EAAkDA;AAChD,YAAMygE,CAAAA,GAAczgE,CAAAA,CAAOyG,GAAPzG,CAAW,UAAAnB,CAAA,EAAAA;AAAK,iBAAAA,CAAAA,CAAEwB,IAAFxB,CAAOkJ,KAAPlJ,EAAA;AAAOkJ,SAAvB/H,CAApB;AAAA,YACMkJ,CAAAA,GAAO8F,KAAK0xD,eAAL1xD,CAAqByxD,CAAAA,CAAY,CAAZA,CAArBzxD,CADb;AAAA,YAEM2xD,CAAAA,GAAsB3xD,KAAKwxD,cAALxxD,CAAoByxD,CAApBzxD,CAF5B;AAAA,YAGMpH,CAAAA,GAAO5H,CAAAA,CAAO,CAAPA,CAAAA,CAAUK,IAAVL,CAAeI,MAH5B;AAAA,YAOMqyD,CAAAA,GAAe,aACjBzjD,KAAK4xD,mBAAL5xD,CAAyB,MAAzBA,EAAiC9F,CAAjC8F,EAAuCpH,CAAvCoH,CADiB,GAC2B,oCAD3B,GAESpH,CAFT,GAEa,sBAFb,GAGTA,CAHS,GAGL,+DAVhB;AAAA,YAcM0qD,CAAAA,GAAekF,CAAAA,CAAQpG,4BAARoG,CAAqCmJ,CAArCnJ,EAA0D,CAA1DA,EAA6DmJ,CAA7DnJ,CAdrB;AAeA,eAAO;AAACjF,UAAAA,YAAAA,EAAc,CAACiF,CAAAA,CAAQ3F,wBAAR2F,CAAiCx3D,CAAAA,CAAO,CAAPA,CAAjCw3D,CAAD,CAAf;AAA8DlF,UAAAA,YAAAA,EAAYA,CAA1E;AAA4EE,UAAAA,QAAAA,EAAU,CAAC,GAAD,CAAtF;AAA6FC,UAAAA,YAAAA,EAAYA;AAAzG,SAAP;AAAgHA,OAxBhFt4C,EA0BlCk9C,CAAAA,CAAA93D,SAAA83D,CAAApG,aAAAoG,GAAA,UAAcG,CAAd,EAA8Cr8C,CAA9C,EAAwEnb,CAAxE,EAAwEA;AACtE,YAAMy3D,CAAAA,GAAW,CAACD,CAAAA,CAAQpwC,sBAARowC,CAA+Bx3D,CAAAA,CAAO,CAAPA,CAA/Bw3D,EAA0Cr8C,CAAAA,CAAYo3C,YAAZp3C,CAAyB,CAAzBA,CAA1Cq8C,CAAD,CAAjB;AACA,eAAO;AACL1E,UAAAA,iBAAAA,EAAmB2E,CADd;AAELvG,UAAAA,iBAAAA,EAAmBsG,CAAAA,CAAQlG,2BAARkG,CAAoCr8C,CAAAA,CAAYm3C,YAAhDkF,EAA8DC,CAAAA,CAAS,CAATA,CAAAA,CAAY3vC,MAAZ2vC,CAAmBv0D,IAAjFs0D,CAFd;AAGLzE,UAAAA,WAAAA,EAAa;AAHR,SAAP;AAGe,OA/BiB54C,EAkClCk9C,CAAAA,CAAA93D,SAAA83D,CAAAwJ,qBAAAxJ,GAAA,UAAsBG,CAAtB,EAAsDrkB,CAAtD,EAA4Ej1C,CAA5E,EAA4EA;AAC1E,YAAMyC,CAAAA,GAAcqO,KAAKwxD,cAALxxD,CAAoB,CAACmkC,CAAD,CAApBnkC,CAApB;AAIA,eAHK9Q,CAAAA,KACHA,CAAAA,GAAO,MADJA,CAAAA,EAGE;AACLA,UAAAA,IAAAA,EAAIA,CADC;AAEL+5D,UAAAA,IAAAA,EAAMjpD,KAAK4xD,mBAAL5xD,CAAyB9Q,CAAzB8Q,EAA+BA,KAAK0xD,eAAL1xD,CAAqBmkC,CAArBnkC,CAA/BA,EAAiErO,CAAAA,CAAYP,MAA7E4O,CAFD;AAGL9L,UAAAA,IAAAA,EAAMy0D,CAAAA,CAAA38C,YAAA28C,CAAamJ,UAHd;AAIL3tB,UAAAA,UAAAA,EAAUA,CAJL;AAKLxyC,UAAAA,WAAAA,EAAWA;AALN,SAAP;AAKaA,OA5CmBwZ,EA+CxBk9C,CAAAA,CAAA93D,SAAA83D,CAAAqJ,eAAArJ,GAAV,UAA0BlkB,CAA1B,EAA0BA;AACxB,YAAIjqC,CAAAA,GAAO8F,KAAK9F,IAAhB;AAIA,eAHIA,CAAAA,IAAQA,CAAAA,CAAK9I,MAAL8I,KAAgBiqC,CAAAA,CAAW/yC,MAAnC8I,KACFA,CAAAA,GAAOshC,CAAAA,CAAK2I,CAAAA,CAAWp2B,IAAXo2B,EAAL3I,CAAAA,CAAyBxiC,OAAzBwiC,EADLthC,GAGGA,CAAP;AAAOA,OApDyBiR,EAsDxBk9C,CAAAA,CAAA93D,SAAA83D,CAAAuJ,mBAAAvJ,GAAV,UAA8Bn5D,CAA9B,EAA4CgL,CAA5C,EAA4DtB,CAA5D,EAA4DA;AAC1D,YAAMm5D,CAAAA,GAAc,EAApB;AACAA,QAAAA,CAAAA,CAAYj2D,IAAZi2D,CAAiB,UAAQ7iE,CAAR,GAAY,aAAZ,GAA0B0J,CAA1B,GAA8B,aAA9B,GAA4CA,CAA5C,GAAgD,MAAjEm5D;;AACA,aAAK,IAAIxjE,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAIqK,CAApB,EAAoBA,EAAQrK,CAA5B,EACEwjE,CAAAA,CAAYj2D,IAAZi2D,CAAiB,SAAO73D,CAAAA,CAAK3L,CAAL2L,CAAP,GAAc,QAAd,GAAuB3L,CAAvB,GAAwB,IAAzCwjE;;AAGF,eADAA,CAAAA,CAAYj2D,IAAZi2D,CAAiB,KAAjBA,GACOA,CAAAA,CAAY73C,IAAZ63C,CAAiB,IAAjBA,CAAP;AAAwB,OA7DQ5mD,EA+DpCk9C,CAAA;AA/DA,KAAA,CAAoCj1B,CAAAA,CAAA0H,SAApC,CAPA;;AAOa5sC,IAAAA,CAAAA,CAAAm6D,cAAAn6D,GAAAm6D,CAAAn6D;AAAAm6D,GhJwEb,EgJxEaA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,QAAAA,CAAAA;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,SAAAA,KAAAA,CAAAA,GAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,CAAAA,CAAAA,GAAAA,MAAAA,CAAAA,cAAAA,IAAAA;AAAAA,QAAAA,SAAAA,EAAAA;AAAAA,mBAAAA,KAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,QAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA;AAAAA,OAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,IAAAA,CAAAA,IAAAA,CAAAA,EAAAA,CAAAA,CAAAA,cAAAA,CAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,OAAAA,EAAAA,CAAAA,EAAAA,CAAAA,CAAAA;AAAAA,KAAAA,EAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,eAAAA,CAAAA,GAAAA;AAAAA,aAAAA,WAAAA,GAAAA,CAAAA;AAAAA;;AAAAA,MAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,SAAAA,GAAAA,SAAAA,CAAAA,GAAAA,MAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA,CAAAA,SAAAA,EAAAA,IAAAA,CAAAA,EAAAA,CAAAA;AAAAA,KAAAA,CAAAA;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;ACPb,QAAA/0B,CAAAA,GAAA5kC,CAAAA,CAAA,EAAAA,CAAA;AAAA,QAEAi6D,CAAAA,GAAAj6D,CAAAA,CAAA,CAAAA,CAFA;AAAA,QAGA20D,CAAAA,GAAA30D,CAAAA,CAAA,CAAAA,CAHA;AAAA,QAOA41D,CAAAA,GAAA,UAAAp5C,CAAA,EAAAA;AACE,eAAAo5C,CAAA,CAAsB33B,CAAtB,EAAgFi8B,CAAhF,EAAgFA;AAAhF,YAAAlgD,CAAAA,GACEwC,CAAAA,CAAApc,IAAAoc,CAAAlL,IAAAkL,EAAMyhB,CAANzhB,KAAqBlL,IADvB;AACuBA,eADD0I,CAAAA,CAAAikB,cAAAjkB,GAAAikB,CAAAjkB,EAA0DA,CAAAA,CAAAkgD,QAAAlgD,GAAAkgD,CAA1DlgD,EAA0DkgD,CACzD5oD;AA4BzB;;AAAA,aA9BkCmL,CAAAA,CAAAm5C,CAAAn5C,EAAAD,CAAAC,CAAAA,EAIhCm5C,CAAAA,CAAA/zD,SAAA+zD,CAAAxsC,GAAAwsC,GAAA,UAAIvsC,CAAJ,EAA6C/mB,CAA7C,EAA6CA;AAC3C,eAAO+mB,CAAAA,CAAiBD,GAAjBC,CAAqB/X,IAArB+X,EAA2B/mB,CAA3B+mB,CAAP;AAAkC/mB,OALJma,EAOhCm5C,CAAAA,CAAA/zD,SAAA+zD,CAAAxC,iBAAAwC,GAAA,UAAkBkE,CAAlB,EAAkDx3D,CAAlD,EAAkDA;AAChD,YAAMW,CAAAA,GAAcX,CAAAA,CAAO,CAAPA,CAAAA,CAAUK,IAAVL,CAAe+H,KAAf/H,EAApB;AAAA,YACMo9D,CAAAA,GAAc5F,CAAAA,CAAQ3F,wBAAR2F,CAAiCx3D,CAAAA,CAAO,CAAPA,CAAjCw3D,CADpB;AAAA,YAEM/jD,CAAAA,GAAO4+C,CAAAA,CAAA9+C,OAAA8+C,CAAQmF,CAAAA,CAAQjrB,OAARirB,CAAgB32B,OAAhB22B,CAAwBt8C,SAAxBs8C,CAAkCzkD,OAA1Cs/C,CAFb;AAAA,YAGMI,CAAAA,GAAe,aACjBzjD,KAAK4oD,QAAL5oD,CAAcipD,IADG,GACC,0CADD,GAGNxkD,CAAAA,CAAKN,SAHC,GAGQ,+BAHR,GAIXnE,KAAK4oD,QAAL5oD,CAAc9Q,IAJH,GAIO,gBAJP,GAKfuV,CAAAA,CAAKL,MALU,GAKJ,wBARjB;AAYA,eAAO;AAACm/C,UAAAA,YAAAA,EAAc,CAAC6K,CAAD,CAAf;AAA8B9K,UAAAA,YAAAA,EADhBkF,CAAAA,CAAQpG,4BAARoG,CAAqC72D,CAArC62D,CACd;AAA4ChF,UAAAA,QAAAA,EAAU,CAAC,GAAD,CAAtD;AAA6DC,UAAAA,YAAAA,EAAYA,CAAzE;AAA2EC,UAAAA,OAAAA,EAAAA,CAAS;AAApF,SAAP;AAA2F,OApB7Dv4C,EAsBhCm5C,CAAAA,CAAA/zD,SAAA+zD,CAAArC,aAAAqC,GAAA,UAAckE,CAAd,EAA8Cr8C,CAA9C,EAAwEnb,CAAxE,EAAwEA;AACtE,YAAMy3D,CAAAA,GAAW,CAACD,CAAAA,CAAQpwC,sBAARowC,CAA+Bx3D,CAAAA,CAAO,CAAPA,CAA/Bw3D,EAA0Cr8C,CAAAA,CAAYo3C,YAAZp3C,CAAyB,CAAzBA,CAA1Cq8C,CAAD,CAAjB;AACA,eAAO;AACL1E,UAAAA,iBAAAA,EAAmB2E,CADd;AAELvG,UAAAA,iBAAAA,EAAmBsG,CAAAA,CAAQlG,2BAARkG,CAAoCr8C,CAAAA,CAAYm3C,YAAhDkF,EAA8DC,CAAAA,CAAS,CAATA,CAAAA,CAAY3vC,MAAZ2vC,CAAmBv0D,IAAjFs0D,CAFd;AAGLzE,UAAAA,WAAAA,EAAa;AAHR,SAAP;AAGe,OA3Be54C,EA8BlCm5C,CAAA;AA9BA,KAAA,CAAkChxB,CAAAA,CAAA2H,OAAlC,CAPA;;AA6JA,aAAS+2B,CAAT,CAA0B7I,CAA1B,EAA0BA;AACxB,UAAMj6D,CAAAA,GAAUi6D,CAAAA,GAAK,GAArB;AASA,aAAO;AAACF,QAAAA,IAAAA,EARK,eACL/5D,CADK,GACD,0BADC,GAEFi6D,CAFE,GAEG,oBAFH,GAINj6D,CAJM,GAIF,yBAJE,GAKFi6D,CALE,GAKG,eAGT;AAAOj6D,QAAAA,IAAAA,EAAIA,CAAX;AAAagF,QAAAA,IAAAA,EAAMy0D,CAAAA,CAAA38C,YAAA28C,CAAaO;AAAhC,OAAP;AAhKWh7D;;AAAAA,IAAAA,CAAAA,CAAAo2D,YAAAp2D,GAAAo2D,CAAAp2D,EAgCbA,CAAAA,CAAAq2D,OAAAr2D,GAAA,YAAA;AACE,aAAO8jE,CAAAA,CAAiB,KAAjBA,CAAP;AAAwB,KAjCb9jE,EAmCbA,CAAAA,CAAAs2D,QAAAt2D,GAAA,YAAA;AACE,aAAO8jE,CAAAA,CAAiB,MAAjBA,CAAP;AAAwB,KApCb9jE,EAsCbA,CAAAA,CAAA02D,QAAA12D,GAAA,YAAA;AACE,aAAO8jE,CAAAA,CAAiB,MAAjBA,CAAP;AAAwB,KAvCb9jE,EAyCbA,CAAAA,CAAA22D,QAAA32D,GAAA,YAAA;AACE,aAAO8jE,CAAAA,CAAiB,MAAjBA,CAAP;AAAwB,KA1Cb9jE,EA4CbA,CAAAA,CAAA82D,QAAA92D,GAAA,YAAA;AACE,aAAO8jE,CAAAA,CAAiB,MAAjBA,CAAP;AAAwB,KA7Cb9jE,EA+CbA,CAAAA,CAAAk3D,OAAAl3D,GAAA,YAAA;AACE,aAAO8jE,CAAAA,CAAiB,KAAjBA,CAAP;AAAwB,KAhDb9jE,EAkDbA,CAAAA,CAAAu3D,OAAAv3D,GAAA,YAAA;AACE,aAAO8jE,CAAAA,CAAiB,KAAjBA,CAAP;AAAwB,KAnDb9jE,EAqDbA,CAAAA,CAAAy3D,SAAAz3D,GAAA,YAAA;AACE,aAAO8jE,CAAAA,CAAiB,OAAjBA,CAAP;AAAwB,KAtDb9jE,EAwDbA,CAAAA,CAAA+3D,YAAA/3D,GAAA,YAAA;AACE,UAAMgB,CAAAA,GAAO,YAAb;AASA,aAAO;AAAC+5D,QAAAA,IAAAA,EARK,0GAQN;AAAO/5D,QAAAA,IAAAA,EAAIA,CAAX;AAAagF,QAAAA,IAAAA,EAAMy0D,CAAAA,CAAA38C,YAAA28C,CAAaO;AAAhC,OAAP;AAAuCA,KAlE5Bh7D,EAoEbA,CAAAA,CAAAm4D,OAAAn4D,GAAA,YAAA;AACE,aAAO8jE,CAAAA,CAAiB,KAAjBA,CAAP;AAAwB,KArEb9jE,EAuEbA,CAAAA,CAAAu4D,OAAAv4D,GAAA,YAAA;AAUE,aAAO;AAAC+6D,QAAAA,IAAAA,EARK,gGAQN;AAAO/5D,QAAAA,IAAAA,EATD,MASN;AAAagF,QAAAA,IAAAA,EAAMy0D,CAAAA,CAAA38C,YAAA28C,CAAaO;AAAhC,OAAP;AAAuCA,KAjF5Bh7D,EAmFbA,CAAAA,CAAAw4D,OAAAx4D,GAAA,YAAA;AAgBE,aAAO;AAAC+6D,QAAAA,IAAAA,EAdK,uRAcN;AAAO/5D,QAAAA,IAAAA,EAfD,MAeN;AAAagF,QAAAA,IAAAA,EAAMy0D,CAAAA,CAAA38C,YAAA28C,CAAaO;AAAhC,OAAP;AAAuCA,KAnG5Bh7D,EAqGbA,CAAAA,CAAAs5D,OAAAt5D,GAAA,YAAA;AACE,aAAO8jE,CAAAA,CAAiB,KAAjBA,CAAP;AAAwB,KAtGb9jE,EAwGbA,CAAAA,CAAAo5D,QAAAp5D,GAAA,YAAA;AAUE,aAAO;AAAC+6D,QAAAA,IAAAA,EARK,wHAQN;AAAO/5D,QAAAA,IAAAA,EATD,OASN;AAAagF,QAAAA,IAAAA,EAAMy0D,CAAAA,CAAA38C,YAAA28C,CAAaO;AAAhC,OAAP;AAAuCA,KAlH5Bh7D,EAoHbA,CAAAA,CAAAq5D,WAAAr5D,GAAA,YAAA;AACE,UAAMgB,CAAAA,GAAO,UAAb;AASA,aAAO;AAAC+5D,QAAAA,IAAAA,EARK,8IAQN;AAAO/5D,QAAAA,IAAAA,EAAIA,CAAX;AAAagF,QAAAA,IAAAA,EAAMy0D,CAAAA,CAAA38C,YAAA28C,CAAaO;AAAhC,OAAP;AAAuCA,KA9H5Bh7D,EAgIbA,CAAAA,CAAA45D,QAAA55D,GAAA,YAAA;AACE,aAAO8jE,CAAAA,CAAiB,MAAjBA,CAAP;AAAwB,KAjIb9jE,EAmIbA,CAAAA,CAAAg6D,OAAAh6D,GAAA,YAAA;AACE,aAAO8jE,CAAAA,CAAiB,KAAjBA,CAAP;AAAwB,KApIb9jE,EAsIbA,CAAAA,CAAAi6D,QAAAj6D,GAAA,YAAA;AAcE,aAAO;AAAC+6D,QAAAA,IAAAA,EAZK,wOAYN;AAAO/5D,QAAAA,IAAAA,EAbD,OAaN;AAAagF,QAAAA,IAAAA,EAAMy0D,CAAAA,CAAA38C,YAAA28C,CAAaO;AAAhC,OAAP;AAAuCA,KApJ5Bh7D;AAoJ4Bg7D,GjJ5EzC,EiJ4EyCA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,QAAAA,CAAAA;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,SAAAA,KAAAA,CAAAA,GAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,CAAAA,CAAAA,GAAAA,MAAAA,CAAAA,cAAAA,IAAAA;AAAAA,QAAAA,SAAAA,EAAAA;AAAAA,mBAAAA,KAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,QAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA;AAAAA,OAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,IAAAA,CAAAA,IAAAA,CAAAA,EAAAA,CAAAA,CAAAA,cAAAA,CAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,OAAAA,EAAAA,CAAAA,EAAAA,CAAAA,CAAAA;AAAAA,KAAAA,EAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,eAAAA,CAAAA,GAAAA;AAAAA,aAAAA,WAAAA,GAAAA,CAAAA;AAAAA;;AAAAA,MAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,SAAAA,GAAAA,SAAAA,CAAAA,GAAAA,MAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA,CAAAA,SAAAA,EAAAA,IAAAA,CAAAA,EAAAA,CAAAA;AAAAA,KAAAA,CAAAA;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;AC3JzC,QAAA31B,CAAAA,GAAA7kC,CAAAA,CAAA,EAAAA,CAAA;AAAA,QAEAkR,CAAAA,GAAAlR,CAAAA,CAAA,CAAAA,CAFA;AAAA,QAIAipB,CAAAA,GAAAjpB,CAAAA,CAAA,EAAAA,CAJA;AAAA,QAMA45D,CAAAA,GAAA,UAAAp9C,CAAA,EAAAA;AAAA,eAAAo9C,CAAA,GAAAA;AAAAA,eAAAA,SAAAA,CAAAA,IAAAA,CAAAA,CAAAA,KAAAA,CAAAA,IAAAA,EAAAA,SAAAA,CAAAA,IAAAA,IAAAA;AAKA;;AAAA,aALoCn9C,CAAAA,CAAAm9C,CAAAn9C,EAAAD,CAAAC,CAAAA,EAClCm9C,CAAAA,CAAA/3D,SAAA+3D,CAAAxwC,GAAAwwC,GAAA,UAAIvwC,CAAJ,EAA6C/mB,CAA7C,EAA6CA;AAC3C,YAAM0K,CAAAA,GAAakE,CAAAA,CAAA9L,SAAA8L,CAAU7D,cAAV6D,CAAyB5O,CAAAA,CAAO,CAAPA,CAAAA,CAAUK,IAAnCuO,EAAyCI,KAAKvE,IAA9CmE,CAAnB;AACA,eAAO,CAAC+X,CAAAA,CAAAM,OAAAN,CAAQI,CAARJ,EAA0B3mB,CAAAA,CAAO,CAAPA,CAA1B2mB,EAAqCjc,CAArCic,CAAD,CAAP;AAA6Cjc,OAHbyP,EAKpCm9C,CAAA;AALA,KAAA,CAAoC/0B,CAAAA,CAAA2H,SAApC,CANA;;AAMahtC,IAAAA,CAAAA,CAAAo6D,cAAAp6D,GAAAo6D,CAAAp6D;AAAAo6D,GlJyEb,EkJzEaA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,QAAAA,IAAAA,YAAAA;AAAAA,aAAAA,CAAAA,CAAAA,GAAAA,MAAAA,CAAAA,MAAAA,IAAAA,UAAAA,CAAAA,EAAAA;AAAAA,aAAAA,IAAAA,CAAAA,EAAAA,CAAAA,GAAAA,CAAAA,EAAAA,CAAAA,GAAAA,SAAAA,CAAAA,MAAAA,EAAAA,CAAAA,GAAAA,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,KAAAA,IAAAA,CAAAA,IAAAA,CAAAA,GAAAA,SAAAA,CAAAA,CAAAA,CAAAA,EAAAA,MAAAA,CAAAA,SAAAA,CAAAA,cAAAA,CAAAA,IAAAA,CAAAA,CAAAA,EAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;;AAAAA,eAAAA,CAAAA;AAAAA,OAAAA,EAAAA,KAAAA,CAAAA,IAAAA,EAAAA,SAAAA,CAAAA;AAAAA,KAAAA;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,QAAAA,IAAAA,UAAAA,CAAAA,EAAAA;AAAAA,UAAAA,CAAAA,GAAAA,cAAAA,OAAAA,MAAAA,IAAAA,CAAAA,CAAAA,MAAAA,CAAAA,QAAAA,CAAAA;AAAAA,UAAAA,CAAAA,GAAAA,CAAAA;AAAAA,aAAAA,CAAAA,GAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,GAAAA;AAAAA,QAAAA,IAAAA,EAAAA,YAAAA;AAAAA,iBAAAA,CAAAA,IAAAA,CAAAA,IAAAA,CAAAA,CAAAA,MAAAA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA;AAAAA,YAAAA,KAAAA,EAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA;AAAAA,YAAAA,IAAAA,EAAAA,CAAAA;AAAAA,WAAAA;AAAAA;AAAAA,OAAAA;AAAAA,KAAAA;;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;ACNb,QAAA2J,CAAAA,GAAAvjE,CAAAA,CAAA,EAAAA,CAAA;AAAA,QACA0a,CAAAA,GAAA1a,CAAAA,CAAA,CAAAA,CADA;AAAA,QAGAwjE,CAAAA,GAAAxjE,CAAAA,CAAA,GAAAA,CAHA;AAAA,QAIA20D,CAAAA,GAAA30D,CAAAA,CAAA,CAAAA,CAJA;AAAA,QAiBA2xD,CAAAA,GAAA,YAAA;AAKE,eAAAA,CAAA,CAAmB/iB,CAAnB,EAAwDpxB,CAAxD,EAAwDA;AAArClM,aAAAs9B,QAAAt9B,GAAAs9B,CAAAt9B,EAAqCA,KAAAkM,SAAAlM,GAAAkM,CAArClM,EACjBA,KAAKmyD,IAALnyD,GAAY,IAAI6gD,GAAJ,EADK7gD,EAEjBA,KAAKoyD,eAALpyD,GAAKoyD,CAAkB,CAFNpyD;AA0JrB;;AAAA,aAtJEqgD,CAAAA,CAAA9vD,SAAA8vD,CAAAwB,WAAAxB,GAAA,UAAYnwD,CAAZ,EAAYA;AACV,eAAO8P,KAAKmyD,IAALnyD,CAAUxQ,GAAVwQ,CAAc9P,CAAd8P,CAAP;AAAqB9P,OADvBmwD,EAGAA,CAAAA,CAAA9vD,SAAA8vD,CAAA0B,WAAA1B,GAAA,UAAYnwD,CAAZ,EAAqB0xD,CAArB,EAAqBA;AACnB5hD,aAAKmyD,IAALnyD,CAAU7L,GAAV6L,CAAc9P,CAAd8P,EAAmB4hD,CAAnB5hD;AAAmB4hD,OAJrBvB,EAMAA,CAAAA,CAAA9vD,SAAA8vD,CAAAvoC,GAAAuoC,GAAA,UAAIgS,CAAJ,EAA6BrQ,CAA7B,EAA6BA;AAA7B,YAAAt5C,CAAAA,GAAA1I,IAAA;AACEA,aAAKs9B,QAALt9B,CAAcgI,KAAdhI,CAAoB,SAApBA,EAA+B,oBAA/BA,EAAqD,YAAA;AACnD,cAAMkrD,CAAAA,GAAKxiD,CAAAA,CAAKwD,SAALxD,CAAewiD,EAA1B;AAAA,cACMoH,CAAAA,GAAUD,CAAAA,CAAcC,OAD9B;AAEApH,UAAAA,CAAAA,CAAGqH,UAAHrH,CAAcoH,CAAdpH;;AACA,cAAA;AACExiD,YAAAA,CAAAA,CAAK8pD,UAAL9pD,CAAgBs5C,CAAAA,CAAQE,iBAAxBx5C,GACKA,CAAAA,CAAK0pD,eAAL1pD,IACHA,CAAAA,CAAK+pD,cAAL/pD,CAAoB2pD,CAAAA,CAAcK,eAAlChqD,CAFFA,EAIAA,CAAAA,CAAKiqD,YAALjqD,CAAkB2pD,CAAAA,CAAc/G,gBAAhC5iD,EAAkDs5C,CAAAA,CAAQ+B,WAA1Dr7C,EAAuEs5C,CAAAA,CAAQ8B,iBAA/Ep7C,CAJAA;AAKA,WANF,CAME,OAAOsC,CAAP,EAAOA;AAEP,kBADA5B,CAAAA,CAAAxC,MAAAwC,CAAO3D,KAAP2D,CAAa,gBAAbA,EAA+BipD,CAAAA,CAAclmD,WAAdkmD,CAA0B5O,YAAzDr6C,GACM4B,CAAN;AAEFtC;;AAAAA,UAAAA,CAAAA,CAAK40B,QAAL50B,CAAcV,KAAdU,CAAoB,SAApBA,EAA+B,kBAA/BA,EAAmD,YAAA;AACjDA,YAAAA,CAAAA,CAAKkqD,MAALlqD,CAAY2pD,CAAZ3pD,EAA2Bs5C,CAA3Bt5C,GACAwiD,CAAAA,CAAGviD,KAAHuiD,EADAxiD;AACGC,WAFLD;AAEKC,SAhBP3I;AAgBO2I,OAvBT03C,EA2BAA,CAAAA,CAAA9vD,SAAA8vD,CAAArjB,OAAAqjB,GAAA,YAAA;AAAA,YAAA33C,CAAAA,GAAA1I,IAAA;AACMA,aAAK6yD,YAAL7yD,IACFA,KAAKkM,SAALlM,CAAe8yD,YAAf9yD,CAA4BA,KAAK6yD,YAAjC7yD,CADEA,EAGJA,KAAKmyD,IAALnyD,CAAU1C,OAAV0C,CAAkB,UAAA1R,CAAA,EAAAA;AAAK,iBAAAoa,CAAAA,CAAKwD,SAALxD,CAAeqqD,aAAfrqD,CAA6Bpa,CAAAA,CAAEgkE,OAA/B5pD,CAAA;AAA+B4pD,SAAtDtyD,CAHIA;AAGkDsyD,OA/BxDjS,EAiCAA,CAAAA,CAAA9vD,SAAA8vD,CAAA9gB,KAAA8gB,GAAA,UAAMl0C,CAAN,EAAMA;AAAN,YAAAzD,CAAAA,GAAA1I,IAAA;AACE,eAAOA,KAAKs9B,QAALt9B,CAAcgI,KAAdhI,CAAoB,SAApBA,EAA+B,sBAA/BA,EAAuD,YAAA;AAC5D,cAAMgzD,CAAAA,GAAe,IAAId,CAAAA,CAAAe,gBAAJ,CAAqBvqD,CAAAA,CAAKwD,SAA1B,EAAqCC,CAArC,CAArB;AAAA,cACM+mD,CAAAA,GAAaF,CAAAA,CAAaG,UAAbH,EADnB;AAAA,cAEMV,CAAAA,GAAU5pD,CAAAA,CAAK0qD,OAAL1qD,CAAawqD,CAAbxqD,CAFhB;AAUA,iBAPiB;AACfyD,YAAAA,WAAAA,EAAWA,CADI;AAEfmmD,YAAAA,OAAAA,EAAOA,CAFQ;AAGfhH,YAAAA,gBAAAA,EAAkB5iD,CAAAA,CAAK2qD,mBAAL3qD,CACd4pD,CADc5pD,EACLsqD,CAAAA,CAAa3mD,OAAb2mD,CAAqB7mD,WAArB6mD,CAAiCxP,QAD5B96C,EACsCsqD,CAAAA,CAAa3mD,OAAb2mD,CAAqB7mD,WAArB6mD,CAAiCtJ,SADvEhhD,CAHH;AAKfgqD,YAAAA,eAAAA,EAAiBhqD,CAAAA,CAAK4qD,kBAAL5qD,CAAwB4pD,CAAxB5pD;AALF,WAOjB;AAF2C4pD,SATtCtyD,CAAP;AAS6CsyD,OA3C/CjS,EAgDUA,CAAAA,CAAA9vD,SAAA8vD,CAAAuS,MAAAvS,GAAV,UAAiBuB,CAAjB,EAAqCI,CAArC,EAAqCA;AAC/BA,QAAAA,CAAAA,CAAQiJ,IAARjJ,IACF54C,CAAAA,CAAAxC,MAAAwC,CAAO9D,OAAP8D,CAAe,gBAAfA,EAAiC,sBAAjCA,GACA44C,CAAAA,CAAQiJ,IAARjJ,CAAahiD,KAAKkM,SAAlB81C,EAA6BJ,CAA7BI,CAFEA,IAIFhiD,KAAKkM,SAALlM,CAAeirD,IAAfjrD,EAJEgiD;AAIaiJ,OArDnB5K,EAwDUA,CAAAA,CAAA9vD,SAAA8vD,CAAA+S,OAAA/S,GAAV,UAAkBkT,CAAlB,EAAkBA;AAChB,YAAA,CAAKvzD,KAAK6yD,YAAV,EAAwB;AACtBzpD,UAAAA,CAAAA,CAAAxC,MAAAwC,CAAO9D,OAAP8D,CAAe,iBAAfA,EAAkC,wDAAlCA;AACA,cAAMoqD,CAAAA,GAAqBnQ,CAAAA,CAAA7+C,qBAAA6+C,CAAsBrjD,KAAKkM,SAALlM,CAAe+D,OAArCs/C,CAA3B;AACArjD,eAAK6yD,YAAL7yD,GAAoBA,KAAKkM,SAALlM,CAAeyzD,aAAfzzD,CAA6BwzD,CAA7BxzD,EAAiDA,KAAKkM,SAALlM,CAAekrD,EAAflrD,CAAkB0zD,aAAnE1zD,CAApBA;AAEEiyD;;AAAAA,QAAAA,CAAAA,CAAAthC,GAAAshC,CAAIngC,KAAJmgC,IACF7oD,CAAAA,CAAAxC,MAAAwC,CAAO9D,OAAP8D,CAAe,iBAAfA,EAAkC,kBACtCmqD,CADsC,GACtB,IADZnqD,CADE6oD;AAKJ,YAAM0B,CAAAA,GAAa3zD,KAAKkM,SAALlM,CAAeyzD,aAAfzzD,CAA6BuzD,CAA7BvzD,EAA+CA,KAAKkM,SAALlM,CAAekrD,EAAflrD,CAAkB4zD,eAAjE5zD,CAAnB;AAAA,YACMsyD,CAAAA,GAAUtyD,KAAKkM,SAALlM,CAAe6zD,aAAf7zD,CAA6BA,KAAK6yD,YAAlC7yD,EAAgD2zD,CAAhD3zD,CADhB;AAGA,eADAA,KAAKkM,SAALlM,CAAe8yD,YAAf9yD,CAA4B2zD,CAA5B3zD,GACOsyD,CAAP;AAAOA,OAtETjS,EAwEAA,CAAAA,CAAA9vD,SAAA8vD,CAAAmS,UAAAnS,GAAA,UAAWmB,CAAX,EAAWA;AACTp4C,QAAAA,CAAAA,CAAAxC,MAAAwC,CAAO9D,OAAP8D,CACI,iBADJA,EAEI,gDAA8Co4C,CAAAA,CAAG9oC,KAAjD,GAAsD,GAAtD,GAA0D8oC,CAAAA,CAAG/oC,MAA7D,GAAmE,UAAnE,GAA8E+oC,CAAAA,CAAGzsD,KAAjF,GAAsF,SAAtF,GACIysD,CAAAA,CAAG1oC,MAAH0oC,CAAUttD,IAHlBkV,GAIApJ,KAAKkM,SAALlM,CAAe8zD,iBAAf9zD,CAAiCwhD,CAAAA,CAAG3oC,OAApC7Y,EAA6CwhD,CAAAA,CAAG9oC,KAAhD1Y,EAAuDwhD,CAAAA,CAAG/oC,MAA1DzY,CAJAoJ;AAI0DqP,OA7E5D4nC,EA+EAA,CAAAA,CAAA9vD,SAAA8vD,CAAAoS,cAAApS,GAAA,UAAeqS,CAAf,EAAeA;AACb,YAAMqB,CAAAA,GAAiBrB,CAAAA,CAAgB9Y,QAAvC;AAAA,YACMoa,CAAAA,GAAqBtB,CAAAA,CAAgBuB,YAD3C;AAEAj0D,aAAKkM,SAALlM,CAAek0D,mBAAfl0D,CAAmC+zD,CAAnC/zD,EAAmDg0D,CAAnDh0D,GACAA,KAAKoyD,eAALpyD,GAAKoyD,CAAkB,CADvBpyD;AACuB,OAnFzBqgD,EAqFAA,CAAAA,CAAA9vD,SAAA8vD,CAAAsS,YAAAtS,GAAA,UAAaiL,CAAb,EAA0DvH,CAA1D,EAAoFoQ,CAApF,EAAoFA;AAAAA,YAAAA,CAAAA;AAAAA,YAAAA,CAAAA;AAAAA,YAC5EjJ,CAAAA,GAAKlrD,KAAKkM,SAALlM,CAAekrD,EADwDiJ;AAAAA,YAE9EC,CAAAA,GAAkB,CAF4DD;;AAE5D,YAAA;AACtB,eAAkD,IAAAE,CAAAA,GAAAz5D,CAAAA,CAAA0wD,CAAA1wD,CAAA,EAAgB05D,CAAAA,GAAAD,CAAAA,CAAAv5D,IAAAu5D,EAAlE,EAAkEv5D,CAAAw5D,CAAAA,CAAAv5D,IAAlE,EAAkEu5D,CAAAA,GAAAD,CAAAA,CAAAv5D,IAAAu5D,EAAlE,EAAoE;AAAzD,gBAAAzzD,CAAAA,GAAA0zD,CAAAA,CAAA1kE,KAAA;AAAA,gBAAC2kE,CAAAA,GAAA3zD,CAAAA,CAAA1R,IAAD;AAAA,gBAAOgF,CAAAA,GAAA0M,CAAAA,CAAA1M,IAAP;AAAA,gBAAasgE,CAAAA,GAAA5zD,CAAAA,CAAAywC,QAAb;AAAA,gBAAuBsY,CAAAA,GAAA/oD,CAAAA,CAAA+oD,WAAvB;;AACT,oBAAQz1D,CAAR;AACE,mBAAK,WAAL;AACE8L,qBAAKy0D,WAALz0D,CAAiBm0D,CAAAA,CAASC,CAATD,CAAjBn0D,EAA4Cw0D,CAA5Cx0D,EAAsDo0D,CAAtDp0D,GACAo0D,CAAAA,EADAp0D;AAEA;;AACF,mBAAK,OAAL;AACM2pD,gBAAAA,CAAAA,GACFuB,CAAAA,CAAGwJ,UAAHxJ,CAAcsJ,CAAdtJ,EAAwBnH,CAAAA,CAAYwQ,CAAZxQ,CAAxBmH,CADEvB,GAGFuB,CAAAA,CAAGyJ,SAAHzJ,CAAasJ,CAAbtJ,EAAuBnH,CAAAA,CAAYwQ,CAAZxQ,CAAvBmH,CAHEvB;AAKJ;;AACF,mBAAK,KAAL;AACMA,gBAAAA,CAAAA,GACFuB,CAAAA,CAAG0J,UAAH1J,CAAcsJ,CAAdtJ,EAAwBnH,CAAAA,CAAYwQ,CAAZxQ,CAAxBmH,CADEvB,GAGFuB,CAAAA,CAAGc,SAAHd,CAAasJ,CAAbtJ,EAAuBnH,CAAAA,CAAYwQ,CAAZxQ,CAAvBmH,CAHEvB;AAKJ;;AACF;AACE,sBAAM,IAAIl0D,KAAJ,CAAU,8BAA4BvB,CAAtC,CAAN;AApBJ;AAoBgDA;AAAAA,SAtB5B,CAsB4BA,OAAAA,CAAAA,EAAAA;AAAAA,UAAAA,CAAAA,GAAAA;AAAAA,YAAAA,KAAAA,EAAAA;AAAAA,WAAAA;AAAAA,SAtB5B,SAsB4BA;AAAAA,cAAAA;AAAAA,YAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,IAAAA,KAAAA,CAAAA,GAAAA,CAAAA,CAAAA,MAAAA,KAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA;AAAAA,WAAAA,SAAAA;AAAAA,gBAAAA,CAAAA,EAAAA,MAAAA,CAAAA,CAAAA,KAAAA;AAAAA;AAAAA;AAAAA,OA7GpDmsD,EAiHAA,CAAAA,CAAA9vD,SAAA8vD,CAAAoU,WAAApU,GAAA,UAAYmB,CAAZ,EAA6BqT,CAA7B,EAAkEjb,CAAlE,EAAkEA;AAChE55C,aAAKkM,SAALlM,CAAe80D,oBAAf90D,CAAoCwhD,CAAAA,CAAG3oC,OAAvC7Y,EAAgD45C,CAAhD55C,EAA0D60D,CAA1D70D;AAA0D60D,OAlH5DxU,EAoHAA,CAAAA,CAAA9vD,SAAA8vD,CAAAiT,kBAAAjT,GAAA,UAAmBiS,CAAnB,EAAmBA;AACjB,eAAO;AACL1Y,UAAAA,QAAAA,EAAU55C,KAAK+0D,iBAAL/0D,CAAuBsyD,CAAvBtyD,EAAgC,UAAhCA,CADL;AAELi0D,UAAAA,YAAAA,EAAcj0D,KAAK+0D,iBAAL/0D,CAAuBsyD,CAAvBtyD,EAAgC,cAAhCA;AAFT,SAAP;AAEgD,OAvHlDqgD,EA0HAA,CAAAA,CAAA9vD,SAAA8vD,CAAAgT,mBAAAhT,GAAA,UAAoBiS,CAApB,EAA2C9O,CAA3C,EAAgEkG,CAAhE,EAAgEA;AAAAA,YAAAA,CAAAA;AAAAA,YAAAA,CAAAA;AAAAA,YAAAA,CAAAA;AAAAA,YAAAA,CAAAA;AAAAA,YAExD4B,CAAAA,GAA8C,EAFU5B;AAG9D,YAAIlG,CAAJ,EAAIA,IAAAA;AACF,eAAsB,IAAAwR,CAAAA,GAAAp6D,CAAAA,CAAA4oD,CAAA5oD,CAAA,EAAQq6D,CAAAA,GAAAD,CAAAA,CAAAl6D,IAAAk6D,EAA9B,EAA8Bl6D,CAAAm6D,CAAAA,CAAAl6D,IAA9B,EAA8Bk6D,CAAAA,GAAAD,CAAAA,CAAAl6D,IAAAk6D,EAA9B,EAAgC;AAA3B,gBAAME,CAAAA,GAAOD,CAAAA,CAAArlE,KAAb;AACH07D,YAAAA,CAAAA,CAAiBxvD,IAAjBwvD,CAAsB;AAACp8D,cAAAA,IAAAA,EAAMgmE,CAAP;AAAgBhhE,cAAAA,IAAAA,EAAM,WAAtB;AAAmCm9C,cAAAA,QAAAA,EAAUrxC,KAAKm1D,kBAALn1D,CAAwBsyD,CAAxBtyD,EAAiCk1D,CAAjCl1D;AAA7C,aAAtBsrD;AAAoG4J;AAAAA,SAFpG1R,CAEoG0R,OAAAA,CAAAA,EAAAA;AAAAA,UAAAA,CAAAA,GAAAA;AAAAA,YAAAA,KAAAA,EAAAA;AAAAA,WAAAA;AAAAA,SAFpG1R,SAEoG0R;AAAAA,cAAAA;AAAAA,YAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,IAAAA,KAAAA,CAAAA,GAAAA,CAAAA,CAAAA,MAAAA,KAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA;AAAAA,WAAAA,SAAAA;AAAAA,gBAAAA,CAAAA,EAAAA,MAAAA,CAAAA,CAAAA,KAAAA;AAAAA;AAGxG;AAAA,YAAIxL,CAAJ,EAAIA,IAAAA;AACF,eAAuB,IAAA0L,CAAAA,GAAAx6D,CAAAA,CAAA8uD,CAAA9uD,CAAA,EAASy6D,CAAAA,GAAAD,CAAAA,CAAAt6D,IAAAs6D,EAAhC,EAAgCt6D,CAAAu6D,CAAAA,CAAAt6D,IAAhC,EAAgCs6D,CAAAA,GAAAD,CAAAA,CAAAt6D,IAAAs6D,EAAhC,EAAkC;AAA7B,gBAAME,CAAAA,GAAQD,CAAAA,CAAAzlE,KAAd;AACH07D,YAAAA,CAAAA,CAAiBxvD,IAAjBwvD,CAAqB3I,CAAAA,CAAA,EAAAA,EAAK2S,CAAL3S,EAAa;AAAEtR,cAAAA,QAAAA,EAAUrxC,KAAKm1D,kBAALn1D,CAAwBsyD,CAAxBtyD,EAAiCs1D,CAAAA,CAASpmE,IAA1C8Q;AAAZ,aAAb2iD,CAArB2I;AAAwFp8D;AAAAA,SAFxFw6D,CAEwFx6D,OAAAA,CAAAA,EAAAA;AAAAA,UAAAA,CAAAA,GAAAA;AAAAA,YAAAA,KAAAA,EAAAA;AAAAA,WAAAA;AAAAA,SAFxFw6D,SAEwFx6D;AAAAA,cAAAA;AAAAA,YAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,IAAAA,KAAAA,CAAAA,GAAAA,CAAAA,CAAAA,MAAAA,KAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA;AAAAA,WAAAA,SAAAA;AAAAA,gBAAAA,CAAAA,EAAAA,MAAAA,CAAAA,CAAAA,KAAAA;AAAAA;AAG5F;AAAA,eAAOo8D,CAAP;AAAOA,OAvITjL,EAyIAA,CAAAA,CAAA9vD,SAAA8vD,CAAA8U,kBAAA9U,GAAA,UAAmBiS,CAAnB,EAA0CpjE,CAA1C,EAA0CA;AACxC,YACMqmE,CAAAA,GADKv1D,KAAKkM,SAALlM,CAAekrD,EAAflrD,CACUm1D,kBADVn1D,CAC6BsyD,CAD7BtyD,EACsC9Q,CADtC8Q,CAAX;AAEA,YAAkB,SAAdu1D,CAAJ,EACE,MAAM,IAAI9/D,KAAJ,CAAU,aAAWvG,CAAX,GAAe,aAAzB,CAAN;AAEF,eAAOqmE,CAAP;AAAOA,OA/ITlV,EAiJAA,CAAAA,CAAA9vD,SAAA8vD,CAAA0U,iBAAA1U,GAAA,UAAkBiS,CAAlB,EAAyCpjE,CAAzC,EAAyCA;AAGvC,eAFW8Q,KAAKkM,SAALlM,CAAekrD,EAAflrD,CAC0B+0D,iBAD1B/0D,CAC4CsyD,CAD5CtyD,EACqD9Q,CADrD8Q,CAEX;AADgE9Q,OAnJlEmxD,EAsJFA,CAAA;AA/JA,KAAA,EAjBA;;AAiBanyD,IAAAA,CAAAA,CAAAmyD,cAAAnyD,GAAAmyD,CAAAnyD;AAAAmyD,GnJ8Db,EmJ9DaA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,KCpBb,UAAAlyD,CAAA,EAAAsf,CAAA,EAAAA;AAAA,UAAA+nD,CAAA;;;;;;;;OAMC,YAAA;AACD;;AAGA,YAAAC,CAAAA,GAAA;AACAC,UAAAA,QAAAA,EAAAA,CAAA,CADA;AAEArlE,UAAAA,MAAAA,EAAAA,CAAA;AAFA,SAAA;AAAA,YAMArC,CAAAA,GAAAynE,CAAAA,CAAAA,OAAAjnE,MAAAinE,CAAAA,IAAAjnE,MAAAinE,IAAAz1D,IANA;AAAA,YAYA21D,CAAAA,GAAAF,CAAAA,CAAAA,OAAAvnE,CAAAunE,CAAAA,IAAAvnE,CAZA;AAAA,YAeA0nE,CAAAA,GAAAH,CAAAA,CAAAA,OAAAtnE,CAAAsnE,CAAAA,IAAAtnE,CAAAsnE,IAAAtnE,CAAAA,CAAAA,CAAA0nE,QAAAJ,IAAAtnE,CAfA;AAAA,YAkBA2nE,CAAAA,GAAAH,CAAAA,IAAAC,CAAAD,IAAA,YAAA,OAAAloD,CAAAkoD,IAAAloD,CAlBA;AAkBAA,SACAqoD,CADAroD,IACAqoD,CAAAA,CAAAroD,MAAAqoD,KAAAA,CAAAA,IAAAA,CAAAA,CAAAtnE,MAAAsnE,KAAAA,CAAAA,IAAAA,CAAAA,CAAAjnD,IAAAinD,KAAAA,CADAroD,KAEAzf,CAAAA,GAAA8nE,CAFAroD;AAUA,YAAAsoD,CAAAA,GAAApjE,IAAAA,CAAAyJ,GAAAzJ,CAAA,CAAAA,EAAA,EAAAA,IAAA,CAAA;AAAA,YAGAqjE,CAAAA,GAAA,SAHA;AAAA,YASAC,CAAAA,GAAA5mE,MAAAA,CAAAkB,SATA;AAAA,YAYAC,CAAAA,GAAAylE,CAAAA,CAAAzlE,cAZA;AAAA,YAeAiR,CAAAA,GAAAw0D,CAAAA,CAAAx0D,QAfA;;AA0BA,iBAAAy0D,CAAA,CAAApiD,CAAA,EAAAA;AAEA,iBAAA,CADAA,CAAAA,GAAAvE,MAAAA,CAAAuE,CAAAvE,CACA,EAAA2B,MAAA,CAAA,CAAA,EAAAilD,WAAA,KAAAriD,CAAAA,CAAA/a,KAAA+a,CAAA,CAAAA,CAAA;AAuFA;;AAAA,iBAAAsiD,CAAA,CAAAtiD,CAAA,EAAAA;AAEA,iBADAA,CAAAA,GAAAiQ,CAAAA,CAAAjQ,CAAAiQ,CAAAjQ,EACA,uBAAA+rB,IAAA,CAAA/rB,CAAA,IACAA,CADA,GAEAoiD,CAAAA,CAAApiD,CAAAoiD,CAFA;AAYA;;AAAA,iBAAAG,CAAA,CAAAhmE,CAAA,EAAA8yC,CAAA,EAAAA;AACA,eAAA,IAAAjzC,CAAA,IAAAG,CAAA,EACAG,CAAAA,CAAA1B,IAAA0B,CAAAH,CAAAG,EAAAN,CAAAM,KACA2yC,CAAAA,CAAA9yC,CAAAA,CAAAH,CAAAG,CAAA8yC,EAAAjzC,CAAAizC,EAAA9yC,CAAA8yC,CADA3yC;AAaA;;AAAA,iBAAA8lE,CAAA,CAAA1mE,CAAA,EAAAA;AACA,iBAAA,QAAAA,CAAA,GACAsmE,CAAAA,CAAAtmE,CAAAsmE,CADA,GAEAz0D,CAAAA,CAAA3S,IAAA2S,CAAA7R,CAAA6R,EAAA1I,KAAA0I,CAAA,CAAAA,EAAA,CAAA,CAAAA,CAFA;AA4BA;;AAAA,iBAAA80D,CAAA,CAAAziD,CAAA,EAAAA;AACA,iBAAAvE,MAAAA,CAAAuE,CAAAvE,CAAAA,CAAAyU,OAAAzU,CAAA,cAAAA,EAAA,KAAAA,CAAA;AAWA;;AAAA,iBAAAnU,CAAA,CAAA8G,CAAA,EAAAihC,CAAA,EAAAA;AACA,cAAAqzB,CAAAA,GAAA,IAAA;AAIA,iBA/FA,UAAAnmE,CAAA,EAAA8yC,CAAA,EAAAA;AACA,gBAAA/vC,CAAAA,GAAAA,CAAA,CAAA;AAAA,gBACAhC,CAAAA,GAAAf,CAAAA,GAAAA,CAAAA,CAAAe,MAAAf,GAAA,CADA;AAGA,gBAAA,YAAA,OAAAe,CAAA,IAAAA,CAAAA,GAAAA,CAAA,CAAA,IAAAA,CAAAA,IAAA2kE,CAAA,EACA,OAAA,EAAA3iE,CAAA,GAAAhC,CAAA,GACA+xC,CAAAA,CAAA9yC,CAAAA,CAAA+C,CAAA/C,CAAA8yC,EAAA/vC,CAAA+vC,EAAA9yC,CAAA8yC,CAAAA,CAFA,KAKAkzB,CAAAA,CAAAhmE,CAAAgmE,EAAAlzB,CAAAkzB,CAAAA;AAmFAI,WA5FA,CA4FAv0D,CA5FA,EA4FA,UAAAtS,CAAA,EAAAwD,CAAA,EAAAA;AACAojE,YAAAA,CAAAA,GAAArzB,CAAAA,CAAAqzB,CAAArzB,EAAAvzC,CAAAuzC,EAAA/vC,CAAA+vC,EAAAjhC,CAAAihC,CAAAqzB;AAAAt0D,WA7FA,GA+FAs0D,CAAA;AAUA;;AAAA,iBAAAzyC,CAAA,CAAAjQ,CAAA,EAAAA;AACA,iBAAAvE,MAAAA,CAAAuE,CAAAvE,CAAAA,CAAAyU,OAAAzU,CAAA,UAAAA,EAAA,EAAAA,CAAA;AAw7BA;;AAAA,YAAAoiB,CAAAA,GA36BA,SAAA+kC,CAAA,CAAAC,CAAA,EAAAA;AAGA,cAAAtqD,CAAAA,GAAAre,CAAA;AAAA,cAGA4oE,CAAAA,GAAAD,CAAAA,IAAA,YAAA,OAAAA,CAAAA,IAAA,YAAAL,CAAAA,CAAAK,CAAAL,CAHA;AAMAM,UAAAA,CAAAA,KACAvqD,CAAAA,GAAAsqD,CAAAtqD,EACAsqD,CAAAA,GAAA,IAFAC,CAAAA;AAMA,cAAAC,CAAAA,GAAAxqD,CAAAA,CAAAyqD,SAAAzqD,IAAA,EAAA;AAAA,cAGA0qD,CAAAA,GAAAF,CAAAA,CAAAE,SAAAF,IAAA,EAHA;AAKAF,UAAAA,CAAAA,KAAAA,CAAAA,GAAAI,CAAAJ,CAAAA;;AAGA,cA4CA94D,CA5CA;AAAA,cA8DAm5D,CA9DA;AAAA,cA7EA3mE,CA6EA;AAAA,cA7EAC,CA6EA;AAAA,cA5EA4D,CA4EA;AAAA,cAGA+iE,CAAAA,GAAAL,CAAAA,GAAAA,CAAAA,CACAC,CAAAA,CAAAI,UADAL,GAEA,aAAA/2B,IAAA,CAAA82B,CAAA,KAAAA,CAAA,eAAA92B,IAAA,CAAAp+B,CAAAA,CAAAA,QAAAA,EAAA,CALA;AAAA,cASAy1D,CAAAA,GAAAN,CAAAA,GADA,QACAA,GAAA,2BATA;AAAA,cAUAO,CAAAA,GAAAP,CAAAA,GAFA,QAEAA,GAAA,aAVA;AAAA,cAWAQ,CAAAA,GAAAR,CAAAA,IAAAvqD,CAAAA,CAAAgrD,IAAAT,GAAA,aAAAA,GAAAN,CAAAA,CAAAjqD,CAAAA,CAAAgrD,IAAAf,CAXA;AAAA,cAYAgB,CAAAA,GAAAV,CAAAA,GAJA,QAIAA,GAAA,eAZA;AAAA,cAeAS,CAAAA,GAAA,SAAAx3B,IAAA,CAAAu3B,CAAA,KAAA/qD,CAAAA,CAAAgrD,IAfA;AAAA,cAkBAE,CAAAA,GAAAF,CAAAA,IAAAf,CAAAA,CAAAjqD,CAAAA,CAAAmrD,WAAAlB,CAAAA,IAAAa,CAlBA;AAAA,cAqBA76D,CAAAA,GAAA+6D,CAAAA,GAAA,GAAAA,GAAA,GArBA;AAAA,cAwBAppC,CAAAA,GAAAopC,CAAAA,GAAA,GAAAA,GAAA,GAxBA;AAAA,cA2BAI,CAAAA,GAAAprD,CAAAA,CAAAyjC,QAAAzjC,IAAA,EA3BA;AAAA,cAkCAqrD,CAAAA,GAAArrD,CAAAA,CAAAsrD,SAAAtrD,IAAAA,CAAAA,CAAAqrD,KAlCA;AAAA,cAqCAE,CAAAA,GAAA5B,CAAAA,CAAAn2B,IAAAm2B,CAAA4B,CAAAA,GAAAhB,CAAAA,IAAAc,CAAAd,GAAAc,CAAAA,CAAA,WAAAA,CAAAd,GAAAN,CAAAA,CAAAoB,CAAApB,CAAAN,IACA4B,CADA5B,GAEA0B,CAAAA,GAAA,IAvCA;AAAA,cA+CAG,CAAAA,GAAAlB,CA/CA;AAAA,cAkDAmB,CAAAA,GAAA,EAlDA;AAAA,cAqDAC,CAAAA,GAAA,IArDA;AAAA,cAwDAC,CAAAA,GAAArB,CAAAA,IAAAI,CAxDA;AAAA,cA2DAhzD,CAAAA,GAAAi0D,CAAAA,IAAAN,CAAAM,IAAA,cAAA,OAAAN,CAAAA,CAAA3zD,OAAAi0D,IAAAN,CAAAA,CAAA3zD,OAAA2zD,EA3DA;AAAA,cAiEAvV,CAAAA,GA+JA/mD,CAAAA,CA/JA,CACA;AAAO68D,YAAAA,KAAAA,EAAA,UAAP;AAAOC,YAAAA,OAAAA,EAAA;AAAP,WADA,EAEA,SAFA,EAGA;AAAOD,YAAAA,KAAAA,EAAA,QAAP;AAAOC,YAAAA,OAAAA,EAAA;AAAP,WAHA,EAIA,MAJA,EAKA,QALA,EAMA,UANA,EAOA,QAPA,EAQA,OARA,EASA,OATA,CA+JA98D,EAAA,UAAA8R,CAAA,EAAAirD,CAAA,EAAAA;AACA,mBAAAjrD,CAAAA,IAAAkrD,MAAAA,CAAA,SACAD,CAAAA,CAAAD,OAAAC,IAAA5B,CAAAA,CAAA4B,CAAA5B,CADA,IAEA,KAFA6B,EAEA,GAFAA,CAAAA,CAEAvc,IAFAuc,CAEAzB,CAFAyB,MAEAD,CAAAA,CAAAF,KAAAE,IAAAA,CAFAC,CAAA;AAEAD,WAHA/8D,CAhOA;AAAA,cA8EAlM,CAAAA,GAkLA,UAAAmpE,CAAA,EAAAA;AACA,mBAAAj9D,CAAAA,CAAAi9D,CAAAj9D,EAAA,UAAA8R,CAAA,EAAAirD,CAAA,EAAAA;AACA,qBAAAjrD,CAAAA,IAAAkrD,MAAAA,CAAA,SACAD,CAAAA,CAAAD,OAAAC,IAAA5B,CAAAA,CAAA4B,CAAA5B,CADA,IAEA,KAFA6B,EAEA,GAFAA,CAAAA,CAEAvc,IAFAuc,CAEAzB,CAFAyB,MAEAD,CAAAA,CAAAF,KAAAE,IAAAA,CAFAC,CAAA;AAEAD,aAHA/8D,CAAA;AAnLAk9D,WAkLA,CAlLA,CACA,WADA,EAEA,OAFA,EAGA,eAHA,EAIA,QAJA,EAKA,QALA,EAMA,UANA,EAOA,UAPA,EAQA,QARA,EASA,OATA,EAUA,QAVA,EAWA,cAXA,EAYA,MAZA,EAaA,WAbA,EAcA,UAdA,EAeA,WAfA,EAgBA,WAhBA,EAiBA,SAjBA,EAkBA;AAAOL,YAAAA,KAAAA,EAAA,gBAAP;AAAOC,YAAAA,OAAAA,EAAA;AAAP,WAlBA,EAmBA,QAnBA,EAoBA,cApBA,EAqBA,UArBA,EAsBA,WAtBA,EAuBA,OAvBA,EAwBA,QAxBA,EAyBA,UAzBA,EA0BA;AAAOD,YAAAA,KAAAA,EAAA,kBAAP;AAAOC,YAAAA,OAAAA,EAAA;AAAP,WA1BA,EA2BA,WA3BA,EA4BA;AAAOD,YAAAA,KAAAA,EAAA,MAAP;AAAOC,YAAAA,OAAAA,EAAA;AAAP,WA5BA,EA6BA,UA7BA,EA8BA,aA9BA,EA+BA;AAAOD,YAAAA,KAAAA,EAAA,aAAP;AAAOC,YAAAA,OAAAA,EAAA;AAAP,WA/BA,EAgCA,SAhCA,EAiCA,UAjCA,EAkCA,UAlCA,EAmCA,aAnCA,EAoCA,YApCA,EAqCA;AAAOD,YAAAA,KAAAA,EAAA,YAAP;AAAOC,YAAAA,OAAAA,EAAA;AAAP,WArCA,EAsCA,OAtCA,EAuCA;AAAOD,YAAAA,KAAAA,EAAA,OAAP;AAAOC,YAAAA,OAAAA,EAAA;AAAP,WAvCA,EAwCA,QAxCA,EAyCA;AAAOD,YAAAA,KAAAA,EAAA,eAAP;AAAOC,YAAAA,OAAAA,EAAA;AAAP,WAzCA,EA0CA;AAAOD,YAAAA,KAAAA,EAAA,SAAP;AAAOC,YAAAA,OAAAA,EAAA;AAAP,WA1CA,EA2CA;AAAOD,YAAAA,KAAAA,EAAA,iBAAP;AAAOC,YAAAA,OAAAA,EAAA;AAAP,WA3CA,EA4CA;AAAOD,YAAAA,KAAAA,EAAA,IAAP;AAAOC,YAAAA,OAAAA,EAAA;AAAP,WA5CA,EA6CA;AAAOD,YAAAA,KAAAA,EAAA,IAAP;AAAOC,YAAAA,OAAAA,EAAA;AAAP,WA7CA,EA8CA,QA9CA,CAkLA,CAhQA;AAAA,cAgIAK,CAAAA,GAAAC,CAAAA,CAAA,CACA;AAAOP,YAAAA,KAAAA,EAAA,YAAP;AAAOC,YAAAA,OAAAA,EAAA;AAAP,WADA,EAEA,YAFA,EAGA;AAAOD,YAAAA,KAAAA,EAAA,UAAP;AAAOC,YAAAA,OAAAA,EAAA;AAAP,WAHA,EAIA;AAAOD,YAAAA,KAAAA,EAAA,WAAP;AAAOC,YAAAA,OAAAA,EAAA;AAAP,WAJA,EAKA;AAAOD,YAAAA,KAAAA,EAAA,WAAP;AAAOC,YAAAA,OAAAA,EAAA;AAAP,WALA,EAMA;AAAOD,YAAAA,KAAAA,EAAA,WAAP;AAAOC,YAAAA,OAAAA,EAAA;AAAP,WANA,EAOA;AAAOD,YAAAA,KAAAA,EAAA,WAAP;AAAOC,YAAAA,OAAAA,EAAA;AAAP,WAPA,EAQA;AAAOD,YAAAA,KAAAA,EAAA,WAAP;AAAOC,YAAAA,OAAAA,EAAA;AAAP,WARA,EASA;AAAOD,YAAAA,KAAAA,EAAA,gBAAP;AAAOC,YAAAA,OAAAA,EAAA;AAAP,WATA,EAUA;AAAOD,YAAAA,KAAAA,EAAA,WAAP;AAAOC,YAAAA,OAAAA,EAAA;AAAP,WAVA,EAWA;AAAOD,YAAAA,KAAAA,EAAA,gBAAP;AAAOC,YAAAA,OAAAA,EAAA;AAAP,WAXA,EAYA,WAZA,EAaA,OAbA,EAcA,MAdA,EAeA,MAfA,EAgBA,QAhBA,EAiBA,QAjBA,EAkBA;AAAOD,YAAAA,KAAAA,EAAA,aAAP;AAAOC,YAAAA,OAAAA,EAAA;AAAP,WAlBA,EAmBA,OAnBA,EAoBA,MApBA,EAqBA,UArBA,EAsBA,kBAtBA,EAuBA,aAvBA,EAwBA,UAxBA,EAyBA,aAzBA,EA0BA;AAAOD,YAAAA,KAAAA,EAAA,OAAP;AAAOC,YAAAA,OAAAA,EAAA;AAAP,WA1BA,EA2BA,KA3BA,EA4BA,UA5BA,EA6BA;AAAOD,YAAAA,KAAAA,EAAA,UAAP;AAAOC,YAAAA,OAAAA,EAAA;AAAP,WA7BA,EA8BA,MA9BA,CAAAM,CAhIA;AAAA,cAkKAC,CAAAA,GA4EA,UAAAJ,CAAA,EAAAA;AACA,mBAAAj9D,CAAAA,CAAAi9D,CAAAj9D,EAAA,UAAA8R,CAAA,EAAAtd,CAAA,EAAAM,CAAA,EAAAA;AAEA,qBAAAgd,CAAAA,IAAAA,CACAtd,CAAAA,CAAA2oE,CAAA3oE,CAAAA,IACAA,CAAAA,CAAA,0BAAAisD,IAAA,CAAA0c,CAAA,CAAA3oE,CADAA,IAEAwoE,MAAAA,CAAA,QAAA7B,CAAAA,CAAArmE,CAAAqmE,CAAA,GAAA,iBAAA6B,EAAA,GAAAA,CAAAA,CAAAvc,IAAAuc,CAAAzB,CAAAyB,CAHAlrD,KAIAhd,CAJA;AAIAA,aANAkL,CAAA;AA7EAs9D,WA4EA,CA5EA;AACAC,YAAAA,KAAAA,EAAA;AAAgBC,cAAAA,IAAAA,EAAA,CAAhB;AAAgBC,cAAAA,MAAAA,EAAA,CAAhB;AAAgBC,cAAAA,IAAAA,EAAA;AAAhB,aADA;AAEAC,YAAAA,MAAAA,EAAA,EAFA;AAGAC,YAAAA,MAAAA,EAAA;AAAiBC,cAAAA,MAAAA,EAAA,CAAjB;AAAiBC,6BAAA;AAAjB,aAHA;AAIAC,YAAAA,IAAAA,EAAA;AAAeC,cAAAA,WAAAA,EAAA;AAAf,aAJA;AAKAC,8BAAA;AAAyBC,cAAAA,IAAAA,EAAA;AAAzB,aALA;AAMAC,YAAAA,UAAAA,EAAA;AAAqBC,cAAAA,QAAAA,EAAA;AAArB,aANA;AAOAC,YAAAA,MAAAA,EAAA;AAAiBC,2BAAA,CAAjB;AAAiBC,cAAAA,KAAAA,EAAA;AAAjB,aAPA;AAQAC,YAAAA,EAAAA,EAAA;AAAaC,cAAAA,QAAAA,EAAA;AAAb,aARA;AASAC,YAAAA,GAAAA,EAAA,EATA;AAUAC,YAAAA,EAAAA,EAAA,EAVA;AAWAC,YAAAA,SAAAA,EAAA;AAAoBC,cAAAA,IAAAA,EAAA,CAApB;AAAoBC,0BAAA;AAApB,aAXA;AAYAC,YAAAA,QAAAA,EAAA;AAAmBC,cAAAA,IAAAA,EAAA;AAAnB,aAZA;AAaAC,YAAAA,QAAAA,EAAA;AAAmBC,uBAAA,CAAnB;AAAmBC,cAAAA,GAAAA,EAAA;AAAnB,aAbA;AAcAC,YAAAA,KAAAA,EAAA;AAAgBC,cAAAA,KAAAA,EAAA;AAAhB,aAdA;AAeAC,YAAAA,OAAAA,EAAA;AAAkBC,0BAAA,CAAlB;AAAkBC,2BAAA,CAAlB;AAAkBC,2BAAA,CAAlB;AAAkBC,2BAAA;AAAlB,aAfA;AAgBAC,YAAAA,IAAAA,EAAA;AAAeC,cAAAA,WAAAA,EAAA,CAAf;AAAeC,kCAAA;AAAf;AAhBA,WA4EA,CA9OA;AAAA,cAsLAC,CAAAA,GAyFA,UAAA7C,CAAA,EAAAA;AACA,mBAAAj9D,CAAAA,CAAAi9D,CAAAj9D,EAAA,UAAA8R,CAAA,EAAAirD,CAAA,EAAAA;AACA,kBAAAD,CAAAA,GAAAC,CAAAA,CAAAD,OAAAC,IAAA5B,CAAAA,CAAA4B,CAAA5B,CAAA;AAMA,qBAAA,CALArpD,CAKA,KALAA,CAAAA,GACAkrD,MAAAA,CAAA,QAAAF,CAAA,GAAA,uBAAAE,EAAA,GAAAA,CAAAA,CAAAvc,IAAAuc,CAAAzB,CAAAyB,CAIA,MAFAlrD,CAAAA,GA3dA,UAAAguD,CAAA,EAAAhD,CAAA,EAAAD,CAAA,EAAAA;AAIA,oBAAAp6D,CAAAA,GAAA;AACAs9D,0BAAA,IADA;AAEAC,uBAAA,sBAFA;AAGAC,uBAAA,KAHA;AAIAC,uBAAA,GAJA;AAKAC,uBAAA,oBALA;AAMAC,yBAAA,qBANA;AAOAC,uBAAA,yBAPA;AAQAC,uBAAA,IARA;AASAC,wBAAA,UATA;AAUAC,yBAAA,MAVA;AAWAC,yBAAA,IAXA;AAYAC,0BAAA;AAZA,iBAAA;AA0CA,uBA3BA5D,CAAAA,IAAAD,CAAAC,IAAA,QAAAr4B,IAAA,CAAAq7B,CAAA,CAAAhD,IAAAgD,CAAA,mBAAAr7B,IAAA,CAAAq7B,CAAA,CAAAhD,KACAr6D,CAAAA,GAAAA,CAAAA,CAAA,UAAAg+C,IAAA,CAAAqf,CAAA,CAAAr9D,CADAq6D,MAEAgD,CAAAA,GAAA,aAAAr9D,CAFAq6D,GAKAgD,CAAAA,GAAA3rD,MAAAA,CAAA2rD,CAAA3rD,CALA2oD,EAOAA,CAAAA,IAAAD,CAAAC,KACAgD,CAAAA,GAAAA,CAAAA,CAAAl3C,OAAAk3C,CAAA9C,MAAAA,CAAAF,CAAAE,EAAA,GAAAA,CAAA8C,EAAAjD,CAAAiD,CADAhD,CAPAA,EAWAgD,CAAAA,GAAA9E,CAAAA,CACA8E,CAAAA,CAAAl3C,OAAAk3C,CAAA,OAAAA,EAAA,KAAAA,EACAl3C,OADAk3C,CACA,QADAA,EACA,KADAA,EAEAl3C,OAFAk3C,CAEA,eAFAA,EAEA,QAFAA,EAGAl3C,OAHAk3C,CAGA,aAHAA,EAGA,KAHAA,EAIAl3C,OAJAk3C,CAIA,mBAJAA,EAIA,IAJAA,EAKAl3C,OALAk3C,CAKA,gBALAA,EAKA,IALAA,EAMAl3C,OANAk3C,CAMA,QANAA,EAMA,KANAA,EAOAl3C,OAPAk3C,CAOA,IAPAA,EAOA,GAPAA,EAQAl3C,OARAk3C,CAQA,4BARAA,EAQA,EARAA,EASAl3C,OATAk3C,CASA,eATAA,EASA,QATAA,EAUAl3C,OAVAk3C,CAUA,wBAVAA,EAUA,IAVAA,EAWAl3C,OAXAk3C,CAWA,4BAXAA,EAWA,IAXAA,EAYAv+D,KAZAu+D,CAYA,MAZAA,EAYA,CAZAA,CADA9E,CAgBA;AA6aA2F,eA3dA,CA2dA7uD,CA3dA,EA2dAgrD,CA3dA,EA2dAC,CAAAA,CAAAF,KAAAE,IAAAA,CA3dA,CA6dA,GAAAjrD,CAAA;AAAAA,aAPA9R,CAAA;AA1FA4gE,WAyFA,CAzFA,CACA,eADA,EAEA,SAFA,EAGA,QAHA,EAIA;AAAO/D,YAAAA,KAAAA,EAAA,WAAP;AAAOC,YAAAA,OAAAA,EAAA;AAAP,WAJA,EAKA,QALA,EAMA,QANA,EAOA,SAPA,EAQA,QARA,EASA,OATA,EAUA,SAVA,EAWA,YAXA,EAYA,SAZA,EAaA,SAbA,EAcA,MAdA,EAeA,QAfA,EAgBA,SAhBA,EAiBA,QAjBA,EAkBA,YAlBA,EAmBA,OAnBA,EAoBA,QApBA,EAqBA,OArBA,EAsBA,WAtBA,EAuBA,OAvBA,EAwBA,OAxBA,EAyBA,UAzBA,EA0BA,WA1BA,EA2BA,KA3BA,EA4BA,aA5BA,EA6BA,UA7BA,CAyFA,CA/QA;;AAkSA,mBAAAM,CAAA,CAAAH,CAAA,EAAAA;AACA,mBAAAj9D,CAAAA,CAAAi9D,CAAAj9D,EAAA,UAAA8R,CAAA,EAAAirD,CAAA,EAAAA;AACA,kBAAAD,CAAAA,GAAAC,CAAAA,CAAAD,OAAAC,IAAA5B,CAAAA,CAAA4B,CAAA5B,CAAA;AAiBA,qBAAA,CAhBArpD,CAgBA,KAhBAA,CAAAA,GACAkrD,MAAAA,CAAA,QAAAF,CAAA,GAAA,gBAAAE,EAAA,GAAAA,CAAAA,CAAAvc,IAAAuc,CAAAzB,CAAAyB,KACAA,MAAAA,CAAA,QAAAF,CAAA,GAAA,eAAAE,EAAA,GAAAA,CAAAA,CAAAvc,IAAAuc,CAAAzB,CAAAyB,CADAA,IAEAA,MAAAA,CAAA,QAAAF,CAAA,GAAA,4CAAAE,EAA8E,GAA9EA,CAAAA,CAA8Evc,IAA9Euc,CAA8EzB,CAA9EyB,CAaA,MAb8EzB,CAG9EzpD,CAAAA,GAAAqC,MAAAA,CAAA4oD,CAAAA,CAAAF,KAAAE,IAAAF,CAAAG,MAAAA,CAAAF,CAAAE,EAAA,GAAAA,CAAAA,CAAAv4B,IAAAu4B,CAAAD,CAAAA,CAAAF,KAAAG,CAAAD,GAAAA,CAAAA,CAAAF,KAAAE,GAAAjrD,CAAAqC,CAAAA,CAAA5S,KAAA4S,CAAA,GAAAA,CAH8EonD,EAG9E,CAH8EA,KAG9E,CAAA,SAAA92B,IAAA,CAAA3yB,CAAAA,CAAA,CAAAA,CAAA,CAH8EypD,KAI9EzpD,CAAAA,CAAA,CAAAA,CAAAA,IAAA,MAAAA,CAAAA,CAAA,CAAAA,CAJ8EypD,GAO9EwB,CAAAA,GAAAA,CAAAA,CAAAF,KAAAE,IAAAA,CAP8ExB,EAQ9EzpD,CAAAA,GAAAkpD,CAAAA,CAAAlpD,CAAAA,CAAA,CAAAA,CAAAA,CACA8W,OADA9W,CACAkrD,MAAAA,CAAAF,CAAAE,EAAA,GAAAA,CADAlrD,EACAirD,CADAjrD,EAEA8W,OAFA9W,CAEAkrD,MAAAA,CAAA,WAA8BD,CAA9B,GAA8B,QAA9BC,EAA8B,GAA9BA,CAFAlrD,EAE8B,GAF9BA,EAGA8W,OAHA9W,CAGAkrD,MAAAA,CAAA,MAAAD,CAAA,GAAA,cAAAC,EAAA,GAAAA,CAHAlrD,EAGA,OAHAA,CAAAkpD,CAKA,GAAAlpD,CAAA;AAAAA,aAlBA9R,CAAA;AAyKA;;AAAA,cAvHA+mD,CAAAA,KAAAA,CAAAA,GAAA,CAAAA,CAAA,CAAAA,CAAAA,EAGAsW,CAAAA,IAAAA,CAAAF,CAAAE,KACAF,CAAAA,GAAAC,CAAAA,CAAA,CAAAC,CAAA,CAAAD,CADAC,CAHAtW,EAIAsW,CAGA56D,CAAAA,GAAA,gBAAAg+C,IAAA,CAAA0c,CAAA,CAHAE,MAIAF,CAAAA,GAAA16D,CAAAA,CAAA,CAAAA,CAJA46D,CAJAtW,EAWA,iBAAAtiB,IAAA,CAAA82B,CAAA,MACA4B,CAAAA,GAAAA,CAAAA,CAAAA,GAAAA,CAAAA,GAAA,GAAAA,GAAA,EAAAA,IAAA,WADA,CAXApW,EAeA,gBAAAjzD,CAAA,IAAA,YAAA2wC,IAAA,CAAA82B,CAAA,CAAA,IACAmB,CAAAA,CAAAh8D,IAAAg8D,CAAA,oCAAAA,CAhBA3V,EAmBA,QAAAjzD,CAAA,IAAA,qBAAA2wC,IAAA,CAAA82B,CAAA,CAAA,IAEA8B,CAAAA,GAAAA,CADA56D,CAAAA,GAAA64D,CAAAA,CAAAC,CAAAA,CAAA3yC,OAAA2yC,CAAA,gBAAAA,EAAA,EAAAA,CAAAD,CACA+B,EAAAA,YAAAA,EACAF,CAAAA,GAAA16D,CAAAA,CAAA06D,OAHA,IAMA,MAAA14B,IAAA,CAAA04B,CAAA,KACArpE,CAAAA,KAAAA,CAAAA,GAAA,QAAAA,CAAAA,EACAgsE,CAAAA,GAAA,SAAA,CAAAr9D,CAAAA,GAAA,gBAAAg+C,IAAA,CAAA8a,CAAA,CAAA,IACA,MAAA94D,CAAAA,CAAA,CAAAA,CAAAA,CAAAmmB,OAAAnmB,CAAA,IAAAA,EAAA,GAAAA,CADA,GAEA,EAFA,CAFA,IAOA,eAAA3O,CAAA,IAAA,SAAA2wC,IAAA,CAAAq7B,CAAA,CAAA,GAIAzC,CAAAA,IAAA,YAAAA,CAAAA,KACA,SAAA54B,IAAA,CAAA3wC,CAAA,KAAAA,CAAA,qBAAA2wC,IAAA,CAAA82B,CAAA,CAAA,IAAA,WAAA92B,IAAA,CAAA04B,CAAA,CADAE,KAEA,cAAA54B,IAAA,CAAAq7B,CAAA,KAAA,UAAAr7B,IAAA,CAAA3wC,CAAA,CAAA,IAAA,eAAA2wC,IAAA,CAAA82B,CAAA,CAFA8B,IAGAvpE,CAAAA,GAAA,iBAAAA,EACAgsE,CAAAA,GAAA,cAAAr7B,IAAA,CAAAq7B,CAAA,IAAAA,CAAA,GAAA,SAJAzC,IAOA,UAAAvpE,CAAA,IACA,UAAA2wC,IAAA,CAAA82B,CAAA,MACAuE,CAAAA,GAAA,SAAAA,EACApD,CAAAA,CAAA9c,OAAA8c,CAAA,cAAAA,CAFA,GAIA,wBAAAj4B,IAAA,CAAA82B,CAAA,KACAmB,CAAAA,CAAA9c,OAAA8c,CAAA,aAAAA,CANA,IAUA,cAAA5oE,CAAA,KAAA2O,CAAAA,GAAA,wBAAAg+C,IAAA,CAAA8a,CAAA,CAAA,IACAmB,CAAAA,CAAAh8D,IAAAg8D,CAAA,4BAAAj6D,CAAAA,CAAA,CAAAA,CAAAi6D,CADA,GAIA,aAAA5oE,CAAA,KAAA2O,CAAAA,GAAA,0BAAAg+C,IAAA,CAAA8a,CAAA,CAAA,KACAuE,CAAAA,KAAAA,CAAAA,GAAA,YAAAA,CAAAA,EACA3C,CAAAA,KAAAA,CAAAA,GAAA16D,CAAAA,CAAA,CAAAA,CAAA06D,CAFA,IAEA,CAGArpE,CAHA,KAGA2O,CAAAA,GAAAA,CAAA,iBAAAgiC,IAAA,CAAA82B,CAAA,CAAA94D,IAAA,yBAAAg+C,IAAA,CAAA3sD,CAAA,CAHA,KAKAA,CAAAA,IAAAA,CAAAqpE,CAAArpE,IAAA,kBAAA2wC,IAAA,CAAA82B,CAAAA,CAAA59D,KAAA49D,CAAAA,CAAAA,CAAA96D,OAAA86D,CAAA94D,CAAAA,GAAA,GAAA84D,IAAA,CAAAA,CAAA,CAAAznE,KAEAA,CAAAA,GAAA,IAFAA,GAEA,CAGA2O,CAAAA,GAAA06D,CAAAA,IAAAE,CAAAF,IAAA2C,CAHA,MAIA3C,CAAAA,IAAAE,CAAAF,IAAA,6CAAA14B,IAAA,CAAAq7B,CAAA,CAJA,MAKAhsE,CAAAA,GAAA,mBAAA2sD,IAAA,CAAA,cAAAhc,IAAA,CAAAq7B,CAAA,IAAAA,CAAA,GAAAr9D,CAAA,IAAA,UALA,CAPA,IAgBA,cAAA3O,CAAA,KAAA2O,CAAAA,GAAAA,CAAA,uBAAAg+C,IAAA,CAAA8a,CAAA,KAAA,CAAA94D,EAAA,CAAAA,CAAA,KACAi6D,CAAAA,CAAAh8D,IAAAg8D,CAAA,cAAAj6D,CAAAi6D,CA5CA,GACAoD,CAAAA,GAAA,SAjCA/Y,EA+EAp+C,CAAAA,KACAA,CAAAA,GApGA3I,CAAAA,CAoGA,CACA,6GADA,EAEA,SAFA,EAGAm7D,CAAAA,CAAArnE,CAAAqnE,CAHA,EAIA,gCAJA,CApGAn7D,EAAA,UAAA8R,CAAA,EAAAgrD,CAAA,EAAAA;AACA,mBAAAhrD,CAAAA,IAAAA,CAAAkrD,MAAAA,CAAAF,CAAAA,GACA,0DADAE,EAC6D,GAD7DA,CAAAA,CAC6Dvc,IAD7Duc,CAC6DzB,CAD7DyB,KAC6D,CAD7DlrD,EAC6D,CAD7DA,CAAAA,IAC6D,IAD7D;AAC6D,WAF7D9R,CAmGA2I,CA/EAo+C,EAlB6D,CA0G7DtkD,CAAAA,GAAAA,CACA,UAAAskD,CAAA,IAAA8Z,UAAAA,CAAAl4D,CAAAk4D,CAAAA,GAAA,CAAA,GAAA,QAAA,GACA,YAAAp8B,IAAA,CAAA3wC,CAAA,MAAA,UAAA2wC,IAAA,CAAA82B,CAAA,IAAA,OAAA,GAAA,QAAA,CAFA94D,KAGA,8BAAAgiC,IAAA,CAAA82B,CAAA,KAAAA,CAAA,yBAAA92B,IAAA,CAAAsiB,CAAA,CAAA,IAAA,QAHAtkD,IAGA,CACAskD,CADA,IACA,YAAAtiB,IAAA,CAAA82B,CAAA,CADA,KACA,YAAAuE,CAAA,GAAA,QAAA,GAAA,SADA,CAHAr9D,IAKA,YAAAskD,CAAA,IAAA,8BAAAtiB,IAAA,CAAA3wC,CAAA,CAAA,IAAA,UA/G6D,MAiH7DizD,CAAAA,GAAA,CAAAtkD,CAAA,CAjH6D,CAkB7DskD,EAkGA,QAAAjzD,CAAA,KAAA2O,CAAAA,GAAAA,CAAA,4BAAmCg+C,IAAnC,CAAmC8a,CAAnC,KAAmC,CAAnC94D,EAAmC,CAAnCA,CAAA,KACA3O,CAAAA,IAAA,SAAAA,EACAgsE,CAAAA,GAAA,oBAAA,MAAAr7B,IAAA,CAAAhiC,CAAA,IAAAA,CAAA,GAAAA,CAAAA,GAAA,IAAA,CADA3O,EAEA4oE,CAAAA,CAAA9c,OAAA8c,CAAA,cAAAA,CAHA,IAMA,iBAAAj4B,IAAA,CAAA82B,CAAA,KACAznE,CAAAA,GAAA,WAAAA,EACAgsE,CAAAA,GAAA,mBADAhsE,EAEA4oE,CAAAA,CAAA9c,OAAA8c,CAAA,cAAAA,CAFA5oE,EAGA6U,CAAAA,KAAAA,CAAAA,GAAAA,CAAA,gBAAA83C,IAAA,CAAA8a,CAAA,KAAA,CAAA5yD,EAAA,CAAAA,CAAAA,CAJA,IAOA,QAAA7U,CAAA,IAAA,aAAAizD,CAAA,KAAAtkD,CAAAA,GAAA,gBAAAg+C,IAAA,CAAA8a,CAAA,CAAA,MACAznE,CAAAA,IACA4oE,CAAAA,CAAAh8D,IAAAg8D,CAAA,oBAAA5oE,CAAA,IAAA6U,CAAAA,GAAA,MAAAA,CAAAA,GAAA,EAAA,CAAA+zD,CADA5oE,EAGAA,CAAAA,GAAA,IAHAA,EAIA6U,CAAAA,GAAAlG,CAAAA,CAAA,CAAAA,CALA,CA/GAskD,EAuHA6V,CAAA,EAAA;AAGA,gBA5hBA1nE,CAAAA,GA4hBA,QA5hBAA,EACA4D,CAAAA,GAAA,SADA7D,CAAAA,GA4hBAgc,CA3hBA,IA2hBAA,OA3hBAhc,CAAAA,CAAAC,CAAAD,CAAA,GAAA,QADAC,EAEA,wCAAAuvC,IAAA,CAAA3rC,CAAA,KACA,YAAAA,CAAA,IAAAA,CAAA7D,CAAAA,CAAAC,CAAAD,CAyhBA,EA6CAimE,CAAAA,CAAAz4D,CAAAA,GAAAwO,CAAAA,CAAA6vD,OAAA5F,CAAAA,IAAAY,CAAAZ,IACApnE,CAAAA,GAAA,WAAAA,EACAgsE,CAAAA,GAAAr9D,CAAAA,CAAAs+D,KAAAt+D,CAAAu+D,MAAAv+D,CAAAw+D,YAAAx+D,CAAAq9D,EAFA5E,IAKAA,CAAAA,CAAAz4D,CAAAA,GAAAwO,CAAAA,CAAAiwD,OAAAhG,CAAAA,IAAAgB,CAAAhB,IACApnE,CAAAA,GAAA,WAAAA,EACA6U,CAAAA,GAAAA,CAAAlG,CAAAA,GAAAA,CAAAA,CAAAkG,OAAAlG,IAAA,IAAAkG,KAAAlG,CAAAA,CAAA0+D,KAAA1+D,GAAA,GAAAA,GAAAA,CAAAA,CAAA2+D,KAAA3+D,GAAA,GAAAA,GAAAA,CAAAA,CAAA4+D,KAFAnG,IAKA,YAAA,OAAAmB,CAAAA,CAAAiF,YAAA,KAAA7+D,CAAAA,GAAA,oBAAAg+C,IAAA,CAAA8a,CAAA,CAAA,KAGA5yD,CAAAA,GAAA,CAAAA,CAAA,EAAA0zD,CAAAA,CAAAiF,YAAA,CAAA34D,EAAA24D,CACA7+D,CAAAA,GAAAA,CAAAA,CAAAA,CAAA,CAAAA,CAAAA,GAAA,CADA6+D,KACA34D,CAAAA,CAAA,CAAAA,CADA24D,KAEA5E,CAAAA,CAAAh8D,IAAAg8D,CAAA,QAAA/zD,CAAAA,CAAA,CAAAA,CAAA,GAAA,OAAA+zD,GACA3V,CAAAA,KAAAA,CAAAA,CAAA,CAAAA,CAAAA,GAAA,EAAAA,CADA2V,EAEA/zD,CAAAA,CAAA,CAAAA,CAAAA,GAAAlG,CAJA6+D,CAAA34D,EAMAA,CAAAA,GAAA,QAAA7U,CAAA,GAAAqgB,MAAAA,CAAAxL,CAAAA,CAAA,CAAAA,CAAAA,CAAA8E,OAAA9E,CAAA,CAAAA,CAAAwL,CAAA,GAAAxL,CAAAA,CAAA,CAAAA,CATA,IAYA,YAAA,OAAA0zD,CAAAA,CAAAiF,YAAA,IAAA,wBAAA78B,IAAA,CAAA3wC,CAAA,CAAA,KACA4oE,CAAAA,CAAAh8D,IAAAg8D,CAAA,gBAAA5oE,CAAA,GAAA,GAAA,GAAA6U,CAAA+zD,GACA5oE,CAAAA,GAAA,IADA4oE,EAEA/zD,CAAAA,GAAA,MAFA+zD,EAGA3V,CAAAA,GAAA,CAAA,SAAA,CAHA2V,EAIAoD,CAAAA,GAAA,SALA,CAtBA5E,CA7CA,KAMA,IALAe,CAAAA,KAEAQ,CAAAA,GAAAA,CADAh6D,CAAAA,GAAAw5D,CAAAA,CAAAsF,IAAAtF,CAAAuF,MACA/E,EAAAgF,WAAAhF,CAAA,SAAAA,CAAAA,EACAqD,CAAAA,GAAAA,CAAAA,IAAAr9D,CAAAA,CAAAg/D,WAAAh/D,CAAA,SAAAA,IAAA,GAAAA,GAAAA,CAAAA,CAAAg/D,WAAAh/D,CAAA,YAAAA,CAHAw5D,CAAAA,EAKAE,CAAA,EAAA;AACA,kBAAA;AACAxzD,gBAAAA,CAAAA,GAAAsI,CAAAA,CAAAywD,OAAAzwD,CAAA,cAAAA,EAAAtI,OAAAsI,CAAA6N,IAAA7N,CAAA,GAAAA,CAAAtI,EACA7U,CAAAA,GAAA,SADA6U;AAEW,eAHX,CAGW,OAAA6E,CAAA,EAAAA;AAAAA,iBACX/K,CAAAA,GAAAwO,CAAAA,CAAA+vD,MADWxzD,KACX/K,CAAAA,CAAA4P,MAAA5P,CAAAu+D,MAAAv+D,IAAAwO,CAAAA,CAAA+vD,MADWxzD,KAEX1Z,CAAAA,GAAA,SAAAA,EACAgsE,CAAAA,KAAAA,CAAAA,GAAAr9D,CAAAA,CAAA,CAAAA,CAAAA,CAAAq9D,EAAAr9D,IAAA,IAAAq9D,CAHWtyD;AAMX1Z;;AAAAA,cAAAA,CAAAA,KACAA,CAAAA,GAAA,OADAA,CAAAA;AACA,aAXA,MAeA,YAAA,OAAAmd,CAAAA,CAAA8C,OAAA,IAAAA,CAAA9C,CAAAA,CAAA8C,OAAA9C,CAAAqkB,OAAA,KACA7yB,CAAAA,GAAAwO,CAAAA,CAAA8C,OADA,MAGA,YAAA,OAAAtR,CAAAA,CAAAuR,QAAA,KACA,YAAA,OAAAvR,CAAAA,CAAAuR,QAAAvR,CAAAk/D,QAAA,IACAjF,CAAAA,CAAAh8D,IAAAg8D,CAAA,UAAAj6D,CAAAA,CAAAuR,QAAAvR,CAAA8O,IAAAmrD,GACA5oE,CAAAA,GAAA,UADA4oE,EAEA/zD,CAAAA,GAAAlG,CAAAA,CAAAuR,QAAAvR,CAAAk/D,QAHA,IAIa,YAAA,OAAAl/D,CAAAA,CAAAuR,QAAAvR,CAAAm/D,EAAA,KACblF,CAAAA,CAAAh8D,IAAAg8D,CAAA,cAAA/zD,CAAA+zD,EAAA,UAAAj6D,CAAAA,CAAAuR,QAAAvR,CAAA8O,IAAAmrD,GACA5oE,CAAAA,GAAA,OADA4oE,EAEA/zD,CAAAA,GAAAlG,CAAAA,CAAAuR,QAAAvR,CAAAm/D,EAHa,CALb,GAWA9tE,CAAAA,KACAA,CAAAA,GAAA,SAAAA,EACA2oE,CAAAA,GAAAh6D,CAAAA,CAAAg6D,IADA3oE,EAEAgsE,CAAAA,GAAAr9D,CAAAA,CAAA8zB,QAFAziC,EAIA6U,CAAAA,GAAAA,CADAA,CAAAA,GAAA,SAAA83C,IAAA,CAAAh+C,CAAAA,CAAAkG,OAAA,CACAA,IAAAA,CAAAA,CAAA,CAAAA,CAAAA,GAAA,IALA7U,CAdA;AAqDAgsE,YAAAA,CAAAA,GAAAA,CAAAA,IAAA9E,CAAAA,CAAA8E,CAAA9E,CAAA8E;AAaA;;AAAA,cAVAn3D,CAAAA,KAAAlG,CAAAA,GACA,0CAAAg+C,IAAA,CAAA93C,CAAA,KACA,2BAAA83C,IAAA,CAAA8a,CAAAA,GAAA,GAAAA,IAAiDqB,CAAAA,IAAAnB,CAAAA,CAAAoG,eAAjDtG,CAAA,CADA,IAEA,iBAAA92B,IAAA,CAAA82B,CAAA,KAAA,GAHA5yD,CAAAA,KAKAg0D,CAAAA,GAAA,KAAAl4B,IAAA,CAAAhiC,CAAA,IAAA,MAAA,GAAA,OAAAk6D,EACAh0D,CAAAA,GAAAA,CAAAA,CAAAigB,OAAAjgB,CAAAq0D,MAAAA,CAAAv6D,CAAAA,GAAA,OAAAu6D,CAAAr0D,EAAA,EAAAA,KACA,UAAAg0D,CAAA,GAAA9pC,CAAA,GAAA3xB,CADAyH,KACA,SAAA83C,IAAA,CAAAh+C,CAAA,KAAA,EADAkG,CANAA,GAUA,YAAA7U,CAAA,IAAA,aAAAA,CAAA,IAAA,6BAAA2wC,IAAA,CAAAq7B,CAAA,CAAA,EACAhsE,CAAAA,GAAA,gBAAAA,CADA,KAIA,IAAA,aAAAA,CAAA,IAAA6U,CAAA,EACAA,CAAAA,GAAAA,CAAAA,CAAAigB,OAAAjgB,CAAA,UAAAA,EAAA,IAAAA,CAAAA,CADA,KAIA,IAAA,YAAA87B,IAAA,CAAA04B,CAAA,CAAA,EACA,cAAAA,CAAA,KACA2C,CAAAA,GAAA,IADA,GAGA,cAAA3C,CAAA,IAAA,eAAA14B,IAAA,CAAA82B,CAAA,CAAA,IACAmB,CAAAA,CAAA9c,OAAA8c,CAAA,aAAAA,CAJA,CADA,KASA,IAAA,CAAA,wBAAAj4B,IAAA,CAAA3wC,CAAA,CAAA,KAAAA,CAAAA,CAAAA,IAAAqpE,CAAArpE,IAAA,eAAA2wC,IAAA,CAAA3wC,CAAA,CAAA,KACA,gBAAAgsE,CAAA,IAAAA,CAAA,QAAAr7B,IAAA,CAAA82B,CAAA,CADA;AAKA,gBAAA,QAAAznE,CAAA,IAAA8oE,CAAA,EACA,IAAA;AACA,uBAAA3rD,CAAAA,CAAA6wD,QAAA,IACApF,CAAAA,CAAA9c,OAAA8c,CAAA,kBAAAA,CADA;AAGO,aAJP,CAIO,OAAAlvD,CAAA,EAAAA;AACPkvD,cAAAA,CAAAA,CAAA9c,OAAA8c,CAAA,UAAAA;AAAA,aANA,MAMA,CAKA,iBAAAj4B,IAAA,CAAA04B,CAAA,KAAA,WAAA14B,IAAA,CAAA82B,CAAA,CALA,MAKA94D,CAAAA,GAAAA,CACAu6D,MAAAA,CAAAG,CAAAA,CAAAv0C,OAAAu0C,CAAA,KAAAA,EAAA,IAAAA,IAAA,YAAAH,EAAA,GAAAA,CAAAA,CAAAvc,IAAAuc,CAAAzB,CAAAyB,KAAA,CADAv6D,EACA,CADAA,KAEAkG,CAPA,KAUAm3D,CAAAA,GAAAA,CAAAA,CADAr9D,CAAAA,GAAA,CAAAA,CAAA,EAAA,OAAAgiC,IAAA,CAAA82B,CAAA,CAAA,CACAuE,EAAA,CAAAA,KAAA3C,CAAAA,GAAA,IAAAA,EAAAE,CAAAA,GAAA,YAAAyC,IAAA,iBAAAA,IAAA,GAAAA,GAAAr9D,CAAAA,CAAA,CAAAA,CAAAq9D,EACAn3D,CAAAA,GAAA,IAXA,IAeA/D,QAAAq2D,CAAAr2D,IAAA,SAAAu4D,CAAAv4D,KACAg4D,CAAAA,IAAAN,CAAAM,IACA,QAAAn4B,IAAA,CAAA3wC,CAAA,KAAA,wBAAA2wC,IAAA,CAAA82B,CAAA,CADAqB,IAEA,aAAA9oE,CAAA,IAAA,uBAAqD2wC,IAArD,CAAqDq7B,CAArD,CAFAlD,IAGA,QAAA9oE,CAAA,KACAgsE,CAAAA,IAAAA,CAAA,OAAAr7B,IAAA,CAAAq7B,CAAA,CAAAA,IAAAn3D,CAAAA,GAAA,GAAAm3D,IACA,iBAAAr7B,IAAA,CAAAq7B,CAAA,KAAAn3D,CAAAA,GAAA,CADAm3D,IAEA,KAAAn3D,CAAA,IAAAA,CAAA,cAAA87B,IAAA,CAAA82B,CAAA,CAHA,CAJA32D,KAOA22D,CAEAX,CAAAA,CAAAn2B,IAAAm2B,CAAAn4D,CAAAA,GAAA64D,CAAAA,CAAA5nE,IAAA4nE,CAAAL,CAAAK,EAAAC,CAAAA,CAAA3yC,OAAA2yC,CAAAX,CAAAW,EAAA,EAAAA,IAAA,GAAAD,CAAAV,CATAh2D,IASkFnC,CAAAA,CAAA3O,IATlF8Q,KAWAnC,CAAAA,GAAA,YAAAA,CAAAA,CAAA3O,IAAA,IAAAA,CAAA2O,CAAAA,GAAAA,CAAAA,CAAAkG,OAAA7U,IAAA,MAAA2O,CAAA3O,GAAA,EAAA,CAAA2O,EACAm4D,CAAAA,CAAAn2B,IAAAm2B,CAAA9mE,CAAA8mE,KACA,SAAAn2B,IAAA,CAAAhiC,CAAA,KAAA,YAAAq9D,CAAA,KACAA,CAAAA,GAAA,IADA,GAGAr9D,CAAAA,GAAA,aAAAA,CAJAm4D,KAQAn4D,CAAAA,GAAA,SAAAA,CAAAA,EAEA3O,CAAAA,GADA0oE,CAAAA,GACAxB,CAAAA,CAAAwB,CAAAA,CAAA5zC,OAAA4zC,CAAA,iBAAAA,EAAA,OAAAA,CAAAxB,CADAwB,GAGA,OAJA/5D,EAMA,SAAAgiC,IAAA,CAAAhiC,CAAA,MACAq9D,CAAAA,GAAA,IADA,CANAr9D,EASAm6D,CAAAA,KACAj0D,CAAAA,GAAA,IADAi0D,CAjBAhC,CADAn4D,EAsBAskD,CAAAA,GAAA,CAAA,QAAA,CAtBAtkD,EAuBAi6D,CAAAA,CAAAh8D,IAAAg8D,CAAAj6D,CAAAi6D,CAlCA93D,CAfA;AAXA,iBAEA9Q,CAAAA,IAAA,SAAAA;AAAA,WA6DA2O,CAAAA,GAAAA,CAAA,8BAAAg+C,IAAA,CAAA8a,CAAA,KAAA,CAAA94D,EAAA,CAAAA,CA7DA,MAgEAA,CAAAA,GAAA,CAAAo+D,UAAAA,CAAAp+D,CAAAA,CAAAmmB,OAAAnmB,CAAA,SAAAA,EAAA,MAAAA,CAAAo+D,CAAA,EAAAp+D,CAAA,CAAAA,EAEA,YAAA3O,CAAA,IAAA,OAAA2O,CAAAA,CAAA,CAAAA,CAAAA,CAAA9E,KAAA8E,CAAA9E,CAAA,CAAA8E,CAAA,IACA3O,CAAAA,GAAA,gBAAAA,EACA6oE,CAAAA,GAAA,OADA7oE,EAEA6U,CAAAA,GAAAlG,CAAAA,CAAA,CAAAA,CAAAA,CAAA9E,KAAA8E,CAAA,CAAAA,EAAA,CAAA,CAAAA,CAHA,IAMAkG,CAAAA,IAAAlG,CAAAA,CAAA,CAAAA,CAAAkG,IACAA,CAAAA,KAAAlG,CAAAA,CAAA,CAAAA,CAAAA,GAAA,CAAA,yBAAAg+C,IAAA,CAAA8a,CAAA,KAAA,CAAA,EAAA,CAAA,CAAA5yD,CADAA,KAEAA,CAAAA,GAAA,IAFAA,CARAlG,EAaAA,CAAAA,CAAA,CAAAA,CAAAA,GAAA,CAAA,sBAAAg+C,IAAA,CAAA8a,CAAA,KAAA,CAAA,EAAA,CAAA,CAbA94D,EAeA,UAAAA,CAAAA,CAAA,CAAAA,CAAA,IAAA,UAAAA,CAAAA,CAAA,CAAAA,CAAA,IAAAo+D,UAAAA,CAAAp+D,CAAAA,CAAA,CAAAA,CAAAo+D,CAAAA,IAAA,EAAA,IAAA,YAAA9Z,CAAA,KACAA,CAAAA,GAAA,CAAA,OAAA,CADA,CAfAtkD,EAoBAm6D,CAAAA,KAAAf,CAAAA,IAAAp5D,CAAAA,CAAA,CAAAA,CAAAm6D,CAAAA,IAIA7V,CAAAA,KAAAA,CAAAA,CAAA,CAAAA,CAAAA,GAAA,aAAAA,CAAAA,EACAtkD,CAAAA,GAAAA,CAAAA,CAAA,CAAAA,CAAAA,KAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAA,CAAAA,CAAA,IAAA,GAAA,GAAA,CAAA,GAAAA,CAAAA,GAAA,GAAAA,GAAA,CAAAA,GAAAA,CAAAA,GAAA,MAAAA,GAAA,CAAAA,GAAAA,CAAAA,GAAA,GAAAA,GAAA,CAAAA,GAAAA,CAAAA,GAAA,MAAAA,GAAA,CAAAA,GAAAA,CAAAA,GAAA,MAAAA,GAAA,CAAAA,GAAAA,CAAAA,GAAA,KAAAA,GAAA,CAAAA,GAAAA,CAAAA,GAAA,MAAAA,GAAA,CAAAA,GAAAA,CAAAA,GAAA,MAAAA,GAAA,CAAAA,GAAAA,CAAAA,GAAA,MAAAA,GAAA,EAAAA,GAAAA,CAAAA,GAAA,KAAAA,GAAA,EAAAA,GAAAA,CAAAA,GAAA,MAAAA,GAAA,EAAAA,GAAAA,CAAAA,GAAA,MAAAA,GAAA,KAAAA,GAAAA,CAAAA,GAAA,MAAAA,GAAA,EAAAA,GAAAA,CAAAA,GAAA,MAAAA,GAAA,EAAAA,GAAAA,CAAAA,GAAA,MAAAA,GAAA,EAAAA,GAAAA,CAAAA,GAAA,MAAAA,GAAA,EAAAA,GAAAA,CAAAA,GAAA,KAAAA,GAAA,EAAAA,GAAAA,CAAAA,GAAA,MAAAA,GAAA,EAAAA,GAAAA,CAAAA,GAAA,MAAAA,GAAA,KAAAA,GAAAA,CAAAA,GAAA,MAAAA,GAAA,EAAAA,GAAAA,CAAAA,GAAA,MAAAA,GAAA,EAAAA,GAAAA,CAAAA,GAAA,MAAAA,GAAA,EAAAA,GAAAA,CAAAA,GAAA,MAAAA,GAAA,EAAAA,GAAA,WAAAskD,CAAA,GAAA,IAAA,GAAA,IAAAtkD,CALAm6D,KACA7V,CAAAA,KAAAA,CAAAA,CAAA,CAAAA,CAAAA,GAAA,aAAAA,CAAAA,EACAtkD,CAAAA,GAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAA,CAAAA,CAAAA,IAAA,GAAAA,GAAA,CAAAA,GAAAA,CAAAA,GAAA,GAAAA,GAAA,CAAAA,GAAAA,CAAAA,GAAA,GAAAA,GAAA,CAAAA,GAAAA,CAAAA,GAAA,GAAAA,GAAA,CAAAA,GAAAA,CAAAA,GAAA,GAAAA,GAAA,IAAAA,GAAAA,CAAAA,GAAA,GAAAA,GAAA,CAAAA,GAAAA,CAAAA,GAAA,GAAAA,GAAA,CAAAA,GAAAA,CAAAA,GAAA,GAAAA,GAAA,CAAAA,GAAAA,CAAAA,GAAA,GAAAA,GAAA,CAAAA,GAAA,GAFAm6D,CApBAn6D,EA4BAskD,CAAAA,KAAAA,CAAAA,CAAA,CAAAA,CAAAA,IAAA,OAAAtkD,CAAAA,IAAA,YAAA,OAAAA,CAAA,GAAA,IAAA,GAAA,OAAAgiC,IAAA,CAAAhiC,CAAA,IAAA,EAAA,GAAA,GAAA,CAAAskD,CA5BAtkD,EA8BA,YAAA3O,CAAA,KAAAA,CAAA6U,CAAA7U,IAAA+lB,QAAAA,CAAAlR,CAAAkR,CAAAA,GAAA,EAAA,MACAlR,CAAAA,GAAAlG,CADA,CA9FA,GAmGA,WAAA3O,CAAA,KAAA2O,CAAAA,GAAA,eAAAg+C,IAAA,CAAAqf,CAAA,CAAA,KACAhsE,CAAAA,IAAA,GAAAA,EACA4oE,CAAAA,CAAA9c,OAAA8c,CAAA,cAAAA,CADA5oE,EAEA,UAAA2O,CAAA,IACA3O,CAAAA,IAAA,MAAAA,EACA6U,CAAAA,GAAA,IAFA,IAIA7U,CAAAA,IAAA,QANAA,EAQAgsE,CAAAA,GAAAA,CAAAA,CAAAl3C,OAAAk3C,CAAA9C,MAAAA,CAAA,OAAAv6D,CAAA,GAAA,GAAAu6D,CAAA8C,EAAA,EAAAA,CATA,IAYA,YAAAhsE,CAAA,IAAA,aAAA2sD,IAAA,CAAAsG,CAAAA,IAAAA,CAAAA,CAAA,CAAAA,CAAA,CAAA,KACA2V,CAAAA,CAAA9c,OAAA8c,CAAA,cAAAA,GACA5oE,CAAAA,GAAA,eADA4oE,EAEA/zD,CAAAA,GAAA,IAFA+zD,EAIA,WAAAj4B,IAAA,CAAAq7B,CAAA,KACAzC,CAAAA,GAAA,OAAAA,EACAyC,CAAAA,GAAA,UAFA,IAIAA,CAAAA,GAAA,IATA,CA/GA,EA4HAn3D,CAAAA,IAAA,KAAAA,CAAAA,CAAAlI,OAAAkI,CAAAlG,CAAAA,GAAA,UAAAg+C,IAAA,CAAAqf,CAAA,CAAAn3D,CAAAA,IACA4yD,CAAAA,CAAA96D,OAAA86D,CAAA,MAAA94D,CAAA,GAAA,GAAA84D,IAAA,CAAA,CADA5yD,KAEAm3D,CAAAA,GAAAn3C,CAAAA,CAAAm3C,CAAAA,CAAAl3C,OAAAk3C,CAAAr9D,CAAAq9D,EAAA,EAAAA,CAAAn3C,CAFAhgB,CA5HA,EAiIAo+C,CAAAA,IAAAA,CAAA,qBAAAtiB,IAAA,CAAA3wC,CAAA,CAAAizD,KACA,4BAAAtiB,IAAA,CAAA3wC,CAAA,KACA,YAAAA,CAAA,IAAA,OAAA2wC,IAAA,CAAAq7B,CAAA,CAAA,IAAA,aAAAr7B,IAAA,CAAAsiB,CAAAA,CAAA,CAAAA,CAAA,CADA,IAEA,yFAAAtiB,IAAA,CAAA3wC,CAAA,KAAAizD,CAAAA,CAAA,CAAAA,CAHAA,MAKAtkD,CAAAA,GAAAskD,CAAAA,CAAAA,CAAAA,CAAA/wD,MAAA+wD,GAAA,CAAAA,CALAA,KAKA2V,CAAAA,CAAAh8D,IAAAg8D,CAAAj6D,CAAAi6D,CAtIA,EAyIAA,CAAAA,CAAA1mE,MAAA0mE,KACAA,CAAAA,GAAA,CAAA,MAAAA,CAAAA,CAAA59C,IAAA49C,CAAA,IAAAA,CAAA,GAA8C,GAA9C,CADAA,CAzIA,EA6IAW,CAAAA,IAAAF,CAAAE,IAAAF,CAAAA,CAAA18D,OAAA08D,CAAAE,CAAAF,IAAA,CAAAE,IACAX,CAAAA,CAAAh8D,IAAAg8D,CAAA,QAAAW,CAAAX,CA9IA,EAiJAS,CAAAA,IACAT,CAAAA,CAAAh8D,IAAAg8D,CAAAh8D,CAAA,OAAA+jC,IAAA,CAAAi4B,CAAAA,CAAAA,CAAAA,CAAA1mE,MAAA0mE,GAAA,CAAAA,CAAA,IAAA,EAAA,GAAA,KAAAh8D,IAAAy8D,CAAAT,CAlJA,EAqJAoD,CAAAA,KACAr9D,CAAAA,GAAA,cAAAg+C,IAAA,CAAAqf,CAAA,CAAAr9D,EACAm5D,CAAAA,GAAAn5D,CAAAA,IAAA,OAAAq9D,CAAAA,CAAAhqD,MAAAgqD,CAAAA,CAAAA,CAAA9pE,MAAA8pE,GAAAr9D,CAAAA,CAAA,CAAAA,CAAAA,CAAAzM,MAAA8pE,GAAA,CAAAA,CADAr9D,EAEAq9D,CAAAA,GAAA;AACAiC,YAAAA,YAAAA,EAAA,EADA;AAEAC,YAAAA,MAAAA,EAAAv/D,CAAAA,IAAAA,CAAAm5D,CAAAn5D,GAAAq9D,CAAAA,CAAAl3C,OAAAk3C,CAAAr9D,CAAAA,CAAA,CAAAA,CAAAq9D,EAAA,EAAAA,CAAAr9D,GAAAq9D,CAFA;AAGAn3D,YAAAA,OAAAA,EAAAlG,CAAAA,GAAAA,CAAAA,CAAA,CAAAA,CAAAA,GAAA,IAHA;AAIA4D,YAAAA,QAAAA,EAAA,YAAA;AACA,kBAAAsC,CAAAA,GAAA/D,KAAA+D,OAAA;AACA,qBAAA/D,KAAAo9D,MAAAp9D,IAAA+D,CAAAA,IAAAA,CAAAizD,CAAAjzD,GAAA,MAAAA,CAAAA,GAAA,EAAA/D,KAAA,MAAAA,KAAAm9D,YAAA,GAAA,SAAA,GAAA,EAAAn9D,CAAA;AAAA;AANA,WAHAk7D,CArJA,EA8JA,CAKAr9D,CAAAA,GAAA,mCAAAg+C,IAAA,CAAAgc,CAAA,CALA,KAKAA,CAAA,YAAAh4B,IAAA,CAAAg4B,CAAA,CALA,IAMAqD,CAAAA,KACAA,CAAAA,CAAAiC,YAAAjC,GAAA,EAAAA,EACAA,CAAAA,CAAAkC,MAAAlC,GAAAA,CAAAA,CAAAkC,MAAAlC,CAAAl3C,OAAAk3C,CAAA9C,MAAAA,CAAA,OAAAv6D,CAAAu6D,CAAA8C,EAAA,EAAAA,CAFAA,CAAAA,EAKAhsE,CAAAA,KAAA,aAAA2wC,IAAA,CAAA82B,CAAA,KACAqB,CAAAA,IAAA,eAAAn4B,IAAA,CAAAg3B,CAAAA,CAAAwG,QAAAxG,IAAAA,CAAAA,CAAAllC,QAAA,CAAAqmC,IAAArmC,CAAA,kBAAyFkO,IAAzF,CAAyF82B,CAAzF,CADAznE,CAAAA,IAGA4oE,CAAAA,CAAA9c,OAAA8c,CAAA,QAAAA,CAdA,IAmBAoD,CAAAA,IAAA,QAAAr7B,IAAA,CAAAq7B,CAAAA,CAAAkC,MAAA,CAAAlC,IACA,YAAAhsE,CADAgsE,IACAe,UAAAA,CAAAl4D,CAAAk4D,CAAAA,IAAA,EADAf,KAGAA,CAAAA,CAAAiC,YAAAjC,GAAA,EAHAA,CAjLA,EAuLAvE,CAAAA,KAAAA,CAAAA,GAAA,IAAAA,CAvLA;AAiMA,cAAAhlC,CAAAA,GAAA,EAAA;AAoJA,iBA5IAA,CAAAA,CAAAmmC,WAAAnmC,GAAAglC,CAAAhlC,EAWAA,CAAAA,CAAAwwB,MAAAxwB,GAAAwwB,CAAAA,IAAAA,CAAAA,CAAA,CAAAA,CAXAxwB,EAwBAA,CAAAA,CAAA8mC,YAAA9mC,GAAA8mC,CAxBA9mC,EAwCAA,CAAAA,CAAAziC,IAAAyiC,GAAAziC,CAxCAyiC,EAgDAA,CAAAA,CAAAomC,UAAApmC,GAAAomC,CAhDApmC,EA6DAA,CAAAA,CAAA4mC,OAAA5mC,GAAA4mC,CA7DA5mC,EAqEAA,CAAAA,CAAAglC,EAAAhlC,GAAAglC,CArEAhlC,EA6EAA,CAAAA,CAAA5tB,OAAA4tB,GAAAziC,CAAAA,IAAA6U,CA7EA4tB,EAqFAA,CAAAA,CAAAupC,EAAAvpC,GAAAupC,CAAAA,IAAA;AAQAiC,YAAAA,YAAAA,EAAA,IARA;AAqBAC,YAAAA,MAAAA,EAAA,IArBA;AA6BAr5D,YAAAA,OAAAA,EAAA,IA7BA;AAqCAtC,YAAAA,QAAAA,EAAA,YAAA;AAA8B,qBAAA,MAAA;AAAA;AArC9B,WArFAkwB,EA6HAA,CAAAA,CAAA+kC,KAAA/kC,GAAA+kC,CA7HA/kC,EA8HAA,CAAAA,CAAAlwB,QAAAkwB,GAljBA,YAAA;AACA,mBAAA3xB,KAAA83D,WAAA93D,IAAA,EAAA;AAAA,WAmbA2xB,EAgIAA,CAAAA,CAAA5tB,OAAA4tB,IACAmmC,CAAAA,CAAA9c,OAAA8c,CAAA/zD,CAAA+zD,CAjIAnmC,EAmIAA,CAAAA,CAAAziC,IAAAyiC,IACAmmC,CAAAA,CAAA9c,OAAA8c,CAAA5oE,CAAA4oE,CApIAnmC,EAsIAupC,CAAAA,IAAAhsE,CAAAgsE,KAAAA,CAAAA,IAAA3rD,MAAAA,CAAA2rD,CAAA3rD,CAAAA,CAAA5S,KAAA4S,CAAA,GAAAA,EAAA,CAAAA,CAAA2rD,IAAAA,CAAAA,IAAAhsE,CAAAA,CAAAyN,KAAAzN,CAAA,GAAAA,EAAA,CAAAA,CAAAgsE,IAAA,CAAA3C,CAAA2C,KACApD,CAAAA,CAAAh8D,IAAAg8D,CAAAS,CAAAA,GAAA,MAAA2C,CAAA,GAAA,GAAA3C,GAAA,QAAA2C,CAAApD,CAvIAnmC,EAyIAmmC,CAAAA,CAAA1mE,MAAA0mE,KACAnmC,CAAAA,CAAAmmC,WAAAnmC,GAAAmmC,CAAAA,CAAA59C,IAAA49C,CAAA,GAAAA,CADAA,CAzIAnmC,EA4IAA,CAAA;AAMA+kC,SA36BA,EA26BA;;AAOA1oE,QAAAA,CAAAA,CAAA2jC,QAAA3jC,GAAA2jC,CAAA3jC,EAAA2jC,KAKKz/B,CALLy/B,MAGI6jC,CAAAA,GAAA,YAAA;AACJ,iBAAA7jC,CAAA;AAAAA,SADI,CAEC7iC,IAFD,CAECZ,CAFD,EAECQ,CAFD,EAECR,CAFD,EAECC,CAFD,CAHJwjC,MAKKxjC,CAAAA,CAAAD,OAAAC,GAAAqnE,CALL7jC,CAAA3jC;AAKKwnE,SAaJ1mE,KAAAkR;AAAAA,KD5qCYqgD,EC4qCZrgD,ID5qCYqgD,CC4qCZrgD,ID5qCYqgD,EC4qCZrgD,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CD5qCYqgD,EC4qCZrgD,CAAAA,CAAAA,CAAAA,CD5qCYqgD;AC4qCZrgD,GpJ9mCD,EoJ8mCCA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AChsCD7R,IAAAA,CAAAA,CAAAD,OAAAC,GAAA,UAAAA,CAAA,EAAAA;AAoBA,aAnBAA,CAAAA,CAAAmvE,eAAAnvE,KACAA,CAAAA,CAAAovE,SAAApvE,GAAA,YAAA,CAAA,CAAAA,EACAA,CAAAA,CAAAiuD,KAAAjuD,GAAA,EADAA,EAGAA,CAAAA,CAAAqvE,QAAArvE,KAAAA,CAAAA,CAAAqvE,QAAArvE,GAAA,EAAAA,CAHAA,EAIAkB,MAAAA,CAAAC,cAAAD,CAAAlB,CAAAkB,EAAA,QAAAA,EAAA;AACAE,QAAAA,UAAAA,EAAAA,CAAA,CADA;AAEAC,QAAAA,GAAAA,EAAA,YAAA;AACA,iBAAArB,CAAAA,CAAAS,CAAA;AAAAA;AAHA,OAAAS,CAJAlB,EAUAkB,MAAAA,CAAAC,cAAAD,CAAAlB,CAAAkB,EAAA,IAAAA,EAAA;AACAE,QAAAA,UAAAA,EAAAA,CAAA,CADA;AAEAC,QAAAA,GAAAA,EAAA,YAAA;AACA,iBAAArB,CAAAA,CAAAI,CAAA;AAAAA;AAHA,OAAAc,CAVAlB,EAgBAA,CAAAA,CAAAmvE,eAAAnvE,GAAA,CAjBAA,GAmBAA,CAAA;AAAAA,KApBAA;AAoBAA,GrJ8DA,EqJ9DAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,QAAAA,IAAAA,UAAAA,CAAAA,EAAAA;AAAAA,UAAAA,CAAAA,GAAAA,cAAAA,OAAAA,MAAAA,IAAAA,CAAAA,CAAAA,MAAAA,CAAAA,QAAAA,CAAAA;AAAAA,UAAAA,CAAAA,GAAAA,CAAAA;AAAAA,aAAAA,CAAAA,GAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,GAAAA;AAAAA,QAAAA,IAAAA,EAAAA,YAAAA;AAAAA,iBAAAA,CAAAA,IAAAA,CAAAA,IAAAA,CAAAA,CAAAA,MAAAA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA;AAAAA,YAAAA,KAAAA,EAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA;AAAAA,YAAAA,IAAAA,EAAAA,CAAAA;AAAAA,WAAAA;AAAAA;AAAAA,OAAAA;AAAAA,KAAAA;;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;ACjBA,QAAAw6D,CAAAA,GAAAj6D,CAAAA,CAAA,CAAAA,CAAA;AAAA,QACA+uE,CAAAA,GAAA/uE,CAAAA,CAAA,GAAAA,CADA;AAAA,QAEAgvE,CAAAA,GAAAhvE,CAAAA,CAAA,GAAAA,CAFA;AAAA,QAGA20D,CAAAA,GAAA30D,CAAAA,CAAA,CAAAA,CAHA;AAAA,QAeAukE,CAAAA,GAAA,YAAA;AAKE,eAAAA,CAAA,CAAY/mD,CAAZ,EAAqCC,CAArC,EAAqCA;AAArC,YAAAzD,CAAAA,GAAA1I,IAAA;AAHSA,aAAA29D,IAAA39D,GAAkC,EAAlCA,EACAA,KAAA49D,6BAAA59D,GAA6E,EAD7EA,EAIPA,KAAKqM,OAALrM,GAAe,IAAI2oD,CAAAA,CAAA18C,WAAJ,CAAgBC,CAAhB,EAA2BC,CAA3B,CAJRnM,EAOP3Q,MAAAA,CAAO0e,IAAP1e,CAAYquE,CAAAA,CAAAG,YAAZxuE,EAA0BiO,OAA1BjO,CAAkC,UAACH,CAAD,EAACA;AACjC,cAAM4uE,CAAAA,GAAM,IAAIJ,CAAAA,CAAAG,YAAAH,CAAaxuE,CAAbwuE,CAAJ,CAAuBh1D,CAAAA,CAAK2D,OAA5B,CAAZ;AACA3D,UAAAA,CAAAA,CAAKi1D,IAALj1D,CAAUxZ,CAAVwZ,IAAkBo1D,CAAlBp1D;AAAkBo1D,SAFpBzuE,CAPO2Q;AAaP,YAAMvI,CAAAA,GAAMuI,KAAK49D,6BAAjB;;AACA,aAAK,IAAMG,CAAX,IAAsB/9D,KAAK29D,IAA3B,EAAiC;AAC/B,cACMK,CAAAA,GADMh+D,KAAK29D,IAAL39D,CAAU+9D,CAAV/9D,EACci+D,YADdj+D,EAAZ;;AAEA,eAAK,IAAMk+D,CAAX,IAAsBF,CAAtB,EAAqC;AACnC,gBAAM9tE,CAAAA,GAAM6tE,CAAAA,GAAU,GAAVA,GAAgBG,CAA5B;AAAA,gBACIC,CAAAA,GAAAA,KAAW,CADf;AAEI1mE,YAAAA,CAAAA,CAAIvH,CAAJuH,CAAAA,GAAIvH,CACNiuE,CAAAA,GAAc1mE,CAAAA,CAAIvH,CAAJuH,CADRvH,EAEMqc,WAFNrc,GAEoB8tE,CAAAA,CAAcE,CAAdF,CAAAA,CAAuBzxD,WAF/C9U,IAIF0mE,CAAAA,GAAc,IAAIxV,CAAAA,CAAAl8C,kBAAJ,CAAuBvc,CAAvB,EAA4B8tE,CAAAA,CAAcE,CAAdF,CAAAA,CAAuBzxD,WAAnD,CAAd4xD,EACA1mE,CAAAA,CAAIvH,CAAJuH,CAAAA,GAAW0mE,CALT1mE;AAOJ,gBAAM+U,CAAAA,GAAewxD,CAAAA,CAAcE,CAAdF,CAAAA,CAAuBxxD,YAA5C;AACA,gBAAIA,CAAJ,EACE,KAAK,IAAIje,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAIie,CAAAA,CAAapb,MAAjC,EAAiCA,EAAU7C,CAA3C,EACE,IAAKkJ,CAAAA,CAAI+U,CAAAA,CAAaje,CAAbie,CAAJ/U,CAAL,EAKE0mE,CAAAA,CAAYzxD,aAAZyxD,CAA0B1mE,CAAAA,CAAI+U,CAAAA,CAAaje,CAAbie,CAAJ/U,CAA1B0mE,EALF,KAA2B;AACzB,kBAAMxxD,CAAAA,GAAO,IAAIg8C,CAAAA,CAAAl8C,kBAAJ,CAAuBD,CAAAA,CAAaje,CAAbie,CAAvB,CAAb;AACA/U,cAAAA,CAAAA,CAAI+U,CAAAA,CAAaje,CAAbie,CAAJ/U,CAAAA,GAAuBkV,CAAvBlV,EACA0mE,CAAAA,CAAYzxD,aAAZyxD,CAA0BxxD,CAA1BwxD,CADA1mE;AAC0BkV;AAAAA;AAAAA;AA2ExC;;AAAA,aAjEEsmD,CAAAA,CAAA1iE,SAAA0iE,CAAAE,UAAAF,GAAA,YAAA;AACE,YAAM9mD,CAAAA,GAAcnM,KAAKqM,OAALrM,CAAamM,WAAjC;AAAA,YACI9W,CAAAA,GAAS8W,CAAAA,CAAYs3C,YADzB;AAYA,eARKzjD,KAAKqM,OAALrM,CAAamM,WAAbnM,CAAyB0jD,OAAzB1jD,KACH3K,CAAAA,GAAYA,CAAAA,GAAM,UAANA,GACVguD,CAAAA,CAAA1+C,wBAAA0+C,CAAyBrjD,KAAKqM,OAALrM,CAAakM,SAAblM,CAAuB+D,OAAhDs/C,EAAyDl3C,CAAAA,CAAYm3C,YAAZn3C,CAAyBpX,KAAzBoX,CAA+B/a,MAAxFiyD,CAFCrjD,GAKL3K,CAAAA,GAASooE,CAAAA,CAAAW,cAAAX,CAAepoE,CAAfooE,CALJz9D,EAQKqjD,CAAAA,CAAA3+C,qBAAA2+C,CAAsBrjD,KAAKqM,OAALrM,CAAakM,SAAblM,CAAuB+D,OAA7Cs/C,IAAqD,QAArDA,GACRrjD,KAAKq+D,WAALr+D,CAAiBmM,CAAAA,CAAYq3C,QAA7BxjD,EAAuCmM,CAAAA,CAAYu9C,SAAnD1pD,CADQqjD,GACqD,QADrDA,GAERrjD,KAAKs+D,UAALt+D,CAAgB3K,CAAhB2K,CAFQqjD,GAEe,QAFfA,GAGRhuD,CAHF;AAGEA,OAhBJ49D,EAmBUA,CAAAA,CAAA1iE,SAAA0iE,CAAAqL,UAAArL,GAAV,UAAqBsL,CAArB,EAAqBA;AACnB,YAAMC,CAAAA,GAAmBx+D,KAAKy+D,iCAALz+D,CAAuCu+D,CAAvCv+D,CAAzB;AAEA,YAAgC,MAA5Bw+D,CAAAA,CAAiBptE,MAArB,EACE,OAAO,EAAP;;AAIF,aADA,IAAIstE,CAAAA,GAAW,EAAf,EACSnwE,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAIiwE,CAAAA,CAAiBptE,MAArC,EAAqCA,EAAU7C,CAA/C,EAAkD;AAChD,cAAA,CAAIiwE,CAAAA,CAAiBjwE,CAAjBiwE,CAAAA,CAAoBjyD,WAAxB,EAGE,MAAM,IAAI9W,KAAJ,CAAU,gDAA8C+oE,CAAAA,CAAiBjwE,CAAjBiwE,CAAAA,CAAoBtvE,IAA5E,CAAN;AAFAwvE,UAAAA,CAAAA,IAAYF,CAAAA,CAAiBjwE,CAAjBiwE,CAAAA,CAAoBjyD,WAApBiyD,GAAkC,IAA9CE;AAMJ;;AAAA,eAAOA,CAAP;AAAOA,OAnCTzL,EAqCQA,CAAAA,CAAA1iE,SAAA0iE,CAAAwL,iCAAAxL,GAAR,UAA0CsL,CAA1C,EAA0CA;AAA1C,YAAA71D,CAAAA,GAAA1I,IAAA;AAAA,YACQ8M,CAAAA,GAA8B,EADtC;AAUE,eAPAzd,MAAAA,CAAO0e,IAAP1e,CAAY2Q,KAAK49D,6BAAjBvuE,EAAgDiO,OAAhDjO,CAAwD,UAAAsvE,CAAA,EAAAA;AACtD,cAAMT,CAAAA,GAAUS,CAAAA,CAAgBhiE,KAAhBgiE,CAAsB,GAAtBA,EAA2B,CAA3BA,CAAhB;AAA2C,WACV,CADU,KACvCJ,CAAAA,CAAO1iE,OAAP0iE,CAAeL,CAAfK,CADuC,IAEzCzxD,CAAAA,CAAMhR,IAANgR,CAAWpE,CAAAA,CAAKk1D,6BAALl1D,CAAmCi2D,CAAnCj2D,CAAXoE,CAFyC;AAEK6xD,SAHlDtvE,GAOOs5D,CAAAA,CAAA/7C,2BAAA+7C,CAA4B97C,kBAA5B87C,CAA+C77C,CAA/C67C,CAAP;AAAsD77C,OA/CxDmmD,EAkDUA,CAAAA,CAAA1iE,SAAA0iE,CAAAoL,WAAApL,GAAV,UAAsBzP,CAAtB,EAA2CkG,CAA3C,EAA2CA;AAAAA,YAAAA,CAAAA;AAAAA,YAAAA,CAAAA;AAAAA,YAAAA,CAAAA;AAAAA,YAAAA,CAAAA;AAAAA,YACnCkV,CAAAA,GAAyB,EADUlV;AAEzC,YAAIlG,CAAJ,EAAIA,IAAAA;AACF,eAAsB,IAAAwR,CAAAA,GAAAp6D,CAAAA,CAAA4oD,CAAA5oD,CAAA,EAAQq6D,CAAAA,GAAAD,CAAAA,CAAAl6D,IAAAk6D,EAA9B,EAA8Bl6D,CAAAm6D,CAAAA,CAAAl6D,IAA9B,EAA8Bk6D,CAAAA,GAAAD,CAAAA,CAAAl6D,IAAAk6D,EAA9B,EAAgC;AAA3B,gBAAME,CAAAA,GAAOD,CAAAA,CAAArlE,KAAb;AACHgvE,YAAAA,CAAAA,CAAa9iE,IAAb8iE,CAAkB,uBAAqB1J,CAArB,GAA4B,GAA9C0J;AAA8C;AAAA,SAF9Cpb,CAE8C,OAAA,CAAA,EAAA;AAAA,UAAA,CAAA,GAAA;AAAA,YAAA,KAAA,EAAA;AAAA,WAAA;AAAA,SAF9CA,SAE8C;AAAA,cAAA;AAAA,YAAA,CAAA,IAAA,CAAA,CAAA,CAAA,IAAA,KAAA,CAAA,GAAA,CAAA,CAAA,MAAA,KAAA,CAAA,CAAA,IAAA,CAAA,CAAA,CAAA;AAAA,WAAA,SAAA;AAAA,gBAAA,CAAA,EAAA,MAAA,CAAA,CAAA,KAAA;AAAA;AAGlD;AAAA,YAAIkG,CAAJ,EAAIA,IAAAA;AACF,eAAuB,IAAA0L,CAAAA,GAAAx6D,CAAAA,CAAA8uD,CAAA9uD,CAAA,EAASy6D,CAAAA,GAAAD,CAAAA,CAAAt6D,IAAAs6D,EAAhC,EAAgCt6D,CAAAu6D,CAAAA,CAAAt6D,IAAhC,EAAgCs6D,CAAAA,GAAAD,CAAAA,CAAAt6D,IAAAs6D,EAAhC,EAAkC;AAA7B,gBAAME,CAAAA,GAAQD,CAAAA,CAAAzlE,KAAd;AACHgvE,YAAAA,CAAAA,CAAa9iE,IAAb8iE,CACI,aAAWtJ,CAAAA,CAASphE,IAApB,GAAwB,GAAxB,GAA4BohE,CAAAA,CAASpmE,IAArC,IAA4ComE,CAAAA,CAAS3L,WAAT2L,GAAuB,MAAIA,CAAAA,CAAS3L,WAAb,GAAwB,GAA/C2L,GAAqD,EAAjG,IAAmG,GADvGsJ;AACuG;AAAA,SAHvGlV,CAGuG,OAAA,CAAA,EAAA;AAAA,UAAA,CAAA,GAAA;AAAA,YAAA,KAAA,EAAA;AAAA,WAAA;AAAA,SAHvGA,SAGuG;AAAA,cAAA;AAAA,YAAA,CAAA,IAAA,CAAA,CAAA,CAAA,IAAA,KAAA,CAAA,GAAA,CAAA,CAAA,MAAA,KAAA,CAAA,CAAA,IAAA,CAAA,CAAA,CAAA;AAAA,WAAA,SAAA;AAAA,gBAAA,CAAA,EAAA,MAAA,CAAA,CAAA,KAAA;AAAA;AAG3G;AAAA,eAAOkV,CAAAA,CAAa1kD,IAAb0kD,CAAkB,IAAlBA,CAAP;AAAyB,OA/D3B3L,EAiEFA,CAAA;AA9GA,KAAA,EAfA;;AAea/kE,IAAAA,CAAAA,CAAA+kE,gBAAA/kE,GAAA+kE,CAAA/kE;AAAA+kE,GtJgEb,EsJhEaA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;ACfb,QAAM4L,CAAAA,GACF,oFADJ;AAAA,QAEMC,CAAAA,GAAkB,4DAFxB;;AAMA5wE,IAAAA,CAAAA,CAAAkwE,cAAAlwE,GAAA,UAA+BqwE,CAA/B,EAA+BA;AAG7B,WAFA,IACIz+C,CADJ,EAAMi/C,CAAAA,GAAiG,EAEvG,EAAwD,UAAhDj/C,CAAAA,GAAQ++C,CAAAA,CAAsBhjB,IAAtBgjB,CAA2BN,CAA3BM,CAAwC,CAAxD,GAA8D;AAC5D,YAAMrzD,CAAAA,GAASsU,CAAAA,CAAM,CAANA,CAAAA,CACKnjB,KADLmjB,CACW,GADXA,EAEKroB,GAFLqoB,CAES,UAAApvB,CAAA,EAAAA;AACH,cAAMsuE,CAAAA,GAAStuE,CAAAA,CAAEqzB,IAAFrzB,GAASiM,KAATjM,CAAe,GAAfA,CAAf;AACA,iBAAIsuE,CAAAA,IAA4B,MAAlBA,CAAAA,CAAO5tE,MAAjB4tE,GACK;AAAC9qE,YAAAA,IAAAA,EAAM8qE,CAAAA,CAAO,CAAPA,CAAP;AAAkB9vE,YAAAA,IAAAA,EAAM8vE,CAAAA,CAAO,CAAPA;AAAxB,WADLA,GAGG,IAHP;AAGO,SAPbl/C,EASKzhB,MATLyhB,CASY,UAAA3lB,CAAA,EAAAA;AAAK,iBAAM,SAANA,CAAA;AAAAA,SATjB2lB,CAAf;AAUAi/C,QAAAA,CAAAA,CAAWj/C,CAAAA,CAAM,CAANA,CAAXi/C,CAAAA,GAAuB;AAACvzD,UAAAA,MAAAA,EAAMA,CAAP;AAASy9C,UAAAA,IAAAA,EAAMnpC,CAAAA,CAAM,CAANA;AAAf,SAAvBi/C;AAEF;;AAAA,WAAK,IAAMxK,CAAX,IAAmBwK,CAAnB,EAGE,KAFA,IAAME,CAAAA,GAAcH,CAAAA,CAAgB96C,OAAhB86C,CAAwB,UAAxBA,EAAoCvK,CAApCuK,CAApB,EACMI,CAAAA,GAAQ,IAAI9G,MAAJ,CAAW6G,CAAX,EAAwB,IAAxB,CADd,EACsC,CAAA,GAAA,YAAA;AAEpC,YAAM/qE,CAAAA,GAAO4rB,CAAAA,CAAM,CAANA,CAAb;AAAA,YACMw1C,CAAAA,GAAWx1C,CAAAA,CAAM,CAANA,CADjB;AAAA,YAEMtU,CAAAA,GAASsU,CAAAA,CAAM,CAANA,CAAAA,CAASnjB,KAATmjB,CAAe,GAAfA,CAFf;AAAA,YAGMq/C,CAAAA,GAAW,CAAA,GAAYjrE,CAAAA,GAAI,GAAJA,GAAQohE,CAARphE,GAAgB,GAA5B,GAAkC,EAHnD;AAAA,YAIIkrE,CAAAA,GAAkBL,CAAAA,CAAWxK,CAAXwK,CAAAA,CAAiB9V,IAJvC;AAAA,YAKIoW,CAAAA,GAAiB,EALrB;AAMAN,QAAAA,CAAAA,CAAWxK,CAAXwK,CAAAA,CAAiBvzD,MAAjBuzD,CAAwBzhE,OAAxByhE,CAAgC,UAAC5kE,CAAD,EAAI5L,CAAJ,EAAIA;AAC9B4L,UAAAA,CAAAA,KACFklE,CAAAA,IAAqBllE,CAAAA,CAAEjG,IAAFiG,GAAM,GAANA,GAAUA,CAAAA,CAAEjL,IAAZiL,GAAgB,KAAhBA,GAAsBqR,CAAAA,CAAOjd,CAAPid,CAAtBrR,GAA+B,KADlDA,CAAAA;AACkD,SAFxD4kE;AAOA,YAAMzmB,CAAAA,GAAc,aAClB6mB,CADkB,GACV,qBADU,IADpBC,CAAAA,GAAAA,CADAA,CAAAA,GAAaC,CAAAA,GAAc,KAAdA,GAAoBD,CACjCA,EAAkBp7C,OAAlBo7C,CAA0B,QAA1BA,EAAuC9J,CAAAA,GAAQ,KAA/C8J,CACoB,IAGT,mBAHX;AAMAb,QAAAA,CAAAA,GAASA,CAAAA,CAAOv6C,OAAPu6C,CAAez+C,CAAAA,CAAM,CAANA,CAAfy+C,EAAyBjmB,CAAzBimB,CAATA;AAAkCjmB,OApBpC,EAAwC,UAAhCx4B,CAAAA,GAAQo/C,CAAAA,CAAMrjB,IAANqjB,CAAWX,CAAXW,CAAwB,CAAxC,GAA2BX,CAAAA;;AAwB7B,aADAA,CAAAA,GAASA,CAAAA,CAAOv6C,OAAPu6C,CAAeM,CAAfN,EAAsC,EAAtCA,CACT;AAD+C,KA1CjDrwE;AA0CiD,GvJ+BjD,EuJ/BiD,UAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA;AAAA;;AAAA,IAAA,MAAA,CAAA,cAAA,CAAA,CAAA,EAAA,YAAA,EAAA;AAAA,MAAA,KAAA,EAAA,CAAA;AAAA,KAAA;AChDjD,QAAAoxE,CAAAA,GAAA5wE,CAAAA,CAAA,GAAAA,CAAA;AAAA,QAEA6wE,CAAAA,GAAA7wE,CAAAA,CAAA,GAAAA,CAFA;AAAA,QAGA8wE,CAAAA,GAAA9wE,CAAAA,CAAA,GAAAA,CAHA;AAAA,QAIA+wE,CAAAA,GAAA/wE,CAAAA,CAAA,GAAAA,CAJA;AAAA,QAKAgxE,CAAAA,GAAAhxE,CAAAA,CAAA,GAAAA,CALA;AAOaR,IAAAA,CAAAA,CAAA2vE,YAAA3vE,GAAwE;AACnF8jB,MAAAA,QAAAA,EAAYutD,CAAAA,CAAAI,eADuE;AAEnFC,MAAAA,SAAAA,EAAaJ,CAAAA,CAAAK,gBAFsE;AAGnFC,MAAAA,GAAAA,EAAOJ,CAAAA,CAAAK,UAH4E;AAInFC,MAAAA,UAAAA,EAAcP,CAAAA,CAAAQ,iBAJqE;AAKnFC,MAAAA,WAAAA,EAAeZ,CAAAA,CAAAa;AALoE,KAAxEjyE;AAKIiyE,GxJmEjB,EwJnEiBA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,QAAAA,CAAAA;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,SAAAA,KAAAA,CAAAA,GAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,CAAAA,CAAAA,GAAAA,MAAAA,CAAAA,cAAAA,IAAAA;AAAAA,QAAAA,SAAAA,EAAAA;AAAAA,mBAAAA,KAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,QAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA;AAAAA,OAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,IAAAA,CAAAA,IAAAA,CAAAA,EAAAA,CAAAA,CAAAA,cAAAA,CAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,OAAAA,EAAAA,CAAAA,EAAAA,CAAAA,CAAAA;AAAAA,KAAAA,EAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,eAAAA,CAAAA,GAAAA;AAAAA,aAAAA,WAAAA,GAAAA,CAAAA;AAAAA;;AAAAA,MAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,SAAAA,GAAAA,SAAAA,CAAAA,GAAAA,MAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA,CAAAA,SAAAA,EAAAA,IAAAA,CAAAA,EAAAA,CAAAA;AAAAA,KAAAA,CAAAA;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,QAAAA,IAAAA,YAAAA;AAAAA,aAAAA,CAAAA,CAAAA,GAAAA,MAAAA,CAAAA,MAAAA,IAAAA,UAAAA,CAAAA,EAAAA;AAAAA,aAAAA,IAAAA,CAAAA,EAAAA,CAAAA,GAAAA,CAAAA,EAAAA,CAAAA,GAAAA,SAAAA,CAAAA,MAAAA,EAAAA,CAAAA,GAAAA,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,KAAAA,IAAAA,CAAAA,IAAAA,CAAAA,GAAAA,SAAAA,CAAAA,CAAAA,CAAAA,EAAAA,MAAAA,CAAAA,SAAAA,CAAAA,cAAAA,CAAAA,IAAAA,CAAAA,CAAAA,EAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;;AAAAA,eAAAA,CAAAA;AAAAA,OAAAA,EAAAA,KAAAA,CAAAA,IAAAA,EAAAA,SAAAA,CAAAA;AAAAA,KAAAA;;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;ACZjB,QAAAxX,CAAAA,GAAAj6D,CAAAA,CAAA,CAAAA,CAAA;AAAA,QACA20D,CAAAA,GAAA30D,CAAAA,CAAA,CAAAA,CADA;AAAA,QAOAyxE,CAAAA,GAAA,UAAAj1D,CAAA,EAAAA;AAGE,eAAAi1D,CAAA,CAAY9zD,CAAZ,EAAYA;AAAAA,eACVnB,CAAAA,CAAApc,IAAAoc,CAAAlL,IAAAkL,EAAMmB,CAANnB,KAAclL,IADJqM;AA2Hd;;AAAA,aA9HmClB,CAAAA,CAAAg1D,CAAAh1D,EAAAD,CAAAC,CAAAA,EAMjCg1D,CAAAA,CAAA5vE,SAAA4vE,CAAAlC,YAAAkC,GAAA,YAAA;AACE,eAAAxd,CAAAA,CAAA,EAAAA,EAAW3iD,KAAKogE,cAALpgE,EAAX2iD,EAAqC3iD,KAAKqgE,cAALrgE,EAArC2iD,EAA+D3iD,KAAKsgE,KAALtgE,EAA/D2iD,EAAgF3iD,KAAKugE,SAALvgE,EAAhF2iD,CAAA;AAAqF4d,OAPtDp1D,EASjCg1D,CAAAA,CAAA5vE,SAAA4vE,CAAAK,cAAAL,GAAA,YAAA;AACE,eAAO,EAAP;AAAO,OAVwBh1D,EAgBvBg1D,CAAAA,CAAA5vE,SAAA4vE,CAAAC,cAAAD,GAAV,YAAA;AAEE,eAAO;AACLC,UAAAA,cAAAA,EAAgB,IAAIzX,CAAAA,CAAAr8C,cAAJ,CAAmB,yPAAnB;AADX,SAAP;AACqC,OAnBNnB,EAiCvBg1D,CAAAA,CAAA5vE,SAAA4vE,CAAAE,cAAAF,GAAV,YAAA;AAEE,eAAO;AACLE,UAAAA,cAAAA,EAAgB,IAAI1X,CAAAA,CAAAr8C,cAAJ,CAAmB,mPAAnB;AADX,SAAP;AACqC,OApCNnB,EAoDvBg1D,CAAAA,CAAA5vE,SAAA4vE,CAAAG,KAAAH,GAAV,YAAA;AAQE,aAPA,IAAM/7D,CAAAA,GAASpE,KAAKqM,OAALrM,CAAamM,WAAbnM,CAAyBsjD,YAAxC,EACM1qD,CAAAA,GAAOwL,CAAAA,CAAOrP,KAAPqP,CAAahT,MAD1B,EAEMyH,CAAAA,GAAUuL,CAAAA,CAAOvL,OAFvB,EAGM4nE,CAAAA,GAASr8D,CAAAA,CAAOsU,KAHtB,EAIMgoD,CAAAA,GAASt8D,CAAAA,CAAOqU,MAJtB,EAMMkoD,CAAAA,GAAe,EANrB,EAOSpyE,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAIqK,CAAAA,GAAO,CAA3B,EAA2B,EAAKrK,CAAhC,EACEoyE,CAAAA,CAAa7kE,IAAb6kE,CAAkB,iBACZpyE,CADY,GACX,eADW,GACKsK,CAAAA,CAAQtK,CAARsK,CADL,GACe,GADjC8nE,GAEAA,CAAAA,CAAa7kE,IAAb6kE,CAAkB,2BACFpyE,CADE,GACD,MADC,GACMsK,CAAAA,CAAQtK,CAARsK,CADN,GACgB,GADlC8nE,CAFAA;;AAKFA,QAAAA,CAAAA,CAAa7kE,IAAb6kE,CAAkB,kBACV/nE,CAAAA,GAAO,CADG,IACF,aADhB+nE;AAEA,YAAM1X,CAAAA,GAAO,kDAC4BrwD,CAD5B,GACgC,uDADhC,GAEgC6nE,CAFhC,GAEsC,IAFtC,GAE2CC,CAF3C,GAEiD,cAFjD,GAGPC,CAAAA,CAAazmD,IAAbymD,CAAkB,EAAlBA,CAHO,GAGc,oDAHd,GAKwB/nE,CALxB,GAK4B,gBAL5B,GAMP+nE,CAAAA,CAAazmD,IAAbymD,CAAkB,EAAlBA,CANO,GAMc,iBAN3B;AASA,eAAO;AAACL,UAAAA,KAAAA,EAAO,IAAI3X,CAAAA,CAAAr8C,cAAJ,CAAmB28C,CAAnB,EAAyB,CAAC,4BAAD,CAAzB;AAAR,SAAP;AAAyC,OA7EV99C,EAqFvBg1D,CAAAA,CAAA5vE,SAAA4vE,CAAAI,SAAAJ,GAAV,YAAA;AAAA,YAAAz3D,CAAAA,GAAA1I,IAAA;AAAA,YACQmM,CAAAA,GAAcnM,KAAKqM,OAALrM,CAAamM,WADnC;AAAA,YAEQe,CAAAA,GAA2C,EAFnD;AAgBE,eAbAlN,KAAKqM,OAALrM,CAAamM,WAAbnM,CAAyBwjD,QAAzBxjD,CAAkC1C,OAAlC0C,CAA0C,UAAC9Q,CAAD,EAAOX,CAAP,EAAOA;AAC/C,cAAM4zD,CAAAA,GAASh2C,CAAAA,CAAYo3C,YAAZp3C,CAAyB5d,CAAzB4d,CAAf;AAAA,cAEMvT,CAAAA,GADQupD,CAAAA,CAAOptD,KAAPotD,CACK/wD,MAFnB;AAAA,cAGIwvE,CAAAA,GAAW,MAAI1xE,CAHnB;AAIAge,UAAAA,CAAAA,CAAO0zD,CAAP1zD,CAAAA,GAAmB,IAAIy7C,CAAAA,CAAAr8C,cAAJ,CACf5D,CAAAA,CAAKm4D,kBAALn4D,CAAwBxZ,CAAxBwZ,EAA8B9P,CAA9B8P,EAAoCy5C,CAAAA,CAAOzpC,KAA3ChQ,EAAkDy5C,CAAAA,CAAO1pC,MAAzD/P,EAAyD+P,CAAQ,CAAjE/P,CADe,EAEf,CAAC,+BAA6Bk4D,CAA9B,EAA0C,4BAA1C,EAAwE,2BAAxE,CAFe,CAAnB1zD,EAIAA,CAAAA,CADA0zD,CAAAA,IAAsB,IACtB1zD,CAAAA,GAAmB,IAAIy7C,CAAAA,CAAAr8C,cAAJ,CACf5D,CAAAA,CAAKm4D,kBAALn4D,CAAwBxZ,CAAxBwZ,EAA8B9P,CAA9B8P,EAAoCy5C,CAAAA,CAAOzpC,KAA3ChQ,EAAkDy5C,CAAAA,CAAO1pC,MAAzD/P,EAAyD+P,CAAQ,CAAjE/P,CADe,EAEf,CAAC,+BAA6Bk4D,CAA9B,EAA0C,4BAA1C,EAAwE,2BAAxE,CAFe,CAJnB1zD;AAM4E,SAX9ElN,GAaOkN,CAAP;AAAOA,OArGwB/B,EA8GvBg1D,CAAAA,CAAA5vE,SAAA4vE,CAAAU,kBAAAV,GAAV,UAA6BW,CAA7B,EAA8CloE,CAA9C,EAA4D8f,CAA5D,EAA2ED,CAA3E,EAA2F3f,CAA3F,EAA2FA;AAEzF,YAAI5J,CAAAA,GAAO,MAAI4xE,CAAf;AAKA,eAJIhoE,CAAAA,KACF5J,CAAAA,IAAc,IADZ4J,CAAAA,EAIG,qBACK5J,CADL,GACS,SADT,GACmB0J,CADnB,GACuB,8CADvB,GAE6B1J,CAF7B,GAEiC,uDAFjC,GAGsCwpB,CAHtC,GAG2C,IAH3C,GAGgDD,CAHhD,GAGsD,8CAHtD,GADM4qC,CAAAA,CAAA9+C,OAAA8+C,CAAQrjD,KAAKqM,OAALrM,CAAakM,SAAblM,CAAuB+D,OAA/Bs/C,EAK8Bl/C,SAJpC,GAI6C,GAJ7C,GAIiD28D,CAJjD,GAIwD,2DAJ/D;AAI+D,OAzHhC31D,EA8HnCg1D,CAAA;AA9HA,KAAA,CAAmCxX,CAAAA,CAAAv8C,OAAnC,CAPA;;AAOale,IAAAA,CAAAA,CAAAiyE,aAAAjyE,GAAAiyE,CAAAjyE;AAAAiyE,GzJwEb,EyJxEaA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,QAAAA,CAAAA;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,SAAAA,KAAAA,CAAAA,GAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,CAAAA,CAAAA,GAAAA,MAAAA,CAAAA,cAAAA,IAAAA;AAAAA,QAAAA,SAAAA,EAAAA;AAAAA,mBAAAA,KAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,QAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA;AAAAA,OAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,IAAAA,CAAAA,IAAAA,CAAAA,EAAAA,CAAAA,CAAAA,cAAAA,CAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,OAAAA,EAAAA,CAAAA,EAAAA,CAAAA,CAAAA;AAAAA,KAAAA,EAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,eAAAA,CAAAA,GAAAA;AAAAA,aAAAA,WAAAA,GAAAA,CAAAA;AAAAA;;AAAAA,MAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,SAAAA,GAAAA,SAAAA,CAAAA,GAAAA,MAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA,CAAAA,SAAAA,EAAAA,IAAAA,CAAAA,EAAAA,CAAAA;AAAAA,KAAAA,CAAAA;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,QAAAA,IAAAA,YAAAA;AAAAA,aAAAA,CAAAA,CAAAA,GAAAA,MAAAA,CAAAA,MAAAA,IAAAA,UAAAA,CAAAA,EAAAA;AAAAA,aAAAA,IAAAA,CAAAA,EAAAA,CAAAA,GAAAA,CAAAA,EAAAA,CAAAA,GAAAA,SAAAA,CAAAA,MAAAA,EAAAA,CAAAA,GAAAA,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,KAAAA,IAAAA,CAAAA,IAAAA,CAAAA,GAAAA,SAAAA,CAAAA,CAAAA,CAAAA,EAAAA,MAAAA,CAAAA,SAAAA,CAAAA,cAAAA,CAAAA,IAAAA,CAAAA,CAAAA,EAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;;AAAAA,eAAAA,CAAAA;AAAAA,OAAAA,EAAAA,KAAAA,CAAAA,IAAAA,EAAAA,SAAAA,CAAAA;AAAAA,KAAAA;;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;ACPb,QAAAxX,CAAAA,GAAAj6D,CAAAA,CAAA,CAAAA,CAAA;AAAA,QAMAixE,CAAAA,GAAA,UAAAz0D,CAAA,EAAAA;AACE,eAAAy0D,CAAA,CAAYtzD,CAAZ,EAAYA;AAAAA,eACVnB,CAAAA,CAAApc,IAAAoc,CAAAlL,IAAAkL,EAAMmB,CAANnB,KAAclL,IADJqM;AAwFd;;AAAA,aAzFqClB,CAAAA,CAAAw0D,CAAAx0D,EAAAD,CAAAC,CAAAA,EAInCw0D,CAAAA,CAAApvE,SAAAovE,CAAA1B,YAAA0B,GAAA,YAAA;AACE,eAAAhd,CAAAA,CAAA,EAAAA,EAAW3iD,KAAK+gE,aAAL/gE,EAAX2iD,EAAoC3iD,KAAKghE,aAALhhE,EAApC2iD,CAAA;AAAyCqe,OALR71D,EAOnCw0D,CAAAA,CAAApvE,SAAAovE,CAAAa,cAAAb,GAAA,YAAA;AACE,eAAO,EAAP;AAAO,OAR0Bx0D,EAUzBw0D,CAAAA,CAAApvE,SAAAovE,CAAAoB,aAAApB,GAAV,YAAA;AACE,eAAO;AACLhsD,UAAAA,MAAAA,EAAQ,IAAIg1C,CAAAA,CAAAr8C,cAAJ,CAAmB,+FAAnB;AADH,SAAP;AAC6B,OAZInB,EAkBzBw0D,CAAAA,CAAApvE,SAAAovE,CAAAqB,aAAArB,GAAV,YAAA;AACE,eAAO;AACLtrD,UAAAA,MAAAA,EAAQ,IAAIs0C,CAAAA,CAAAr8C,cAAJ,CAAmB,kFAAnB;AADH,SAAP;AAC6B,OApBInB,EA8BzBw0D,CAAAA,CAAApvE,SAAAovE,CAAAsB,WAAAtB,GAAV,YAAA;AACE,YAAMuB,CAAAA,GAAavB,CAAAA,CAAgBwB,cAAhBxB,KAAmC,sBAAnCA,GAA4D,EAA/E;AACA,eAAO;AACLhsD,UAAAA,MAAAA,EAAQ,IAAIg1C,CAAAA,CAAAr8C,cAAJ,CAAmB,omBAYvB40D,CAZuB,GAYb,gHAZN;AADH,SAAP;AAagB,OA7CiB/1D,EAwDzBw0D,CAAAA,CAAApvE,SAAAovE,CAAAyB,WAAAzB,GAAV,YAAA;AACE,YAAMuB,CAAAA,GAAavB,CAAAA,CAAgBwB,cAAhBxB,KAAmC,sBAAnCA,GAA4D,EAA/E;AACA,eAAO;AACLtrD,UAAAA,MAAAA,EAAQ,IAAIs0C,CAAAA,CAAAr8C,cAAJ,CAAmB,yJAGrB40D,CAHqB,GAGX,mYAHR;AADH,SAAP;AAIkB,OA9De/1D,EA4E5Bw0D,CAAAA,CAAAwB,cAAAxB,GAAP,YAAA;AACE,YAAM1tE,CAAAA,GAAI,IAAIsO,WAAJ,CAAgB,CAAhB,CAAV;AAAA,YACMjS,CAAAA,GAAI,IAAIyU,WAAJ,CAAgB9Q,CAAhB,CADV;AAAA,YAEMjD,CAAAA,GAAI,IAAI0T,UAAJ,CAAezQ,CAAf,CAFV;AAIA,YADA3D,CAAAA,CAAE,CAAFA,CAAAA,GAAO,UAAPA,EACa,QAATU,CAAAA,CAAE,CAAFA,CAAJ,EACE,OAAA,CAAO,CAAP;AAEF,YAAa,QAATA,CAAAA,CAAE,CAAFA,CAAJ,EACE,OAAA,CAAO,CAAP;AAEF,cAAM,IAAIyG,KAAJ,CAAU,oBAAV,CAAN;AAAgB,OAvFiB0V,EAyFrCw0D,CAAA;AAzFA,KAAA,CAAqChX,CAAAA,CAAAv8C,OAArC,CANA;;AAMale,IAAAA,CAAAA,CAAAyxE,eAAAzxE,GAAAyxE,CAAAzxE;AAAAyxE,G1JyEb,E0JzEaA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,QAAAA,CAAAA;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,SAAAA,KAAAA,CAAAA,GAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,CAAAA,CAAAA,GAAAA,MAAAA,CAAAA,cAAAA,IAAAA;AAAAA,QAAAA,SAAAA,EAAAA;AAAAA,mBAAAA,KAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,QAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA;AAAAA,OAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,IAAAA,CAAAA,IAAAA,CAAAA,EAAAA,CAAAA,CAAAA,cAAAA,CAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,OAAAA,EAAAA,CAAAA,EAAAA,CAAAA,CAAAA;AAAAA,KAAAA,EAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,eAAAA,CAAAA,GAAAA;AAAAA,aAAAA,WAAAA,GAAAA,CAAAA;AAAAA;;AAAAA,MAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,SAAAA,GAAAA,SAAAA,CAAAA,GAAAA,MAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA,CAAAA,SAAAA,EAAAA,IAAAA,CAAAA,EAAAA,CAAAA;AAAAA,KAAAA,CAAAA;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,QAAAA,IAAAA,YAAAA;AAAAA,aAAAA,CAAAA,CAAAA,GAAAA,MAAAA,CAAAA,MAAAA,IAAAA,UAAAA,CAAAA,EAAAA;AAAAA,aAAAA,IAAAA,CAAAA,EAAAA,CAAAA,GAAAA,CAAAA,EAAAA,CAAAA,GAAAA,SAAAA,CAAAA,MAAAA,EAAAA,CAAAA,GAAAA,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,KAAAA,IAAAA,CAAAA,IAAAA,CAAAA,GAAAA,SAAAA,CAAAA,CAAAA,CAAAA,EAAAA,MAAAA,CAAAA,SAAAA,CAAAA,cAAAA,CAAAA,IAAAA,CAAAA,CAAAA,EAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;;AAAAA,eAAAA,CAAAA;AAAAA,OAAAA,EAAAA,KAAAA,CAAAA,IAAAA,EAAAA,SAAAA,CAAAA;AAAAA,KAAAA;;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;ACNb,QAAAhX,CAAAA,GAAAj6D,CAAAA,CAAA,CAAAA,CAAA;AAAA,QACA20D,CAAAA,GAAA30D,CAAAA,CAAA,CAAAA,CADA;AAAA,QAQAmxE,CAAAA,GAAA,UAAA30D,CAAA,EAAAA;AACE,eAAA20D,CAAA,CAAYxzD,CAAZ,EAAYA;AAAAA,eACVnB,CAAAA,CAAApc,IAAAoc,CAAAlL,IAAAkL,EAAMmB,CAANnB,KAAclL,IADJqM;AAgCd;;AAAA,aAjCsClB,CAAAA,CAAA00D,CAAA10D,EAAAD,CAAAC,CAAAA,EAIpC00D,CAAAA,CAAAtvE,SAAAsvE,CAAA5B,YAAA4B,GAAA,YAAA;AACE,eAAAld,CAAAA,CAAA,EAAAA,EAAW3iD,KAAKqhE,YAALrhE,EAAX2iD,EAAmC3iD,KAAKshE,eAALthE,EAAnC2iD,CAAA;AAAwC2e,OALNn2D,EAOpC00D,CAAAA,CAAAtvE,SAAAsvE,CAAAW,cAAAX,GAAA,YAAA;AACE,eAAO,EAAP;AAAO,OAR2B10D,EAU1B00D,CAAAA,CAAAtvE,SAAAsvE,CAAAwB,YAAAxB,GAAV,YAAA;AACE,YAAMp7D,CAAAA,GAAO4+C,CAAAA,CAAA9+C,OAAA8+C,CAAQrjD,KAAKqM,OAALrM,CAAakM,SAAblM,CAAuB+D,OAA/Bs/C,CAAb;AACA,eAAO;AACLge,UAAAA,YAAAA,EAAc,IAAI1Y,CAAAA,CAAAr8C,cAAJ,CACV,6DAEI7H,CAAAA,CAAKL,MAFT,GAEe,wCAHL,EAMV,CAAC,iBAAD,CANU;AADT,SAAP;AAOO,OAnB2B+G,EAsB1B00D,CAAAA,CAAAtvE,SAAAsvE,CAAAyB,eAAAzB,GAAV,YAAA;AACE,eAAO;AACLyB,UAAAA,eAAAA,EAAiB,IAAI3Y,CAAAA,CAAAr8C,cAAJ,CACb,uGADa,EAMb,CAAC,iBAAD,CANa;AADZ,SAAP;AAOO,OA9B2BnB,EAiCtC00D,CAAA;AAjCA,KAAA,CAAsClX,CAAAA,CAAAv8C,OAAtC,CARA;;AAQale,IAAAA,CAAAA,CAAA2xE,gBAAA3xE,GAAA2xE,CAAA3xE;AAAA2xE,G3JuEb,E2JvEaA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,QAAAA,CAAAA;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,SAAAA,KAAAA,CAAAA,GAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,CAAAA,CAAAA,GAAAA,MAAAA,CAAAA,cAAAA,IAAAA;AAAAA,QAAAA,SAAAA,EAAAA;AAAAA,mBAAAA,KAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,QAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA;AAAAA,OAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,IAAAA,CAAAA,IAAAA,CAAAA,EAAAA,CAAAA,CAAAA,cAAAA,CAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,OAAAA,EAAAA,CAAAA,EAAAA,CAAAA,CAAAA;AAAAA,KAAAA,EAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,eAAAA,CAAAA,GAAAA;AAAAA,aAAAA,WAAAA,GAAAA,CAAAA;AAAAA;;AAAAA,MAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,SAAAA,GAAAA,SAAAA,CAAAA,GAAAA,MAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA,CAAAA,SAAAA,EAAAA,IAAAA,CAAAA,EAAAA,CAAAA;AAAAA,KAAAA,CAAAA;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,QAAAA,IAAAA,YAAAA;AAAAA,aAAAA,CAAAA,CAAAA,GAAAA,MAAAA,CAAAA,MAAAA,IAAAA,UAAAA,CAAAA,EAAAA;AAAAA,aAAAA,IAAAA,CAAAA,EAAAA,CAAAA,GAAAA,CAAAA,EAAAA,CAAAA,GAAAA,SAAAA,CAAAA,MAAAA,EAAAA,CAAAA,GAAAA,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,KAAAA,IAAAA,CAAAA,IAAAA,CAAAA,GAAAA,SAAAA,CAAAA,CAAAA,CAAAA,EAAAA,MAAAA,CAAAA,SAAAA,CAAAA,cAAAA,CAAAA,IAAAA,CAAAA,CAAAA,EAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;;AAAAA,eAAAA,CAAAA;AAAAA,OAAAA,EAAAA,KAAAA,CAAAA,IAAAA,EAAAA,SAAAA,CAAAA;AAAAA,KAAAA;;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;ACRb,QAAAlX,CAAAA,GAAAj6D,CAAAA,CAAA,CAAAA,CAAA;AAAA,QAMAuxE,CAAAA,GAAA,UAAA/0D,CAAA,EAAAA;AACE,eAAA+0D,CAAA,CAAY5zD,CAAZ,EAAYA;AAAAA,eACVnB,CAAAA,CAAApc,IAAAoc,CAAAlL,IAAAkL,EAAMmB,CAANnB,KAAclL,IADJqM;AAgKd;;AAAA,aAjKuClB,CAAAA,CAAA80D,CAAA90D,EAAAD,CAAAC,CAAAA,EAIrC80D,CAAAA,CAAA1vE,SAAA0vE,CAAAhC,YAAAgC,GAAA,YAAA;AACE,eAAAtd,CAAAA,CAAA,EAAAA,EACK3iD,KAAKuhE,UAALvhE,EADL2iD,EAEK3iD,KAAKwhE,gBAALxhE,EAFL2iD,EAGK3iD,KAAK7G,eAAL6G,EAHL2iD,EAIK3iD,KAAK/G,eAAL+G,EAJL2iD,EAKK3iD,KAAKyhE,gBAALzhE,EALL2iD,CAAA;AAKU8e,OAVyBt2D,EAarC80D,CAAAA,CAAA1vE,SAAA0vE,CAAAO,cAAAP,GAAA,YAAA;AACE,eAAO,EAAP;AAAO,OAd4B90D,EAgB3B80D,CAAAA,CAAA1vE,SAAA0vE,CAAAsB,UAAAtB,GAAV,YAAA;AACE,YAAM9zD,CAAAA,GAAcnM,KAAKqM,OAALrM,CAAamM,WAAjC;AAAA,YACM08C,CAAAA,GAAa18C,CAAAA,CAAYm3C,YAAZn3C,CAAyBpX,KAAzBoX,CAA+B/a,MADlD;AAAA,YAEM8b,CAAAA,GAA2C,EAFjD;AAuBA,eApBAlN,KAAKqM,OAALrM,CAAamM,WAAbnM,CAAyBwjD,QAAzBxjD,CAAkC1C,OAAlC0C,CAA0C,UAAC9Q,CAAD,EAAOX,CAAP,EAAOA;AAC/C,cAAMwG,CAAAA,GAAQoX,CAAAA,CAAYo3C,YAAZp3C,CAAyB5d,CAAzB4d,EAA4BpX,KAA1C;;AACA,cAAIA,CAAAA,CAAM3D,MAAN2D,IAAgB8zD,CAApB,EAAgC;AAK9B,iBAJA,IAAMjwD,CAAAA,GAAO7D,CAAAA,CAAM3D,MAAnB,EACMqC,CAAAA,GAAYo1D,CAAAA,GAAajwD,CAD/B,EAEMgoE,CAAAA,GAAW,kBAAgB1xE,CAFjC,EAGIm/D,CAAAA,GAAQ,EAHZ,EAISqT,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAI9oE,CAApB,EAAoBA,EAAQ8oE,CAA5B,EACErT,CAAAA,IAAS,6BACKqT,CADL,GACM,oCADN,IAC2CjuE,CAAAA,GAAYiuE,CADvD,IACwD,MADxD,GAC+D3sE,CAAAA,CAAM2sE,CAAN3sE,CAD/D,GACuE,oBADhFs5D;;AAIF,gBAAMpF,CAAAA,GAAO,oBACN2X,CADM,GACE,uBADF,GAC0B/X,CAD1B,GACoC,yBADpC,GAC8DjwD,CAD9D,GACkE,kBADlE,GAETy1D,CAFS,GAEJ,uBAFT;AAKAnhD,YAAAA,CAAAA,CAAO0zD,CAAP1zD,CAAAA,GAAmB,IAAIy7C,CAAAA,CAAAr8C,cAAJ,CAAmB28C,CAAnB,CAAnB/7C;AAAsC+7C;AAAAA,SAjB1CjpD,GAoBOkN,CAAP;AAAOA,OAxC4B/B,EA0C3B80D,CAAAA,CAAA1vE,SAAA0vE,CAAAuB,gBAAAvB,GAAV,YAAA;AACE,YAAM9zD,CAAAA,GAAcnM,KAAKqM,OAALrM,CAAamM,WAAjC;AAAA,YACM08C,CAAAA,GAAa18C,CAAAA,CAAYm3C,YAAZn3C,CAAyBpX,KAAzBoX,CAA+B/a,MADlD;AAAA,YAEM8b,CAAAA,GAA2C,EAFjD;AAyBA,eAtBAlN,KAAKqM,OAALrM,CAAamM,WAAbnM,CAAyBwjD,QAAzBxjD,CAAkC1C,OAAlC0C,CAA0C,UAAC9Q,CAAD,EAAOX,CAAP,EAAOA;AAC/C,cAAMwG,CAAAA,GAAQoX,CAAAA,CAAYo3C,YAAZp3C,CAAyB5d,CAAzB4d,EAA4BpX,KAA1C;;AACA,cAAA,EAAMA,CAAAA,CAAM3D,MAAN2D,GAAe,CAAfA,IAAoBA,CAAAA,CAAM3D,MAAN2D,GAAe8zD,CAAzC,CAAA,EAAsD;AAKpD,iBAJA,IAAMjwD,CAAAA,GAAO7D,CAAAA,CAAM3D,MAAnB,EACMqC,CAAAA,GAAYo1D,CAAAA,GAAajwD,CAD/B,EAEMgoE,CAAAA,GAAW,wBAAsB1xE,CAFvC,EAGIm/D,CAAAA,GAAQ,EAHZ,EAISsT,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAI/oE,CAAAA,GAAO,CAA3B,EAA2B,EAAK+oE,CAAhC,EACEtT,CAAAA,IAAS,6BACKsT,CADL,GACM,oCADN,IAC2CluE,CAAAA,GAAYkuE,CADvD,IACwD,MADxD,GAC+D5sE,CAAAA,CAAM4sE,CAAN5sE,CAD/D,GACuE,oBADhFs5D;;AAIF,gBAAMpF,CAAAA,GAAO,oBACN2X,CADM,GACE,sBADF,GACyB/X,CADzB,GACmC,yBADnC,GAC6DjwD,CAD7D,GACiE,kBADjE,GAETy1D,CAFS,GAEJ,0BAFI,IAGGz1D,CAAAA,GAAO,CAHV,IAGW,qBAHX,IAGiCiwD,CAAAA,GAAa,CAH9C,IAG+C,4BAH/C,IAIGjwD,CAAAA,GAAO,CAJV,IAIW,qBAJX,IAIiCiwD,CAAAA,GAAa,CAJ9C,IAI+C,yBAJ5D;AAOA37C,YAAAA,CAAAA,CAAO0zD,CAAP1zD,CAAAA,GAAmB,IAAIy7C,CAAAA,CAAAr8C,cAAJ,CAAmB28C,CAAnB,CAAnB/7C;AAAsC+7C;AAAAA,SAnB1CjpD,GAsBOkN,CAAP;AAAOA,OApE4B/B,EAsE3B80D,CAAAA,CAAA1vE,SAAA0vE,CAAAhnE,eAAAgnE,GAAV,YAAA;AACE,YAAM9zD,CAAAA,GAAcnM,KAAKqM,OAALrM,CAAamM,WAAjC;AAAA,YACMe,CAAAA,GAA2C,EADjD;AAYA,eAVAlN,KAAKqM,OAALrM,CAAamM,WAAbnM,CAAyBwjD,QAAzBxjD,CAAkC1C,OAAlC0C,CAA0C,UAAC9Q,CAAD,EAAOX,CAAP,EAAOA;AAC/C,cAAMwG,CAAAA,GAAQoX,CAAAA,CAAYo3C,YAAZp3C,CAAyB5d,CAAzB4d,EAA4BpX,KAA1C;AAAA,cACM8D,CAAAA,GAAUsT,CAAAA,CAAYo3C,YAAZp3C,CAAyB5d,CAAzB4d,EAA4BtT,OAD5C;AAAA,cAEMD,CAAAA,GAAO7D,CAAAA,CAAM3D,MAFnB;AAAA,cAGIwvE,CAAAA,GAAW,qBAAmB1xE,CAHlC;AAIAge,UAAAA,CAAAA,CAAO0zD,CAAP1zD,CAAAA,GAAmB,IAAIy7C,CAAAA,CAAAr8C,cAAJ,CAAmB2zD,CAAAA,CAAkB2B,mBAAlB3B,CAAsCW,CAAtCX,EAAgDrnE,CAAhDqnE,EAAsDpnE,CAAtDonE,CAAnB,CAAnB/yD,EAEAA,CAAAA,CADA0zD,CAAAA,GAAW,qBAAmB1xE,CAAnB,GAAuB,IAClCge,CAAAA,GACI,IAAIy7C,CAAAA,CAAAr8C,cAAJ,CAAmB2zD,CAAAA,CAAkB2B,mBAAlB3B,CAAsCW,CAAtCX,EAAgDrnE,CAAhDqnE,EAAsDpnE,CAAAA,CAAQE,KAARF,GAAgBG,OAAhBH,EAAtDonE,CAAnB,CAHJ/yD;AAG6FlU,SAR/FgH,GAUOkN,CAAP;AAAOA,OAnF4B/B,EAqF9B80D,CAAAA,CAAA2B,mBAAA3B,GAAP,UAA2B/wE,CAA3B,EAAyC0J,CAAzC,EAAuDC,CAAvD,EAAuDA;AAErD,aADA,IAAIw1D,CAAAA,GAAQ,EAAZ,EACS9/D,CAAAA,GAAIqK,CAAAA,GAAO,CAApB,EAAuBrK,CAAAA,IAAK,CAA5B,EAA4B,EAAKA,CAAjC,EACE8/D,CAAAA,IAAS,iCACa9/D,CADb,GACc,MADd,GACqBsK,CAAAA,CAAQtK,CAARsK,CADrB,GAC+B,aADxCw1D;;AAIF,eAAO,iBACCn/D,CADD,GACK,eADL,GACqB0J,CADrB,GACyB,yCADzB,GAGDy1D,CAHC,GAGI,2CAHX;AAGW,OA/FwBljD,EAoG3B80D,CAAAA,CAAA1vE,SAAA0vE,CAAA9mE,eAAA8mE,GAAV,YAAA;AACE,YAAM9zD,CAAAA,GAAcnM,KAAKqM,OAALrM,CAAamM,WAAjC;AAAA,YACMe,CAAAA,GAA2C,EADjD;AAYA,eAVAlN,KAAKqM,OAALrM,CAAamM,WAAbnM,CAAyBwjD,QAAzBxjD,CAAkC1C,OAAlC0C,CAA0C,UAAC9Q,CAAD,EAAOX,CAAP,EAAOA;AAC/C,cAAMwG,CAAAA,GAAQoX,CAAAA,CAAYo3C,YAAZp3C,CAAyB5d,CAAzB4d,EAA4BpX,KAA1C;AAAA,cACM8D,CAAAA,GAAUsT,CAAAA,CAAYo3C,YAAZp3C,CAAyB5d,CAAzB4d,EAA4BtT,OAD5C;AAAA,cAEMD,CAAAA,GAAO7D,CAAAA,CAAM3D,MAFnB;AAAA,cAGIwvE,CAAAA,GAAW,qBAAmB1xE,CAHlC;AAIAge,UAAAA,CAAAA,CAAO0zD,CAAP1zD,CAAAA,GAAmB,IAAIy7C,CAAAA,CAAAr8C,cAAJ,CAAmB2zD,CAAAA,CAAkB4B,qBAAlB5B,CAAwCW,CAAxCX,EAAkDrnE,CAAlDqnE,EAAwDpnE,CAAxDonE,CAAnB,CAAnB/yD,EAEAA,CAAAA,CADA0zD,CAAAA,GAAW,qBAAmB1xE,CAAnB,GAAuB,IAClCge,CAAAA,GACI,IAAIy7C,CAAAA,CAAAr8C,cAAJ,CAAmB2zD,CAAAA,CAAkB4B,qBAAlB5B,CAAwCW,CAAxCX,EAAkDrnE,CAAlDqnE,EAAwDpnE,CAAAA,CAAQE,KAARF,GAAgBG,OAAhBH,EAAxDonE,CAAnB,CAHJ/yD;AAG+FlU,SARjGgH,GAUOkN,CAAP;AAAOA,OAjH4B/B,EAmH9B80D,CAAAA,CAAA4B,qBAAA5B,GAAP,UAA6B/wE,CAA7B,EAA2C0J,CAA3C,EAAyDC,CAAzD,EAAyDA;AAEvD,aADA,IAAM8nE,CAAAA,GAAe,EAArB,EACSpyE,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAIqK,CAAAA,GAAO,CAA3B,EAA2B,EAAKrK,CAAhC,EACEoyE,CAAAA,CAAa7kE,IAAb6kE,CAAkB,qBACRpyE,CADQ,GACP,eADO,GACSsK,CAAAA,CAAQtK,CAARsK,CADT,GACmB,GADrC8nE,GAEAA,CAAAA,CAAa7kE,IAAb6kE,CAAkB,iCACIpyE,CADJ,GACK,MADL,GACYsK,CAAAA,CAAQtK,CAARsK,CADZ,GACsB,GADxC8nE,CAFAA;;AAOF,eAFAA,CAAAA,CAAa7kE,IAAb6kE,CAAkB,sBACN/nE,CAAAA,GAAO,CADD,IACE,aADpB+nE,GAEO,kBACEzxE,CADF,GACM,+BADN,GACsC0J,CADtC,GAC0C,gBAD1C,GAED+nE,CAAAA,CAAazmD,IAAbymD,CAAkB,EAAlBA,CAFC,GAEoB,mBAF3B;AAE2B,OA/HQx1D,EAmI3B80D,CAAAA,CAAA1vE,SAAA0vE,CAAAwB,gBAAAxB,GAAV,YAAA;AACE,YAAM9zD,CAAAA,GAAcnM,KAAKqM,OAALrM,CAAamM,WAAjC;AAAA,YACMe,CAAAA,GAA2C,EADjD;AA2BA,eAzBAlN,KAAKqM,OAALrM,CAAamM,WAAbnM,CAAyBwjD,QAAzBxjD,CAAkC1C,OAAlC0C,CAA0C,UAAC9Q,CAAD,EAAOX,CAAP,EAAOA;AAK/C,eAJA,IAAMwG,CAAAA,GAAQoX,CAAAA,CAAYo3C,YAAZp3C,CAAyB5d,CAAzB4d,EAA4BpX,KAA1C,EACM6D,CAAAA,GAAO7D,CAAAA,CAAM3D,MADnB,EAEMwvE,CAAAA,GAAW,sBAAoB1xE,CAFrC,EAGI4yE,CAAAA,GAAY,EAHhB,EAISC,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAInpE,CAApB,EAAoBA,EAAQmpE,CAA5B,EACED,CAAAA,IAAa,qBACLC,CADK,GACJ,MADI,GACGhtE,CAAAA,CAAMgtE,CAANhtE,CADH,GACW,GADxB+sE;;AAGF,cAAM7Y,CAAAA,GAAO,oBACJ2X,CADI,GACI,6BADJ,GACkChoE,CADlC,GACsC,4BADtC,GAEGA,CAFH,GAEO,gBAFP,GAGPkpE,CAHO,GAGE,2BAHF,GAIKlpE,CAJL,GAIS,qOAJtB;AAcAsU,UAAAA,CAAAA,CAAO0zD,CAAP1zD,CAAAA,GAAmB,IAAIy7C,CAAAA,CAAAr8C,cAAJ,CAAmB28C,CAAnB,CAAnB/7C;AAAsC+7C,SAvBxCjpD,GAyBOkN,CAAP;AAAOA,OA/J4B/B,EAiKvC80D,CAAA;AAjKA,KAAA,CAAuCtX,CAAAA,CAAAv8C,OAAvC,CANA;;AAMale,IAAAA,CAAAA,CAAA+xE,iBAAA/xE,GAAA+xE,CAAA/xE;AAAA+xE,G5JyEb,E4JzEaA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,QAAAA,CAAAA;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,SAAAA,KAAAA,CAAAA,GAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,CAAAA,CAAAA,GAAAA,MAAAA,CAAAA,cAAAA,IAAAA;AAAAA,QAAAA,SAAAA,EAAAA;AAAAA,mBAAAA,KAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,QAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA;AAAAA,OAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,IAAAA,CAAAA,IAAAA,CAAAA,EAAAA,CAAAA,CAAAA,cAAAA,CAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,OAAAA,EAAAA,CAAAA,EAAAA,CAAAA,CAAAA;AAAAA,KAAAA,EAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,eAAAA,CAAAA,GAAAA;AAAAA,aAAAA,WAAAA,GAAAA,CAAAA;AAAAA;;AAAAA,MAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,SAAAA,GAAAA,SAAAA,CAAAA,GAAAA,MAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,SAAAA,GAAAA,CAAAA,CAAAA,SAAAA,EAAAA,IAAAA,CAAAA,EAAAA,CAAAA;AAAAA,KAAAA,CAAAA;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,QAAAA,IAAAA,YAAAA;AAAAA,aAAAA,CAAAA,CAAAA,GAAAA,MAAAA,CAAAA,MAAAA,IAAAA,UAAAA,CAAAA,EAAAA;AAAAA,aAAAA,IAAAA,CAAAA,EAAAA,CAAAA,GAAAA,CAAAA,EAAAA,CAAAA,GAAAA,SAAAA,CAAAA,MAAAA,EAAAA,CAAAA,GAAAA,CAAAA,EAAAA,CAAAA,EAAAA,EAAAA,KAAAA,IAAAA,CAAAA,IAAAA,CAAAA,GAAAA,SAAAA,CAAAA,CAAAA,CAAAA,EAAAA,MAAAA,CAAAA,SAAAA,CAAAA,cAAAA,CAAAA,IAAAA,CAAAA,CAAAA,EAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;;AAAAA,eAAAA,CAAAA;AAAAA,OAAAA,EAAAA,KAAAA,CAAAA,IAAAA,EAAAA,SAAAA,CAAAA;AAAAA,KAAAA;;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;ACNb,QAAAtX,CAAAA,GAAAj6D,CAAAA,CAAA,CAAAA,CAAA;AAAA,QAOAqxE,CAAAA,GAAA,UAAA70D,CAAA,EAAAA;AACE,eAAA60D,CAAA,CAAY1zD,CAAZ,EAAYA;AAAAA,eACVnB,CAAAA,CAAApc,IAAAoc,CAAAlL,IAAAkL,EAAMmB,CAANnB,KAAclL,IADJqM;AAqGd;;AAAA,aAtGgClB,CAAAA,CAAA40D,CAAA50D,EAAAD,CAAAC,CAAAA,EAI9B40D,CAAAA,CAAAxvE,SAAAwvE,CAAAS,cAAAT,GAAA,YAAA;AACE,eAAO,EAAP;AAAO,OALqB50D,EAO9B40D,CAAAA,CAAAxvE,SAAAwvE,CAAA9B,YAAA8B,GAAA,YAAA;AACE,eAAApd,CAAAA,CAAA,EAAAA,EAAW3iD,KAAKgiE,kBAALhiE,EAAX2iD,EAAyC3iD,KAAKiiE,OAALjiE,EAAzC2iD,EAA4D3iD,KAAKkiE,UAALliE,EAA5D2iD,EAAkF3iD,KAAKmiE,UAALniE,EAAlF2iD,CAAA;AAAuFwf,OAR3Dh3D,EAUpB40D,CAAAA,CAAAxvE,SAAAwvE,CAAAiC,kBAAAjC,GAAV,YAAA;AACE,YACMnnE,CAAAA,GADeoH,KAAKqM,OAALrM,CAAamM,WAAbnM,CAAyBsjD,YAAzBtjD,CACKjL,KADLiL,CACW5O,MADhC;AAAA,YAEMgxE,CAAAA,GAAoC;AAAC70D,UAAAA,GAAAA,EAAK,IAAN;AAAYuV,UAAAA,GAAAA,EAAK,IAAjB;AAAuBtmB,UAAAA,GAAAA,EAAK,IAA5B;AAAkC+pB,UAAAA,GAAAA,EAAK;AAAvC,SAF1C;AAAA,YAGMrZ,CAAAA,GAA4C,EAHlD;;AAIA,aAAK,IAAMqnD,CAAX,IAAmB6N,CAAnB,EAA2B;AAGzB,eAFA,IAAMjZ,CAAAA,GAAWoL,CAAAA,GAAI,KAArB,EACI8N,CAAAA,GAAkB,EADtB,EAES9zE,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAIqK,CAApB,EAAoBA,EAAQrK,CAA5B,EACE8zE,CAAAA,IAAmB,sBACV9zE,CADU,GACT,IADS,GACJ6zE,CAAAA,CAAO7N,CAAP6N,CADI,GACQ,OADR,GACgB7zE,CADhB,GACiB,gBADpC8zE;;AAIF,cAAMpZ,CAAAA,GAAO,oBACJE,CADI,GACC,WADD,GACavwD,CADb,GACiB,kBADjB,GACoCA,CADpC,GACwC,kBADxC,GAEPypE,CAFO,GAEQ,uBAFrB;AAKAn1D,UAAAA,CAAAA,CAAOi8C,CAAPj8C,CAAAA,GAAgB,IAAIy7C,CAAAA,CAAAr8C,cAAJ,CAAmB28C,CAAnB,CAAhB/7C;AAGF;;AAAA,eAAOA,CAAP;AAAOA,OA/BqB/B,EAiCpB40D,CAAAA,CAAAxvE,SAAAwvE,CAAAkC,OAAAlC,GAAV,YAAA;AAIE,aAHA,IACMnnE,CAAAA,GADeoH,KAAKqM,OAALrM,CAAamM,WAAbnM,CAAyBsjD,YAAzBtjD,CACKjL,KADLiL,CACW5O,MADhC,EAEIixE,CAAAA,GAAkB,EAFtB,EAGS9zE,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAIqK,CAApB,EAAoBA,EAAQrK,CAA5B,EACE8zE,CAAAA,IAAmB,oBACV9zE,CADU,GACT,UADS,GACEA,CADF,GACG,cADtB8zE;;AAIF,YAAMpZ,CAAAA,GAAO,kCACYrwD,CADZ,GACgB,kBADhB,GACmCA,CADnC,GACuC,gBADvC,GAEPypE,CAFO,GAEQ,mBAFrB;AAKA,eAAO;AAACJ,UAAAA,OAAAA,EAAS,IAAItZ,CAAAA,CAAAr8C,cAAJ,CAAmB28C,CAAnB;AAAV,SAAP;AAAoCA,OA/CR99C,EAkDpB40D,CAAAA,CAAAxvE,SAAAwvE,CAAAmC,UAAAnC,GAAV,YAAA;AASE,aARA,IACMnnE,CAAAA,GADeoH,KAAKqM,OAALrM,CAAamM,WAAbnM,CAAyBsjD,YAAzBtjD,CACKjL,KADLiL,CACW5O,MADhC,EAEIi9D,CAAAA,GAAQ,iDAEKz1D,CAFL,GAES,yEAJrB,EAQSrK,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAIqK,CAAAA,GAAO,CAA3B,EAA2B,EAAKrK,CAAhC,EACE8/D,CAAAA,IAAS,iCACa9/D,CADb,GACc,mBADd,GAECA,CAFD,GAEE,0BAFX8/D;;AASF,YAAMpF,CAAAA,GAAO,uCACiBrwD,CADjB,GACqB,sCADrB,IAJby1D,CAAAA,IAAS,oCAEGz1D,CAAAA,GAAO,CAFV,IAEW,sBAEP,IAEF,qBAFX;AAKA,eAAO;AAACspE,UAAAA,UAAAA,EAAY,IAAIvZ,CAAAA,CAAAr8C,cAAJ,CAAmB28C,CAAnB;AAAb,SAAP;AAAuCA,OA1EX99C,EA4EpB40D,CAAAA,CAAAxvE,SAAAwvE,CAAAoC,UAAApC,GAAV,YAAA;AASE,aARA,IACMnnE,CAAAA,GADeoH,KAAKqM,OAALrM,CAAamM,WAAbnM,CAAyBsjD,YAAzBtjD,CACKjL,KADLiL,CACW5O,MADhC,EAEIi9D,CAAAA,GAAQ,kDAEMz1D,CAFN,GAEU,sEAJtB,EAQSrK,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAIqK,CAAAA,GAAO,CAA3B,EAA2B,EAAKrK,CAAhC,EACE8/D,CAAAA,IAAS,iCACa9/D,CADb,GACc,0BADd,GAEQA,CAFR,GAES,YAFlB8/D;;AASF,YAAMpF,CAAAA,GAAO,kCACYrwD,CADZ,GACgB,2BADhB,IAJby1D,CAAAA,IAAS,2CAEUz1D,CAAAA,GAAO,CAFjB,IAEkB,cAEd,IAEF,iBAFX;AAKA,eAAO;AAACupE,UAAAA,UAAAA,EAAY,IAAIxZ,CAAAA,CAAAr8C,cAAJ,CAAmB28C,CAAnB;AAAb,SAAP;AAAuCA,OApGX99C,EAsGhC40D,CAAA;AAtGA,KAAA,CAAgCpX,CAAAA,CAAAv8C,OAAhC,CAPA;;AAOale,IAAAA,CAAAA,CAAA6xE,UAAA7xE,GAAA6xE,CAAA7xE;AAAA6xE,G7JwEb,E6JxEaA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;ACPb,QAAA32D,CAAAA,GAAA1a,CAAAA,CAAA,CAAAA,CAAA;AAAA,QAiBA6xD,CAAAA,GAAA,YAAA;AACE,eAAAA,CAAA,CAAmBC,CAAnB,EAAmBA;AAAAxgD,aAAAwgD,cAAAxgD,GAAAwgD,CAAAxgD;AAoCrB;;AAAA,aAnCEugD,CAAAA,CAAAhwD,SAAAgwD,CAAAwC,gBAAAxC,GAAA,UAAiBxrD,CAAjB,EAA+C+tD,CAA/C,EAA+CA;AAE7C,YAAqB,MAAjB/tD,CAAAA,CAAM3D,MAAV,EACE,OAAO,CAAC,CAAD,EAAI,CAAJ,CAAP;AAEF,YAAMovD,CAAAA,GAAiBxgD,KAAKwgD,cAA5B;;AACA,YAAIsC,CAAJ,EAAW;AAET,cAAMwf,CAAAA,GAAQxf,CAAAA,CAAMsJ,SAANtJ,IAAmB/tD,CAAAA,CAAM3D,MAAzB0xD,GAAkC,CAAlCA,GAAsC/tD,CAAAA,CAAMgE,KAANhE,CAAY+tD,CAAAA,CAAMsJ,SAAlBr3D,EAA6BqG,MAA7BrG,CAAoC,UAACzG,CAAD,EAAI2D,CAAJ,EAAIA;AAAM,mBAAA3D,CAAAA,GAAI2D,CAAJ;AAAIA,WAAlD8C,CAApD;AAAA,cACMwtE,CAAAA,GAAQzf,CAAAA,CAAMsJ,SAANtJ,IAAmB,CAAnBA,GAAuB,CAAvBA,GAA2B/tD,CAAAA,CAAMgE,KAANhE,CAAY,CAAZA,EAAe+tD,CAAAA,CAAMsJ,SAArBr3D,EAAgCqG,MAAhCrG,CAAuC,UAACzG,CAAD,EAAI2D,CAAJ,EAAIA;AAAM,mBAAA3D,CAAAA,GAAI2D,CAAJ;AAAIA,WAArD8C,CADzC;AAEA,cAAA,EAAIutE,CAAAA,GAAQ9hB,CAAR8hB,IAA0BC,CAAAA,GAAQ/hB,CAAtC,CAAA,EAOE,OAAO,CAAC8hB,CAAD,EAAQC,CAAR,CAAP;AAJAn5D,UAAAA,CAAAA,CAAAxC,MAAAwC,CAAO9D,OAAP8D,CACI,eADJA,EAEI,6DAA2DrU,CAA3D,GAAgE,cAAhE,GAA+E+tD,CAAAA,CAAMsJ,SAFzFhjD;AAWJ;;AAAA,aAJA,IAAMo5D,CAAAA,GAAYztE,CAAAA,CAAMqG,MAANrG,CAAa,UAACzG,CAAD,EAAI2D,CAAJ,EAAIA;AAAM,iBAAA3D,CAAAA,GAAI2D,CAAJ;AAAIA,SAA3B8C,CAAlB,EAEI2jB,CAAAA,GAAQ/lB,IAAAA,CAAKkC,KAALlC,CAAWA,IAAAA,CAAKmkC,IAALnkC,CAAU6vE,CAAV7vE,CAAXA,CAEZ,EAAO+lB,CAAAA,GAAQ8nC,CAAR9nC,IAA0BA,CAAAA,GAAQ8pD,CAAlC9pD,IACD8pD,CAAAA,GAAY9pD,CAAZ8pD,IAAsB,CAD5B,EAAoD9pD,CAAAA,EAApD,CAAoDA;;AAMpD,YAAIA,CAAAA,IAAS8nC,CAAT9nC,IAA2B8pD,CAAAA,GAAY9pD,CAAZ8pD,IAAsB,CAArD,EACE,MAAM,IAAI/sE,KAAJ,CAAU,6DAA4DV,CAAtE,CAAN;AAEF,eAAO,CAAC2jB,CAAD,EAAQ8pD,CAAAA,GAAY9pD,CAApB,CAAP;AAA2BA,OAjC7B6nC,EAmCFA,CAAA;AArCA,KAAA,EAjBA;;AAiBaryD,IAAAA,CAAAA,CAAAqyD,8BAAAryD,GAAAqyD,CAAAryD;AAAAqyD,G9J8Db,E8J9DaA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;ACjBb,QAAAn3C,CAAAA,GAAA1a,CAAAA,CAAA,CAAAA,CAAA;AAAA,QAsBAgyD,CAAAA,GAAA,YAAA;AAKE,eAAAA,CAAA,CACWx0C,CADX,EAC2Co0C,CAD3C,EACyFhjB,CADzF,EAEY/2B,CAFZ,EAEYA;AADDvG,aAAAkM,SAAAlM,GAAAkM,CAAAlM,EAAgCA,KAAAsgD,cAAAtgD,GAAAsgD,CAAhCtgD,EAA8EA,KAAAs9B,QAAAt9B,GAAAs9B,CAA9Et9B,EACCA,KAAAuG,MAAAvG,GAAAuG,CADDvG,EAELuG,CAAAA,CAAOo6C,aAAPp6C,KACFvG,KAAKyiE,aAALziE,GAAqB,IAAI6gD,GAAJ,EAArB7gD,EACAA,KAAK0iE,YAAL1iE,GAAoB,IAAI6gD,GAAJ,EADpB7gD,EAEAA,KAAK2iE,aAAL3iE,GAAqB,IAAI6gD,GAAJ,EAHnBt6C,CAFKvG;AAoKb;;AAAA,aA5JE0gD,CAAAA,CAAAnwD,SAAAmwD,CAAA+B,uBAAA/B,GAAA,UACIz/C,CADJ,EAC+BkhD,CAD/B,EACsDtkD,CADtD,EACgF2kD,CADhF,EACgFA;AAC9E,YAIItyD,CAJJ;AAAA,YAKIuyE,CALJ;AAAA,YAAMG,CAAAA,GAAkB5iE,KAAK6iE,aAAL7iE,CAAmBiB,CAAnBjB,CAAxB;AAAA,YAEM2jD,CAAAA,GAAU3jD,KAAKkM,SAALlM,CAAe4jD,UAAf5jD,CAA0B4iE,CAA1B5iE,EAA2CmiD,CAAAA,CAAO7pC,QAAP6pC,IAAmB,CAA9DniD,EAAiEwiD,CAAjExiD,CAFhB;;AAMA,YAAIA,KAAKuG,MAALvG,CAAY2gD,aAAhB,EAA+B;AAC7BzwD,UAAAA,CAAAA,GAASiyD,CAAAA,CAAOzpC,KAAPypC,GAAY,GAAZA,GAAgBA,CAAAA,CAAO1pC,MAAvB0pC,GAA6B,GAA7BA,GAAiCwB,CAAAA,CAAQyS,MAAzCjU,GAA+C,GAA/CA,GAAmDwB,CAAAA,CAAQmf,cAA3D3gB,GAAyE,GAAzEA,GAA6EwB,CAAAA,CAAQof,WAA9F7yE,EAA8F6yE,CAC9FN,CAAAA,GAAgBziE,KAAKyiE,aAALziE,CAAmBxQ,GAAnBwQ,CAAuB9P,CAAvB8P,CAD8E+iE,MAG5FN,CAAAA,GAAgB,EAAhBA,EACAziE,KAAKyiE,aAALziE,CAAmB7L,GAAnB6L,CAAuB9P,CAAvB8P,EAA4ByiE,CAA5BziE,CAJ4F+iE,CAA9F7yE;AAOA,cAAMwyE,CAAAA,GAAe1iE,KAAK0iE,YAAL1iE,CAAkBxQ,GAAlBwQ,CAAsB9P,CAAtB8P,CAArB;;AACA,cAAI0iE,CAAAA,IAAgBA,CAAAA,CAAatxE,MAAbsxE,GAAsB,CAA1C,EAA6C;AAC3C,gBAAMM,CAAAA,GAAUN,CAAAA,CAAa3wE,GAAb2wE,EAAhB;AAMA,mBALAD,CAAAA,CAAc3mE,IAAd2mE,CAAmBO,CAAnBP,GACS,MAALjgB,CAAK,IACPxiD,KAAKkM,SAALlM,CAAeijE,aAAfjjE,CACIgjE,CADJhjE,EACamiD,CAAAA,CAAOzpC,KADpB1Y,EAC2BmiD,CAAAA,CAAO1pC,MADlCzY,EAC0C2jD,CAD1C3jD,EACmDA,KAAKkjE,aAALljE,CAAmBiB,CAAnBjB,EAA6BnC,CAA7BmC,CADnDA,CAFFyiE,EAKOO,CAAP;AAAOA;AAIX55D;;AAAAA,QAAAA,CAAAA,CAAAxC,MAAAwC,CAAO9D,OAAP8D,CAAe,gBAAfA,EAAiC,kCAAgC+4C,CAAAA,CAAOzpC,KAAvC,GAA4C,GAA5C,GAAgDypC,CAAAA,CAAO1pC,MAAxFrP;AACA,YAAMyP,CAAAA,GACF7Y,KAAKkM,SAALlM,CAAe6jD,eAAf7jD,CAA+BmiD,CAAAA,CAAOzpC,KAAtC1Y,EAA6CmiD,CAAAA,CAAO1pC,MAApDzY,EAA4D2jD,CAA5D3jD,EAAqEA,KAAKkjE,aAALljE,CAAmBiB,CAAnBjB,EAA6BnC,CAA7BmC,CAArEA,CADJ;AAOA,eAJIA,KAAKuG,MAALvG,CAAY2gD,aAAZ3gD,KACFyiE,CAAAA,CAAe3mE,IAAf2mE,CAAoB5pD,CAApB4pD,GACAziE,KAAK2iE,aAAL3iE,CAAmB7L,GAAnB6L,CAAuB6Y,CAAvB7Y,EAAgC9P,CAAhC8P,CAFEA,GAIG6Y,CAAP;AAAOA,OApCT6nC,EAsCAA,CAAAA,CAAAnwD,SAAAmwD,CAAAkC,WAAAlC,GAAA,UAAYc,CAAZ,EAA6BvgD,CAA7B,EAAwDqX,CAAxD,EAAwDA;AAAxD,YAAA5P,CAAAA,GAAA1I,IAAA;AAIE,eAHKsY,CAAAA,KACHA,CAAAA,GAAW,CADRA,CAAAA,EAGEtY,KAAKs9B,QAALt9B,CAAcgI,KAAdhI,CAAoB,SAApBA,EAA+B,4BAA/BA,EAA6D,YAAA;AAClE,cAAMgnC,CAAAA,GAAWwa,CAAAA,CAAGzsD,KAAHysD,CAASpmD,MAATomD,CAAgB,UAAClzD,CAAD,EAAI2D,CAAJ,EAAIA;AAAM,mBAAA3D,CAAAA,GAAI2D,CAAJ;AAAIA,WAA9BuvD,IAAmClpC,CAApD;AAAA,cACMza,CAAAA,GAAO6K,CAAAA,CAAKwD,SAALxD,CAAek6C,WAAfl6C,CACT84C,CAAAA,CAAG3oC,OADMnQ,EACG84C,CAAAA,CAAG9oC,KADNhQ,EACa84C,CAAAA,CAAG/oC,MADhB/P,EACwBs+B,CADxBt+B,EACkCA,CAAAA,CAAKm6D,aAALn6D,CAAmBzH,CAAnByH,CADlCA,EACgE4P,CADhE5P,CADb;AAGA,iBAAOA,CAAAA,CAAKy6D,YAALz6D,CAAkBzH,CAAlByH,EAA4B7K,CAA5B6K,CAAP;AAAmC7K,SAJ9BmC,CAAP;AAIqCnC,OA9CvC6iD,EAiDAA,CAAAA,CAAAnwD,SAAAmwD,CAAA0C,uBAAA1C,GAAA,UAAwBc,CAAxB,EAAwBA;AAAxB,YAAA94C,CAAAA,GAAA1I,IAAA;AACE,eAAOA,KAAKs9B,QAALt9B,CAAcgI,KAAdhI,CAAoB,SAApBA,EAA+B,wCAA/BA,EAAyE,YAAA;AAC9E,cAAMgnC,CAAAA,GAAWwa,CAAAA,CAAGzsD,KAAHysD,CAASpmD,MAATomD,CAAgB,UAAClzD,CAAD,EAAI2D,CAAJ,EAAIA;AAAM,mBAAA3D,CAAAA,GAAI2D,CAAJ;AAAIA,WAA9BuvD,CAAjB;AAAA,cACM3jD,CAAAA,GAAO6K,CAAAA,CAAKwD,SAALxD,CAAek6C,WAAfl6C,CAA2B84C,CAAAA,CAAG3oC,OAA9BnQ,EAAuC84C,CAAAA,CAAG9oC,KAA1ChQ,EAAiD84C,CAAAA,CAAG/oC,MAApD/P,EAAuE,IAAXs+B,CAA5Dt+B,EAA0E,MAA1EA,EAAkF,CAAlFA,CADb;AAEA,iBAAO,IAAI1F,YAAJ,CAAiBnF,CAAAA,CAAKyD,MAAtB,EAA8BzD,CAAAA,CAAK0D,UAAnC,EAA+CylC,CAA/C,CAAP;AAAsDA,SAHjDhnC,CAAP;AAGwDgnC,OArD1D0Z,EAwDAA,CAAAA,CAAAnwD,SAAAmwD,CAAAe,cAAAf,GAAA,UAAeY,CAAf,EAAyC8hB,CAAzC,EAAyCA;AACvC,YAAIlzE,CAAJ;;AACA,YAAI8P,KAAKuG,MAALvG,CAAY2gD,aAAZ3gD,KACF9P,CAAAA,GAAM8P,KAAK2iE,aAAL3iE,CAAmBxQ,GAAnBwQ,CAAuBshD,CAAAA,CAAYzoC,OAAnC7Y,CADJA,CAAJ,EAEW;AACHojE,UAAAA,CAAAA,IACFpjE,KAAK2iE,aAAL3iE,CAAmBwN,MAAnBxN,CAA0B9P,CAA1B8P,CADEojE;AAGJ,cAAMX,CAAAA,GAAgBziE,KAAKyiE,aAALziE,CAAmBxQ,GAAnBwQ,CAAuB9P,CAAvB8P,CAAtB;;AACA,cAAIyiE,CAAJ,EAAmB;AACjB,gBAAMrvE,CAAAA,GAAQqvE,CAAAA,CAAc5mE,OAAd4mE,CAAsBnhB,CAAAA,CAAYzoC,OAAlC4pD,CAAd;;AACA,gBAAA,CAAe,CAAf,KAAIrvE,CAAJ,EAAkB;AAChBqvE,cAAAA,CAAAA,CAAc3wE,MAAd2wE,CAAqBrvE,CAArBqvE,EAA4B,CAA5BA;AACA,kBAAIC,CAAAA,GAAe1iE,KAAK0iE,YAAL1iE,CAAkBxQ,GAAlBwQ,CAAsB9P,CAAtB8P,CAAnB;AACK0iE,cAAAA,CAAAA,KACHA,CAAAA,GAAe,EAAfA,EACA1iE,KAAK0iE,YAAL1iE,CAAkB7L,GAAlB6L,CAAsB9P,CAAtB8P,EAA2B0iE,CAA3B1iE,CAFG0iE,CAAAA,EAILA,CAAAA,CAAa5mE,IAAb4mE,CAAkBphB,CAAAA,CAAYzoC,OAA9B6pD,CAJKA;AAIyB7pD;AAAAA;AAMjC3oB;;AAAAA,QAAAA,CAAAA,IAAAA,CAAOkzE,CAAPlzE,KACHkZ,CAAAA,CAAAxC,MAAAwC,CAAO9D,OAAP8D,CAAe,gBAAfA,EAAiC,8BAA4Bk4C,CAAAA,CAAY5oC,KAAxC,GAA6C,GAA7C,GAAiD4oC,CAAAA,CAAY7oC,MAA9FrP,GACApJ,KAAKkM,SAALlM,CAAeojE,aAAfpjE,CAA6BshD,CAAAA,CAAYzoC,OAAzC7Y,CAFG9P;AAEsC2oB,OAlF7C6nC,EAqFAA,CAAAA,CAAAnwD,SAAAmwD,CAAAyiB,YAAAziB,GAAA,UAAaz/C,CAAb,EAAwCpD,CAAxC,EAAwCA;AACtC,eAAQA,CAAAA,CAAKuC,WAALvC,KAAqBmF,YAArBnF,GAAqCA,CAArCA,GAA4D,IAAImF,YAAJ,CAAiBnF,CAAjB,CAApE;AAAqFA,OAtFvF6iD,EA+GAA,CAAAA,CAAAnwD,SAAAmwD,CAAAwiB,aAAAxiB,GAAA,UAAcz/C,CAAd,EAAyCpD,CAAzC,EAAyCA;AACvC,YAAKA,CAAL,EAGA,OAAQA,CAAAA,CAAKuC,WAALvC,KAAqBmF,YAArBnF,GAAqCA,CAArCA,GAA4D,IAAImF,YAAJ,CAAiBnF,CAAjB,CAApE;AAAqFA,OAnHvF6iD,EAuIAA,CAAAA,CAAAnwD,SAAAmwD,CAAAmiB,aAAAniB,GAAA,UAAcz/C,CAAd,EAAcA;AACZ,eAAO,OAAP;AAAO,OAxITy/C,EAyJAA,CAAAA,CAAAnwD,SAAAmwD,CAAAa,mBAAAb,GAAA,YAAA;AACE1gD,aAAKkM,SAALlM,CAAeuhD,mBAAfvhD;AAAeuhD,OA1JjBb,EA4JFA,CAAA;AA1KA,KAAA,EAtBA;;AAsBaxyD,IAAAA,CAAAA,CAAAwyD,cAAAxyD,GAAAwyD,CAAAxyD;AAAAwyD,G/JyDb,E+JzDaA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;ACtBb,QAAAt3C,CAAAA,GAAA1a,CAAAA,CAAA,CAAAA,CAAA;AAAA,QAEA20E,CAAAA,GAAA30E,CAAAA,CAAA,GAAAA,CAFA;AAAA,QAIMqR,CAAAA,GAA6C,EAJnD;;AA2CA,aAAgBujE,CAAhB,CAAsCzjB,CAAtC,EAAsCA;AACpC,UAUIqL,CAVJ;AAAA,UAAMqY,CAAAA,GAsCR,YAAA;AACE,YAAMA,CAAAA,GAA4BzzB,QAAAA,CAAS0zB,aAAT1zB,CAAuB,QAAvBA,CAAlC;AAGA,eAFAyzB,CAAAA,CAAO7qD,KAAP6qD,GAAe,CAAfA,EACAA,CAAAA,CAAO9qD,MAAP8qD,GAAgB,CADhBA,EAEOA,CAAP;AA1CeE,OAsCjB,EAtCE;AAAA,UAWMC,CAAAA,GAV4C;AAChDpnE,QAAAA,KAAAA,EAAAA,CAAO,CADyC;AAEhDqnE,QAAAA,KAAAA,EAAAA,CAAO,CAFyC;AAGhDC,QAAAA,SAAAA,EAAAA,CAAW,CAHqC;AAIhDC,QAAAA,OAAAA,EAAAA,CAAS,CAJuC;AAKhDC,QAAAA,qBAAAA,EAAAA,CAAuB,CALyB;AAMhDC,QAAAA,kBAAAA,EAAAA,CAAoB,CAN4B;AAOhDC,QAAAA,4BAAAA,EAAAA,CAA8B;AAPkB,OADlD;;AAYA,UAAA,CAAA,CAAKnkB,CAAL,IAAgC,aAAdA,CAAlB,MACEqL,CAAAA,GAAKqY,CAAAA,CAAOU,UAAPV,CAAkB,QAAlBA,EAA4BG,CAA5BH,CADP,CAAA,EAGI,IAAA;AACE,eAAO,IAAIF,CAAAA,CAAAa,YAAJ,CAAiBhZ,CAAjB,EAAqB,CAArB,CAAP;AACA,OAFF,CAEE,OAAOlgD,CAAP,EAAOA;AACP5B,QAAAA,CAAAA,CAAAxC,MAAAwC,CAAO5D,OAAP4D,CAAe,kBAAfA,EAAmC,oEAAkE4B,CAArG5B;AAIN;AAAA,UAAA,CAAA,CAAKy2C,CAAL,IAAgC,YAAdA,CAAlB,MACEqL,CAAAA,GAAKqY,CAAAA,CAAOU,UAAPV,CAAkB,OAAlBA,EAA2BG,CAA3BH,KAAkCA,CAAAA,CAAOU,UAAPV,CAAkB,oBAAlBA,EAAwCG,CAAxCH,CADzC,CAAA,EAGI,IAAA;AACE,eAAO,IAAIF,CAAAA,CAAAa,YAAJ,CAAiBhZ,CAAjB,EAAqB,CAArB,CAAP;AACA,OAFF,CAEE,OAAOlgD,CAAP,EAAOA;AACP5B,QAAAA,CAAAA,CAAAxC,MAAAwC,CAAO5D,OAAP4D,CACI,kBADJA,EAEI,2FAAyF4B,CAF7F5B;AAON;AAAA,YAAM,IAAI3T,KAAJ,CAAU,wBAAV,CAAN;AApEFvH;;AAAAA,IAAAA,CAAAA,CAAA0xD,kBAAA1xD,GAAA,SAAgB0xD,CAAhB,CAAmCC,CAAnC,EAAmCA;AACjC,UAAIxzC,CAAJ;AAAIA,OAAAA,CACEwzC,CADFxzC,IAC6B,aAAdwzC,CADfxzC,KAC0C,YAAYtM,CADtDsM,GAEFA,CAAAA,GAAUtM,CAAAA,CAAMokE,MAFd93D,GAEc83D,CAAAA,CACLtkB,CADKskB,IACsB,YAAdtkB,CADRskB,KACkC,WAAWpkE,CAD7CokE,KAEhB93D,CAAAA,GAAUtM,CAAAA,CAAM08B,KAFA0nC,CAFd93D,EAOJA,CAAAA,GAAUA,CAAAA,IAAWi3D,CAAAA,CAAsBzjB,CAAtByjB,CAPjBj3D,EAQJwzC,CAAAA,GAAYA,CAAAA,IAAiC,MAApBxzC,CAAAA,CAAQtI,OAArB87C,GAAqC,OAArCA,GAA+C,QARvDxzC;AASJ,UAAM6+C,CAAAA,GAAK7+C,CAAAA,CAAQ6+C,EAAnB;AAIA,aAFAnrD,CAAAA,CAAM8/C,CAAN9/C,CAAAA,GAAmBsM,CAAnBtM,EAEImrD,CAAAA,CAAGkZ,aAAHlZ,MAAGkZ,OACErkE,CAAAA,CAAM8/C,CAAN9/C,CADFqkE,EAEExkB,CAAAA,CAAmBC,CAAnBD,CAFLsL,KAKJA,CAAAA,CAAGe,OAAHf,CAAWA,CAAAA,CAAGmZ,UAAdnZ,GACAA,CAAAA,CAAGe,OAAHf,CAAWA,CAAAA,CAAGoZ,YAAdpZ,CADAA,EAEAA,CAAAA,CAAGe,OAAHf,CAAWA,CAAAA,CAAGS,KAAdT,CAFAA,EAGAA,CAAAA,CAAGe,OAAHf,CAAWA,CAAAA,CAAGqZ,MAAdrZ,CAHAA,EAIAA,CAAAA,CAAGe,OAAHf,CAAWA,CAAAA,CAAGsZ,mBAAdtZ,CAJAA,EAKAA,CAAAA,CAAGe,OAAHf,CAAWA,CAAAA,CAAGuZ,eAAdvZ,CALAA,EAMAA,CAAAA,CAAGQ,MAAHR,CAAUA,CAAAA,CAAGwZ,YAAbxZ,CANAA,EAOAA,CAAAA,CAAGQ,MAAHR,CAAUA,CAAAA,CAAGyZ,SAAbzZ,CAPAA,EAQAA,CAAAA,CAAG0Z,QAAH1Z,CAAYA,CAAAA,CAAG2Z,IAAf3Z,CARAA,EAUO7+C,CAfH6+C,CAAJ;AAeO7+C,KA7BTne,EAgCAA,CAAAA,CAAAo1E,qBAAAp1E,GAAAo1E,CAhCAp1E;AAgCAo1E,GhKoCA,EgKpCAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,YAAAA,IAAAA,UAAAA,CAAAA,EAAAA;AAAAA,UAAAA,CAAAA,IAAAA,CAAAA,CAAAA,UAAAA,EAAAA,OAAAA,CAAAA;AAAAA,UAAAA,CAAAA,GAAAA,EAAAA;AAAAA,UAAAA,QAAAA,CAAAA,EAAAA,KAAAA,IAAAA,CAAAA,IAAAA,CAAAA,EAAAA,MAAAA,CAAAA,cAAAA,CAAAA,IAAAA,CAAAA,CAAAA,EAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,aAAAA,CAAAA,CAAAA,OAAAA,GAAAA,CAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;AC3CA,QAAArR,CAAAA,GAAAvjE,CAAAA,CAAA,EAAAA,CAAA;AAAA,QAEAo2E,CAAAA,GAAAx7D,CAAAA,CAAA5a,CAAAA,CAAA,GAAAA,CAAA4a,CAFA;AAAA,QAQA46D,CAAAA,GAAA,YAAA;AAoCE,eAAAA,CAAA,CAAYhZ,CAAZ,EAAuCnnD,CAAvC,EAAuCA;AAF/B/D,aAAA+kE,gBAAA/kE,GAAA+kE,CAAmB,CAAnB/kE,EAGNA,KAAKkrD,EAALlrD,GAAUkrD,CAHJlrD,EAINA,KAAK+D,OAAL/D,GAAe+D,CAJT/D,EAMNA,KAAKglE,aAALhlE,EANMA,EAONA,KAAKilE,YAALjlE,GAAoBA,KAAKklE,kBAALllE,EAPdA,EAQNA,KAAKmlE,WAALnlE,GAAmBA,KAAKolE,iBAALplE,EARbA,EASNA,KAAKqlE,oBAALrlE,EATMA;AAqaV;;AAAA,aAzZEkkE,CAAAA,CAAA3zE,SAAA2zE,CAAArgB,eAAAqgB,GAAA,UAAgBxrD,CAAhB,EAA+BD,CAA/B,EAA+CkrC,CAA/C,EAAqE9lD,CAArE,EAAqEA;AACnE,YAAMqtD,CAAAA,GAAKlrD,KAAKkrD,EAAhB;AAAA,YAEMryC,CAAAA,GAAUqyC,CAAAA,CAAGoa,aAAHpa,EAFhB;AAIAA,QAAAA,CAAAA,CAAGuJ,WAAHvJ,CAAeA,CAAAA,CAAGqa,UAAlBra,EAA8BryC,CAA9BqyC,GACAA,CAAAA,CAAGsa,aAAHta,CAAiBA,CAAAA,CAAGqa,UAApBra,EAAgCA,CAAAA,CAAGua,kBAAnCva,EAAuDA,CAAAA,CAAGwa,OAA1Dxa,CADAA,EAEAA,CAAAA,CAAGsa,aAAHta,CAAiBA,CAAAA,CAAGqa,UAApBra,EAAgCA,CAAAA,CAAGya,kBAAnCza,EAAuDA,CAAAA,CAAGwa,OAA1Dxa,CAFAA,EAGAA,CAAAA,CAAGsa,aAAHta,CAAiBA,CAAAA,CAAGqa,UAApBra,EAAgCA,CAAAA,CAAG0a,cAAnC1a,EAAmDA,CAAAA,CAAG2a,aAAtD3a,CAHAA,EAIAA,CAAAA,CAAGsa,aAAHta,CAAiBA,CAAAA,CAAGqa,UAApBra,EAAgCA,CAAAA,CAAG4a,cAAnC5a,EAAmDA,CAAAA,CAAG2a,aAAtD3a,CAJAA;AAKA,YAAM5pD,CAAAA,GAASzD,CAAAA,GAAO8lD,CAAAA,CAAQhwC,MAARgwC,CAAe9lD,CAAf8lD,EAAqBjrC,CAAAA,GAAQD,CAA7BkrC,CAAP9lD,GAA8C,IAA7D;AAQA,eAPAqtD,CAAAA,CAAG6a,UAAH7a,CACIA,CAAAA,CAAGqa,UADPra,EAEI,CAFJA,EAGIvH,CAAAA,CAAQmf,cAHZ5X,EAG4BxyC,CAH5BwyC,EAGmCzyC,CAHnCyyC,EAII,CAJJA,EAKIvH,CAAAA,CAAQyS,MALZlL,EAKoBvH,CAAAA,CAAQof,WAL5B7X,EAKyC5pD,CALzC4pD,GAMAlrD,KAAK4rD,UAAL5rD,EANAkrD,EAOOryC,CAAP;AAAOA,OAlBTqrD,EAoBAA,CAAAA,CAAA3zE,SAAA2zE,CAAAjB,aAAAiB,GAAA,UACIrrD,CADJ,EAC2BH,CAD3B,EAC0CD,CAD1C,EAC0DkrC,CAD1D,EACgF9lD,CADhF,EACgFA;AAC9E,YAAMqtD,CAAAA,GAAKlrD,KAAKkrD,EAAhB;AACAA,QAAAA,CAAAA,CAAGuJ,WAAHvJ,CAAeA,CAAAA,CAAGqa,UAAlBra,EAA8BryC,CAA9BqyC;AACA,YAAM5pD,CAAAA,GAASqiD,CAAAA,CAAQhwC,MAARgwC,CAAe9lD,CAAf8lD,EAAqBjrC,CAAAA,GAAQD,CAA7BkrC,CAAf;AACAuH,QAAAA,CAAAA,CAAG8a,aAAH9a,CACIA,CAAAA,CAAGqa,UADPra,EAEI,CAFJA,EAGI,CAHJA,EAII,CAJJA,EAKIxyC,CALJwyC,EAKWzyC,CALXyyC,EAKmBvH,CAAAA,CAAQyS,MAL3BlL,EAKmCvH,CAAAA,CAAQof,WAL3C7X,EAKwD5pD,CALxD4pD,GAMAlrD,KAAK4rD,UAAL5rD,EANAkrD;AAMKU,OA/BPsY,EAiCAA,CAAAA,CAAA3zE,SAAA2zE,CAAApQ,iBAAAoQ,GAAA,UAAkBrrD,CAAlB,EAAyCH,CAAzC,EAAwDD,CAAxD,EAAwDA;AACtD,YAAMyyC,CAAAA,GAAKlrD,KAAKkrD,EAAhB;AAEAA,QAAAA,CAAAA,CAAGuJ,WAAHvJ,CAAeA,CAAAA,CAAGqa,UAAlBra,EAA8BryC,CAA9BqyC,GACAA,CAAAA,CAAG+a,eAAH/a,CAAmBA,CAAAA,CAAGgb,WAAtBhb,EAAmClrD,KAAKmlE,WAAxCja,CADAA,EAEAA,CAAAA,CAAGib,oBAAHjb,CACIA,CAAAA,CAAGgb,WADPhb,EACoBA,CAAAA,CAAGkb,iBADvBlb,EAC0CA,CAAAA,CAAGqa,UAD7Cra,EACyDryC,CADzDqyC,EAEI,CAFJA,CAFAA,EAKAlrD,KAAK4rD,UAAL5rD,EALAkrD,EAMAA,CAAAA,CAAGmb,QAAHnb,CAAY,CAAZA,EAAe,CAAfA,EAAkBxyC,CAAlBwyC,EAAyBzyC,CAAzByyC,CANAA,EAOAA,CAAAA,CAAGob,OAAHpb,CAAW,CAAXA,EAAc,CAAdA,EAAiBxyC,CAAjBwyC,EAAwBzyC,CAAxByyC,CAPAA;AAOwBzyC,OA3C1ByrD,EA6CAA,CAAAA,CAAA3zE,SAAA2zE,CAAAthB,WAAAshB,GAAA,UACIrrD,CADJ,EAC2BH,CAD3B,EAC0CD,CAD1C,EAC0DuuB,CAD1D,EAC4E/lC,CAD5E,EAEIqX,CAFJ,EAEIA;AACF,YAAM4yC,CAAAA,GAAKlrD,KAAKkrD,EAAhB;AACK5yC,QAAAA,CAAAA,KACHA,CAAAA,GAAW,CADRA,CAAAA,EAGAtY,KAAK+kE,gBAAL/kE,IACHA,KAAK8zD,iBAAL9zD,CAAuB6Y,CAAvB7Y,EAAgC0Y,CAAhC1Y,EAAuCyY,CAAvCzY,CAJGsY;AAML,YAAMqrC,CAAAA,GAAU3jD,KAAK4jD,UAAL5jD,CAAgBiB,CAAhBjB,EAA0BsY,CAA1BtY,CAAhB;AAAA,YACMsB,CAAAA,GAASqiD,CAAAA,CAAQ4iB,QAAR5iB,CAAiBjrC,CAAAA,GAAQD,CAAzBkrC,CADf;AAWA,eARAuH,CAAAA,CAAGuJ,WAAHvJ,CAAeA,CAAAA,CAAGqa,UAAlBra,EAA8BryC,CAA9BqyC,GACAA,CAAAA,CAAGib,oBAAHjb,CACIA,CAAAA,CAAGgb,WADPhb,EACoBA,CAAAA,CAAGkb,iBADvBlb,EAC0CA,CAAAA,CAAGqa,UAD7Cra,EACyDryC,CADzDqyC,EAEI,CAFJA,CADAA,EAKAA,CAAAA,CAAGsb,UAAHtb,CAAc,CAAdA,EAAiB,CAAjBA,EAAoBxyC,CAApBwyC,EAA2BzyC,CAA3ByyC,EAAmCA,CAAAA,CAAGub,IAAtCvb,EAA4CvH,CAAAA,CAAQof,WAApD7X,EAAiE5pD,CAAjE4pD,CALAA,EAMAlrD,KAAK4rD,UAAL5rD,EANAkrD,EAQOvH,CAAAA,CAAQtvC,MAARsvC,CAAeriD,CAAfqiD,EAAuB3c,CAAvB2c,CAAP;AAA8B3c,OAlEhCk9B,EAoEAA,CAAAA,CAAA3zE,SAAA2zE,CAAAwC,kBAAAxC,GAAA,YAAA;AAEE,eAAA,CAAO,CAAP;AAAO,OAtETA,EAwEAA,CAAAA,CAAA3zE,SAAA2zE,CAAAyC,gBAAAzC,GAAA,YAAA;AACE,YAAMhZ,CAAAA,GAAKlrD,KAAKkrD,EAAhB;AAEA,eAAO,aADGA,CAAAA,CAAG0b,YAAH1b,CAAgBlrD,KAAKkrD,EAALlrD,CAAQ6mE,cAAxB3b,IACYA,CAAAA,CAAG4b,QAAlB,CAAP;AAAyBA,OA3E3B5C,EA6EAA,CAAAA,CAAA3zE,SAAA2zE,CAAA6C,iBAAA7C,GAAA,YAAA;AACE,eAAOlkE,KAAKkrD,EAALlrD,CAAQ4mE,YAAR5mE,CAAqBA,KAAKkrD,EAALlrD,CAAQgnE,kBAA7BhnE,CAAP;AAAoCgnE,OA9EtC9C,EAgFAA,CAAAA,CAAA3zE,SAAA2zE,CAAA+C,qBAAA/C,GAAA,YAAA;AACE,eAAOlkE,KAAKkrD,EAALlrD,CAAQ4mE,YAAR5mE,CAAqBA,KAAKkrD,EAALlrD,CAAQknE,mBAA7BlnE,CAAP;AAAoCknE,OAjFtChD,EAmFAA,CAAAA,CAAA3zE,SAAA2zE,CAAAhQ,mBAAAgQ,GAAA,UAAoBnQ,CAApB,EAA4CC,CAA5C,EAA4CA;AAC1C,YAAM9I,CAAAA,GAAKlrD,KAAKkrD,EAAhB;AACAA,QAAAA,CAAAA,CAAGic,mBAAHjc,CAAuB6I,CAAvB7I,EAAuC,CAAvCA,EAA0CA,CAAAA,CAAG/zD,KAA7C+zD,EAA6C/zD,CAAO,CAApD+zD,EAA2D,EAA3DA,EAA+D,CAA/DA,GACAA,CAAAA,CAAGkc,uBAAHlc,CAA2B6I,CAA3B7I,CADAA,EAC2B6I,CACC,CADDA,KACvBC,CADuBD,KAEzB7I,CAAAA,CAAGic,mBAAHjc,CAAuB8I,CAAvB9I,EAA2C,CAA3CA,EAA8CA,CAAAA,CAAG/zD,KAAjD+zD,EAAiD/zD,CAAO,CAAxD+zD,EAA+D,EAA/DA,EAAmE,EAAnEA,GACAA,CAAAA,CAAGkc,uBAAHlc,CAA2B8I,CAA3B9I,CAHyB6I,CAD3B7I,EAMAlrD,KAAK4rD,UAAL5rD,EANAkrD;AAMKU,OA3FPsY,EA6FAA,CAAAA,CAAA3zE,SAAA2zE,CAAArQ,aAAAqQ,GAAA,UACIrR,CADJ,EAEIc,CAFJ,EAEIA;AAEF,YAAMzI,CAAAA,GAAKlrD,KAAKkrD,EAAhB;AAAA,YACMoH,CAAAA,GAAUpH,CAAAA,CAAG2I,aAAH3I,EADhB;AAOA,eAHAA,CAAAA,CAAGmc,YAAHnc,CAAgBoH,CAAhBpH,EAAyB2H,CAAzB3H,GACAA,CAAAA,CAAGmc,YAAHnc,CAAgBoH,CAAhBpH,EAAyByI,CAAzBzI,CADAA,EAEAA,CAAAA,CAAGoc,WAAHpc,CAAeoH,CAAfpH,CAFAA,EAGOoH,CAAP;AAAOA,OAxGT4R,EA0GAA,CAAAA,CAAA3zE,SAAA2zE,CAAAzQ,aAAAyQ,GAAA,UAAczgB,CAAd,EAAoC8jB,CAApC,EAAoCA;AAClC,YAAMrc,CAAAA,GAAKlrD,KAAKkrD,EAAhB;AAAA,YACMsc,CAAAA,GAAStc,CAAAA,CAAGuc,YAAHvc,CAAgBqc,CAAhBrc,CADf;AAEA,YAAA,CAAKsc,CAAL,EACE,MAAM,IAAI/xE,KAAJ,CAAU,4CAA0C8xE,CAApD,CAAN;AAKF,YAFArc,CAAAA,CAAGzH,YAAHyH,CAAgBsc,CAAhBtc,EAAwBzH,CAAxByH,GACAA,CAAAA,CAAGuI,aAAHvI,CAAiBsc,CAAjBtc,CADAA,EACiBsc,CACwC,CADxCA,KACbtc,CAAAA,CAAGwc,kBAAHxc,CAAsBsc,CAAtBtc,EAA8BA,CAAAA,CAAGyc,cAAjCzc,CAAJ,EACE,MAAM,IAAIz1D,KAAJ,CAAU,+BAA6By1D,CAAAA,CAAG0c,gBAAH1c,CAAoBsc,CAApBtc,CAAvC,CAAN;AAEF,eAAOsc,CAAP;AAAOA,OAtHTtD,EAwHAA,CAAAA,CAAA3zE,SAAA2zE,CAAApR,YAAAoR,GAAA,UAAasD,CAAb,EAAaA;AACXxnE,aAAKkrD,EAALlrD,CAAQ8yD,YAAR9yD,CAAqBwnE,CAArBxnE;AAAqBwnE,OAzHvBtD,EA2HAA,CAAAA,CAAA3zE,SAAA2zE,CAAApP,oBAAAoP,GAAA,UAAqBrrD,CAArB,EAA4C+gC,CAA5C,EAA8Dib,CAA9D,EAA8DA;AAC5D,YAAM3J,CAAAA,GAAKlrD,KAAKkrD,EAAhB;AACAA,QAAAA,CAAAA,CAAG2c,aAAH3c,CAAiBA,CAAAA,CAAG4b,QAAH5b,GAActR,CAA/BsR,GACAlrD,KAAK4rD,UAAL5rD,EADAkrD,EAEAA,CAAAA,CAAGuJ,WAAHvJ,CAAeA,CAAAA,CAAGqa,UAAlBra,EAA8BryC,CAA9BqyC,CAFAA,EAGAlrD,KAAK4rD,UAAL5rD,EAHAkrD,EAIAA,CAAAA,CAAGc,SAAHd,CAAa2J,CAAb3J,EAA4BtR,CAA5BsR,CAJAA,EAKAlrD,KAAK4rD,UAAL5rD,EALAkrD;AAKKU,OAlIPsY,EAoIAA,CAAAA,CAAA3zE,SAAA2zE,CAAAjZ,IAAAiZ,GAAA,YAAA;AACElkE,aAAKkrD,EAALlrD,CAAQ8nE,UAAR9nE,CAAmBA,KAAKkrD,EAALlrD,CAAQ+nE,cAA3B/nE,EAA2C,CAA3CA,EAA8C,CAA9CA,GACAA,KAAK4rD,UAAL5rD,EADAA;AACK4rD,OAtIPsY,EAwIAA,CAAAA,CAAA3zE,SAAA2zE,CAAAtY,UAAAsY,GAAA,YAAA;AACE,YAAIjS,CAAAA,CAAAthC,GAAAshC,CAAIngC,KAAR,EAAe;AACb,cAAMo5B,CAAAA,GAAKlrD,KAAKkrD,EAAhB;AAAA,cACMzlD,CAAAA,GAAQylD,CAAAA,CAAG8c,QAAH9c,EADd;AAAA,cAEI+M,CAAAA,GAAQ,EAFZ;;AAGA,kBAAQxyD,CAAR;AACE,iBAAMylD,CAAAA,CAAW,QAAjB;AACE;;AACF,iBAAMA,CAAAA,CAAe,YAArB;AACE+M,cAAAA,CAAAA,GAAQ,cAARA;AACA;;AACF,iBAAM/M,CAAAA,CAAgB,aAAtB;AACE+M,cAAAA,CAAAA,GAAQ,eAARA;AACA;;AACF,iBAAM/M,CAAAA,CAAoB,iBAA1B;AACE+M,cAAAA,CAAAA,GAAQ,mBAARA;AACA;;AACF,iBAAM/M,CAAAA,CAAgC,6BAAtC;AACE+M,cAAAA,CAAAA,GAAQ,+BAARA;AACA;;AACF,iBAAM/M,CAAAA,CAAgB,aAAtB;AACE+M,cAAAA,CAAAA,GAAQ,eAARA;AACA;;AACF,iBAAM/M,CAAAA,CAAqB,kBAA3B;AACE+M,cAAAA,CAAAA,GAAQ,oBAARA;AACA;;AACF;AACEA,cAAAA,CAAAA,GAAQ,0BAA0BxyD,CAAAA,CAAMhE,QAANgE,CAAe,EAAfA,CAAlCwyD;AAtBJ;;AAwBA,gBAAM,IAAIxiE,KAAJ,CAAUwiE,CAAV,CAAN;AAAgBA;AAAAA,OArKpBiM,EAwKAA,CAAAA,CAAA3zE,SAAA2zE,CAAAd,aAAAc,GAAA,UAAcrrD,CAAd,EAAcA;AACZ7Y,aAAKkrD,EAALlrD,CAAQojE,aAARpjE,CAAsB6Y,CAAtB7Y;AAAsB6Y,OAzKxBqrD,EA2KAA,CAAAA,CAAA3zE,SAAA2zE,CAAAnR,aAAAmR,GAAA,UAAc5R,CAAd,EAAcA;AACZtyD,aAAKkrD,EAALlrD,CAAQ+yD,aAAR/yD,CAAsBsyD,CAAtBtyD;AAAsBsyD,OA5KxB4R,EA8KAA,CAAAA,CAAA3zE,SAAA2zE,CAAAtgB,UAAAsgB,GAAA,UAAWjjE,CAAX,EAAuCqX,CAAvC,EAAyDkqC,CAAzD,EAAyDA;AACvD,YAAA,KADuD,CACvD,KADuDA,CACvD,KADuDA,CAAAA,GAAA,CACvD,GAAqB,MAAjBxiD,KAAK+D,OAAT,EACE,OAAO,IAAI+gE,CAAAA,CAAamD,qBAAjB,CAAuCjoE,KAAKkrD,EAA5C,EAA0E5yC,CAA1E,CAAP;;AAGF,gBAAQrX,CAAR;AACE,eAAK,OAAL;AACE,mBAAS,MAALuhD,CAAK,IAAiCxiD,KAAKkoE,wBAAtC,GACA,IAAIpD,CAAAA,CAAaqD,oBAAjB,CAAsCnoE,KAAKkrD,EAA3C,EAA+C5yC,CAA/C,CADA,GAGA,IAAIwsD,CAAAA,CAAaqD,oBAAjB,CACHnoE,KAAKkrD,EADF,EACM5yC,CADN,EACgBtY,KAAKooE,yBAALpoE,CAAgCqoE,cADhD,CAHT;;AAMF,eAAK,KAAL;AACE,kBAAM,IAAI5yE,KAAJ,CAAU,iBAAV,CAAN;;AACF,eAAK,MAAL;AACE,mBAAO,IAAIqvE,CAAAA,CAAawD,gBAAjB,CAAkCtoE,KAAKkrD,EAAvC,EAA2C5yC,CAA3C,CAAP;;AACF;AACE,kBAAM,IAAI7iB,KAAJ,CAAU,uBAAqBwL,CAA/B,CAAN;AAbJ;AAayCA,OAhM3CijE,EAmMAA,CAAAA,CAAA3zE,SAAA2zE,CAAA3iB,mBAAA2iB,GAAA,YAAA;AAEE,aADA,IAAMhZ,CAAAA,GAAKlrD,KAAKkrD,EAAhB,EACSqd,CAAAA,GAAO,CAAhB,EAAmBA,CAAAA,GAAOvoE,KAAKwoE,oBAA/B,EAA+BA,EAAwBD,CAAvD,EACErd,CAAAA,CAAG2c,aAAH3c,CAAiBA,CAAAA,CAAG4b,QAAH5b,GAAcqd,CAA/Brd,GACAA,CAAAA,CAAGuJ,WAAHvJ,CAAeA,CAAAA,CAAGqa,UAAlBra,EAA8B,IAA9BA,CADAA;AAC8B,OAvMlCgZ,EA0MAA,CAAAA,CAAA3zE,SAAA2zE,CAAAlnC,OAAAknC,GAAA,YAAA;AACE,YAAA,CAAIlkE,KAAKyoE,QAAT,EAAA;AAGA,cAAMvd,CAAAA,GAAKlrD,KAAKkrD,EAAhB;AACAA,UAAAA,CAAAA,CAAG+a,eAAH/a,CAAmBA,CAAAA,CAAGgb,WAAtBhb,EAAmC,IAAnCA,GACAA,CAAAA,CAAGwd,iBAAHxd,CAAqBlrD,KAAKmlE,WAA1Bja,CADAA,EAEAA,CAAAA,CAAGyd,UAAHzd,CAAcA,CAAAA,CAAG0d,YAAjB1d,EAA+B,IAA/BA,CAFAA,EAGAA,CAAAA,CAAG2d,YAAH3d,CAAgBlrD,KAAKilE,YAArB/Z,CAHAA,EAIAA,CAAAA,CAAGyd,UAAHzd,CAAcA,CAAAA,CAAG4d,oBAAjB5d,EAAuC,IAAvCA,CAJAA,EAKAA,CAAAA,CAAGvyB,MAAHuyB,EALAA,EAMAlrD,KAAKyoE,QAALzoE,GAAKyoE,CAAW,CANhBvd;AAMgB;AAAA,OArNlBgZ,EAwNQA,CAAAA,CAAA3zE,SAAA2zE,CAAA6E,qBAAA7E,GAAR,YAAA;AAEE,eAAO,IAAIlhE,YAAJ,CAAiB,CAAA,CACrB,CADqB,EAChB,CADgB,EACV,CADU,EACL,CADK,EACA,CADA,EACA,CACrB,CAFqB,EAErB,CAAM,CAFe,EAEV,CAFU,EAEL,CAFK,EAEA,CAFA,EAGtB,CAHsB,EAGhB,CAHgB,EAGV,CAHU,EAGL,CAHK,EAGA,CAHA,EAItB,CAJsB,EAItB,CAAO,CAJe,EAIV,CAJU,EAIL,CAJK,EAIA,CAJA,CAAjB,CAAP;AAIwB,OA9N1BkhE,EAiOQA,CAAAA,CAAA3zE,SAAA2zE,CAAAgB,kBAAAhB,GAAR,YAAA;AACE,YAAMhZ,CAAAA,GAAKlrD,KAAKkrD,EAAhB;AAAA,YACM5pD,CAAAA,GAAS4pD,CAAAA,CAAG5wC,YAAH4wC,EADf;AAEA,YAAA,CAAK5pD,CAAL,EACE,MAAM,IAAI7L,KAAJ,CAAU,8BAAV,CAAN;AAEF,YAAMuzE,CAAAA,GAAWhpE,KAAK+oE,qBAAL/oE,EAAjB;AAIA,eAHAkrD,CAAAA,CAAGyd,UAAHzd,CAAcA,CAAAA,CAAG0d,YAAjB1d,EAA+B5pD,CAA/B4pD,GACAA,CAAAA,CAAG+d,UAAH/d,CAAcA,CAAAA,CAAG0d,YAAjB1d,EAA+B8d,CAA/B9d,EAAyCA,CAAAA,CAAGge,WAA5Che,CADAA,EAEAlrD,KAAK4rD,UAAL5rD,EAFAkrD,EAGO5pD,CAAP;AAAOA,OA3OT4iE,EA6OQA,CAAAA,CAAA3zE,SAAA2zE,CAAAkB,iBAAAlB,GAAR,YAAA;AACE,YAAMiF,CAAAA,GAAKnpE,KAAKkrD,EAALlrD,CAAQolE,iBAARplE,EAAX;AACA,YAAA,CAAKmpE,CAAL,EACE,MAAM,IAAI1zE,KAAJ,CAAU,iCAAV,CAAN;AAEF,eAAO0zE,CAAP;AAAOA,OAlPTjF,EAqPQA,CAAAA,CAAA3zE,SAAA2zE,CAAAmB,oBAAAnB,GAAR,YAAA;AACE,YAAMhZ,CAAAA,GAAKlrD,KAAKkrD,EAAhB;AAMA,YAJAlrD,KAAKopE,qCAALppE,GAA6CA,KAAKqpE,wCAALrpE,EAA7CA,EACAA,KAAKkoE,wBAALloE,GAAgCA,KAAKspE,kBAALtpE,EADhCA,EAEAA,KAAKgjD,0BAALhjD,GAAkCA,KAAKupE,oBAALvpE,EAFlCA,EAIqB,MAAjBA,KAAK+D,OAAY,IAAZA,CAAkB/D,KAAKooE,yBAAX,IAAWA,CAA8BpoE,KAAKkoE,wBAAnE,EACE,MAAM,IAAIzyE,KAAJ,CAAU,wDAAV,CAAN;AAGFuK,aAAK0sD,gBAAL1sD,GAAK0sD,CAAoB1sD,KAAKkoE,wBAAzBxb,IAAqD1sD,KAAKwpE,iBAALxpE,EAA1DA,EAGAA,KAAKwgD,cAALxgD,GAAsBkrD,CAAAA,CAAG0b,YAAH1b,CAAgBA,CAAAA,CAAGue,gBAAnBve,CAHtBlrD,EAIAA,KAAKwoE,oBAALxoE,GAA4BkrD,CAAAA,CAAG0b,YAAH1b,CAAgBA,CAAAA,CAAGwe,uBAAnBxe,CAJ5BlrD,EAUIA,KAAK+D,OAVT/D;AAUS+D,OA1QXmgE,EAiRQA,CAAAA,CAAA3zE,SAAA2zE,CAAAc,aAAAd,GAAR,YAAA;AACuB,cAAjBlkE,KAAK+D,OAAY,GACnB/D,KAAK2pE,yBAAL3pE,GAAiCA,KAAKkrD,EAALlrD,CAAQ4pE,YAAR5pE,CAAqB,wBAArBA,CADd,IAGnBA,KAAK6pE,qBAAL7pE,GAA6BA,KAAKkrD,EAALlrD,CAAQ4pE,YAAR5pE,CAAqB,mBAArBA,CAA7BA,EACAA,KAAKooE,yBAALpoE,GAAiCA,KAAKkrD,EAALlrD,CAAQ4pE,YAAR5pE,CAAqB,wBAArBA,CAJd;AAImC,OAtR1DkkE,EA0RQA,CAAAA,CAAA3zE,SAAA2zE,CAAAmF,wCAAAnF,GAAR,YAAA;AAGE,YAAMhZ,CAAAA,GAAKlrD,KAAKkrD,EAAhB;AAAA,YACMryC,CAAAA,GAAUqyC,CAAAA,CAAGoa,aAAHpa,EADhB;AAEAA,QAAAA,CAAAA,CAAGuJ,WAAHvJ,CAAeA,CAAAA,CAAGqa,UAAlBra,EAA8BryC,CAA9BqyC;AACA,YAAM4X,CAAAA,GAAkC,MAAjB9iE,KAAK+D,OAAY,GAAKmnD,CAAAA,CAAoC4e,OAAzC,GAAmD5e,CAAAA,CAAGub,IAA9F;AACAvb,QAAAA,CAAAA,CAAG6a,UAAH7a,CAAcA,CAAAA,CAAGqa,UAAjBra,EAA6B,CAA7BA,EAAgC4X,CAAhC5X,EAAgD,CAAhDA,EAAmD,CAAnDA,EAAsD,CAAtDA,EAAyDA,CAAAA,CAAGub,IAA5Dvb,EAAkEA,CAAAA,CAAG/zD,KAArE+zD,EAA4E,IAA5EA;AAEA,YAAM6e,CAAAA,GAAc7e,CAAAA,CAAGka,iBAAHla,EAApB;AACAA,QAAAA,CAAAA,CAAG+a,eAAH/a,CAAmBA,CAAAA,CAAGgb,WAAtBhb,EAAmC6e,CAAnC7e,GAEAA,CAAAA,CAAGib,oBAAHjb,CAAwBA,CAAAA,CAAGgb,WAA3Bhb,EAAwCA,CAAAA,CAAGkb,iBAA3Clb,EAA8DA,CAAAA,CAAGqa,UAAjEra,EAA6EryC,CAA7EqyC,EAAsF,CAAtFA,CAFAA;AAIA,YAAM8e,CAAAA,GAAa9e,CAAAA,CAAG+e,sBAAH/e,CAA0BA,CAAAA,CAAGgb,WAA7Bhb,MAA8CA,CAAAA,CAAGgf,oBAApE;AAKA,eAJAhf,CAAAA,CAAGuJ,WAAHvJ,CAAeA,CAAAA,CAAGqa,UAAlBra,EAA8B,IAA9BA,GACAA,CAAAA,CAAG+a,eAAH/a,CAAmBA,CAAAA,CAAGgb,WAAtBhb,EAAmC,IAAnCA,CADAA,EAEAA,CAAAA,CAAGkY,aAAHlY,CAAiBryC,CAAjBqyC,CAFAA,EAGAA,CAAAA,CAAGwd,iBAAHxd,CAAqB6e,CAArB7e,CAHAA,EAIO8e,CAAP;AAAOA,OA7ST9F,EAgTQA,CAAAA,CAAA3zE,SAAA2zE,CAAAoF,kBAAApF,GAAR,YAAA;AACE,YAAqB,MAAjBlkE,KAAK+D,OAAT,EAASA;AACP,cAAA,CAAK/D,KAAK2pE,yBAAV,EACE,OAAA,CAAO,CAAP;AAAO,SAFX,MAKE,IAAA,CAAK3pE,KAAK6pE,qBAAV,EACE,OAAA,CAAO,CAAP;;AAGJ,eAAO7pE,KAAKopE,qCAAZ;AAAYA,OA1TdlF,EA6TQA,CAAAA,CAAA3zE,SAAA2zE,CAAAqF,oBAAArF,GAAR,YAAA;AACE,YAAqB,MAAjBlkE,KAAK+D,OAAT,EAASA;AACP,cAAA,CAAK/D,KAAK2pE,yBAAV,EACE,OAAA,CAAO,CAAP;AAAO,SAFX,MAIO;AACL,cAAA,CAAK3pE,KAAK6pE,qBAAV,EACE,OAAA,CAAO,CAAP;AAEF,cAAA,CAAK7pE,KAAKkrD,EAALlrD,CAAQ4pE,YAAR5pE,CAAqB,0BAArBA,CAAL,EACE,OAAA,CAAO,CAAP;AAGJ;;AAAA,eAAOA,KAAKopE,qCAAZ;AAAYA,OA1UdlF,EAgVQA,CAAAA,CAAA3zE,SAAA2zE,CAAAsF,iBAAAtF,GAAR,YAAA;AAIE,YAEIrrD,CAFJ;AAAA,YAGIkxD,CAHJ;AAAA,YAIIlX,CAJJ;AAAA,YAKIsX,CALJ;AAAA,YAMI7X,CANJ;AAAA,YAAMpH,CAAAA,GAAKlrD,KAAKkrD,EAAhB;;AAQA,YAAA;AACEryC,UAAAA,CAAAA,GAAUqyC,CAAAA,CAAGoa,aAAHpa,EAAVryC,EACAkxD,CAAAA,GAAc7e,CAAAA,CAAGka,iBAAHla,EADdryC,EAEAqyC,CAAAA,CAAGuJ,WAAHvJ,CAAeA,CAAAA,CAAGqa,UAAlBra,EAA8BryC,CAA9BqyC,CAFAryC;AAIA,cAAMiqD,CAAAA,GAAkC,MAAjB9iE,KAAK+D,OAAY,GAAKmnD,CAAAA,CAAoC4e,OAAzC,GAAmD5e,CAAAA,CAAGub,IAA9F;AASA,iBARAvb,CAAAA,CAAG6a,UAAH7a,CAAcA,CAAAA,CAAGqa,UAAjBra,EAA6B,CAA7BA,EAAgC4X,CAAhC5X,EAAgD,CAAhDA,EAAmD,CAAnDA,EAAsD,CAAtDA,EAAyDA,CAAAA,CAAGub,IAA5Dvb,EAAkEA,CAAAA,CAAG/zD,KAArE+zD,EAA4E,IAA5EA,GAEAA,CAAAA,CAAG+a,eAAH/a,CAAmBA,CAAAA,CAAGgb,WAAtBhb,EAAmC6e,CAAnC7e,CAFAA,EAGAA,CAAAA,CAAGib,oBAAHjb,CAAwBA,CAAAA,CAAGgb,WAA3Bhb,EAAwCA,CAAAA,CAAGkb,iBAA3Clb,EAA8DA,CAAAA,CAAGqa,UAAjEra,EAA6EryC,CAA7EqyC,EAAsF,CAAtFA,CAHAA,EAKAA,CAAAA,CAAGQ,MAAHR,CAAUA,CAAAA,CAAGS,KAAbT,CALAA,EAKaS,CAEbkH,CAAAA,GAAe3H,CAAAA,CAAGuc,YAAHvc,CAAgBA,CAAAA,CAAGwI,aAAnBxI,CAFFS,KAMbT,CAAAA,CAAGzH,YAAHyH,CAAgB2H,CAAhB3H,EAA8B,eAA9BA,GACAA,CAAAA,CAAGuI,aAAHvI,CAAiB2H,CAAjB3H,CADAA,EACiB2H,CAAAA,EAEjBsX,CAAAA,GAAiBjf,CAAAA,CAAGuc,YAAHvc,CAAgBA,CAAAA,CAAG0I,eAAnB1I,CAFA2H,CAAAA,KAMjB3H,CAAAA,CAAGzH,YAAHyH,CAAgBif,CAAhBjf,EAAgC,4DAAhCA,GACAA,CAAAA,CAAGuI,aAAHvI,CAAiBif,CAAjBjf,CADAA,EACiBif,CAAAA,EAEjB7X,CAAAA,GAAUpH,CAAAA,CAAG2I,aAAH3I,EAFOif,CAAAA,KAMjBjf,CAAAA,CAAGmc,YAAHnc,CAAgBoH,CAAhBpH,EAAyB2H,CAAzB3H,GACAA,CAAAA,CAAGmc,YAAHnc,CAAgBoH,CAAhBpH,EAAyBif,CAAzBjf,CADAA,EAEAA,CAAAA,CAAGoc,WAAHpc,CAAeoH,CAAfpH,CAFAA,EAGAA,CAAAA,CAAGqH,UAAHrH,CAAcoH,CAAdpH,CAHAA,EAKAA,CAAAA,CAAG4c,UAAH5c,CAAcA,CAAAA,CAAGkf,MAAjBlf,EAAyB,CAAzBA,EAA4B,CAA5BA,CALAA,EAMOA,CAAAA,CAAG8c,QAAH9c,OAAkBA,CAAAA,CAAGmf,QAZXF,CAPAtX,CAPJlH,IA0Be0e,CAtBnB,CADT;AACS,SAfX,SAeW;AAyBTnf,UAAAA,CAAAA,CAAGe,OAAHf,CAAWA,CAAAA,CAAGS,KAAdT,GAEIoH,CAAAA,IACFpH,CAAAA,CAAG6H,aAAH7H,CAAiBoH,CAAjBpH,CAHFA,EAKI2H,CAAAA,IACF3H,CAAAA,CAAG4H,YAAH5H,CAAgB2H,CAAhB3H,CANFA,EAQIif,CAAAA,IACFjf,CAAAA,CAAG4H,YAAH5H,CAAgBif,CAAhBjf,CATFA,EAWI6e,CAAAA,KACF7e,CAAAA,CAAG+a,eAAH/a,CAAmBA,CAAAA,CAAGgb,WAAtBhb,EAAmC,IAAnCA,GACAA,CAAAA,CAAGwd,iBAAHxd,CAAqB6e,CAArB7e,CAFE6e,CAXJ7e,EAeIryC,CAAAA,KACFqyC,CAAAA,CAAGuJ,WAAHvJ,CAAeA,CAAAA,CAAGqa,UAAlBra,EAA8B,IAA9BA,GACAA,CAAAA,CAAGkY,aAAHlY,CAAiBryC,CAAjBqyC,CAFEryC,CAfJqyC;AAiBmBryC;AAAAA,OArZvBqrD,EAyZFA,CAAA;AAvcA,KAAA,EARA;;AAQah2E,IAAAA,CAAAA,CAAAg2E,YAAAh2E,GAAAg2E,CAAAh2E;AAAAg2E,GjKuEb,EiKvEaA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;ACRb,QAAA96D,CAAAA,GAAA1a,CAAAA,CAAA,CAAAA,CAAA;AAAA,QAoCAu5E,CAAAA,GAAA,YAAA;AAKE,eAAAA,CAAA,CAAY/c,CAAZ,EAAwC5yC,CAAxC,EAAwCA;AACtC,YAAA,KADsC,CACtC,KADsCA,CACtC,KADsCA,CAAAA,GAAA,CACtC,GAAiB,MAAbA,CAAJ,EACEtY,KAAK8iE,cAAL9iE,GAAsBkrD,CAAAA,CAAGof,IAAzBtqE,EACAA,KAAKo2D,MAALp2D,GAAckrD,CAAAA,CAAGqf,GADjBvqE,EAEAA,KAAK+iE,WAAL/iE,GAAmBkrD,CAAAA,CAAG/zD,KAFtB6I,EAGAA,KAAKyjC,WAALzjC,GAAmBsY,CAHnBtY,CADF,KAKO;AAAA,cAAiB,MAAbsY,CAAJ,EAML,MAAM,IAAI7iB,KAAJ,CAAU,iCAA+B6iB,CAAzC,CAAN;AALAtY,eAAK8iE,cAAL9iE,GAAsBkrD,CAAAA,CAAG4e,OAAzB9pE,EACAA,KAAKo2D,MAALp2D,GAAckrD,CAAAA,CAAGub,IADjBzmE,EAEAA,KAAK+iE,WAAL/iE,GAAmBkrD,CAAAA,CAAG/zD,KAFtB6I,EAGAA,KAAKyjC,WAALzjC,GAAmBsY,CAHnBtY;AAGmBsY;AAiCzB;;AAAA,aA5BE2vD,CAAAA,CAAA13E,SAAA03E,CAAAt0D,MAAAs0D,GAAA,UAAOp6D,CAAP,EAAmC28D,CAAnC,EAAmCA;AACjC,YAAIt9D,CAAJ,EACI7X,CADJ;AAeA,eAbIwY,CAAAA,CAAIzN,WAAJyN,KAAoB7K,YAApB6K,KACFzE,CAAAA,CAAAxC,MAAAwC,CAAO5D,OAAP4D,CAAe,SAAfA,EAA0B,yDAA1BA,GACA/T,CAAAA,GAAS,IAAI2N,YAAJ,CAAiB6K,CAAjB,CAFPA,GAIA28D,CAAAA,GAAcxqE,KAAKyjC,WAAnB+mC,GAAiC38D,CAAAA,CAAIzc,MAArCo5E,IACFphE,CAAAA,CAAAxC,MAAAwC,CAAO5D,OAAP4D,CAAe,SAAfA,EAA0B,gDAA1BA,GACA/T,CAAAA,GAASwY,CADTzE,EAEA8D,CAAAA,GAASlN,KAAKumE,QAALvmE,CAAcwqE,CAAAA,GAAcxqE,KAAKyjC,WAAjCzjC,CAFToJ,EAGA/T,CAAAA,CAAOiI,OAAPjI,CAAe,UAAC8E,CAAD,EAAI5L,CAAJ,EAAIA;AAAM,iBAAA2e,CAAAA,CAAO3e,CAAP2e,CAAAA,GAAY/S,CAAZ;AAAYA,SAArC9E,CAJEm1E,IAOFt9D,CAAAA,GADA7X,CAAAA,GAASwY,CAVPA,EAaGX,CAAP;AAAOA,OAhBT+6D,EAkBAA,CAAAA,CAAA13E,SAAA03E,CAAA1B,QAAA0B,GAAA,UAASj0E,CAAT,EAASA;AACP,eAAO,IAAIgP,YAAJ,CAAwB,IAAPhP,CAAjB,CAAP;AAAwBA,OAnB1Bi0E,EAqBAA,CAAAA,CAAA13E,SAAA03E,CAAA5zD,MAAA4zD,GAAA,UAAO3mE,CAAP,EAAsC0lC,CAAtC,EAAsCA;AACpC,eAAyB,MAArBhnC,KAAKyjC,WAAgB,GACDniC,CAAAA,CAAwBjD,MAAxBiD,CAA+B,UAAC1R,CAAD,EAAQwD,CAAR,EAAQA;AAAU,iBAAAA,CAAAA,GAAQ,CAARA,IAAc,CAAd;AAAc,SAA/DkO,EAAkEod,QAAlEpd,CAA2E,CAA3EA,EAA8E0lC,CAA9E1lC,CADC,GAIlBA,CAAAA,CAAOod,QAAPpd,CAAgB,CAAhBA,EAAmB0lC,CAAnB1lC,CAJP;AAI0B0lC,OA1B5BihC,EA4BFA,CAAA;AAhDA,KAAA,EApCA;;AAoCa/5E,IAAAA,CAAAA,CAAA+5E,qBAAA/5E,GAAA+5E,CAAA/5E;;AAoDb,QAAAi6E,CAAAA,GAAA,YAAA;AAKE,eAAAA,CAAA,CAAYjd,CAAZ,EAAuC5yC,CAAvC,EAAqDyqD,CAArD,EAAqDA;AACnD,YAAA,KADqC,CACrC,KADqCzqD,CACrC,KADqCA,CAAAA,GAAA,CACrC,GAAiB,MAAbA,CAAa,IAAkB,MAAbA,CAAtB,EACE,MAAM,IAAI7iB,KAAJ,CAAU,iCAA+B6iB,CAAzC,CAAN;AAEFtY,aAAK8iE,cAAL9iE,GAAsBkrD,CAAAA,CAAGub,IAAzBzmE,EACAA,KAAKo2D,MAALp2D,GAAckrD,CAAAA,CAAGub,IADjBzmE,EAEAA,KAAKyjC,WAALzjC,GAAmBsY,CAFnBtY,EAGAA,KAAK+iE,WAAL/iE,GAAmB+iE,CAAAA,IAAe7X,CAAAA,CAAG/zD,KAHrC6I;AAwBJ;;AAAA,aAnBEmoE,CAAAA,CAAA53E,SAAA43E,CAAAx0D,MAAAw0D,GAAA,UAAOt6D,CAAP,EAA0B28D,CAA1B,EAA0BA;AACxB,YAAI/vB,CAAAA,GAAO5sC,CAAX;AAMA,eALyB,MAArB7N,KAAKyjC,WAAgB,KACvBr6B,CAAAA,CAAAxC,MAAAwC,CAAO9D,OAAP8D,CAAe,SAAfA,EAA0B,+BAA1BA,GACAqxC,CAAAA,GAAOz6C,KAAKumE,QAALvmE,CAAcwqE,CAAdxqE,CADPoJ,EAEAyE,CAAAA,CAAIvQ,OAAJuQ,CAAY,UAAC1T,CAAD,EAAI5L,CAAJ,EAAIA;AAAM,iBAAAksD,CAAAA,CAAS,IAAJlsD,CAALksD,CAAAA,GAActgD,CAAd;AAAcA,SAApC0T,CAHuB,GAKlB4sC,CAAP;AAAOA,OAPT0tB,EASAA,CAAAA,CAAA53E,SAAA43E,CAAA5B,QAAA4B,GAAA,UAASn0E,CAAT,EAASA;AACP,eAAO,IAAIgP,YAAJ,CAAwB,IAAPhP,CAAjB,CAAP;AAAwBA,OAV1Bm0E,EAYAA,CAAAA,CAAA53E,SAAA43E,CAAA9zD,MAAA8zD,GAAA,UAAO7mE,CAAP,EAAsC0lC,CAAtC,EAAsCA;AACpC,eAAyB,MAArBhnC,KAAKyjC,WAAgB,GACDniC,CAAAA,CAAwBjD,MAAxBiD,CAA+B,UAAC1R,CAAD,EAAQwD,CAAR,EAAQA;AAAU,iBAAAA,CAAAA,GAAQ,CAARA,IAAc,CAAd;AAAc,SAA/DkO,EAAkEod,QAAlEpd,CAA2E,CAA3EA,EAA8E0lC,CAA9E1lC,CADC,GAIlBA,CAAAA,CAAOod,QAAPpd,CAAgB,CAAhBA,EAAmB0lC,CAAnB1lC,CAJP;AAI0B0lC,OAjB5BmhC,EAmBFA,CAAA;AAjCA,KAAA,EAAA;;AAAaj6E,IAAAA,CAAAA,CAAAi6E,oBAAAj6E,GAAAi6E,CAAAj6E;;AAmCb,QAAAo6E,CAAAA,GAAA,YAAA;AAKE,eAAAA,CAAA,CAAYpd,CAAZ,EAAuC5yC,CAAvC,EAAuCA;AACrC,YAAA,KADqC,CACrC,KADqCA,CACrC,KADqCA,CAAAA,GAAA,CACrC,GAFFtY,KAAAyjC,WAAAzjC,GAAc,CAEZ,EAAiB,MAAbsY,CAAJ,EACEtY,KAAK8iE,cAAL9iE,GAAsBkrD,CAAAA,CAAGuf,KAAzBzqE,EACAA,KAAKo2D,MAALp2D,GAAckrD,CAAAA,CAAGuf,KADjBzqE,EAEAA,KAAK+iE,WAAL/iE,GAAmBkrD,CAAAA,CAAGwf,aAFtB1qE,EAGAA,KAAKyjC,WAALzjC,GAAmBsY,CAHnBtY,CADF,KAKO;AAAA,cAAiB,MAAbsY,CAAJ,EAML,MAAM,IAAI7iB,KAAJ,CAAU,iCAA+B6iB,CAAzC,CAAN;AALAtY,eAAK8iE,cAAL9iE,GAAsBkrD,CAAAA,CAAGub,IAAzBzmE,EACAA,KAAKo2D,MAALp2D,GAAckrD,CAAAA,CAAGub,IADjBzmE,EAEAA,KAAK+iE,WAAL/iE,GAAmBkrD,CAAAA,CAAGwf,aAFtB1qE,EAGAA,KAAKyjC,WAALzjC,GAAmBsY,CAHnBtY;AAGmBsY;AAiBzB;;AAAA,aAZEgwD,CAAAA,CAAA/3E,SAAA+3E,CAAA30D,MAAA20D,GAAA,UAAOz6D,CAAP,EAAwB28D,CAAxB,EAAwBA;AACtB,eAAO,IAAI9nE,UAAJ,CAAemL,CAAAA,CAAIvM,MAAnB,EAA2BuM,CAAAA,CAAItM,UAA/B,EAA2CsM,CAAAA,CAAIrM,UAA/C,CAAP;AAAsDA,OADxD8mE,EAGAA,CAAAA,CAAA/3E,SAAA+3E,CAAA/B,QAAA+B,GAAA,UAASt0E,CAAT,EAASA;AACP,eAAO,IAAI0O,UAAJ,CAAe1O,CAAAA,GAAOgM,KAAKyjC,WAA3B,CAAP;AAAkCA,OAJpC6kC,EAMAA,CAAAA,CAAA/3E,SAAA+3E,CAAAj0D,MAAAi0D,GAAA,UAAOhnE,CAAP,EAAsC0lC,CAAtC,EAAsCA;AACpC,YAAI1lC,CAAAA,CAAOlB,WAAPkB,KAAuBoB,UAA3B,EACE,OAAOpB,CAAAA,CAAOod,QAAPpd,CAAgB,CAAhBA,EAAmB0lC,CAAnB1lC,CAAP;AAEF,cAAM,IAAI7L,KAAJ,CAAU,yBAAuB6L,CAAAA,CAAOlB,WAAxC,CAAN;AAA8CA,OAVhDkoE,EAYFA,CAAA;AAhCA,KAAA,EAAA;;AAAap6E,IAAAA,CAAAA,CAAAo6E,gBAAAp6E,GAAAo6E,CAAAp6E;AAAAo6E,GlK5Cb,EkK4CaA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;AC3Hb,QAAArW,CAAAA,GAAAvjE,CAAAA,CAAA,EAAAA,CAAA;AAAA,QAIAiuC,CAAAA,GAAA,YAAA;AAAA,eAAAA,CAAA,GAAAA,CAOA;;AAAA,aANEttC,MAAAA,CAAAC,cAAAD,CAAWstC,CAAAA,CAAApsC,SAAXlB,EAAW,OAAXA,EAAgB;AAAA,QAAA,GAAA,EAGhB,YAAA;AACE,iBAAO4iE,CAAAA,CAAAthC,GAAAshC,CAAIngC,KAAX;AAAWA,SAJG;AAIHA,QAAAA,GAAAA,EAJb,UAAiBliC,CAAjB,EAAiBA;AACfqiE,UAAAA,CAAAA,CAAAthC,GAAAshC,CAAIngC,KAAJmgC,GAAYriE,CAAZqiE;AAAYriE,SADE;AACFA,QAAAA,UAAAA,EAAAA,CAAAA,CADE;AACFA,QAAAA,YAAAA,EAAAA,CAAAA;AADE,OAAhBP,GAMFstC,CAAA;AAPA,KAAA,EAJA;;AAaazuC,IAAAA,CAAAA,CAAA0uC,OAAA1uC,GAAU,IAAIyuC,CAAJ,EAAVzuC;AAAcyuC,GnKkE3B,EmKlE2BA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,YAAAA,IAAAA,UAAAA,CAAAA,EAAAA;AAAAA,UAAAA,CAAAA,IAAAA,CAAAA,CAAAA,UAAAA,EAAAA,OAAAA,CAAAA;AAAAA,UAAAA,CAAAA,GAAAA,EAAAA;AAAAA,UAAAA,QAAAA,CAAAA,EAAAA,KAAAA,IAAAA,CAAAA,IAAAA,CAAAA,EAAAA,MAAAA,CAAAA,cAAAA,CAAAA,IAAAA,CAAAA,CAAAA,EAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,aAAAA,CAAAA,CAAAA,OAAAA,GAAAA,CAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;ACoF3B,QAAAguC,CAAAA,GAAArhE,CAAAA,CAAA5a,CAAAA,CAAA,EAAAA,CAAA4a,CAAA;AACapb,IAAAA,CAAAA,CAAA+F,MAAA/F,GAA4By8E,CAAAA,CAAW12E,MAAvC/F;AAAuC+F,GpKnBpD,EoKmBoDA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,YAAAA,IAAAA,UAAAA,CAAAA,EAAAA;AAAAA,UAAAA,CAAAA,IAAAA,CAAAA,CAAAA,UAAAA,EAAAA,OAAAA,CAAAA;AAAAA,UAAAA,CAAAA,GAAAA,EAAAA;AAAAA,UAAAA,QAAAA,CAAAA,EAAAA,KAAAA,IAAAA,CAAAA,IAAAA,CAAAA,EAAAA,MAAAA,CAAAA,cAAAA,CAAAA,IAAAA,CAAAA,CAAAA,EAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,aAAAA,CAAAA,CAAAA,OAAAA,GAAAA,CAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;ACiBpD,QAAA22E,CAAAA,GAAAthE,CAAAA,CAAA5a,CAAAA,CAAA,GAAAA,CAAA4a,CAAA;AACapb,IAAAA,CAAAA,CAAA28E,gBAAA38E,GAAgD08E,CAAAA,CAAqBC,gBAArE38E;AAAqE28E,GrKrClF,EqKqCkFA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,SAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,KAAAA,CAAAA,KAAAA,CAAAA,GAAAA,OAAAA,CAAAA,EAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,iBAAAA,CAAAA,CAAAA,CAAAA,EAAAA;AAAAA,cAAAA;AAAAA,YAAAA,CAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,WAAAA,CAAAA,OAAAA,CAAAA,EAAAA;AAAAA,YAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA;AAAAA;;AAAAA,iBAAAA,CAAAA,CAAAA,CAAAA,EAAAA;AAAAA,cAAAA;AAAAA,YAAAA,CAAAA,CAAAA,CAAAA,CAAAA,KAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,WAAAA,CAAAA,OAAAA,CAAAA,EAAAA;AAAAA,YAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA;AAAAA;;AAAAA,icAAAA,IAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,iBAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,SAAAA;AAAAA,QAAAA,IAAAA,EAAAA,EAAAA;AAAAA,QAAAA,GAAAA,EAAAA;AAAAA,OAAAA;AAAAA,aAAAA,CAAAA,GAAAA;AAAAA,QAAAA,IAAAA,EAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,QAAAA,KAAAA,EAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,QAAAA,MAAAA,EAAAA,CAAAA,CAAAA,CAAAA;AAAAA,OAAAA,EAAAA,cAAAA,OAAAA,MAAAA,KAAAA,CAAAA,CAAAA,MAAAA,CAAAA,QAAAA,CAAAA,GAAAA,YAAAA;AAAAA,eAAAA,IAAAA;AAAAA,OAAAA,CAAAA,EAAAA,CAAAA;;AAAAA,eAAAA,CAAAA,CAAAA,CAAAA,EAAAA;AAAAA,eAAAA,UAAAA,CAAAA,EAAAA;AAAAA,iBAAAA,UAAAA,CAAAA,EAAAA;AAAAA,gBAAAA,CAAAA,EAAAA,MAAAA,IAAAA,SAAAA,CAAAA,iCAAAA,CAAAA;;AAAAA,mBAAAA,CAAAA,GAAAA,IAAAA;AAAAA,kBAAAA,CAAAA,GAAAA,CAAAA,EAAAA,CAAAA,KAAAA,CAAAA,GAAAA,IAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,MAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,KAAAA,KAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,MAAAA,KAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,IAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAAA,IAAAA,EAAAA,OAAAA,CAAAA;;AAAAA,sBAAAA,CAAAA,GAAAA,CAAAA,EAAAA,CAAAA,KAAAA,CAAAA,GAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,KAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,qBAAAA,CAAAA;AAAAA,qBAAAA,CAAAA;AAAAA,kBAAAA,CAAAA,GAAAA,CAAAA;AAAAA;;AAAAA,qBAAAA,CAAAA;AAAAA,yBAAAA,CAAAA,CAAAA,KAAAA,IAAAA;AAAAA,oBAAAA,KAAAA,EAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,oBAAAA,IAAAA,EAAAA,CAAAA;AAAAA,mBAAAA;;AAAAA,qBAAAA,CAAAA;AAAAA,kBAAAA,CAAAA,CAAAA,KAAAA,IAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA;AAAAA;;AAAAA,qBAAAA,CAAAA;AAAAA,kBAAAA,CAAAA,GAAAA,CAAAA,CAAAA,GAAAA,CAAAA,GAAAA,EAAAA,EAAAA,CAAAA,CAAAA,IAAAA,CAAAA,GAAAA,EAAAA;AAAAA;;AAAAA;AAAAA,sBAAAA,EAAAA,CAAAA,GAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,IAAAA,EAAAA,MAAAA,GAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,CAAAA,MAAAA,GAAAA,CAAAA,CAAAA,MAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,IAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAAA;AAAAA,oBAAAA,CAAAA,GAAAA,CAAAA;AAAAA;AAAAA;;AAAAA,sBAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,KAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAAA;AAAAA,oBAAAA,CAAAA,CAAAA,KAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA;AAAAA;;AAAAA,sBAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,KAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAAA;AAAAA,oBAAAA,CAAAA,CAAAA,KAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,GAAAA,CAAAA;AAAAA;AAAAA;;AAAAA,sBAAAA,CAAAA,IAAAA,CAAAA,CAAAA,KAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAAA;AAAAA,oBAAAA,CAAAA,CAAAA,KAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,GAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA;AAAAA;AAAAA;;AAAAA,kBAAAA,CAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,GAAAA,CAAAA,GAAAA,EAAAA,EAAAA,CAAAA,CAAAA,IAAAA,CAAAA,GAAAA,EAAAA;AAAAA;AAAAA;;AAAAA,cAAAA,CAAAA,GAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA;AAAAA,aAAAA,CAAAA,OAAAA,CAAAA,EAAAA;AAAAA,cAAAA,CAAAA,GAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,EAAAA,CAAAA,GAAAA,CAAAA;AAAAA,aAAAA,SAAAA;AAAAA,cAAAA,CAAAA,GAAAA,CAAAA,GAAAA,CAAAA;AAAAA;;AAAAA,gBAAAA,IAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,mBAAAA;AAAAA,cAAAA,KAAAA,EAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,KAAAA,CAAAA;AAAAA,cAAAA,IAAAA,EAAAA,CAAAA;AAAAA,aAAAA;AAAAA,WAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,CAAAA;AAAAA,SAAAA;AAAAA;AAAAA,KAAAA;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,YAAAA,IAAAA,UAAAA,CAAAA,EAAAA;AAAAA,UAAAA,CAAAA,IAAAA,CAAAA,CAAAA,UAAAA,EAAAA,OAAAA,CAAAA;AAAAA,UAAAA,CAAAA,GAAAA,EAAAA;AAAAA,UAAAA,QAAAA,CAAAA,EAAAA,KAAAA,IAAAA,CAAAA,IAAAA,CAAAA,EAAAA,MAAAA,CAAAA,cAAAA,CAAAA,IAAAA,CAAAA,CAAAA,EAAAA,CAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,aAAAA,CAAAA,CAAAA,OAAAA,GAAAA,CAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;ACpHlF,QAAAC,CAAAA,GAAAp8E,CAAAA,CAAA,GAAAA,CAAA;AAAA,QAMAq8E,CAAAA,GAAAzhE,CAAAA,CAAA5a,CAAAA,CAAA,EAAAA,CAAA4a,CANA;AAAA,QAYAuhE,CAAAA,GAAA,YAAA;AAEE,eAAAA,CAAA,CAAYtkE,CAAZ,EAAYA;AACVvG,aAAKu9B,OAALv9B,GAAe,IAAI8qE,CAAAA,CAAAE,OAAJ,CAAYzkE,CAAZ,CAAfvG;AAwDJ;;AAAA,aAlDE6qE,CAAAA,CAAAt6E,SAAAs6E,CAAAI,SAAAJ,GAAA,UAAU5kE,CAAV,EAAoD1E,CAApD,EAAyEnQ,CAAzE,EAAyEA;AACvE,YAAoB,YAAA,OAAT6U,CAAX,EACE,OAAOjG,KAAKu9B,OAALv9B,CAAairE,SAAbjrE,CAAuBiG,CAAvBjG,CAAP;;AACK,YAAoB,eAAA,OAATkrE,IAAS,IAAgBjlE,CAAAA,YAAgBilE,IAApD,EAA2D;AAEhE,cAAM35B,CAAAA,GAAM45B,GAAAA,CAAIC,eAAJD,CAAoBllE,CAApBklE,CAAZ;AACA,iBAAOnrE,KAAKu9B,OAALv9B,CAAairE,SAAbjrE,CAAuBuxC,CAAvBvxC,CAAP;AACK;;AAAA,YAAIiG,CAAAA,YAAgB1F,WAApB,EAEL,OAAOP,KAAKu9B,OAALv9B,CAAairE,SAAbjrE,CAAuBiG,CAAvBjG,EAA6BuB,CAA7BvB,EAAyC5O,CAAzC4O,CAAP;AACK,YAAIO,WAAAA,CAAY+a,MAAZ/a,CAAmB0F,CAAnB1F,CAAJ,EAEL,OAAOP,KAAKu9B,OAALv9B,CAAairE,SAAbjrE,CAAuBiG,CAAvBjG,CAAP;AAEA,cAAM,IAAIvK,KAAJ,CAAU,8BAAV,CAAN;AAAgB,OAdpBo1E,EAkBMA,CAAAA,CAAAt6E,SAAAs6E,CAAA/yD,GAAA+yD,GAAN,UAAUQ,CAAV,EAAgCl2D,CAAhC,EAAgCA;AAAAA,eAAAA,CAAAA,CAAAA,IAAAA,EAAAA,KAAAA,CAAAA,EAAAA,KAAAA,CAAAA,EAAAA,YAAAA;AAAAA,cAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA;AAAAA,iBAAAA,CAAAA,CAAAA,IAAAA,EAAAA,UAAAA,CAAAA,EAAAA;AAAAA,oBAAAA,CAAAA,CAAAA,KAAAA;AAAAA,mBAAAA,CAAAA;AAAAA,uBAC1B/Q,CAAAA,GAAS,IAAIy8C,GAAJ,EAATz8C,EACAinE,CAAAA,YAAqBxqB,GAArBwqB,IACIC,CAAAA,GAAiB,IAAIzqB,GAAJ,EAAjByqB,EACND,CAAAA,CAAU/tE,OAAV+tE,CAAkB,UAACz7E,CAAD,EAAmBM,CAAnB,EAAmBA;AACnCo7E,kBAAAA,CAAAA,CAAen3E,GAAfm3E,CAAmBp7E,CAAnBo7E,EAAwB17E,CAAAA,CAAM0rC,cAA9BgwC;AAA8BhwC,iBADhC+vC,CADMC,EAIG,CAAA,CAAA,EAAMtrE,KAAKu9B,OAALv9B,CAAa8X,GAAb9X,CAAiBsrE,CAAjBtrE,CAAN,CALPqrE,IAAA,CAAA,CAAA,EAAA,CAAA,CAF0Bl2D;;AAE1B,mBAAA,CAAA;AAAA,uBAKF/Q,CAAAA,GAASpR,CAAAA,CAAA6N,IAAA7N,EAAToR,EAASvD,CAAAA,CAAAA,EAAAA,CAAAA,CALP;;AAKOA,mBAAAA,CAAAA;AAAAA,uBACA/N,KAAAA,CAAMqN,OAANrN,CAAcu4E,CAAdv4E,KACHy4E,CAAAA,GAAmC,EAAnCA,EACNF,CAAAA,CAAU/tE,OAAV+tE,CAAkB,UAACz7E,CAAD,EAACA;AACjB27E,kBAAAA,CAAAA,CAAezvE,IAAfyvE,CAAoB37E,CAAAA,CAAM0rC,cAA1BiwC;AAA0BjwC,iBAD5B+vC,CADME,EAIG,CAAA,CAAA,EAAMvrE,KAAKu9B,OAALv9B,CAAa8X,GAAb9X,CAAiBurE,CAAjBvrE,CAAN,CALAlN,IAAA,CAAA,CAAA,EAAA,CAAA,CADA+N;;AACA,mBAAA,CAAA;AAAA,uBAKTuD,CAAAA,GAASpR,CAAAA,CAAA6N,IAAA7N,EAAToR,EAASvD,CAAAA,CAAAA,EAAAA,CAAAA,CALA;;AAKAA,mBAAAA,CAAAA;AAGT,qBAAW0zD,CAAX,IADMiX,CAAAA,GAAiB,IAAI3qB,GAAJ,EAAjB2qB,EACaH,CAAnB,EACEG,CAAAA,CAAer3E,GAAfq3E,CAAmBjX,CAAnBiX,EAA0BH,CAAAA,CAAmD9W,CAAnD8W,CAAAA,CAAyD/vC,cAAnFkwC;;AAAmFlwC,gBAAAA,CAAAA,CAAAA,KAAAA,GAAAA,CAAAA;;AAAAA,mBAAAA,CAAAA;AAOvF,uBAJMmwC,CAAAA,GAAuD,IAAI5qB,GAAJ,EAAvD4qB,EACNrnE,CAAAA,CAAO9G,OAAP8G,CAAe,UAACxU,CAAD,EAAQM,CAAR,EAAQA;AACrBu7E,kBAAAA,CAAAA,CAAgBt3E,GAAhBs3E,CAAoBv7E,CAApBu7E,EAAyBV,CAAAA,CAAYlvC,kBAAZkvC,CAA+Bn7E,CAA/Bm7E,CAAzBU;AAAwD77E,iBAD1DwU,CADMqnE,EAIN,CAAA,CAAA,EAAOA,CAAP,CAAA;AAxB8Bt2D;AAwBvBs2D,WAxBuBt2D,CAAAA;AAwBvBs2D,SAxBuBt2D,CAAAA;AAwBvBs2D,OA1CTZ,EA4CAA,CAAAA,CAAAt6E,SAAAs6E,CAAAa,cAAAb,GAAA,YAAA;AACE7qE,aAAKu9B,OAALv9B,CAAa0rE,cAAb1rE;AAAa0rE,OA7Cfb,EA+CAA,CAAAA,CAAAt6E,SAAAs6E,CAAAc,YAAAd,GAAA,YAAA;AACE7qE,aAAKu9B,OAALv9B,CAAa2rE,YAAb3rE;AAAa2rE,OAhDfd,EAkDFA,CAAA;AA3DA,KAAA,EAZA;;AAYa38E,IAAAA,CAAAA,CAAA28E,gBAAA38E,GAAA28E,CAAA38E;AAAA28E,GtKmEb,EsKnEaA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,KAAAA,UAAAA,CAAAA,EAAAA;AAAAA,UAAAA,CAAAA,GAAAA,QAAAA,KAAAA,SAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,eAAAA,KAAAA,CAAAA,KAAAA,CAAAA,GAAAA,OAAAA,CAAAA,EAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,mBAAAA,CAAAA,CAAAA,CAAAA,EAAAA;AAAAA,gBAAAA;AAAAA,cAAAA,CAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,aAAAA,CAAAA,OAAAA,CAAAA,EAAAA;AAAAA,cAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA;AAAAA;;AAAAA,mBAAAA,CAAAA,CAAAA,CAAAA,EAAAA;AAAAA,gBAAAA;AAAAA,cAAAA,CAAAA,CAAAA,CAAAA,CAAAA,KAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,aAAAA,CAAAA,OAAAA,CAAAA,EAAAA;AAAAA,cAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA;AAAAA;;AAAAA,mBAAAA,CAAAA,CAAAA,CAAAA,EAAAA;AAAAA,YAAAA,CAAAA,CAAAA,IAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA,KAAAA,CAAAA,GAAAA,IAAAA,CAAAA,CAAAA,UAAAA,CAAAA,EAAAA;AAAAA,cAAAA,CAAAA,CAAAA,CAAAA,CAAAA,KAAAA,CAAAA;AAAAA,aAAAA,EAAAA,IAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA;AAAAA;;AAAAA,UAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,KAAAA,CAAAA,CAAAA,EAAAA,CAAAA,IAAAA,EAAAA,CAAAA,EAAAA,IAAAA,EAAAA,CAAAA;AAAAA,SAAAA,CAAAA;AAAAA,OAAAA;AAAAA,UAAAA,CAAAA,GAAAA,QAAAA,KAAAA,WAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,YAAAA,CAAAA;AAAAA,YAAAA,CAAAA;AAAAA,YAAAA,CAAAA;AAAAA,YAAAA,CAAAA;AAAAA,YAAAA,CAAAA,GAAAA;AAAAA,UAAAA,KAAAA,EAAAA,CAAAA;AAAAA,UAAAA,IAAAA,EAAAA,YAAAA;AAAAA,gBAAAA,IAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,mBAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,WAAAA;AAAAA,UAAAA,IAAAA,EAAAA,EAAAA;AAAAA,UAAAA,GAAAA,EAAAA;AAAAA,SAAAA;AAAAA,eAAAA,CAAAA,GAAAA;AAAAA,UAAAA,IAAAA,EAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,UAAAA,KAAAA,EAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,UAAAA,MAAAA,EAAAA,CAAAA,CAAAA,CAAAA;AAAAA,SAAAA,EAAAA,cAAAA,OAAAA,MAAAA,KAAAA,CAAAA,CAAAA,MAAAA,CAAAA,QAAAA,CAAAA,GAAAA,YAAAA;AAAAA,iBAAAA,IAAAA;AAAAA,SAAAA,CAAAA,EAAAA,CAAAA;;AAAAA,iBAAAA,CAAAA,CAAAA,CAAAA,EAAAA;AAAAA,iBAAAA,UAAAA,CAAAA,EAAAA;AAAAA,mBAAAA,UAAAA,CAAAA,EAAAA;AAAAA,kBAAAA,CAAAA,EAAAA,MAAAA,IAAAA,SAAAA,CAAAA,iCAAAA,CAAAA;;AAAAA,qBAAAA,CAAAA,GAAAA,IAAAA;AAAAA,oBAAAA,CAAAA,GAAAA,CAAAA,EAAAA,CAAAA,KAAAA,CAAAA,GAAAA,IAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,MAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,KAAAA,KAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,MAAAA,KAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,IAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAAA,IAAAA,EAAAA,OAAAA,CAAAA;;AAAAA,wBAAAA,CAAAA,GAAAA,CAAAA,EAAAA,CAAAA,KAAAA,CAAAA,GAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,KAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,uBAAAA,CAAAA;AAAAA,uBAAAA,CAAAA;AAAAA,oBAAAA,CAAAA,GAAAA,CAAAA;AAAAA;;AAAAA,uBAAAA,CAAAA;AAAAA,2BAAAA,CAAAA,CAAAA,KAAAA,IAAAA;AAAAA,sBAAAA,KAAAA,EAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,sBAAAA,IAAAA,EAAAA,CAAAA;AAAAA,qBAAAA;;AAAAA,uBAAAA,CAAAA;AAAAA,oBAAAA,CAAAA,CAAAA,KAAAA,IAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA;AAAAA;;AAAAA,uBAAAA,CAAAA;AAAAA,oBAAAA,CAAAA,GAAAA,CAAAA,CAAAA,GAAAA,CAAAA,GAAAA,EAAAA,EAAAA,CAAAA,CAAAA,IAAAA,CAAAA,GAAAA,EAAAA;AAAAA;;AAAAA;AAAAA,wBAAAA,EAAAA,CAAAA,GAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,IAAAA,EAAAA,MAAAA,GAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,CAAAA,MAAAA,GAAAA,CAAAA,CAAAA,MAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,IAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAAA;AAAAA,sBAAAA,CAAAA,GAAAA,CAAAA;AAAAA;AAAAA;;AAAAA,wBAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,KAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAAA;AAAAA,sBAAAA,CAAAA,CAAAA,KAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA;AAAAA;;AAAAA,wBAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,KAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAAA;AAAAA,sBAAAA,CAAAA,CAAAA,KAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,GAAAA,CAAAA;AAAAA;AAAAA;;AAAAA,wBAAAA,CAAAA,IAAAA,CAAAA,CAAAA,KAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAAA;AAAAA,sBAAAA,CAAAA,CAAAA,KAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,GAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA;AAAAA;AAAAA;;AAAAA,oBAAAA,CAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,GAAAA,CAAAA,GAAAA,EAAAA,EAAAA,CAAAA,CAAAA,IAAAA,CAAAA,GAAAA,EAAAA;AAAAA;AAAAA;;AAAAA,gBAAAA,CAAAA,GAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA;AAAAA,eAAAA,CAAAA,OAAAA,CAAAA,EAAAA;AAAAA,gBAAAA,CAAAA,GAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,EAAAA,CAAAA,GAAAA,CAAAA;AAAAA,eAAAA,SAAAA;AAAAA,gBAAAA,CAAAA,GAAAA,CAAAA,GAAAA,CAAAA;AAAAA;;AAAAA,kBAAAA,IAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,qBAAAA;AAAAA,gBAAAA,KAAAA,EAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,KAAAA,CAAAA;AAAAA,gBAAAA,IAAAA,EAAAA,CAAAA;AAAAA,eAAAA;AAAAA,aAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,CAAAA;AAAAA,WAAAA;AAAAA;AAAAA,OAAAA;;AAAAA,MAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,QAAAA,KAAAA,EAAAA,CAAAA;AAAAA,OAAAA;;ACZb,UAAAe,CAAAA,GAAAl9E,CAAAA,CAAA,EAAAA,CAAA;AAAA,UACAkR,CAAAA,GAAAlR,CAAAA,CAAA,GAAAA,CADA;AAAA,UAGAm9E,CAAAA,GAAAn9E,CAAAA,CAAA,GAAAA,CAHA;AAAA,UAIAo9E,CAAAA,GAAAp9E,CAAAA,CAAA,GAAAA,CAJA;AAAA,UAMA0a,CAAAA,GAAA1a,CAAAA,CAAA,CAAAA,CANA;AAAA,UAOAq9E,CAAAA,GAAAr9E,CAAAA,CAAA,GAAAA,CAPA;AAAA,UAwBAs8E,CAAAA,GAAA,YAAA;AACE,iBAAAA,CAAA,CAAYzkE,CAAZ,EAAYA;AAAAA,eAAA,CAAAA,KAAAA,CAAAA,KAAAA,CAAAA,GAAA,EAAAA,GACVvG,KAAKgsE,YAALhsE,GAAKgsE,CAAe,CADVzlE,EAEVvG,KAAKisE,WAALjsE,GAAmBuG,CAAAA,CAAO0lE,WAFhB1lE,EAGVvG,KAAKs9B,QAALt9B,GAAgBoJ,CAAAA,CAAAlC,QAAAkC,CAASnZ,MAATmZ,CAAgB7C,CAAAA,CAAO+2B,QAAvBl0B,CAHN7C,EAIVvG,KAAKqM,OAALrM,GAAe;AAACs9B,YAAAA,QAAAA,EAAUt9B,KAAKs9B,QAAhB;AAA0B4uC,YAAAA,eAAAA,EAAiB,EAA3C;AAA+CC,YAAAA,cAAAA,EAAgB;AAA/D,WAJL5lE;AA6Nd;;AAAA,eAtNEykE,CAAAA,CAAAz6E,SAAAy6E,CAAAU,cAAAV,GAAA,YAAA;AACEhrE,eAAKs9B,QAALt9B,CAAcvH,KAAduH;AAAcvH,SADhBuyE,EAIAA,CAAAA,CAAAz6E,SAAAy6E,CAAAW,YAAAX,GAAA,YAAA;AACEhrE,eAAKs9B,QAALt9B,CAAc8H,IAAd9H;AAAc8H,SALhBkjE,EAWMA,CAAAA,CAAAz6E,SAAAy6E,CAAAC,SAAAD,GAAN,UAAgBvwD,CAAhB,EAAoDlZ,CAApD,EAAyEnQ,CAAzE,EAAyEA;AAAAA,iBAAAA,CAAAA,CAAAA,IAAAA,EAAAA,KAAAA,CAAAA,EAAAA,KAAAA,CAAAA,EAAAA,YAAAA;AAAAA,gBAAAA,CAAAA,GAAAA,IAAAA;AAAAA,mBAAAA,CAAAA,CAAAA,IAAAA,EAAAA,UAAAA,CAAAA,EAAAA;AAAAA,sBAAAA,CAAAA,CAAAA,KAAAA;AAAAA,qBAAAA,CAAAA;AACvE,yBAAA,CAAA,CAAA,EAAM4O,KAAKs9B,QAALt9B,CAAcgI,KAAdhI,CAAoB,SAApBA,EAA+B,mBAA/BA,EAAoD,YAAA;AAAA,2BAAAosE,CAAAA,CAAA1jE,CAAA0jE,EAAA1jE,KAAA,CAAA0jE,EAAA,KAAA,CAAAA,EAAA,YAAA;AAAA,0BAAA,CAAA,EAAA,CAAA,EAAA,CAAA;AAAA,6BAAA,CAAA,CAAA,IAAA,EAAA,UAAA,CAAA,EAAA;AAAA,gCAAA,CAAA,CAAA,KAAA;AAAA,+BAAA,CAAA;AAExC,mCAAA,CAAA,CAAA,EAAMP,CAAAA,CAAAQ,OAAAR,CAAQ7rE,KAAKisE,WAAbJ,CAAN,CAAA;;AAAmBI,+BAAAA,CAAAA;AAAAA,mCAA7Bp6C,CAAAA,GAAU7+B,CAAAA,CAAA6N,IAAA7N,EAAV6+B,EACN7xB,KAAKssE,cAALtsE,GAAsB6xB,CAAAA,CAAQiL,oBAARjL,CAA6B7xB,KAAKqM,OAAlCwlB,CADhBA,EAGN7xB,KAAKusE,MAALvsE,GAAc,IAAI+rE,CAAAA,CAAAS,KAAJ,EAHR36C,EAIa,YAAA,OAARpX,CAAQ,GAAf,CAAA,CAAA,EAAA,CAAA,CAAe,GACI,eAAA,OAAVm7B,KAAU,GAAjB,CAAA,CAAA,EAAA,CAAA,CAAiB,GAEP,CAAA,CAAA,EAAMh2C,CAAAA,CAAA6sE,SAAA7sE,CAAUgsE,CAAAA,CAAAc,QAAV9sE,EAAoB6a,CAApB7a,CAAN,CAPmBqsE;;AAOOxxD,+BAAAA,CAAAA;AAAAA,mCAAhCna,CAAAA,GAAMtN,CAAAA,CAAA6N,IAAA7N,EAANsN,EACNN,KAAK4rB,UAAL5rB,CAAgBoB,CAAAA,CAAOC,IAAPD,CAAYd,CAAZc,CAAhBpB,CADMM,EACsBA,CAAAA,CAAAA,EAAAA,CAAAA,CADUma;;AACVna,+BAAAA,CAAAA;AAGX,mCAAA,CAAA,CAAA,EAAMs1C,KAAAA,CAAMn7B,CAANm7B,CAAN,CAAA;;AAAYn7B,+BAAAA,CAAAA;AACjB,mCAAA,CAAA,CAAA,EADKznB,CAAAA,CAAA6N,IAAA7N,GACU25E,WADV35E,EACL,CAAA;;AAAe25E,+BAAAA,CAAAA;AAArBrsE,4BAAAA,CAAAA,GAAMtN,CAAAA,CAAA6N,IAAA7N,EAANsN,EACNN,KAAK4rB,UAAL5rB,CAAgBoB,CAAAA,CAAOC,IAAPD,CAAYd,CAAZc,CAAhBpB,CADMM,EACsBA,CAAAA,CAAAA,KAAAA,GAAAA,CADtBA;;AACsBA,+BAAAA,CAAAA;AAAAA,mCAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA;;AAAAA,+BAAAA,CAAAA;AAEpBC,4BAAAA,WAAAA,CAAY+a,MAAZ/a,CAAmBka,CAAnBla,IAMVP,KAAK4rB,UAAL5rB,CAAgBoB,CAAAA,CAAOC,IAAPD,CAAYqZ,CAAZrZ,CAAhBpB,CANUO,IAEJwb,CAAAA,GAAM,IAAIrZ,UAAJ,CAAe+X,CAAf,EAAoBlZ,CAAAA,IAAc,CAAlC,EAAqCnQ,CAAAA,IAAUqpB,CAAAA,CAAIjZ,UAAnD,CAANua,EACN/b,KAAK4rB,UAAL5rB,CAAgBoB,CAAAA,CAAOC,IAAPD,CAAY2a,CAAZ3a,CAAhBpB,CAHUO,GAGkBwb,CAAAA,CAAAA,KAAAA,GAAAA,CAHlBxb;;AAGkBwb,+BAAAA,CAAAA;AAAAA,mCAAAA,CAAAA,CAAAA,CAAAA;AApB0B;AAoB1BA,uBApB0B,CAAA;AAoB1BA,qBApB0BqwD,CAAA;AAoB1BrwD,mBApB1B/b,CAAN,CAAA;;AAoBgC+b,qBAAAA,CAAAA;AAAAA,yBApBhC/oB,CAAAA,CAAA6N,IAAA7N,IAAA6N,CAAAA,CAAAA,CAoBgCkb;AArBuC3qB;AACvEyP,aADuEzP,CAAAA;AACvEyP,WADuEzP,CAAAA;AACvEyP,SAZFmqE,EAwCQA,CAAAA,CAAAz6E,SAAAy6E,CAAAp/C,UAAAo/C,GAAR,UAAmB4B,CAAnB,EAAmBA;AAAnB,cAAAlkE,CAAAA,GAAA1I,IAAA;AACE,cAAIA,KAAKgsE,YAAT,EACE,MAAM,IAAIv2E,KAAJ,CAAU,qBAAV,CAAN;AAGFuK,eAAKs9B,QAALt9B,CAAcgI,KAAdhI,CAAoB,SAApBA,EAA+B,oBAA/BA,EAAqD,YAAA;AAEnD,gBAAM6sE,CAAAA,GACFnkE,CAAAA,CAAK4jE,cAAL5jE,CAAoBokE,cAApBpkE,GAAqCA,CAAAA,CAAK4jE,cAA1C5jE,GAA0C4jE,KAAsCp6E,CADpF;AAEAwW,YAAAA,CAAAA,CAAK6jE,MAAL7jE,CAAYqkE,IAAZrkE,CAAiBkkE,CAAjBlkE,EAAiCmkE,CAAjCnkE,GAGIA,CAAAA,CAAK4jE,cAAL5jE,CAAoBq4C,kBAApBr4C,IACFA,CAAAA,CAAK4jE,cAAL5jE,CAAoBq4C,kBAApBr4C,CAAuCA,CAAAA,CAAK6jE,MAAL7jE,CAAY2N,KAAnD3N,CAJFA,EAOAA,CAAAA,CAAKskE,aAALtkE,CAAmBA,CAAAA,CAAK6jE,MAAL7jE,CAAY2N,KAA/B3N,CAPAA,EAUAA,CAAAA,CAAKukE,cAALvkE,GAAsB,IAAIojE,CAAAA,CAAAoB,aAAJ,CAAkBxkE,CAAAA,CAAK6jE,MAAL7jE,CAAY2N,KAA9B,EAAqC3N,CAAAA,CAAKykE,IAA1C,EAAgDzkE,CAAAA,CAAK40B,QAArD,CAVtB50B;AAU2E40B,WAd7Et9B,GAiBAA,KAAKgsE,YAALhsE,GAAKgsE,CAAe,CAjBpBhsE;AAiBoB,SA9DtBgrE,EAiEAA,CAAAA,CAAAz6E,SAAAy6E,CAAAlzD,GAAAkzD,GAAA,UAAIh6E,CAAJ,EAAIA;AAAJ,cAAA0X,CAAAA,GAAA1I,IAAA;AACE,cAAA,CAAKA,KAAKgsE,YAAV,EACE,MAAM,IAAIv2E,KAAJ,CAAU,6BAAV,CAAN;AAGF,iBAAOuK,KAAKs9B,QAALt9B,CAAcgI,KAAdhI,CAAoB,SAApBA,EAA+B,aAA/BA,EAA8C,YAAA;AAAA,mBAAAosE,CAAAA,CAAA1jE,CAAA0jE,EAAA1jE,KAAA,CAAA0jE,EAAA,KAAA,CAAAA,EAAA,YAAA;AAAA,kBAAA,CAAA,EAAA,CAAA;AAAA,qBAAA,CAAA,CAAA,IAAA,EAAA,UAAA,CAAA,EAAA;AAAA,wBAAA,CAAA,CAAA,KAAA;AAAA,uBAAA,CAAA;AAG7B,2BAFhBgB,CAAAA,GAAeptE,KAAKqtE,0BAALrtE,CAAgChP,CAAhCgP,CAAfotE,EAEgB,CAAA,CAAA,EAAMptE,KAAKitE,cAALjtE,CAAoBstE,OAApBttE,CAA4BA,KAAKssE,cAAjCtsE,EAAiDotE,CAAjDptE,CAAN,CAAA;;AAAuDotE,uBAAAA,CAAAA;AAE7E,2BAFMG,CAAAA,GAAgBv6E,CAAAA,CAAA6N,IAAA7N,EAAhBu6E,EAEN,CAAA,CAAA,EAAOvtE,KAAKwtE,YAALxtE,CAAkButE,CAAlBvtE,CAAP,CAAA;AALmD;AAK1ButE,eAL0B,CAAA;AAK1BA,aAL0BnB,CAAA;AAK1BmB,WALpBvtE,CAAP;AAK2ButE,SA3E7BvC,EA+EQA,CAAAA,CAAAz6E,SAAAy6E,CAAAqC,0BAAArC,GAAR,UAAmCh6E,CAAnC,EAAmCA;AACjC,cAAMy8E,CAAAA,GAAkBztE,KAAKusE,MAALvsE,CAAYqW,KAAZrW,CAAkB0tE,aAAlB1tE,EAAxB;;AAIA,cAAIlN,KAAAA,CAAMqN,OAANrN,CAAc9B,CAAd8B,CAAJ,EAAkB9B;AAChB,gBAAIA,CAAAA,CAAOI,MAAPJ,KAAkBy8E,CAAAA,CAAgBr8E,MAAtC,EACE,MAAM,IAAIqE,KAAJ,CAAU,4CAA0Cg4E,CAAAA,CAAgBr8E,MAA1D,GAAgE,WAAhE,GAA4EJ,CAAAA,CAAOI,MAA7F,CAAN;AAAmGA,WAFvG,MAOK;AACH,gBAAIJ,CAAAA,CAAOgD,IAAPhD,KAAgBy8E,CAAAA,CAAgBr8E,MAApC,EACE,MAAM,IAAIqE,KAAJ,CAAU,wCAAsCg4E,CAAAA,CAAgBr8E,MAAtD,GAA4D,WAA5D,GAAwEJ,CAAAA,CAAOgD,IAAzF,CAAN;;AAKF,iBAFA,IAAM25E,CAAAA,GAAe,IAAI76E,KAAJ,CAAkB9B,CAAAA,CAAOgD,IAAzB,CAArB,EACI45E,CAAAA,GAAoB,CADxB,EAESr/E,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAIk/E,CAAAA,CAAgBr8E,MAApC,EAAoCA,EAAU7C,CAA9C,EAAiD;AAC/C,kBAAMuqB,CAAAA,GAAS9nB,CAAAA,CAAOxB,GAAPwB,CAAWy8E,CAAAA,CAAgBl/E,CAAhBk/E,CAAXz8E,CAAf;AACA,kBAAA,CAAK8nB,CAAL,EACE,MAAM,IAAIrjB,KAAJ,CAAU,gCAA8BvG,IAA9B,GAAkC,GAA5C,CAAN;AAEFy+E,cAAAA,CAAAA,CAAaC,CAAAA,EAAbD,CAAAA,GAAoC70D,CAApC60D;AAGF38E;;AAAAA,YAAAA,CAAAA,GAAS28E,CAAT38E;AAKF;;AAAA,cAAKgP,KAAKqM,OAALrM,CAAaksE,eAAblsE,IAAwE,MAAxCA,KAAKqM,OAALrM,CAAaksE,eAAblsE,CAA6B5O,MAA7D4O,IAA8EA,KAAKqM,OAALrM,CAAamsE,cAA3FnsE,IACsC,MAAvCA,KAAKqM,OAALrM,CAAamsE,cAAbnsE,CAA4B5O,MADhC,EAsBE4O,KAAK6tE,uBAAL7tE,CAA6BA,KAAKqM,OAALrM,CAAamsE,cAA1CnsE,EAA0DhP,CAA1DgP,EAA0DhP,CAAQ,CAAlEgP,EAtBF,KAC8C;AAC5C,gBAAM8tE,CAAAA,GAAoB9tE,KAAKusE,MAALvsE,CAAYqW,KAAZrW,CAAkB+tE,eAAlB/tE,EAA1B;AAAA,gBACMguE,CAAAA,GAAchuE,KAAKusE,MAALvsE,CAAYqW,KAAZrW,CAAkBihD,SAAlBjhD,EADpB;AAAA,gBAGMmsE,CAAAA,GAAiB,IAAIr5E,KAAJ,CAAiCg7E,CAAAA,CAAkB18E,MAAnD,CAHvB;;AAKA,iBAAS7C,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAIu/E,CAAAA,CAAkB18E,MAAtC,EAAsCA,EAAU7C,CAAhD,EAAmD;AACjD,kBAAM0/E,CAAAA,GAAaD,CAAAA,CAAYF,CAAAA,CAAkBv/E,CAAlBu/E,CAAZE,CAAnB;AACA7B,cAAAA,CAAAA,CAAe59E,CAAf49E,CAAAA,GAAoB8B,CAAAA,CAAW/5E,IAAX+5E,CAAiBl5E,KAAjBk5E,CAAuB58E,IAA3C86E,EAIAnsE,KAAKqM,OAALrM,CAAaksE,eAAblsE,CAA8BlE,IAA9BkE,CAAmCiuE,CAAAA,CAAW/5E,IAAX+5E,CAAiBl2E,UAApDiI,CAJAmsE,EAKAnsE,KAAKqM,OAALrM,CAAamsE,cAAbnsE,CAA6BlE,IAA7BkE,CAAkChP,CAAAA,CAAOzC,CAAPyC,CAAAA,CAAUK,IAA5C2O,CALAmsE;AAQFnsE;;AAAAA,iBAAK6tE,uBAAL7tE,CAA6BmsE,CAA7BnsE,EAA6ChP,CAA7CgP,EAA6ChP,CAAQ,CAArDgP;AAWF;AAAA,iBAFAA,KAAKkuE,wBAALluE,CAA8BA,KAAKqM,OAALrM,CAAaksE,eAA3ClsE,EAA6DhP,CAA7DgP,GAEOhP,CAAP;AAAOA,SA3ITg6E,EA8IQA,CAAAA,CAAAz6E,SAAAy6E,CAAAkD,wBAAAlD,GAAR,UAAiCkB,CAAjC,EAAqEiC,CAArE,EAAqEA;AACnE,eAAK,IAAI5/E,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAI4/E,CAAAA,CAAY/8E,MAAhC,EAAwC7C,CAAAA,EAAxC,EAA6C;AAC3C,gBAAM6/E,CAAAA,GAAelC,CAAAA,CAAgB39E,CAAhB29E,CAArB;AAAA,gBACMmC,CAAAA,GAAaF,CAAAA,CAAY5/E,CAAZ4/E,CAAAA,CAAej6E,IADlC;AAEA,gBAAIk6E,CAAAA,KAAiBC,CAArB,EACE,MAAM,IAAI54E,KAAJ,CAAU,kBAAgBlH,CAAhB,GAAiB,iCAAjB,GAAmD6/E,CAAnD,GAA+D,YAA/D,GAA4EC,CAAtF,CAAN;AAA4FA;AAAAA,SAnJlGrD,EAwJQA,CAAAA,CAAAz6E,SAAAy6E,CAAA6C,uBAAA7C,GAAR,UACImB,CADJ,EACkDgC,CADlD,EACyEG,CADzE,EACyEA;AACvE,eAAK,IAAI//E,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAI4/E,CAAAA,CAAY/8E,MAAhC,EAAwC7C,CAAAA,EAAxC,EAA6C;AAC3C,gBAAMggF,CAAAA,GAAepC,CAAAA,CAAe59E,CAAf49E,CAArB;AAAA,gBACMqC,CAAAA,GAAaL,CAAAA,CAAY5/E,CAAZ4/E,CAAAA,CAAe98E,IADlC;AAEA,gBAAA,CAAK2O,KAAKyuE,iBAALzuE,CAAuBuuE,CAAvBvuE,EAAqCwuE,CAArCxuE,EAAiDsuE,CAAjDtuE,CAAL,EACE,MAAM,IAAIvK,KAAJ,CAAU,kBAAgBlH,CAAhB,GAAiB,mCAAjB,GAAqDggF,CAAAA,CAAar0D,IAAbq0D,CAAkB,GAAlBA,CAArD,GAA2E,cAA3E,GACZC,CAAAA,CAAWt0D,IAAXs0D,CAAgB,GAAhBA,CADY,GACQ,GADlB,CAAN;AACwB;AAAA,SA/J9BxD,EAoKQA,CAAAA,CAAAz6E,SAAAy6E,CAAAyD,iBAAAzD,GAAR,UACIuD,CADJ,EACyCC,CADzC,EAC4EF,CAD5E,EAC4EA;AAC1E,cAAIC,CAAAA,CAAan9E,MAAbm9E,KAAwBC,CAAAA,CAAWp9E,MAAvC,EACE,OAAA,CAAO,CAAP;;AAGF,eAAK,IAAI7C,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAIggF,CAAAA,CAAan9E,MAAjC,EAAiCA,EAAU7C,CAA3C,EACE,IAAIggF,CAAAA,CAAahgF,CAAbggF,CAAAA,KAAoBC,CAAAA,CAAWjgF,CAAXigF,CAApBD,KAA+BhgF,CAAQ+/E,CAAR//E,IAAgD,MAApBggF,CAAAA,CAAahgF,CAAbggF,CAA3DA,CAAJ,EAEE,OAAA,CAAO,CAAP;;AAIJ,iBAAA,CAAO,CAAP;AAAO,SAjLTvD,EAoLQA,CAAAA,CAAAz6E,SAAAy6E,CAAAwC,YAAAxC,GAAR,UAAqBuC,CAArB,EAAqBA;AACnB,cAAMmB,CAAAA,GAAmB1uE,KAAKusE,MAALvsE,CAAYqW,KAAZrW,CAAkB2uE,cAAlB3uE,EAAzB;;AACA,cAAIutE,CAAAA,CAAcn8E,MAAdm8E,KAAyBmB,CAAAA,CAAiBt9E,MAA9C,EACE,MAAM,IAAIqE,KAAJ,CAAU,qEAAV,CAAN;;AAIF,eADA,IAAM2O,CAAAA,GAAS,IAAIy8C,GAAJ,EAAf,EACStyD,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAImgF,CAAAA,CAAiBt9E,MAArC,EAAqCA,EAAU7C,CAA/C,EACE6V,CAAAA,CAAOjQ,GAAPiQ,CAAWsqE,CAAAA,CAAiBngF,CAAjBmgF,CAAXtqE,EAAgCmpE,CAAAA,CAAch/E,CAAdg/E,CAAhCnpE;;AAGF,iBAAOA,CAAP;AAAOA,SA/LT4mE,EAkMQA,CAAAA,CAAAz6E,SAAAy6E,CAAAgC,aAAAhC,GAAR,UAAsB30D,CAAtB,EAAsBA;AACpB,cAAMvJ,CAAAA,GAAQuJ,CAAAA,CAAMu4D,QAANv4D,EAAd;AACArW,eAAKmtE,IAALntE,GAAY,IAAIlN,KAAJ,CAAUga,CAAAA,CAAM1b,MAAhB,CAAZ4O;;AAEA,eAAK,IAAIzR,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAIue,CAAAA,CAAM1b,MAA1B,EAAkC7C,CAAAA,EAAlC,EACEyR,KAAKmtE,IAALntE,CAAUzR,CAAVyR,IAAeA,KAAKssE,cAALtsE,CAAoBuI,OAApBvI,CAA4B8M,CAAAA,CAAMve,CAANue,CAA5B9M,EAAsCA,KAAKusE,MAALvsE,CAAYuZ,MAAlDvZ,CAAfA;AAAiEuZ,SAvMrEyxD,EAsNFA,CAAA;AA9NA,OAAA,EAxBA;;AAwBa98E,MAAAA,CAAAA,CAAA88E,OAAA98E,GAAA88E,CAAA98E;AAAA88E,KDZAH,ECYAG,IDZAH,CCYAG,IDZAH,ECYAG,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,MDZAH;ACYAG,GvKuDb,EuKvDaA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,KC3Bb,UAAA77D,CAAA,EAAAA;AAqBA,UAAA0/D,CAAAA,GAAAx/E,MAAAA,CAAAw/E,yBAAAx/E,IACA,UAAAsgB,CAAA,EAAAA;AAGA,aAFA,IAAA5B,CAAAA,GAAA1e,MAAAA,CAAA0e,IAAA1e,CAAAsgB,CAAAtgB,CAAA,EACAy/E,CAAAA,GAAA,EADA,EAEAvgF,CAAAA,GAAA,CAAA,EAAmBA,CAAAA,GAAAwf,CAAAA,CAAA3c,MAAnB,EAAoC7C,CAAAA,EAApC,EACAugF,CAAAA,CAAA/gE,CAAAA,CAAAxf,CAAAwf,CAAA+gE,CAAAA,GAAAz/E,MAAAA,CAAA0/E,wBAAA1/E,CAAAsgB,CAAAtgB,EAAA0e,CAAAA,CAAAxf,CAAAwf,CAAA1e,CAAAy/E;;AAEA,eAAAA,CAAA;AAAAA,OAPA;AAAA,UAUAE,CAAAA,GAAA,UAVA;;AAWA9gF,MAAAA,CAAAA,CAAAkoE,MAAAloE,GAAA,UAAAwlB,CAAA,EAAAA;AACA,YAAA,CAAApE,CAAAA,CAAAoE,CAAApE,CAAA,EAAA;AAEA,eADA,IAAA2/D,CAAAA,GAAA,EAAA,EACA1gF,CAAAA,GAAA,CAAA,EAAmBA,CAAAA,GAAA4C,SAAAA,CAAAC,MAAnB,EAAyC7C,CAAAA,EAAzC,EACA0gF,CAAAA,CAAAnzE,IAAAmzE,CAAApvD,CAAAA,CAAA1uB,SAAAA,CAAA5C,CAAA4C,CAAA0uB,CAAAovD;;AAEA,iBAAAA,CAAAA,CAAA/0D,IAAA+0D,CAAA,GAAAA,CAAA;AAGA1gF;;AAAAA,QAAAA,CAAAA,GAAA,CAAAA;;AAmBA,aAnBA,IACAiiC,CAAAA,GAAAr/B,SADA,EAEAojB,CAAAA,GAAAic,CAAAA,CAAAp/B,MAFA,EAGA+P,CAAAA,GAAAoO,MAAAA,CAAAmE,CAAAnE,CAAAA,CAAAyU,OAAAzU,CAAAy/D,CAAAz/D,EAAA,UAAAlU,CAAA,EAAAA;AACA,cAAA,SAAAA,CAAA,EAAA,OAAA,GAAA;AACA,cAAA9M,CAAAA,IAAAgmB,CAAA,EAAA,OAAAlZ,CAAA;;AACA,kBAAAA,CAAA;AACA,iBAAA,IAAA;AAAA,qBAAAkU,MAAAA,CAAAihB,CAAAA,CAAAjiC,CAAAA,EAAAiiC,CAAAjhB,CAAA;;AACA,iBAAA,IAAA;AAAA,qBAAAvU,MAAAA,CAAAw1B,CAAAA,CAAAjiC,CAAAA,EAAAiiC,CAAAx1B,CAAA;;AACA,iBAAA,IAAA;AACA,kBAAA;AACA,uBAAAogD,IAAAA,CAAAC,SAAAD,CAAA5qB,CAAAA,CAAAjiC,CAAAA,EAAAiiC,CAAA4qB,CAAA;AACS,eAFT,CAES,OAAA8zB,CAAA,EAAAA;AACT,uBAAA,YAAA;AAEA;;AAAA;AACA,qBAAA7zE,CAAA;AAVA;AAUAA,SAbAkU,CAHA,EAmBAlU,CAAAA,GAAAm1B,CAAAA,CAAAjiC,CAAAiiC,CAAA,EAAuBjiC,CAAAA,GAAAgmB,CAAvB,EAAgClZ,CAAAA,GAAAm1B,CAAAA,CAAAA,EAAAjiC,CAAAiiC,CAAhC,EACA2+C,CAAAA,CAAA9zE,CAAA8zE,CAAAA,IAAA9zE,CAAAmU,CAAAA,CAAAnU,CAAAmU,CAAA2/D,GACAhuE,CAAAA,IAAA,MAAA9F,CADA8zE,GAGAhuE,CAAAA,IAAA,MAAA0e,CAAAA,CAAAxkB,CAAAwkB,CAHAsvD;;AAMA,eAAAhuE,CAAA;AAAAA,OAnCAjT,EA0CAA,CAAAA,CAAAqvE,SAAArvE,GAAA,UAAAspC,CAAA,EAAA43C,CAAA,EAAAA;AACA,YAAA,KAAA,CAAA,KAAAjgE,CAAA,IAAAA,CAAA,CAAAA,KAAAA,CAAAA,CAAAkgE,aAAA,EACA,OAAA73C,CAAA;AAIA,YAAA,KAAA,CAAA,KAAAroB,CAAA,EACA,OAAA,YAAA;AACA,iBAAAjhB,CAAAA,CAAAqvE,SAAArvE,CAAAspC,CAAAtpC,EAAAkhF,CAAAlhF,EAAAkwB,KAAAlwB,CAAA8R,IAAA9R,EAAAiD,SAAAjD,CAAA;AAAAiD,SADA;AAKA,YAAAm+E,CAAAA,GAAAA,CAAA,CAAA;AAeA,eAdA,YAAA;AACA,cAAA,CAAAA,CAAA,EAAA;AACA,gBAAAngE,CAAAA,CAAAogE,gBAAA,EACA,MAAA,IAAA95E,KAAA,CAAA25E,CAAA,CAAA;AACOjgE,YAAAA,CAAAA,CAAAqgE,gBAAArgE,GACPhK,OAAAA,CAAAsqE,KAAAtqE,CAAAiqE,CAAAjqE,CADOgK,GAGPhK,OAAAA,CAAAM,KAAAN,CAAAiqE,CAAAjqE,CAHOgK,EAKPmgE,CAAAA,GAAAA,CAAA,CALOngE;AAOP;;AAAA,iBAAAqoB,CAAAA,CAAApZ,KAAAoZ,CAAAx3B,IAAAw3B,EAAArmC,SAAAqmC,CAAA;AAAArmC,SAGA;AAHAA,OAlEAjD;AAyEA,UACAwhF,CADA;AAAA,UAAAC,CAAAA,GAAA,EAAA;;AA6BA,eAAA9vD,CAAA,CAAAlQ,CAAA,EAAAigE,CAAA,EAAAA;AAEA,YAAAnwC,CAAAA,GAAA;AACAowC,UAAAA,IAAAA,EAAA,EADA;AAEAC,UAAAA,OAAAA,EAAAC;AAFA,SAAA;AAoBA,eAfA5+E,SAAAA,CAAAC,MAAAD,IAAA,CAAAA,KAAAsuC,CAAAA,CAAAkkC,KAAAlkC,GAAAtuC,SAAAA,CAAA,CAAAA,CAAAA,GACAA,SAAAA,CAAAC,MAAAD,IAAA,CAAAA,KAAAsuC,CAAAA,CAAAuwC,MAAAvwC,GAAAtuC,SAAAA,CAAA,CAAAA,CAAAA,CADAA,EAEA8+E,CAAAA,CAAAL,CAAAK,CAAAA,GAEAxwC,CAAAA,CAAAywC,UAAAzwC,GAAAmwC,CAFAK,GAGGL,CAAAA,IAEH1hF,CAAAA,CAAAiiF,OAAAjiF,CAAAuxC,CAAAvxC,EAAA0hF,CAAA1hF,CAPAiD,EAUAi/E,CAAAA,CAAA3wC,CAAAA,CAAAywC,UAAAE,CAAAA,KAAA3wC,CAAAA,CAAAywC,UAAAzwC,GAAAywC,CAAA,CAAAE,CAVAj/E,EAWAi/E,CAAAA,CAAA3wC,CAAAA,CAAAkkC,KAAAyM,CAAAA,KAAA3wC,CAAAA,CAAAkkC,KAAAlkC,GAAA,CAAA2wC,CAXAj/E,EAYAi/E,CAAAA,CAAA3wC,CAAAA,CAAAuwC,MAAAI,CAAAA,KAAA3wC,CAAAA,CAAAuwC,MAAAvwC,GAAAuwC,CAAA,CAAAI,CAZAj/E,EAaAi/E,CAAAA,CAAA3wC,CAAAA,CAAA4wC,aAAAD,CAAAA,KAAA3wC,CAAAA,CAAA4wC,aAAA5wC,GAAA4wC,CAAA,CAAAD,CAbAj/E,EAcAsuC,CAAAA,CAAAuwC,MAAAvwC,KAAAA,CAAAA,CAAAqwC,OAAArwC,GAAA6wC,CAAA7wC,CAdAtuC,EAeAo/E,CAAAA,CAAA9wC,CAAA8wC,EAAA5gE,CAAA4gE,EAAA9wC,CAAAA,CAAAkkC,KAAA4M,CAAA;AAoCA;;AAAA,eAAAD,CAAA,CAAAnvE,CAAA,EAAAqvE,CAAA,EAAAA;AACA,YAAAC,CAAAA,GAAA5wD,CAAAA,CAAA6wD,MAAA7wD,CAAA2wD,CAAA3wD,CAAA;AAEA,eAAA4wD,CAAAA,GACA,OAAA5wD,CAAAA,CAAAmwD,MAAAnwD,CAAA4wD,CAAA5wD,EAAA,CAAAA,CAAA,GAAA,GAAA,GAAA1e,CAAA,GACA,IADA,GACA0e,CAAAA,CAAAmwD,MAAAnwD,CAAA4wD,CAAA5wD,EAAA,CAAAA,CADA,GACA,GAFA4wD,GAIAtvE,CAJA;AASA;;AAAA,eAAA4uE,CAAA,CAAA5uE,CAAA,EAAAqvE,CAAA,EAAAA;AACA,eAAArvE,CAAA;AAeA;;AAAA,eAAAovE,CAAA,CAAA9wC,CAAA,EAAA7vC,CAAA,EAAA+gF,CAAA,EAAAA;AAGA,YAAAlxC,CAAAA,CAAA4wC,aAAA5wC,IACA7vC,CADA6vC,IAEAmxC,CAAAA,CAAAhhF,CAAAA,CAAAiwB,OAAA+wD,CAFAnxC,IAIA7vC,CAAAA,CAAAiwB,OAAAjwB,KAAA1B,CAAAA,CAAA2xB,OAJA4f,KAIA5f,CAEAjwB,CAAAA,CAAAwQ,WAFAyf,IAEAjwB,CAAAA,CAAAwQ,WAAAxQ,CAAAW,SAAAX,KAAAA,CANA6vC,CAAA,EAMA;AACA,cAAApf,CAAAA,GAAAzwB,CAAAA,CAAAiwB,OAAAjwB,CAAA+gF,CAAA/gF,EAAA6vC,CAAA7vC,CAAA;AAIA,iBAHA0f,CAAAA,CAAA+Q,CAAA/Q,CAAAA,KACA+Q,CAAAA,GAAAkwD,CAAAA,CAAA9wC,CAAA8wC,EAAAlwD,CAAAkwD,EAAAI,CAAAJ,CADAjhE,GAGA+Q,CAAA;AAIA;;AAAA,YAAAwwD,CAAAA,GA+FA,UAAApxC,CAAA,EAAA7vC,CAAA,EAAAA;AACA,cAAAwgF,CAAAA,CAAAxgF,CAAAwgF,CAAA,EACA,OAAA3wC,CAAAA,CAAAqwC,OAAArwC,CAAA,WAAAA,EAAA,WAAAA,CAAA;;AACA,cAAAnwB,CAAAA,CAAA1f,CAAA0f,CAAA,EAAA;AACA,gBAAAwhE,CAAAA,GAAA,MAAA11B,IAAAA,CAAAC,SAAAD,CAAAxrD,CAAAwrD,EAAAp3B,OAAAo3B,CAAA,QAAAA,EAAA,EAAAA,EACAp3B,OADAo3B,CACA,IADAA,EACA,KADAA,EAEAp3B,OAFAo3B,CAEA,MAFAA,EAEA,GAFAA,CAAA,GAEA,GAFA;AAGA,mBAAA3b,CAAAA,CAAAqwC,OAAArwC,CAAAqxC,CAAArxC,EAAA,QAAAA,CAAA;AAEA;;AAAA,cAAAsxC,CAAAA,CAAAnhF,CAAAmhF,CAAA,EACA,OAAAtxC,CAAAA,CAAAqwC,OAAArwC,CAAA,KAAA7vC,CAAA6vC,EAAA,QAAAA,CAAA;AACA,cAAAwwC,CAAAA,CAAArgF,CAAAqgF,CAAA,EACA,OAAAxwC,CAAAA,CAAAqwC,OAAArwC,CAAA,KAAA7vC,CAAA6vC,EAAA,SAAAA,CAAA;AAEA,cAAA0vC,CAAAA,CAAAv/E,CAAAu/E,CAAA,EACA,OAAA1vC,CAAAA,CAAAqwC,OAAArwC,CAAA,MAAAA,EAAA,MAAAA,CAAA;AA9GAuxC,SA+FA,CA/FAvxC,CA+FA,EA/FA7vC,CA+FA,CA/FA;;AACA,YAAAihF,CAAA,EACA,OAAAA,CAAA;;AAIA,YAAA9iE,CAAAA,GAAA1e,MAAAA,CAAA0e,IAAA1e,CAAAO,CAAAP,CAAA;AAAA,YACA4hF,CAAAA,GApCA,UAAA/uE,CAAA,EAAAA;AACA,cAAAyO,CAAAA,GAAA,EAAA;AAMA,iBAJAzO,CAAAA,CAAA5E,OAAA4E,CAAA,UAAAkZ,CAAA,EAAAsgB,CAAA,EAAAA;AACA/qB,YAAAA,CAAAA,CAAAyK,CAAAzK,CAAAA,GAAAyK,CAAA,CAAAzK;AAAA,WADAzO,GAIAyO,CAAA;AA6BAugE,SApCA,CAoCAnjE,CApCA,CAmCA;;AASA,YANA0xB,CAAAA,CAAAywC,UAAAzwC,KACA1xB,CAAAA,GAAA1e,MAAAA,CAAA8hF,mBAAA9hF,CAAAO,CAAAP,CADAowC,GAMA2xC,CAAAA,CAAAxhF,CAAAwhF,CAAAA,KACArjE,CAAAA,CAAAlS,OAAAkS,CAAA,SAAAA,KAAA,CAAAA,IAAAA,CAAAA,CAAAlS,OAAAkS,CAAA,aAAAA,KAAA,CADAqjE,CAAA,EAEA,OAAAC,CAAAA,CAAAzhF,CAAAyhF,CAAA;;AAIA,YAAA,MAAAtjE,CAAAA,CAAA3c,MAAA,EAAA;AACA,cAAAw/E,CAAAA,CAAAhhF,CAAAghF,CAAA,EAAA;AACA,gBAAA1hF,CAAAA,GAAAU,CAAAA,CAAAV,IAAAU,GAAA,OAAAA,CAAAA,CAAAV,IAAAU,GAAA,EAAA;AACA,mBAAA6vC,CAAAA,CAAAqwC,OAAArwC,CAAA,cAAAvwC,CAAA,GAAA,GAAAuwC,EAAA,SAAAA,CAAA;AAEA;;AAAA,cAAA6xC,CAAAA,CAAA1hF,CAAA0hF,CAAA,EACA,OAAA7xC,CAAAA,CAAAqwC,OAAArwC,CAAA24B,MAAAA,CAAA7nE,SAAA6nE,CAAA32D,QAAA22D,CAAAtpE,IAAAspE,CAAAxoE,CAAAwoE,CAAA34B,EAAA,QAAAA,CAAA;AAEA,cAAA8xC,CAAAA,CAAA3hF,CAAA2hF,CAAA,EACA,OAAA9xC,CAAAA,CAAAqwC,OAAArwC,CAAAj5B,IAAAA,CAAAjW,SAAAiW,CAAA/E,QAAA+E,CAAA1X,IAAA0X,CAAA5W,CAAA4W,CAAAi5B,EAAA,MAAAA,CAAA;AAEA,cAAA2xC,CAAAA,CAAAxhF,CAAAwhF,CAAA,EACA,OAAAC,CAAAA,CAAAzhF,CAAAyhF,CAAA;AAIA;;AAAA,YA2CAjtE,CA3CA;AAAA,YAAAotE,CAAAA,GAAA,EAAA;AAAA,YAAAtvE,CAAAA,GAAAA,CAAA,CAAA;AAAA,YAAAuvE,CAAAA,GAAA,CAAA,GAAA,EAA4C,GAA5C,CAAA;AAA4C,SAG5CtxE,CAAAA,CAAAvQ,CAAAuQ,CAAAA,KACA+B,CAAAA,GAAAA,CAAA,CAAAA,EACAuvE,CAAAA,GAAA,CAAA,GAAA,EAAA,GAAA,CAFAtxE,GAMAywE,CAAAA,CAAAhhF,CAAAghF,CAT4C,MAW5CY,CAAAA,GAAA,gBADA5hF,CAAAA,CAAAV,IAAAU,GAAA,OAAAA,CAAAA,CAAAV,IAAAU,GAAA,EACA,IAAA,GAX4C;AA6B5C,eAdA0hF,CAAAA,CAAA1hF,CAAA0hF,CAAAA,KACAE,CAAAA,GAAA,MAAApZ,MAAAA,CAAA7nE,SAAA6nE,CAAA32D,QAAA22D,CAAAtpE,IAAAspE,CAAAxoE,CAAAwoE,CADAkZ,GAKAC,CAAAA,CAAA3hF,CAAA2hF,CAAAA,KACAC,CAAAA,GAAA,MAAAhrE,IAAAA,CAAAjW,SAAAiW,CAAAkrE,WAAAlrE,CAAA1X,IAAA0X,CAAA5W,CAAA4W,CADA+qE,CALAD,EAUAF,CAAAA,CAAAxhF,CAAAwhF,CAAAA,KACAI,CAAAA,GAAA,MAAAH,CAAAA,CAAAzhF,CAAAyhF,CADAD,CAVAE,EAcA,MAAAvjE,CAAAA,CAAA3c,MAAA,IAAA8Q,CAAAA,IAAA,KAAAtS,CAAAA,CAAAwB,MAAA,GAIAu/E,CAAAA,GAAA,CAAAA,GACAW,CAAAA,CAAA1hF,CAAA0hF,CAAAA,GACA7xC,CAAAA,CAAAqwC,OAAArwC,CAAA24B,MAAAA,CAAA7nE,SAAA6nE,CAAA32D,QAAA22D,CAAAtpE,IAAAspE,CAAAxoE,CAAAwoE,CAAA34B,EAAA,QAAAA,CADA6xC,GAGA7xC,CAAAA,CAAAqwC,OAAArwC,CAAA,UAAAA,EAAA,SAAAA,CAJAkxC,IAQAlxC,CAAAA,CAAAowC,IAAApwC,CAAA3jC,IAAA2jC,CAAA7vC,CAAA6vC,GAIAr7B,CAAAA,GADAlC,CAAAA,GAsCA,UAAAu9B,CAAA,EAAA7vC,CAAA,EAAA+gF,CAAA,EAAAM,CAAA,EAAAljE,CAAA,EAAAA;AAEA,eADA,IAAA3J,CAAAA,GAAA,EAAA,EACA7V,CAAAA,GAAA,CADA,EACAK,CAAAA,GAAAgB,CAAAA,CAAAwB,MAAA,EAAmC7C,CAAAA,GAAAK,CAAnC,EAAmCA,EAAOL,CAA1C,EACAiC,CAAAA,CAAAZ,CAAAY,EAAA+e,MAAAA,CAAAhhB,CAAAghB,CAAA/e,CAAAA,GACA4T,CAAAA,CAAAtI,IAAAsI,CAAAutE,CAAAA,CAAAlyC,CAAAkyC,EAAA/hF,CAAA+hF,EAAAhB,CAAAgB,EAAAV,CAAAU,EACApiE,MAAAA,CAAAhhB,CAAAghB,CADAoiE,EACApjF,CAAA,CADAojF,CAAAvtE,CADA5T,GAIA4T,CAAAA,CAAAtI,IAAAsI,CAAA,EAAAA,CAJA5T;;AAaA,iBANAud,CAAAA,CAAAzQ,OAAAyQ,CAAA,UAAA7d,CAAA,EAAAA;AACAA,YAAAA,CAAAA,CAAA4vB,KAAA5vB,CAAA,OAAAA,KACAkU,CAAAA,CAAAtI,IAAAsI,CAAAutE,CAAAA,CAAAlyC,CAAAkyC,EAAA/hF,CAAA+hF,EAAAhB,CAAAgB,EAAAV,CAAAU,EACAzhF,CADAyhF,EACAzhF,CAAA,CADAyhF,CAAAvtE,CADAlU;AAEA,WAHA6d,GAMA3J,CAAA;AArDAwtE,SAqCA,CArCAnyC,CAqCA,EArCA7vC,CAqCA,EArCA+gF,CAqCA,EArCAM,CAqCA,EArCAljE,CAqCA,CAtCA7L,GAGA6L,CAAAA,CAAAtW,GAAAsW,CAAA,UAAA7d,CAAA,EAAAA;AACA,iBAAAyhF,CAAAA,CAAAlyC,CAAAkyC,EAAA/hF,CAAA+hF,EAAAhB,CAAAgB,EAAAV,CAAAU,EAAAzhF,CAAAyhF,EAAAzvE,CAAAyvE,CAAA;AAAAzvE,SADA6L,CANA0xB,EAWAA,CAAAA,CAAAowC,IAAApwC,CAAA1tC,GAAA0tC,EAXAA,EAwHA,UAAAr7B,CAAA,EAAAotE,CAAA,EAAAC,CAAA,EAAAA;AAQA,cANArtE,CAAAA,CAAAhJ,MAAAgJ,CAAA,UAAAytE,CAAA,EAAAhiB,CAAA,EAAAA;AAGA,mBAFAiiB,GACAjiB,CAAAA,CAAAh0D,OAAAg0D,CAAA,IAAAA,KAAA,CAAAA,IAAAiiB,CADAA,EAEAD,CAAAA,GAAAhiB,CAAAA,CAAA7rC,OAAA6rC,CAAA,iBAAAA,EAAA,EAAAA,EAAAz+D,MAAAygF,GAAA,CAAA;AAAA,WAHAztE,EAIG,CAJHA,IAMA,EAAA,EACA,OAAAqtE,CAAAA,CAAA,CAAAA,CAAAA,IACA,OAAAD,CAAA,GAAA,EAAA,GAAAA,CAAAA,GAAA,KADAC,IAEA,GAFAA,GAGArtE,CAAAA,CAAA8V,IAAA9V,CAAA,OAAAA,CAHAqtE,GAIA,GAJAA,GAKAA,CAAAA,CAAA,CAAAA,CALA;AAQA,iBAAAA,CAAAA,CAAA,CAAAA,CAAAA,GAAAD,CAAAC,GAAA,GAAAA,GAAArtE,CAAAA,CAAA8V,IAAA9V,CAAA,IAAAA,CAAAqtE,GAAA,GAAAA,GAAAA,CAAAA,CAAA,CAAAA,CAAA;AA5HAM,SA2GA,CA3GA3tE,CA2GA,EA3GAotE,CA2GA,EA3GAC,CA2GA,CAhIAd,CAJA,GACAc,CAAAA,CAAA,CAAAA,CAAAA,GAAAD,CAAAC,GAAAA,CAAAA,CAAA,CAAAA,CADA;AAgDA;;AAAA,eAAAJ,CAAA,CAAAzhF,CAAA,EAAAA;AACA,eAAA,MAAA6F,KAAAA,CAAAlF,SAAAkF,CAAAgM,QAAAhM,CAAA3G,IAAA2G,CAAA7F,CAAA6F,CAAA,GAAA,GAAA;AAwBA;;AAAA,eAAAk8E,CAAA,CAAAlyC,CAAA,EAAA7vC,CAAA,EAAA+gF,CAAA,EAAAM,CAAA,EAAA/gF,CAAA,EAAAgS,CAAA,EAAAA;AACA,YAAAhT,CAAA,EAAAiS,CAAA,EAAA6wE,CAAA;;AAsCA,YAAA,CArCAA,CAAAA,GAAA3iF,MAAAA,CAAA0/E,wBAAA1/E,CAAAO,CAAAP,EAAAa,CAAAb,KAAA;AAAyDO,UAAAA,KAAAA,EAAAA,CAAAA,CAAAM,CAAAN;AAAzD,SAqCA,EApCAJ,GAoCA,GAlCA2R,CAAAA,GADA6wE,CAAAA,CAAA79E,GAAA69E,GACAvyC,CAAAA,CAAAqwC,OAAArwC,CAAA,iBAAAA,EAAA,SAAAA,CADAuyC,GAGAvyC,CAAAA,CAAAqwC,OAAArwC,CAAA,UAAAA,EAAA,SAAAA,CAgCA,GA7BAuyC,CAAAA,CAAA79E,GAAA69E,KACA7wE,CAAAA,GAAAs+B,CAAAA,CAAAqwC,OAAArwC,CAAA,UAAAA,EAAA,SAAAA,CADAuyC,CA6BA,EAzBAxhF,CAAAA,CAAAygF,CAAAzgF,EAAAN,CAAAM,CAAAA,KACAtB,CAAAA,GAAA,MAAAgB,CAAA,GAAA,GADAM,CAyBA,EAtBA2Q,CAAAA,KACAs+B,CAAAA,CAAAowC,IAAApwC,CAAA5jC,OAAA4jC,CAAAuyC,CAAAA,CAAApiF,KAAA6vC,IAAA,CAAAA,GAAA,CAEAt+B,CAAAA,GADAguE,CAAAA,CAAAwB,CAAAxB,CAAAA,GACAoB,CAAAA,CAAA9wC,CAAA8wC,EAAAyB,CAAAA,CAAApiF,KAAA2gF,EAAA,IAAAA,CADApB,GAGAoB,CAAAA,CAAA9wC,CAAA8wC,EAAAyB,CAAAA,CAAApiF,KAAA2gF,EAAAI,CAAAA,GAAA,CAAAJ,CAJA,EAMA10E,OANA,CAMA,IANA,IAMA,CAAA,CANA,KAQAsF,CAAAA,GADAe,CAAAA,GACAf,CAAAA,CAAAxE,KAAAwE,CAAA,IAAAA,EAAA1J,GAAA0J,CAAA,UAAAu3C,CAAA,EAAAA;AACA,iBAAA,OAAAA,CAAA;AAAAA,SADAv3C,EAEW+Y,IAFX/Y,CAEW,IAFXA,EAEWwb,MAFXxb,CAEW,CAFXA,CADAe,GAKA,OAAAf,CAAAA,CAAAxE,KAAAwE,CAAA,IAAAA,EAAA1J,GAAA0J,CAAA,UAAAu3C,CAAA,EAAAA;AACA,iBAAA,QAAAA,CAAA;AAAAA,SADAv3C,EAEW+Y,IAFX/Y,CAEW,IAFXA,CAZA,CAAAs+B,GAkBAt+B,CAAAA,GAAAs+B,CAAAA,CAAAqwC,OAAArwC,CAAA,YAAAA,EAAA,SAAAA,CAnBAt+B,CAsBA,EAAAivE,CAAAA,CAAAlhF,CAAAkhF,CAAA,EAAA;AACA,cAAAluE,CAAAA,IAAAhS,CAAAA,CAAA4vB,KAAA5vB,CAAA,OAAAA,CAAA,EACA,OAAAiR,CAAA;AAAAA,WAEAjS,CAAAA,GAAAksD,IAAAA,CAAAC,SAAAD,CAAA,KAAAlrD,CAAAkrD,CAFAj6C,EAGA2e,KAHA3e,CAGA,8BAHAA,KAIAjS,CAAAA,GAAAA,CAAAA,CAAAytB,MAAAztB,CAAA,CAAAA,EAAAA,CAAAA,CAAAkC,MAAAlC,GAAA,CAAAA,CAAAA,EACAA,CAAAA,GAAAuwC,CAAAA,CAAAqwC,OAAArwC,CAAAvwC,CAAAuwC,EAAA,MAAAA,CALAt+B,KAOAjS,CAAAA,GAAAA,CAAAA,CAAA80B,OAAA90B,CAAA,IAAAA,EAAA,KAAAA,EACA80B,OADA90B,CACA,MADAA,EACA,GADAA,EAEA80B,OAFA90B,CAEA,UAFAA,EAEA,GAFAA,CAAAA,EAGAA,CAAAA,GAAAuwC,CAAAA,CAAAqwC,OAAArwC,CAAAvwC,CAAAuwC,EAAA,QAAAA,CAVAt+B;AAcA;;AAAA,eAAAjS,CAAAA,GAAA,IAAAA,GAAAiS,CAAA;AA2BA;;AAAA,eAAAhB,CAAA,CAAA8xE,CAAA,EAAAA;AACA,eAAAn/E,KAAAA,CAAAqN,OAAArN,CAAAm/E,CAAAn/E,CAAA;AAIA;;AAAA,eAAAm9E,CAAA,CAAAx1D,CAAA,EAAAA;AACA,eAAA,aAAA,OAAAA,CAAA;AAIA;;AAAA,eAAA00D,CAAA,CAAA10D,CAAA,EAAAA;AACA,eAAA,SAAAA,CAAA;AASA;;AAAA,eAAAs2D,CAAA,CAAAt2D,CAAA,EAAAA;AACA,eAAA,YAAA,OAAAA,CAAA;AAIA;;AAAA,eAAAnL,CAAA,CAAAmL,CAAA,EAAAA;AACA,eAAA,YAAA,OAAAA,CAAA;AASA;;AAAA,eAAA21D,CAAA,CAAA31D,CAAA,EAAAA;AACA,eAAA,KAAA,CAAA,KAAAA,CAAA;AAIA;;AAAA,eAAA62D,CAAA,CAAAY,CAAA,EAAAA;AACA,eAAA1iE,CAAAA,CAAA0iE,CAAA1iE,CAAAA,IAAA,sBAAA2iE,CAAAA,CAAAD,CAAAC,CAAA;AAIA;;AAAA,eAAA3iE,CAAA,CAAAiL,CAAA,EAAAA;AACA,eAAA,YAAA,OAAAA,CAAA,IAAA,SAAAA,CAAA;AAIA;;AAAA,eAAA82D,CAAA,CAAAtiF,CAAA,EAAAA;AACA,eAAAugB,CAAAA,CAAAvgB,CAAAugB,CAAAA,IAAA,oBAAA2iE,CAAAA,CAAAljF,CAAAkjF,CAAA;AAIA;;AAAA,eAAAf,CAAA,CAAAxoE,CAAA,EAAAA;AACA,eAAA4G,CAAAA,CAAA5G,CAAA4G,CAAAA,KACA,qBAAA2iE,CAAAA,CAAAvpE,CAAAupE,CAAA,IAAAvpE,CAAAA,YAAAnT,KADA+Z,CAAA;AAKA;;AAAA,eAAAohE,CAAA,CAAAn2D,CAAA,EAAAA;AACA,eAAA,cAAA,OAAAA,CAAA;AAgBA;;AAAA,eAAA03D,CAAA,CAAA/iF,CAAA,EAAAA;AACA,eAAAC,MAAAA,CAAAkB,SAAAlB,CAAAoS,QAAApS,CAAAP,IAAAO,CAAAD,CAAAC,CAAA;AAIA;;AAAA,eAAAgL,CAAA,CAAAjK,CAAA,EAAAA;AACA,eAAAA,CAAAA,GAAA,EAAAA,GAAA,MAAAA,CAAAA,CAAAqR,QAAArR,CAAA,EAAAA,CAAAA,GAAAA,CAAAA,CAAAqR,QAAArR,CAAA,EAAAA,CAAA;AApbAlC;;AAAAA,MAAAA,CAAAA,CAAAkkF,QAAAlkF,GAAA,UAAAiG,CAAA,EAAAA;AAIA,YAHAi8E,CAAAA,CAAAV,CAAAU,CAAAA,KACAV,CAAAA,GAAAvgE,CAAAA,CAAAwhB,GAAAxhB,CAAAkjE,UAAAljE,IAAA,EADAihE,GAEAj8E,CAAAA,GAAAA,CAAAA,CAAAgiE,WAAAhiE,EAFAi8E,EAEAja,CACAwZ,CAAAA,CAAAx7E,CAAAw7E,CAAA,EACA,IAAA,IAAAvX,MAAA,CAAA,QAAAjkE,CAAA,GAAA,KAAA,EAAA,GAAA,EAAA0rC,IAAA,CAAA6vC,CAAA,CAAA,EAAA;AACA,cAAA4C,CAAAA,GAAAnjE,CAAAA,CAAAmjE,GAAA;;AACA3C,UAAAA,CAAAA,CAAAx7E,CAAAw7E,CAAAA,GAAA,YAAA;AACA,gBAAAP,CAAAA,GAAAlhF,CAAAA,CAAAkoE,MAAAloE,CAAAkwB,KAAAlwB,CAAAA,CAAAA,EAAAiD,SAAAjD,CAAA;AACAiX,YAAAA,OAAAA,CAAAM,KAAAN,CAAA,WAAAA,EAAAhR,CAAAgR,EAAAmtE,CAAAntE,EAAAiqE,CAAAjqE;AAAAiqE,WAFAO;AAEAP,SAJA,MAOAO,CAAAA,CAAAx7E,CAAAw7E,CAAAA,GAAA,YAAA,CAAA,CAAAA;AAGA,eAAAA,CAAAA,CAAAx7E,CAAAw7E,CAAA;AAAAx7E,OAfAjG,EAmDAA,CAAAA,CAAA2xB,OAAA3xB,GAAA2xB,CAnDA3xB,EAuDA2xB,CAAAA,CAAAmwD,MAAAnwD,GAAA;AACA0yD,QAAAA,IAAAA,EAAA,CAAA,CAAA,EAAA,EAAA,CADA;AAEAC,QAAAA,MAAAA,EAAA,CAAA,CAAA,EAAA,EAAA,CAFA;AAGAC,QAAAA,SAAAA,EAAA,CAAA,CAAA,EAAA,EAAA,CAHA;AAIAC,QAAAA,OAAAA,EAAA,CAAA,CAAA,EAAA,EAAA,CAJA;AAKAC,QAAAA,KAAAA,EAAA,CAAA,EAAA,EAAA,EAAA,CALA;AAMAC,QAAAA,IAAAA,EAAA,CAAA,EAAA,EAAA,EAAA,CANA;AAOAC,QAAAA,KAAAA,EAAA,CAAA,EAAA,EAAA,EAAA,CAPA;AAQAC,QAAAA,IAAAA,EAAA,CAAA,EAAA,EAAA,EAAA,CARA;AASAC,QAAAA,IAAAA,EAAA,CAAA,EAAA,EAAA,EAAA,CATA;AAUAC,QAAAA,KAAAA,EAAA,CAAA,EAAA,EAAA,EAAA,CAVA;AAWAC,QAAAA,OAAAA,EAAA,CAAA,EAAA,EAAA,EAAA,CAXA;AAYAC,QAAAA,GAAAA,EAAA,CAAA,EAAA,EAAA,EAAA,CAZA;AAaAC,QAAAA,MAAAA,EAAA,CAAA,EAAA,EAAA,EAAA;AAbA,OAvDAjlF,EAwEA2xB,CAAAA,CAAA6wD,MAAA7wD,GAAA;AACAuzD,QAAAA,OAAAA,EAAA,MADA;AAEAC,QAAAA,MAAAA,EAAA,QAFA;AAGAC,QAAAA,OAAAA,EAAA,QAHA;AAIAphF,QAAAA,SAAAA,EAAA,MAJA;AAKAqhF,QAAAA,IAAAA,EAAA,MALA;AAMAz/D,QAAAA,MAAAA,EAAA,OANA;AAOA0/D,QAAAA,IAAAA,EAAA,SAPA;AASAC,QAAAA,MAAAA,EAAA;AATA,OAxEAvlF,EAmWAA,CAAAA,CAAAiS,OAAAjS,GAAAiS,CAnWAjS,EAwWAA,CAAAA,CAAA+hF,SAAA/hF,GAAA+hF,CAxWA/hF,EA6WAA,CAAAA,CAAAihF,MAAAjhF,GAAAihF,CA7WAjhF,EAkXAA,CAAAA,CAAAwlF,iBAAAxlF,GAHA,UAAAusB,CAAA,EAAAA;AACA,eAAA,QAAAA,CAAA;AAAAA,OAhXAvsB,EAuXAA,CAAAA,CAAA6iF,QAAA7iF,GAAA6iF,CAvXA7iF,EA4XAA,CAAAA,CAAAohB,QAAAphB,GAAAohB,CA5XAphB,EAiYAA,CAAAA,CAAAylF,QAAAzlF,GAHA,UAAAusB,CAAA,EAAAA;AACA,eAAA,YAAA,OAAAA,CAAA;AAAAA,OA/XAvsB,EAsYAA,CAAAA,CAAAkiF,WAAAliF,GAAAkiF,CAtYAliF,EA2YAA,CAAAA,CAAAojF,QAAApjF,GAAAojF,CA3YApjF,EAgZAA,CAAAA,CAAAshB,QAAAthB,GAAAshB,CAhZAthB,EAqZAA,CAAAA,CAAAqjF,MAAArjF,GAAAqjF,CArZArjF,EA2ZAA,CAAAA,CAAAkjF,OAAAljF,GAAAkjF,CA3ZAljF,EAgaAA,CAAAA,CAAA0iF,UAAA1iF,GAAA0iF,CAhaA1iF,EA0aAA,CAAAA,CAAA0lF,WAAA1lF,GARA,UAAAusB,CAAA,EAAAA;AACA,eAAA,SAAAA,CAAA,IACA,aAAA,OAAAA,CADA,IAEA,YAAA,OAAAA,CAFA,IAGA,YAAA,OAAAA,CAHA,IAIA,YAAA,OAAAA,CAJA,IAIAA,KACA,CADAA,KACAA,CALA;AAKAA,OAxaAvsB,EA4aAA,CAAAA,CAAA+sB,QAAA/sB,GAAmBQ,CAAAA,CAAQ,GAARA,CA5anBR;AAwbA,UAAA2lF,CAAAA,GAAA,CAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EACA,KADA,EACA,KADA,EACA,KADA,CAAA;;AA8CA,eAAArjF,CAAA,CAAAmf,CAAA,EAAAC,CAAA,EAAAA;AACA,eAAAvgB,MAAAA,CAAAkB,SAAAlB,CAAAmB,cAAAnB,CAAAP,IAAAO,CAAAsgB,CAAAtgB,EAAAugB,CAAAvgB,CAAA;AAjCAnB;;AAAAA,MAAAA,CAAAA,CAAA4W,GAAA5W,GAAA,YAAA;AAVA,YACAe,CADA,EAEA6kF,CAFA;AAWA3uE,QAAAA,OAAAA,CAAAL,GAAAK,CAAA,SAAAA,GAVAlW,CAAAA,GAAA,IAAAuX,IAAA,EAAAvX,EACA6kF,CAAAA,GAAA,CAAAz5E,CAAAA,CAAApL,CAAAA,CAAA8kF,QAAA9kF,EAAAoL,CAAA,EACAA,CAAAA,CAAApL,CAAAA,CAAA+kF,UAAA/kF,EAAAoL,CADA,EAEAA,CAAAA,CAAApL,CAAAA,CAAAglF,UAAAhlF,EAAAoL,CAFA,EAEA6f,IAFA,CAEA,GAFA,CADAjrB,EAIA,CAAAA,CAAAA,CAAAilF,OAAAjlF,EAAA,EAAA4kF,CAAAA,CAAA5kF,CAAAA,CAAAklF,QAAAllF,EAAA4kF,CAAA,EAAAC,CAAA,EAAA55D,IAAA,CAAA,GAAA,CAMA/U,GAAAjX,CAAAA,CAAAkoE,MAAAloE,CAAAkwB,KAAAlwB,CAAAA,CAAAA,EAAAiD,SAAAjD,CAAAiX;AAAAhU,OADAjD,EAkBAA,CAAAA,CAAAkmF,QAAAlmF,GAAmBQ,CAAAA,CAAQ,GAARA,CAlBnBR,EAoBAA,CAAAA,CAAAiiF,OAAAjiF,GAAA,UAAAmmF,CAAA,EAAA9mE,CAAA,EAAAA;AAEA,YAAA,CAAAA,CAAA,IAAAA,CAAAiC,CAAAA,CAAAjC,CAAAiC,CAAA,EAAA,OAAA6kE,CAAA;;AAIA,aAFA,IAAAtmE,CAAAA,GAAA1e,MAAAA,CAAA0e,IAAA1e,CAAAke,CAAAle,CAAA,EACAd,CAAAA,GAAAwf,CAAAA,CAAA3c,MACA,EAAA7C,CAAAA,EAAA,GACA8lF,CAAAA,CAAAtmE,CAAAA,CAAAxf,CAAAwf,CAAAsmE,CAAAA,GAAA9mE,CAAAA,CAAAQ,CAAAA,CAAAxf,CAAAwf,CAAAR,CAAA8mE;;AAEA,eAAAA,CAAA;AAAAA,OA7BAnmF;AAoCA,UAAAomF,CAAAA,GAAA,eAAA,OAAA5kF,MAAA,GAAAA,MAAAA,CAAA,uBAAAA,CAAA,GAAA,KAAAwC,CAAA;;AA0DA,eAAAqiF,CAAA,CAAA9rE,CAAA,EAAAsyC,CAAA,EAAAA;AAKA,YAAA,CAAAtyC,CAAA,EAAA;AACA,cAAA+rE,CAAAA,GAAA,IAAA/+E,KAAA,CAAA,yCAAA,CAAA;AACA++E,UAAAA,CAAAA,CAAA/rE,MAAA+rE,GAAA/rE,CAAA+rE,EACA/rE,CAAAA,GAAA+rE,CADAA;AAGA;;AAAA,eAAAz5B,CAAAA,CAAAtyC,CAAAsyC,CAAA;AAlEA7sD;;AAAAA,MAAAA,CAAAA,CAAAu+E,SAAAv+E,GAAA,UAAAumF,CAAA,EAAAA;AACA,YAAA,cAAA,OAAAA,CAAA,EACA,MAAA,IAAA/5E,SAAA,CAAA,kDAAA,CAAA;;AAEA,YAAA45E,CAAAA,IAAAG,CAAAA,CAAAH,CAAAG,CAAA,EAAA;AACA,cAAAj9C,CAAA;AACA,cAAA,cAAA,QADAA,CAAAA,GAAAi9C,CAAAA,CAAAH,CAAAG,CACA,CAAA,EACA,MAAA,IAAA/5E,SAAA,CAAA,+DAAA,CAAA;AAKA,iBAHArL,MAAAA,CAAAC,cAAAD,CAAAmoC,CAAAnoC,EAAAilF,CAAAjlF,EAAA;AACAO,YAAAA,KAAAA,EAAA4nC,CADA;AACAjoC,YAAAA,UAAAA,EAAAA,CAAA,CADA;AACAmlF,YAAAA,QAAAA,EAAAA,CAAA,CADA;AACA31D,YAAAA,YAAAA,EAAAA,CAAA;AADA,WAAA1vB,GAGAmoC,CAAA;AAGA;;AAAA,iBAAAA,CAAA,GAAAA;AAQA,eAPA,IAAAm9C,CAAA,EAAAC,CAAA,EACAC,CAAAA,GAAA,IAAAvsE,OAAA,CAAA,UAAAC,CAAA,EAAAC,CAAA,EAAAA;AACAmsE,YAAAA,CAAAA,GAAApsE,CAAAosE,EACAC,CAAAA,GAAApsE,CADAmsE;AACAnsE,WAFA,CADA,EAMAgoB,CAAAA,GAAA,EANA,EAOAjiC,CAAAA,GAAA,CAAA,EAAmBA,CAAAA,GAAA4C,SAAAA,CAAAC,MAAnB,EAAyC7C,CAAAA,EAAzC,EACAiiC,CAAAA,CAAA10B,IAAA00B,CAAAr/B,SAAAA,CAAA5C,CAAA4C,CAAAq/B;;AAEAA,UAAAA,CAAAA,CAAA10B,IAAA00B,CAAA,UAAAxlB,CAAA,EAAApb,CAAA,EAAAA;AACAob,YAAAA,CAAAA,GACA4pE,CAAAA,CAAA5pE,CAAA4pE,CADA5pE,GAGA2pE,CAAAA,CAAA/kF,CAAA+kF,CAHA3pE;AAGApb,WAJA4gC;;AAQA,cAAA;AACAikD,YAAAA,CAAAA,CAAAr2D,KAAAq2D,CAAAz0E,IAAAy0E,EAAAjkD,CAAAikD;AACK,WAFL,CAEK,OAAAzpE,CAAA,EAAAA;AACL4pE,YAAAA,CAAAA,CAAA5pE,CAAA4pE,CAAAA;AAGA;;AAAA,iBAAAC,CAAA;AAQA;;AAAA,eALAxlF,MAAAA,CAAAylF,cAAAzlF,CAAAmoC,CAAAnoC,EAAAA,MAAAA,CAAA0lF,cAAA1lF,CAAAolF,CAAAplF,CAAAA,GAEAilF,CAAAA,IAAAjlF,MAAAA,CAAAC,cAAAD,CAAAmoC,CAAAnoC,EAAAilF,CAAAjlF,EAAA;AACAO,UAAAA,KAAAA,EAAA4nC,CADA;AACAjoC,UAAAA,UAAAA,EAAAA,CAAA,CADA;AACAmlF,UAAAA,QAAAA,EAAAA,CAAA,CADA;AACA31D,UAAAA,YAAAA,EAAAA,CAAA;AADA,SAAA1vB,CAFAA,EAKAA,MAAAA,CAAA2lF,gBAAA3lF,CACAmoC,CADAnoC,EAEAw/E,CAAAA,CAAA4F,CAAA5F,CAFAx/E,CAAA;AAEAolF,OAlDAvmF,EAsDAA,CAAAA,CAAAu+E,SAAAv+E,CAAA+mF,MAAA/mF,GAAAomF,CAtDApmF,EAuGAA,CAAAA,CAAAgnF,WAAAhnF,GAlCA,UAAAumF,CAAA,EAAAA;AACA,YAAA,cAAA,OAAAA,CAAA,EACA,MAAA,IAAA/5E,SAAA,CAAA,kDAAA,CAAA;;AAMA,iBAAAy6E,CAAA,GAAAA;AAEA,eADA,IAAA3kD,CAAAA,GAAA,EAAA,EACAjiC,CAAAA,GAAA,CAAA,EAAmBA,CAAAA,GAAA4C,SAAAA,CAAAC,MAAnB,EAAyC7C,CAAAA,EAAzC,EACAiiC,CAAAA,CAAA10B,IAAA00B,CAAAr/B,SAAAA,CAAA5C,CAAA4C,CAAAq/B;;AAGA,cAAA4kD,CAAAA,GAAA5kD,CAAAA,CAAAz+B,GAAAy+B,EAAA;AACA,cAAA,cAAA,OAAA4kD,CAAA,EACA,MAAA,IAAA16E,SAAA,CAAA,4CAAA,CAAA;;AAEA,cAAAmU,CAAAA,GAAA7O,IAAA;AAAA,cACA+6C,CAAAA,GAAA,YAAA;AACA,mBAAAq6B,CAAAA,CAAAh3D,KAAAg3D,CAAAvmE,CAAAumE,EAAAjkF,SAAAikF,CAAA;AAAAjkF,WAFA;;AAMAsjF,UAAAA,CAAAA,CAAAr2D,KAAAq2D,CAAAz0E,IAAAy0E,EAAAjkD,CAAAikD,EACApsE,IADAosE,CACA,UAAAp0D,CAAA,EAAAA;AAA2BlR,YAAAA,CAAAA,CAAAohB,QAAAphB,CAAA4rC,CAAA5rC,EAAA,IAAAA,EAAAkR,CAAAlR;AAAAkR,WAD3Bo0D,EAEA,UAAAY,CAAA,EAAAA;AAA2BlmE,YAAAA,CAAAA,CAAAohB,QAAAphB,CAAAolE,CAAAplE,EAAAkmE,CAAAlmE,EAAA4rC,CAAA5rC;AAAA4rC,WAF3B05B;AAQA;;AAAA,eAHAplF,MAAAA,CAAAylF,cAAAzlF,CAAA8lF,CAAA9lF,EAAAA,MAAAA,CAAA0lF,cAAA1lF,CAAAolF,CAAAplF,CAAAA,GACAA,MAAAA,CAAA2lF,gBAAA3lF,CAAA8lF,CAAA9lF,EACAw/E,CAAAA,CAAA4F,CAAA5F,CADAx/E,CADAA,EAGA8lF,CAAA;AAAAA,OArGAjnF;AAqGAinF,KDjqBanK,ECiqBbmK,IDjqBanK,CCiqBbmK,IDjqBanK,ECiqBbmK,CAAAA,CAAAA,EAAAA,CDjqBanK;ACiqBbmK,GxK1mBA,EwK0mBAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AC5rBAhnF,IAAAA,CAAAA,CAAAD,OAAAC,GAAA,UAAAssB,CAAA,EAAAA;AACA,aAAAA,CAAAA,IAAA,YAAA,OAAAA,CAAAA,IACA,cAAA,OAAAA,CAAAA,CAAAU,IADAV,IAEA,cAAA,OAAAA,CAAAA,CAAAze,IAFAye,IAGA,cAAA,OAAAA,CAAAA,CAAA6G,SAHA;AAGAA,KAJAnzB;AAIAmzB,GzK8EA,EyK9EAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;ACJA,kBAAA,OAAAjyB,MAAAA,CAAAY,MAAA,GAEA9B,CAAAA,CAAAD,OAAAC,GAAA,UAAAmnF,CAAA,EAAAC,CAAA,EAAAA;AACAD,MAAAA,CAAAA,CAAAE,MAAAF,GAAAC,CAAAD,EACAA,CAAAA,CAAA/kF,SAAA+kF,GAAAjmF,MAAAA,CAAAY,MAAAZ,CAAAkmF,CAAAA,CAAAhlF,SAAAlB,EAAA;AACA+Q,QAAAA,WAAAA,EAAA;AACAxQ,UAAAA,KAAAA,EAAA0lF,CADA;AAEA/lF,UAAAA,UAAAA,EAAAA,CAAA,CAFA;AAGAmlF,UAAAA,QAAAA,EAAAA,CAAA,CAHA;AAIA31D,UAAAA,YAAAA,EAAAA,CAAA;AAJA;AADA,OAAA1vB,CADAimF;AAMA,KATA,GAeAnnF,CAAAA,CAAAD,OAAAC,GAAA,UAAAmnF,CAAA,EAAAC,CAAA,EAAAA;AACAD,MAAAA,CAAAA,CAAAE,MAAAF,GAAAC,CAAAD;;AACA,UAAAG,CAAAA,GAAA,YAAA,CAAA,CAAA;;AACAA,MAAAA,CAAAA,CAAAllF,SAAAklF,GAAAF,CAAAA,CAAAhlF,SAAAklF,EACAH,CAAAA,CAAA/kF,SAAA+kF,GAAA,IAAAG,CAAA,EADAA,EAEAH,CAAAA,CAAA/kF,SAAA+kF,CAAAl1E,WAAAk1E,GAAAA,CAFAG;AAEAH,KApBA;AAoBAA,G1K8DA,E0K9DAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,SAAAA,IAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,aAAAA,KAAAA,CAAAA,KAAAA,CAAAA,GAAAA,OAAAA,CAAAA,EAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA,iBAAAA,CAAAA,CAAAA,CAAAA,EAAAA;AAAAA,cAAAA;AAAAA,YAAAA,CAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,WAAAA,CAAAA,OAAAA,CAAAA,EAAAA;AAAAA,YAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA;AAAAA;;AAAAA,iBAAAA,CAAAA,CAAAA,CAAAA,EAAAA;AAAAA,cAAAA;AAAAA,YAAAA,CAAAA,CAAAA,CAAAA,CAAAA,KAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,WAAAA,CAAAA,OAAAA,CAAAA,EAAAA;AAAAA,YAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA;AAAAA;;AAAAA,icAAAA,IAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,iBAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,SAAAA;AAAAA,QAAAA,IAAAA,EAAAA,EAAAA;AAAAA,QAAAA,GAAAA,EAAAA;AAAAA,OAAAA;AAAAA,aAAAA,CAAAA,GAAAA;AAAAA,QAAAA,IAAAA,EAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,QAAAA,KAAAA,EAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,QAAAA,MAAAA,EAAAA,CAAAA,CAAAA,CAAAA;AAAAA,OAAAA,EAAAA,cAAAA,OAAAA,MAAAA,KAAAA,CAAAA,CAAAA,MAAAA,CAAAA,QAAAA,CAAAA,GAAAA,YAAAA;AAAAA,eAAAA,IAAAA;AAAAA,OAAAA,CAAAA,EAAAA,CAAAA;;AAAAA,eAAAA,CAAAA,CAAAA,CAAAA,EAAAA;AAAAA,eAAAA,UAAAA,CAAAA,EAAAA;AAAAA,iBAAAA,UAAAA,CAAAA,EAAAA;AAAAA,gBAAAA,CAAAA,EAAAA,MAAAA,IAAAA,SAAAA,CAAAA,iCAAAA,CAAAA;;AAAAA,mBAAAA,CAAAA,GAAAA,IAAAA;AAAAA,kBAAAA,CAAAA,GAAAA,CAAAA,EAAAA,CAAAA,KAAAA,CAAAA,GAAAA,IAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,MAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,KAAAA,KAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,MAAAA,KAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,IAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAAA,IAAAA,EAAAA,OAAAA,CAAAA;;AAAAA,sBAAAA,CAAAA,GAAAA,CAAAA,EAAAA,CAAAA,KAAAA,CAAAA,GAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,KAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,qBAAAA,CAAAA;AAAAA,qBAAAA,CAAAA;AAAAA,kBAAAA,CAAAA,GAAAA,CAAAA;AAAAA;;AAAAA,qBAAAA,CAAAA;AAAAA,yBAAAA,CAAAA,CAAAA,KAAAA,IAAAA;AAAAA,oBAAAA,KAAAA,EAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,oBAAAA,IAAAA,EAAAA,CAAAA;AAAAA,mBAAAA;;AAAAA,qBAAAA,CAAAA;AAAAA,kBAAAA,CAAAA,CAAAA,KAAAA,IAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA;AAAAA;;AAAAA,qBAAAA,CAAAA;AAAAA,kBAAAA,CAAAA,GAAAA,CAAAA,CAAAA,GAAAA,CAAAA,GAAAA,EAAAA,EAAAA,CAAAA,CAAAA,IAAAA,CAAAA,GAAAA,EAAAA;AAAAA;;AAAAA;AAAAA,sBAAAA,EAAAA,CAAAA,GAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,IAAAA,EAAAA,MAAAA,GAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,CAAAA,MAAAA,GAAAA,CAAAA,CAAAA,MAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,IAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAAA;AAAAA,oBAAAA,CAAAA,GAAAA,CAAAA;AAAAA;AAAAA;;AAAAA,sBAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,KAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAAA;AAAAA,oBAAAA,CAAAA,CAAAA,KAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA;AAAAA;;AAAAA,sBAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,KAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAAA;AAAAA,oBAAAA,CAAAA,CAAAA,KAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,GAAAA,CAAAA;AAAAA;AAAAA;;AAAAA,sBAAAA,CAAAA,IAAAA,CAAAA,CAAAA,KAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAAA;AAAAA,oBAAAA,CAAAA,CAAAA,KAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,GAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA;AAAAA;AAAAA;;AAAAA,kBAAAA,CAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,GAAAA,CAAAA,GAAAA,EAAAA,EAAAA,CAAAA,CAAAA,IAAAA,CAAAA,GAAAA,EAAAA;AAAAA;AAAAA;;AAAAA,cAAAA,CAAAA,GAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA;AAAAA,aAAAA,CAAAA,OAAAA,CAAAA,EAAAA;AAAAA,cAAAA,CAAAA,GAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,EAAAA,CAAAA,GAAAA,CAAAA;AAAAA,aAAAA,SAAAA;AAAAA,cAAAA,CAAAA,GAAAA,CAAAA,GAAAA,CAAAA;AAAAA;;AAAAA,gBAAAA,IAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EAAAA,MAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAAAA,mBAAAA;AAAAA,cAAAA,KAAAA,EAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,KAAAA,CAAAA;AAAAA,cAAAA,IAAAA,EAAAA,CAAAA;AAAAA,aAAAA;AAAAA,WAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,CAAAA;AAAAA,SAAAA;AAAAA;AAAAA,KAAAA;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,QAAAA,IAAAA,UAAAA,CAAAA,EAAAA;AAAAA,UAAAA,CAAAA,GAAAA,cAAAA,OAAAA,MAAAA,IAAAA,CAAAA,CAAAA,MAAAA,CAAAA,QAAAA,CAAAA;AAAAA,UAAAA,CAAAA,GAAAA,CAAAA;AAAAA,aAAAA,CAAAA,GAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,GAAAA;AAAAA,QAAAA,IAAAA,EAAAA,YAAAA;AAAAA,iBAAAA,CAAAA,IAAAA,CAAAA,IAAAA,CAAAA,CAAAA,MAAAA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA;AAAAA,YAAAA,KAAAA,EAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA;AAAAA,YAAAA,IAAAA,EAAAA,CAAAA;AAAAA,WAAAA;AAAAA;AAAAA,OAAAA;AAAAA,KAAAA;;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;ACwDA,QAAMI,CAAAA,GAAsC,IAAI70B,GAAJ,EAA5C;;AA4BA,aAAe80B,CAAf,CAA8B1J,CAA9B,EAA8BA;AAAAA,aAAAA,CAAAA,CAAAA,IAAAA,EAAAA,KAAAA,CAAAA,EAAAA,KAAAA,CAAAA,EAAAA,YAAAA;AAAAA,YAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA;AAAAA,eAAAA,CAAAA,CAAAA,IAAAA,EAAAA,UAAAA,CAAAA,EAAAA;AAAAA,kBAAAA,CAAAA,CAAAA,KAAAA;AAAAA,iBAAAA,CAAAA;AAAAA,qBAAAA,KAGW,CAHXA,KAGW,CAFjC2J,CAAAA,GAAan/E,IAAAA,CAAKo7B,OAEe,EAAjBo6C,CAAiB,CAHXA,IAoB9B,UAAmBt8D,CAAnB,EAAmBA;AAEjB,oBAAMvgB,CAAAA,GAAIugB,CAAV;AAGA,oBACI,gBAAgBvgB,CAAhB,IAA6C,cAAA,OAAjBA,CAAAA,CAAEw8B,UAA9B,IACA,0BAA0Bx8B,CAD1B,IACiE,cAAA,OAA3BA,CAAAA,CAAE0tC,oBADxC,IAEA,aAAa1tC,CAFb,IAEuC,cAAA,OAAdA,CAAAA,CAAE4tC,OAH/B,EAKE,OAAA,CAAO,CAAP;AAGF,uBAAA,CAAO,CAAP;AA9BsD64C,eAiBxD,CAjBkED,CAAAA,CAAW3J,CAAX2J,CAiBlE,CApB8B3J,GAIrB2J,CAAAA,CAAW3J,CAAX2J,CAAAA,CAAwBE,QAAxBF,GAAD,CAAA,CAAA,EAAA,CAAA,CAACA,IACG/jD,CAAAA,GAAU+jD,CAAAA,CAAW3J,CAAX2J,CAAV/jD,EAEc,YAAA,QADhBpoB,CAAAA,GAAOooB,CAAAA,CAAQjG,UAARiG,EACS,CAAA,IAAY,UAAUpoB,CAAtB,GACX,CAAA,CAAA,EAAMA,CAAN,CADW,GAAhB,CAAA,CAAA,EAAA,CAAA,CAHDmsE,CAJqB3J,GAGxB,CAAA,CAAA,EAAA,CAAA,CAHwBA;;AAGxB,iBAAA,CAAA;AAKExiE,cAAAA,CAAAA,GAAOzW,CAAAA,CAAA6N,IAAA7N,EAAPyW,EAAO5I,CAAAA,CAAAA,KAAAA,GAAAA,CAAP4I;;AAAO5I,iBAAAA,CAAAA;AAET,kBAAI4I,CAAJ,EAEE,OADAisE,CAAAA,CAAcvhF,GAAduhF,CAAkBzJ,CAAlByJ,EAA+B7jD,CAA/B6jD,GACA,CAAA,CAAA,EAAO7jD,CAAP,CAAA;AAAOA,cAAAA,CAAAA,CAAAA,KAAAA,GAAAA,CAAAA;;AAAAA,iBAAAA,CAAAA;AAKb,qBAAA,CAAA,CAAA,EAAA,KAAO3/B,CAAP,CAAA;AAjB4B+5E;AAiBrB/5E,SAjBqB+5E,CAAAA;AAiBrB/5E,OAjBqB+5E,CAAAA;AAtB9B/9E;;AAAAA,IAAAA,CAAAA,CAAAm+E,OAAAn+E,GAAA,SAAsBm+E,CAAtB,CAA8B0J,CAA9B,EAA8BA;AAAAA,aAAAA,CAAAA,CAAAA,IAAAA,EAAAA,KAAAA,CAAAA,EAAAA,KAAAA,CAAAA,EAAAA,YAAAA;AAAAA,YAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA;AAAAA,eAAAA,CAAAA,CAAAA,IAAAA,EAAAA,UAAAA,CAAAA,EAAAA;AAAAA,kBAAAA,CAAAA,CAAAA,KAAAA;AAAAA,iBAAAA,CAAAA;AAAAA,qBACvBA,CAAAA,GAAD,CAAA,CAAA,EAAA,CAAA,CAACA,GACH,CAAA,CAAA,EAAO1J,CAAAA,CAAQ,CAAC,OAAD,EAAU,MAAV,EAAkB,KAAlB,CAARA,CAAP,CAF0B0J;;AAEO,iBAAA,CAAA;AAE3BC,cAAAA,CAAAA,GAAwB,YAAA,OAATD,CAAS,GAAW,CAACA,CAAD,CAAX,GAAoBA,CAA5CC,EAA4CD,CAAAA,CAAAA,KAAAA,GAAAA,CAA5CC;;AAA4CD,iBAAAA,CAAAA;AAAAA,cAAAA,CAAAA,CAAAA,IAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,CAAAA,GAExBE,CAAAA,GAAAr7E,CAAAA,CAAAo7E,CAAAp7E,CAFwBm7E,EAEnBG,CAAAA,GAAAD,CAAAA,CAAAn7E,IAAAm7E,EAFmBF,EAEnBj7E,CAAAA,CAAAA,KAAAA,GAAAA,CAFmBi7E;;AAEnBj7E,iBAAAA,CAAAA;AAAAA,qBAAAA,CAAAA,CAAAA,IAAAA,GAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,IAApBmxE,CAAAA,GAAWiK,CAAAA,CAAAtmF,KAAXq8E,EAAWr8E,CACdmQ,CAAAA,GAAQ21E,CAAAA,CAAclmF,GAAdkmF,CAAkBzJ,CAAlByJ,CADM9lF,IAGlB,CAAA,CAAA,EAAOmQ,CAAP,CAHkBnQ,GAMJ,CAAA,CAAA,EAAM+lF,CAAAA,CAAe1J,CAAf0J,CAAN,CANa76E,CAAAA;;AAMQmxE,iBAAAA,CAAAA;AACrC,kBADMp6C,CAAAA,GAAUjxB,CAAAA,CAAAC,IAAAD,EAChB,EACE,OAAA,CAAA,CAAA,EAAOixB,CAAP,CAAA;AAAOA,cAAAA,CAAAA,CAAAA,KAAAA,GAAAA,CAAAA;;AAAAA,iBAAAA,CAAAA;AAAAA,qBAAAA,CAAAA,GAAAA,CAAAA,CAAAA,IAAAA,EAAAA,EAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA;;AAAAA,iBAAAA,CAAAA;AAAAA,qBAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA;;AAAAA,iBAAAA,CAAAA;AAAAA,qBAAAA,CAAAA,GAAAA,CAAAA,CAAAA,IAAAA,EAAAA,EAAAA,CAAAA,GAAAA;AAAAA,gBAAAA,KAAAA,EAAAA;AAAAA,eAAAA,EAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA;;AAAAA,iBAAAA,CAAAA;AAAAA,kBAAAA;AAAAA,gBAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,IAAAA,KAAAA,CAAAA,GAAAA,CAAAA,CAAAA,MAAAA,KAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA;AAAAA,eAAAA,SAAAA;AAAAA,oBAAAA,CAAAA,EAAAA,MAAAA,CAAAA,CAAAA,KAAAA;AAAAA;;AAAAA,qBAAAA,CAAAA,CAAAA,CAAAA;;AAAAA,iBAAAA,CAAAA;AAKb,oBAAM,IAAIp8B,KAAJ,CAAU,6BAAV,CAAN;AAnB4BsgF;AAmBZ,SAnBYA,CAAAA;AAmBZ,OAnBYA,CAAAA;AAmBZ,KAnBlB7nF;AAmBkB,G3KnBlB,E2KmBkB,UAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA;AAAA;;AAAA,QAAA,CAAA,GAAA,QAAA,KAAA,SAAA,IAAA,UAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA;AAAA,aAAA,KAAA,CAAA,KAAA,CAAA,GAAA,OAAA,CAAA,EAAA,UAAA,CAAA,EAAA,CAAA,EAAA;AAAA,iBAAA,CAAA,CAAA,CAAA,EAAA;AAAA,cAAA;AAAA,YAAA,CAAA,CAAA,CAAA,CAAA,IAAA,CAAA,CAAA,CAAA,CAAA;AAAA,WAAA,CAAA,OAAA,CAAA,EAAA;AAAA,YAAA,CAAA,CAAA,CAAA,CAAA;AAAA;AAAA;;AAAA,iBAAA,CAAA,CAAA,CAAA,EAAA;AAAA,cAAA;AAAA,YAAA,CAAA,CAAA,CAAA,CAAA,KAAA,CAAA,CAAA,CAAA,CAAA;AAAA,WAAA,CAAA,OAAA,CAAA,EAAA;AAAA,YAAA,CAAA,CAAA,CAAA,CAAA;AAAA;AAAA;;AAAA,iBAAA,CAAA,CAAA,CAAA,EAAA;AAAA,UAAA,CAAA,CAAA,IAAA,GAAA,CAAA,CAAA,CAAA,CAAA,KAAA,CAAA,GAAA,IAAA,CAAA,CAAA,UAAA,CAAA,EAAA;AAAA,YAAA,CAAA,CAAA,CAAA,CAAA,KAAA,CAAA;AAAA,WAAA,EAAA,IAAA,CAAA,CAAA,EAAA,CAAA,CAAA;AAAA;;AAAA,QAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,KAAA,CAAA,CAAA,EAAA,CAAA,IAAA,EAAA,CAAA,EAAA,IAAA,EAAA,CAAA;AAAA,OAAA,CAAA;AAAA,KAAA;AAAA,QAAA,CAAA,GAAA,QAAA,KAAA,WAAA,IAAA,UAAA,CAAA,EAAA,CAAA,EAAA;AAAA,UAAA,CAAA;AAAA,UAAA,CAAA;AAAA,UAAA,CAAA;AAAA,UAAA,CAAA;AAAA,UAAA,CAAA,GAAA;AAAA,QAAA,KAAA,EAAA,CAAA;AAAA,QAAA,IAAA,EAAA,YAAA;AAAA,cAAA,IAAA,CAAA,CAAA,CAAA,CAAA,EAAA,MAAA,CAAA,CAAA,CAAA,CAAA;AAAA,iBAAA,CAAA,CAAA,CAAA,CAAA;AAAA,SAAA;AAAA,QAAA,IAAA,EAAA,EAAA;AAAA,QAAA,GAAA,EAAA;AAAA,OAAA;AAAA,aAAA,CAAA,GAAA;AAAA,QAAA,IAAA,EAAA,CAAA,CAAA,CAAA,CAAA;AAAA,QAAA,KAAA,EAAA,CAAA,CAAA,CAAA,CAAA;AAAA,QAAA,MAAA,EAAA,CAAA,CAAA,CAAA;AAAA,OAAA,EAAA,cAAA,OAAA,MAAA,KAAA,CAAA,CAAA,MAAA,CAAA,QAAA,CAAA,GAAA,YAAA;AAAA,eAAA,IAAA;AAAA,OAAA,CAAA,EAAA,CAAA;;AAAA,eAAA,CAAA,CAAA,CAAA,EAAA;AAAA,eAAA,UAAA,CAAA,EAAA;AAAA,iBAAA,UAAA,CAAA,EAAA;AAAA,gBAAA,CAAA,EAAA,MAAA,IAAA,SAAA,CAAA,iCAAA,CAAA;;AAAA,mBAAA,CAAA,GAAA,IAAA;AAAA,kBAAA,CAAA,GAAA,CAAA,EAAA,CAAA,KAAA,CAAA,GAAA,IAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,MAAA,GAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,KAAA,KAAA,CAAA,CAAA,GAAA,CAAA,CAAA,MAAA,KAAA,CAAA,CAAA,IAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,GAAA,CAAA,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,IAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,IAAA,EAAA,OAAA,CAAA;;AAAA,sBAAA,CAAA,GAAA,CAAA,EAAA,CAAA,KAAA,CAAA,GAAA,CAAA,IAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,KAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA;AAAA,qBAAA,CAAA;AAAA,qBAAA,CAAA;AAAA,kBAAA,CAAA,GAAA,CAAA;AAAA;;AAAA,qBAAA,CAAA;AAAA,yBAAA,CAAA,CAAA,KAAA,IAAA;AAAA,oBAAA,KAAA,EAAA,CAAA,CAAA,CAAA,CAAA;AAAA,oBAAA,IAAA,EAAA,CAAA;AAAA,mBAAA;;AAAA,qBAAA,CAAA;AAAA,kBAAA,CAAA,CAAA,KAAA,IAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,GAAA,CAAA,CAAA,CAAA;AAAA;;AAAA,qBAAA,CAAA;AAAA,kBAAA,CAAA,GAAA,CAAA,CAAA,GAAA,CAAA,GAAA,EAAA,EAAA,CAAA,CAAA,IAAA,CAAA,GAAA,EAAA;AAAA;;AAAA;AAAA,sBAAA,EAAA,CAAA,GAAA,CAAA,CAAA,GAAA,CAAA,CAAA,IAAA,EAAA,MAAA,GAAA,CAAA,IAAA,CAAA,CAAA,CAAA,CAAA,MAAA,GAAA,CAAA,CAAA,MAAA,MAAA,CAAA,CAAA,CAAA,CAAA,IAAA,MAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA;AAAA,oBAAA,CAAA,GAAA,CAAA;AAAA;AAAA;;AAAA,sBAAA,MAAA,CAAA,CAAA,CAAA,CAAA,KAAA,CAAA,CAAA,IAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA,IAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA;AAAA,oBAAA,CAAA,CAAA,KAAA,GAAA,CAAA,CAAA,CAAA,CAAA;AAAA;AAAA;;AAAA,sBAAA,MAAA,CAAA,CAAA,CAAA,CAAA,IAAA,CAAA,CAAA,KAAA,GAAA,CAAA,CAAA,CAAA,CAAA,EAAA;AAAA,oBAAA,CAAA,CAAA,KAAA,GAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,GAAA,CAAA;AAAA;AAAA;;AAAA,sBAAA,CAAA,IAAA,CAAA,CAAA,KAAA,GAAA,CAAA,CAAA,CAAA,CAAA,EAAA;AAAA,oBAAA,CAAA,CAAA,KAAA,GAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,GAAA,CAAA,IAAA,CAAA,CAAA,CAAA;AAAA;AAAA;;AAAA,kBAAA,CAAA,CAAA,CAAA,CAAA,IAAA,CAAA,CAAA,GAAA,CAAA,GAAA,EAAA,EAAA,CAAA,CAAA,IAAA,CAAA,GAAA,EAAA;AAAA;AAAA;;AAAA,cAAA,CAAA,GAAA,CAAA,CAAA,IAAA,CAAA,CAAA,EAAA,CAAA,CAAA;AAAA,aAAA,CAAA,OAAA,CAAA,EAAA;AAAA,cAAA,CAAA,GAAA,CAAA,CAAA,EAAA,CAAA,CAAA,EAAA,CAAA,GAAA,CAAA;AAAA,aAAA,SAAA;AAAA,cAAA,CAAA,GAAA,CAAA,GAAA,CAAA;AAAA;;AAAA,gBAAA,IAAA,CAAA,CAAA,CAAA,CAAA,EAAA,MAAA,CAAA,CAAA,CAAA,CAAA;AAAA,mBAAA;AAAA,cAAA,KAAA,EAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA,GAAA,KAAA,CAAA;AAAA,cAAA,IAAA,EAAA,CAAA;AAAA,aAAA;AAAA,WAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA;AAAA,SAAA;AAAA;AAAA,KAAA;AAAA,QAAA,CAAA,GAAA,QAAA,KAAA,QAAA,IAAA,UAAA,CAAA,EAAA;AAAA,UAAA,CAAA,GAAA,cAAA,OAAA,MAAA,IAAA,CAAA,CAAA,MAAA,CAAA,QAAA,CAAA;AAAA,UAAA,CAAA,GAAA,CAAA;AAAA,aAAA,CAAA,GAAA,CAAA,CAAA,IAAA,CAAA,CAAA,CAAA,GAAA;AAAA,QAAA,IAAA,EAAA,YAAA;AAAA,iBAAA,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA,MAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA;AAAA,YAAA,KAAA,EAAA,CAAA,IAAA,CAAA,CAAA,CAAA,EAAA,CAAA;AAAA,YAAA,IAAA,EAAA,CAAA;AAAA,WAAA;AAAA;AAAA,OAAA;AAAA,KAAA;AAAA,QAAA,CAAA,GAAA,QAAA,KAAA,MAAA,IAAA,UAAA,CAAA,EAAA,CAAA,EAAA;AAAA,UAAA,CAAA,GAAA,cAAA,OAAA,MAAA,IAAA,CAAA,CAAA,MAAA,CAAA,QAAA,CAAA;AAAA,UAAA,CAAA,CAAA,EAAA,OAAA,CAAA;AAAA,UAAA,CAAA;AAAA,UAAA,CAAA;AAAA,UAAA,CAAA,GAAA,CAAA,CAAA,IAAA,CAAA,CAAA,CAAA;AAAA,UAAA,CAAA,GAAA,EAAA;;AAAA,UAAA;AAAA,eAAA,CAAA,KAAA,CAAA,KAAA,CAAA,IAAA,CAAA,KAAA,CAAA,KAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,IAAA,EAAA,EAAA,IAAA,GAAA,CAAA,CAAA,IAAA,CAAA,CAAA,CAAA,KAAA;AAAA,OAAA,CAAA,OAAA,CAAA,EAAA;AAAA,QAAA,CAAA,GAAA;AAAA,UAAA,KAAA,EAAA;AAAA,SAAA;AAAA,OAAA,SAAA;AAAA,YAAA;AAAA,UAAA,CAAA,IAAA,CAAA,CAAA,CAAA,IAAA,KAAA,CAAA,GAAA,CAAA,CAAA,MAAA,KAAA,CAAA,CAAA,IAAA,CAAA,CAAA,CAAA;AAAA,SAAA,SAAA;AAAA,cAAA,CAAA,EAAA,MAAA,CAAA,CAAA,KAAA;AAAA;AAAA;;AAAA,aAAA,CAAA;AAAA,KAAA;AAAA,QAAA,CAAA,GAAA,QAAA,KAAA,QAAA,IAAA,YAAA;AAAA,WAAA,IAAA,CAAA,GAAA,EAAA,EAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,MAAA,EAAA,CAAA,EAAA,EAAA,CAAA,GAAA,CAAA,CAAA,MAAA,CAAA,CAAA,CAAA,SAAA,CAAA,CAAA,CAAA,CAAA,CAAA;;AAAA,aAAA,CAAA;AAAA,KAAA;;AAAA,IAAA,MAAA,CAAA,cAAA,CAAA,CAAA,EAAA,YAAA,EAAA;AAAA,MAAA,KAAA,EAAA,CAAA;AAAA,KAAA;;AChGlB,QAAAkb,CAAAA,GAAA1a,CAAAA,CAAA,CAAAA,CAAA;AAAA,QAIAynF,CAAAA,GAAA,YAAA;AAEA,aADE,UAAmBxiF,CAAnB,EAAwCgZ,CAAxC,EAAwCA;AAArB3M,aAAArM,EAAAqM,GAAArM,CAAAqM,EAAqBA,KAAA2M,IAAA3M,GAAA2M,CAArB3M;AAAqB2M,OAC1C;AAFA,KAAA,EAJA;AAAA,QAQAugE,CAAAA,GAAA,YAAA;AACE,eAAAA,CAAA,CAAoB72D,CAApB,EAAkC65C,CAAlC,EAA2D5yB,CAA3D,EAA2DA;AAAvCt9B,aAAAqW,KAAArW,GAAAqW,CAAArW,EAAuCA,KAAAs9B,QAAAt9B,GAAAs9B,CAAvCt9B,EAClBA,KAAK4rB,UAAL5rB,CAAgBkwD,CAAhBlwD,CADkBA;AAoJtB;;AAAA,aAhJEktE,CAAAA,CAAA38E,SAAA28E,CAAAthD,UAAAshD,GAAA,UAAWhd,CAAX,EAAWA;AAAX,YAAAxnD,CAAAA,GAAA1I,IAAA;AACEA,aAAKs9B,QAALt9B,CAAcgI,KAAdhI,CAAoB,SAApBA,EAA+B,0BAA/BA,EAA2D,YAAA;AACzD,cAAMoN,CAAAA,GAAa1E,CAAAA,CAAK2N,KAAL3N,CAAWkmE,QAAXlmE,EAAnB;AACA,cAAI0E,CAAAA,CAAWhc,MAAXgc,KAAsB8iD,CAAAA,CAAI9+D,MAA9B,EACE,MAAM,IAAIqE,KAAJ,CAAU,yCAAV,CAAN;AAGFiT,UAAAA,CAAAA,CAAKykE,IAALzkE,GAAYwnD,CAAAA,CAAIz4D,GAAJy4D,CAAQ,UAACv8D,CAAD,EAAKpF,CAAL,EAAKA;AAAM,mBAAA,IAAI4nF,CAAJ,CAAaxiF,CAAb,EAAiByZ,CAAAA,CAAW7e,CAAX6e,CAAjB,CAAA;AAA4B7e,WAA/C2hE,CAAZxnD,EACAA,CAAAA,CAAKhC,KAALgC,EADAA,EAIAA,CAAAA,CAAK0tE,QAAL1tE,GAAgB,EAJhBA,EAKAA,CAAAA,CAAKykE,IAALzkE,CAAUpL,OAAVoL,CAAkB,UAAC/U,CAAD,EAAKpF,CAAL,EAAKA;AAAAA,gBAAAA,CAAAA;AAAAA,gBAAAA,CAAAA;AAAAA,gBACjB8nF,CAAAA,GAAAA,CAAW,CADM9nF;;AACN,gBAAA;AACf,mBAAoB,IAAAqS,CAAAA,GAAAhG,CAAAA,CAAAjH,CAAAA,CAAGgZ,IAAHhZ,CAAQ3C,MAAR4J,CAAA,EAAc07E,CAAAA,GAAA11E,CAAAA,CAAA9F,IAAA8F,EAAlC,EAAkC9F,CAAAw7E,CAAAA,CAAAv7E,IAAlC,EAAkCu7E,CAAAA,GAAA11E,CAAAA,CAAA9F,IAAA8F,EAAlC,EAAoC;AAA/B,oBAAM7C,CAAAA,GAAKu4E,CAAAA,CAAA1mF,KAAX;;AACH,oBAAA,CACK8Y,CAAAA,CAAK6tE,OAAL7tE,CAAa3K,CAAb2K,CADL,IACkB3K,CACsC,CADtCA,KACX2K,CAAAA,CAAK2N,KAAL3N,CAAWqlE,eAAXrlE,GAA6B7M,OAA7B6M,CAAqC3K,CAArC2K,CAFP,EAGE;AACA2tE,kBAAAA,CAAAA,GAAAA,CAAW,CAAXA;AACA;AAAA;AAAA;AAAA,aAPW,CAOX,OAAA,CAAA,EAAA;AAAA,cAAA,CAAA,GAAA;AAAA,gBAAA,KAAA,EAAA;AAAA,eAAA;AAAA,aAPW,SAOX;AAAA,kBAAA;AAAA,gBAAA,CAAA,IAAA,CAAA,CAAA,CAAA,IAAA,KAAA,CAAA,GAAA,CAAA,CAAA,MAAA,KAAA,CAAA,CAAA,IAAA,CAAA,CAAA,CAAA;AAAA,eAAA,SAAA;AAAA,oBAAA,CAAA,EAAA,MAAA,CAAA,CAAA,KAAA;AAAA;AAGAA;;AAAAA,YAAAA,CAAAA,IACF3tE,CAAAA,CAAK0tE,QAAL1tE,CAAc5M,IAAd4M,CAAmBna,CAAnBma,CADE2tE;AACiB9nF,WAZvBma,CALAA;AAiBuBna,SAvBzByR;AAuByBzR,OAxB3B2+E,EA8BAA,CAAAA,CAAA38E,SAAA28E,CAAAxmE,KAAAwmE,GAAA,YAAA;AACEltE,aAAKu2E,OAALv2E,GAAeA,KAAKqW,KAALrW,CAAWihD,SAAXjhD,GAAuBvI,GAAvBuI,CAA2B,UAAAzR,CAAA,EAAAA;AAAK,iBAAAA,CAAAA,CAAEuqB,MAAF;AAAEA,SAAlC9Y,CAAfA;AAAiD8Y,OA/BnDo0D,EAkCAA,CAAAA,CAAA38E,SAAA28E,CAAAI,OAAAJ,GAAA,UAAQZ,CAAR,EAAwCkK,CAAxC,EAAwCA;AAAxC,YAAA9tE,CAAAA,GAAA1I,IAAA;AACE,eAAOA,KAAKs9B,QAALt9B,CAAcgI,KAAdhI,CAAoB,SAApBA,EAA+B,uBAA/BA,EAAwD,YAAA;AAAA,iBAAAosE,CAAAA,CAAA1jE,CAAA0jE,EAAA1jE,KAAA,CAAA0jE,EAAA,KAAA,CAAAA,EAAA,YAAA;AAAA,gBAAA,CAAA;AAAA,gBAAA,CAAA;AAAA,gBAAA,CAAA;AAAA,gBAAA,CAAA;AAAA,gBAAA,CAAA;AAAA,gBAAA,CAAA;AAAA,gBAAA,CAAA;AAAA,gBAAA,CAAA;AAAA,gBAAA,CAAA;AAAA,gBAAA,CAAA,GAAA,IAAA;AAAA,mBAAA,CAAA,CAAA,IAAA,EAAA,UAAA,CAAA,EAAA;AAAA,sBAAA,CAAA,CAAA,KAAA;AAAA,qBAAA,CAAA;AAS7D,sBAPApsE,KAAK0G,KAAL1G,IAGM+X,CAAAA,GAAmBu0D,CAAAA,CAAelvC,sBAAfkvC,EAHzBtsE,EAMMy2E,CAAAA,GAAcz2E,KAAKqW,KAALrW,CAAW+tE,eAAX/tE,EANpBA,EAOIw2E,CAAAA,CAAYplF,MAAZolF,KAAuBC,CAAAA,CAAYrlF,MAAvC,EACE,MAAM,IAAIqE,KAAJ,CAAU,oFACZ+gF,CAAAA,CAAYplF,MADA,GACM,aADN,GACoBqlF,CAAAA,CAAYrlF,MAD1C,CAAN;AAIFolF,kBAAAA,CAAAA,CAAYl5E,OAAZk5E,CAAoB,UAACz4E,CAAD,EAAQxP,CAAR,EAAQA;AAC1B,wBAAM6E,CAAAA,GAAQqjF,CAAAA,CAAYloF,CAAZkoF,CAAd;AACA/tE,oBAAAA,CAAAA,CAAK6tE,OAAL7tE,CAAatV,CAAbsV,IAAsB3K,CAAtB2K;AAAsB3K,mBAFxBy4E,GAMME,CAAAA,GAAqB12E,KAAKo2E,QAALp2E,CAAcjH,KAAdiH,CAAoB,CAApBA,CAN3Bw2E,EASMG,CAAAA,GAAc32E,KAAKqW,KAALrW,CAAWihD,SAAXjhD,EATpBw2E,EAUMppE,CAAAA,GAAapN,KAAKqW,KAALrW,CAAW4uE,QAAX5uE,EAVnBw2E,EAYII,CAAAA,GAAO,CAZXJ,EAYW,CAAA,GAAA,YAAA;AAAA,wBAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA;AAAA,2BAAA,CAAA,CAAA,IAAA,EAAA,UAAA,CAAA,EAAA;AAAA,8BAAA,CAAA,CAAA,KAAA;AAAA,6BAAA,CAAA;AAOT,8BALMK,CAAAA,GAAcH,CAAAA,CAASE,CAAAA,EAATF,CAAdG,EACAC,CAAAA,GAASC,CAAAA,CAAK5J,IAAL4J,CAAUF,CAAVE,CADTF,EACmBA,CAIa,CAJbA,KAIa,CADhCG,CAAAA,GAAYF,CAAAA,CAAOnqE,IAAPmqE,CAAY9lF,MAAZ8lF,CAAmBr/E,GAAnBq/E,CAAuB,UAAAvoF,CAAA,EAAAA;AAAK,mCAAAma,CAAAA,CAAK6tE,OAAL7tE,CAAana,CAAbma,CAAA;AAAana,2BAAzCuoF,CACoB,EAAxBj7E,OAAwB,CAAxBA,KAAQ3J,CAAgB,CAAtC,EACE,MAAM,IAAIuD,KAAJ,CAAU,oCAAkCqhF,CAAAA,CAAOnqE,IAAnD,CAAN;AAUiB,iCANbygE,CAAAA,GAAe4J,CAAf5J,EACNhkE,CAAAA,CAAAxC,MAAAwC,CAAO9D,OAAP8D,CACI,UADJA,EAEI,eAAa0tE,CAAAA,CAAOnqE,IAAPmqE,CAAY5nF,IAAzB,GAA6B,IAA7B,GACIk+E,CAAAA,CAAa31E,GAAb21E,CAAiB,UAACv9E,CAAD,EAAItB,CAAJ,EAAIA;AAAM,mCAAA,MAAIuoF,CAAAA,CAAOnqE,IAAPmqE,CAAY9lF,MAAZ8lF,CAAmBvoF,CAAnBuoF,CAAJ,GAAyB,KAAzB,GAA+BjnF,CAAAA,CAAEqE,IAAjC,GAAqC,GAArC,GAAyCrE,CAAAA,CAAEwB,IAAFxB,CAAOqqB,IAAPrqB,CAAY,GAAZA,CAAzC,GAAyD,GAAzD;AAAyD,2BAApFu9E,EAAyFlzD,IAAzFkzD,CAA8F,IAA9FA,CADJ,GACuG,GAH3GhkE,CADMgkE,EAMa,CAAA,CAAA,EAAM2J,CAAAA,CAAKz5C,QAALy5C,CAAc/uE,KAAd+uE,CAAoB,MAApBA,EAA4BD,CAAAA,CAAOnqE,IAAPmqE,CAAY5nF,IAAxC6nF,EAA8C,YAAA;AAAA,mCAAA3K,CAAAA,CAAA1jE,CAAA0jE,EAAA1jE,KAAA,CAAA0jE,EAAA,KAAA,CAAAA,EAAA,YAAA;AAAA,kCAAA,CAAA;AAAA,qCAAA,CAAA,CAAA,IAAA,EAAA,UAAA,CAAA,EAAA;AAErE,oCAAA,CAAA,CADMz4E,CAAAA,GAAKmjF,CAAAA,CAAOnjF,EAClB,EAAQw4B,WAAR,CAAoBihD,CAApB,CAAA,EACE,MAAM,IAAI33E,KAAJ,CAAU,kCAAgCqhF,CAAAA,CAAOnqE,IAAPmqE,CAAY5nF,IAAtD,CAAN;AAKF,uCAAA,CAAA,CAAA,EAFeyE,CAAAA,CAAGmkB,GAAHnkB,CAAOokB,CAAPpkB,EAAyBy5E,CAAzBz5E,CAEf,CAAA;AAFwCy5E,+BAN6B,CAAA;AAM7BA,6BAN6BhB,CAAA;AAM7BgB,2BANjB2J,CAAN,CAAA;;AAMuB3J,6BAAAA,CAAAA;AAM1C,8BAAA,CAZM6J,CAAAA,GAAajkF,CAAAA,CAAA6N,IAAA7N,EAYnB,EAAe5B,MAAf,KAA0B0lF,CAAAA,CAAOnqE,IAAPmqE,CAAYjvB,OAAZivB,CAAoB1lF,MAA9C,EACE,MAAM,IAAIqE,KAAJ,CAAU,qDAAV,CAAN;AAAgB,iCAIlBwhF,CAAAA,CAAW35E,OAAX25E,CAAmB,UAAC7yE,CAAD,EAAS7V,CAAT,EAASA;AAC1B,gCAAMqG,CAAAA,GAAIkiF,CAAAA,CAAOnqE,IAAPmqE,CAAYjvB,OAAZivB,CAAoBvoF,CAApBuoF,CAAV;AACA,gCAAIpuE,CAAAA,CAAK6tE,OAAL7tE,CAAa9T,CAAb8T,CAAJ,EACE,MAAM,IAAIjT,KAAJ,CAAU,aAAWb,CAAX,GAAY,0BAAZ,GAAuCkiF,CAAAA,CAAOnqE,IAAPmqE,CAAY5nF,IAA7D,CAAN;AAEFwZ,4BAAAA,CAAAA,CAAK6tE,OAAL7tE,CAAa9T,CAAb8T,IAAkBtE,CAAlBsE;AAAkBtE,2BALpB6yE,GASMC,CAAAA,GAAkB,IAAIlqE,GAAJ,EATxBiqE,EAUAA,CAAAA,CAAW35E,OAAX25E,CAAmB,UAAC7yE,CAAD,EAAS7V,CAAT,EAASA;AAAAA,gCAAAA,CAAAA;AAAAA,gCAAAA,CAAAA;AAAAA,gCAAAA,CAAAA;AAAAA,gCAAAA,CAAAA;AAAAA,gCACpBqG,CAAAA,GAAIkiF,CAAAA,CAAOnqE,IAAPmqE,CAAYjvB,OAAZivB,CAAoBvoF,CAApBuoF,CADgBvoF;;AACIA,gCAAAA;AAC9B,mCAAyC,IAAA+nF,CAAAA,IAAAv8D,CAAAA,GAAAA,KAAA,CAAAA,EAAAnf,CAAAA,CAAA+7E,CAAAA,CAAY/hF,CAAZ+hF,CAAAA,CAAer6B,EAAf1hD,CAAA07E,CAAA,EAAiBa,CAAAA,GAAAb,CAAAA,CAAAx7E,IAAAw7E,EAA1D,EAA0Dx7E,CAAAq8E,CAAAA,CAAAp8E,IAA1D,EAA0Do8E,CAAAA,GAAAb,CAAAA,CAAAx7E,IAAAw7E,EAA1D,EAA4D;AAAvD,oCAAMc,CAAAA,GAA0BD,CAAAA,CAAAvnF,KAAhC;AAAA,oCACGynF,CAAAA,GAAwBjqE,CAAAA,CAAWgqE,CAAXhqE,CAD3B;AAAA,oCAECipE,CAAAA,GAAAA,CAAW,CAFZ;;AAEY,oCAAA;AACf,uCAAgB,IAAAiB,CAAAA,IAAAC,CAAAA,GAAAA,KAAA,CAAAA,EAAA38E,CAAAA,CAAAy8E,CAAAA,CAAsBrmF,MAAtB4J,CAAA08E,CAAA,EAA4BE,CAAAA,GAAAF,CAAAA,CAAAx8E,IAAAw8E,EAA5C,EAA4Cx8E,CAAA08E,CAAAA,CAAAz8E,IAA5C,EAA4Cy8E,CAAAA,GAAAF,CAAAA,CAAAx8E,IAAAw8E,EAA5C,EAA8C;AAAzC,wCAAM99E,CAAAA,GAACg+E,CAAAA,CAAA5nF,KAAP;;AACH,wCAAA,CAAK8Y,CAAAA,CAAK6tE,OAAL7tE,CAAalP,CAAbkP,CAAL,EAAsB;AACpB2tE,sCAAAA,CAAAA,GAAAA,CAAW,CAAXA;AACA;AAAA;AAAA;AAAA,iCAJW,CAIX,OAAA,CAAA,EAAA;AAAA,kCAAA,CAAA,GAAA;AAAA,oCAAA,KAAA,EAAA;AAAA,mCAAA;AAAA,iCAJW,SAIX;AAAA,sCAAA;AAAA,oCAAA,CAAA,IAAA,CAAA,CAAA,CAAA,IAAA,KAAA,CAAA,GAAA,CAAA,CAAA,MAAA,KAAA,CAAA,CAAA,IAAA,CAAA,CAAA,CAAA;AAAA,mCAAA,SAAA;AAAA,wCAAA,CAAA,EAAA,MAAA,CAAA,CAAA,KAAA;AAAA;AAGAA;;AAAAA,gCAAAA,CAAAA,IACFa,CAAAA,CAAgB3pE,GAAhB2pE,CAAoBE,CAApBF,CADEb;AACkBe;AAAAA,6BAXM7oF,CAWN6oF,OAAAA,CAAAA,EAAAA;AAAAA,8BAAAA,CAAAA,GAAAA;AAAAA,gCAAAA,KAAAA,EAAAA;AAAAA,+BAAAA;AAAAA,6BAXM7oF,SAWN6oF;AAAAA,kCAAAA;AAAAA,gCAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,IAAAA,KAAAA,CAAAA,GAAAA,CAAAA,CAAAA,MAAAA,KAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA;AAAAA,+BAAAA,SAAAA;AAAAA,oCAAAA,CAAAA,EAAAA,MAAAA,CAAAA,CAAAA,KAAAA;AAAAA;AAAAA;AAAAA,2BAZ1BH,CAVAA,EA0BAP,CAAAA,CAAS56E,IAAT46E,CAAat4D,KAAbs4D,CAAAA,CAAAA,EAAQl7C,CAAAA,CAAS07C,CAAT17C,CAARk7C,CA1BAO,EA0BiBC,CAAAA,CAAAA,CA9BC;AA/BT;AA6DQA,qBA7DR,CAAA;AA6DQA,mBAzEnBV,EAyEmBU,CAAAA,GAAAA,IAzEnBV,EAyEmBU,CAAAA,CAAAA,KAAAA,GAAAA,CAzEnBV;;AAyEmBU,qBAAAA,CAAAA;AAAAA,yBA5DZN,CAAAA,GAAOF,CAAAA,CAAStlF,MAAhBwlF,GAAgBxlF,CAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAhBwlF,GAAsB,CAAA,CAAA,EAAA,CAAA,CA4DVM;;AA5DU,qBAAA,CAAA;AAAA,yBAAA,CAAA,CAAA,IAAA,IAAA,CAAA,CAAA,EAAA,CAAA,CAAA;;AAAA,qBAAA,CAAA;AA2E7B,yBAZM9yE,CAAAA,GAAmB,EAAnBA,EACNpE,KAAKqW,KAALrW,CAAWy3E,gBAAXz3E,GAA8B1C,OAA9B0C,CAAsC,UAAC03E,CAAD,EAAcnpF,CAAd,EAAcA;AAClD,wBAAMopF,CAAAA,GAAYjvE,CAAAA,CAAK6tE,OAAL7tE,CAAagvE,CAAbhvE,CAAlB;AACA,wBAAA,KAAkBxW,CAAlB,KAAIylF,CAAJ,EACE,MAAM,IAAIliF,KAAJ,CAAU,sBAAoBiiF,CAApB,GAA+B,uBAAzC,CAAN;AAGFC,oBAAAA,CAAAA,CAAU95E,IAAV85E,EACAvzE,CAAAA,CAAOtI,IAAPsI,CAAYuzE,CAAZvzE,CADAuzE;AACYA,mBAPd33E,CADMoE,EAUNgF,CAAAA,CAAAxC,MAAAwC,CAAO9D,OAAP8D,CAAe,UAAfA,EAA2B,+BAA3BA,CAVMhF,EAWN2T,CAAAA,CAAiBilB,OAAjBjlB,EAXM3T,EAYN,CAAA,CAAA,EAAOA,CAAP,CAAA;AAtG6D;AAsGtDA,aAtGsD,CAAA;AAsGtDA,WAtGsDgoE,CAAA;AAsGtDhoE,SAtGFpE,CAAP;AAsGSoE,OAzIX8oE,EAgJFA,CAAA;AArJA,KAAA,EARA;;AAQah/E,IAAAA,CAAAA,CAAAg/E,aAAAh/E,GAAAg/E,CAAAh/E;AAAAg/E,G5KqEb,E4KrEaA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;;ACVb,QAAAr8E,CAAAA,GAAAnC,CAAAA,CAAA,CAAAA,CAAA;AAAA,QAEAkpF,CAAAA,GAAAlpF,CAAAA,CAAA,GAAAA,CAFA;AAAA,QAIAkR,CAAAA,GAAAlR,CAAAA,CAAA,CAAAA,CAJA;AAAA,QAMA89E,CAAAA,GAAA,YAAA;AAEE,eAAAA,CAAA,GAAAA,CAyBF;;AAAA,aAvBEA,CAAAA,CAAAj8E,SAAAi8E,CAAAO,IAAAP,GAAA,UAAKlsE,CAAL,EAAkBusE,CAAlB,EAAkBA;AAChB,YAAMgL,CAAAA,GAAahnF,CAAAA,CAAA4F,IAAA5F,CAAKilB,UAALjlB,CAAgBwjB,MAAhBxjB,CAAuByP,CAAvBzP,CAAnB;AAEA,YADkB+O,CAAAA,CAAAzH,QAAAyH,CAASxH,YAATwH,CAAsBi4E,CAAAA,CAAW5hE,SAAjCrW,IACF,CAAhB,EACE,MAAM,IAAInK,KAAJ,CAAU,4CAAV,CAAN;AAGFuK,aAAK83E,OAAL93E,GAAe63E,CAAAA,CAAW9hE,WAAX8hE,CAAuBpgF,GAAvBogF,CAA2B,UAAAtpF,CAAA,EAAAA;AACxC,iBAAO;AAACsnB,YAAAA,MAAAA,EAAQtnB,CAAAA,CAAEsnB,MAAX;AAA6B9R,YAAAA,OAAAA,EAASnE,CAAAA,CAAAzH,QAAAyH,CAASxH,YAATwH,CAAsBrR,CAAAA,CAAEwV,OAAxBnE;AAAtC,WAAP;AAAqEmE,SADxD8zE,CAAf73E,EAIAA,KAAK+3E,MAAL/3E,GAAc43E,CAAAA,CAAAI,KAAAJ,CAAMv2E,IAANu2E,CAAWC,CAAAA,CAAWxhE,KAAtBuhE,EAA8B/K,CAA9B+K,CAJd53E;AAI4C6sE,OAX9CL,EAeAn9E,MAAAA,CAAAC,cAAAD,CAAIm9E,CAAAA,CAAAj8E,SAAJlB,EAAI,OAAJA,EAAS;AAAA,QAAA,GAAA,EAAT,YAAA;AACE,iBAAO2Q,KAAK+3E,MAAZ;AAAYA,SADL;AACKA,QAAAA,UAAAA,EAAAA,CAAAA,CADL;AACKA,QAAAA,YAAAA,EAAAA,CAAAA;AADL,OAAT1oF,CAfAm9E,EAoBAn9E,MAAAA,CAAAC,cAAAD,CAAIm9E,CAAAA,CAAAj8E,SAAJlB,EAAI,QAAJA,EAAU;AAAA,QAAA,GAAA,EAAV,YAAA;AACE,iBAAO2Q,KAAK83E,OAAZ;AAAYA,SADJ;AACIA,QAAAA,UAAAA,EAAAA,CAAAA,CADJ;AACIA,QAAAA,YAAAA,EAAAA,CAAAA;AADJ,OAAVzoF,CApBAm9E,EAuBFA,CAAA;AA3BA,KAAA,EANA;;AAMat+E,IAAAA,CAAAA,CAAAs+E,KAAAt+E,GAAAs+E,CAAAt+E;AAAAs+E,G7KyEb,E6KzEaA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA;AAAAA;;AAAAA,QAAAA,CAAAA,GAAAA,QAAAA,KAAAA,QAAAA,IAAAA,UAAAA,CAAAA,EAAAA;AAAAA,UAAAA,CAAAA,GAAAA,cAAAA,OAAAA,MAAAA,IAAAA,CAAAA,CAAAA,MAAAA,CAAAA,QAAAA,CAAAA;AAAAA,UAAAA,CAAAA,GAAAA,CAAAA;AAAAA,aAAAA,CAAAA,GAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,GAAAA;AAAAA,QAAAA,IAAAA,EAAAA,YAAAA;AAAAA,iBAAAA,CAAAA,IAAAA,CAAAA,IAAAA,CAAAA,CAAAA,MAAAA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA;AAAAA,YAAAA,KAAAA,EAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA;AAAAA,YAAAA,IAAAA,EAAAA,CAAAA;AAAAA,WAAAA;AAAAA;AAAAA,OAAAA;AAAAA,KAAAA;;AAAAA,IAAAA,MAAAA,CAAAA,cAAAA,CAAAA,CAAAA,EAAAA,YAAAA,EAAAA;AAAAA,MAAAA,KAAAA,EAAAA,CAAAA;AAAAA,KAAAA;ACJb,QAAAyL,CAAAA,GAAAvpF,CAAAA,CAAA,GAAAA,CAAA;AAAA,QACAoC,CAAAA,GAAApC,CAAAA,CAAA,CAAAA,CADA;AAAA,QAEAkR,CAAAA,GAAAlR,CAAAA,CAAA,CAAAA,CAFA;AAmEaR,IAAAA,CAAAA,CAAA8pF,KAAA9pF,GAAQ;AAInBmT,MAAAA,IAAAA,EAAM,UAAC62E,CAAD,EAA+BvhE,CAA/B,EAA+BA;AAAoC,eAAA,IAAIwhE,CAAJ,CAAcD,CAAd,EAA0BvhE,CAA1B,CAAA;AAA0BA;AAJhF,KAARzoB;;AAOb,QAAAkqF,CAAAA,GAAA,YAAA;AACE,eAAAA,CAAA,CAAYxhE,CAAZ,EAAYA;AACV5W,aAAKq4E,KAALr4E,GAAKq4E,KAAQnmF,CAAb8N,EACAA,KAAKs4E,GAALt4E,GAAW,EADXA,EAEAA,KAAK8Y,MAAL9Y,GAAK8Y,KAAS5mB,CAFd8N,EAGAA,KAAK9L,IAAL8L,GAAK9L,KAAOhC,CAHZ8N,EAKI4W,CAAAA,KACF5W,KAAK9L,IAAL8L,GAAYJ,CAAAA,CAAAtJ,SAAAsJ,CAAU/H,wBAAV+H,CAAmCgX,CAAAA,CAAU1iB,IAAV0iB,CAAgB7e,UAAnD6H,CADVgX,CALJ5W;AAoBJ;;AAAA,aATE3Q,MAAAA,CAAAC,cAAAD,CAAI+oF,CAAAA,CAAA7nF,SAAJlB,EAAI,MAAJA,EAAQ;AAAA,QAAA,GAAA,EAAR,YAAA;AACE,iBAAO2Q,KAAKq4E,KAAZ;AAAYA,SADN;AACMA,QAAAA,UAAAA,EAAAA,CAAAA,CADN;AACMA,QAAAA,YAAAA,EAAAA,CAAAA;AADN,OAARhpF,GAIAA,MAAAA,CAAAC,cAAAD,CAAI+oF,CAAAA,CAAA7nF,SAAJlB,EAAI,IAAJA,EAAM;AAAA,QAAA,GAAA,EAAN,YAAA;AACE,iBAAO2Q,KAAKs4E,GAAZ;AAAYA,SADR;AACQA,QAAAA,UAAAA,EAAAA,CAAAA,CADR;AACQA,QAAAA,YAAAA,EAAAA,CAAAA;AADR,OAANjpF,CAJAA,EASF+oF,CAAA;AAtBA,KAAA,EAAA;AAAA,QAwBAG,CAAAA,GAAA,YAAA;AAgBA,aAfE,UAAYC,CAAZ,EAAYA;AACVx4E,aAAK9Q,IAAL8Q,GAAYw4E,CAAAA,CAAWtpF,IAAvB8Q,EACAA,KAAK4V,MAAL5V,GAAcw4E,CAAAA,CAAW5iE,MADzB5V,EAEAA,KAAKhP,MAALgP,GAAc,EAFdA,EAGAA,KAAK6nD,OAAL7nD,GAAe,EAHfA,EAIAA,KAAK6rB,UAAL7rB,GAAkB,IAAIi4E,CAAAA,CAAAQ,SAAJ,CAAcD,CAAAA,CAAWx0E,SAAzB,CAJlBhE,EAKAA,KAAK04E,WAAL14E,GAAK04E,CAAc,CALnB14E;AAKmB,OASvB;AAhBA,KAAA,EAxBA;AAAA,QA0CAm4E,CAAAA,GAAA,YAAA;AAWE,eAAAA,CAAA,CAAY9hE,CAAZ,EAAqCw2D,CAArC,EAAqCA;AACnC,YAAA,CAAKx2D,CAAL,EACE,MAAM,IAAI3b,SAAJ,CAAc,gBAAd,CAAN;AAIFsF,aAAK24E,UAAL34E,CAAgBqW,CAAhBrW,GAGAA,KAAK8sE,cAAL9sE,CAAoB6sE,CAApB7sE,CAHAA,EAMAA,KAAK44E,cAAL54E,EANAA;AA6ZJ;;AAAA,aApZEm4E,CAAAA,CAAA5nF,SAAA4nF,CAAApK,eAAAoK,GAAA,YAAA;AACE,eAAOn4E,KAAK64E,gBAAZ;AAAYA,OADdV,EAIAA,CAAAA,CAAA5nF,SAAA4nF,CAAAzK,aAAAyK,GAAA,YAAA;AACE,eAAOn4E,KAAK84E,cAAZ;AAAYA,OALdX,EAQAA,CAAAA,CAAA5nF,SAAA4nF,CAAAV,gBAAAU,GAAA,YAAA;AACE,eAAOn4E,KAAK+4E,iBAAZ;AAAYA,OATdZ,EAYAA,CAAAA,CAAA5nF,SAAA4nF,CAAAxJ,cAAAwJ,GAAA,YAAA;AACE,eAAOn4E,KAAKg5E,eAAZ;AAAYA,OAbdb,EAgBAA,CAAAA,CAAA5nF,SAAA4nF,CAAAl3B,SAAAk3B,GAAA,YAAA;AACE,eAAOn4E,KAAKi5E,QAAZ;AAAYA,OAjBdd,EAoBAA,CAAAA,CAAA5nF,SAAA4nF,CAAAvJ,QAAAuJ,GAAA,YAAA;AACE,eAAOn4E,KAAKk5E,MAAZ;AAAYA,OArBdf,EAwBQA,CAAAA,CAAA5nF,SAAA4nF,CAAAQ,UAAAR,GAAR,UAAmB9hE,CAAnB,EAAmBA;AAAAA,YAAAA,CAAAA;AAAAA,YAAAA,CAAAA;AAAAA,YAAAA,CAAAA;AAAAA,YAAAA,CAAAA;AAAAA,YAAAA,CAAAA;AAAAA,YAAAA,CAAAA;AAAAA,YAAAA,CAAAA;AAAAA,YAAAA,CAAAA;AAAAA,YAAAA,CAAAA;AAAAA,YAAAA,CAAAA;AAAAA,YAAAA,CAAAA;AAAAA,YAAAA,CAAAA;AAAAA,YACX8iE,CAAAA,GAAc,IAAIt4B,GAAJ,EADHxqC;AAEjBrW,aAAKi5E,QAALj5E,GAAgB,EAAhBA,EAEAA,KAAK64E,gBAAL74E,GAAwB,EAFxBA,EAGAA,KAAK84E,cAAL94E,GAAsB,EAHtBA,EAKAA,KAAK+4E,iBAAL/4E,GAAyB,EALzBA,EAMAA,KAAKg5E,eAALh5E,GAAuB,EANvBA,EAQAA,KAAKk5E,MAALl5E,GAAc,EARdA;AAUA,YAAMo5E,CAAAA,GAAe,IAAIv4B,GAAJ,EAArB;AAGA,YAAA,CAAKxqC,CAAAA,CAAMtY,KAAX,EACE,MAAM,IAAItI,KAAJ,CAAU,qCAAV,CAAN;AAEF,YAAM4jF,CAAAA,GAAkB,EAAxB;;AAAwB,YAAA;AACxB,eAAgB,IAAAC,CAAAA,GAAA1+E,CAAAA,CAAAyb,CAAAA,CAAMtY,KAANnD,CAAA,EAAW2+E,CAAAA,GAAAD,CAAAA,CAAAx+E,IAAAw+E,EAA3B,EAA2Bx+E,CAAAy+E,CAAAA,CAAAx+E,IAA3B,EAA2Bw+E,CAAAA,GAAAD,CAAAA,CAAAx+E,IAAAw+E,EAA3B,EAA6B;AAAxB,gBAAM/qF,CAAAA,GAACgrF,CAAAA,CAAA3pF,KAAP;AACH,gBAAIupF,CAAAA,CAAY7rE,GAAZ6rE,CAAgB5qF,CAAAA,CAAEW,IAAlBiqF,CAAJ,EACE,MAAM,IAAI1jF,KAAJ,CAAU,4BAA0BlH,CAAAA,CAAEW,IAAtC,CAAN;AAEF,gBAAMsqF,CAAAA,GAAex5E,KAAKi5E,QAALj5E,CAAclE,IAAdkE,CAAmB,IAAIo4E,CAAJ,CAAU7pF,CAAV,CAAnByR,IAAmC,CAAxD;AACAm5E,YAAAA,CAAAA,CAAYhlF,GAAZglF,CAAgB5qF,CAAAA,CAAEW,IAAlBiqF,EAAyBK,CAAzBL,GACAE,CAAAA,CAAgBv9E,IAAhBu9E,CAAqB9qF,CAAAA,CAAEW,IAAvBmqF,CADAF;AACuBjqF;AAAAA,SAPD,CAOCA,OAAAA,CAAAA,EAAAA;AAAAA,UAAAA,CAAAA,GAAAA;AAAAA,YAAAA,KAAAA,EAAAA;AAAAA,WAAAA;AAAAA,SAPD,SAOCA;AAAAA,cAAAA;AAAAA,YAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,IAAAA,KAAAA,CAAAA,GAAAA,CAAAA,CAAAA,MAAAA,KAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA;AAAAA,WAAAA,SAAAA;AAAAA,gBAAAA,CAAAA,EAAAA,MAAAA,CAAAA,CAAAA,KAAAA;AAAAA;AAIzB;;AAAA,YAAA,CAAKmnB,CAAAA,CAAMM,WAAX,EACE,MAAM,IAAIlhB,KAAJ,CAAU,2CAAV,CAAN;;AAAgB,YAAA;AAElB,eAAgB,IAAAgkF,CAAAA,GAAA7+E,CAAAA,CAAAyb,CAAAA,CAAMM,WAAN/b,CAAA,EAAiB8+E,CAAAA,GAAAD,CAAAA,CAAA3+E,IAAA2+E,EAAjC,EAAiC3+E,CAAA4+E,CAAAA,CAAA3+E,IAAjC,EAAiC2+E,CAAAA,GAAAD,CAAAA,CAAA3+E,IAAA2+E,EAAjC,EAAmC;AAAxBlrF,YAAAA,CAAAA,GAACmrF,CAAAA,CAAA9pF,KAADrB;AAAN,gBACC6E,CAAAA,GAAQ+lF,CAAAA,CAAY3pF,GAAZ2pF,CAAgB5qF,CAAAA,CAAEW,IAAlBiqF,CADT;;AAEH,gBAAA,KAAcjnF,CAAd,KAAIkB,CAAJ,EAAyB;AACvB,kBAAMxD,CAAAA,GAAQ,IAAIwoF,CAAJ,EAAd;AACAxoF,cAAAA,CAAAA,CAAMsE,IAANtE,GAAa;AACXmF,gBAAAA,KAAAA,EAAO;AAAC1D,kBAAAA,IAAAA,EAAMuO,CAAAA,CAAAtJ,SAAAsJ,CAAUpI,mBAAVoI,CAA8BrR,CAAAA,CAAE8C,IAAhCuO;AAAP,iBADI;AAEX7H,gBAAAA,UAAAA,EAAY6H,CAAAA,CAAAtJ,SAAAsJ,CAAUrJ,uBAAVqJ,CAAkCrR,CAAAA,CAAE0S,QAApCrB;AAFD,eAAbhQ,EAIAwD,CAAAA,GAAQ4M,KAAKi5E,QAALj5E,CAAclE,IAAdkE,CAAmBpQ,CAAnBoQ,IAA4B,CAJpCpQ,EAKAupF,CAAAA,CAAYhlF,GAAZglF,CAAgB5qF,CAAAA,CAAEW,IAAlBiqF,EAAyB/lF,CAAzB+lF,CALAvpF;AAOFoQ;;AAAAA,iBAAKi5E,QAALj5E,CAAc5M,CAAd4M,EAAqBq4E,KAArBr4E,GAAqBq4E,CAAS,CAA9Br4E,EACAA,KAAKi5E,QAALj5E,CAAc5M,CAAd4M,EAAqB8Y,MAArB9Y,GAA8BlP,CAAAA,CAAAmD,MAAAnD,CAAOiQ,SAAPjQ,CAAiBvC,CAAjBuC,CAD9BkP;AAC+CzR;AAAAA,SAd/B,CAc+BA,OAAAA,CAAAA,EAAAA;AAAAA,UAAAA,CAAAA,GAAAA;AAAAA,YAAAA,KAAAA,EAAAA;AAAAA,WAAAA;AAAAA,SAd/B,SAc+BA;AAAAA,cAAAA;AAAAA,YAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,IAAAA,KAAAA,CAAAA,GAAAA,CAAAA,CAAAA,MAAAA,KAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA;AAAAA,WAAAA,SAAAA;AAAAA,gBAAAA,CAAAA,EAAAA,MAAAA,CAAAA,CAAAA,KAAAA;AAAAA;AAIjD;;AAAA,aAASA,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAIyR,KAAKi5E,QAALj5E,CAAc5O,MAAlC,EAA0C7C,CAAAA,EAA1C,EACOyR,KAAKi5E,QAALj5E,CAAczR,CAAdyR,EAAiB8Y,MAAjB9Y,KACHA,KAAK64E,gBAAL74E,CAAsBlE,IAAtBkE,CAA2BzR,CAA3ByR,GACAA,KAAK84E,cAAL94E,CAAoBlE,IAApBkE,CAAyBq5E,CAAAA,CAAgB9qF,CAAhB8qF,CAAzBr5E,CAFGA;;AAOP,YAAA,CAAKqW,CAAAA,CAAMjS,MAAX,EACE,MAAM,IAAI3O,KAAJ,CAAU,sCAAV,CAAN;;AAAgB,YAAA;AAElB,eAAgB,IAAAkkF,CAAAA,GAAA/+E,CAAAA,CAAAyb,CAAAA,CAAMjS,MAANxJ,CAAA,EAAYg/E,CAAAA,GAAAD,CAAAA,CAAA7+E,IAAA6+E,EAA5B,EAA4B7+E,CAAA8+E,CAAAA,CAAA7+E,IAA5B,EAA4B6+E,CAAAA,GAAAD,CAAAA,CAAA7+E,IAAA6+E,EAA5B,EAA8B;AAAnBprF,YAAAA,CAAAA,GAACqrF,CAAAA,CAAAhqF,KAADrB;AACT,gBAAI4qF,CAAAA,CAAY7rE,GAAZ6rE,CAAgB5qF,CAAAA,CAAEW,IAAlBiqF,CAAJ,EACE,MAAM,IAAI1jF,KAAJ,CAAU,6BAA2BlH,CAAAA,CAAEW,IAAvC,CAAN;AAEIsqF,YAAAA,CAAAA,GAAex5E,KAAKi5E,QAALj5E,CAAclE,IAAdkE,CAAmB,IAAIo4E,CAAJ,CAAU7pF,CAAV,CAAnByR,IAAmC,CAAlDw5E;AACNL,YAAAA,CAAAA,CAAYhlF,GAAZglF,CAAgB5qF,CAAAA,CAAEW,IAAlBiqF,EAAyBK,CAAzBL,GACAn5E,KAAK+4E,iBAAL/4E,CAAuBlE,IAAvBkE,CAA4Bw5E,CAA5Bx5E,CADAm5E,EAEAn5E,KAAKg5E,eAALh5E,CAAqBlE,IAArBkE,CAA0BzR,CAAAA,CAAEW,IAA5B8Q,CAFAm5E;AAE4BjqF;AAAAA,SATZ,CASYA,OAAAA,CAAAA,EAAAA;AAAAA,UAAAA,CAAAA,GAAAA;AAAAA,YAAAA,KAAAA,EAAAA;AAAAA,WAAAA;AAAAA,SATZ,SASYA;AAAAA,cAAAA;AAAAA,YAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,IAAAA,KAAAA,CAAAA,GAAAA,CAAAA,CAAAA,MAAAA,KAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA;AAAAA,WAAAA,SAAAA;AAAAA,gBAAAA,CAAAA,EAAAA,MAAAA,CAAAA,CAAAA,KAAAA;AAAAA;AAI9B;;AAAA,YAAA,CAAKmnB,CAAAA,CAAM1J,IAAX,EACE,MAAM,IAAIlX,KAAJ,CAAU,oCAAV,CAAN;;AAAgB,YAAA;AAElB,eAAwB,IAAAokF,CAAAA,GAAAj/E,CAAAA,CAAAyb,CAAAA,CAAM1J,IAAN/R,CAAA,EAAUk/E,CAAAA,GAAAD,CAAAA,CAAA/+E,IAAA++E,EAAlC,EAAkC/+E,CAAAg/E,CAAAA,CAAA/+E,IAAlC,EAAkC++E,CAAAA,GAAAD,CAAAA,CAAA/+E,IAAA++E,EAAlC,EAAoC;AAClC,gBAAA,CAAA,CADSE,CAAAA,GAASD,CAAAA,CAAAlqF,KAClB,EAAeV,IAAf,EAEE,KAAK,IAAI8qF,CAAAA,GAAO,CAAhB,GAAoBA,CAAAA,EAApB,EAA4B;AAC1B,kBAAMzlB,CAAAA,GAAO,aAAWwlB,CAAAA,CAAUnkE,MAArB,GAA2B,GAA3B,GAA+BokE,CAA5C;;AACA,kBAAA,CAAKZ,CAAAA,CAAa9rE,GAAb8rE,CAAiB7kB,CAAjB6kB,CAAL,EAA6B;AAC3BW,gBAAAA,CAAAA,CAAU7qF,IAAV6qF,GAAiBxlB,CAAjBwlB;AACA;AAAA;AAKN;AAAA,gBAAIX,CAAAA,CAAa9rE,GAAb8rE,CAAiBW,CAAAA,CAAU7qF,IAA3BkqF,CAAJ,EACE,MAAM,IAAI3jF,KAAJ,CAAU,2BAAyBskF,CAAAA,CAAU7qF,IAA7C,CAAN;AAEIsqF,YAAAA,CAAAA,GAAex5E,KAAKk5E,MAALl5E,CAAYlE,IAAZkE,CAAiB,IAAIu4E,CAAJ,CAASwB,CAAT,CAAjB/5E,IAAwC,CAAvDw5E;AACNJ,YAAAA,CAAAA,CAAajlF,GAAbilF,CAAiBW,CAAAA,CAAU7qF,IAA3BkqF,EAAiCI,CAAjCJ;AAAiCI;AAAAA,SAlBjB,CAkBiBA,OAAAA,CAAAA,EAAAA;AAAAA,UAAAA,CAAAA,GAAAA;AAAAA,YAAAA,KAAAA,EAAAA;AAAAA,WAAAA;AAAAA,SAlBjB,SAkBiBA;AAAAA,cAAAA;AAAAA,YAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,IAAAA,KAAAA,CAAAA,GAAAA,CAAAA,CAAAA,MAAAA,KAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA;AAAAA,WAAAA,SAAAA;AAAAA,gBAAAA,CAAAA,EAAAA,MAAAA,CAAAA,CAAAA,KAAAA;AAAAA;AAInC;;AAAA,aAASjrF,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAIyR,KAAKk5E,MAALl5E,CAAY5O,MAAhC,EAAwC7C,CAAAA,EAAxC,EAA6C;AAC3C,cAAMoe,CAAAA,GAAO3M,KAAKk5E,MAALl5E,CAAYzR,CAAZyR,CAAb;AAEA,cAAA,CAAA,CADM+5E,CAAAA,GAAY1jE,CAAAA,CAAM1J,IAAN0J,CAAW9nB,CAAX8nB,CAClB,EAAejS,MAAf,EACE,MAAM,IAAI3O,KAAJ,CAAU,8BAA4BskF,CAAAA,CAAU7qF,IAAhD,CAAN;;AAAsDA,cAAAA;AAExD,iBAAqB,IAAA+qF,CAAAA,IAAAC,CAAAA,GAAAA,KAAA,CAAAA,EAAAt/E,CAAAA,CAAAm/E,CAAAA,CAAU31E,MAAVxJ,CAAAq/E,CAAA,EAAgBE,CAAAA,GAAAF,CAAAA,CAAAn/E,IAAAm/E,EAArC,EAAqCn/E,CAAAq/E,CAAAA,CAAAp/E,IAArC,EAAqCo/E,CAAAA,GAAAF,CAAAA,CAAAn/E,IAAAm/E,EAArC,EAAuC;AAAlC,kBAAM71E,CAAAA,GAAM+1E,CAAAA,CAAAvqF,KAAZ;AAQH,kBAAA,KANyB,CAMzB,MAPIwqF,CAAAA,GAAYjB,CAAAA,CAAY3pF,GAAZ2pF,CAAgB/0E,CAAhB+0E,CAOhB,MALEiB,CAAAA,GAAYp6E,KAAKi5E,QAALj5E,CAAclE,IAAdkE,CAAmB,IAAIo4E,CAAJ,EAAnBp4E,IAAkC,CAA9Co6E,EACAjB,CAAAA,CAAYhlF,GAAZglF,CAAgB/0E,CAAhB+0E,EAAwBiB,CAAxBjB,CAIF,GAFAxsE,CAAAA,CAAKk7C,OAALl7C,CAAa7Q,IAAb6Q,CAAkBytE,CAAlBztE,CAEA,EAFkBytE,KAEqBloF,CAFrBkoF,KAEdp6E,KAAKi5E,QAALj5E,CAAco6E,CAAdp6E,EAAyBq4E,KAA7B,EACE,MAAM,IAAI5iF,KAAJ,CAAU,8CAA4C2kF,CAAtD,CAAN;;AAMF,kBAJAp6E,KAAKi5E,QAALj5E,CAAco6E,CAAdp6E,EAAyBq4E,KAAzBr4E,GAAiCzR,CAAjCyR,EAIyB,eAArB+5E,CAAAA,CAAUnkE,MAAd,EAAqC;AACnC,oBAAA,CAAKmkE,CAAAA,CAAU/1E,SAAf,IAA2D,MAA/B+1E,CAAAA,CAAU/1E,SAAV+1E,CAAoB3oF,MAAhD,IAAgDA,CAAiB2oF,CAAAA,CAAU/1E,SAAV+1E,CAAoB,CAApBA,EAAuBlqF,CAAxF,EACE,MAAM,IAAI4F,KAAJ,CAAU,qFAAV,CAAN;AAEF,oBAAA,CAAKskF,CAAAA,CAAU31E,MAAf,IAAqD,MAA5B21E,CAAAA,CAAU31E,MAAV21E,CAAiB3oF,MAA1C,EACE,MAAM,IAAIqE,KAAJ,CAAU,0EAAV,CAAN;AAEFkX,gBAAAA,CAAAA,CAAKk7C,OAALl7C,CAAa5a,GAAb4a,IACAA,CAAAA,CAAK+rE,WAAL/rE,GAAK+rE,CAAc,CADnB/rE,EAGA3M,KAAKi5E,QAALj5E,CAAco6E,CAAdp6E,EAAyBq4E,KAAzBr4E,GAAyBq4E,CAAS,CAHlC1rE,EAIA3M,KAAKi5E,QAALj5E,CAAco6E,CAAdp6E,EAAyB8Y,MAAzB9Y,GAAkClP,CAAAA,CAAAmD,MAAAnD,CAAOiQ,SAAPjQ,CAAiBipF,CAAAA,CAAU/1E,SAAV+1E,CAAoB,CAApBA,EAAuBlqF,CAAxCiB,CAJlC6b;AAI0E9c;AAAAA;AAAAA,WA5BtBX,CA4BsBW,OAAAA,CAAAA,EAAAA;AAAAA,YAAAA,CAAAA,GAAAA;AAAAA,cAAAA,KAAAA,EAAAA;AAAAA,aAAAA;AAAAA,WA5BtBX,SA4BsBW;AAAAA,gBAAAA;AAAAA,cAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,IAAAA,KAAAA,CAAAA,GAAAA,CAAAA,CAAAA,MAAAA,KAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA;AAAAA,aAAAA,SAAAA;AAAAA,kBAAAA,CAAAA,EAAAA,MAAAA,CAAAA,CAAAA,KAAAA;AAAAA;AAAAA;AAMhF;;AAAA,aAAStB,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAIyR,KAAKk5E,MAALl5E,CAAY5O,MAAhC,EAAwC7C,CAAAA,EAAxC,EAA6C;AAC3C,cACMwrF,CADN;AAAMptE,UAAAA,CAAAA,GAAO3M,KAAKk5E,MAALl5E,CAAYzR,CAAZyR,CAAP2M;AAGN,cAAA,CAAA,CAFMotE,CAAAA,GAAY1jE,CAAAA,CAAM1J,IAAN0J,CAAW9nB,CAAX8nB,CAElB,EAAetY,KAAf,EACE,MAAM,IAAItI,KAAJ,CAAU,6BAA2BskF,CAAAA,CAAU7qF,IAA/C,CAAN;;AAAqDA,cAAAA;AAEvD,iBAAoB,IAAAmrF,CAAAA,IAAAC,CAAAA,GAAAA,KAAA,CAAAA,EAAA1/E,CAAAA,CAAAm/E,CAAAA,CAAUh8E,KAAVnD,CAAAy/E,CAAA,EAAeE,CAAAA,GAAAF,CAAAA,CAAAv/E,IAAAu/E,EAAnC,EAAmCv/E,CAAAy/E,CAAAA,CAAAx/E,IAAnC,EAAmCw/E,CAAAA,GAAAF,CAAAA,CAAAv/E,IAAAu/E,EAAnC,EAAqC;AAAhC,kBACGD,CADH;AAAA,kBAAMr8E,CAAAA,GAAKw8E,CAAAA,CAAA3qF,KAAX;AAEH,kBAAA,KAAyB,CAAzB,MADMwqF,CAAAA,GAAYjB,CAAAA,CAAY3pF,GAAZ2pF,CAAgBp7E,CAAhBo7E,CAClB,CAAA,EACE,MAAM,IAAI1jF,KAAJ,CAAU,yBAAuBsI,CAAvB,GAA4B,cAA5B,GAA2Cg8E,CAAAA,CAAU7qF,IAA/D,CAAN;AAEFyd,cAAAA,CAAAA,CAAK3b,MAAL2b,CAAY7Q,IAAZ6Q,CAAiBytE,CAAjBztE,GAEA3M,KAAKi5E,QAALj5E,CAAco6E,CAAdp6E,EAAyBs4E,GAAzBt4E,CAA6BlE,IAA7BkE,CAAkCzR,CAAlCyR,CAFA2M;AAEkCpe;AAAAA,WATmBW,CASnBX,OAAAA,CAAAA,EAAAA;AAAAA,YAAAA,CAAAA,GAAAA;AAAAA,cAAAA,KAAAA,EAAAA;AAAAA,aAAAA;AAAAA,WATmBW,SASnBX;AAAAA,gBAAAA;AAAAA,cAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,IAAAA,KAAAA,CAAAA,GAAAA,CAAAA,CAAAA,MAAAA,KAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA;AAAAA,aAAAA,SAAAA;AAAAA,kBAAAA,CAAAA,EAAAA,MAAAA,CAAAA,CAAAA,KAAAA;AAAAA;AAAAA;AAItC;;AAAA,eAAA,CAAO,CAAP;AAAO,OA7KT4pF,EAgLQA,CAAAA,CAAA5nF,SAAA4nF,CAAAS,cAAAT,GAAR,YAAA;AAAA,YAAAzvE,CAAAA,GAAA1I,IAAA;AAAA,YAEQw6E,CAAAA,GAAwB,IAAIxtE,GAAJ,EAFhC;;AAGEhN,aAAK64E,gBAAL74E,CAAsB1C,OAAtB0C,CAA8B,UAAAzR,CAAA,EAAAA;AACfma,UAAAA,CAAAA,CAAKuwE,QAALvwE,CAAcna,CAAdma,EACR4vE,GADQ5vE,CACJpL,OADIoL,CACI,UAAA9T,CAAA,EAAAA;AACf4lF,YAAAA,CAAAA,CAASjtE,GAATitE,CAAa5lF,CAAb4lF;AAAa5lF,WAFF8T;AAEE9T,SAHjBoL;;AAWA,aAHA,IAAMy6E,CAAAA,GAAa3nF,KAAAA,CAAMuO,IAANvO,CAAW0nF,CAAX1nF,CAAnB,EACM4nF,CAAAA,GAAa,IAAI5nF,KAAJ,CAAkBkN,KAAKk5E,MAALl5E,CAAY5O,MAA9B,EAAsC4K,IAAtC,CAA2C,OAA3C,CADnB,EAC8D,CAAA,GAAA,YAAA;AAG5D,cAAM2+E,CAAAA,GAAYF,CAAAA,CAAW1oF,GAAX0oF,EAAlB;AAE8B,qBAA1BC,CAAAA,CAAWC,CAAXD,CAA0B,GAC5BA,CAAAA,CAAWC,CAAXD,CAAAA,GAAwB,OADI,IAI5BD,CAAAA,CAAW3+E,IAAX2+E,CAAgBE,CAAhBF,GACAC,CAAAA,CAAWC,CAAXD,CAAAA,GAAwB,MADxBD,EAGA1D,CAAAA,CAAKmC,MAALnC,CAAY4D,CAAZ5D,EAAuBlvB,OAAvBkvB,CAA+Bz5E,OAA/By5E,CAAuC,UAAC6D,CAAD,EAACA;AACtC,gBAAM/8E,CAAAA,GAAO6K,CAAAA,CAAKuwE,QAALvwE,CAAckyE,CAAdlyE,CAAb;AACA,gBAAA,KAA2B,CAA3B,KAAW7K,CAAAA,CAAKib,MAAhB,EACE,MAAM,IAAIrjB,KAAJ,CAAU,wCAAV,CAAN;AAEF,gBAAIoI,CAAAA,CAAKw6E,KAALx6E,KAAe88E,CAAnB,EACE,MAAM,IAAIllF,KAAJ,CAAU,+EAAV,CAAN;;AAEFoI,YAAAA,CAAAA,CAAKy6E,GAALz6E,CAASP,OAATO,CAAiB,UAACg9E,CAAD,EAACA;AAEhB,kBAAwC,WAApCH,CAAAA,CAAWG,CAAXH,CAAJ,EACE,MAAM,IAAIjlF,KAAJ,CAAU,uBAAV,CAAN;AAG2C,0BAApCilF,CAAAA,CAAWG,CAAXH,CAAoC,IAC3CD,CAAAA,CAAW3+E,IAAX2+E,CAAgBI,CAAhBJ,CAD2C;AAC3BI,aAPpBh9E;AAOoBg9E,WAftB9D,CAP4B;AAsBN8D,SA5B1B,EA4B0BA,CAAAA,GAAAA,IAzB1B,EAAOJ,CAAAA,CAAWrpF,MAAXqpF,GAAoB,CAA3B,GAA2B,CAAA;AAAA,OA9L7BtC,EA+NQA,CAAAA,CAAA5nF,SAAA4nF,CAAArL,cAAAqL,GAAR,UAAuBtL,CAAvB,EAAuBA;AAErB7sE,aAAK86E,sBAAL96E,IACAA,KAAK+6E,qBAAL/6E,EADAA,EAII6sE,CAAAA,IACFA,CAAAA,CAAiBC,cAAjBD,CAAgC7sE,IAAhC6sE,CALF7sE,EASAA,KAAKg7E,aAALh7E,EATAA;AASKg7E,OA1OP7C,EAmPAA,CAAAA,CAAA5nF,SAAA4nF,CAAA6C,aAAA7C,GAAA,YAAA;AAGE,aAHF,IAAA,CAAA,EAAAzvE,CAAAA,GAAA1I,IAAA,EACMtK,CAAAA,GAAS,CADf,EACe,CAAA,GAAA,UAEJnH,CAFI,EAEJA;AACP,cAAA,CAAK0sF,CAAAA,CAAK/B,MAAL+B,CAAY1sF,CAAZ0sF,EAAevC,WAApB,EAAoBA,OAElBhjF,CAAAA,IAEAulF,CAAAA,CAAK/B,MAAL+B,CAAY1sF,CAAZ0sF,EAAepzB,OAAfozB,CAAuB39E,OAAvB29E,CAA+B,UAAA19E,CAAA,EAAAA;AAC7BmL,YAAAA,CAAAA,CAAKuwE,QAALvwE,CAAcnL,CAAdmL,EAAmB2vE,KAAnB3vE,GAAmB2vE,CAAS,CAA5B3vE;AAA4B,WAD9BuyE,CAFAvlF,EAKAulF,CAAAA,CAAK/B,MAAL+B,CAAYnpF,MAAZmpF,CAAmB1sF,CAAnB0sF,EAAsB,CAAtBA,CALAvlF,EAKsB,CAAA,GAAA,EACtBnH,CANAmH,EAHM,UACYgjF;AAWhBhjF,UAAAA,CAAAA,GAAS,CAATA,KAEFulF,CAAAA,CAAK/B,MAAL+B,CAAY1sF,CAAZ0sF,EAAejqF,MAAfiqF,CAAsB39E,OAAtB29E,CAA8B,UAAArrF,CAAA,EAAAA;AAC5B,gBAAM2N,CAAAA,GAAMmL,CAAAA,CAAKuwE,QAALvwE,CAAc9Y,CAAd8Y,EAAqB4vE,GAArB5vE,CAAyB7M,OAAzB6M,CAAiCna,CAAAA,GAAImH,CAArCgT,CAAZ;;AAAiDhT,aACpC,CADoCA,KAC7C6H,CAD6C7H,KAE/CgT,CAAAA,CAAKuwE,QAALvwE,CAAc9Y,CAAd8Y,EAAqB4vE,GAArB5vE,CAAyBnL,CAAzBmL,IAAgCna,CAFemH;AAEfnH,WAHpC0sF,GAMAA,CAAAA,CAAK/B,MAAL+B,CAAY1sF,CAAZ0sF,EAAepzB,OAAfozB,CAAuB39E,OAAvB29E,CAA+B,UAAArrF,CAAA,EAAAA;AACzB8Y,YAAAA,CAAAA,CAAKuwE,QAALvwE,CAAc9Y,CAAd8Y,EAAqB2vE,KAArB3vE,IAA8BA,CAAAA,CAAKuwE,QAALvwE,CAAc9Y,CAAd8Y,EAAqB2vE,KAArB3vE,KAAgCna,CAAAA,GAAImH,CAAlEgT,KACFA,CAAAA,CAAKuwE,QAALvwE,CAAc9Y,CAAd8Y,EAAqB2vE,KAArB3vE,GAA8Bna,CAD5Bma;AAC4Bna,WAFlC0sF,CAREvlF,GAUgCnH,CAAAA,GAtB7BA,CAYHmH;AAZGnH,SAHX,EAGWA,CAAAA,GAAAA,IAHX,EAGWA,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAIyR,KAAKk5E,MAALl5E,CAAY5O,MAAhC,EAAwC7C,CAAAA,EAAxC,EAAwCA,CAAAA,CAA/BA,CAA+BA,CAAAA,EAA/BA,CAAAA,GAAC2sF,CAA8B3sF;;AA2BxCmH,QAAAA,CAAAA,GAAS,CAATA;;AAAS,YAAA,CAAA;AAAA,YAAA,CAAA,GAAA,UAEAnH,CAFA,EAEAA;AAEP,cAAA,CAA+B,CAA/B,KAAI4sF,CAAAA,CAAKlC,QAALkC,CAAc5sF,CAAd4sF,EAAiB95E,IAArB,IAAqBA,CAA+D,CAA/DA,KAAe85E,CAAAA,CAAKpC,iBAALoC,CAAuBt/E,OAAvBs/E,CAA+B5sF,CAAAA,GAAImH,CAAnCylF,CAApC,EAAuEzlF,OACrEA,CAAAA,IACAylF,CAAAA,CAAKlC,QAALkC,CAAcrpF,MAAdqpF,CAAqB5sF,CAArB4sF,EAAwB,CAAxBA,CADAzlF,EACwB,CAAA,GAAA,EACxBnH,CAFAmH,EAHM,UAE+DA;;AAMvE,cAAIA,CAAAA,GAAS,CAAb,EAAgB;AACd,gBAAI0lF,CAAAA,GAAAA,CAAO,CAAX;AAAW,iBAGmBlpF,CAHnB,KAGPipF,CAAAA,CAAKlC,QAALkC,CAAc5sF,CAAd4sF,EAAiB95E,IAHV,IAGUA,CAAiD,CAAjDA,KAAsB85E,CAAAA,CAAKlC,QAALkC,CAAc5sF,CAAd4sF,EAAiB95E,IAHjD,GAGiDA,CAE7C,CAF6CA,MAC1D+5E,CAAAA,GAAMD,CAAAA,CAAKjC,MAALiC,CAAYA,CAAAA,CAAKlC,QAALkC,CAAc5sF,CAAd4sF,EAAiB95E,IAA7B85E,EAAmCtzB,OAAnCszB,CAA2Ct/E,OAA3Cs/E,CAAmD5sF,CAAAA,GAAImH,CAAvDylF,CADoD95E,MAGxD85E,CAAAA,CAAKjC,MAALiC,CAAYA,CAAAA,CAAKlC,QAALkC,CAAc5sF,CAAd4sF,EAAiB95E,IAA7B85E,EAAmCtzB,OAAnCszB,CAA2CC,CAA3CD,IAAkD5sF,CAHM8S,CAHjD,GAM2C9S,CAKvC,CALuCA,MAIpD6sF,CAAAA,GAAMD,CAAAA,CAAKtC,gBAALsC,CAAsBt/E,OAAtBs/E,CAA8B5sF,CAAAA,GAAImH,CAAlCylF,CAJ8C5sF,MAMlD4sF,CAAAA,CAAKtC,gBAALsC,CAAsBC,CAAtBD,IAA6B5sF,CANqBA,CAN3C,EAiBX4sF,CAAAA,CAAKlC,QAALkC,CAAc5sF,CAAd4sF,EAAiB7+B,EAAjB6+B,CAAoB79E,OAApB69E,CAA4B,UAAAxuE,CAAA,EAAAA;AAAAA,eAEb,CAFaA,MAC1ByuE,CAAAA,GAAM1yE,CAAAA,CAAKwwE,MAALxwE,CAAYiE,CAAZjE,EAAkB1X,MAAlB0X,CAAyB7M,OAAzB6M,CAAiCna,CAAAA,GAAImH,CAArCgT,CADoBiE,MAGxBjE,CAAAA,CAAKwwE,MAALxwE,CAAYiE,CAAZjE,EAAkB1X,MAAlB0X,CAAyB0yE,CAAzB1yE,IAAgCna,CAHRoe;AAGQpe,aAHpC4sF,CAjBW,EAuBwB,MAA/BA,CAAAA,CAAKlC,QAALkC,CAAc5sF,CAAd4sF,EAAiB7+B,EAAjB6+B,CAAoB/pF,MAAW,IAAXA,CAGT,CAHSA,MAEtBgqF,CAAAA,GAAMD,CAAAA,CAAKpC,iBAALoC,CAAuBt/E,OAAvBs/E,CAA+B5sF,CAAAA,GAAImH,CAAnCylF,CAFgB/pF,CAAW,KAI/B+pF,CAAAA,CAAKpC,iBAALoC,CAAuBC,CAAvBD,IAA8B5sF,CAJC,CAvBxB;AA2BuBA;;AAAAA,UAAAA,CAAAA,GApC7BA,CAoC6BA;AApC7BA,SAFA;AAAA,YAEAA,CAAAA,GAAAA,IAFA;;AAET,aAASA,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAIyR,KAAKi5E,QAALj5E,CAAc5O,MAAlC,EAA0C7C,CAAAA,EAA1C,EAA0CA,CAAAA,CAAjCA,CAAiCA,CAAAA,EAAjCA,CAAAA,GAAC8sF,CAAgC9sF;AAAhC8sF,OAnRZlD,EAkUQA,CAAAA,CAAA5nF,SAAA4nF,CAAAmD,UAAAnD,GAAR,UAAmBwC,CAAnB,EAAmBA;AAAAA,YAAAA,CAAAA;AAAAA,YAAAA,CAAAA;AAAAA,YACXhuE,CAAAA,GAAO3M,KAAKk5E,MAALl5E,CAAY26E,CAAZ36E,CADI26E;AAEjB,YAAIhuE,CAAAA,CAAK3b,MAAL2b,CAAYvb,MAAZub,GAAqB,CAAzB,EACE,MAAM,IAAIlX,KAAJ,CAAU,uDAAV,CAAN;AAEF,YAAIkX,CAAAA,CAAKk7C,OAALl7C,CAAavb,MAAbub,GAAsB,CAA1B,EACE,KAAK,IAAIpe,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAIoe,CAAAA,CAAKk7C,OAALl7C,CAAavb,MAAjC,EAAyC7C,CAAAA,EAAzC,EACE,IAAIyR,KAAKi5E,QAALj5E,CAAc2M,CAAAA,CAAKk7C,OAALl7C,CAAape,CAAboe,CAAd3M,EAA+Bs8C,EAA/Bt8C,CAAkC5O,MAAlC4O,GAA2C,CAA/C,EACE,MAAM,IAAIvK,KAAJ,CAAU,qFAAV,CAAN;AAMNkX,QAAAA,CAAAA,CAAK+rE,WAAL/rE,GAAK+rE,CAAc,CAAnB/rE;;AACA,YAAM4uE,CAAAA,GAAkB5uE,CAAAA,CAAK3b,MAAL2b,CAAY,CAAZA,CAAxB;AAAA,YACM6uE,CAAAA,GAAmB7uE,CAAAA,CAAKk7C,OAALl7C,CAAa,CAAbA,CADzB;AAAA,YAEM8uE,CAAAA,GAAuBz7E,KAAKi5E,QAALj5E,CAAcw7E,CAAdx7E,EAAgCs8C,EAF7D;AAAA,YAKMo/B,CAAAA,GAAW17E,KAAKi5E,QAALj5E,CAAcu7E,CAAdv7E,EAA+Bs8C,EAA/Bt8C,CAAkCnE,OAAlCmE,CAA0C26E,CAA1C36E,CALjB;;AAOA,YAAA,CAAkB,CAAlB,KAAI07E,CAAJ,EACE,MAAM,IAAIjmF,KAAJ,CAAU,uEAAV,CAAN;AAEFuK,aAAKi5E,QAALj5E,CAAcu7E,CAAdv7E,EAA+Bs8C,EAA/Bt8C,CAAkClO,MAAlCkO,CAAyC07E,CAAzC17E,EAAmD,CAAnDA,GAGAA,KAAKi5E,QAALj5E,CAAcw7E,CAAdx7E,EAAgCs4E,GAAhCt4E,GAAsC,EAHtCA;;AAMA,YAAM5M,CAAAA,GAAQ4M,KAAK+4E,iBAAL/4E,CAAuBnE,OAAvBmE,CAA+Bw7E,CAA/Bx7E,CAAd;;AAMA,YAAA,CALe,CAKf,KALI5M,CAKJ,KAJE4M,KAAK+4E,iBAAL/4E,CAAuB5M,CAAvB4M,IAAgCu7E,CAIlC,GAAIE,CAAAA,IAAwBA,CAAAA,CAAqBrqF,MAArBqqF,GAA8B,CAA1D,EAA0D,IAAA;AACxD,eAAwB,IAAAE,CAAAA,GAAA/gF,CAAAA,CAAA6gF,CAAA7gF,CAAA,EAAoBghF,CAAAA,GAAAD,CAAAA,CAAA7gF,IAAA6gF,EAA5C,EAA4C7gF,CAAA8gF,CAAAA,CAAA7gF,IAA5C,EAA4C6gF,CAAAA,GAAAD,CAAAA,CAAA7gF,IAAA6gF,EAA5C,EAA8C;AAAzC,gBAAME,CAAAA,GAASD,CAAAA,CAAAhsF,KAAf;AAAA,gBACGksF,CAAAA,GAAe97E,KAAKk5E,MAALl5E,CAAY67E,CAAZ77E,EAAuBhP,MAAvBgP,CAA8BnE,OAA9BmE,CAAsCw7E,CAAtCx7E,CADlB;;AAGH,gBAAA,CAAsB,CAAtB,KAAI87E,CAAJ,EACE,MAAM,IAAIrmF,KAAJ,CAAU,0EAAV,CAAN;AAEFuK,iBAAKk5E,MAALl5E,CAAY67E,CAAZ77E,EAAuBhP,MAAvBgP,CAA8B87E,CAA9B97E,IAA8Cu7E,CAA9Cv7E,EACAA,KAAKi5E,QAALj5E,CAAcu7E,CAAdv7E,EAA+Bs8C,EAA/Bt8C,CAAkClE,IAAlCkE,CAAuC67E,CAAvC77E,CADAA;AACuC67E;AAAAA,SARe,CAQfA,OAAAA,CAAAA,EAAAA;AAAAA,UAAAA,CAAAA,GAAAA;AAAAA,YAAAA,KAAAA,EAAAA;AAAAA,WAAAA;AAAAA,SARe,SAQfA;AAAAA,cAAAA;AAAAA,YAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,IAAAA,KAAAA,CAAAA,GAAAA,CAAAA,CAAAA,MAAAA,KAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA;AAAAA,WAAAA,SAAAA;AAAAA,gBAAAA,CAAAA,EAAAA,MAAAA,CAAAA,CAAAA,KAAAA;AAAAA;AAAAA;AAAAA,OA/W7C1D,EAoXAA,CAAAA,CAAA5nF,SAAA4nF,CAAA4C,qBAAA5C,GAAA,YAAA;AAAA,YAAA,CAAA;AAAA,YAAA,CAAA;AAAA,YACMwC,CAAAA,GAAY,CADlB;;AACkB,YAAA;AAChB,eAAmB,IAAA/5E,CAAAA,GAAAhG,CAAAA,CAAAoF,KAAKk5E,MAALt+E,CAAA,EAAW07E,CAAAA,GAAA11E,CAAAA,CAAA9F,IAAA8F,EAA9B,EAA8B9F,CAAAw7E,CAAAA,CAAAv7E,IAA9B,EAA8Bu7E,CAAAA,GAAA11E,CAAAA,CAAA9F,IAAA8F,EAA9B,EAAgC;AAA3B,gBAAM+L,CAAAA,GAAI2pE,CAAAA,CAAA1mF,KAAV;;AAEH,gBAAoB,cAAhB+c,CAAAA,CAAKiJ,MAAT,EAA+B;AAE7B,kBAA2B,MAAvBjJ,CAAAA,CAAK3b,MAAL2b,CAAYvb,MAAhB,EACE,MAAM,IAAIqE,KAAJ,CAAU,+CAAV,CAAN;AAEF,kBAA4B,MAAxBkX,CAAAA,CAAKk7C,OAALl7C,CAAavb,MAAW,IAA6B,MAAxBub,CAAAA,CAAKk7C,OAALl7C,CAAavb,MAA9C,EACE,MAAM,IAAIqE,KAAJ,CAAU,sDAAV,CAAN;AAGF,kBAA4B,MAAxBkX,CAAAA,CAAKk7C,OAALl7C,CAAavb,MAAW,IAAmD,MAA9C4O,KAAKi5E,QAALj5E,CAAc2M,CAAAA,CAAKk7C,OAALl7C,CAAa,CAAbA,CAAd3M,EAA+Bs4E,GAA/Bt4E,CAAmC5O,MAApE,EACE,MAAM,IAAIqE,KAAJ,CAAU,uEAAV,CAAN;AAEFuK,mBAAKs7E,UAALt7E,CAAgB26E,CAAhB36E;AAEF26E;;AAAAA,YAAAA,CAAAA;AAAAA;AAAAA,SAjBc,CAiBdA,OAAAA,CAAAA,EAAAA;AAAAA,UAAAA,CAAAA,GAAAA;AAAAA,YAAAA,KAAAA,EAAAA;AAAAA,WAAAA;AAAAA,SAjBc,SAiBdA;AAAAA,cAAAA;AAAAA,YAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,IAAAA,KAAAA,CAAAA,GAAAA,CAAAA,CAAAA,MAAAA,KAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA;AAAAA,WAAAA,SAAAA;AAAAA,gBAAAA,CAAAA,EAAAA,MAAAA,CAAAA,CAAAA,KAAAA;AAAAA;AAAAA;AAAAA,OAtYJxC,EA0YAA,CAAAA,CAAA5nF,SAAA4nF,CAAA2C,sBAAA3C,GAAA,YAAA;AAAA,YAAA,CAAA;AAAA,YAAA,CAAA;AAAA,YACMwC,CAAAA,GAAY,CADlB;;AACkB,YAAA;AAChB,eAAmB,IAAA/5E,CAAAA,GAAAhG,CAAAA,CAAAoF,KAAKk5E,MAALt+E,CAAA,EAAW07E,CAAAA,GAAA11E,CAAAA,CAAA9F,IAAA8F,EAA9B,EAA8B9F,CAAAw7E,CAAAA,CAAAv7E,IAA9B,EAA8Bu7E,CAAAA,GAAA11E,CAAAA,CAAA9F,IAAA8F,EAA9B,EAAgC;AAEV,2BAFP01E,CAAAA,CAAA1mF,KAAA0mF,CAEJ1gE,MAAW,IAClB5V,KAAKs7E,UAALt7E,CAAgB26E,CAAhB36E,CADkB,EAGpB26E,CAAAA,EAHoB;AAGpBA;AAAAA,SANc,CAMdA,OAAAA,CAAAA,EAAAA;AAAAA,UAAAA,CAAAA,GAAAA;AAAAA,YAAAA,KAAAA,EAAAA;AAAAA,WAAAA;AAAAA,SANc,SAMdA;AAAAA,cAAAA;AAAAA,YAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,IAAAA,KAAAA,CAAAA,GAAAA,CAAAA,CAAAA,MAAAA,KAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA;AAAAA,WAAAA,SAAAA;AAAAA,gBAAAA,CAAAA,EAAAA,MAAAA,CAAAA,CAAAA,KAAAA;AAAAA;AAAAA;AAAAA,OAjZJxC,EAoZFA,CAAA;AA9aA,KAAA,EA1CA;AA0CA,G9KvCA,E8KuCA,UAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA;AAAA;;AAAA,KAAA,UAAA,CAAA,EAAA;AAAA,UAAA,CAAA,GAAA,QAAA,KAAA,QAAA,IAAA,UAAA,CAAA,EAAA;AAAA,YAAA,CAAA,GAAA,cAAA,OAAA,MAAA,IAAA,CAAA,CAAA,MAAA,CAAA,QAAA,CAAA;AAAA,YAAA,CAAA,GAAA,CAAA;AAAA,eAAA,CAAA,GAAA,CAAA,CAAA,IAAA,CAAA,CAAA,CAAA,GAAA;AAAA,UAAA,IAAA,EAAA,YAAA;AAAA,mBAAA,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA,MAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA;AAAA,cAAA,KAAA,EAAA,CAAA,IAAA,CAAA,CAAA,CAAA,EAAA,CAAA;AAAA,cAAA,IAAA,EAAA,CAAA;AAAA,aAAA;AAAA;AAAA,SAAA;AAAA,OAAA;AAAA,UAAA,CAAA,GAAA,QAAA,KAAA,eAAA,IAAA,UAAA,CAAA,EAAA;AAAA,eAAA,CAAA,IAAA,CAAA,CAAA,UAAA,GAAA,CAAA,GAAA;AAAA,UAAA,OAAA,EAAA;AAAA,SAAA;AAAA,OAAA;;AAAA,MAAA,MAAA,CAAA,cAAA,CAAA,CAAA,EAAA,YAAA,EAAA;AAAA,QAAA,KAAA,EAAA,CAAA;AAAA,OAAA;;ACtHA,UAAAxnF,CAAAA,GAAAC,CAAAA,CAAAlC,CAAAA,CAAA,EAAAA,CAAAkC,CAAA;AAAA,UACAC,CAAAA,GAAAnC,CAAAA,CAAA,CAAAA,CADA;AAAA,UAGAoC,CAAAA,GAAApC,CAAAA,CAAA,CAAAA,CAHA;AAAA,UAIAkR,CAAAA,GAAAlR,CAAAA,CAAA,CAAAA,CAJA;AAAA,UAyBA+pF,CAAAA,GAAA,YAAA;AACE,iBAAAA,CAAA,CAAY5sD,CAAZ,EAAYA;AAAAA,cAAAA,CAAAA,EAAAA,CAAAA;;AAEV,cADA7rB,KAAK+7E,WAAL/7E,GAAmB,IAAI6gD,GAAJ,EAAnB7gD,EACI6rB,QAAAA,CAAJ,EAAqD;AAAA,gBAAA;AACnD,mBAAmB,IAAAmwD,CAAAA,GAAAphF,CAAAA,CAAAixB,CAAAjxB,CAAA,EAAUqhF,CAAAA,GAAAD,CAAAA,CAAAlhF,IAAAkhF,EAA7B,EAA6BlhF,CAAAmhF,CAAAA,CAAAlhF,IAA7B,EAA6BkhF,CAAAA,GAAAD,CAAAA,CAAAlhF,IAAAkhF,EAA7B,EAA+B;AAA1B,oBAAME,CAAAA,GAAID,CAAAA,CAAArsF,KAAV;;AACHoQ,qBAAK+7E,WAAL/7E,CAAiB7L,GAAjB6L,CAAqBk8E,CAAAA,CAAKhtF,IAA1B8Q,EAAiC,CAACy4E,CAAAA,CAAU0D,QAAV1D,CAAmByD,CAAnBzD,CAAD,EAA2BA,CAAAA,CAAU2D,OAAV3D,CAAkByD,CAAlBzD,CAA3B,CAAjCz4E;AAA8Ek8E;AAAAA,aAF7B,CAE6BA,OAAAA,CAAAA,EAAAA;AAAAA,cAAAA,CAAAA,GAAAA;AAAAA,gBAAAA,KAAAA,EAAAA;AAAAA,eAAAA;AAAAA,aAF7B,SAE6BA;AAAAA,kBAAAA;AAAAA,gBAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA,IAAAA,KAAAA,CAAAA,GAAAA,CAAAA,CAAAA,MAAAA,KAAAA,CAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA;AAAAA,eAAAA,SAAAA;AAAAA,oBAAAA,CAAAA,EAAAA,MAAAA,CAAAA,CAAAA,KAAAA;AAAAA;AAGhF;;AAAA,gBAAIl8E,KAAK+7E,WAAL/7E,CAAiBhM,IAAjBgM,GAAwB6rB,CAAAA,CAAWz6B,MAAvC,EACE,MAAM,IAAIqE,KAAJ,CAAU,4BAAV,CAAN;AAAgB;AAkKxB;;AAAA,eA7JEgjF,CAAAA,CAAAloF,SAAAkoF,CAAAtkF,GAAAskF,GAAA,UAAIvoF,CAAJ,EAAiBgE,CAAjB,EAA2CtE,CAA3C,EAA2CA;AACzCoQ,eAAK+7E,WAAL/7E,CAAiB7L,GAAjB6L,CAAqB9P,CAArB8P,EAA0B,CAACpQ,CAAD,EAAQsE,CAAR,CAA1B8L;AAAkC9L,SADpCukF,EAGAA,CAAAA,CAAAloF,SAAAkoF,CAAAjrE,MAAAirE,GAAA,UAAOvoF,CAAP,EAAOA;AACL8P,eAAK+7E,WAAL/7E,CAAiBwN,MAAjBxN,CAAwB9P,CAAxB8P;AAAwB9P,SAJ1BuoF,EAMAA,CAAAA,CAAAloF,SAAAkoF,CAAA1sD,QAAA0sD,GAAA,UAASvoF,CAAT,EAAsBmsF,CAAtB,EAAsBA;AACpB,iBAAOr8E,KAAKxQ,GAALwQ,CAAS9P,CAAT8P,EAAc,OAAdA,EAAuBq8E,CAAvBr8E,CAAP;AAA8Bq8E,SAPhC5D,EAUAA,CAAAA,CAAAloF,SAAAkoF,CAAAvsD,MAAAusD,GAAA,UAAOvoF,CAAP,EAAoBmsF,CAApB,EAAoBA;AAClB,iBAAOr8E,KAAKxQ,GAALwQ,CAAS9P,CAAT8P,EAAc,KAAdA,EAAqBq8E,CAArBr8E,CAAP;AAA4Bq8E,SAX9B5D,EAcAA,CAAAA,CAAAloF,SAAAkoF,CAAA5rD,SAAA4rD,GAAA,UAAUvoF,CAAV,EAAuBmsF,CAAvB,EAAuBA;AACrB,iBAAOr8E,KAAKxQ,GAALwQ,CAAS9P,CAAT8P,EAAc,QAAdA,EAAwBq8E,CAAxBr8E,CAAP;AAA+Bq8E,SAfjC5D,EAkBAA,CAAAA,CAAAloF,SAAAkoF,CAAA6D,SAAA7D,GAAA,UAAUvoF,CAAV,EAAuBmsF,CAAvB,EAAuBA;AACrB,iBAAOr8E,KAAKxQ,GAALwQ,CAAS9P,CAAT8P,EAAc,QAAdA,EAAwBq8E,CAAxBr8E,CAAP;AAA+Bq8E,SAnBjC5D,EAsBAA,CAAAA,CAAAloF,SAAAkoF,CAAAp+C,SAAAo+C,GAAA,UAAUvoF,CAAV,EAAuBmsF,CAAvB,EAAuBA;AACrB,iBAAOr8E,KAAKxQ,GAALwQ,CAAS9P,CAAT8P,EAAc,QAAdA,EAAwBq8E,CAAxBr8E,CAAP;AAA+Bq8E,SAvBjC5D,EA0BAA,CAAAA,CAAAloF,SAAAkoF,CAAA3rD,OAAA2rD,GAAA,UAAQvoF,CAAR,EAAqBmsF,CAArB,EAAqBA;AACnB,iBAAOr8E,KAAKxQ,GAALwQ,CAAS9P,CAAT8P,EAAc,MAAdA,EAAsBq8E,CAAtBr8E,CAAP;AAA6Bq8E,SA3B/B5D,EA8BAA,CAAAA,CAAAloF,SAAAkoF,CAAA8D,UAAA9D,GAAA,UAAWvoF,CAAX,EAAwBmsF,CAAxB,EAAwBA;AACtB,iBAAOr8E,KAAKxQ,GAALwQ,CAAS9P,CAAT8P,EAAc,SAAdA,EAAyBq8E,CAAzBr8E,CAAP;AAAgCq8E,SA/BlC5D,EAkCAA,CAAAA,CAAAloF,SAAAkoF,CAAA+D,UAAA/D,GAAA,UAAWvoF,CAAX,EAAwBmsF,CAAxB,EAAwBA;AACtB,iBAAOr8E,KAAKxQ,GAALwQ,CAAS9P,CAAT8P,EAAc,SAAdA,EAAyBq8E,CAAzBr8E,CAAP;AAAgCq8E,SAnClC5D,EAsCQA,CAAAA,CAAAloF,SAAAkoF,CAAAjpF,GAAAipF,GAAR,UACIvoF,CADJ,EACiBgE,CADjB,EAC2CmoF,CAD3C,EAC2CA;AACzC,cAAMI,CAAAA,GAAez8E,KAAK+7E,WAAL/7E,CAAiBxQ,GAAjBwQ,CAAqB9P,CAArB8P,CAArB;;AACA,cAAA,KAAqB9N,CAArB,KAAIuqF,CAAJ,EAAgC;AAC9B,gBAAA,KAAqBvqF,CAArB,KAAImqF,CAAJ,EACE,OAAOA,CAAP;AAEF,kBAAM,IAAI5mF,KAAJ,CAAU,mCAAiCvF,CAA3C,CAAN;AAEF;;AAAA,cAAIusF,CAAAA,CAAa,CAAbA,CAAAA,KAAoBvoF,CAAxB,EACE,MAAM,IAAIuB,KAAJ,CAAU,6BAA2BvB,CAA3B,GAA+B,WAA/B,GAA2CuoF,CAAAA,CAAa,CAAbA,CAArD,CAAN;AAEF,iBAAOA,CAAAA,CAAa,CAAbA,CAAP;AAAoB,SAlDtBhE,EAqDeA,CAAAA,CAAA2D,OAAA3D,GAAf,UAAuByD,CAAvB,EAAuBA;AACrB,kBAAQA,CAAAA,CAAKhoF,IAAb;AACE,iBAAKrD,CAAAA,CAAA4F,IAAA5F,CAAKqiB,cAALriB,CAAoB0kB,aAApB1kB,CAAkCsG,KAAvC;AACE,qBAAO,OAAP;;AACF,iBAAKtG,CAAAA,CAAA4F,IAAA5F,CAAKqiB,cAALriB,CAAoB0kB,aAApB1kB,CAAkC6rF,GAAvC;AACE,qBAAO,KAAP;;AACF,iBAAK7rF,CAAAA,CAAA4F,IAAA5F,CAAKqiB,cAALriB,CAAoB0kB,aAApB1kB,CAAkCwG,MAAvC;AACE,qBAAO,QAAP;;AACF,iBAAKxG,CAAAA,CAAA4F,IAAA5F,CAAKqiB,cAALriB,CAAoB0kB,aAApB1kB,CAAkC8rF,MAAvC;AACE,qBAAO,QAAP;;AACF,iBAAK9rF,CAAAA,CAAA4F,IAAA5F,CAAKqiB,cAALriB,CAAoB0kB,aAApB1kB,CAAkC+rF,MAAvC;AACE,qBAAO,QAAP;;AACF,iBAAK/rF,CAAAA,CAAA4F,IAAA5F,CAAKqiB,cAALriB,CAAoB0kB,aAApB1kB,CAAkCgsF,IAAvC;AACE,qBAAO,MAAP;;AACF,iBAAKhsF,CAAAA,CAAA4F,IAAA5F,CAAKqiB,cAALriB,CAAoB0kB,aAApB1kB,CAAkCisF,OAAvC;AACE,qBAAO,SAAP;;AACF,iBAAKjsF,CAAAA,CAAA4F,IAAA5F,CAAKqiB,cAALriB,CAAoB0kB,aAApB1kB,CAAkCksF,OAAvC;AACE,qBAAO,SAAP;;AACF;AACE,oBAAM,IAAItnF,KAAJ,CAAU,0CAAwC5E,CAAAA,CAAA4F,IAAA5F,CAAKqiB,cAALriB,CAAoB0kB,aAApB1kB,CAAkCqrF,CAAAA,CAAKhoF,IAAvCrD,CAAlD,CAAN;AAlBJ;AAkBmGqD,SAxErGukF,EA4EeA,CAAAA,CAAA0D,QAAA1D,GAAf,UAAwByD,CAAxB,EAAwBA;AACtB,cAAIA,CAAAA,CAAKhoF,IAALgoF,KAAcrrF,CAAAA,CAAA4F,IAAA5F,CAAKqiB,cAALriB,CAAoB0kB,aAApB1kB,CAAkCmsF,KAAhDd,IACAA,CAAAA,CAAKhoF,IAALgoF,KAAcrrF,CAAAA,CAAA4F,IAAA5F,CAAKqiB,cAALriB,CAAoB0kB,aAApB1kB,CAAkCosF,MADpD,EAEE,MAAM,IAAIxnF,KAAJ,CAAU,sCAAV,CAAN;AAGF,cAAM7F,CAAAA,GAAQoQ,KAAKk9E,eAALl9E,CAAqBk8E,CAArBl8E,CAAd;AAGA,cAAIk8E,CAAAA,CAAKhoF,IAALgoF,KAAcrrF,CAAAA,CAAA4F,IAAA5F,CAAKqiB,cAALriB,CAAoB0kB,aAApB1kB,CAAkC6rF,GAAhDR,IAAuDvrF,CAAAA,CAAA+G,OAAA/G,CAAKgH,MAALhH,CAAYf,CAAZe,CAA3D,EACE,OAAQf,CAAAA,CAAegI,QAAfhI,EAAR;;AAIF,cAAIssF,CAAAA,CAAKhoF,IAALgoF,KAAcrrF,CAAAA,CAAA4F,IAAA5F,CAAKqiB,cAALriB,CAAoB0kB,aAApB1kB,CAAkCgsF,IAApD,EAA0D;AAIxD,iBAHA,IAAM9gE,CAAAA,GAAOnsB,CAAb,EACMutF,CAAAA,GAAwB,IAAIrqF,KAAJ,CAAkBipB,CAAAA,CAAI3qB,MAAtB,CAD9B,EAGS7C,CAAAA,GAAI,CAAb,EAAgBA,CAAAA,GAAIwtB,CAAAA,CAAI3qB,MAAxB,EAAgC7C,CAAAA,EAAhC,EAAqC;AACnC,kBAAM6uF,CAAAA,GAAYrhE,CAAAA,CAAIxtB,CAAJwtB,CAAlB;AACAohE,cAAAA,CAAAA,CAAY5uF,CAAZ4uF,CAAAA,GAAiBv9E,CAAAA,CAAAzH,QAAAyH,CAASxH,YAATwH,CAAsBw9E,CAAtBx9E,CAAjBu9E;AAGF;;AAAA,mBAAOA,CAAP;AAIF;;AAAA,cAAIjB,CAAAA,CAAKhoF,IAALgoF,KAAcrrF,CAAAA,CAAA4F,IAAA5F,CAAKqiB,cAALriB,CAAoB0kB,aAApB1kB,CAAkC8rF,MAApD,EACE,OAAO7rF,CAAAA,CAAAmD,MAAAnD,CAAOiQ,SAAPjQ,CAAiBlB,CAAjBkB,CAAP;AAIF,cAAIorF,CAAAA,CAAKhoF,IAALgoF,KAAcrrF,CAAAA,CAAA4F,IAAA5F,CAAKqiB,cAALriB,CAAoB0kB,aAApB1kB,CAAkCksF,OAApD,EAEE,OADqBntF,CAAAA,CACD6H,GADC7H,CACG,UAAAA,CAAA,EAAAA;AAAS,mBAAAkB,CAAAA,CAAAmD,MAAAnD,CAAOiQ,SAAPjQ,CAAiBlB,CAAjBkB,CAAA;AAAiBlB,WAD7BA,CACrB;;AAIF,cAAIssF,CAAAA,CAAKhoF,IAALgoF,KAAcrrF,CAAAA,CAAA4F,IAAA5F,CAAKqiB,cAALriB,CAAoB0kB,aAApB1kB,CAAkCwG,MAApD,EAA4D;AAC1D,gBAAMgmF,CAAAA,GAAaztF,CAAnB;AACA,mBAAOwR,CAAAA,CAAOC,IAAPD,CAAYi8E,CAAAA,CAAW/7E,MAAvBF,EAA+Bi8E,CAAAA,CAAW97E,UAA1CH,EAAsDi8E,CAAAA,CAAW77E,UAAjEJ,EAA6EK,QAA7EL,EAAP;AAIF;;AAAA,iBAAI86E,CAAAA,CAAKhoF,IAALgoF,KAAcrrF,CAAAA,CAAA4F,IAAA5F,CAAKqiB,cAALriB,CAAoB0kB,aAApB1kB,CAAkCisF,OAAhDZ,GACkBtsF,CAAAA,CACD6H,GADC7H,CAEhB,UAAAytF,CAAA,EAAAA;AAAc,mBAAAj8E,CAAAA,CAAOC,IAAPD,CAAYi8E,CAAAA,CAAW/7E,MAAvBF,EAA+Bi8E,CAAAA,CAAW97E,UAA1CH,EAAsDi8E,CAAAA,CAAW77E,UAAjEJ,EAA6EK,QAA7EL,EAAA;AAA6EK,WAF3E7R,CADlBssF,GAMGtsF,CANP;AAMOA,SA9HT6oF,EAiIeA,CAAAA,CAAAyE,eAAAzE,GAAf,UAA+ByD,CAA/B,EAA+BA;AAC7B,kBAAQA,CAAAA,CAAKhoF,IAAb;AACE,iBAAKrD,CAAAA,CAAA4F,IAAA5F,CAAKqiB,cAALriB,CAAoB0kB,aAApB1kB,CAAkCsG,KAAvC;AACE,qBAAO+kF,CAAAA,CAAKxoE,CAAZ;;AACF,iBAAK7iB,CAAAA,CAAA4F,IAAA5F,CAAKqiB,cAALriB,CAAoB0kB,aAApB1kB,CAAkC6rF,GAAvC;AACE,qBAAOR,CAAAA,CAAK3tF,CAAZ;;AACF,iBAAKsC,CAAAA,CAAA4F,IAAA5F,CAAKqiB,cAALriB,CAAoB0kB,aAApB1kB,CAAkCwG,MAAvC;AACE,qBAAO6kF,CAAAA,CAAKxrF,CAAZ;;AACF,iBAAKG,CAAAA,CAAA4F,IAAA5F,CAAKqiB,cAALriB,CAAoB0kB,aAApB1kB,CAAkC8rF,MAAvC;AACE,qBAAOT,CAAAA,CAAKrsF,CAAZ;;AACF,iBAAKgB,CAAAA,CAAA4F,IAAA5F,CAAKqiB,cAALriB,CAAoB0kB,aAApB1kB,CAAkCmsF,KAAvC;AACE,qBAAOd,CAAAA,CAAK7pE,CAAZ;;AACF,iBAAKxhB,CAAAA,CAAA4F,IAAA5F,CAAKqiB,cAALriB,CAAoB0kB,aAApB1kB,CAAkC+rF,MAAvC;AACE,qBAAOV,CAAAA,CAAK/oE,MAAZ;;AACF,iBAAKtiB,CAAAA,CAAA4F,IAAA5F,CAAKqiB,cAALriB,CAAoB0kB,aAApB1kB,CAAkCgsF,IAAvC;AACE,qBAAOX,CAAAA,CAAK9oE,IAAZ;;AACF,iBAAKviB,CAAAA,CAAA4F,IAAA5F,CAAKqiB,cAALriB,CAAoB0kB,aAApB1kB,CAAkCisF,OAAvC;AACE,qBAAOZ,CAAAA,CAAK7oE,OAAZ;;AACF,iBAAKxiB,CAAAA,CAAA4F,IAAA5F,CAAKqiB,cAALriB,CAAoB0kB,aAApB1kB,CAAkCksF,OAAvC;AACE,qBAAOb,CAAAA,CAAK5oE,OAAZ;;AACF,iBAAKziB,CAAAA,CAAA4F,IAAA5F,CAAKqiB,cAALriB,CAAoB0kB,aAApB1kB,CAAkCosF,MAAvC;AACE,qBAAOf,CAAAA,CAAK3oE,MAAZ;;AACF;AACE,oBAAM,IAAI9d,KAAJ,CAAU,iCAA+B5E,CAAAA,CAAA4F,IAAA5F,CAAKqiB,cAALriB,CAAoB0kB,aAApB1kB,CAAkCqrF,CAAAA,CAAKhoF,IAAvCrD,CAAzC,CAAN;AAtBJ;AAsB0FqD,SAxJ5FukF,EA6JFA,CAAA;AA3KA,OAAA,EAzBA;;AAyBavqF,MAAAA,CAAAA,CAAAuqF,SAAAvqF,GAAAuqF,CAAAvqF;AAAAuqF,KD6Fb,EC7FaA,ID6Fb,CC7FaA,ID6Fb,EC7FaA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,MD6Fb;AC7FaA,G/KsDb,CDxEA,CAAA;AgLkBaA,ChL5Bb;;;AiLAA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;;ACFA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/BA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;;ACDA;AACA;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AChtPA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtCA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrlHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnhBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;;ACDA;AACA;AACA;AACA;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACbzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACxttIA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACpFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACPA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;;;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9RA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AChJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACrFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACdpheA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;;ACDA;AACA;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;;ACFA;AACA;AACA;;ACFA;AACA;AACA;;ACFA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5BA;AACA;AACA;;ACFA;AACA;AACA;;ACFA;AACA;AACA;;ACFA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;ACfvMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpthuBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AC3BA;;AACA;;AACA;;;;AAEA,IAAM6E,IAAI,GAAG,SAAPA,IAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AACL//C,UAAAA,OADK,GACK,IAAIstC,wBAAJ,CAAqB;AAAEoB,YAAAA,WAAW,EAAE;AAAf,WAArB,CADL;AAELsR,UAAAA,SAFK,GAEO,2DAFP;AAGXp4E,UAAAA,OAAO,CAACL,GAAR,CAAY,kBAAZ;AAHW;AAAA,0CAILy4B,OAAO,CAAC0tC,SAAR,CA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","file":"yolo-onnxjs.e31bb0bc.js","sourceRoot":"..","sourcesContent":["\"use strict\"\n\nfunction iota(n) {\n  var result = new Array(n)\n  for(var i=0; i<n; ++i) {\n    result[i] = i\n  }\n  return result\n}\n\nmodule.exports = iota","/*!\n * Determine if an object is a Buffer\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n\n// The _isBuffer check is for Safari 5-7 support, because it's missing\n// Object.prototype.constructor. Remove this eventually\nmodule.exports = function (obj) {\n  return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)\n}\n\nfunction isBuffer (obj) {\n  return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)\n}\n\n// For Node v0.10 support. Remove this eventually.\nfunction isSlowBuffer (obj) {\n  return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))\n}\n","var iota = require(\"iota-array\")\nvar isBuffer = require(\"is-buffer\")\n\nvar hasTypedArrays  = ((typeof Float64Array) !== \"undefined\")\n\nfunction compare1st(a, b) {\n  return a[0] - b[0]\n}\n\nfunction order() {\n  var stride = this.stride\n  var terms = new Array(stride.length)\n  var i\n  for(i=0; i<terms.length; ++i) {\n    terms[i] = [Math.abs(stride[i]), i]\n  }\n  terms.sort(compare1st)\n  var result = new Array(terms.length)\n  for(i=0; i<result.length; ++i) {\n    result[i] = terms[i][1]\n  }\n  return result\n}\n\nfunction compileConstructor(dtype, dimension) {\n  var className = [\"View\", dimension, \"d\", dtype].join(\"\")\n  if(dimension < 0) {\n    className = \"View_Nil\" + dtype\n  }\n  var useGetters = (dtype === \"generic\")\n\n  if(dimension === -1) {\n    //Special case for trivial arrays\n    var code =\n      \"function \"+className+\"(a){this.data=a;};\\\nvar proto=\"+className+\".prototype;\\\nproto.dtype='\"+dtype+\"';\\\nproto.index=function(){return -1};\\\nproto.size=0;\\\nproto.dimension=-1;\\\nproto.shape=proto.stride=proto.order=[];\\\nproto.lo=proto.hi=proto.transpose=proto.step=\\\nfunction(){return new \"+className+\"(this.data);};\\\nproto.get=proto.set=function(){};\\\nproto.pick=function(){return null};\\\nreturn function construct_\"+className+\"(a){return new \"+className+\"(a);}\"\n    var procedure = new Function(code)\n    return procedure()\n  } else if(dimension === 0) {\n    //Special case for 0d arrays\n    var code =\n      \"function \"+className+\"(a,d) {\\\nthis.data = a;\\\nthis.offset = d\\\n};\\\nvar proto=\"+className+\".prototype;\\\nproto.dtype='\"+dtype+\"';\\\nproto.index=function(){return this.offset};\\\nproto.dimension=0;\\\nproto.size=1;\\\nproto.shape=\\\nproto.stride=\\\nproto.order=[];\\\nproto.lo=\\\nproto.hi=\\\nproto.transpose=\\\nproto.step=function \"+className+\"_copy() {\\\nreturn new \"+className+\"(this.data,this.offset)\\\n};\\\nproto.pick=function \"+className+\"_pick(){\\\nreturn TrivialArray(this.data);\\\n};\\\nproto.valueOf=proto.get=function \"+className+\"_get(){\\\nreturn \"+(useGetters ? \"this.data.get(this.offset)\" : \"this.data[this.offset]\")+\n\"};\\\nproto.set=function \"+className+\"_set(v){\\\nreturn \"+(useGetters ? \"this.data.set(this.offset,v)\" : \"this.data[this.offset]=v\")+\"\\\n};\\\nreturn function construct_\"+className+\"(a,b,c,d){return new \"+className+\"(a,d)}\"\n    var procedure = new Function(\"TrivialArray\", code)\n    return procedure(CACHED_CONSTRUCTORS[dtype][0])\n  }\n\n  var code = [\"'use strict'\"]\n\n  //Create constructor for view\n  var indices = iota(dimension)\n  var args = indices.map(function(i) { return \"i\"+i })\n  var index_str = \"this.offset+\" + indices.map(function(i) {\n        return \"this.stride[\" + i + \"]*i\" + i\n      }).join(\"+\")\n  var shapeArg = indices.map(function(i) {\n      return \"b\"+i\n    }).join(\",\")\n  var strideArg = indices.map(function(i) {\n      return \"c\"+i\n    }).join(\",\")\n  code.push(\n    \"function \"+className+\"(a,\" + shapeArg + \",\" + strideArg + \",d){this.data=a\",\n      \"this.shape=[\" + shapeArg + \"]\",\n      \"this.stride=[\" + strideArg + \"]\",\n      \"this.offset=d|0}\",\n    \"var proto=\"+className+\".prototype\",\n    \"proto.dtype='\"+dtype+\"'\",\n    \"proto.dimension=\"+dimension)\n\n  //view.size:\n  code.push(\"Object.defineProperty(proto,'size',{get:function \"+className+\"_size(){\\\nreturn \"+indices.map(function(i) { return \"this.shape[\"+i+\"]\" }).join(\"*\"),\n\"}})\")\n\n  //view.order:\n  if(dimension === 1) {\n    code.push(\"proto.order=[0]\")\n  } else {\n    code.push(\"Object.defineProperty(proto,'order',{get:\")\n    if(dimension < 4) {\n      code.push(\"function \"+className+\"_order(){\")\n      if(dimension === 2) {\n        code.push(\"return (Math.abs(this.stride[0])>Math.abs(this.stride[1]))?[1,0]:[0,1]}})\")\n      } else if(dimension === 3) {\n        code.push(\n\"var s0=Math.abs(this.stride[0]),s1=Math.abs(this.stride[1]),s2=Math.abs(this.stride[2]);\\\nif(s0>s1){\\\nif(s1>s2){\\\nreturn [2,1,0];\\\n}else if(s0>s2){\\\nreturn [1,2,0];\\\n}else{\\\nreturn [1,0,2];\\\n}\\\n}else if(s0>s2){\\\nreturn [2,0,1];\\\n}else if(s2>s1){\\\nreturn [0,1,2];\\\n}else{\\\nreturn [0,2,1];\\\n}}})\")\n      }\n    } else {\n      code.push(\"ORDER})\")\n    }\n  }\n\n  //view.set(i0, ..., v):\n  code.push(\n\"proto.set=function \"+className+\"_set(\"+args.join(\",\")+\",v){\")\n  if(useGetters) {\n    code.push(\"return this.data.set(\"+index_str+\",v)}\")\n  } else {\n    code.push(\"return this.data[\"+index_str+\"]=v}\")\n  }\n\n  //view.get(i0, ...):\n  code.push(\"proto.get=function \"+className+\"_get(\"+args.join(\",\")+\"){\")\n  if(useGetters) {\n    code.push(\"return this.data.get(\"+index_str+\")}\")\n  } else {\n    code.push(\"return this.data[\"+index_str+\"]}\")\n  }\n\n  //view.index:\n  code.push(\n    \"proto.index=function \"+className+\"_index(\", args.join(), \"){return \"+index_str+\"}\")\n\n  //view.hi():\n  code.push(\"proto.hi=function \"+className+\"_hi(\"+args.join(\",\")+\"){return new \"+className+\"(this.data,\"+\n    indices.map(function(i) {\n      return [\"(typeof i\",i,\"!=='number'||i\",i,\"<0)?this.shape[\", i, \"]:i\", i,\"|0\"].join(\"\")\n    }).join(\",\")+\",\"+\n    indices.map(function(i) {\n      return \"this.stride[\"+i + \"]\"\n    }).join(\",\")+\",this.offset)}\")\n\n  //view.lo():\n  var a_vars = indices.map(function(i) { return \"a\"+i+\"=this.shape[\"+i+\"]\" })\n  var c_vars = indices.map(function(i) { return \"c\"+i+\"=this.stride[\"+i+\"]\" })\n  code.push(\"proto.lo=function \"+className+\"_lo(\"+args.join(\",\")+\"){var b=this.offset,d=0,\"+a_vars.join(\",\")+\",\"+c_vars.join(\",\"))\n  for(var i=0; i<dimension; ++i) {\n    code.push(\n\"if(typeof i\"+i+\"==='number'&&i\"+i+\">=0){\\\nd=i\"+i+\"|0;\\\nb+=c\"+i+\"*d;\\\na\"+i+\"-=d}\")\n  }\n  code.push(\"return new \"+className+\"(this.data,\"+\n    indices.map(function(i) {\n      return \"a\"+i\n    }).join(\",\")+\",\"+\n    indices.map(function(i) {\n      return \"c\"+i\n    }).join(\",\")+\",b)}\")\n\n  //view.step():\n  code.push(\"proto.step=function \"+className+\"_step(\"+args.join(\",\")+\"){var \"+\n    indices.map(function(i) {\n      return \"a\"+i+\"=this.shape[\"+i+\"]\"\n    }).join(\",\")+\",\"+\n    indices.map(function(i) {\n      return \"b\"+i+\"=this.stride[\"+i+\"]\"\n    }).join(\",\")+\",c=this.offset,d=0,ceil=Math.ceil\")\n  for(var i=0; i<dimension; ++i) {\n    code.push(\n\"if(typeof i\"+i+\"==='number'){\\\nd=i\"+i+\"|0;\\\nif(d<0){\\\nc+=b\"+i+\"*(a\"+i+\"-1);\\\na\"+i+\"=ceil(-a\"+i+\"/d)\\\n}else{\\\na\"+i+\"=ceil(a\"+i+\"/d)\\\n}\\\nb\"+i+\"*=d\\\n}\")\n  }\n  code.push(\"return new \"+className+\"(this.data,\"+\n    indices.map(function(i) {\n      return \"a\" + i\n    }).join(\",\")+\",\"+\n    indices.map(function(i) {\n      return \"b\" + i\n    }).join(\",\")+\",c)}\")\n\n  //view.transpose():\n  var tShape = new Array(dimension)\n  var tStride = new Array(dimension)\n  for(var i=0; i<dimension; ++i) {\n    tShape[i] = \"a[i\"+i+\"]\"\n    tStride[i] = \"b[i\"+i+\"]\"\n  }\n  code.push(\"proto.transpose=function \"+className+\"_transpose(\"+args+\"){\"+\n    args.map(function(n,idx) { return n + \"=(\" + n + \"===undefined?\" + idx + \":\" + n + \"|0)\"}).join(\";\"),\n    \"var a=this.shape,b=this.stride;return new \"+className+\"(this.data,\"+tShape.join(\",\")+\",\"+tStride.join(\",\")+\",this.offset)}\")\n\n  //view.pick():\n  code.push(\"proto.pick=function \"+className+\"_pick(\"+args+\"){var a=[],b=[],c=this.offset\")\n  for(var i=0; i<dimension; ++i) {\n    code.push(\"if(typeof i\"+i+\"==='number'&&i\"+i+\">=0){c=(c+this.stride[\"+i+\"]*i\"+i+\")|0}else{a.push(this.shape[\"+i+\"]);b.push(this.stride[\"+i+\"])}\")\n  }\n  code.push(\"var ctor=CTOR_LIST[a.length+1];return ctor(this.data,a,b,c)}\")\n\n  //Add return statement\n  code.push(\"return function construct_\"+className+\"(data,shape,stride,offset){return new \"+className+\"(data,\"+\n    indices.map(function(i) {\n      return \"shape[\"+i+\"]\"\n    }).join(\",\")+\",\"+\n    indices.map(function(i) {\n      return \"stride[\"+i+\"]\"\n    }).join(\",\")+\",offset)}\")\n\n  //Compile procedure\n  var procedure = new Function(\"CTOR_LIST\", \"ORDER\", code.join(\"\\n\"))\n  return procedure(CACHED_CONSTRUCTORS[dtype], order)\n}\n\nfunction arrayDType(data) {\n  if(isBuffer(data)) {\n    return \"buffer\"\n  }\n  if(hasTypedArrays) {\n    switch(Object.prototype.toString.call(data)) {\n      case \"[object Float64Array]\":\n        return \"float64\"\n      case \"[object Float32Array]\":\n        return \"float32\"\n      case \"[object Int8Array]\":\n        return \"int8\"\n      case \"[object Int16Array]\":\n        return \"int16\"\n      case \"[object Int32Array]\":\n        return \"int32\"\n      case \"[object Uint8Array]\":\n        return \"uint8\"\n      case \"[object Uint16Array]\":\n        return \"uint16\"\n      case \"[object Uint32Array]\":\n        return \"uint32\"\n      case \"[object Uint8ClampedArray]\":\n        return \"uint8_clamped\"\n    }\n  }\n  if(Array.isArray(data)) {\n    return \"array\"\n  }\n  return \"generic\"\n}\n\nvar CACHED_CONSTRUCTORS = {\n  \"float32\":[],\n  \"float64\":[],\n  \"int8\":[],\n  \"int16\":[],\n  \"int32\":[],\n  \"uint8\":[],\n  \"uint16\":[],\n  \"uint32\":[],\n  \"array\":[],\n  \"uint8_clamped\":[],\n  \"buffer\":[],\n  \"generic\":[]\n}\n\n;(function() {\n  for(var id in CACHED_CONSTRUCTORS) {\n    CACHED_CONSTRUCTORS[id].push(compileConstructor(id, -1))\n  }\n});\n\nfunction wrappedNDArrayCtor(data, shape, stride, offset) {\n  if(data === undefined) {\n    var ctor = CACHED_CONSTRUCTORS.array[0]\n    return ctor([])\n  } else if(typeof data === \"number\") {\n    data = [data]\n  }\n  if(shape === undefined) {\n    shape = [ data.length ]\n  }\n  var d = shape.length\n  if(stride === undefined) {\n    stride = new Array(d)\n    for(var i=d-1, sz=1; i>=0; --i) {\n      stride[i] = sz\n      sz *= shape[i]\n    }\n  }\n  if(offset === undefined) {\n    offset = 0\n    for(var i=0; i<d; ++i) {\n      if(stride[i] < 0) {\n        offset -= (shape[i]-1)*stride[i]\n      }\n    }\n  }\n  var dtype = arrayDType(data)\n  var ctor_list = CACHED_CONSTRUCTORS[dtype]\n  while(ctor_list.length <= d+1) {\n    ctor_list.push(compileConstructor(dtype, ctor_list.length-1))\n  }\n  var ctor = ctor_list[d+1]\n  return ctor(data, shape, stride, offset)\n}\n\nmodule.exports = wrappedNDArrayCtor\n","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 25);\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport Long from 'long';\r\nimport {onnx} from 'onnx-proto';\r\n\r\nimport {Graph} from './graph';\r\nimport {Tensor} from './tensor';\r\n\r\n// check the inputs shape before running an OP.\r\n// return true when the inputs pass the check\r\n// return false when the inputs do not fit the requirement\r\n// throw exception when fatal error or not implemented\r\nexport function checkInputsShape(inputs: Tensor[], ...expectedDimensions: number[]): boolean {\r\n  if (!inputs || inputs.length !== expectedDimensions.length) {\r\n    return false;\r\n  }\r\n  for (let i = 0; i < inputs.length; i++) {\r\n    if (!inputs[i].dims || inputs[i].dims.length !== expectedDimensions[i]) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\nexport class MatMulUtil {\r\n  /**\r\n   * Fix the input shapes for MatMul operation if they need fixing\r\n   * @param dimsA The shape of tensor A. Should be an array of positive integers\r\n   * @param dimsB The shape of tensor B. Should be an array of positive integers\r\n   * @returns A tuple containing the preprocessed input shapes as required by ONNX specifications\r\n   */\r\n  static preprocessInputShapes(dimsA: ReadonlyArray<number>, dimsB: ReadonlyArray<number>):\r\n      [ReadonlyArray<number>, ReadonlyArray<number>] {\r\n    // If the first argument is 1-D, it is promoted to a matrix by prepending\r\n    // a 1 to its dimensions. After matrix multiplication the prepended 1 is\r\n    // removed.\r\n    const a = (dimsA.length === 1) ? [1, dimsA[0]] : dimsA;\r\n\r\n    // If the second argument is 1-D, it is promoted to a matrix by appending\r\n    // a 1 to its dimensions. After matrix multiplication the appended 1 is\r\n    // removed.\r\n    const b = (dimsB.length === 1) ? [dimsB[0], 1] : dimsB;\r\n\r\n    return [a, b];\r\n  }\r\n\r\n  /**\r\n   * Fix the output shape computed for MatMul operation if it needs fixing\r\n   * @param outputShape The computed outputShape. Should be an array (atleast of length 2) of positive integers.\r\n   * This will be mutated.\r\n   * @param aRank The rank of tensor A.\r\n   * @param bRank The rank of tensor B.\r\n   */\r\n  static postprocessOutputShape(outputShape: number[], aRank: number, bRank: number) {\r\n    // Remove prepended dimension if first input is 1d\r\n    if (aRank === 1) {\r\n      // outputShape = outputShape.slice(0, outputShape.length - 2).concat(outputShape.slice(outputShape.length - 1));\r\n      outputShape.splice(outputShape.length - 2, 1);\r\n    }\r\n    // Remove appended dimension if second input is 1d\r\n    if (bRank === 1) {\r\n      outputShape.pop();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate the expected shape when matrix multiplication\r\n   * @param a The shape of tensor A. Should be a tuple of 2 positive integers\r\n   * @param b The shape of tensor B. Should be a tuple of 2 positive integers\r\n   * @returns The expected shape of the result, or undefined if N/A\r\n   */\r\n  static calcMatMulShape(a: [number, number], b: [number, number]): [number, number]|undefined {\r\n    return (a[1] !== b[0]) ? undefined : [a[0], b[1]];\r\n  }\r\n}\r\n\r\nexport class BroadcastUtil {\r\n  /**\r\n   * Calculate the expected shape when broadcasting 2 tensors\r\n   * @param a The shape of tensor A. Should be an array of positive integers\r\n   * @param b The shape of tensor B. Should be an array of positive integers\r\n   * @param isMatMul Whether the operation is MatMul\r\n   * @returns The expected shape of the result, or undefined if N/A\r\n   */\r\n  static calcShape(adims: ReadonlyArray<number>, bdims: ReadonlyArray<number>, isMatMul = false):\r\n      ReadonlyArray<number>|undefined {\r\n    const arank = adims.length;\r\n    const brank = bdims.length;\r\n    if (arank === 0) {\r\n      return bdims;\r\n    }\r\n    if (brank === 0) {\r\n      return adims;\r\n    }\r\n    const crank = Math.max(adims.length, bdims.length);\r\n    const cdims = new Array<number>(crank);\r\n\r\n    // calculate the last 2 dimension if it is MatMul\r\n    if (isMatMul) {\r\n      if (arank < 2 || brank < 2) {\r\n        return undefined;\r\n      }\r\n      const cShapeMatMul =\r\n          MatMulUtil.calcMatMulShape([adims[arank - 2], adims[arank - 1]], [bdims[brank - 2], bdims[brank - 1]]);\r\n      if (cShapeMatMul === undefined) {\r\n        return undefined;\r\n      }\r\n      [cdims[crank - 2], cdims[crank - 1]] = cShapeMatMul;\r\n    }\r\n\r\n    for (let i = isMatMul ? 3 : 1; i <= crank; i++) {\r\n      const aLen = arank - i < 0 ? 1 : adims[arank - i];\r\n      const bLen = brank - i < 0 ? 1 : bdims[brank - i];\r\n\r\n      if (aLen !== bLen && aLen > 1 && bLen > 1) {\r\n        return undefined;\r\n      }\r\n      cdims[crank - i] = Math.max(aLen, bLen);\r\n    }\r\n\r\n    return cdims;\r\n  }\r\n\r\n  /**\r\n   * Given the indices of a broadcasted tensor, calculate the original indices\r\n   * @param broadcastedIndices The given indices of the broadcasted tensor.\r\n   * @param originalShape The original shape of the tensor before broadcas\r\n   * @returns The calculated indices that maps to the original tensor.\r\n   */\r\n  static index(broadcastedIndices: ReadonlyArray<number>, originalShape: ReadonlyArray<number>): number[] {\r\n    // NOTE 1: we assume the parameter broadcastedIndices is valid. ie. it should have the same\r\n    // length as the broadcasted shape, and for each dimension the index should\r\n    // not be out of range.\r\n    const originalIndices = new Array(originalShape.length);\r\n    BroadcastUtil.fillIndex(broadcastedIndices, originalShape, originalIndices);\r\n    return originalIndices;\r\n  }\r\n\r\n  /**\r\n   * Given the indices of a broadcasted tensor, calculate the original indices\r\n   * @param broadcastedIndices The given indices of the broadcasted tensor.\r\n   * @param originalShape The original shape of the tensor before broadcast\r\n   * @param originalIndices The mapping of broadcastedIndices to the originalIndices (output parameter - will be\r\n   *     mutated).\r\n   */\r\n  static fillIndex(\r\n      broadcastedIndices: ReadonlyArray<number>, originalShape: ReadonlyArray<number>, originalIndices: number[]) {\r\n    // NOTE 1: we assume the parameter broadcastedIndices is valid. ie. it should have the same length as the\r\n    // broadcasted shape, and for each dimension the index should not be out of range.\r\n    // NOTE 2: we assume the parameter originalIndices has the same length as the originalShape\r\n    const dimOffset = broadcastedIndices.length - originalShape.length;\r\n    for (let i = 0; i < originalShape.length; i++) {\r\n      originalIndices[i] = broadcastedIndices[dimOffset + i] % originalShape[i];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Perform the broadcasting operation on the specific operator\r\n   * @param a The input tensor A\r\n   * @param b The input tensor B\r\n   * @param op The operator lambda function\r\n   * @param inplace Whether to write the result back to A.\r\n   * @returns The result tensor, or undefined if input not broadcastable.\r\n   */\r\n  static calc(\r\n      a: Tensor, b: Tensor, op: (a: string|number, b: string|number) => (string | number), inplace: boolean,\r\n      resultType?: Tensor.DataType): Tensor|undefined {\r\n    const outputShape = BroadcastUtil.calcShape(a.dims, b.dims);\r\n\r\n    if (outputShape) {\r\n      if (inplace && !ShapeUtil.areEqual(outputShape, a.dims)) {\r\n        // B is not broadcastable to A, failed to calculate inplace.\r\n        return undefined;\r\n      }\r\n\r\n      const size = ShapeUtil.size(outputShape);\r\n      const c = inplace ? a : new Tensor(outputShape, resultType || a.type);\r\n\r\n      // both inputs are scalars\r\n      if (outputShape.length === 0) {\r\n        c.set([], op(a.get([]), b.get([])));\r\n      }\r\n\r\n      // atleast one input is a non-scalar\r\n      else {\r\n        const outputIndices = new Array<number>(outputShape.length);\r\n        const originalIndicesA = new Array(a.dims.length);\r\n        const originalIndicesB = new Array(b.dims.length);\r\n        let valA: string|number = 0;\r\n        let valB: string|number = 0;\r\n        let isAScalar = false;\r\n        let isBScalar = false;\r\n        if (a.dims.length === 0) {\r\n          valA = a.get([]);\r\n          isAScalar = true;\r\n        }\r\n        if (b.dims.length === 0) {\r\n          valB = b.get([]);\r\n          isBScalar = true;\r\n        }\r\n        let rest: number;\r\n        for (let i = 0; i < size; i++) {\r\n          // traversal indices\r\n          rest = i;\r\n          for (let j = outputShape.length - 1; j >= 0; j--) {\r\n            outputIndices[j] = rest % outputShape[j];\r\n            rest = Math.floor(rest / outputShape[j]);\r\n          }\r\n\r\n          if (!isAScalar) {\r\n            // map outputIndices (which is actually broadcasted) to the originalIndices\r\n            BroadcastUtil.fillIndex(outputIndices, a.dims, originalIndicesA);\r\n            valA = a.get(originalIndicesA);\r\n          }\r\n          if (!isBScalar) {\r\n            BroadcastUtil.fillIndex(outputIndices, b.dims, originalIndicesB);\r\n            valB = b.get(originalIndicesB);\r\n          }\r\n\r\n          c.set(outputIndices, op(valA, valB));\r\n        }\r\n      }\r\n\r\n      return c;\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * Determine if a shape is unidirectional broadcastable to another shape\r\n   * @param shape The input shape\r\n   * @param finalShape The desired shape after broadcasting\r\n   */\r\n  static isValidBroadcast(shape: ReadonlyArray<number>, finalShape: ReadonlyArray<number>): boolean {\r\n    // align shape to the right\r\n    const inputRank = shape.length;\r\n    const finalRank = finalShape.length;\r\n    if (inputRank > finalRank) {\r\n      return false;\r\n    }\r\n    for (let i = 1; i <= inputRank; i++) {\r\n      if (shape[inputRank - i] !== 1 && shape[inputRank - i] !== finalShape[finalRank - i]) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n}\r\n\r\n// copy array helper\r\n// mimics memcpy as much as possible\r\nexport function arrayCopyHelper(\r\n    target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\r\n    blockSize: number) {\r\n  if (sourceIndex < 0 || sourceIndex >= source.length) {\r\n    throw new Error(`sourceIndex out of bounds`);\r\n  }\r\n  if (targetIndex < 0 || targetIndex >= target.length) {\r\n    throw new Error(`targetIndex out of bounds`);\r\n  }\r\n  if (sourceIndex + blockSize > source.length) {\r\n    throw new Error(`source indices to be copied are outside bounds`);\r\n  }\r\n  if (targetIndex + blockSize > target.length) {\r\n    throw new Error(`target array is too small to hold result`);\r\n  }\r\n\r\n  for (let offset = 0; offset < blockSize; offset++) {\r\n    target[targetIndex + offset] = source[sourceIndex + offset];\r\n  }\r\n}\r\n\r\nexport class GemmUtil {\r\n  // will make sure input shapes are compatible for this op\r\n  // and return back the shape of the output in the form of a tuple\r\n  // will throw exception if the input shapes are not compatible\r\n  static getShapeOfGemmResult(\r\n      leftShape: ReadonlyArray<number>, transLeft: boolean, rightShape: ReadonlyArray<number>, transRight: boolean,\r\n      biasShape: ReadonlyArray<number>): ReadonlyArray<number> {\r\n    if (leftShape.length !== 2 || rightShape.length !== 2) {\r\n      throw new Error(`shape need to be of size 2`);\r\n    }\r\n\r\n    let M: number;\r\n    let K: number;\r\n    let N: number;\r\n\r\n    if (transLeft) {\r\n      M = leftShape[1];\r\n      K = leftShape[0];\r\n    } else {\r\n      M = leftShape[0];\r\n      K = leftShape[1];\r\n    }\r\n\r\n    let kDim = -1;\r\n\r\n    if (transRight) {\r\n      N = rightShape[0];\r\n      kDim = 1;\r\n    } else {\r\n      N = rightShape[1];\r\n      kDim = 0;\r\n    }\r\n\r\n    if (rightShape[kDim] !== K) {\r\n      throw new Error(`dimension mismatch`);\r\n    }\r\n\r\n    if (M <= 0 || N <= 0 || K <= 0) {\r\n      throw new Error(`invalid shape specified`);\r\n    }\r\n\r\n    if (!BroadcastUtil.isValidBroadcast(biasShape, [M, N])) {\r\n      throw new Error(`gemm: invalid bias shape for broadcast`);\r\n    }\r\n\r\n    return [M, N, K];\r\n  }\r\n}\r\n\r\nexport class ProtoUtil {\r\n  static tensorDataTypeFromProto(typeProto: onnx.TensorProto.DataType): Tensor.DataType {\r\n    switch (typeProto) {\r\n      case onnx.TensorProto.DataType.INT8:\r\n        return 'int8';\r\n      case onnx.TensorProto.DataType.UINT8:\r\n        return 'uint8';\r\n      case onnx.TensorProto.DataType.BOOL:\r\n        return 'bool';\r\n      case onnx.TensorProto.DataType.INT16:\r\n        return 'int16';\r\n      case onnx.TensorProto.DataType.UINT16:\r\n        return 'uint16';\r\n      case onnx.TensorProto.DataType.INT32:\r\n        return 'int32';\r\n      case onnx.TensorProto.DataType.UINT32:\r\n        return 'uint32';\r\n      case onnx.TensorProto.DataType.FLOAT:\r\n        return 'float32';\r\n      case onnx.TensorProto.DataType.DOUBLE:\r\n        return 'float64';\r\n      case onnx.TensorProto.DataType.STRING:\r\n        return 'string';\r\n\r\n      // For INT64/UINT64, reduce their value to 32-bits.\r\n      // Should throw exception when overflow\r\n      case onnx.TensorProto.DataType.INT64:\r\n        return 'int32';\r\n      case onnx.TensorProto.DataType.UINT64:\r\n        return 'uint32';\r\n\r\n      default:\r\n        throw new Error(`unsupported data type: ${onnx.TensorProto.DataType[typeProto]}`);\r\n    }\r\n  }\r\n\r\n  static tensorDimsFromProto(dims: Array<number|Long>): number[] {\r\n    // get rid of Long type for dims\r\n    return dims.map(d => Long.isLong(d) ? (d as Long).toNumber() : d as number);\r\n  }\r\n\r\n  static tensorValueTypeFromProto(valueType: onnx.TypeProto.ITensor): Graph.ValueType {\r\n    return {\r\n      tensorType: ProtoUtil.tensorDataTypeFromProto(valueType.elemType!),\r\n      shape: {dims: ProtoUtil.tensorDimsFromProto(valueType.shape!.dim!.map(d => d.dimValue!))}\r\n    };\r\n  }\r\n}\r\n\r\nexport class LongUtil {\r\n  static longToNumber(n: Long|number) {\r\n    if (Long.isLong(n)) {\r\n      return (n as Long).toNumber();\r\n    }\r\n    return n as number;\r\n  }\r\n}\r\n\r\nexport class ShapeUtil {\r\n  static size(dims: ReadonlyArray<number>): number {\r\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, dims.length);\r\n  }\r\n\r\n  // `axis` inclusive\r\n  static sizeFromDimension(dims: ReadonlyArray<number>, axis: number): number {\r\n    if (axis < 0 || axis > dims.length) {\r\n      throw new Error(`invalid dimension of ${axis} for sizeFromDimension as Tensor has ${dims.length} dimensions.`);\r\n    }\r\n    return ShapeUtil.getSizeFromDimensionRange(dims, axis, dims.length);\r\n  }\r\n\r\n  // `axis` exclusive\r\n  static sizeToDimension(dims: ReadonlyArray<number>, axis: number): number {\r\n    if (axis < 0 || axis > dims.length) {\r\n      throw new Error(`invalid dimension of ${axis} for sizeToDimension as Tensor has ${dims.length} dimensions.`);\r\n    }\r\n    return ShapeUtil.getSizeFromDimensionRange(dims, 0, axis);\r\n  }\r\n\r\n  static getSizeFromDimensionRange(dims: ReadonlyArray<number>, start: number, end: number): number {\r\n    let size = 1;\r\n    for (let i = start; i < end; i++) {\r\n      // safety check as this method is called by multiple other methods requiring size.\r\n      // size cannot be 0 or negative.\r\n      if (dims[i] <= 0) {\r\n        throw new Error(\r\n            // tslint:disable-next-line:max-line-length\r\n            `cannot get valid size from specified dimension range. Most likely the range contains 0 or negative values in them.`);\r\n      }\r\n      size *= dims[i];\r\n    }\r\n    return size;\r\n  }\r\n\r\n  static computeStrides(dims: ReadonlyArray<number>): ReadonlyArray<number> {\r\n    const rank = dims.length;\r\n    if (rank === 0) {\r\n      return [];\r\n    } else if (rank === 1) {\r\n      return [1];\r\n    }\r\n    const strides = new Array(rank);\r\n    strides[rank - 1] = 1;\r\n    strides[rank - 2] = dims[rank - 1];\r\n    for (let i = rank - 3; i >= 0; --i) {\r\n      strides[i] = strides[i + 1] * dims[i + 1];\r\n    }\r\n    return strides;\r\n  }\r\n\r\n  static transpose(dims: ReadonlyArray<number>): ReadonlyArray<number> {\r\n    const copy = dims.slice();\r\n    return copy.reverse();\r\n  }\r\n\r\n  static indicesToOffset(indices: ReadonlyArray<number>, strides: ReadonlyArray<number>, axis?: number): number {\r\n    if (axis === undefined) {\r\n      axis = indices.length;\r\n    }\r\n    let offset = 0;\r\n    for (let i = 0; i < axis; ++i) {\r\n      offset += strides[i] * indices[i];\r\n    }\r\n    return offset;\r\n  }\r\n\r\n  static offsetToIndices(offset: number, strides: ReadonlyArray<number>): ReadonlyArray<number> {\r\n    const rank = strides.length;\r\n    if (rank === 0) {\r\n      return [];\r\n    } else if (rank === 1) {\r\n      return [offset * strides[0]];\r\n    }\r\n    const indices: number[] = new Array(strides.length);\r\n    for (let i = 0; i < indices.length - 1; ++i) {\r\n      indices[i] = Math.floor(offset / strides[i]);\r\n      offset -= indices[i] * strides[i];\r\n    }\r\n    indices[indices.length - 1] = offset;\r\n    return indices;\r\n  }\r\n\r\n  static parseAxis(axis: number, tensorRank: number): number {\r\n    if (axis < -tensorRank && axis >= tensorRank) {\r\n      throw new Error('unsupported axis for this operation.');\r\n    }\r\n    return axis < 0 ? axis + tensorRank : axis;\r\n  }\r\n\r\n  // Increment an index into a tensor (in lexicographic\r\n  // ordering), wrapping around the specified upper_bound.\r\n  /**\r\n   * Increment an index into a tensor (in lexicographic ordering), wrapping around the specified upper_bound.\r\n   * @param index Given index to increment (Will be mutated)\r\n   * @param dims The dimensions of the tensor for which the given index corresponds to\r\n   * @param axisToIncrementOn The 1-indexed axis to increment on. If undefined, axisToIncrementOn == rank\r\n   */\r\n  static incrementIndex(index: number[], dims: ReadonlyArray<number>, axisToIncrementOn?: number) {\r\n    if (dims.length === 0 || index.length === 0) {\r\n      throw new Error(`Index incrementing unsupported for scalar Tensor`);\r\n    }\r\n    if (axisToIncrementOn === undefined) {\r\n      axisToIncrementOn = dims.length;\r\n    } else {\r\n      if (axisToIncrementOn <= 0 || axisToIncrementOn > dims.length) {\r\n        throw new Error(`Incorrect axis to increment on`);\r\n      }\r\n    }\r\n\r\n    for (let k = axisToIncrementOn - 1; k >= 0; --k) {\r\n      index[k]++;\r\n      if (index[k] < dims[k]) {\r\n        break;\r\n      }\r\n      index[k] = 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Produces a new dimensions array based on the values in the 'originalDimensions' and 'shape' array\r\n   * Used in Reshape\r\n   * @param originalDims Original Shape array\r\n   * @param shapeHints array containing values to compute the new dimensions\r\n   * For example:\r\n   * originalDims = [2,2] and shapeHints = [0,-1] will return [2,2]\r\n   * originalDims = [2,2] and shapeHints = [4] will return [4]\r\n   * originalDims = [2,2] and shapeHints = [5] will throw an exception\r\n   * https://github.com/onnx/onnx/blob/master/docs/Operators.md#Reshape\r\n   */\r\n\r\n  static calculateReshapedDims(\r\n      originalDims: ReadonlyArray<number>,\r\n      shapeHints: number[]|ReadonlyArray<number>|Tensor.IntegerType): ReadonlyArray<number> {\r\n    // reshape to a Scalar Tensor\r\n    if (shapeHints.length === 0) {\r\n      if (originalDims.length === 0 || ShapeUtil.size(originalDims) === 1) {\r\n        return [];\r\n      } else {\r\n        throw new Error(`cannot reshape to a scalar Tensor`);\r\n      }\r\n    }\r\n\r\n    const nDims = shapeHints.length;\r\n    const reshapedDims = new Array<number>(nDims);\r\n    let unknownDimension = -1;\r\n    let newTensorSize = 1;\r\n    for (let i = 0; i < nDims; i++) {\r\n      if (shapeHints[i] < -1) {\r\n        throw new Error('a dimension in shape hints cannot be less than -1');\r\n      }\r\n      if (shapeHints[i] === -1) {\r\n        if (unknownDimension !== -1) {\r\n          throw new Error('at most one dimension in shape hints can be -1');\r\n        }\r\n        unknownDimension = i;\r\n      } else {\r\n        if (shapeHints[i] === 0) {\r\n          if (i >= originalDims.length) {\r\n            throw new Error('the dimension with value zero exceeds the dimension size of the input tensor');\r\n          }\r\n          reshapedDims[i] = originalDims[i];\r\n        } else {\r\n          reshapedDims[i] = shapeHints[i];\r\n        }\r\n        newTensorSize *= reshapedDims[i];\r\n      }\r\n    }\r\n\r\n    const oldTensorSize = ShapeUtil.size(originalDims);\r\n    if (unknownDimension !== -1) {\r\n      if (oldTensorSize % newTensorSize !== 0) {\r\n        throw new Error(`the input tensor cannot be reshaped to the requested shape. Input shape: [${\r\n            originalDims}] Output shape: [${shapeHints}]`);\r\n      }\r\n      reshapedDims[unknownDimension] = oldTensorSize / newTensorSize;\r\n    }\r\n    // validate sizes from originalDims and reshapedDims match\r\n    else {\r\n      if (newTensorSize !== oldTensorSize) {\r\n        throw new Error(`reshapedDims and originalDims don't have matching sizes`);\r\n      }\r\n    }\r\n    return reshapedDims;\r\n  }\r\n\r\n  /**\r\n   * Sorts a given array based on the indices in the Perm array\r\n   * Used in Transpose\r\n   * @param a Array to be sorted such as dims or strides\r\n   * @param perm Perm given; if null a will be reversed\r\n   */\r\n  static sortBasedOnPerm(a: ReadonlyArray<number>, perm?: ReadonlyArray<number>): ReadonlyArray<number> {\r\n    if (perm) {\r\n      return perm.map((v) => a[v]);\r\n    } else {\r\n      return a.slice().reverse();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Pads a given shape according to the padding values\r\n   * @param dims shape of the Tensor to be padded\r\n   * @param pad pad values\r\n   */\r\n  static padShape(dims: ReadonlyArray<number>, pad: ReadonlyArray<number>): ReadonlyArray<number> {\r\n    const rank = dims.length;\r\n    return dims.map((v, i) => v + pad[i] + pad[i + rank]);\r\n  }\r\n\r\n  /**\r\n   * Determines if the two shapes are identical\r\n   * @param shape1\r\n   * @param shape2\r\n   */\r\n  static areEqual(shape1: ReadonlyArray<number>, shape2: ReadonlyArray<number>): boolean {\r\n    if (shape1.length !== shape2.length) {\r\n      return false;\r\n    }\r\n    return shape1.every((v, i) => v === shape2[i]);\r\n  }\r\n\r\n  /**\r\n   * Validates if the given `dims` or `shape` is valid in ONNX.js context and returns data size\r\n   * @param dims - input `dims` that needs to be checked\r\n   */\r\n  static validateDimsAndCalcSize(dims: ReadonlyArray<number>): number {\r\n    if (dims.length > 6) {\r\n      throw new TypeError(`Only rank 0 to 6 is supported for tensor shape.`);\r\n    }\r\n    let size = 1;\r\n    for (const n of dims) {\r\n      if (!Number.isInteger(n)) {\r\n        throw new TypeError(`Invalid shape: ${n} is not an integer`);\r\n      }\r\n      if (n <= 0 || n > 2147483647) {\r\n        throw new TypeError(`Invalid shape: length ${n} is not allowed`);\r\n      }\r\n      size *= n;\r\n    }\r\n    return size;\r\n  }\r\n\r\n  /**\r\n   * Determines the shape of output tensor y = flatten(x, axis)\r\n   * @param dims - shape of input tensor\r\n   * @param axis - flatten axis\r\n   */\r\n  static flattenShape(dims: ReadonlyArray<number>, axis: number): ReadonlyArray<number> {\r\n    const total = dims.reduce((x, y) => x * y, 1);\r\n    const right = dims.slice(axis).reduce((x, y) => x * y, 1);\r\n    const outputDims = [total / right, right];\r\n\r\n    return outputDims;\r\n  }\r\n\r\n  /**\r\n   * Determines the shape of output tensor y = squeeze(x, axes)\r\n   * @param dims - shape of input tensor\r\n   * @param axes - squeeze axes\r\n   */\r\n  static squeezeShape(dims: ReadonlyArray<number>, axes: ReadonlyArray<number>): ReadonlyArray<number> {\r\n    const outputDims = new Array<number>();\r\n\r\n    // sanity check\r\n    if (axes.some(axis => axis >= dims.length || axis < 0)) {\r\n      throw new Error(`'axes' has an out of range axis`);\r\n    }\r\n\r\n    for (let i = 0; i < dims.length; i++) {\r\n      const inSqueezeList = axes.indexOf(i) >= 0;\r\n      if (inSqueezeList && dims[i] !== 1) {\r\n        throw new Error(`squeeze an axis of size different than 1`);\r\n      }\r\n\r\n      if ((axes.length === 0 && dims[i] > 1) || (axes.length > 0 && !inSqueezeList)) {\r\n        outputDims.push(dims[i]);\r\n      }\r\n    }\r\n\r\n    return outputDims;\r\n  }\r\n\r\n  /**\r\n   * Determines the shape of output tensor y = unsqueeze(x, axes)\r\n   * @param dims - shape of input tensor\r\n   * @param axes - unsqueeze axes\r\n   */\r\n  static unsqueezeShape(dims: ReadonlyArray<number>, axes: ReadonlyArray<number>): ReadonlyArray<number> {\r\n    const outputDims = new Array<number>(dims.length + axes.length);\r\n\r\n    // initialize the array elements to 0\r\n    outputDims.fill(0);\r\n\r\n    // set all axes indices to 1 in outputDims and check for duplicates\r\n    for (let i = 0; i < axes.length; i++) {\r\n      const axis = axes[i];\r\n      if (axis >= outputDims.length) {\r\n        throw new Error(`'axes' has an out of range axis`);\r\n      }\r\n      if (outputDims[axis] !== 0) {\r\n        throw new Error(`'axes' has a duplicate axis`);\r\n      }\r\n\r\n      outputDims[axis] = 1;\r\n    }\r\n\r\n    // fill in the zero entries of outputDims with the input tensor's shape\r\n    let inputDimsIterator = 0;\r\n    for (let i = 0; i < outputDims.length; i++) {\r\n      if (outputDims[i] === 0) {\r\n        outputDims[i] = dims[inputDimsIterator++];\r\n      }\r\n    }\r\n\r\n    // sanity check assertion. 'inputDimsIterator'\r\n    // should be equal to the length of 'dims'\r\n    if (inputDimsIterator !== dims.length) {\r\n      throw new Error('the unsqueezed dimension could not be established');\r\n    }\r\n\r\n    return outputDims;\r\n  }\r\n}\r\n\r\n// bunch of helper methods that do a variety of math operations\r\nexport class MathUtil {\r\n  // y = (x*x) + y\r\n  static sqr(\r\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\r\n      blockSize: number) {\r\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\r\n      throw new Error(`sourceIndex out of bounds`);\r\n    }\r\n    if (targetIndex < 0 || targetIndex >= target.length) {\r\n      throw new Error(`targetIndex out of bounds`);\r\n    }\r\n    if (sourceIndex + blockSize > source.length) {\r\n      throw new Error(`source indices to be copied are outside bounds`);\r\n    }\r\n    if (targetIndex + blockSize > target.length) {\r\n      throw new Error(`target array is too small to hold result`);\r\n    }\r\n\r\n    for (let offset = 0; offset < blockSize; offset++) {\r\n      target[targetIndex + offset] += Math.pow(source[sourceIndex + offset], 2);\r\n    }\r\n  }\r\n\r\n  // y = ax + y\r\n  static axpy(\r\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\r\n      blockSize: number, alpha: number) {\r\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\r\n      throw new Error(`sourceIndex out of bounds`);\r\n    }\r\n    if (targetIndex < 0 || targetIndex >= target.length) {\r\n      throw new Error(`targetIndex out of bounds`);\r\n    }\r\n    if (sourceIndex + blockSize > source.length) {\r\n      throw new Error(`source indices to be copied are outside bounds`);\r\n    }\r\n    if (targetIndex + blockSize > target.length) {\r\n      throw new Error(`target array is too small to hold result`);\r\n    }\r\n\r\n    for (let offset = 0; offset < blockSize; offset++) {\r\n      target[targetIndex + offset] += (alpha * source[sourceIndex + offset]);\r\n    }\r\n  }\r\n\r\n  // y = pow(x, b)\r\n  static powx(\r\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\r\n      blockSize: number, b: number) {\r\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\r\n      throw new Error(`sourceIndex out of bounds`);\r\n    }\r\n    if (targetIndex < 0 || targetIndex >= target.length) {\r\n      throw new Error(`targetIndex out of bounds`);\r\n    }\r\n    if (sourceIndex + blockSize > source.length) {\r\n      throw new Error(`source indices to be copied are outside bounds`);\r\n    }\r\n    if (targetIndex + blockSize > target.length) {\r\n      throw new Error(`target array is too small to hold result`);\r\n    }\r\n\r\n    for (let offset = 0; offset < blockSize; offset++) {\r\n      target[targetIndex + offset] = Math.pow(source[sourceIndex + offset], b);\r\n    }\r\n  }\r\n\r\n  // y = x * y\r\n  static mul(\r\n      target: number[]|Tensor.NumberType, source: number[]|Tensor.NumberType, targetIndex: number, sourceIndex: number,\r\n      blockSize: number) {\r\n    if (sourceIndex < 0 || sourceIndex >= source.length) {\r\n      throw new Error(`sourceIndex out of bounds`);\r\n    }\r\n    if (targetIndex < 0 || targetIndex >= target.length) {\r\n      throw new Error(`targetIndex out of bounds`);\r\n    }\r\n    if (sourceIndex + blockSize > source.length) {\r\n      throw new Error(`source indices to be copied are outside bounds`);\r\n    }\r\n    if (targetIndex + blockSize > target.length) {\r\n      throw new Error(`target array is too small to hold result`);\r\n    }\r\n\r\n    for (let offset = 0; offset < blockSize; offset++) {\r\n      target[targetIndex + offset] = (source[sourceIndex + offset] * target[targetIndex + offset]);\r\n    }\r\n  }\r\n}\r\n\r\nexport class SplitUtil {\r\n  /**\r\n   * Calculates new Shapes from existing one and the splits given along the axis provides\r\n   * @param dims Shape of the Tensor to be splitted into two or more Shapes\r\n   * @param axis The dimension along which the Tensor will be split\r\n   * @param splits Offsets for the start of each split\r\n   */\r\n  static splitShape(dims: ReadonlyArray<number>, axis: number, split: number[], numOutputs?: number):\r\n      [number[][], number[]] {\r\n    if (split.length === 0) {\r\n      if (!numOutputs) {\r\n        throw new Error(`need to know number of outputs when the 'split' attribute is not specified`);\r\n      }\r\n      SplitUtil.determineSplit(dims[axis], numOutputs, split);\r\n    }\r\n\r\n    const shapes: number[][] = [];\r\n    const offsets = [0];\r\n    for (let i = 0; i < split.length; ++i) {\r\n      if (i !== 0) {\r\n        offsets.push(offsets[i - 1] + split[i - 1]);\r\n      }\r\n      const shape = dims.slice();\r\n      shape[axis] = split[i];\r\n      shapes.push(shape);\r\n    }\r\n    return [shapes, offsets];\r\n  }\r\n\r\n  static determineSplit(numElementsAlongAxis: number, numOutputs: number, split: number[]) {\r\n    // If 'split' is not specified by the user, we need to partition the number of elements equally among the outputs\r\n    if (numElementsAlongAxis % numOutputs !== 0) {\r\n      throw new Error(`cannot split tensor to equal sized parts`);\r\n    }\r\n    for (let i = 0; i < numOutputs; ++i) {\r\n      split.push(numElementsAlongAxis / numOutputs);\r\n    }\r\n  }\r\n}\r\n\r\nexport class ReduceUtil {\r\n  /**\r\n   * Perform reduce operations on the specific operator\r\n   * @param a Input tensor data\r\n   * @param axes The dimensions along which the Tensor will be reduced\r\n   * @param keepdims If set to true, the axes which are reduced are left in the\r\n   *    result as dimensions with size one.\r\n   * @param op1 The operation to be performed on each element in the tensor\r\n   * @param op2 The operation to be performed between elements in the tensor\r\n   */\r\n  static calcReduce(\r\n      a: Tensor, axes: number[], keepdims: boolean, op1: (b: number) => number,\r\n      op2: (a: number, b: number) => number): Tensor {\r\n    const dims = a.dims.slice(0);\r\n    // if axes is not set, perform reduce on all axes\r\n    if (axes.length === 0) {\r\n      dims.forEach((d, ind) => axes.push(ind));\r\n    }\r\n    // get a temporary broadcastable output shape\r\n    const outputDims = ReduceUtil.calcReduceShape(dims, axes, true);\r\n\r\n    // loop through the output and calculate result one by one\r\n    const size = ShapeUtil.size(outputDims);\r\n    const y = new Tensor(outputDims, a.type);\r\n    const strides = ShapeUtil.computeStrides(outputDims);\r\n    const inputStrides = ShapeUtil.computeStrides(dims);\r\n    const indicesY = new Array(dims.length);\r\n    for (let i = 0; i < size; i++) {\r\n      const indices = ShapeUtil.offsetToIndices(i, strides);\r\n      // map index\r\n      BroadcastUtil.fillIndex(indices, dims, indicesY);\r\n      y.set(\r\n          indices,\r\n          ReduceUtil.calcReduceByAxis(\r\n              a.numberData, axes, dims, 0, ShapeUtil.indicesToOffset(indicesY, inputStrides), op1, op2));\r\n    }\r\n\r\n    if (keepdims) {\r\n      return y;\r\n    } else {\r\n      // keepdims == 0, calculate the expected shape\r\n      return new Tensor(\r\n          ReduceUtil.calcReduceShape(dims, axes, keepdims), y.type, undefined, undefined, y.data, y.dataId);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Perform reduce operations on the specific operator on specific axes\r\n   * @param a Input tensor data\r\n   * @param axes The dimensions along which the Tensor will be reduced\r\n   * @param dims The input dimension.\r\n   * @param curAxisInd Index in axes specifying the current dimension along\r\n   *      which the tensor will be reduced\r\n   * @param pos The current index of element to perform operation\r\n   * @param op1 The operation to be performed on each element in the tensor\r\n   * @param op2 The operation to be performed between elements in the tensor\r\n   */\r\n  static calcReduceByAxis(\r\n      input: Tensor.NumberType, axes: number[], dims: number[], curAxisInd: number, pos: number,\r\n      op1: (b: number) => number, op2: (a: number, b: number) => number): number {\r\n    let res = 0;\r\n    if (curAxisInd >= axes.length) {\r\n      return op1(input[pos]);\r\n    }\r\n    const axis = axes[curAxisInd];\r\n    const step = axis >= dims.length ? 1 : ShapeUtil.size(dims.slice(axis + 1));\r\n    for (let i = 0; i < dims[axis]; i++) {\r\n      res = i === 0 ? ReduceUtil.calcReduceByAxis(input, axes, dims, curAxisInd + 1, pos, op1, op2) :\r\n                      op2(res, ReduceUtil.calcReduceByAxis(input, axes, dims, curAxisInd + 1, pos, op1, op2));\r\n      pos += step;\r\n    }\r\n    return res;\r\n  }\r\n\r\n  /**\r\n   * Calculate the expected shape of a reduce operation\r\n   * @param dims The input tensor dimension\r\n   * @param axes The dimensions along which the Tensor will be reduced\r\n   * @param keepdims If set to true, the axes which are reduced are left in the\r\n   *    result as dimensions with size one.\r\n   */\r\n  static calcReduceShape(dims: ReadonlyArray<number>, axes: ReadonlyArray<number>, keepDims: boolean): number[] {\r\n    const outputDims = dims.slice();\r\n    for (let i = 0; i < axes.length; i++) {\r\n      if (keepDims) {\r\n        outputDims[axes[i]] = 1;\r\n      } else {\r\n        outputDims[axes[i]] = 0;\r\n      }\r\n    }\r\n    return outputDims.filter(dim => dim !== 0);\r\n  }\r\n}\r\n\r\nexport class PoolConvUtil {\r\n  /**\r\n   * Adjust the kernel, strides, pads to correct rank. Set to default value if not present\r\n   * @param isGlobalOperator If true, perform global pooling.\r\n   * @param inputDims The input tensor dimension.\r\n   * @param kernelShape The size of the kernel along each axis.\r\n   * @param strides Stride along each axis.\r\n   * @param pads Padding for the beginning and ending along each axis.\r\n   */\r\n  static adjustPoolAttributes(\r\n      isGlobalOperator: boolean, inputDims: ReadonlyArray<number>, kernelShape: number[], strides: number[],\r\n      pads: number[]) {\r\n    if (!isGlobalOperator && kernelShape.length !== inputDims.length - 2) {\r\n      throw new Error(`length of specified kernel shapes should be 2 less than length of input dimensions`);\r\n    }\r\n\r\n    if (isGlobalOperator) {\r\n      // adjust kernel shape to cover the input dims\r\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\r\n        if (dim >= kernelShape.length) {\r\n          kernelShape.push(inputDims[dim + 2]);\r\n        } else {\r\n          kernelShape[dim] = inputDims[dim + 2];\r\n        }\r\n      }\r\n    }\r\n\r\n    // adjust strides length to match kernel shape length\r\n    for (let dim = 0; dim < kernelShape.length; dim++) {\r\n      if (dim < strides.length) {\r\n        if (strides[dim] < 0) {\r\n          throw new Error(`strides should be greater than or equal to 1`);\r\n        }\r\n      } else {\r\n        strides.push(1);\r\n      }\r\n    }\r\n\r\n    // adjust pads length to match 2 * kernel shape length\r\n    for (let dim = 0; dim < kernelShape.length * 2; dim++) {\r\n      if (dim < pads.length) {\r\n        if (pads[dim] < 0) {\r\n          throw new Error(`pad should be greater than or equal to 1`);\r\n        }\r\n      } else {\r\n        pads.push(0);\r\n      }\r\n    }\r\n\r\n    // sanity checks for values in kernel shapes and pads\r\n    for (let dim = 0; dim < kernelShape.length; dim++) {\r\n      if (kernelShape[dim] <= 0) {\r\n        throw new Error(`kernel shapes need to be greater than 0`);\r\n      }\r\n\r\n      if (pads[dim] >= kernelShape[dim] || pads[dim + kernelShape.length] >= kernelShape[dim]) {\r\n        throw new Error(`pads should be smaller than kernel`);\r\n      }\r\n    }\r\n  }\r\n\r\n  // adjust pad values based on 'autoPad' attribute\r\n  static adjustPadsBasedOnAutoPad(\r\n      inputDims: ReadonlyArray<number>, strides: number[], dilations: number[], kernelShape: number[], pads: number[],\r\n      autoPad?: string) {\r\n    if (!autoPad) {\r\n      return;\r\n    }\r\n\r\n    if (pads.length !== 2 * (inputDims.length - 2)) {\r\n      throw new Error('length of pads should be twice the length of data dimensions');\r\n    }\r\n\r\n    if (strides.length !== (inputDims.length - 2)) {\r\n      throw new Error('length of strides should be the length of data dimensions');\r\n    }\r\n\r\n    if (kernelShape.length !== (inputDims.length - 2)) {\r\n      throw new Error('length of kernel shapes should be the length of data dimensions');\r\n    }\r\n\r\n    for (let dim = 0; dim < inputDims.length - 2; dim++) {\r\n      PoolConvUtil.adjustPadAndReturnShape(\r\n          inputDims[dim + 2], strides[dim], dilations[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2,\r\n          autoPad);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate the output shape for Pool ops based on input attributes. (Should be used only for Pool ops)\r\n   * @param isGlobalOperator If true, perform global pooling.\r\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\r\n   * @param strides Stride along each axis.\r\n   * @param kernelShape The size of the kernel along each axis.\r\n   * @param pads Padding for the beginning and ending along each axis.\r\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\r\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\r\n   */\r\n  static computePoolOutputShape(\r\n      isGlobalOperator: boolean, inputDims: ReadonlyArray<number>, strides: number[], kernelShape: number[],\r\n      pads: number[], autoPad?: string): number[] {\r\n    if (inputDims.length <= 0) {\r\n      throw new Error(`input shape must be of size greater than 0`);\r\n    }\r\n\r\n    // Add batch size and number of channels of output\r\n    const outputDims = [inputDims[0], inputDims[1]];\r\n\r\n    // TODO: support dilations for pool operators\r\n    const dilations = new Array<number>(kernelShape.length).fill(1);\r\n\r\n    PoolConvUtil.computeShapeHelper(\r\n        isGlobalOperator, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\r\n    return outputDims;\r\n  }\r\n\r\n  /**\r\n   * Calculate the output shape for Conv op based on input attributes. (Should be used only for Conv op)\r\n   * @param inputDims The input tensor dimension. (inputs[0].dims)\r\n   * @param filterDims The filter tensor dimension. (inputs[1].dims)\r\n   * @param strides Stride along each axis.\r\n   * @param kernelShape The size of the kernel along each axis.\r\n   * @param pads Padding for the beginning and ending along each axis.\r\n   * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\r\n   *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID.\r\n   */\r\n  static computeConvOutputShape(\r\n      inputDims: ReadonlyArray<number>, filterDims: ReadonlyArray<number>, strides: number[], dilations: number[],\r\n      kernelShape: number[], pads: number[], autoPad?: string): number[] {\r\n    if (inputDims.length <= 0 || filterDims.length <= 0) {\r\n      throw new Error(`invalid input tensor dims or invalid filter tensor dims`);\r\n    }\r\n\r\n    // Add batch size and number of channels of output\r\n    const outputDims = [inputDims[0], filterDims[0]];\r\n\r\n    PoolConvUtil.computeShapeHelper(false, inputDims, outputDims, strides, dilations, kernelShape, pads, autoPad);\r\n    return outputDims;\r\n  }\r\n\r\n  // will compute output shapes for data dimensions ONLY (i.e.) no batch size and channels\r\n  // called by computePoolOutputShape() and computeConvOutputShape()\r\n  // adjust pads based on 'autoPad' attribute prior to shape computation\r\n  private static computeShapeHelper(\r\n      isGlobalOperator: boolean, inputDims: ReadonlyArray<number>, outputDims: number[], strides: ReadonlyArray<number>,\r\n      dilations: ReadonlyArray<number>, kernelShape: ReadonlyArray<number>, pads: number[], autoPad?: string) {\r\n    if (isGlobalOperator) {\r\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\r\n        outputDims.push(1);\r\n      }\r\n    } else {\r\n      for (let dim = 0; dim < inputDims.length - 2; dim++) {\r\n        outputDims.push(PoolConvUtil.adjustPadAndReturnShape(\r\n            inputDims[dim + 2], strides[dim], dilations[dim], kernelShape[dim], pads, dim, dim + inputDims.length - 2,\r\n            autoPad));\r\n      }\r\n    }\r\n  }\r\n\r\n  // helper for computeShapeHelper() and adjustPadsBasedOnAutoPad()\r\n  // adjusts pad value for given 'autoPad' string and computes output shape along a particular dimension\r\n  private static adjustPadAndReturnShape(\r\n      inSize: number, stride: number, dilation: number, kernel: number, pads: number[], padHeadIndex: number,\r\n      padTailIndex: number, autoPad?: string): number {\r\n    const dkernel = dilation * (kernel - 1) + 1;\r\n    if (autoPad && autoPad !== 'NOTSET') {\r\n      switch (autoPad) {\r\n        case 'VALID':\r\n          pads[padHeadIndex] = 0;\r\n          pads[padTailIndex] = 0;\r\n          return Math.floor(((inSize - dkernel) / stride) + 1);\r\n        case 'SAME_LOWER':\r\n        case 'SAME_UPPER':\r\n          if (dilation !== 1) {\r\n            throw new Error(`Dilation not supported for SAME_UPPER or SAME_LOWER`);\r\n          }\r\n          const legacyTargetSize = (inSize + stride - 1) / stride;\r\n          const padNeeded = (legacyTargetSize - 1) * stride + kernel - inSize;\r\n          pads[padHeadIndex] = (autoPad === 'SAME_LOWER') ? Math.floor((padNeeded + 1) / 2) : Math.floor(padNeeded / 2);\r\n          pads[padTailIndex] = padNeeded - pads[padHeadIndex];\r\n          return Math.floor(((inSize + padNeeded - kernel) / stride) + 1);\r\n        default:\r\n          throw new Error(`Unsupported AutoPad type`);\r\n      }\r\n    } else {\r\n      return Math.floor(((inSize + pads[padHeadIndex] + pads[padTailIndex] - dkernel) / stride) + 1);\r\n    }\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport Long from 'long';\r\nimport {onnx} from 'onnx-proto';\r\n\r\nimport {ProtoUtil, ShapeUtil} from './util';\r\n\r\nexport declare namespace Tensor {\r\n  export interface DataTypeMap {\r\n    bool: Uint8Array;\r\n    float32: Float32Array;\r\n    float64: Float64Array;\r\n    string: string[];\r\n    int8: Int8Array;\r\n    uint8: Uint8Array;\r\n    int16: Int16Array;\r\n    uint16: Uint16Array;\r\n    int32: Int32Array;\r\n    uint32: Uint32Array;\r\n  }\r\n\r\n  export type DataType = keyof DataTypeMap;\r\n\r\n  export type StringType = Tensor.DataTypeMap['string'];\r\n  export type BooleanType = Tensor.DataTypeMap['bool'];\r\n  export type IntegerType = Tensor.DataTypeMap['int8']|Tensor.DataTypeMap['uint8']|Tensor.DataTypeMap['int16']|\r\n                            Tensor.DataTypeMap['uint16']|Tensor.DataTypeMap['int32']|Tensor.DataTypeMap['uint32'];\r\n  export type FloatType = Tensor.DataTypeMap['float32']|Tensor.DataTypeMap['float64'];\r\n  export type NumberType = BooleanType|IntegerType|FloatType;\r\n\r\n  export interface Id {\r\n    // this field helps typescript to perform type check, comparing to use `Id` as an alias of object.\r\n    _tensorDataId_unused?: never;\r\n  }\r\n}\r\n\r\ntype TensorData = Tensor.DataTypeMap[Tensor.DataType];\r\n\r\ntype DataProvider = (id: Tensor.Id) => TensorData;\r\ntype AsyncDataProvider = (id: Tensor.Id) => Promise<TensorData>;\r\n\r\nexport class Tensor {\r\n  /**\r\n   * get the underlying tensor data\r\n   */\r\n  get data(): TensorData {\r\n    if (this.cache === undefined) {\r\n      const data = this.dataProvider!(this.dataId);\r\n      if (data.length !== this.size) {\r\n        throw new Error(`Length of data provided by the Data Provider is inconsistent with the dims of this Tensor.`);\r\n      }\r\n      this.cache = data;\r\n    }\r\n    return this.cache;\r\n  }\r\n\r\n  /**\r\n   * get the underlying string tensor data. Should only use when type is STRING\r\n   */\r\n  get stringData() {\r\n    if (this.type !== 'string') {\r\n      throw new TypeError(`data type is not string`);\r\n    }\r\n\r\n    return this.data as Tensor.StringType;\r\n  }\r\n\r\n  /**\r\n   * get the underlying integer tensor data. Should only use when type is one of the following: (UINT8, INT8, UINT16,\r\n   * INT16, INT32, UINT32, BOOL)\r\n   */\r\n  get integerData() {\r\n    switch (this.type) {\r\n      case 'uint8':\r\n      case 'int8':\r\n      case 'uint16':\r\n      case 'int16':\r\n      case 'int32':\r\n      case 'uint32':\r\n      case 'bool':\r\n        return this.data as Tensor.IntegerType;\r\n\r\n      default:\r\n        throw new TypeError(`data type is not integer (uint8, int8, uint16, int16, int32, uint32, bool)`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * get the underlying float tensor data. Should only use when type is one of the following: (FLOAT, DOUBLE)\r\n   */\r\n  get floatData() {\r\n    switch (this.type) {\r\n      case 'float32':\r\n      case 'float64':\r\n        return this.data as Tensor.FloatType;\r\n\r\n      default:\r\n        throw new TypeError(`data type is not float (float32, float64)`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * get the underlying number tensor data. Should only use when type is one of the following: (UINT8, INT8, UINT16,\r\n   * INT16, INT32, UINT32, BOOL, FLOAT, DOUBLE)\r\n   */\r\n  get numberData() {\r\n    if (this.type !== 'string') {\r\n      return this.data as Tensor.NumberType;\r\n    }\r\n    throw new TypeError(`type cannot be non-number (string)`);\r\n  }\r\n\r\n  /**\r\n   * get value of an element at the given indices\r\n   */\r\n  get(indices: ReadonlyArray<number>): Tensor.DataTypeMap[Tensor.DataType][number] {\r\n    return this.data[ShapeUtil.indicesToOffset(indices, this.strides)];\r\n  }\r\n\r\n  /**\r\n   * set value of an element at the given indices\r\n   */\r\n  set(indices: ReadonlyArray<number>, value: Tensor.DataTypeMap[Tensor.DataType][number]) {\r\n    this.data[ShapeUtil.indicesToOffset(indices, this.strides)] = value;\r\n  }\r\n\r\n  /**\r\n   * get the underlying tensor data asynchronously\r\n   */\r\n  async getData(): Promise<TensorData> {\r\n    // TBD: This function is designed for usage when any backend data provider offers a way to retrieve data in an\r\n    //      asynchronous way. should implement this function when enabling webgl async read data.\r\n\r\n    if (this.cache === undefined) {\r\n      this.cache = await this.asyncDataProvider!(this.dataId);\r\n    }\r\n    return this.cache;\r\n  }\r\n\r\n  /**\r\n   * get the number of elements in the tensor\r\n   */\r\n  public readonly size: number;\r\n\r\n  private _strides: ReadonlyArray<number>;\r\n  /**\r\n   * get the strides for each dimension\r\n   */\r\n  get strides(): ReadonlyArray<number> {\r\n    if (!this._strides) {\r\n      this._strides = ShapeUtil.computeStrides(this.dims);\r\n    }\r\n    return this._strides;\r\n  }\r\n\r\n  constructor(\r\n      /**\r\n       * get the dimensions of the tensor\r\n       */\r\n      public readonly dims: ReadonlyArray<number>,\r\n      /**\r\n       * get the type of the tensor\r\n       */\r\n      public readonly type: Tensor.DataType, private dataProvider?: DataProvider,\r\n      private asyncDataProvider?: AsyncDataProvider, private cache?: TensorData,\r\n      /**\r\n       * get the data ID that used to map to a tensor data\r\n       */\r\n      public readonly dataId: Tensor.Id = {}) {\r\n    this.size = ShapeUtil.validateDimsAndCalcSize(dims);\r\n    const size = this.size;\r\n    const empty = (dataProvider === undefined && asyncDataProvider === undefined && cache === undefined);\r\n\r\n    if (cache !== undefined) {\r\n      if (cache.length !== size) {\r\n        throw new RangeError(`Input dims doesn't match data length.`);\r\n      }\r\n    }\r\n\r\n    if (type === 'string') {\r\n      if (cache !== undefined && (!Array.isArray(cache) || !cache.every(i => typeof i === 'string'))) {\r\n        throw new TypeError(`cache should be a string array`);\r\n      }\r\n\r\n      if (empty) {\r\n        cache = new Array<string>(size);\r\n      }\r\n    } else {\r\n      if (cache !== undefined) {\r\n        const constructor = dataviewConstructor(type);\r\n        if (!(cache instanceof constructor)) {\r\n          throw new TypeError(`cache should be type ${constructor.name}`);\r\n        }\r\n      }\r\n\r\n      if (empty) {\r\n        const buf = new ArrayBuffer(size * sizeof(type));\r\n        this.cache = createView(buf, type);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Construct new Tensor from a ONNX Tensor object\r\n   * @param tensorProto the ONNX Tensor\r\n   */\r\n  static fromProto(tensorProto: onnx.ITensorProto): Tensor {\r\n    if (!tensorProto) {\r\n      throw new Error('cannot construct Value from an empty tensor');\r\n    }\r\n    const type = ProtoUtil.tensorDataTypeFromProto(tensorProto.dataType!);\r\n    const dims = ProtoUtil.tensorDimsFromProto(tensorProto.dims!);\r\n\r\n    const value = new Tensor(dims, type);\r\n\r\n    if (type === 'string') {\r\n      // When it's STRING type, the value should always be stored in field\r\n      // 'stringData'\r\n      tensorProto.stringData!.forEach((str, i) => {\r\n        const buf = Buffer.from(str.buffer, str.byteOffset, str.byteLength);\r\n        value.data[i] = buf.toString();\r\n      });\r\n\r\n    } else if (\r\n        tensorProto.rawData && typeof tensorProto.rawData.byteLength === 'number' &&\r\n        tensorProto.rawData.byteLength > 0) {\r\n      // NOT considering segment for now (IMPORTANT)\r\n\r\n      // populate value from rawData\r\n      const dataDest = value.data;\r\n      const dataSource =\r\n          new DataView(tensorProto.rawData.buffer, tensorProto.rawData.byteOffset, tensorProto.rawData.byteLength);\r\n      const elementSize = sizeofProto(tensorProto.dataType!);\r\n      const length = tensorProto.rawData.byteLength / elementSize;\r\n\r\n      if (tensorProto.rawData.byteLength % elementSize !== 0) {\r\n        throw new Error(`invalid buffer length`);\r\n      }\r\n      if (dataDest.length !== length) {\r\n        throw new Error(`buffer length mismatch`);\r\n      }\r\n\r\n      for (let i = 0; i < length; i++) {\r\n        const n = readProto(dataSource, tensorProto.dataType!, i * elementSize);\r\n        dataDest[i] = n;\r\n      }\r\n    } else {\r\n      // populate value from array\r\n      let array: Array<number|Long>;\r\n      switch (tensorProto.dataType) {\r\n        case onnx.TensorProto.DataType.FLOAT:\r\n          array = tensorProto.floatData!;\r\n          break;\r\n        case onnx.TensorProto.DataType.INT32:\r\n        case onnx.TensorProto.DataType.INT16:\r\n        case onnx.TensorProto.DataType.UINT16:\r\n        case onnx.TensorProto.DataType.INT8:\r\n        case onnx.TensorProto.DataType.UINT8:\r\n        case onnx.TensorProto.DataType.BOOL:\r\n          array = tensorProto.int32Data!;\r\n          break;\r\n        case onnx.TensorProto.DataType.INT64:\r\n          array = tensorProto.int64Data!;\r\n          break;\r\n        case onnx.TensorProto.DataType.DOUBLE:\r\n          array = tensorProto.doubleData!;\r\n          break;\r\n        case onnx.TensorProto.DataType.UINT32:\r\n        case onnx.TensorProto.DataType.UINT64:\r\n          array = tensorProto.uint64Data!;\r\n          break;\r\n        default:\r\n          // should never run here\r\n          throw new Error('unspecific error');\r\n      }\r\n\r\n      if (array === null || array === undefined) {\r\n        throw new Error('failed to populate data from a tensorproto value');\r\n      }\r\n\r\n      const data = value.data;\r\n      if (data.length !== array.length) {\r\n        throw new Error(`array length mismatch`);\r\n      }\r\n\r\n      for (let i = 0; i < array.length; i++) {\r\n        const element = array[i];\r\n        if (Long.isLong(element)) {\r\n          data[i] = longToNumber(element as Long, tensorProto.dataType);\r\n        } else {\r\n          data[i] = element as number;\r\n        }\r\n      }\r\n    }\r\n\r\n    return value;\r\n  }\r\n\r\n  /**\r\n   * Construct new Tensor from raw data\r\n   * @param data the raw data object. Should be a string array for 'string' tensor, and the corresponding typed array\r\n   * for other types of tensor.\r\n   * @param dims the dimensions of the tensor\r\n   * @param type the type of the tensor\r\n   */\r\n  static fromData(data: Tensor.DataTypeMap[Tensor.DataType], dims: ReadonlyArray<number>, type: Tensor.DataType) {\r\n    return new Tensor(dims, type, undefined, undefined, data);\r\n  }\r\n}\r\n\r\nfunction sizeof(type: Tensor.DataType): number {\r\n  switch (type) {\r\n    case 'bool':\r\n    case 'int8':\r\n    case 'uint8':\r\n      return 1;\r\n    case 'int16':\r\n    case 'uint16':\r\n      return 2;\r\n    case 'int32':\r\n    case 'uint32':\r\n    case 'float32':\r\n      return 4;\r\n    case 'float64':\r\n      return 8;\r\n    default:\r\n      throw new Error(`cannot calculate sizeof() on type ${type}`);\r\n  }\r\n}\r\n\r\nfunction sizeofProto(type: onnx.TensorProto.DataType): number {\r\n  switch (type) {\r\n    case onnx.TensorProto.DataType.UINT8:\r\n    case onnx.TensorProto.DataType.INT8:\r\n    case onnx.TensorProto.DataType.BOOL:\r\n      return 1;\r\n    case onnx.TensorProto.DataType.UINT16:\r\n    case onnx.TensorProto.DataType.INT16:\r\n      return 2;\r\n    case onnx.TensorProto.DataType.FLOAT:\r\n    case onnx.TensorProto.DataType.INT32:\r\n    case onnx.TensorProto.DataType.UINT32:\r\n      return 4;\r\n    case onnx.TensorProto.DataType.INT64:\r\n    case onnx.TensorProto.DataType.DOUBLE:\r\n    case onnx.TensorProto.DataType.UINT64:\r\n      return 8;\r\n    default:\r\n      throw new Error(`cannot calculate sizeof() on type ${onnx.TensorProto.DataType[type]}`);\r\n  }\r\n}\r\n\r\nfunction createView(dataBuffer: ArrayBuffer, type: Tensor.DataType) {\r\n  return new (dataviewConstructor(type))(dataBuffer);\r\n}\r\n\r\nfunction dataviewConstructor(type: Tensor.DataType) {\r\n  switch (type) {\r\n    case 'bool':\r\n    case 'uint8':\r\n      return Uint8Array;\r\n    case 'int8':\r\n      return Int8Array;\r\n    case 'int16':\r\n      return Int16Array;\r\n    case 'uint16':\r\n      return Uint16Array;\r\n    case 'int32':\r\n      return Int32Array;\r\n    case 'uint32':\r\n      return Uint32Array;\r\n    case 'float32':\r\n      return Float32Array;\r\n    case 'float64':\r\n      return Float64Array;\r\n    default:\r\n      // should never run to here\r\n      throw new Error('unspecified error');\r\n  }\r\n}\r\n\r\n// convert a long number to a 32-bit integer (cast-down)\r\nfunction longToNumber(i: Long, type: onnx.TensorProto.DataType): number {\r\n  // INT64, UINT32, UINT64\r\n  if (type === onnx.TensorProto.DataType.INT64) {\r\n    if (i.greaterThanOrEqual(2147483648) || i.lessThan(-2147483648)) {\r\n      throw new TypeError('int64 is not supported');\r\n    }\r\n  } else if (type === onnx.TensorProto.DataType.UINT32 || type === onnx.TensorProto.DataType.UINT64) {\r\n    if (i.greaterThanOrEqual(4294967296) || i.lessThan(0)) {\r\n      throw new TypeError('uint64 is not supported');\r\n    }\r\n  } else {\r\n    throw new TypeError(`not a LONG type: ${onnx.TensorProto.DataType[type]}`);\r\n  }\r\n\r\n  return i.toNumber();\r\n}\r\n\r\n// read one value from TensorProto\r\nfunction readProto(view: DataView, type: onnx.TensorProto.DataType, byteOffset: number): number {\r\n  switch (type) {\r\n    case onnx.TensorProto.DataType.BOOL:\r\n    case onnx.TensorProto.DataType.UINT8:\r\n      return view.getUint8(byteOffset);\r\n    case onnx.TensorProto.DataType.INT8:\r\n      return view.getInt8(byteOffset);\r\n    case onnx.TensorProto.DataType.UINT16:\r\n      return view.getUint16(byteOffset, true);\r\n    case onnx.TensorProto.DataType.INT16:\r\n      return view.getInt16(byteOffset, true);\r\n    case onnx.TensorProto.DataType.FLOAT:\r\n      return view.getFloat32(byteOffset, true);\r\n    case onnx.TensorProto.DataType.INT32:\r\n      return view.getInt32(byteOffset, true);\r\n    case onnx.TensorProto.DataType.UINT32:\r\n      return view.getUint32(byteOffset, true);\r\n    case onnx.TensorProto.DataType.INT64:\r\n      return longToNumber(\r\n          Long.fromBits(view.getUint32(byteOffset, true), view.getUint32(byteOffset + 4, true), false), type);\r\n    case onnx.TensorProto.DataType.DOUBLE:\r\n      return view.getFloat64(byteOffset, true);\r\n    case onnx.TensorProto.DataType.UINT64:\r\n      return longToNumber(\r\n          Long.fromBits(view.getUint32(byteOffset, true), view.getUint32(byteOffset + 4, true), true), type);\r\n    default:\r\n      throw new Error(`cannot read from DataView for type ${onnx.TensorProto.DataType[type]}`);\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * represent a version irrelevant abstraction of for GLSL source code\r\n */\r\nexport interface Glsl {\r\n  readonly version: string;\r\n  readonly attribute: string;\r\n  readonly varyingVertex: string;\r\n  readonly varyingFrag: string;\r\n  readonly texture2D: string;\r\n  readonly output: string;\r\n  readonly outputDeclaration: string;\r\n}\r\n\r\nconst GLSL_ES_2_0: Glsl = {\r\n  version: '',\r\n  attribute: 'attribute',\r\n  varyingVertex: 'varying',\r\n  varyingFrag: 'varying',\r\n  texture2D: 'texture2D',\r\n  output: 'gl_FragColor',\r\n  outputDeclaration: '',\r\n};\r\nconst GLSL_ES_3_0: Glsl = {\r\n  version: '#version 300 es',\r\n  attribute: 'in',\r\n  varyingVertex: 'out',\r\n  varyingFrag: 'in',\r\n  texture2D: 'texture',\r\n  output: 'outputColor',\r\n  outputDeclaration: 'out vec4 outputColor;',\r\n};\r\n\r\nexport function getGlsl(version: 1|2) {\r\n  return version === 1 ? GLSL_ES_2_0 : GLSL_ES_3_0;\r\n}\r\n\r\nexport function getVertexShaderSource(version: 1|2): string {\r\n  const glsl = getGlsl(version);\r\n  return `${glsl.version}\r\n      precision highp float;\r\n      ${glsl.attribute} vec3 position;\r\n      ${glsl.attribute} vec2 textureCoord;\r\n\r\n      ${glsl.varyingVertex} vec2 TexCoords;\r\n\r\n      void main()\r\n      {\r\n          gl_Position = vec4(position, 1.0);\r\n          TexCoords = textureCoord;\r\n      }`;\r\n}\r\n\r\nexport function getFragShaderPreamble(version: 1|2): string {\r\n  const glsl = getGlsl(version);\r\n  return `${glsl.version}\r\n    precision highp float;\r\n    precision highp int;\r\n    precision highp sampler2D;\r\n    ${glsl.varyingFrag} vec2 TexCoords;\r\n    ${glsl.outputDeclaration}\r\n\r\n    `;\r\n}\r\n\r\nexport function getDefaultFragShaderMain(version: 1|2, outputShapeLength: number): string {\r\n  const glsl = getGlsl(version);\r\n  return `\r\n  void main() {\r\n    int indices[${outputShapeLength}];\r\n    toVec(TexCoords, indices);\r\n    vec4 result = vec4(process(indices));\r\n    ${glsl.output} = result;\r\n  }\r\n  `;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nexport declare namespace Logger {\r\n  export interface SeverityTypeMap {\r\n    verbose: 'v';\r\n    info: 'i';\r\n    warning: 'w';\r\n    error: 'e';\r\n  }\r\n\r\n  export type Severity = keyof SeverityTypeMap;\r\n\r\n  export type Provider = 'none'|'console';\r\n\r\n  /**\r\n   * Logging config that used to control the behavior of logger\r\n   */\r\n  export interface Config {\r\n    /**\r\n     * Specify the logging provider. 'console' by default\r\n     */\r\n    provider?: Provider;\r\n    /**\r\n     * Specify the minimal logger serverity. 'info' by default\r\n     */\r\n    minimalSeverity?: Logger.Severity;\r\n    /**\r\n     * Whether to output date time in log. true by default\r\n     */\r\n    logDateTime?: boolean;\r\n    /**\r\n     * Whether to output source information (Not yet supported). false by default\r\n     */\r\n    logSourceLocation?: boolean;\r\n  }\r\n\r\n  export interface CategorizedLogger {\r\n    verbose(content: string): void;\r\n    info(content: string): void;\r\n    warning(content: string): void;\r\n    error(content: string): void;\r\n  }\r\n}\r\n\r\nexport interface Logger {\r\n  (category: string): Logger.CategorizedLogger;\r\n\r\n  verbose(content: string): void;\r\n  verbose(category: string, content: string): void;\r\n  info(content: string): void;\r\n  info(category: string, content: string): void;\r\n  warning(content: string): void;\r\n  warning(category: string, content: string): void;\r\n  error(content: string): void;\r\n  error(category: string, content: string): void;\r\n\r\n  /**\r\n   * Reset the logger configuration.\r\n   * @param config specify an optional default config\r\n   */\r\n  reset(config?: Logger.Config): void;\r\n  /**\r\n   * Set the logger's behavior on the given category\r\n   * @param category specify a category string. If '*' is specified, all previous configuration will be overwritten. If\r\n   * '' is specified, the default behavior will be updated.\r\n   * @param config the config object to indicate the logger's behavior\r\n   */\r\n  set(category: string, config: Logger.Config): void;\r\n}\r\n\r\ninterface LoggerProvider {\r\n  log(severity: Logger.Severity, content: string, category?: string): void;\r\n}\r\nclass NoOpLoggerProvider implements LoggerProvider {\r\n  log(severity: Logger.Severity, content: string, category?: string) {\r\n    // do nothing\r\n  }\r\n}\r\nclass ConsoleLoggerProvider implements LoggerProvider {\r\n  log(severity: Logger.Severity, content: string, category?: string) {\r\n    console.log(`${this.color(severity)} ${category ? '\\x1b[35m' + category + '\\x1b[0m ' : ''}${content}`);\r\n  }\r\n\r\n  private color(severity: Logger.Severity) {\r\n    switch (severity) {\r\n      case 'verbose':\r\n        return '\\x1b[34;40mv\\x1b[0m';\r\n      case 'info':\r\n        return '\\x1b[32mi\\x1b[0m';\r\n      case 'warning':\r\n        return '\\x1b[30;43mw\\x1b[0m';\r\n      case 'error':\r\n        return '\\x1b[31;40me\\x1b[0m';\r\n      default:\r\n        throw new Error(`unsupported severity: ${severity}`);\r\n    }\r\n  }\r\n}\r\n\r\nconst SEVERITY_VALUE = {\r\n  verbose: 1000,\r\n  info: 2000,\r\n  warning: 4000,\r\n  error: 5000\r\n};\r\n\r\nconst LOGGER_PROVIDER_MAP: {readonly [provider: string]: Readonly<LoggerProvider>} = {\r\n  ['none']: new NoOpLoggerProvider(),\r\n  ['console']: new ConsoleLoggerProvider()\r\n};\r\nconst LOGGER_DEFAULT_CONFIG = {\r\n  provider: 'console',\r\n  minimalSeverity: 'info',\r\n  logDateTime: true,\r\n  logSourceLocation: false\r\n};\r\nlet LOGGER_CONFIG_MAP:\r\n    {[category: string]: Readonly<Required<Logger.Config>>} = {['']: LOGGER_DEFAULT_CONFIG as Required<Logger.Config>};\r\n\r\nfunction log(category: string): Logger.CategorizedLogger;\r\nfunction log(severity: Logger.Severity, content: string): void;\r\nfunction log(severity: Logger.Severity, category: string, content: string): void;\r\nfunction log(severity: Logger.Severity, arg1: string, arg2?: string): void;\r\nfunction log(\r\n    arg0: string|Logger.Severity, arg1?: string, arg2?: string|number, arg3?: number): Logger.CategorizedLogger|void {\r\n  if (arg1 === undefined) {\r\n    // log(category: string): Logger.CategorizedLogger;\r\n    return createCategorizedLogger(arg0);\r\n  } else if (arg2 === undefined) {\r\n    // log(severity, content);\r\n    logInternal(arg0 as Logger.Severity, arg1, 1);\r\n  } else if (typeof arg2 === 'number' && arg3 === undefined) {\r\n    // log(severity, content, stack)\r\n    logInternal(arg0 as Logger.Severity, arg1, arg2);\r\n  } else if (typeof arg2 === 'string' && arg3 === undefined) {\r\n    // log(severity, category, content)\r\n    logInternal(arg0 as Logger.Severity, arg2, 1, arg1);\r\n  } else if (typeof arg2 === 'string' && typeof arg3 === 'number') {\r\n    // log(severity, category, content, stack)\r\n    logInternal(arg0 as Logger.Severity, arg2, arg3, arg1);\r\n  } else {\r\n    throw new TypeError('input is valid');\r\n  }\r\n}\r\n\r\nfunction createCategorizedLogger(category: string): Logger.CategorizedLogger {\r\n  return {\r\n    verbose: log.verbose.bind(null, category),\r\n    info: log.info.bind(null, category),\r\n    warning: log.warning.bind(null, category),\r\n    error: log.error.bind(null, category)\r\n  };\r\n}\r\n\r\n// NOTE: argument 'category' is put the last parameter beacause typescript\r\n// doesn't allow optional argument put in front of required argument. This\r\n// order is different from a usual logging API.\r\nfunction logInternal(severity: Logger.Severity, content: string, stack: number, category?: string) {\r\n  const config = LOGGER_CONFIG_MAP[category || ''] || LOGGER_CONFIG_MAP[''];\r\n  if (SEVERITY_VALUE[severity] < SEVERITY_VALUE[config.minimalSeverity]) {\r\n    return;\r\n  }\r\n\r\n  if (config.logDateTime) {\r\n    content = `${new Date().toISOString()}|${content}`;\r\n  }\r\n\r\n  if (config.logSourceLocation) {\r\n    // TODO: calculate source location from 'stack'\r\n  }\r\n\r\n  LOGGER_PROVIDER_MAP[config.provider].log(severity, content, category);\r\n}\r\n\r\n// tslint:disable-next-line:no-namespace\r\nnamespace log {\r\n  export function verbose(content: string): void;\r\n  export function verbose(category: string, content: string): void;\r\n  export function verbose(arg0: string, arg1?: string) {\r\n    log('verbose', arg0, arg1);\r\n  }\r\n  export function info(content: string): void;\r\n  export function info(category: string, content: string): void;\r\n  export function info(arg0: string, arg1?: string) {\r\n    log('info', arg0, arg1);\r\n  }\r\n  export function warning(content: string): void;\r\n  export function warning(category: string, content: string): void;\r\n  export function warning(arg0: string, arg1?: string) {\r\n    log('warning', arg0, arg1);\r\n  }\r\n  export function error(content: string): void;\r\n  export function error(category: string, content: string): void;\r\n  export function error(arg0: string, arg1?: string) {\r\n    log('error', arg0, arg1);\r\n  }\r\n\r\n  export function reset(config?: Logger.Config): void {\r\n    LOGGER_CONFIG_MAP = {};\r\n    // tslint:disable-next-line:no-backbone-get-set-outside-model\r\n    set('', config || {});\r\n  }\r\n  export function set(category: string, config: Logger.Config): void {\r\n    if (category === '*') {\r\n      reset(config);\r\n    } else {\r\n      const previousConfig = LOGGER_CONFIG_MAP[category] || LOGGER_DEFAULT_CONFIG;\r\n      LOGGER_CONFIG_MAP[category] = {\r\n        provider: config.provider || previousConfig.provider,\r\n        minimalSeverity: config.minimalSeverity || previousConfig.minimalSeverity,\r\n        logDateTime: (config.logDateTime === undefined) ? previousConfig.logDateTime : config.logDateTime,\r\n        logSourceLocation: (config.logSourceLocation === undefined) ? previousConfig.logSourceLocation :\r\n                                                                      config.logSourceLocation\r\n      };\r\n    }\r\n\r\n    // TODO: we want to support wildcard or regex?\r\n  }\r\n}\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const Logger: Logger = log;\r\n\r\nexport declare namespace Profiler {\r\n  export interface Config {\r\n    maxNumberEvents?: number;\r\n    flushBatchSize?: number;\r\n    flushIntervalInMilliseconds?: number;\r\n  }\r\n\r\n  export type EventCategory = 'session'|'node'|'op'|'backend';\r\n\r\n  export interface Event {\r\n    end(): void;\r\n  }\r\n}\r\n\r\nclass Event implements Profiler.Event {\r\n  constructor(\r\n      public category: Profiler.EventCategory, public name: string, public startTime: number,\r\n      private endCallback: (e: Event) => void) {}\r\n\r\n  end() {\r\n    this.endCallback(this);\r\n  }\r\n}\r\n\r\nclass EventRecord {\r\n  constructor(\r\n      public category: Profiler.EventCategory, public name: string, public startTime: number, public endTime: number) {}\r\n}\r\n\r\nexport class Profiler {\r\n  static create(config?: Profiler.Config): Profiler {\r\n    if (config === undefined) {\r\n      return new this();\r\n    }\r\n    return new this(config.maxNumberEvents, config.flushBatchSize, config.flushIntervalInMilliseconds);\r\n  }\r\n\r\n  private constructor(maxNumberEvents?: number, flushBatchSize?: number, flushIntervalInMilliseconds?: number) {\r\n    this._started = false;\r\n    this._maxNumberEvents = maxNumberEvents === undefined ? 10000 : maxNumberEvents;\r\n    this._flushBatchSize = flushBatchSize === undefined ? 10 : flushBatchSize;\r\n    this._flushIntervalInMilliseconds = flushIntervalInMilliseconds === undefined ? 5000 : flushIntervalInMilliseconds;\r\n  }\r\n\r\n  // start profiling\r\n  start() {\r\n    this._started = true;\r\n    this._timingEvents = [];\r\n    this._flushTime = now();\r\n    this._flushPointer = 0;\r\n  }\r\n\r\n  // stop profiling\r\n  stop() {\r\n    this._started = false;\r\n    for (; this._flushPointer < this._timingEvents.length; this._flushPointer++) {\r\n      this.logOneEvent(this._timingEvents[this._flushPointer]);\r\n    }\r\n  }\r\n\r\n  // create an event scope for the specific function\r\n  event<T>(category: Profiler.EventCategory, name: string, func: () => T): T;\r\n  event<T>(category: Profiler.EventCategory, name: string, func: () => Promise<T>): Promise<T>;\r\n\r\n  event<T>(category: Profiler.EventCategory, name: string, func: () => T | Promise<T>): T|Promise<T> {\r\n    const event = this._started ? this.begin(category, name) : undefined;\r\n    let isPromise = false;\r\n\r\n    try {\r\n      const res = func();\r\n\r\n      // we consider a then-able object is a promise\r\n      if (res && typeof (res as Promise<T>).then === 'function') {\r\n        isPromise = true;\r\n        return new Promise<T>((resolve, reject) => {\r\n          (res as Promise<T>)\r\n              .then(\r\n                  value => {  // fulfilled\r\n                    resolve(value);\r\n                    if (event) {\r\n                      event.end();\r\n                    }\r\n                  },\r\n                  reason => {  // rejected\r\n                    reject(reason);\r\n                    if (event) {\r\n                      event.end();\r\n                    }\r\n                  });\r\n        });\r\n      }\r\n\r\n      return res;\r\n\r\n    } finally {\r\n      if (!isPromise && event) {\r\n        event.end();\r\n      }\r\n    }\r\n  }\r\n\r\n  // begin an event\r\n  begin(category: Profiler.EventCategory, name: string): Event {\r\n    if (!this._started) {\r\n      throw new Error('profiler is not started yet');\r\n    }\r\n    const startTime = now();\r\n    this.flush(startTime);\r\n    return new Event(category, name, startTime, e => this.end(e));\r\n  }\r\n\r\n  // end the specific event\r\n  private end(event: Event) {\r\n    if (this._timingEvents.length < this._maxNumberEvents) {\r\n      const endTime = now();\r\n      this._timingEvents.push(new EventRecord(event.category, event.name, event.startTime, endTime));\r\n      this.flush(endTime);\r\n    }\r\n  }\r\n\r\n  private logOneEvent(event: EventRecord) {\r\n    Logger.verbose(\r\n        `Profiler.${event.category}`,\r\n        `${(event.endTime - event.startTime).toFixed(2)}ms on event '${event.name}' at ${event.endTime.toFixed(2)}`);\r\n  }\r\n\r\n  private flush(currentTime: number) {\r\n    if (this._timingEvents.length - this._flushPointer >= this._flushBatchSize ||\r\n        currentTime - this._flushTime >= this._flushIntervalInMilliseconds) {\r\n      // should flush when either batch size accumlated or interval elepsed\r\n\r\n      for (const previousPointer = this._flushPointer; this._flushPointer < previousPointer + this._flushBatchSize &&\r\n           this._flushPointer < this._timingEvents.length;\r\n           this._flushPointer++) {\r\n        this.logOneEvent(this._timingEvents[this._flushPointer]);\r\n      }\r\n\r\n      this._flushTime = now();\r\n    }\r\n  }\r\n\r\n  get started() {\r\n    return this._started;\r\n  }\r\n  private _started = false;\r\n  private _timingEvents: EventRecord[];\r\n\r\n  private readonly _maxNumberEvents: number;\r\n\r\n  private readonly _flushBatchSize: number;\r\n  private readonly _flushIntervalInMilliseconds: number;\r\n\r\n  private _flushTime: number;\r\n  private _flushPointer = 0;\r\n}\r\n\r\n/**\r\n * returns a number to represent the current timestamp in a resolution as high as possible.\r\n */\r\nexport const now = (typeof performance !== 'undefined' && performance.now) ? () => performance.now() : Date.now;\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Logger} from './instrument';\r\nimport * as bindingCore from './wasm-binding-core';\r\nimport {WasmCallArgument} from './wasm-binding-core';\r\n\r\nexport {WasmCallArgument} from './wasm-binding-core';\r\n\r\ninterface PerformanceData extends bindingCore.PerformanceData {\r\n  startTimeWorker?: number;\r\n  endTimeWorker?: number;\r\n}\r\n\r\nlet workers: Worker[];\r\nlet WORKER_NUMBER: number;\r\n\r\n// complete callback after\r\ntype CompleteCallbackType = (buffer: ArrayBuffer, perfData: PerformanceData) => void;\r\nlet completeCallbacks: CompleteCallbackType[][];\r\n\r\nlet initialized = false;\r\nlet initializing = false;\r\n\r\n/**\r\n * initialize the WASM instance.\r\n *\r\n * this function should be called before any other calls to methods in WasmBinding.\r\n */\r\nexport function init(numWorkers: number, initTimeout: number): Promise<void> {\r\n  if (initialized) {\r\n    return Promise.resolve();\r\n  }\r\n  if (initializing) {\r\n    throw new Error(`multiple calls to 'init()' detected.`);\r\n  }\r\n\r\n  initializing = true;\r\n  return new Promise<void>((resolve, reject) => {\r\n    // the timeout ID that used as a guard for rejecting binding init.\r\n    // we set the type of this variable to unknown because the return type of function 'setTimeout' is different\r\n    // in node.js (type Timeout) and browser (number)\r\n    let waitForBindingInitTimeoutId: unknown;\r\n    const clearWaitForBindingInit = () => {\r\n      if (waitForBindingInitTimeoutId !== undefined) {\r\n        // tslint:disable-next-line:no-any\r\n        clearTimeout(waitForBindingInitTimeoutId as any);\r\n        waitForBindingInitTimeoutId = undefined;\r\n      }\r\n    };\r\n\r\n    const onFulfilled = () => {\r\n      clearWaitForBindingInit();\r\n      resolve();\r\n      initializing = false;\r\n      initialized = true;\r\n    };\r\n    const onRejected = (err: unknown) => {\r\n      clearWaitForBindingInit();\r\n      reject(err);\r\n      initializing = false;\r\n    };\r\n\r\n    const bindingInitTask = bindingCore.init();\r\n    // a promise that gets rejected after 5s to work around the fact that\r\n    // there is an unrejected promise in the wasm glue logic file when\r\n    // it has some problem instantiating the wasm file\r\n    const rejectAfterTimeOutPromise = new Promise((resolve, reject) => {\r\n      waitForBindingInitTimeoutId = setTimeout(() => {\r\n        reject('Wasm init promise failed to be resolved within set timeout');\r\n      }, initTimeout);\r\n    });\r\n\r\n    // user requests positive number of workers\r\n    if (numWorkers > 0) {\r\n      Logger.verbose('WebAssembly-Workers', `User has requested ${numWorkers} Workers.`);\r\n      // check if environment supports usage of workers\r\n      if (areWebWorkersSupported()) {\r\n        Logger.verbose(\r\n            'WebAssembly-Workers', `Environment supports usage of Workers. Will spawn ${numWorkers} Workers`);\r\n        WORKER_NUMBER = numWorkers;\r\n      } else {\r\n        Logger.error('WebAssembly-Workers', 'Environment does not support usage of Workers. Will not spawn workers.');\r\n        WORKER_NUMBER = 0;\r\n      }\r\n    }\r\n\r\n    // user explicitly disables workers\r\n    else {\r\n      Logger.verbose('WebAssembly-Workers', 'User has disabled usage of Workers. Will not spawn workers.');\r\n      WORKER_NUMBER = 0;\r\n    }\r\n\r\n    const workerInitTasks = new Array<Promise<void>>(WORKER_NUMBER);\r\n    workers = new Array(WORKER_NUMBER);\r\n    completeCallbacks = new Array(WORKER_NUMBER);\r\n\r\n    for (let workerId = 0; workerId < WORKER_NUMBER; workerId++) {\r\n      const workerInitTask = new Promise<void>((resolveWorkerInit, rejectWorkerInit) => {\r\n        // tslint:disable-next-line\r\n        const worker = require('worker-loader?name=./onnx-worker.js!./worker/worker-main')() as Worker;\r\n        workers[workerId] = worker;\r\n        completeCallbacks[workerId] = [];\r\n        worker.onerror = e => {\r\n          Logger.error('WebAssembly-Workers', `worker-${workerId} ERR: ${e}`);\r\n          if (initialized) {\r\n            // TODO: we need error-handling logic\r\n          } else {\r\n            rejectWorkerInit();\r\n          }\r\n        };\r\n        worker.onmessage = e => {\r\n          if (e && e.data && e.data.type) {\r\n            if (e.data.type === 'init-success') {\r\n              resolveWorkerInit();\r\n            } else if (e.data.type === 'ccall') {\r\n              const perfData = e.data.perfData as PerformanceData;\r\n              completeCallbacks[workerId].shift()!(e.data.buffer as ArrayBuffer, perfData);\r\n            } else {\r\n              throw new Error(`unknown message type from worker: ${e.data.type}`);\r\n            }\r\n          } else {\r\n            throw new Error(`missing message type from worker`);\r\n          }\r\n        };\r\n      });\r\n      workerInitTasks[workerId] = workerInitTask;\r\n    }\r\n\r\n    // TODO: Fix this hack to work-around the fact that the Wasm binding instantiate promise\r\n    // is unrejected incase there is a fatal exception (missing wasm file for example)\r\n    // we impose a healthy timeout (should not affect core framework performance)\r\n    Promise.race([bindingInitTask, rejectAfterTimeOutPromise])\r\n        .then(\r\n            () => {\r\n              // Wasm init promise resolved\r\n              Promise.all(workerInitTasks)\r\n                  .then(\r\n                      // Wasm AND Web-worker init promises resolved. SUCCESS!!\r\n                      onFulfilled,\r\n                      // Wasm init promise resolved. Some (or all) web-worker init promises failed to be resolved.\r\n                      // PARTIAL SUCCESS. Use Wasm backend with no web-workers (best-effort).\r\n                      () => {\r\n                        Logger.warning(\r\n                            'WebAssembly-Workers',\r\n                            'Unable to get all requested workers initialized. Will use Wasm backend with 0 workers.');\r\n                        // TODO: need house-keeping logic to cull exisitng successfully initialized workers\r\n                        WORKER_NUMBER = 0;\r\n                        onFulfilled();\r\n                      });\r\n            },\r\n            // Wasm init promise failed to be resolved. COMPLETE FAILURE. Reject this init promise.\r\n            onRejected);\r\n  });\r\n}\r\n\r\n// Extending the WasmBinding class to deal with web-worker specific logic here\r\nexport class WasmBinding extends bindingCore.WasmBinding {\r\n  protected static instance?: WasmBinding;\r\n  static getInstance(): WasmBinding {\r\n    if (!WasmBinding.instance) {\r\n      WasmBinding.instance = new WasmBinding();\r\n    }\r\n    return WasmBinding.instance;\r\n  }\r\n  static get workerNumber() {\r\n    return WORKER_NUMBER;\r\n  }\r\n  ccallRemote(workerId: number, functionName: string, ...params: WasmCallArgument[]): Promise<PerformanceData> {\r\n    if (!initialized) {\r\n      throw new Error(`wasm not initialized. please ensure 'init()' is called.`);\r\n    }\r\n\r\n    if (workerId < 0 || workerId >= WORKER_NUMBER) {\r\n      throw new Error(`invalid worker ID ${workerId}. should be in range [0, ${WORKER_NUMBER})`);\r\n    }\r\n\r\n    const offset: number[] = [];\r\n    const size = WasmBinding.calculateOffsets(offset, params);\r\n    const buffer = new ArrayBuffer(size);\r\n    WasmBinding.ccallSerialize(new Uint8Array(buffer), offset, params);\r\n\r\n    const startTime = bindingCore.now();\r\n    workers[workerId].postMessage({type: 'ccall', func: functionName, buffer}, [buffer]);\r\n\r\n    return new Promise<PerformanceData>((resolve, reject) => {\r\n      completeCallbacks[workerId].push((buffer, perf) => {\r\n        perf.startTimeWorker = perf.startTime;\r\n        perf.endTimeWorker = perf.endTime;\r\n        perf.startTime = startTime;\r\n        perf.endTime = bindingCore.now();\r\n\r\n        WasmBinding.ccallDeserialize(new Uint8Array(buffer), offset, params);\r\n        resolve(perf);\r\n      });\r\n    });\r\n  }\r\n}\r\n\r\nfunction areWebWorkersSupported(): boolean {\r\n  // very simplistic check to make sure the environment supports usage of workers\r\n  // tslint:disable-next-line:no-any\r\n  if (typeof window !== 'undefined' && typeof (window as any).Worker !== 'undefined') {\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {ProgramInfo} from './types';\r\nimport {WebGLContext} from './webgl-context';\r\n\r\nexport enum FunctionType {\r\n  ValueBased,\r\n  Positional\r\n}\r\nexport interface GlslFunction<T extends FunctionType> {\r\n  body: string;\r\n  name: string;\r\n  type: T;\r\n}\r\nexport interface GlslValueFunction extends GlslFunction<FunctionType.ValueBased> {}\r\nexport interface GlslPositionalFunction extends GlslFunction<FunctionType.Positional> {\r\n  inputShape: ReadonlyArray<number>;\r\n  outputShape: ReadonlyArray<number>;\r\n}\r\n\r\nexport class GlslContext {\r\n  constructor(public glContext: WebGLContext, public programInfo: ProgramInfo) {}\r\n}\r\nexport abstract class GlslLib {\r\n  constructor(public context: GlslContext) {}\r\n  abstract getFunctions(): {[name: string]: GlslLibRoutine};\r\n  abstract getCustomTypes(): {[name: string]: string};\r\n}\r\n\r\n// abstraction to represent a GLSL library routine and it's dependencies\r\nexport class GlslLibRoutine {\r\n  constructor(public routineBody: string, public dependencies?: string[]) {}\r\n}\r\n\r\n// abstraction to represent a GLSL library routine and it's dependencies AS GRAPH Nodes\r\n// this level of abstraction is used to topologically sort routines before fragment shade inclusion\r\nexport class GlslLibRoutineNode {\r\n  dependencies: GlslLibRoutineNode[];\r\n  routineBody: string;\r\n  constructor(public name: string, routineBody?: string, dependencies?: GlslLibRoutineNode[]) {\r\n    if (dependencies) {\r\n      this.dependencies = dependencies;\r\n    } else {\r\n      this.dependencies = [];\r\n    }\r\n\r\n    if (routineBody) {\r\n      this.routineBody = routineBody;\r\n    }\r\n  }\r\n  addDependency(node: GlslLibRoutineNode) {\r\n    if (node) {\r\n      this.dependencies.push(node);\r\n    }\r\n  }\r\n}\r\n\r\n// topologically sort GLSL library routines (graph nodes abstraction) before shader script inclusion\r\nexport class TopologicalSortGlslRoutines {\r\n  static returnOrderedNodes(nodes: GlslLibRoutineNode[]): GlslLibRoutineNode[] {\r\n    if (!nodes || nodes.length === 0) {\r\n      return [];\r\n    }\r\n\r\n    if (nodes.length === 1) {\r\n      return nodes;\r\n    }\r\n\r\n    const cycleCheck = new Set<string>();\r\n    const alreadyTraversed = new Set<string>();\r\n    const result = new Array<GlslLibRoutineNode>();\r\n\r\n    this.createOrderedNodes(nodes, cycleCheck, alreadyTraversed, result);\r\n    return result;\r\n  }\r\n\r\n  private static createOrderedNodes(\r\n      graphNodes: GlslLibRoutineNode[], cycleCheck: Set<string>, alreadyTraversed: Set<string>,\r\n      result: GlslLibRoutineNode[]) {\r\n    for (let i = 0; i < graphNodes.length; ++i) {\r\n      this.dfsTraverse(graphNodes[i], cycleCheck, alreadyTraversed, result);\r\n    }\r\n  }\r\n\r\n  private static dfsTraverse(\r\n      root: GlslLibRoutineNode, cycleCheck: Set<string>, alreadyTraversed: Set<string>, result: GlslLibRoutineNode[]) {\r\n    // if this root has already been traversed return\r\n    if (!root || alreadyTraversed.has(root.name)) {\r\n      return;\r\n    }\r\n\r\n    // cyclic dependency has been detected\r\n    if (cycleCheck.has(root.name)) {\r\n      throw new Error(`Cyclic dependency detected. Can't topologically sort routines needed for shader.`);\r\n    }\r\n\r\n    // hold this node to detect cycles if any\r\n    cycleCheck.add(root.name);\r\n\r\n    // traverse children in a dfs fashion\r\n    const dependencies = root.dependencies;\r\n    if (dependencies && dependencies.length > 0) {\r\n      for (let i = 0; i < dependencies.length; ++i) {\r\n        this.dfsTraverse(dependencies[i], cycleCheck, alreadyTraversed, result);\r\n      }\r\n    }\r\n\r\n    // add to result holder\r\n    result.push(root);\r\n\r\n    // mark this node as traversed so that we don't traverse from this again\r\n    alreadyTraversed.add(root.name);\r\n\r\n    // release the hold\r\n    cycleCheck.delete(root.name);\r\n  }\r\n}\r\n","\"use strict\";\r\nvar util = exports;\r\n\r\n// used to return a Promise where callback is omitted\r\nutil.asPromise = require(\"@protobufjs/aspromise\");\r\n\r\n// converts to / from base64 encoded strings\r\nutil.base64 = require(\"@protobufjs/base64\");\r\n\r\n// base class of rpc.Service\r\nutil.EventEmitter = require(\"@protobufjs/eventemitter\");\r\n\r\n// float handling accross browsers\r\nutil.float = require(\"@protobufjs/float\");\r\n\r\n// requires modules optionally and hides the call from bundlers\r\nutil.inquire = require(\"@protobufjs/inquire\");\r\n\r\n// converts to / from utf8 encoded strings\r\nutil.utf8 = require(\"@protobufjs/utf8\");\r\n\r\n// provides a node-like buffer pool in the browser\r\nutil.pool = require(\"@protobufjs/pool\");\r\n\r\n// utility to work with the low and high bits of a 64 bit value\r\nutil.LongBits = require(\"./longbits\");\r\n\r\n// global object reference\r\nutil.global = typeof window !== \"undefined\" && window\r\n           || typeof global !== \"undefined\" && global\r\n           || typeof self   !== \"undefined\" && self\r\n           || this; // eslint-disable-line no-invalid-this\r\n\r\n/**\r\n * An immuable empty array.\r\n * @memberof util\r\n * @type {Array.<*>}\r\n * @const\r\n */\r\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\r\n\r\n/**\r\n * An immutable empty object.\r\n * @type {Object}\r\n * @const\r\n */\r\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\r\n\r\n/**\r\n * Whether running within node or not.\r\n * @memberof util\r\n * @type {boolean}\r\n * @const\r\n */\r\nutil.isNode = Boolean(util.global.process && util.global.process.versions && util.global.process.versions.node);\r\n\r\n/**\r\n * Tests if the specified value is an integer.\r\n * @function\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is an integer\r\n */\r\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\r\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a string.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a string\r\n */\r\nutil.isString = function isString(value) {\r\n    return typeof value === \"string\" || value instanceof String;\r\n};\r\n\r\n/**\r\n * Tests if the specified value is a non-null object.\r\n * @param {*} value Value to test\r\n * @returns {boolean} `true` if the value is a non-null object\r\n */\r\nutil.isObject = function isObject(value) {\r\n    return value && typeof value === \"object\";\r\n};\r\n\r\n/**\r\n * Checks if a property on a message is considered to be present.\r\n * This is an alias of {@link util.isSet}.\r\n * @function\r\n * @param {Object} obj Plain object or message instance\r\n * @param {string} prop Property name\r\n * @returns {boolean} `true` if considered to be present, otherwise `false`\r\n */\r\nutil.isset =\r\n\r\n/**\r\n * Checks if a property on a message is considered to be present.\r\n * @param {Object} obj Plain object or message instance\r\n * @param {string} prop Property name\r\n * @returns {boolean} `true` if considered to be present, otherwise `false`\r\n */\r\nutil.isSet = function isSet(obj, prop) {\r\n    var value = obj[prop];\r\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\r\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\r\n    return false;\r\n};\r\n\r\n/**\r\n * Any compatible Buffer instance.\r\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\r\n * @interface Buffer\r\n * @extends Uint8Array\r\n */\r\n\r\n/**\r\n * Node's Buffer class if available.\r\n * @type {Constructor<Buffer>}\r\n */\r\nutil.Buffer = (function() {\r\n    try {\r\n        var Buffer = util.inquire(\"buffer\").Buffer;\r\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\r\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\r\n    } catch (e) {\r\n        /* istanbul ignore next */\r\n        return null;\r\n    }\r\n})();\r\n\r\n// Internal alias of or polyfull for Buffer.from.\r\nutil._Buffer_from = null;\r\n\r\n// Internal alias of or polyfill for Buffer.allocUnsafe.\r\nutil._Buffer_allocUnsafe = null;\r\n\r\n/**\r\n * Creates a new buffer of whatever type supported by the environment.\r\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\r\n * @returns {Uint8Array|Buffer} Buffer\r\n */\r\nutil.newBuffer = function newBuffer(sizeOrArray) {\r\n    /* istanbul ignore next */\r\n    return typeof sizeOrArray === \"number\"\r\n        ? util.Buffer\r\n            ? util._Buffer_allocUnsafe(sizeOrArray)\r\n            : new util.Array(sizeOrArray)\r\n        : util.Buffer\r\n            ? util._Buffer_from(sizeOrArray)\r\n            : typeof Uint8Array === \"undefined\"\r\n                ? sizeOrArray\r\n                : new Uint8Array(sizeOrArray);\r\n};\r\n\r\n/**\r\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\r\n * @type {Constructor<Uint8Array>}\r\n */\r\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\r\n\r\n/**\r\n * Any compatible Long instance.\r\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\r\n * @interface Long\r\n * @property {number} low Low bits\r\n * @property {number} high High bits\r\n * @property {boolean} unsigned Whether unsigned or not\r\n */\r\n\r\n/**\r\n * Long.js's Long class if available.\r\n * @type {Constructor<Long>}\r\n */\r\nutil.Long = /* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long\r\n         || /* istanbul ignore next */ util.global.Long\r\n         || util.inquire(\"long\");\r\n\r\n/**\r\n * Regular expression used to verify 2 bit (`bool`) map keys.\r\n * @type {RegExp}\r\n * @const\r\n */\r\nutil.key2Re = /^true|false|0|1$/;\r\n\r\n/**\r\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\r\n * @type {RegExp}\r\n * @const\r\n */\r\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\r\n\r\n/**\r\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\r\n * @type {RegExp}\r\n * @const\r\n */\r\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\r\n\r\n/**\r\n * Converts a number or long to an 8 characters long hash string.\r\n * @param {Long|number} value Value to convert\r\n * @returns {string} Hash\r\n */\r\nutil.longToHash = function longToHash(value) {\r\n    return value\r\n        ? util.LongBits.from(value).toHash()\r\n        : util.LongBits.zeroHash;\r\n};\r\n\r\n/**\r\n * Converts an 8 characters long hash string to a long or number.\r\n * @param {string} hash Hash\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long|number} Original value\r\n */\r\nutil.longFromHash = function longFromHash(hash, unsigned) {\r\n    var bits = util.LongBits.fromHash(hash);\r\n    if (util.Long)\r\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\r\n    return bits.toNumber(Boolean(unsigned));\r\n};\r\n\r\n/**\r\n * Merges the properties of the source object into the destination object.\r\n * @memberof util\r\n * @param {Object.<string,*>} dst Destination object\r\n * @param {Object.<string,*>} src Source object\r\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\r\n * @returns {Object.<string,*>} Destination object\r\n */\r\nfunction merge(dst, src, ifNotSet) { // used by converters\r\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\r\n        if (dst[keys[i]] === undefined || !ifNotSet)\r\n            dst[keys[i]] = src[keys[i]];\r\n    return dst;\r\n}\r\n\r\nutil.merge = merge;\r\n\r\n/**\r\n * Converts the first character of a string to lower case.\r\n * @param {string} str String to convert\r\n * @returns {string} Converted string\r\n */\r\nutil.lcFirst = function lcFirst(str) {\r\n    return str.charAt(0).toLowerCase() + str.substring(1);\r\n};\r\n\r\n/**\r\n * Creates a custom error constructor.\r\n * @memberof util\r\n * @param {string} name Error name\r\n * @returns {Constructor<Error>} Custom error constructor\r\n */\r\nfunction newError(name) {\r\n\r\n    function CustomError(message, properties) {\r\n\r\n        if (!(this instanceof CustomError))\r\n            return new CustomError(message, properties);\r\n\r\n        // Error.call(this, message);\r\n        // ^ just returns a new error instance because the ctor can be called as a function\r\n\r\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\r\n\r\n        /* istanbul ignore next */\r\n        if (Error.captureStackTrace) // node\r\n            Error.captureStackTrace(this, CustomError);\r\n        else\r\n            Object.defineProperty(this, \"stack\", { value: (new Error()).stack || \"\" });\r\n\r\n        if (properties)\r\n            merge(this, properties);\r\n    }\r\n\r\n    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;\r\n\r\n    Object.defineProperty(CustomError.prototype, \"name\", { get: function() { return name; } });\r\n\r\n    CustomError.prototype.toString = function toString() {\r\n        return this.name + \": \" + this.message;\r\n    };\r\n\r\n    return CustomError;\r\n}\r\n\r\nutil.newError = newError;\r\n\r\n/**\r\n * Constructs a new protocol error.\r\n * @classdesc Error subclass indicating a protocol specifc error.\r\n * @memberof util\r\n * @extends Error\r\n * @template T extends Message<T>\r\n * @constructor\r\n * @param {string} message Error message\r\n * @param {Object.<string,*>} [properties] Additional properties\r\n * @example\r\n * try {\r\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\r\n * } catch (e) {\r\n *     if (e instanceof ProtocolError && e.instance)\r\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\r\n * }\r\n */\r\nutil.ProtocolError = newError(\"ProtocolError\");\r\n\r\n/**\r\n * So far decoded message instance.\r\n * @name util.ProtocolError#instance\r\n * @type {Message<T>}\r\n */\r\n\r\n/**\r\n * A OneOf getter as returned by {@link util.oneOfGetter}.\r\n * @typedef OneOfGetter\r\n * @type {function}\r\n * @returns {string|undefined} Set field name, if any\r\n */\r\n\r\n/**\r\n * Builds a getter for a oneof's present field name.\r\n * @param {string[]} fieldNames Field names\r\n * @returns {OneOfGetter} Unbound getter\r\n */\r\nutil.oneOfGetter = function getOneOf(fieldNames) {\r\n    var fieldMap = {};\r\n    for (var i = 0; i < fieldNames.length; ++i)\r\n        fieldMap[fieldNames[i]] = 1;\r\n\r\n    /**\r\n     * @returns {string|undefined} Set field name, if any\r\n     * @this Object\r\n     * @ignore\r\n     */\r\n    return function() { // eslint-disable-line consistent-return\r\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\r\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\r\n                return keys[i];\r\n    };\r\n};\r\n\r\n/**\r\n * A OneOf setter as returned by {@link util.oneOfSetter}.\r\n * @typedef OneOfSetter\r\n * @type {function}\r\n * @param {string|undefined} value Field name\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Builds a setter for a oneof's present field name.\r\n * @param {string[]} fieldNames Field names\r\n * @returns {OneOfSetter} Unbound setter\r\n */\r\nutil.oneOfSetter = function setOneOf(fieldNames) {\r\n\r\n    /**\r\n     * @param {string} name Field name\r\n     * @returns {undefined}\r\n     * @this Object\r\n     * @ignore\r\n     */\r\n    return function(name) {\r\n        for (var i = 0; i < fieldNames.length; ++i)\r\n            if (fieldNames[i] !== name)\r\n                delete this[fieldNames[i]];\r\n    };\r\n};\r\n\r\n/**\r\n * Default conversion options used for {@link Message#toJSON} implementations.\r\n *\r\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\r\n *\r\n * - Longs become strings\r\n * - Enums become string keys\r\n * - Bytes become base64 encoded strings\r\n * - (Sub-)Messages become plain objects\r\n * - Maps become plain objects with all string keys\r\n * - Repeated fields become arrays\r\n * - NaN and Infinity for float and double fields become strings\r\n *\r\n * @type {IConversionOptions}\r\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\r\n */\r\nutil.toJSONOptions = {\r\n    longs: String,\r\n    enums: String,\r\n    bytes: String,\r\n    json: true\r\n};\r\n\r\n// Sets up buffer utility according to the environment (called in index-minimal)\r\nutil._configure = function() {\r\n    var Buffer = util.Buffer;\r\n    /* istanbul ignore if */\r\n    if (!Buffer) {\r\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\r\n        return;\r\n    }\r\n    // because node 4.x buffers are incompatible & immutable\r\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\r\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\r\n        /* istanbul ignore next */\r\n        function Buffer_from(value, encoding) {\r\n            return new Buffer(value, encoding);\r\n        };\r\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\r\n        /* istanbul ignore next */\r\n        function Buffer_allocUnsafe(size) {\r\n            return new Buffer(size);\r\n        };\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Attribute} from './attribute';\r\nimport {InferenceHandler} from './backend';\r\nimport {Tensor} from './tensor';\r\n\r\nexport interface Operator {\r\n  initialize(attributes: Attribute): void;\r\n  checkInputs(inputs: Tensor[]): boolean;\r\n  run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n}\r\n\r\nexport const NUMBER_TYPES: ReadonlyArray<Tensor.DataType> =\r\n    ['float32', 'float64', 'int32', 'int16', 'int8', 'uint16', 'uint32', 'uint8'];\r\nexport const INT_TYPES: ReadonlyArray<Tensor.DataType> = ['int32', 'int16', 'int8', 'uint16', 'uint32', 'uint8'];\r\nexport const FLOAT_TYPES: ReadonlyArray<Tensor.DataType> = ['float32', 'float64'];\r\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal\");\n\n// Common aliases\nvar $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\n$root.onnx = (function() {\n\n    /**\n     * Namespace onnx.\n     * @exports onnx\n     * @namespace\n     */\n    var onnx = {};\n\n    /**\n     * Version enum.\n     * @name onnx.Version\n     * @enum {string}\n     * @property {number} _START_VERSION=0 _START_VERSION value\n     * @property {number} IR_VERSION_2017_10_10=1 IR_VERSION_2017_10_10 value\n     * @property {number} IR_VERSION_2017_10_30=2 IR_VERSION_2017_10_30 value\n     * @property {number} IR_VERSION_2017_11_3=3 IR_VERSION_2017_11_3 value\n     * @property {number} IR_VERSION_2019_1_22=4 IR_VERSION_2019_1_22 value\n     * @property {number} IR_VERSION=5 IR_VERSION value\n     */\n    onnx.Version = (function() {\n        var valuesById = {}, values = Object.create(valuesById);\n        values[valuesById[0] = \"_START_VERSION\"] = 0;\n        values[valuesById[1] = \"IR_VERSION_2017_10_10\"] = 1;\n        values[valuesById[2] = \"IR_VERSION_2017_10_30\"] = 2;\n        values[valuesById[3] = \"IR_VERSION_2017_11_3\"] = 3;\n        values[valuesById[4] = \"IR_VERSION_2019_1_22\"] = 4;\n        values[valuesById[5] = \"IR_VERSION\"] = 5;\n        return values;\n    })();\n\n    onnx.AttributeProto = (function() {\n\n        /**\n         * Properties of an AttributeProto.\n         * @memberof onnx\n         * @interface IAttributeProto\n         * @property {string|null} [name] AttributeProto name\n         * @property {string|null} [refAttrName] AttributeProto refAttrName\n         * @property {string|null} [docString] AttributeProto docString\n         * @property {onnx.AttributeProto.AttributeType|null} [type] AttributeProto type\n         * @property {number|null} [f] AttributeProto f\n         * @property {number|Long|null} [i] AttributeProto i\n         * @property {Uint8Array|null} [s] AttributeProto s\n         * @property {onnx.ITensorProto|null} [t] AttributeProto t\n         * @property {onnx.IGraphProto|null} [g] AttributeProto g\n         * @property {Array.<number>|null} [floats] AttributeProto floats\n         * @property {Array.<number|Long>|null} [ints] AttributeProto ints\n         * @property {Array.<Uint8Array>|null} [strings] AttributeProto strings\n         * @property {Array.<onnx.ITensorProto>|null} [tensors] AttributeProto tensors\n         * @property {Array.<onnx.IGraphProto>|null} [graphs] AttributeProto graphs\n         */\n\n        /**\n         * Constructs a new AttributeProto.\n         * @memberof onnx\n         * @classdesc Represents an AttributeProto.\n         * @implements IAttributeProto\n         * @constructor\n         * @param {onnx.IAttributeProto=} [properties] Properties to set\n         */\n        function AttributeProto(properties) {\n            this.floats = [];\n            this.ints = [];\n            this.strings = [];\n            this.tensors = [];\n            this.graphs = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * AttributeProto name.\n         * @member {string} name\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.name = \"\";\n\n        /**\n         * AttributeProto refAttrName.\n         * @member {string} refAttrName\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.refAttrName = \"\";\n\n        /**\n         * AttributeProto docString.\n         * @member {string} docString\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.docString = \"\";\n\n        /**\n         * AttributeProto type.\n         * @member {onnx.AttributeProto.AttributeType} type\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.type = 0;\n\n        /**\n         * AttributeProto f.\n         * @member {number} f\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.f = 0;\n\n        /**\n         * AttributeProto i.\n         * @member {number|Long} i\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.i = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * AttributeProto s.\n         * @member {Uint8Array} s\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.s = $util.newBuffer([]);\n\n        /**\n         * AttributeProto t.\n         * @member {onnx.ITensorProto|null|undefined} t\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.t = null;\n\n        /**\n         * AttributeProto g.\n         * @member {onnx.IGraphProto|null|undefined} g\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.g = null;\n\n        /**\n         * AttributeProto floats.\n         * @member {Array.<number>} floats\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.floats = $util.emptyArray;\n\n        /**\n         * AttributeProto ints.\n         * @member {Array.<number|Long>} ints\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.ints = $util.emptyArray;\n\n        /**\n         * AttributeProto strings.\n         * @member {Array.<Uint8Array>} strings\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.strings = $util.emptyArray;\n\n        /**\n         * AttributeProto tensors.\n         * @member {Array.<onnx.ITensorProto>} tensors\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.tensors = $util.emptyArray;\n\n        /**\n         * AttributeProto graphs.\n         * @member {Array.<onnx.IGraphProto>} graphs\n         * @memberof onnx.AttributeProto\n         * @instance\n         */\n        AttributeProto.prototype.graphs = $util.emptyArray;\n\n        /**\n         * Creates a new AttributeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto=} [properties] Properties to set\n         * @returns {onnx.AttributeProto} AttributeProto instance\n         */\n        AttributeProto.create = function create(properties) {\n            return new AttributeProto(properties);\n        };\n\n        /**\n         * Encodes the specified AttributeProto message. Does not implicitly {@link onnx.AttributeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto} message AttributeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AttributeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                writer.uint32(/* id 2, wireType 5 =*/21).float(message.f);\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).int64(message.i);\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).bytes(message.s);\n            if (message.t != null && message.hasOwnProperty(\"t\"))\n                $root.onnx.TensorProto.encode(message.t, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.g != null && message.hasOwnProperty(\"g\"))\n                $root.onnx.GraphProto.encode(message.g, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n            if (message.floats != null && message.floats.length) {\n                writer.uint32(/* id 7, wireType 2 =*/58).fork();\n                for (var i = 0; i < message.floats.length; ++i)\n                    writer.float(message.floats[i]);\n                writer.ldelim();\n            }\n            if (message.ints != null && message.ints.length) {\n                writer.uint32(/* id 8, wireType 2 =*/66).fork();\n                for (var i = 0; i < message.ints.length; ++i)\n                    writer.int64(message.ints[i]);\n                writer.ldelim();\n            }\n            if (message.strings != null && message.strings.length)\n                for (var i = 0; i < message.strings.length; ++i)\n                    writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.strings[i]);\n            if (message.tensors != null && message.tensors.length)\n                for (var i = 0; i < message.tensors.length; ++i)\n                    $root.onnx.TensorProto.encode(message.tensors[i], writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();\n            if (message.graphs != null && message.graphs.length)\n                for (var i = 0; i < message.graphs.length; ++i)\n                    $root.onnx.GraphProto.encode(message.graphs[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 13, wireType 2 =*/106).string(message.docString);\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                writer.uint32(/* id 20, wireType 0 =*/160).int32(message.type);\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                writer.uint32(/* id 21, wireType 2 =*/170).string(message.refAttrName);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified AttributeProto message, length delimited. Does not implicitly {@link onnx.AttributeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.IAttributeProto} message AttributeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        AttributeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an AttributeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.AttributeProto} AttributeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AttributeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.AttributeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.name = reader.string();\n                    break;\n                case 21:\n                    message.refAttrName = reader.string();\n                    break;\n                case 13:\n                    message.docString = reader.string();\n                    break;\n                case 20:\n                    message.type = reader.int32();\n                    break;\n                case 2:\n                    message.f = reader.float();\n                    break;\n                case 3:\n                    message.i = reader.int64();\n                    break;\n                case 4:\n                    message.s = reader.bytes();\n                    break;\n                case 5:\n                    message.t = $root.onnx.TensorProto.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.g = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                    break;\n                case 7:\n                    if (!(message.floats && message.floats.length))\n                        message.floats = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.floats.push(reader.float());\n                    } else\n                        message.floats.push(reader.float());\n                    break;\n                case 8:\n                    if (!(message.ints && message.ints.length))\n                        message.ints = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.ints.push(reader.int64());\n                    } else\n                        message.ints.push(reader.int64());\n                    break;\n                case 9:\n                    if (!(message.strings && message.strings.length))\n                        message.strings = [];\n                    message.strings.push(reader.bytes());\n                    break;\n                case 10:\n                    if (!(message.tensors && message.tensors.length))\n                        message.tensors = [];\n                    message.tensors.push($root.onnx.TensorProto.decode(reader, reader.uint32()));\n                    break;\n                case 11:\n                    if (!(message.graphs && message.graphs.length))\n                        message.graphs = [];\n                    message.graphs.push($root.onnx.GraphProto.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an AttributeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.AttributeProto} AttributeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        AttributeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an AttributeProto message.\n         * @function verify\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        AttributeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                if (!$util.isString(message.refAttrName))\n                    return \"refAttrName: string expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                switch (message.type) {\n                default:\n                    return \"type: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n                case 6:\n                case 7:\n                case 8:\n                case 9:\n                case 10:\n                    break;\n                }\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                if (typeof message.f !== \"number\")\n                    return \"f: number expected\";\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                if (!$util.isInteger(message.i) && !(message.i && $util.isInteger(message.i.low) && $util.isInteger(message.i.high)))\n                    return \"i: integer|Long expected\";\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                if (!(message.s && typeof message.s.length === \"number\" || $util.isString(message.s)))\n                    return \"s: buffer expected\";\n            if (message.t != null && message.hasOwnProperty(\"t\")) {\n                var error = $root.onnx.TensorProto.verify(message.t);\n                if (error)\n                    return \"t.\" + error;\n            }\n            if (message.g != null && message.hasOwnProperty(\"g\")) {\n                var error = $root.onnx.GraphProto.verify(message.g);\n                if (error)\n                    return \"g.\" + error;\n            }\n            if (message.floats != null && message.hasOwnProperty(\"floats\")) {\n                if (!Array.isArray(message.floats))\n                    return \"floats: array expected\";\n                for (var i = 0; i < message.floats.length; ++i)\n                    if (typeof message.floats[i] !== \"number\")\n                        return \"floats: number[] expected\";\n            }\n            if (message.ints != null && message.hasOwnProperty(\"ints\")) {\n                if (!Array.isArray(message.ints))\n                    return \"ints: array expected\";\n                for (var i = 0; i < message.ints.length; ++i)\n                    if (!$util.isInteger(message.ints[i]) && !(message.ints[i] && $util.isInteger(message.ints[i].low) && $util.isInteger(message.ints[i].high)))\n                        return \"ints: integer|Long[] expected\";\n            }\n            if (message.strings != null && message.hasOwnProperty(\"strings\")) {\n                if (!Array.isArray(message.strings))\n                    return \"strings: array expected\";\n                for (var i = 0; i < message.strings.length; ++i)\n                    if (!(message.strings[i] && typeof message.strings[i].length === \"number\" || $util.isString(message.strings[i])))\n                        return \"strings: buffer[] expected\";\n            }\n            if (message.tensors != null && message.hasOwnProperty(\"tensors\")) {\n                if (!Array.isArray(message.tensors))\n                    return \"tensors: array expected\";\n                for (var i = 0; i < message.tensors.length; ++i) {\n                    var error = $root.onnx.TensorProto.verify(message.tensors[i]);\n                    if (error)\n                        return \"tensors.\" + error;\n                }\n            }\n            if (message.graphs != null && message.hasOwnProperty(\"graphs\")) {\n                if (!Array.isArray(message.graphs))\n                    return \"graphs: array expected\";\n                for (var i = 0; i < message.graphs.length; ++i) {\n                    var error = $root.onnx.GraphProto.verify(message.graphs[i]);\n                    if (error)\n                        return \"graphs.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates an AttributeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.AttributeProto} AttributeProto\n         */\n        AttributeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.AttributeProto)\n                return object;\n            var message = new $root.onnx.AttributeProto();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.refAttrName != null)\n                message.refAttrName = String(object.refAttrName);\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            switch (object.type) {\n            case \"UNDEFINED\":\n            case 0:\n                message.type = 0;\n                break;\n            case \"FLOAT\":\n            case 1:\n                message.type = 1;\n                break;\n            case \"INT\":\n            case 2:\n                message.type = 2;\n                break;\n            case \"STRING\":\n            case 3:\n                message.type = 3;\n                break;\n            case \"TENSOR\":\n            case 4:\n                message.type = 4;\n                break;\n            case \"GRAPH\":\n            case 5:\n                message.type = 5;\n                break;\n            case \"FLOATS\":\n            case 6:\n                message.type = 6;\n                break;\n            case \"INTS\":\n            case 7:\n                message.type = 7;\n                break;\n            case \"STRINGS\":\n            case 8:\n                message.type = 8;\n                break;\n            case \"TENSORS\":\n            case 9:\n                message.type = 9;\n                break;\n            case \"GRAPHS\":\n            case 10:\n                message.type = 10;\n                break;\n            }\n            if (object.f != null)\n                message.f = Number(object.f);\n            if (object.i != null)\n                if ($util.Long)\n                    (message.i = $util.Long.fromValue(object.i)).unsigned = false;\n                else if (typeof object.i === \"string\")\n                    message.i = parseInt(object.i, 10);\n                else if (typeof object.i === \"number\")\n                    message.i = object.i;\n                else if (typeof object.i === \"object\")\n                    message.i = new $util.LongBits(object.i.low >>> 0, object.i.high >>> 0).toNumber();\n            if (object.s != null)\n                if (typeof object.s === \"string\")\n                    $util.base64.decode(object.s, message.s = $util.newBuffer($util.base64.length(object.s)), 0);\n                else if (object.s.length)\n                    message.s = object.s;\n            if (object.t != null) {\n                if (typeof object.t !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.t: object expected\");\n                message.t = $root.onnx.TensorProto.fromObject(object.t);\n            }\n            if (object.g != null) {\n                if (typeof object.g !== \"object\")\n                    throw TypeError(\".onnx.AttributeProto.g: object expected\");\n                message.g = $root.onnx.GraphProto.fromObject(object.g);\n            }\n            if (object.floats) {\n                if (!Array.isArray(object.floats))\n                    throw TypeError(\".onnx.AttributeProto.floats: array expected\");\n                message.floats = [];\n                for (var i = 0; i < object.floats.length; ++i)\n                    message.floats[i] = Number(object.floats[i]);\n            }\n            if (object.ints) {\n                if (!Array.isArray(object.ints))\n                    throw TypeError(\".onnx.AttributeProto.ints: array expected\");\n                message.ints = [];\n                for (var i = 0; i < object.ints.length; ++i)\n                    if ($util.Long)\n                        (message.ints[i] = $util.Long.fromValue(object.ints[i])).unsigned = false;\n                    else if (typeof object.ints[i] === \"string\")\n                        message.ints[i] = parseInt(object.ints[i], 10);\n                    else if (typeof object.ints[i] === \"number\")\n                        message.ints[i] = object.ints[i];\n                    else if (typeof object.ints[i] === \"object\")\n                        message.ints[i] = new $util.LongBits(object.ints[i].low >>> 0, object.ints[i].high >>> 0).toNumber();\n            }\n            if (object.strings) {\n                if (!Array.isArray(object.strings))\n                    throw TypeError(\".onnx.AttributeProto.strings: array expected\");\n                message.strings = [];\n                for (var i = 0; i < object.strings.length; ++i)\n                    if (typeof object.strings[i] === \"string\")\n                        $util.base64.decode(object.strings[i], message.strings[i] = $util.newBuffer($util.base64.length(object.strings[i])), 0);\n                    else if (object.strings[i].length)\n                        message.strings[i] = object.strings[i];\n            }\n            if (object.tensors) {\n                if (!Array.isArray(object.tensors))\n                    throw TypeError(\".onnx.AttributeProto.tensors: array expected\");\n                message.tensors = [];\n                for (var i = 0; i < object.tensors.length; ++i) {\n                    if (typeof object.tensors[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.tensors: object expected\");\n                    message.tensors[i] = $root.onnx.TensorProto.fromObject(object.tensors[i]);\n                }\n            }\n            if (object.graphs) {\n                if (!Array.isArray(object.graphs))\n                    throw TypeError(\".onnx.AttributeProto.graphs: array expected\");\n                message.graphs = [];\n                for (var i = 0; i < object.graphs.length; ++i) {\n                    if (typeof object.graphs[i] !== \"object\")\n                        throw TypeError(\".onnx.AttributeProto.graphs: object expected\");\n                    message.graphs[i] = $root.onnx.GraphProto.fromObject(object.graphs[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an AttributeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.AttributeProto\n         * @static\n         * @param {onnx.AttributeProto} message AttributeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        AttributeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.floats = [];\n                object.ints = [];\n                object.strings = [];\n                object.tensors = [];\n                object.graphs = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.f = 0;\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.i = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.i = options.longs === String ? \"0\" : 0;\n                if (options.bytes === String)\n                    object.s = \"\";\n                else {\n                    object.s = [];\n                    if (options.bytes !== Array)\n                        object.s = $util.newBuffer(object.s);\n                }\n                object.t = null;\n                object.g = null;\n                object.docString = \"\";\n                object.type = options.enums === String ? \"UNDEFINED\" : 0;\n                object.refAttrName = \"\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.f != null && message.hasOwnProperty(\"f\"))\n                object.f = options.json && !isFinite(message.f) ? String(message.f) : message.f;\n            if (message.i != null && message.hasOwnProperty(\"i\"))\n                if (typeof message.i === \"number\")\n                    object.i = options.longs === String ? String(message.i) : message.i;\n                else\n                    object.i = options.longs === String ? $util.Long.prototype.toString.call(message.i) : options.longs === Number ? new $util.LongBits(message.i.low >>> 0, message.i.high >>> 0).toNumber() : message.i;\n            if (message.s != null && message.hasOwnProperty(\"s\"))\n                object.s = options.bytes === String ? $util.base64.encode(message.s, 0, message.s.length) : options.bytes === Array ? Array.prototype.slice.call(message.s) : message.s;\n            if (message.t != null && message.hasOwnProperty(\"t\"))\n                object.t = $root.onnx.TensorProto.toObject(message.t, options);\n            if (message.g != null && message.hasOwnProperty(\"g\"))\n                object.g = $root.onnx.GraphProto.toObject(message.g, options);\n            if (message.floats && message.floats.length) {\n                object.floats = [];\n                for (var j = 0; j < message.floats.length; ++j)\n                    object.floats[j] = options.json && !isFinite(message.floats[j]) ? String(message.floats[j]) : message.floats[j];\n            }\n            if (message.ints && message.ints.length) {\n                object.ints = [];\n                for (var j = 0; j < message.ints.length; ++j)\n                    if (typeof message.ints[j] === \"number\")\n                        object.ints[j] = options.longs === String ? String(message.ints[j]) : message.ints[j];\n                    else\n                        object.ints[j] = options.longs === String ? $util.Long.prototype.toString.call(message.ints[j]) : options.longs === Number ? new $util.LongBits(message.ints[j].low >>> 0, message.ints[j].high >>> 0).toNumber() : message.ints[j];\n            }\n            if (message.strings && message.strings.length) {\n                object.strings = [];\n                for (var j = 0; j < message.strings.length; ++j)\n                    object.strings[j] = options.bytes === String ? $util.base64.encode(message.strings[j], 0, message.strings[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.strings[j]) : message.strings[j];\n            }\n            if (message.tensors && message.tensors.length) {\n                object.tensors = [];\n                for (var j = 0; j < message.tensors.length; ++j)\n                    object.tensors[j] = $root.onnx.TensorProto.toObject(message.tensors[j], options);\n            }\n            if (message.graphs && message.graphs.length) {\n                object.graphs = [];\n                for (var j = 0; j < message.graphs.length; ++j)\n                    object.graphs[j] = $root.onnx.GraphProto.toObject(message.graphs[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = options.enums === String ? $root.onnx.AttributeProto.AttributeType[message.type] : message.type;\n            if (message.refAttrName != null && message.hasOwnProperty(\"refAttrName\"))\n                object.refAttrName = message.refAttrName;\n            return object;\n        };\n\n        /**\n         * Converts this AttributeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.AttributeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        AttributeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * AttributeType enum.\n         * @name onnx.AttributeProto.AttributeType\n         * @enum {string}\n         * @property {number} UNDEFINED=0 UNDEFINED value\n         * @property {number} FLOAT=1 FLOAT value\n         * @property {number} INT=2 INT value\n         * @property {number} STRING=3 STRING value\n         * @property {number} TENSOR=4 TENSOR value\n         * @property {number} GRAPH=5 GRAPH value\n         * @property {number} FLOATS=6 FLOATS value\n         * @property {number} INTS=7 INTS value\n         * @property {number} STRINGS=8 STRINGS value\n         * @property {number} TENSORS=9 TENSORS value\n         * @property {number} GRAPHS=10 GRAPHS value\n         */\n        AttributeProto.AttributeType = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"UNDEFINED\"] = 0;\n            values[valuesById[1] = \"FLOAT\"] = 1;\n            values[valuesById[2] = \"INT\"] = 2;\n            values[valuesById[3] = \"STRING\"] = 3;\n            values[valuesById[4] = \"TENSOR\"] = 4;\n            values[valuesById[5] = \"GRAPH\"] = 5;\n            values[valuesById[6] = \"FLOATS\"] = 6;\n            values[valuesById[7] = \"INTS\"] = 7;\n            values[valuesById[8] = \"STRINGS\"] = 8;\n            values[valuesById[9] = \"TENSORS\"] = 9;\n            values[valuesById[10] = \"GRAPHS\"] = 10;\n            return values;\n        })();\n\n        return AttributeProto;\n    })();\n\n    onnx.ValueInfoProto = (function() {\n\n        /**\n         * Properties of a ValueInfoProto.\n         * @memberof onnx\n         * @interface IValueInfoProto\n         * @property {string|null} [name] ValueInfoProto name\n         * @property {onnx.ITypeProto|null} [type] ValueInfoProto type\n         * @property {string|null} [docString] ValueInfoProto docString\n         */\n\n        /**\n         * Constructs a new ValueInfoProto.\n         * @memberof onnx\n         * @classdesc Represents a ValueInfoProto.\n         * @implements IValueInfoProto\n         * @constructor\n         * @param {onnx.IValueInfoProto=} [properties] Properties to set\n         */\n        function ValueInfoProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ValueInfoProto name.\n         * @member {string} name\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.name = \"\";\n\n        /**\n         * ValueInfoProto type.\n         * @member {onnx.ITypeProto|null|undefined} type\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.type = null;\n\n        /**\n         * ValueInfoProto docString.\n         * @member {string} docString\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         */\n        ValueInfoProto.prototype.docString = \"\";\n\n        /**\n         * Creates a new ValueInfoProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto=} [properties] Properties to set\n         * @returns {onnx.ValueInfoProto} ValueInfoProto instance\n         */\n        ValueInfoProto.create = function create(properties) {\n            return new ValueInfoProto(properties);\n        };\n\n        /**\n         * Encodes the specified ValueInfoProto message. Does not implicitly {@link onnx.ValueInfoProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto} message ValueInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ValueInfoProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                $root.onnx.TypeProto.encode(message.type, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.docString);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ValueInfoProto message, length delimited. Does not implicitly {@link onnx.ValueInfoProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.IValueInfoProto} message ValueInfoProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ValueInfoProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ValueInfoProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ValueInfoProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.ValueInfoProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.name = reader.string();\n                    break;\n                case 2:\n                    message.type = $root.onnx.TypeProto.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.docString = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ValueInfoProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ValueInfoProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ValueInfoProto message.\n         * @function verify\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ValueInfoProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.type != null && message.hasOwnProperty(\"type\")) {\n                var error = $root.onnx.TypeProto.verify(message.type);\n                if (error)\n                    return \"type.\" + error;\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ValueInfoProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.ValueInfoProto} ValueInfoProto\n         */\n        ValueInfoProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.ValueInfoProto)\n                return object;\n            var message = new $root.onnx.ValueInfoProto();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.type != null) {\n                if (typeof object.type !== \"object\")\n                    throw TypeError(\".onnx.ValueInfoProto.type: object expected\");\n                message.type = $root.onnx.TypeProto.fromObject(object.type);\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ValueInfoProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.ValueInfoProto\n         * @static\n         * @param {onnx.ValueInfoProto} message ValueInfoProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ValueInfoProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.name = \"\";\n                object.type = null;\n                object.docString = \"\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = $root.onnx.TypeProto.toObject(message.type, options);\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            return object;\n        };\n\n        /**\n         * Converts this ValueInfoProto to JSON.\n         * @function toJSON\n         * @memberof onnx.ValueInfoProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ValueInfoProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ValueInfoProto;\n    })();\n\n    onnx.NodeProto = (function() {\n\n        /**\n         * Properties of a NodeProto.\n         * @memberof onnx\n         * @interface INodeProto\n         * @property {Array.<string>|null} [input] NodeProto input\n         * @property {Array.<string>|null} [output] NodeProto output\n         * @property {string|null} [name] NodeProto name\n         * @property {string|null} [opType] NodeProto opType\n         * @property {string|null} [domain] NodeProto domain\n         * @property {Array.<onnx.IAttributeProto>|null} [attribute] NodeProto attribute\n         * @property {string|null} [docString] NodeProto docString\n         */\n\n        /**\n         * Constructs a new NodeProto.\n         * @memberof onnx\n         * @classdesc Represents a NodeProto.\n         * @implements INodeProto\n         * @constructor\n         * @param {onnx.INodeProto=} [properties] Properties to set\n         */\n        function NodeProto(properties) {\n            this.input = [];\n            this.output = [];\n            this.attribute = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * NodeProto input.\n         * @member {Array.<string>} input\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.input = $util.emptyArray;\n\n        /**\n         * NodeProto output.\n         * @member {Array.<string>} output\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.output = $util.emptyArray;\n\n        /**\n         * NodeProto name.\n         * @member {string} name\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.name = \"\";\n\n        /**\n         * NodeProto opType.\n         * @member {string} opType\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.opType = \"\";\n\n        /**\n         * NodeProto domain.\n         * @member {string} domain\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.domain = \"\";\n\n        /**\n         * NodeProto attribute.\n         * @member {Array.<onnx.IAttributeProto>} attribute\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.attribute = $util.emptyArray;\n\n        /**\n         * NodeProto docString.\n         * @member {string} docString\n         * @memberof onnx.NodeProto\n         * @instance\n         */\n        NodeProto.prototype.docString = \"\";\n\n        /**\n         * Creates a new NodeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto=} [properties] Properties to set\n         * @returns {onnx.NodeProto} NodeProto instance\n         */\n        NodeProto.create = function create(properties) {\n            return new NodeProto(properties);\n        };\n\n        /**\n         * Encodes the specified NodeProto message. Does not implicitly {@link onnx.NodeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto} message NodeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        NodeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.input != null && message.input.length)\n                for (var i = 0; i < message.input.length; ++i)\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.input[i]);\n            if (message.output != null && message.output.length)\n                for (var i = 0; i < message.output.length; ++i)\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.output[i]);\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.opType);\n            if (message.attribute != null && message.attribute.length)\n                for (var i = 0; i < message.attribute.length; ++i)\n                    $root.onnx.AttributeProto.encode(message.attribute[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.docString);\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                writer.uint32(/* id 7, wireType 2 =*/58).string(message.domain);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified NodeProto message, length delimited. Does not implicitly {@link onnx.NodeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.INodeProto} message NodeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        NodeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a NodeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.NodeProto} NodeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        NodeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.NodeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.input && message.input.length))\n                        message.input = [];\n                    message.input.push(reader.string());\n                    break;\n                case 2:\n                    if (!(message.output && message.output.length))\n                        message.output = [];\n                    message.output.push(reader.string());\n                    break;\n                case 3:\n                    message.name = reader.string();\n                    break;\n                case 4:\n                    message.opType = reader.string();\n                    break;\n                case 7:\n                    message.domain = reader.string();\n                    break;\n                case 5:\n                    if (!(message.attribute && message.attribute.length))\n                        message.attribute = [];\n                    message.attribute.push($root.onnx.AttributeProto.decode(reader, reader.uint32()));\n                    break;\n                case 6:\n                    message.docString = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a NodeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.NodeProto} NodeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        NodeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a NodeProto message.\n         * @function verify\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        NodeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\n                if (!Array.isArray(message.input))\n                    return \"input: array expected\";\n                for (var i = 0; i < message.input.length; ++i)\n                    if (!$util.isString(message.input[i]))\n                        return \"input: string[] expected\";\n            }\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\n                if (!Array.isArray(message.output))\n                    return \"output: array expected\";\n                for (var i = 0; i < message.output.length; ++i)\n                    if (!$util.isString(message.output[i]))\n                        return \"output: string[] expected\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                if (!$util.isString(message.opType))\n                    return \"opType: string expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.attribute != null && message.hasOwnProperty(\"attribute\")) {\n                if (!Array.isArray(message.attribute))\n                    return \"attribute: array expected\";\n                for (var i = 0; i < message.attribute.length; ++i) {\n                    var error = $root.onnx.AttributeProto.verify(message.attribute[i]);\n                    if (error)\n                        return \"attribute.\" + error;\n                }\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a NodeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.NodeProto} NodeProto\n         */\n        NodeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.NodeProto)\n                return object;\n            var message = new $root.onnx.NodeProto();\n            if (object.input) {\n                if (!Array.isArray(object.input))\n                    throw TypeError(\".onnx.NodeProto.input: array expected\");\n                message.input = [];\n                for (var i = 0; i < object.input.length; ++i)\n                    message.input[i] = String(object.input[i]);\n            }\n            if (object.output) {\n                if (!Array.isArray(object.output))\n                    throw TypeError(\".onnx.NodeProto.output: array expected\");\n                message.output = [];\n                for (var i = 0; i < object.output.length; ++i)\n                    message.output[i] = String(object.output[i]);\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.opType != null)\n                message.opType = String(object.opType);\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.attribute) {\n                if (!Array.isArray(object.attribute))\n                    throw TypeError(\".onnx.NodeProto.attribute: array expected\");\n                message.attribute = [];\n                for (var i = 0; i < object.attribute.length; ++i) {\n                    if (typeof object.attribute[i] !== \"object\")\n                        throw TypeError(\".onnx.NodeProto.attribute: object expected\");\n                    message.attribute[i] = $root.onnx.AttributeProto.fromObject(object.attribute[i]);\n                }\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a NodeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.NodeProto\n         * @static\n         * @param {onnx.NodeProto} message NodeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        NodeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.input = [];\n                object.output = [];\n                object.attribute = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.opType = \"\";\n                object.docString = \"\";\n                object.domain = \"\";\n            }\n            if (message.input && message.input.length) {\n                object.input = [];\n                for (var j = 0; j < message.input.length; ++j)\n                    object.input[j] = message.input[j];\n            }\n            if (message.output && message.output.length) {\n                object.output = [];\n                for (var j = 0; j < message.output.length; ++j)\n                    object.output[j] = message.output[j];\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.opType != null && message.hasOwnProperty(\"opType\"))\n                object.opType = message.opType;\n            if (message.attribute && message.attribute.length) {\n                object.attribute = [];\n                for (var j = 0; j < message.attribute.length; ++j)\n                    object.attribute[j] = $root.onnx.AttributeProto.toObject(message.attribute[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            return object;\n        };\n\n        /**\n         * Converts this NodeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.NodeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        NodeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return NodeProto;\n    })();\n\n    onnx.ModelProto = (function() {\n\n        /**\n         * Properties of a ModelProto.\n         * @memberof onnx\n         * @interface IModelProto\n         * @property {number|Long|null} [irVersion] ModelProto irVersion\n         * @property {Array.<onnx.IOperatorSetIdProto>|null} [opsetImport] ModelProto opsetImport\n         * @property {string|null} [producerName] ModelProto producerName\n         * @property {string|null} [producerVersion] ModelProto producerVersion\n         * @property {string|null} [domain] ModelProto domain\n         * @property {number|Long|null} [modelVersion] ModelProto modelVersion\n         * @property {string|null} [docString] ModelProto docString\n         * @property {onnx.IGraphProto|null} [graph] ModelProto graph\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [metadataProps] ModelProto metadataProps\n         */\n\n        /**\n         * Constructs a new ModelProto.\n         * @memberof onnx\n         * @classdesc Represents a ModelProto.\n         * @implements IModelProto\n         * @constructor\n         * @param {onnx.IModelProto=} [properties] Properties to set\n         */\n        function ModelProto(properties) {\n            this.opsetImport = [];\n            this.metadataProps = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ModelProto irVersion.\n         * @member {number|Long} irVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.irVersion = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * ModelProto opsetImport.\n         * @member {Array.<onnx.IOperatorSetIdProto>} opsetImport\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.opsetImport = $util.emptyArray;\n\n        /**\n         * ModelProto producerName.\n         * @member {string} producerName\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.producerName = \"\";\n\n        /**\n         * ModelProto producerVersion.\n         * @member {string} producerVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.producerVersion = \"\";\n\n        /**\n         * ModelProto domain.\n         * @member {string} domain\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.domain = \"\";\n\n        /**\n         * ModelProto modelVersion.\n         * @member {number|Long} modelVersion\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.modelVersion = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * ModelProto docString.\n         * @member {string} docString\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.docString = \"\";\n\n        /**\n         * ModelProto graph.\n         * @member {onnx.IGraphProto|null|undefined} graph\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.graph = null;\n\n        /**\n         * ModelProto metadataProps.\n         * @member {Array.<onnx.IStringStringEntryProto>} metadataProps\n         * @memberof onnx.ModelProto\n         * @instance\n         */\n        ModelProto.prototype.metadataProps = $util.emptyArray;\n\n        /**\n         * Creates a new ModelProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto=} [properties] Properties to set\n         * @returns {onnx.ModelProto} ModelProto instance\n         */\n        ModelProto.create = function create(properties) {\n            return new ModelProto(properties);\n        };\n\n        /**\n         * Encodes the specified ModelProto message. Does not implicitly {@link onnx.ModelProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto} message ModelProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ModelProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.irVersion);\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.producerName);\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.producerVersion);\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.domain);\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                writer.uint32(/* id 5, wireType 0 =*/40).int64(message.modelVersion);\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.docString);\n            if (message.graph != null && message.hasOwnProperty(\"graph\"))\n                $root.onnx.GraphProto.encode(message.graph, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n            if (message.opsetImport != null && message.opsetImport.length)\n                for (var i = 0; i < message.opsetImport.length; ++i)\n                    $root.onnx.OperatorSetIdProto.encode(message.opsetImport[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\n            if (message.metadataProps != null && message.metadataProps.length)\n                for (var i = 0; i < message.metadataProps.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.metadataProps[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ModelProto message, length delimited. Does not implicitly {@link onnx.ModelProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.IModelProto} message ModelProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ModelProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ModelProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.ModelProto} ModelProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ModelProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.ModelProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.irVersion = reader.int64();\n                    break;\n                case 8:\n                    if (!(message.opsetImport && message.opsetImport.length))\n                        message.opsetImport = [];\n                    message.opsetImport.push($root.onnx.OperatorSetIdProto.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.producerName = reader.string();\n                    break;\n                case 3:\n                    message.producerVersion = reader.string();\n                    break;\n                case 4:\n                    message.domain = reader.string();\n                    break;\n                case 5:\n                    message.modelVersion = reader.int64();\n                    break;\n                case 6:\n                    message.docString = reader.string();\n                    break;\n                case 7:\n                    message.graph = $root.onnx.GraphProto.decode(reader, reader.uint32());\n                    break;\n                case 14:\n                    if (!(message.metadataProps && message.metadataProps.length))\n                        message.metadataProps = [];\n                    message.metadataProps.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ModelProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.ModelProto} ModelProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ModelProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ModelProto message.\n         * @function verify\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ModelProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                if (!$util.isInteger(message.irVersion) && !(message.irVersion && $util.isInteger(message.irVersion.low) && $util.isInteger(message.irVersion.high)))\n                    return \"irVersion: integer|Long expected\";\n            if (message.opsetImport != null && message.hasOwnProperty(\"opsetImport\")) {\n                if (!Array.isArray(message.opsetImport))\n                    return \"opsetImport: array expected\";\n                for (var i = 0; i < message.opsetImport.length; ++i) {\n                    var error = $root.onnx.OperatorSetIdProto.verify(message.opsetImport[i]);\n                    if (error)\n                        return \"opsetImport.\" + error;\n                }\n            }\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                if (!$util.isString(message.producerName))\n                    return \"producerName: string expected\";\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                if (!$util.isString(message.producerVersion))\n                    return \"producerVersion: string expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                if (!$util.isInteger(message.modelVersion) && !(message.modelVersion && $util.isInteger(message.modelVersion.low) && $util.isInteger(message.modelVersion.high)))\n                    return \"modelVersion: integer|Long expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.graph != null && message.hasOwnProperty(\"graph\")) {\n                var error = $root.onnx.GraphProto.verify(message.graph);\n                if (error)\n                    return \"graph.\" + error;\n            }\n            if (message.metadataProps != null && message.hasOwnProperty(\"metadataProps\")) {\n                if (!Array.isArray(message.metadataProps))\n                    return \"metadataProps: array expected\";\n                for (var i = 0; i < message.metadataProps.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.metadataProps[i]);\n                    if (error)\n                        return \"metadataProps.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a ModelProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.ModelProto} ModelProto\n         */\n        ModelProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.ModelProto)\n                return object;\n            var message = new $root.onnx.ModelProto();\n            if (object.irVersion != null)\n                if ($util.Long)\n                    (message.irVersion = $util.Long.fromValue(object.irVersion)).unsigned = false;\n                else if (typeof object.irVersion === \"string\")\n                    message.irVersion = parseInt(object.irVersion, 10);\n                else if (typeof object.irVersion === \"number\")\n                    message.irVersion = object.irVersion;\n                else if (typeof object.irVersion === \"object\")\n                    message.irVersion = new $util.LongBits(object.irVersion.low >>> 0, object.irVersion.high >>> 0).toNumber();\n            if (object.opsetImport) {\n                if (!Array.isArray(object.opsetImport))\n                    throw TypeError(\".onnx.ModelProto.opsetImport: array expected\");\n                message.opsetImport = [];\n                for (var i = 0; i < object.opsetImport.length; ++i) {\n                    if (typeof object.opsetImport[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.opsetImport: object expected\");\n                    message.opsetImport[i] = $root.onnx.OperatorSetIdProto.fromObject(object.opsetImport[i]);\n                }\n            }\n            if (object.producerName != null)\n                message.producerName = String(object.producerName);\n            if (object.producerVersion != null)\n                message.producerVersion = String(object.producerVersion);\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.modelVersion != null)\n                if ($util.Long)\n                    (message.modelVersion = $util.Long.fromValue(object.modelVersion)).unsigned = false;\n                else if (typeof object.modelVersion === \"string\")\n                    message.modelVersion = parseInt(object.modelVersion, 10);\n                else if (typeof object.modelVersion === \"number\")\n                    message.modelVersion = object.modelVersion;\n                else if (typeof object.modelVersion === \"object\")\n                    message.modelVersion = new $util.LongBits(object.modelVersion.low >>> 0, object.modelVersion.high >>> 0).toNumber();\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.graph != null) {\n                if (typeof object.graph !== \"object\")\n                    throw TypeError(\".onnx.ModelProto.graph: object expected\");\n                message.graph = $root.onnx.GraphProto.fromObject(object.graph);\n            }\n            if (object.metadataProps) {\n                if (!Array.isArray(object.metadataProps))\n                    throw TypeError(\".onnx.ModelProto.metadataProps: array expected\");\n                message.metadataProps = [];\n                for (var i = 0; i < object.metadataProps.length; ++i) {\n                    if (typeof object.metadataProps[i] !== \"object\")\n                        throw TypeError(\".onnx.ModelProto.metadataProps: object expected\");\n                    message.metadataProps[i] = $root.onnx.StringStringEntryProto.fromObject(object.metadataProps[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ModelProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.ModelProto\n         * @static\n         * @param {onnx.ModelProto} message ModelProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ModelProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.opsetImport = [];\n                object.metadataProps = [];\n            }\n            if (options.defaults) {\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.irVersion = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.irVersion = options.longs === String ? \"0\" : 0;\n                object.producerName = \"\";\n                object.producerVersion = \"\";\n                object.domain = \"\";\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.modelVersion = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.modelVersion = options.longs === String ? \"0\" : 0;\n                object.docString = \"\";\n                object.graph = null;\n            }\n            if (message.irVersion != null && message.hasOwnProperty(\"irVersion\"))\n                if (typeof message.irVersion === \"number\")\n                    object.irVersion = options.longs === String ? String(message.irVersion) : message.irVersion;\n                else\n                    object.irVersion = options.longs === String ? $util.Long.prototype.toString.call(message.irVersion) : options.longs === Number ? new $util.LongBits(message.irVersion.low >>> 0, message.irVersion.high >>> 0).toNumber() : message.irVersion;\n            if (message.producerName != null && message.hasOwnProperty(\"producerName\"))\n                object.producerName = message.producerName;\n            if (message.producerVersion != null && message.hasOwnProperty(\"producerVersion\"))\n                object.producerVersion = message.producerVersion;\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            if (message.modelVersion != null && message.hasOwnProperty(\"modelVersion\"))\n                if (typeof message.modelVersion === \"number\")\n                    object.modelVersion = options.longs === String ? String(message.modelVersion) : message.modelVersion;\n                else\n                    object.modelVersion = options.longs === String ? $util.Long.prototype.toString.call(message.modelVersion) : options.longs === Number ? new $util.LongBits(message.modelVersion.low >>> 0, message.modelVersion.high >>> 0).toNumber() : message.modelVersion;\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.graph != null && message.hasOwnProperty(\"graph\"))\n                object.graph = $root.onnx.GraphProto.toObject(message.graph, options);\n            if (message.opsetImport && message.opsetImport.length) {\n                object.opsetImport = [];\n                for (var j = 0; j < message.opsetImport.length; ++j)\n                    object.opsetImport[j] = $root.onnx.OperatorSetIdProto.toObject(message.opsetImport[j], options);\n            }\n            if (message.metadataProps && message.metadataProps.length) {\n                object.metadataProps = [];\n                for (var j = 0; j < message.metadataProps.length; ++j)\n                    object.metadataProps[j] = $root.onnx.StringStringEntryProto.toObject(message.metadataProps[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this ModelProto to JSON.\n         * @function toJSON\n         * @memberof onnx.ModelProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ModelProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return ModelProto;\n    })();\n\n    onnx.StringStringEntryProto = (function() {\n\n        /**\n         * Properties of a StringStringEntryProto.\n         * @memberof onnx\n         * @interface IStringStringEntryProto\n         * @property {string|null} [key] StringStringEntryProto key\n         * @property {string|null} [value] StringStringEntryProto value\n         */\n\n        /**\n         * Constructs a new StringStringEntryProto.\n         * @memberof onnx\n         * @classdesc Represents a StringStringEntryProto.\n         * @implements IStringStringEntryProto\n         * @constructor\n         * @param {onnx.IStringStringEntryProto=} [properties] Properties to set\n         */\n        function StringStringEntryProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * StringStringEntryProto key.\n         * @member {string} key\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         */\n        StringStringEntryProto.prototype.key = \"\";\n\n        /**\n         * StringStringEntryProto value.\n         * @member {string} value\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         */\n        StringStringEntryProto.prototype.value = \"\";\n\n        /**\n         * Creates a new StringStringEntryProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto=} [properties] Properties to set\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto instance\n         */\n        StringStringEntryProto.create = function create(properties) {\n            return new StringStringEntryProto(properties);\n        };\n\n        /**\n         * Encodes the specified StringStringEntryProto message. Does not implicitly {@link onnx.StringStringEntryProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto} message StringStringEntryProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        StringStringEntryProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.key);\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.value);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified StringStringEntryProto message, length delimited. Does not implicitly {@link onnx.StringStringEntryProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.IStringStringEntryProto} message StringStringEntryProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        StringStringEntryProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a StringStringEntryProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        StringStringEntryProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.StringStringEntryProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.key = reader.string();\n                    break;\n                case 2:\n                    message.value = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a StringStringEntryProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        StringStringEntryProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a StringStringEntryProto message.\n         * @function verify\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        StringStringEntryProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                if (!$util.isString(message.key))\n                    return \"key: string expected\";\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                if (!$util.isString(message.value))\n                    return \"value: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a StringStringEntryProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.StringStringEntryProto} StringStringEntryProto\n         */\n        StringStringEntryProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.StringStringEntryProto)\n                return object;\n            var message = new $root.onnx.StringStringEntryProto();\n            if (object.key != null)\n                message.key = String(object.key);\n            if (object.value != null)\n                message.value = String(object.value);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a StringStringEntryProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.StringStringEntryProto\n         * @static\n         * @param {onnx.StringStringEntryProto} message StringStringEntryProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        StringStringEntryProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.key = \"\";\n                object.value = \"\";\n            }\n            if (message.key != null && message.hasOwnProperty(\"key\"))\n                object.key = message.key;\n            if (message.value != null && message.hasOwnProperty(\"value\"))\n                object.value = message.value;\n            return object;\n        };\n\n        /**\n         * Converts this StringStringEntryProto to JSON.\n         * @function toJSON\n         * @memberof onnx.StringStringEntryProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        StringStringEntryProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return StringStringEntryProto;\n    })();\n\n    onnx.TensorAnnotation = (function() {\n\n        /**\n         * Properties of a TensorAnnotation.\n         * @memberof onnx\n         * @interface ITensorAnnotation\n         * @property {string|null} [tensorName] TensorAnnotation tensorName\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [quantParameterTensorNames] TensorAnnotation quantParameterTensorNames\n         */\n\n        /**\n         * Constructs a new TensorAnnotation.\n         * @memberof onnx\n         * @classdesc Represents a TensorAnnotation.\n         * @implements ITensorAnnotation\n         * @constructor\n         * @param {onnx.ITensorAnnotation=} [properties] Properties to set\n         */\n        function TensorAnnotation(properties) {\n            this.quantParameterTensorNames = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorAnnotation tensorName.\n         * @member {string} tensorName\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         */\n        TensorAnnotation.prototype.tensorName = \"\";\n\n        /**\n         * TensorAnnotation quantParameterTensorNames.\n         * @member {Array.<onnx.IStringStringEntryProto>} quantParameterTensorNames\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         */\n        TensorAnnotation.prototype.quantParameterTensorNames = $util.emptyArray;\n\n        /**\n         * Creates a new TensorAnnotation instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation=} [properties] Properties to set\n         * @returns {onnx.TensorAnnotation} TensorAnnotation instance\n         */\n        TensorAnnotation.create = function create(properties) {\n            return new TensorAnnotation(properties);\n        };\n\n        /**\n         * Encodes the specified TensorAnnotation message. Does not implicitly {@link onnx.TensorAnnotation.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation} message TensorAnnotation message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorAnnotation.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.tensorName);\n            if (message.quantParameterTensorNames != null && message.quantParameterTensorNames.length)\n                for (var i = 0; i < message.quantParameterTensorNames.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.quantParameterTensorNames[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorAnnotation message, length delimited. Does not implicitly {@link onnx.TensorAnnotation.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.ITensorAnnotation} message TensorAnnotation message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorAnnotation.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorAnnotation message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorAnnotation.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorAnnotation();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.tensorName = reader.string();\n                    break;\n                case 2:\n                    if (!(message.quantParameterTensorNames && message.quantParameterTensorNames.length))\n                        message.quantParameterTensorNames = [];\n                    message.quantParameterTensorNames.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorAnnotation message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorAnnotation.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorAnnotation message.\n         * @function verify\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorAnnotation.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                if (!$util.isString(message.tensorName))\n                    return \"tensorName: string expected\";\n            if (message.quantParameterTensorNames != null && message.hasOwnProperty(\"quantParameterTensorNames\")) {\n                if (!Array.isArray(message.quantParameterTensorNames))\n                    return \"quantParameterTensorNames: array expected\";\n                for (var i = 0; i < message.quantParameterTensorNames.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.quantParameterTensorNames[i]);\n                    if (error)\n                        return \"quantParameterTensorNames.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorAnnotation message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorAnnotation} TensorAnnotation\n         */\n        TensorAnnotation.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorAnnotation)\n                return object;\n            var message = new $root.onnx.TensorAnnotation();\n            if (object.tensorName != null)\n                message.tensorName = String(object.tensorName);\n            if (object.quantParameterTensorNames) {\n                if (!Array.isArray(object.quantParameterTensorNames))\n                    throw TypeError(\".onnx.TensorAnnotation.quantParameterTensorNames: array expected\");\n                message.quantParameterTensorNames = [];\n                for (var i = 0; i < object.quantParameterTensorNames.length; ++i) {\n                    if (typeof object.quantParameterTensorNames[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorAnnotation.quantParameterTensorNames: object expected\");\n                    message.quantParameterTensorNames[i] = $root.onnx.StringStringEntryProto.fromObject(object.quantParameterTensorNames[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorAnnotation message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorAnnotation\n         * @static\n         * @param {onnx.TensorAnnotation} message TensorAnnotation\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorAnnotation.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.quantParameterTensorNames = [];\n            if (options.defaults)\n                object.tensorName = \"\";\n            if (message.tensorName != null && message.hasOwnProperty(\"tensorName\"))\n                object.tensorName = message.tensorName;\n            if (message.quantParameterTensorNames && message.quantParameterTensorNames.length) {\n                object.quantParameterTensorNames = [];\n                for (var j = 0; j < message.quantParameterTensorNames.length; ++j)\n                    object.quantParameterTensorNames[j] = $root.onnx.StringStringEntryProto.toObject(message.quantParameterTensorNames[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TensorAnnotation to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorAnnotation\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorAnnotation.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return TensorAnnotation;\n    })();\n\n    onnx.GraphProto = (function() {\n\n        /**\n         * Properties of a GraphProto.\n         * @memberof onnx\n         * @interface IGraphProto\n         * @property {Array.<onnx.INodeProto>|null} [node] GraphProto node\n         * @property {string|null} [name] GraphProto name\n         * @property {Array.<onnx.ITensorProto>|null} [initializer] GraphProto initializer\n         * @property {string|null} [docString] GraphProto docString\n         * @property {Array.<onnx.IValueInfoProto>|null} [input] GraphProto input\n         * @property {Array.<onnx.IValueInfoProto>|null} [output] GraphProto output\n         * @property {Array.<onnx.IValueInfoProto>|null} [valueInfo] GraphProto valueInfo\n         * @property {Array.<onnx.ITensorAnnotation>|null} [quantizationAnnotation] GraphProto quantizationAnnotation\n         */\n\n        /**\n         * Constructs a new GraphProto.\n         * @memberof onnx\n         * @classdesc Represents a GraphProto.\n         * @implements IGraphProto\n         * @constructor\n         * @param {onnx.IGraphProto=} [properties] Properties to set\n         */\n        function GraphProto(properties) {\n            this.node = [];\n            this.initializer = [];\n            this.input = [];\n            this.output = [];\n            this.valueInfo = [];\n            this.quantizationAnnotation = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * GraphProto node.\n         * @member {Array.<onnx.INodeProto>} node\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.node = $util.emptyArray;\n\n        /**\n         * GraphProto name.\n         * @member {string} name\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.name = \"\";\n\n        /**\n         * GraphProto initializer.\n         * @member {Array.<onnx.ITensorProto>} initializer\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.initializer = $util.emptyArray;\n\n        /**\n         * GraphProto docString.\n         * @member {string} docString\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.docString = \"\";\n\n        /**\n         * GraphProto input.\n         * @member {Array.<onnx.IValueInfoProto>} input\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.input = $util.emptyArray;\n\n        /**\n         * GraphProto output.\n         * @member {Array.<onnx.IValueInfoProto>} output\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.output = $util.emptyArray;\n\n        /**\n         * GraphProto valueInfo.\n         * @member {Array.<onnx.IValueInfoProto>} valueInfo\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.valueInfo = $util.emptyArray;\n\n        /**\n         * GraphProto quantizationAnnotation.\n         * @member {Array.<onnx.ITensorAnnotation>} quantizationAnnotation\n         * @memberof onnx.GraphProto\n         * @instance\n         */\n        GraphProto.prototype.quantizationAnnotation = $util.emptyArray;\n\n        /**\n         * Creates a new GraphProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto=} [properties] Properties to set\n         * @returns {onnx.GraphProto} GraphProto instance\n         */\n        GraphProto.create = function create(properties) {\n            return new GraphProto(properties);\n        };\n\n        /**\n         * Encodes the specified GraphProto message. Does not implicitly {@link onnx.GraphProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto} message GraphProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        GraphProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.node != null && message.node.length)\n                for (var i = 0; i < message.node.length; ++i)\n                    $root.onnx.NodeProto.encode(message.node[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);\n            if (message.initializer != null && message.initializer.length)\n                for (var i = 0; i < message.initializer.length; ++i)\n                    $root.onnx.TensorProto.encode(message.initializer[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 10, wireType 2 =*/82).string(message.docString);\n            if (message.input != null && message.input.length)\n                for (var i = 0; i < message.input.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.input[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.output != null && message.output.length)\n                for (var i = 0; i < message.output.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.output[i], writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();\n            if (message.valueInfo != null && message.valueInfo.length)\n                for (var i = 0; i < message.valueInfo.length; ++i)\n                    $root.onnx.ValueInfoProto.encode(message.valueInfo[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n            if (message.quantizationAnnotation != null && message.quantizationAnnotation.length)\n                for (var i = 0; i < message.quantizationAnnotation.length; ++i)\n                    $root.onnx.TensorAnnotation.encode(message.quantizationAnnotation[i], writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified GraphProto message, length delimited. Does not implicitly {@link onnx.GraphProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.IGraphProto} message GraphProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        GraphProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a GraphProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.GraphProto} GraphProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        GraphProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.GraphProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.node && message.node.length))\n                        message.node = [];\n                    message.node.push($root.onnx.NodeProto.decode(reader, reader.uint32()));\n                    break;\n                case 2:\n                    message.name = reader.string();\n                    break;\n                case 5:\n                    if (!(message.initializer && message.initializer.length))\n                        message.initializer = [];\n                    message.initializer.push($root.onnx.TensorProto.decode(reader, reader.uint32()));\n                    break;\n                case 10:\n                    message.docString = reader.string();\n                    break;\n                case 11:\n                    if (!(message.input && message.input.length))\n                        message.input = [];\n                    message.input.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                    break;\n                case 12:\n                    if (!(message.output && message.output.length))\n                        message.output = [];\n                    message.output.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                    break;\n                case 13:\n                    if (!(message.valueInfo && message.valueInfo.length))\n                        message.valueInfo = [];\n                    message.valueInfo.push($root.onnx.ValueInfoProto.decode(reader, reader.uint32()));\n                    break;\n                case 14:\n                    if (!(message.quantizationAnnotation && message.quantizationAnnotation.length))\n                        message.quantizationAnnotation = [];\n                    message.quantizationAnnotation.push($root.onnx.TensorAnnotation.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a GraphProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.GraphProto} GraphProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        GraphProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a GraphProto message.\n         * @function verify\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        GraphProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.node != null && message.hasOwnProperty(\"node\")) {\n                if (!Array.isArray(message.node))\n                    return \"node: array expected\";\n                for (var i = 0; i < message.node.length; ++i) {\n                    var error = $root.onnx.NodeProto.verify(message.node[i]);\n                    if (error)\n                        return \"node.\" + error;\n                }\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.initializer != null && message.hasOwnProperty(\"initializer\")) {\n                if (!Array.isArray(message.initializer))\n                    return \"initializer: array expected\";\n                for (var i = 0; i < message.initializer.length; ++i) {\n                    var error = $root.onnx.TensorProto.verify(message.initializer[i]);\n                    if (error)\n                        return \"initializer.\" + error;\n                }\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.input != null && message.hasOwnProperty(\"input\")) {\n                if (!Array.isArray(message.input))\n                    return \"input: array expected\";\n                for (var i = 0; i < message.input.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.input[i]);\n                    if (error)\n                        return \"input.\" + error;\n                }\n            }\n            if (message.output != null && message.hasOwnProperty(\"output\")) {\n                if (!Array.isArray(message.output))\n                    return \"output: array expected\";\n                for (var i = 0; i < message.output.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.output[i]);\n                    if (error)\n                        return \"output.\" + error;\n                }\n            }\n            if (message.valueInfo != null && message.hasOwnProperty(\"valueInfo\")) {\n                if (!Array.isArray(message.valueInfo))\n                    return \"valueInfo: array expected\";\n                for (var i = 0; i < message.valueInfo.length; ++i) {\n                    var error = $root.onnx.ValueInfoProto.verify(message.valueInfo[i]);\n                    if (error)\n                        return \"valueInfo.\" + error;\n                }\n            }\n            if (message.quantizationAnnotation != null && message.hasOwnProperty(\"quantizationAnnotation\")) {\n                if (!Array.isArray(message.quantizationAnnotation))\n                    return \"quantizationAnnotation: array expected\";\n                for (var i = 0; i < message.quantizationAnnotation.length; ++i) {\n                    var error = $root.onnx.TensorAnnotation.verify(message.quantizationAnnotation[i]);\n                    if (error)\n                        return \"quantizationAnnotation.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a GraphProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.GraphProto} GraphProto\n         */\n        GraphProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.GraphProto)\n                return object;\n            var message = new $root.onnx.GraphProto();\n            if (object.node) {\n                if (!Array.isArray(object.node))\n                    throw TypeError(\".onnx.GraphProto.node: array expected\");\n                message.node = [];\n                for (var i = 0; i < object.node.length; ++i) {\n                    if (typeof object.node[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.node: object expected\");\n                    message.node[i] = $root.onnx.NodeProto.fromObject(object.node[i]);\n                }\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.initializer) {\n                if (!Array.isArray(object.initializer))\n                    throw TypeError(\".onnx.GraphProto.initializer: array expected\");\n                message.initializer = [];\n                for (var i = 0; i < object.initializer.length; ++i) {\n                    if (typeof object.initializer[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.initializer: object expected\");\n                    message.initializer[i] = $root.onnx.TensorProto.fromObject(object.initializer[i]);\n                }\n            }\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.input) {\n                if (!Array.isArray(object.input))\n                    throw TypeError(\".onnx.GraphProto.input: array expected\");\n                message.input = [];\n                for (var i = 0; i < object.input.length; ++i) {\n                    if (typeof object.input[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.input: object expected\");\n                    message.input[i] = $root.onnx.ValueInfoProto.fromObject(object.input[i]);\n                }\n            }\n            if (object.output) {\n                if (!Array.isArray(object.output))\n                    throw TypeError(\".onnx.GraphProto.output: array expected\");\n                message.output = [];\n                for (var i = 0; i < object.output.length; ++i) {\n                    if (typeof object.output[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.output: object expected\");\n                    message.output[i] = $root.onnx.ValueInfoProto.fromObject(object.output[i]);\n                }\n            }\n            if (object.valueInfo) {\n                if (!Array.isArray(object.valueInfo))\n                    throw TypeError(\".onnx.GraphProto.valueInfo: array expected\");\n                message.valueInfo = [];\n                for (var i = 0; i < object.valueInfo.length; ++i) {\n                    if (typeof object.valueInfo[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.valueInfo: object expected\");\n                    message.valueInfo[i] = $root.onnx.ValueInfoProto.fromObject(object.valueInfo[i]);\n                }\n            }\n            if (object.quantizationAnnotation) {\n                if (!Array.isArray(object.quantizationAnnotation))\n                    throw TypeError(\".onnx.GraphProto.quantizationAnnotation: array expected\");\n                message.quantizationAnnotation = [];\n                for (var i = 0; i < object.quantizationAnnotation.length; ++i) {\n                    if (typeof object.quantizationAnnotation[i] !== \"object\")\n                        throw TypeError(\".onnx.GraphProto.quantizationAnnotation: object expected\");\n                    message.quantizationAnnotation[i] = $root.onnx.TensorAnnotation.fromObject(object.quantizationAnnotation[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a GraphProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.GraphProto\n         * @static\n         * @param {onnx.GraphProto} message GraphProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        GraphProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.node = [];\n                object.initializer = [];\n                object.input = [];\n                object.output = [];\n                object.valueInfo = [];\n                object.quantizationAnnotation = [];\n            }\n            if (options.defaults) {\n                object.name = \"\";\n                object.docString = \"\";\n            }\n            if (message.node && message.node.length) {\n                object.node = [];\n                for (var j = 0; j < message.node.length; ++j)\n                    object.node[j] = $root.onnx.NodeProto.toObject(message.node[j], options);\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.initializer && message.initializer.length) {\n                object.initializer = [];\n                for (var j = 0; j < message.initializer.length; ++j)\n                    object.initializer[j] = $root.onnx.TensorProto.toObject(message.initializer[j], options);\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.input && message.input.length) {\n                object.input = [];\n                for (var j = 0; j < message.input.length; ++j)\n                    object.input[j] = $root.onnx.ValueInfoProto.toObject(message.input[j], options);\n            }\n            if (message.output && message.output.length) {\n                object.output = [];\n                for (var j = 0; j < message.output.length; ++j)\n                    object.output[j] = $root.onnx.ValueInfoProto.toObject(message.output[j], options);\n            }\n            if (message.valueInfo && message.valueInfo.length) {\n                object.valueInfo = [];\n                for (var j = 0; j < message.valueInfo.length; ++j)\n                    object.valueInfo[j] = $root.onnx.ValueInfoProto.toObject(message.valueInfo[j], options);\n            }\n            if (message.quantizationAnnotation && message.quantizationAnnotation.length) {\n                object.quantizationAnnotation = [];\n                for (var j = 0; j < message.quantizationAnnotation.length; ++j)\n                    object.quantizationAnnotation[j] = $root.onnx.TensorAnnotation.toObject(message.quantizationAnnotation[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this GraphProto to JSON.\n         * @function toJSON\n         * @memberof onnx.GraphProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        GraphProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return GraphProto;\n    })();\n\n    onnx.TensorProto = (function() {\n\n        /**\n         * Properties of a TensorProto.\n         * @memberof onnx\n         * @interface ITensorProto\n         * @property {Array.<number|Long>|null} [dims] TensorProto dims\n         * @property {number|null} [dataType] TensorProto dataType\n         * @property {onnx.TensorProto.ISegment|null} [segment] TensorProto segment\n         * @property {Array.<number>|null} [floatData] TensorProto floatData\n         * @property {Array.<number>|null} [int32Data] TensorProto int32Data\n         * @property {Array.<Uint8Array>|null} [stringData] TensorProto stringData\n         * @property {Array.<number|Long>|null} [int64Data] TensorProto int64Data\n         * @property {string|null} [name] TensorProto name\n         * @property {string|null} [docString] TensorProto docString\n         * @property {Uint8Array|null} [rawData] TensorProto rawData\n         * @property {Array.<onnx.IStringStringEntryProto>|null} [externalData] TensorProto externalData\n         * @property {onnx.TensorProto.DataLocation|null} [dataLocation] TensorProto dataLocation\n         * @property {Array.<number>|null} [doubleData] TensorProto doubleData\n         * @property {Array.<number|Long>|null} [uint64Data] TensorProto uint64Data\n         */\n\n        /**\n         * Constructs a new TensorProto.\n         * @memberof onnx\n         * @classdesc Represents a TensorProto.\n         * @implements ITensorProto\n         * @constructor\n         * @param {onnx.ITensorProto=} [properties] Properties to set\n         */\n        function TensorProto(properties) {\n            this.dims = [];\n            this.floatData = [];\n            this.int32Data = [];\n            this.stringData = [];\n            this.int64Data = [];\n            this.externalData = [];\n            this.doubleData = [];\n            this.uint64Data = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorProto dims.\n         * @member {Array.<number|Long>} dims\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dims = $util.emptyArray;\n\n        /**\n         * TensorProto dataType.\n         * @member {number} dataType\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dataType = 0;\n\n        /**\n         * TensorProto segment.\n         * @member {onnx.TensorProto.ISegment|null|undefined} segment\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.segment = null;\n\n        /**\n         * TensorProto floatData.\n         * @member {Array.<number>} floatData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.floatData = $util.emptyArray;\n\n        /**\n         * TensorProto int32Data.\n         * @member {Array.<number>} int32Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.int32Data = $util.emptyArray;\n\n        /**\n         * TensorProto stringData.\n         * @member {Array.<Uint8Array>} stringData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.stringData = $util.emptyArray;\n\n        /**\n         * TensorProto int64Data.\n         * @member {Array.<number|Long>} int64Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.int64Data = $util.emptyArray;\n\n        /**\n         * TensorProto name.\n         * @member {string} name\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.name = \"\";\n\n        /**\n         * TensorProto docString.\n         * @member {string} docString\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.docString = \"\";\n\n        /**\n         * TensorProto rawData.\n         * @member {Uint8Array} rawData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.rawData = $util.newBuffer([]);\n\n        /**\n         * TensorProto externalData.\n         * @member {Array.<onnx.IStringStringEntryProto>} externalData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.externalData = $util.emptyArray;\n\n        /**\n         * TensorProto dataLocation.\n         * @member {onnx.TensorProto.DataLocation} dataLocation\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.dataLocation = 0;\n\n        /**\n         * TensorProto doubleData.\n         * @member {Array.<number>} doubleData\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.doubleData = $util.emptyArray;\n\n        /**\n         * TensorProto uint64Data.\n         * @member {Array.<number|Long>} uint64Data\n         * @memberof onnx.TensorProto\n         * @instance\n         */\n        TensorProto.prototype.uint64Data = $util.emptyArray;\n\n        /**\n         * Creates a new TensorProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto=} [properties] Properties to set\n         * @returns {onnx.TensorProto} TensorProto instance\n         */\n        TensorProto.create = function create(properties) {\n            return new TensorProto(properties);\n        };\n\n        /**\n         * Encodes the specified TensorProto message. Does not implicitly {@link onnx.TensorProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto} message TensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.dims != null && message.dims.length) {\n                writer.uint32(/* id 1, wireType 2 =*/10).fork();\n                for (var i = 0; i < message.dims.length; ++i)\n                    writer.int64(message.dims[i]);\n                writer.ldelim();\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.dataType);\n            if (message.segment != null && message.hasOwnProperty(\"segment\"))\n                $root.onnx.TensorProto.Segment.encode(message.segment, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.floatData != null && message.floatData.length) {\n                writer.uint32(/* id 4, wireType 2 =*/34).fork();\n                for (var i = 0; i < message.floatData.length; ++i)\n                    writer.float(message.floatData[i]);\n                writer.ldelim();\n            }\n            if (message.int32Data != null && message.int32Data.length) {\n                writer.uint32(/* id 5, wireType 2 =*/42).fork();\n                for (var i = 0; i < message.int32Data.length; ++i)\n                    writer.int32(message.int32Data[i]);\n                writer.ldelim();\n            }\n            if (message.stringData != null && message.stringData.length)\n                for (var i = 0; i < message.stringData.length; ++i)\n                    writer.uint32(/* id 6, wireType 2 =*/50).bytes(message.stringData[i]);\n            if (message.int64Data != null && message.int64Data.length) {\n                writer.uint32(/* id 7, wireType 2 =*/58).fork();\n                for (var i = 0; i < message.int64Data.length; ++i)\n                    writer.int64(message.int64Data[i]);\n                writer.ldelim();\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                writer.uint32(/* id 8, wireType 2 =*/66).string(message.name);\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                writer.uint32(/* id 9, wireType 2 =*/74).bytes(message.rawData);\n            if (message.doubleData != null && message.doubleData.length) {\n                writer.uint32(/* id 10, wireType 2 =*/82).fork();\n                for (var i = 0; i < message.doubleData.length; ++i)\n                    writer.double(message.doubleData[i]);\n                writer.ldelim();\n            }\n            if (message.uint64Data != null && message.uint64Data.length) {\n                writer.uint32(/* id 11, wireType 2 =*/90).fork();\n                for (var i = 0; i < message.uint64Data.length; ++i)\n                    writer.uint64(message.uint64Data[i]);\n                writer.ldelim();\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                writer.uint32(/* id 12, wireType 2 =*/98).string(message.docString);\n            if (message.externalData != null && message.externalData.length)\n                for (var i = 0; i < message.externalData.length; ++i)\n                    $root.onnx.StringStringEntryProto.encode(message.externalData[i], writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                writer.uint32(/* id 14, wireType 0 =*/112).int32(message.dataLocation);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorProto message, length delimited. Does not implicitly {@link onnx.TensorProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.ITensorProto} message TensorProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorProto} TensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.dims && message.dims.length))\n                        message.dims = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.dims.push(reader.int64());\n                    } else\n                        message.dims.push(reader.int64());\n                    break;\n                case 2:\n                    message.dataType = reader.int32();\n                    break;\n                case 3:\n                    message.segment = $root.onnx.TensorProto.Segment.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    if (!(message.floatData && message.floatData.length))\n                        message.floatData = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.floatData.push(reader.float());\n                    } else\n                        message.floatData.push(reader.float());\n                    break;\n                case 5:\n                    if (!(message.int32Data && message.int32Data.length))\n                        message.int32Data = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.int32Data.push(reader.int32());\n                    } else\n                        message.int32Data.push(reader.int32());\n                    break;\n                case 6:\n                    if (!(message.stringData && message.stringData.length))\n                        message.stringData = [];\n                    message.stringData.push(reader.bytes());\n                    break;\n                case 7:\n                    if (!(message.int64Data && message.int64Data.length))\n                        message.int64Data = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.int64Data.push(reader.int64());\n                    } else\n                        message.int64Data.push(reader.int64());\n                    break;\n                case 8:\n                    message.name = reader.string();\n                    break;\n                case 12:\n                    message.docString = reader.string();\n                    break;\n                case 9:\n                    message.rawData = reader.bytes();\n                    break;\n                case 13:\n                    if (!(message.externalData && message.externalData.length))\n                        message.externalData = [];\n                    message.externalData.push($root.onnx.StringStringEntryProto.decode(reader, reader.uint32()));\n                    break;\n                case 14:\n                    message.dataLocation = reader.int32();\n                    break;\n                case 10:\n                    if (!(message.doubleData && message.doubleData.length))\n                        message.doubleData = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.doubleData.push(reader.double());\n                    } else\n                        message.doubleData.push(reader.double());\n                    break;\n                case 11:\n                    if (!(message.uint64Data && message.uint64Data.length))\n                        message.uint64Data = [];\n                    if ((tag & 7) === 2) {\n                        var end2 = reader.uint32() + reader.pos;\n                        while (reader.pos < end2)\n                            message.uint64Data.push(reader.uint64());\n                    } else\n                        message.uint64Data.push(reader.uint64());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorProto} TensorProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorProto message.\n         * @function verify\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.dims != null && message.hasOwnProperty(\"dims\")) {\n                if (!Array.isArray(message.dims))\n                    return \"dims: array expected\";\n                for (var i = 0; i < message.dims.length; ++i)\n                    if (!$util.isInteger(message.dims[i]) && !(message.dims[i] && $util.isInteger(message.dims[i].low) && $util.isInteger(message.dims[i].high)))\n                        return \"dims: integer|Long[] expected\";\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                if (!$util.isInteger(message.dataType))\n                    return \"dataType: integer expected\";\n            if (message.segment != null && message.hasOwnProperty(\"segment\")) {\n                var error = $root.onnx.TensorProto.Segment.verify(message.segment);\n                if (error)\n                    return \"segment.\" + error;\n            }\n            if (message.floatData != null && message.hasOwnProperty(\"floatData\")) {\n                if (!Array.isArray(message.floatData))\n                    return \"floatData: array expected\";\n                for (var i = 0; i < message.floatData.length; ++i)\n                    if (typeof message.floatData[i] !== \"number\")\n                        return \"floatData: number[] expected\";\n            }\n            if (message.int32Data != null && message.hasOwnProperty(\"int32Data\")) {\n                if (!Array.isArray(message.int32Data))\n                    return \"int32Data: array expected\";\n                for (var i = 0; i < message.int32Data.length; ++i)\n                    if (!$util.isInteger(message.int32Data[i]))\n                        return \"int32Data: integer[] expected\";\n            }\n            if (message.stringData != null && message.hasOwnProperty(\"stringData\")) {\n                if (!Array.isArray(message.stringData))\n                    return \"stringData: array expected\";\n                for (var i = 0; i < message.stringData.length; ++i)\n                    if (!(message.stringData[i] && typeof message.stringData[i].length === \"number\" || $util.isString(message.stringData[i])))\n                        return \"stringData: buffer[] expected\";\n            }\n            if (message.int64Data != null && message.hasOwnProperty(\"int64Data\")) {\n                if (!Array.isArray(message.int64Data))\n                    return \"int64Data: array expected\";\n                for (var i = 0; i < message.int64Data.length; ++i)\n                    if (!$util.isInteger(message.int64Data[i]) && !(message.int64Data[i] && $util.isInteger(message.int64Data[i].low) && $util.isInteger(message.int64Data[i].high)))\n                        return \"int64Data: integer|Long[] expected\";\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                if (!$util.isString(message.docString))\n                    return \"docString: string expected\";\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                if (!(message.rawData && typeof message.rawData.length === \"number\" || $util.isString(message.rawData)))\n                    return \"rawData: buffer expected\";\n            if (message.externalData != null && message.hasOwnProperty(\"externalData\")) {\n                if (!Array.isArray(message.externalData))\n                    return \"externalData: array expected\";\n                for (var i = 0; i < message.externalData.length; ++i) {\n                    var error = $root.onnx.StringStringEntryProto.verify(message.externalData[i]);\n                    if (error)\n                        return \"externalData.\" + error;\n                }\n            }\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                switch (message.dataLocation) {\n                default:\n                    return \"dataLocation: enum value expected\";\n                case 0:\n                case 1:\n                    break;\n                }\n            if (message.doubleData != null && message.hasOwnProperty(\"doubleData\")) {\n                if (!Array.isArray(message.doubleData))\n                    return \"doubleData: array expected\";\n                for (var i = 0; i < message.doubleData.length; ++i)\n                    if (typeof message.doubleData[i] !== \"number\")\n                        return \"doubleData: number[] expected\";\n            }\n            if (message.uint64Data != null && message.hasOwnProperty(\"uint64Data\")) {\n                if (!Array.isArray(message.uint64Data))\n                    return \"uint64Data: array expected\";\n                for (var i = 0; i < message.uint64Data.length; ++i)\n                    if (!$util.isInteger(message.uint64Data[i]) && !(message.uint64Data[i] && $util.isInteger(message.uint64Data[i].low) && $util.isInteger(message.uint64Data[i].high)))\n                        return \"uint64Data: integer|Long[] expected\";\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorProto} TensorProto\n         */\n        TensorProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorProto)\n                return object;\n            var message = new $root.onnx.TensorProto();\n            if (object.dims) {\n                if (!Array.isArray(object.dims))\n                    throw TypeError(\".onnx.TensorProto.dims: array expected\");\n                message.dims = [];\n                for (var i = 0; i < object.dims.length; ++i)\n                    if ($util.Long)\n                        (message.dims[i] = $util.Long.fromValue(object.dims[i])).unsigned = false;\n                    else if (typeof object.dims[i] === \"string\")\n                        message.dims[i] = parseInt(object.dims[i], 10);\n                    else if (typeof object.dims[i] === \"number\")\n                        message.dims[i] = object.dims[i];\n                    else if (typeof object.dims[i] === \"object\")\n                        message.dims[i] = new $util.LongBits(object.dims[i].low >>> 0, object.dims[i].high >>> 0).toNumber();\n            }\n            if (object.dataType != null)\n                message.dataType = object.dataType | 0;\n            if (object.segment != null) {\n                if (typeof object.segment !== \"object\")\n                    throw TypeError(\".onnx.TensorProto.segment: object expected\");\n                message.segment = $root.onnx.TensorProto.Segment.fromObject(object.segment);\n            }\n            if (object.floatData) {\n                if (!Array.isArray(object.floatData))\n                    throw TypeError(\".onnx.TensorProto.floatData: array expected\");\n                message.floatData = [];\n                for (var i = 0; i < object.floatData.length; ++i)\n                    message.floatData[i] = Number(object.floatData[i]);\n            }\n            if (object.int32Data) {\n                if (!Array.isArray(object.int32Data))\n                    throw TypeError(\".onnx.TensorProto.int32Data: array expected\");\n                message.int32Data = [];\n                for (var i = 0; i < object.int32Data.length; ++i)\n                    message.int32Data[i] = object.int32Data[i] | 0;\n            }\n            if (object.stringData) {\n                if (!Array.isArray(object.stringData))\n                    throw TypeError(\".onnx.TensorProto.stringData: array expected\");\n                message.stringData = [];\n                for (var i = 0; i < object.stringData.length; ++i)\n                    if (typeof object.stringData[i] === \"string\")\n                        $util.base64.decode(object.stringData[i], message.stringData[i] = $util.newBuffer($util.base64.length(object.stringData[i])), 0);\n                    else if (object.stringData[i].length)\n                        message.stringData[i] = object.stringData[i];\n            }\n            if (object.int64Data) {\n                if (!Array.isArray(object.int64Data))\n                    throw TypeError(\".onnx.TensorProto.int64Data: array expected\");\n                message.int64Data = [];\n                for (var i = 0; i < object.int64Data.length; ++i)\n                    if ($util.Long)\n                        (message.int64Data[i] = $util.Long.fromValue(object.int64Data[i])).unsigned = false;\n                    else if (typeof object.int64Data[i] === \"string\")\n                        message.int64Data[i] = parseInt(object.int64Data[i], 10);\n                    else if (typeof object.int64Data[i] === \"number\")\n                        message.int64Data[i] = object.int64Data[i];\n                    else if (typeof object.int64Data[i] === \"object\")\n                        message.int64Data[i] = new $util.LongBits(object.int64Data[i].low >>> 0, object.int64Data[i].high >>> 0).toNumber();\n            }\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.docString != null)\n                message.docString = String(object.docString);\n            if (object.rawData != null)\n                if (typeof object.rawData === \"string\")\n                    $util.base64.decode(object.rawData, message.rawData = $util.newBuffer($util.base64.length(object.rawData)), 0);\n                else if (object.rawData.length)\n                    message.rawData = object.rawData;\n            if (object.externalData) {\n                if (!Array.isArray(object.externalData))\n                    throw TypeError(\".onnx.TensorProto.externalData: array expected\");\n                message.externalData = [];\n                for (var i = 0; i < object.externalData.length; ++i) {\n                    if (typeof object.externalData[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorProto.externalData: object expected\");\n                    message.externalData[i] = $root.onnx.StringStringEntryProto.fromObject(object.externalData[i]);\n                }\n            }\n            switch (object.dataLocation) {\n            case \"DEFAULT\":\n            case 0:\n                message.dataLocation = 0;\n                break;\n            case \"EXTERNAL\":\n            case 1:\n                message.dataLocation = 1;\n                break;\n            }\n            if (object.doubleData) {\n                if (!Array.isArray(object.doubleData))\n                    throw TypeError(\".onnx.TensorProto.doubleData: array expected\");\n                message.doubleData = [];\n                for (var i = 0; i < object.doubleData.length; ++i)\n                    message.doubleData[i] = Number(object.doubleData[i]);\n            }\n            if (object.uint64Data) {\n                if (!Array.isArray(object.uint64Data))\n                    throw TypeError(\".onnx.TensorProto.uint64Data: array expected\");\n                message.uint64Data = [];\n                for (var i = 0; i < object.uint64Data.length; ++i)\n                    if ($util.Long)\n                        (message.uint64Data[i] = $util.Long.fromValue(object.uint64Data[i])).unsigned = true;\n                    else if (typeof object.uint64Data[i] === \"string\")\n                        message.uint64Data[i] = parseInt(object.uint64Data[i], 10);\n                    else if (typeof object.uint64Data[i] === \"number\")\n                        message.uint64Data[i] = object.uint64Data[i];\n                    else if (typeof object.uint64Data[i] === \"object\")\n                        message.uint64Data[i] = new $util.LongBits(object.uint64Data[i].low >>> 0, object.uint64Data[i].high >>> 0).toNumber(true);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorProto\n         * @static\n         * @param {onnx.TensorProto} message TensorProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.dims = [];\n                object.floatData = [];\n                object.int32Data = [];\n                object.stringData = [];\n                object.int64Data = [];\n                object.doubleData = [];\n                object.uint64Data = [];\n                object.externalData = [];\n            }\n            if (options.defaults) {\n                object.dataType = 0;\n                object.segment = null;\n                object.name = \"\";\n                if (options.bytes === String)\n                    object.rawData = \"\";\n                else {\n                    object.rawData = [];\n                    if (options.bytes !== Array)\n                        object.rawData = $util.newBuffer(object.rawData);\n                }\n                object.docString = \"\";\n                object.dataLocation = options.enums === String ? \"DEFAULT\" : 0;\n            }\n            if (message.dims && message.dims.length) {\n                object.dims = [];\n                for (var j = 0; j < message.dims.length; ++j)\n                    if (typeof message.dims[j] === \"number\")\n                        object.dims[j] = options.longs === String ? String(message.dims[j]) : message.dims[j];\n                    else\n                        object.dims[j] = options.longs === String ? $util.Long.prototype.toString.call(message.dims[j]) : options.longs === Number ? new $util.LongBits(message.dims[j].low >>> 0, message.dims[j].high >>> 0).toNumber() : message.dims[j];\n            }\n            if (message.dataType != null && message.hasOwnProperty(\"dataType\"))\n                object.dataType = message.dataType;\n            if (message.segment != null && message.hasOwnProperty(\"segment\"))\n                object.segment = $root.onnx.TensorProto.Segment.toObject(message.segment, options);\n            if (message.floatData && message.floatData.length) {\n                object.floatData = [];\n                for (var j = 0; j < message.floatData.length; ++j)\n                    object.floatData[j] = options.json && !isFinite(message.floatData[j]) ? String(message.floatData[j]) : message.floatData[j];\n            }\n            if (message.int32Data && message.int32Data.length) {\n                object.int32Data = [];\n                for (var j = 0; j < message.int32Data.length; ++j)\n                    object.int32Data[j] = message.int32Data[j];\n            }\n            if (message.stringData && message.stringData.length) {\n                object.stringData = [];\n                for (var j = 0; j < message.stringData.length; ++j)\n                    object.stringData[j] = options.bytes === String ? $util.base64.encode(message.stringData[j], 0, message.stringData[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.stringData[j]) : message.stringData[j];\n            }\n            if (message.int64Data && message.int64Data.length) {\n                object.int64Data = [];\n                for (var j = 0; j < message.int64Data.length; ++j)\n                    if (typeof message.int64Data[j] === \"number\")\n                        object.int64Data[j] = options.longs === String ? String(message.int64Data[j]) : message.int64Data[j];\n                    else\n                        object.int64Data[j] = options.longs === String ? $util.Long.prototype.toString.call(message.int64Data[j]) : options.longs === Number ? new $util.LongBits(message.int64Data[j].low >>> 0, message.int64Data[j].high >>> 0).toNumber() : message.int64Data[j];\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.rawData != null && message.hasOwnProperty(\"rawData\"))\n                object.rawData = options.bytes === String ? $util.base64.encode(message.rawData, 0, message.rawData.length) : options.bytes === Array ? Array.prototype.slice.call(message.rawData) : message.rawData;\n            if (message.doubleData && message.doubleData.length) {\n                object.doubleData = [];\n                for (var j = 0; j < message.doubleData.length; ++j)\n                    object.doubleData[j] = options.json && !isFinite(message.doubleData[j]) ? String(message.doubleData[j]) : message.doubleData[j];\n            }\n            if (message.uint64Data && message.uint64Data.length) {\n                object.uint64Data = [];\n                for (var j = 0; j < message.uint64Data.length; ++j)\n                    if (typeof message.uint64Data[j] === \"number\")\n                        object.uint64Data[j] = options.longs === String ? String(message.uint64Data[j]) : message.uint64Data[j];\n                    else\n                        object.uint64Data[j] = options.longs === String ? $util.Long.prototype.toString.call(message.uint64Data[j]) : options.longs === Number ? new $util.LongBits(message.uint64Data[j].low >>> 0, message.uint64Data[j].high >>> 0).toNumber(true) : message.uint64Data[j];\n            }\n            if (message.docString != null && message.hasOwnProperty(\"docString\"))\n                object.docString = message.docString;\n            if (message.externalData && message.externalData.length) {\n                object.externalData = [];\n                for (var j = 0; j < message.externalData.length; ++j)\n                    object.externalData[j] = $root.onnx.StringStringEntryProto.toObject(message.externalData[j], options);\n            }\n            if (message.dataLocation != null && message.hasOwnProperty(\"dataLocation\"))\n                object.dataLocation = options.enums === String ? $root.onnx.TensorProto.DataLocation[message.dataLocation] : message.dataLocation;\n            return object;\n        };\n\n        /**\n         * Converts this TensorProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * DataType enum.\n         * @name onnx.TensorProto.DataType\n         * @enum {string}\n         * @property {number} UNDEFINED=0 UNDEFINED value\n         * @property {number} FLOAT=1 FLOAT value\n         * @property {number} UINT8=2 UINT8 value\n         * @property {number} INT8=3 INT8 value\n         * @property {number} UINT16=4 UINT16 value\n         * @property {number} INT16=5 INT16 value\n         * @property {number} INT32=6 INT32 value\n         * @property {number} INT64=7 INT64 value\n         * @property {number} STRING=8 STRING value\n         * @property {number} BOOL=9 BOOL value\n         * @property {number} FLOAT16=10 FLOAT16 value\n         * @property {number} DOUBLE=11 DOUBLE value\n         * @property {number} UINT32=12 UINT32 value\n         * @property {number} UINT64=13 UINT64 value\n         * @property {number} COMPLEX64=14 COMPLEX64 value\n         * @property {number} COMPLEX128=15 COMPLEX128 value\n         * @property {number} BFLOAT16=16 BFLOAT16 value\n         */\n        TensorProto.DataType = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"UNDEFINED\"] = 0;\n            values[valuesById[1] = \"FLOAT\"] = 1;\n            values[valuesById[2] = \"UINT8\"] = 2;\n            values[valuesById[3] = \"INT8\"] = 3;\n            values[valuesById[4] = \"UINT16\"] = 4;\n            values[valuesById[5] = \"INT16\"] = 5;\n            values[valuesById[6] = \"INT32\"] = 6;\n            values[valuesById[7] = \"INT64\"] = 7;\n            values[valuesById[8] = \"STRING\"] = 8;\n            values[valuesById[9] = \"BOOL\"] = 9;\n            values[valuesById[10] = \"FLOAT16\"] = 10;\n            values[valuesById[11] = \"DOUBLE\"] = 11;\n            values[valuesById[12] = \"UINT32\"] = 12;\n            values[valuesById[13] = \"UINT64\"] = 13;\n            values[valuesById[14] = \"COMPLEX64\"] = 14;\n            values[valuesById[15] = \"COMPLEX128\"] = 15;\n            values[valuesById[16] = \"BFLOAT16\"] = 16;\n            return values;\n        })();\n\n        TensorProto.Segment = (function() {\n\n            /**\n             * Properties of a Segment.\n             * @memberof onnx.TensorProto\n             * @interface ISegment\n             * @property {number|Long|null} [begin] Segment begin\n             * @property {number|Long|null} [end] Segment end\n             */\n\n            /**\n             * Constructs a new Segment.\n             * @memberof onnx.TensorProto\n             * @classdesc Represents a Segment.\n             * @implements ISegment\n             * @constructor\n             * @param {onnx.TensorProto.ISegment=} [properties] Properties to set\n             */\n            function Segment(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Segment begin.\n             * @member {number|Long} begin\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             */\n            Segment.prototype.begin = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Segment end.\n             * @member {number|Long} end\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             */\n            Segment.prototype.end = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Creates a new Segment instance using the specified properties.\n             * @function create\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment=} [properties] Properties to set\n             * @returns {onnx.TensorProto.Segment} Segment instance\n             */\n            Segment.create = function create(properties) {\n                return new Segment(properties);\n            };\n\n            /**\n             * Encodes the specified Segment message. Does not implicitly {@link onnx.TensorProto.Segment.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment} message Segment message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Segment.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.begin);\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    writer.uint32(/* id 2, wireType 0 =*/16).int64(message.end);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Segment message, length delimited. Does not implicitly {@link onnx.TensorProto.Segment.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.ISegment} message Segment message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Segment.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Segment message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TensorProto.Segment} Segment\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Segment.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorProto.Segment();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.begin = reader.int64();\n                        break;\n                    case 2:\n                        message.end = reader.int64();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Segment message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TensorProto.Segment} Segment\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Segment.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Segment message.\n             * @function verify\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Segment.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    if (!$util.isInteger(message.begin) && !(message.begin && $util.isInteger(message.begin.low) && $util.isInteger(message.begin.high)))\n                        return \"begin: integer|Long expected\";\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    if (!$util.isInteger(message.end) && !(message.end && $util.isInteger(message.end.low) && $util.isInteger(message.end.high)))\n                        return \"end: integer|Long expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Segment message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TensorProto.Segment} Segment\n             */\n            Segment.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TensorProto.Segment)\n                    return object;\n                var message = new $root.onnx.TensorProto.Segment();\n                if (object.begin != null)\n                    if ($util.Long)\n                        (message.begin = $util.Long.fromValue(object.begin)).unsigned = false;\n                    else if (typeof object.begin === \"string\")\n                        message.begin = parseInt(object.begin, 10);\n                    else if (typeof object.begin === \"number\")\n                        message.begin = object.begin;\n                    else if (typeof object.begin === \"object\")\n                        message.begin = new $util.LongBits(object.begin.low >>> 0, object.begin.high >>> 0).toNumber();\n                if (object.end != null)\n                    if ($util.Long)\n                        (message.end = $util.Long.fromValue(object.end)).unsigned = false;\n                    else if (typeof object.end === \"string\")\n                        message.end = parseInt(object.end, 10);\n                    else if (typeof object.end === \"number\")\n                        message.end = object.end;\n                    else if (typeof object.end === \"object\")\n                        message.end = new $util.LongBits(object.end.low >>> 0, object.end.high >>> 0).toNumber();\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Segment message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TensorProto.Segment\n             * @static\n             * @param {onnx.TensorProto.Segment} message Segment\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Segment.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.begin = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.begin = options.longs === String ? \"0\" : 0;\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.end = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.end = options.longs === String ? \"0\" : 0;\n                }\n                if (message.begin != null && message.hasOwnProperty(\"begin\"))\n                    if (typeof message.begin === \"number\")\n                        object.begin = options.longs === String ? String(message.begin) : message.begin;\n                    else\n                        object.begin = options.longs === String ? $util.Long.prototype.toString.call(message.begin) : options.longs === Number ? new $util.LongBits(message.begin.low >>> 0, message.begin.high >>> 0).toNumber() : message.begin;\n                if (message.end != null && message.hasOwnProperty(\"end\"))\n                    if (typeof message.end === \"number\")\n                        object.end = options.longs === String ? String(message.end) : message.end;\n                    else\n                        object.end = options.longs === String ? $util.Long.prototype.toString.call(message.end) : options.longs === Number ? new $util.LongBits(message.end.low >>> 0, message.end.high >>> 0).toNumber() : message.end;\n                return object;\n            };\n\n            /**\n             * Converts this Segment to JSON.\n             * @function toJSON\n             * @memberof onnx.TensorProto.Segment\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Segment.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Segment;\n        })();\n\n        /**\n         * DataLocation enum.\n         * @name onnx.TensorProto.DataLocation\n         * @enum {string}\n         * @property {number} DEFAULT=0 DEFAULT value\n         * @property {number} EXTERNAL=1 EXTERNAL value\n         */\n        TensorProto.DataLocation = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"DEFAULT\"] = 0;\n            values[valuesById[1] = \"EXTERNAL\"] = 1;\n            return values;\n        })();\n\n        return TensorProto;\n    })();\n\n    onnx.TensorShapeProto = (function() {\n\n        /**\n         * Properties of a TensorShapeProto.\n         * @memberof onnx\n         * @interface ITensorShapeProto\n         * @property {Array.<onnx.TensorShapeProto.IDimension>|null} [dim] TensorShapeProto dim\n         */\n\n        /**\n         * Constructs a new TensorShapeProto.\n         * @memberof onnx\n         * @classdesc Represents a TensorShapeProto.\n         * @implements ITensorShapeProto\n         * @constructor\n         * @param {onnx.ITensorShapeProto=} [properties] Properties to set\n         */\n        function TensorShapeProto(properties) {\n            this.dim = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TensorShapeProto dim.\n         * @member {Array.<onnx.TensorShapeProto.IDimension>} dim\n         * @memberof onnx.TensorShapeProto\n         * @instance\n         */\n        TensorShapeProto.prototype.dim = $util.emptyArray;\n\n        /**\n         * Creates a new TensorShapeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto=} [properties] Properties to set\n         * @returns {onnx.TensorShapeProto} TensorShapeProto instance\n         */\n        TensorShapeProto.create = function create(properties) {\n            return new TensorShapeProto(properties);\n        };\n\n        /**\n         * Encodes the specified TensorShapeProto message. Does not implicitly {@link onnx.TensorShapeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto} message TensorShapeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorShapeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.dim != null && message.dim.length)\n                for (var i = 0; i < message.dim.length; ++i)\n                    $root.onnx.TensorShapeProto.Dimension.encode(message.dim[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TensorShapeProto message, length delimited. Does not implicitly {@link onnx.TensorShapeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.ITensorShapeProto} message TensorShapeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TensorShapeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TensorShapeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorShapeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorShapeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.dim && message.dim.length))\n                        message.dim = [];\n                    message.dim.push($root.onnx.TensorShapeProto.Dimension.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TensorShapeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TensorShapeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TensorShapeProto message.\n         * @function verify\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TensorShapeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.dim != null && message.hasOwnProperty(\"dim\")) {\n                if (!Array.isArray(message.dim))\n                    return \"dim: array expected\";\n                for (var i = 0; i < message.dim.length; ++i) {\n                    var error = $root.onnx.TensorShapeProto.Dimension.verify(message.dim[i]);\n                    if (error)\n                        return \"dim.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a TensorShapeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TensorShapeProto} TensorShapeProto\n         */\n        TensorShapeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TensorShapeProto)\n                return object;\n            var message = new $root.onnx.TensorShapeProto();\n            if (object.dim) {\n                if (!Array.isArray(object.dim))\n                    throw TypeError(\".onnx.TensorShapeProto.dim: array expected\");\n                message.dim = [];\n                for (var i = 0; i < object.dim.length; ++i) {\n                    if (typeof object.dim[i] !== \"object\")\n                        throw TypeError(\".onnx.TensorShapeProto.dim: object expected\");\n                    message.dim[i] = $root.onnx.TensorShapeProto.Dimension.fromObject(object.dim[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TensorShapeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TensorShapeProto\n         * @static\n         * @param {onnx.TensorShapeProto} message TensorShapeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TensorShapeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.dim = [];\n            if (message.dim && message.dim.length) {\n                object.dim = [];\n                for (var j = 0; j < message.dim.length; ++j)\n                    object.dim[j] = $root.onnx.TensorShapeProto.Dimension.toObject(message.dim[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this TensorShapeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TensorShapeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TensorShapeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        TensorShapeProto.Dimension = (function() {\n\n            /**\n             * Properties of a Dimension.\n             * @memberof onnx.TensorShapeProto\n             * @interface IDimension\n             * @property {number|Long|null} [dimValue] Dimension dimValue\n             * @property {string|null} [dimParam] Dimension dimParam\n             * @property {string|null} [denotation] Dimension denotation\n             */\n\n            /**\n             * Constructs a new Dimension.\n             * @memberof onnx.TensorShapeProto\n             * @classdesc Represents a Dimension.\n             * @implements IDimension\n             * @constructor\n             * @param {onnx.TensorShapeProto.IDimension=} [properties] Properties to set\n             */\n            function Dimension(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Dimension dimValue.\n             * @member {number|Long} dimValue\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.dimValue = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Dimension dimParam.\n             * @member {string} dimParam\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.dimParam = \"\";\n\n            /**\n             * Dimension denotation.\n             * @member {string} denotation\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Dimension.prototype.denotation = \"\";\n\n            // OneOf field names bound to virtual getters and setters\n            var $oneOfFields;\n\n            /**\n             * Dimension value.\n             * @member {\"dimValue\"|\"dimParam\"|undefined} value\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             */\n            Object.defineProperty(Dimension.prototype, \"value\", {\n                get: $util.oneOfGetter($oneOfFields = [\"dimValue\", \"dimParam\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n\n            /**\n             * Creates a new Dimension instance using the specified properties.\n             * @function create\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension=} [properties] Properties to set\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension instance\n             */\n            Dimension.create = function create(properties) {\n                return new Dimension(properties);\n            };\n\n            /**\n             * Encodes the specified Dimension message. Does not implicitly {@link onnx.TensorShapeProto.Dimension.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension} message Dimension message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Dimension.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.dimValue);\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\"))\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.dimParam);\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.denotation);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Dimension message, length delimited. Does not implicitly {@link onnx.TensorShapeProto.Dimension.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.IDimension} message Dimension message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Dimension.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Dimension message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Dimension.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TensorShapeProto.Dimension();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.dimValue = reader.int64();\n                        break;\n                    case 2:\n                        message.dimParam = reader.string();\n                        break;\n                    case 3:\n                        message.denotation = reader.string();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Dimension message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Dimension.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Dimension message.\n             * @function verify\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Dimension.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                var properties = {};\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\")) {\n                    properties.value = 1;\n                    if (!$util.isInteger(message.dimValue) && !(message.dimValue && $util.isInteger(message.dimValue.low) && $util.isInteger(message.dimValue.high)))\n                        return \"dimValue: integer|Long expected\";\n                }\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\")) {\n                    if (properties.value === 1)\n                        return \"value: multiple values\";\n                    properties.value = 1;\n                    if (!$util.isString(message.dimParam))\n                        return \"dimParam: string expected\";\n                }\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    if (!$util.isString(message.denotation))\n                        return \"denotation: string expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Dimension message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TensorShapeProto.Dimension} Dimension\n             */\n            Dimension.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TensorShapeProto.Dimension)\n                    return object;\n                var message = new $root.onnx.TensorShapeProto.Dimension();\n                if (object.dimValue != null)\n                    if ($util.Long)\n                        (message.dimValue = $util.Long.fromValue(object.dimValue)).unsigned = false;\n                    else if (typeof object.dimValue === \"string\")\n                        message.dimValue = parseInt(object.dimValue, 10);\n                    else if (typeof object.dimValue === \"number\")\n                        message.dimValue = object.dimValue;\n                    else if (typeof object.dimValue === \"object\")\n                        message.dimValue = new $util.LongBits(object.dimValue.low >>> 0, object.dimValue.high >>> 0).toNumber();\n                if (object.dimParam != null)\n                    message.dimParam = String(object.dimParam);\n                if (object.denotation != null)\n                    message.denotation = String(object.denotation);\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Dimension message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @static\n             * @param {onnx.TensorShapeProto.Dimension} message Dimension\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Dimension.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults)\n                    object.denotation = \"\";\n                if (message.dimValue != null && message.hasOwnProperty(\"dimValue\")) {\n                    if (typeof message.dimValue === \"number\")\n                        object.dimValue = options.longs === String ? String(message.dimValue) : message.dimValue;\n                    else\n                        object.dimValue = options.longs === String ? $util.Long.prototype.toString.call(message.dimValue) : options.longs === Number ? new $util.LongBits(message.dimValue.low >>> 0, message.dimValue.high >>> 0).toNumber() : message.dimValue;\n                    if (options.oneofs)\n                        object.value = \"dimValue\";\n                }\n                if (message.dimParam != null && message.hasOwnProperty(\"dimParam\")) {\n                    object.dimParam = message.dimParam;\n                    if (options.oneofs)\n                        object.value = \"dimParam\";\n                }\n                if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                    object.denotation = message.denotation;\n                return object;\n            };\n\n            /**\n             * Converts this Dimension to JSON.\n             * @function toJSON\n             * @memberof onnx.TensorShapeProto.Dimension\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Dimension.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Dimension;\n        })();\n\n        return TensorShapeProto;\n    })();\n\n    onnx.TypeProto = (function() {\n\n        /**\n         * Properties of a TypeProto.\n         * @memberof onnx\n         * @interface ITypeProto\n         * @property {onnx.TypeProto.ITensor|null} [tensorType] TypeProto tensorType\n         * @property {string|null} [denotation] TypeProto denotation\n         */\n\n        /**\n         * Constructs a new TypeProto.\n         * @memberof onnx\n         * @classdesc Represents a TypeProto.\n         * @implements ITypeProto\n         * @constructor\n         * @param {onnx.ITypeProto=} [properties] Properties to set\n         */\n        function TypeProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * TypeProto tensorType.\n         * @member {onnx.TypeProto.ITensor|null|undefined} tensorType\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.tensorType = null;\n\n        /**\n         * TypeProto denotation.\n         * @member {string} denotation\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        TypeProto.prototype.denotation = \"\";\n\n        // OneOf field names bound to virtual getters and setters\n        var $oneOfFields;\n\n        /**\n         * TypeProto value.\n         * @member {\"tensorType\"|undefined} value\n         * @memberof onnx.TypeProto\n         * @instance\n         */\n        Object.defineProperty(TypeProto.prototype, \"value\", {\n            get: $util.oneOfGetter($oneOfFields = [\"tensorType\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new TypeProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto=} [properties] Properties to set\n         * @returns {onnx.TypeProto} TypeProto instance\n         */\n        TypeProto.create = function create(properties) {\n            return new TypeProto(properties);\n        };\n\n        /**\n         * Encodes the specified TypeProto message. Does not implicitly {@link onnx.TypeProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto} message TypeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TypeProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\"))\n                $root.onnx.TypeProto.Tensor.encode(message.tensorType, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.denotation);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified TypeProto message, length delimited. Does not implicitly {@link onnx.TypeProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.ITypeProto} message TypeProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        TypeProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a TypeProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.TypeProto} TypeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TypeProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.tensorType = $root.onnx.TypeProto.Tensor.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.denotation = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a TypeProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.TypeProto} TypeProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        TypeProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a TypeProto message.\n         * @function verify\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        TypeProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            var properties = {};\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\")) {\n                properties.value = 1;\n                {\n                    var error = $root.onnx.TypeProto.Tensor.verify(message.tensorType);\n                    if (error)\n                        return \"tensorType.\" + error;\n                }\n            }\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                if (!$util.isString(message.denotation))\n                    return \"denotation: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a TypeProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.TypeProto} TypeProto\n         */\n        TypeProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.TypeProto)\n                return object;\n            var message = new $root.onnx.TypeProto();\n            if (object.tensorType != null) {\n                if (typeof object.tensorType !== \"object\")\n                    throw TypeError(\".onnx.TypeProto.tensorType: object expected\");\n                message.tensorType = $root.onnx.TypeProto.Tensor.fromObject(object.tensorType);\n            }\n            if (object.denotation != null)\n                message.denotation = String(object.denotation);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a TypeProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.TypeProto\n         * @static\n         * @param {onnx.TypeProto} message TypeProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        TypeProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults)\n                object.denotation = \"\";\n            if (message.tensorType != null && message.hasOwnProperty(\"tensorType\")) {\n                object.tensorType = $root.onnx.TypeProto.Tensor.toObject(message.tensorType, options);\n                if (options.oneofs)\n                    object.value = \"tensorType\";\n            }\n            if (message.denotation != null && message.hasOwnProperty(\"denotation\"))\n                object.denotation = message.denotation;\n            return object;\n        };\n\n        /**\n         * Converts this TypeProto to JSON.\n         * @function toJSON\n         * @memberof onnx.TypeProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        TypeProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        TypeProto.Tensor = (function() {\n\n            /**\n             * Properties of a Tensor.\n             * @memberof onnx.TypeProto\n             * @interface ITensor\n             * @property {number|null} [elemType] Tensor elemType\n             * @property {onnx.ITensorShapeProto|null} [shape] Tensor shape\n             */\n\n            /**\n             * Constructs a new Tensor.\n             * @memberof onnx.TypeProto\n             * @classdesc Represents a Tensor.\n             * @implements ITensor\n             * @constructor\n             * @param {onnx.TypeProto.ITensor=} [properties] Properties to set\n             */\n            function Tensor(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Tensor elemType.\n             * @member {number} elemType\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             */\n            Tensor.prototype.elemType = 0;\n\n            /**\n             * Tensor shape.\n             * @member {onnx.ITensorShapeProto|null|undefined} shape\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             */\n            Tensor.prototype.shape = null;\n\n            /**\n             * Creates a new Tensor instance using the specified properties.\n             * @function create\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor=} [properties] Properties to set\n             * @returns {onnx.TypeProto.Tensor} Tensor instance\n             */\n            Tensor.create = function create(properties) {\n                return new Tensor(properties);\n            };\n\n            /**\n             * Encodes the specified Tensor message. Does not implicitly {@link onnx.TypeProto.Tensor.verify|verify} messages.\n             * @function encode\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor} message Tensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Tensor.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int32(message.elemType);\n                if (message.shape != null && message.hasOwnProperty(\"shape\"))\n                    $root.onnx.TensorShapeProto.encode(message.shape, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Tensor message, length delimited. Does not implicitly {@link onnx.TypeProto.Tensor.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.ITensor} message Tensor message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Tensor.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Tensor message from the specified reader or buffer.\n             * @function decode\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Tensor.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.TypeProto.Tensor();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.elemType = reader.int32();\n                        break;\n                    case 2:\n                        message.shape = $root.onnx.TensorShapeProto.decode(reader, reader.uint32());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Tensor message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Tensor.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Tensor message.\n             * @function verify\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Tensor.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    if (!$util.isInteger(message.elemType))\n                        return \"elemType: integer expected\";\n                if (message.shape != null && message.hasOwnProperty(\"shape\")) {\n                    var error = $root.onnx.TensorShapeProto.verify(message.shape);\n                    if (error)\n                        return \"shape.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a Tensor message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {onnx.TypeProto.Tensor} Tensor\n             */\n            Tensor.fromObject = function fromObject(object) {\n                if (object instanceof $root.onnx.TypeProto.Tensor)\n                    return object;\n                var message = new $root.onnx.TypeProto.Tensor();\n                if (object.elemType != null)\n                    message.elemType = object.elemType | 0;\n                if (object.shape != null) {\n                    if (typeof object.shape !== \"object\")\n                        throw TypeError(\".onnx.TypeProto.Tensor.shape: object expected\");\n                    message.shape = $root.onnx.TensorShapeProto.fromObject(object.shape);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Tensor message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof onnx.TypeProto.Tensor\n             * @static\n             * @param {onnx.TypeProto.Tensor} message Tensor\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Tensor.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.elemType = 0;\n                    object.shape = null;\n                }\n                if (message.elemType != null && message.hasOwnProperty(\"elemType\"))\n                    object.elemType = message.elemType;\n                if (message.shape != null && message.hasOwnProperty(\"shape\"))\n                    object.shape = $root.onnx.TensorShapeProto.toObject(message.shape, options);\n                return object;\n            };\n\n            /**\n             * Converts this Tensor to JSON.\n             * @function toJSON\n             * @memberof onnx.TypeProto.Tensor\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Tensor.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Tensor;\n        })();\n\n        return TypeProto;\n    })();\n\n    onnx.OperatorSetIdProto = (function() {\n\n        /**\n         * Properties of an OperatorSetIdProto.\n         * @memberof onnx\n         * @interface IOperatorSetIdProto\n         * @property {string|null} [domain] OperatorSetIdProto domain\n         * @property {number|Long|null} [version] OperatorSetIdProto version\n         */\n\n        /**\n         * Constructs a new OperatorSetIdProto.\n         * @memberof onnx\n         * @classdesc Represents an OperatorSetIdProto.\n         * @implements IOperatorSetIdProto\n         * @constructor\n         * @param {onnx.IOperatorSetIdProto=} [properties] Properties to set\n         */\n        function OperatorSetIdProto(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * OperatorSetIdProto domain.\n         * @member {string} domain\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         */\n        OperatorSetIdProto.prototype.domain = \"\";\n\n        /**\n         * OperatorSetIdProto version.\n         * @member {number|Long} version\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         */\n        OperatorSetIdProto.prototype.version = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * Creates a new OperatorSetIdProto instance using the specified properties.\n         * @function create\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto=} [properties] Properties to set\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto instance\n         */\n        OperatorSetIdProto.create = function create(properties) {\n            return new OperatorSetIdProto(properties);\n        };\n\n        /**\n         * Encodes the specified OperatorSetIdProto message. Does not implicitly {@link onnx.OperatorSetIdProto.verify|verify} messages.\n         * @function encode\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto} message OperatorSetIdProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        OperatorSetIdProto.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.domain);\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.version);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified OperatorSetIdProto message, length delimited. Does not implicitly {@link onnx.OperatorSetIdProto.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.IOperatorSetIdProto} message OperatorSetIdProto message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        OperatorSetIdProto.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an OperatorSetIdProto message from the specified reader or buffer.\n         * @function decode\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        OperatorSetIdProto.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.onnx.OperatorSetIdProto();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.domain = reader.string();\n                    break;\n                case 2:\n                    message.version = reader.int64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an OperatorSetIdProto message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        OperatorSetIdProto.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an OperatorSetIdProto message.\n         * @function verify\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        OperatorSetIdProto.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                if (!$util.isString(message.domain))\n                    return \"domain: string expected\";\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (!$util.isInteger(message.version) && !(message.version && $util.isInteger(message.version.low) && $util.isInteger(message.version.high)))\n                    return \"version: integer|Long expected\";\n            return null;\n        };\n\n        /**\n         * Creates an OperatorSetIdProto message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {onnx.OperatorSetIdProto} OperatorSetIdProto\n         */\n        OperatorSetIdProto.fromObject = function fromObject(object) {\n            if (object instanceof $root.onnx.OperatorSetIdProto)\n                return object;\n            var message = new $root.onnx.OperatorSetIdProto();\n            if (object.domain != null)\n                message.domain = String(object.domain);\n            if (object.version != null)\n                if ($util.Long)\n                    (message.version = $util.Long.fromValue(object.version)).unsigned = false;\n                else if (typeof object.version === \"string\")\n                    message.version = parseInt(object.version, 10);\n                else if (typeof object.version === \"number\")\n                    message.version = object.version;\n                else if (typeof object.version === \"object\")\n                    message.version = new $util.LongBits(object.version.low >>> 0, object.version.high >>> 0).toNumber();\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an OperatorSetIdProto message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof onnx.OperatorSetIdProto\n         * @static\n         * @param {onnx.OperatorSetIdProto} message OperatorSetIdProto\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        OperatorSetIdProto.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.domain = \"\";\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.version = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.version = options.longs === String ? \"0\" : 0;\n            }\n            if (message.domain != null && message.hasOwnProperty(\"domain\"))\n                object.domain = message.domain;\n            if (message.version != null && message.hasOwnProperty(\"version\"))\n                if (typeof message.version === \"number\")\n                    object.version = options.longs === String ? String(message.version) : message.version;\n                else\n                    object.version = options.longs === String ? $util.Long.prototype.toString.call(message.version) : options.longs === Number ? new $util.LongBits(message.version.low >>> 0, message.version.high >>> 0).toNumber() : message.version;\n            return object;\n        };\n\n        /**\n         * Converts this OperatorSetIdProto to JSON.\n         * @function toJSON\n         * @memberof onnx.OperatorSetIdProto\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        OperatorSetIdProto.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return OperatorSetIdProto;\n    })();\n\n    return onnx;\n})();\n\nmodule.exports = $root;\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Reshape} from '../../../ops/reshape';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {TextureLayout} from '../types';\r\nimport {getPackedShape} from '../utils';\r\n\r\nexport class WebGLReshape extends Reshape {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const reshapedDims = ShapeUtil.calculateReshapedDims(inputs[0].dims, inputs[1].integerData);\r\n    const reshapedTensor = reshape(inferenceHandler, inputs[0], reshapedDims);\r\n    return [reshapedTensor];\r\n  }\r\n}\r\n\r\nexport function reshape(\r\n    inferenceHandler: WebGLInferenceHandler, input: Tensor, reshapedDims: ReadonlyArray<number>): Tensor {\r\n  const inputTD = inferenceHandler.getOrCreateTextureData(input);\r\n  let packedShape = reshapedDims;\r\n  if (inputTD.channels === 4) {\r\n    packedShape = getPackedShape(reshapedDims);\r\n  }\r\n  const newTextureLayout: TextureLayout = {\r\n    channels: inputTD.channels,\r\n    height: inputTD.height,\r\n    width: inputTD.width,\r\n    // handle reshaping into scalar Tensors\r\n    shape: packedShape.length !== 0 ? packedShape : [1],\r\n    strides: ShapeUtil.computeStrides(packedShape),\r\n    unpackedShape: reshapedDims,\r\n  };\r\n\r\n  const newTextureData =\r\n      inferenceHandler.createSharedTextureData(newTextureLayout, input.type, inputTD.texture, input.dataId);\r\n  return newTextureData.tensor;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Graph} from './graph';\r\nimport {Operator} from './operators';\r\n\r\nexport interface OpSet {\r\n  domain: string;\r\n  version: number;\r\n}\r\n\r\nexport declare namespace OpSet {\r\n  interface OperatorConstructor {\r\n    (node: Graph.Node): Operator;\r\n  }\r\n\r\n  /**\r\n   * Domain of an opset, it can be an empty string(default value, represent for ai.onnx), or 'ai.onnx.ml'\r\n   */\r\n  type Domain = ''|'ai.onnx.ml';\r\n\r\n  /**\r\n   * A resolve rule consists of 4 items: opType, opSetDomain, versionSelector and operatorConstructor\r\n   */\r\n  type ResolveRule = [string, Domain, string, OperatorConstructor];\r\n}\r\n\r\nexport function resolveOperator(\r\n    node: Graph.Node, opsets: ReadonlyArray<OpSet>, rules: ReadonlyArray<OpSet.ResolveRule>) {\r\n  for (const rule of rules) {\r\n    const opType = rule[0];\r\n    const domain = rule[1];\r\n    const versionSelector = rule[2];\r\n    const opConstructor = rule[3];\r\n\r\n    if (node.opType === opType) {  // operator type matches\r\n      for (const opset of opsets) {\r\n        // opset '' and 'ai.onnx' are considered the same.\r\n        if (opset.domain === domain || (opset.domain === 'ai.onnx' && domain === '')) {  // opset domain found\r\n          if (matchSelector(opset.version, versionSelector)) {\r\n            return opConstructor(node);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  throw new TypeError(`cannot resolve operator '${node.opType}' with opsets: ${\r\n      opsets.map(set => `${set.domain || 'ai.onnx'} v${set.version}`).join(', ')}`);\r\n}\r\n\r\nfunction matchSelector(version: number, selector: string): boolean {\r\n  if (selector.endsWith('+')) {\r\n    // minimum version match ('7+' expects version>=7)\r\n    const rangeStart = Number.parseInt(selector.substring(0, selector.length - 1), 10);\r\n    return !isNaN(rangeStart) && rangeStart <= version;\r\n  } else if (selector.split('-').length === 2) {\r\n    // range match ('6-8' expects 6<=version<=8)\r\n    const pair = selector.split('-');\r\n    const rangeStart = Number.parseInt(pair[0], 10);\r\n    const rangeEnd = Number.parseInt(pair[1], 10);\r\n    return !isNaN(rangeStart) && !isNaN(rangeEnd) && rangeStart <= version && version <= rangeEnd;\r\n  } else {\r\n    // exact match ('7' expects version===7)\r\n    return Number.parseInt(selector, 10) === version;\r\n  }\r\n}\r\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar isArray = require('isarray')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\n// currently this operator supports ONLY 'test' mode\r\n// inputs/outputs and parameters will reflect that\r\n// the operator implementation only supports test mode\r\nexport abstract class BatchNormalization implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.epsilon = attributes.getFloat('epsilon', 1e-5);\r\n    this.momentum = attributes.getFloat('momentum', 0.9);\r\n    this.spatial = attributes.getInt('spatial', 1);\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 5) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    const X = inputs[0];\r\n    const scale = inputs[1];\r\n    const B = inputs[2];\r\n    const mean = inputs[3];\r\n    const var_ = inputs[4];\r\n\r\n    // input should atleast have three dimensions - N,C,dim1,...,dimn\r\n    // other inputs can have only one dimensions\r\n    if (X.dims.length < 3 || scale.dims.length !== 1 || B.dims.length !== 1 || mean.dims.length !== 1 ||\r\n        var_.dims.length !== 1) {\r\n      return false;\r\n    }\r\n    if (scale.dims[0] !== X.dims[1] || B.dims[0] !== X.dims[1] || mean.dims[0] !== X.dims[1] ||\r\n        var_.dims[0] !== X.dims[1]) {\r\n      return false;\r\n    }\r\n    if ((X.type !== 'float32' && X.type !== 'float64') || (scale.type !== 'float32' && scale.type !== 'float64') ||\r\n        (B.type !== 'float32' && B.type !== 'float64') || (mean.type !== 'float32' && mean.type !== 'float64') ||\r\n        (var_.type !== 'float32' && var_.type !== 'float64')) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  protected epsilon: number;\r\n  protected momentum: number;\r\n  protected spatial: number;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class BinaryOp implements Operator {\r\n  constructor(\r\n      protected typeConstraint: ReadonlyArray<Tensor.DataType>, protected opType?: string,\r\n      protected resultType?: Tensor.DataType) {}\r\n\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {}\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 2) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (this.typeConstraint.indexOf(inputs[0].type) === -1) {\r\n      return false;\r\n    }\r\n    if (inputs[0].type !== inputs[1].type) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class Conv implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    // TODO : Make this generic enough to compute default attributes for multi-dimensional conv\r\n    this.autoPad = attributes.getString('auto_pad', 'NOTSET');\r\n    this.dilations = attributes.getInts('dilations', [1, 1]);\r\n    this.group = attributes.getInt('group', 1);\r\n    this.kernelShape = attributes.getInts('kernel_shape', []);\r\n    this.pads = attributes.getInts('pads', [0, 0, 0, 0]);\r\n    this.strides = attributes.getInts('strides', [1, 1]);\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    // Refer to the below link for all input checks\r\n    // https://github.com/onnx/onnx/blob/master/docs/Operators.md#Conv\r\n    if (!inputs || (inputs.length !== 2 && inputs.length !== 3)) {\r\n      return false;\r\n    }\r\n\r\n    // TODO : Need to add support for multi-dimensional conv\r\n    // currently only support 2-dimensional conv\r\n    if (inputs[0].dims.length !== 4 || inputs[1].dims.length !== 4) {\r\n      return false;\r\n    }\r\n\r\n    // FILTER_IN_CHANNEL should be equal to DATA_CHANNEL\r\n    const dataChannel = inputs[0].dims[1];\r\n    const filterInChannel = inputs[1].dims[1] * this.group;\r\n    if (dataChannel !== filterInChannel) {\r\n      return false;\r\n    }\r\n\r\n    // if bias is provided it should be 1D and the number of elements should be equal to the number of feature maps\r\n    if (inputs.length === 3 && (inputs[2].dims.length !== 1 || inputs[1].dims[0] !== inputs[2].dims[0])) {\r\n      return false;\r\n    }\r\n\r\n    const spatialRank = inputs[0].dims.length - 2;\r\n    // wrong dilations dimension\r\n    if (this.dilations.length !== spatialRank) {\r\n      return false;\r\n    }\r\n\r\n    // Wrong strides dimension\r\n    if (this.strides.length !== spatialRank) {\r\n      return false;\r\n    }\r\n\r\n    // Wrong pads dimension\r\n    if (this.pads.length !== spatialRank * 2) {\r\n      return false;\r\n    }\r\n\r\n    // if kernelShape is specified, it's data length must be 2 less than dims length of the weights tensor\r\n    // (the first 2 dims are batch_size and channels)\r\n    if (this.kernelShape.length !== 0 && this.kernelShape.length !== inputs[1].dims.length - 2) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    // TODO : Need to add support for float64\r\n    if (inputs[0].type !== 'float32' || inputs[1].type !== 'float32') {\r\n      return false;\r\n    }\r\n\r\n    if (inputs.length === 3 && inputs[2].type !== 'float32') {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  protected autoPad: string;\r\n  protected dilations: number[];\r\n  protected group: number;\r\n  protected kernelShape: number[];\r\n  protected pads: number[];\r\n  protected strides: number[];\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {MatMul} from '../../../ops/matmul';\r\nimport {Tensor} from '../../../tensor';\r\nimport {BroadcastUtil, MatMulUtil, ShapeUtil} from '../../../util';\r\nimport {CpuInferenceHandler} from '../inference-handler';\r\n\r\nexport class CpuMatMul extends MatMul {\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const output = matMul(inputs[0], inputs[1]);\r\n    return [output];\r\n  }\r\n}\r\n\r\nexport function matMul(a: Tensor, b: Tensor) {\r\n  const [dimsA, dimsB] = MatMulUtil.preprocessInputShapes(a.dims, b.dims);\r\n  const mat2dShape = [dimsA[dimsA.length - 2], dimsB[dimsB.length - 1]];\r\n  const shape = BroadcastUtil.calcShape(dimsA, dimsB, true);\r\n  if (!shape) {\r\n    // the inputs cannot broadcast or cannot multiply\r\n    throw new Error(`input dimensions do not match the requirement`);\r\n  }\r\n  const size = ShapeUtil.size(shape);\r\n  const num2dMatrices = size / (mat2dShape[0] * mat2dShape[1]);\r\n\r\n  const y = new Tensor(shape, a.type === 'float64' || b.type === 'float64' ? 'float64' : 'float32');\r\n  let offsetY = 0;\r\n  const indices = new Array<number>(shape.length);\r\n  const indicesA = new Array<number>(a.dims.length);\r\n  const indicesB = new Array<number>(b.dims.length);\r\n  for (let i = 0; i < num2dMatrices; i++) {\r\n    // traverse nd array at 2d level\r\n    indices[shape.length - 2] = 0;\r\n    indices[shape.length - 1] = 0;\r\n    let rest = i;\r\n    for (let j = shape.length - 3; j >= 0; j--) {\r\n      indices[j] = rest % shape[j];\r\n      rest = Math.floor(rest / shape[j]);\r\n    }\r\n    // map the \"broadcasted\" index to original index\r\n    BroadcastUtil.fillIndex(indices, a.dims, indicesA);\r\n    BroadcastUtil.fillIndex(indices, b.dims, indicesB);\r\n    // calculate subarrays offset for A and B\r\n    const offsetA = indicesA.length <= 2 ? 0 : ShapeUtil.indicesToOffset(indicesA, a.strides, shape.length - 2);\r\n    const offsetB = indicesB.length <= 2 ? 0 : ShapeUtil.indicesToOffset(indicesB, b.strides, shape.length - 2);\r\n    // multiply like conventional matrices\r\n    matMul2d(\r\n        a.floatData.subarray(offsetA), b.floatData.subarray(offsetB), y.floatData.subarray(offsetY), false, false, 1, 0,\r\n        mat2dShape[0], mat2dShape[1], dimsA[dimsA.length - 1]);\r\n    offsetY += mat2dShape[0] * mat2dShape[1];\r\n  }\r\n  return y;\r\n}\r\n\r\n/**\r\n * perform matrix multiply on C = alpha * A * B + beta * C\r\n * @param A data of tensor A, whose shape is [M,K] or [K,M] (if transA)\r\n * @param B data of tensor B, whose shape is [K,N] or [N,K] (if transB)\r\n * @param C data of tensor C, whose shape is [M,N]\r\n */\r\nexport function matMul2d(\r\n    A: Float32Array|Float64Array, B: Float32Array|Float64Array, C: Float32Array|Float64Array, transA: boolean,\r\n    transB: boolean, alpha: number, beta: number, M: number, N: number, K: number) {\r\n  if (transA && transB) {\r\n    return matMul2d_tAtB(A, B, C, alpha, beta, M, N, K);\r\n  } else if (transA) {\r\n    return matMul2d_tA(A, B, C, alpha, beta, M, N, K);\r\n  } else if (transB) {\r\n    return matMul2d_tB(A, B, C, alpha, beta, M, N, K);\r\n  } else {\r\n    return matMul2d_(A, B, C, alpha, beta, M, N, K);\r\n  }\r\n}\r\n\r\nfunction matMul2d_(\r\n    A: Float32Array|Float64Array, B: Float32Array|Float64Array, C: Float32Array|Float64Array, alpha: number,\r\n    beta: number, M: number, N: number, K: number) {\r\n  let offsetA = 0, offsetB = 0, offsetC = 0;\r\n  for (let mm = 0; mm < M; mm++) {\r\n    for (let nn = 0; nn < N; nn++) {\r\n      let sum = 0;\r\n      for (let kk = 0; kk < K; kk++) {\r\n        sum += A[offsetA] * B[offsetB];\r\n        offsetA += 1;\r\n        offsetB += N;\r\n      }\r\n      offsetA -= K;\r\n      offsetB -= N * K;\r\n      C[offsetC] = alpha * sum + beta * C[offsetC];\r\n      offsetC++;\r\n      offsetB++;\r\n    }\r\n    offsetB -= N;\r\n    offsetA += K;\r\n  }\r\n}\r\n\r\nfunction matMul2d_tA(\r\n    A: Float32Array|Float64Array, B: Float32Array|Float64Array, C: Float32Array|Float64Array, alpha: number,\r\n    beta: number, M: number, N: number, K: number) {\r\n  let offsetA = 0, offsetB = 0, offsetC = 0;\r\n  for (let mm = 0; mm < M; mm++) {\r\n    for (let nn = 0; nn < N; nn++) {\r\n      let sum = 0;\r\n      for (let kk = 0; kk < K; kk++) {\r\n        sum += A[offsetA] * B[offsetB];\r\n        offsetA += M;\r\n        offsetB += N;\r\n      }\r\n      offsetA -= M * K;\r\n      offsetB -= N * K;\r\n      C[offsetC] = alpha * sum + beta * C[offsetC];\r\n      offsetC++;\r\n      offsetB++;\r\n    }\r\n    offsetB -= N;\r\n    offsetA++;\r\n  }\r\n}\r\n\r\nfunction matMul2d_tB(\r\n    A: Float32Array|Float64Array, B: Float32Array|Float64Array, C: Float32Array|Float64Array, alpha: number,\r\n    beta: number, M: number, N: number, K: number) {\r\n  let offsetA = 0, offsetB = 0, offsetC = 0;\r\n  for (let mm = 0; mm < M; mm++) {\r\n    for (let nn = 0; nn < N; nn++) {\r\n      let sum = 0;\r\n      for (let kk = 0; kk < K; kk++) {\r\n        sum += A[offsetA] * B[offsetB];\r\n        offsetA += 1;\r\n        offsetB += 1;\r\n      }\r\n      offsetA -= K;\r\n      offsetB -= K;\r\n      C[offsetC] = alpha * sum + beta * C[offsetC];\r\n      offsetC++;\r\n      offsetB += K;\r\n    }\r\n    offsetB -= N * K;\r\n    offsetA += K;\r\n  }\r\n}\r\n\r\nfunction matMul2d_tAtB(\r\n    A: Float32Array|Float64Array, B: Float32Array|Float64Array, C: Float32Array|Float64Array, alpha: number,\r\n    beta: number, M: number, N: number, K: number) {\r\n  let offsetA = 0, offsetB = 0, offsetC = 0;\r\n  for (let mm = 0; mm < M; mm++) {\r\n    for (let nn = 0; nn < N; nn++) {\r\n      let sum = 0;\r\n      for (let kk = 0; kk < K; kk++) {\r\n        sum += A[offsetA] * B[offsetB];\r\n        offsetA += M;\r\n        offsetB += 1;\r\n      }\r\n      offsetA -= M * K;\r\n      offsetB -= K;\r\n      C[offsetC] = alpha * sum + beta * C[offsetC];\r\n      offsetC++;\r\n      offsetB += K;\r\n    }\r\n    offsetB -= N * K;\r\n    offsetA++;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class MatMul implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {}\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 2) {\r\n      return false;\r\n    }\r\n\r\n    if (inputs[0].dims[inputs[0].dims.length - 1] !== inputs[1].dims[inputs[1].dims.length - 2]) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\r\n      return false;\r\n    }\r\n\r\n    if (inputs[1].type !== 'float32' && inputs[1].type !== 'float64') {\r\n      return false;\r\n    }\r\n\r\n    if (inputs[0].type !== inputs[1].type) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class Gemm implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.transA = attributes.getInt('transA', 0) !== 0;\r\n    this.transB = attributes.getInt('transB', 0) !== 0;\r\n    this.alpha = attributes.getFloat('alpha', 1);\r\n    this.beta = attributes.getFloat('beta', 1);\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 3) {\r\n      return false;\r\n    }\r\n\r\n    // 'C' can be of dimensionality 1 or 2 only\r\n    if (inputs[2].dims.length !== 1 && inputs[2].dims.length !== 2) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if ((inputs[0].type !== 'float32' && inputs[0].type !== 'float64') ||\r\n        (inputs[1].type !== 'float32' && inputs[1].type !== 'float64') ||\r\n        (inputs[2].type !== 'float32' && inputs[2].type !== 'float64')) {\r\n      return false;\r\n    }\r\n\r\n    if ((inputs[0].type !== inputs[1].type) || (inputs[0].type !== inputs[2].type)) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  protected transA: boolean;\r\n  protected transB: boolean;\r\n  protected alpha: number;\r\n  protected beta: number;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nclass PoolBase {\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 1) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  protected autoPad: string;\r\n  protected ceilMode: number;\r\n  protected countIncludePad: boolean;\r\n  protected kernelShape: number[];\r\n  protected strides: number[];\r\n  protected pads: number[];\r\n}\r\n\r\nexport abstract class AveragePool extends PoolBase implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.autoPad = attributes.getString('auto_pad', 'NOTSET');\r\n    this.kernelShape = attributes.getInts('kernel_shape');\r\n    this.strides = attributes.getInts('strides', []);\r\n    this.pads = attributes.getInts('pads', []);\r\n    this.countIncludePad = (attributes.getInt('count_include_pad', 0) === 0 ? false : true);\r\n    this.ceilMode = attributes.getInt('ceil_mode', 0);\r\n\r\n    // TODO: support attribute 'ceil_mode'\r\n    if (this.ceilMode !== 0) {\r\n      throw new Error(`using ceil() in shape computation is not yet supported for AveragePool`);\r\n    }\r\n  }\r\n}\r\n\r\nexport abstract class GlobalAveragePool extends PoolBase implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.countIncludePad = (attributes.getInt('count_include_pad', 0) === 0 ? false : true);\r\n  }\r\n}\r\n\r\nexport abstract class MaxPool extends PoolBase implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.autoPad = attributes.getString('auto_pad', 'NOTSET');\r\n    this.kernelShape = attributes.getInts('kernel_shape');\r\n    this.strides = attributes.getInts('strides', []);\r\n    this.pads = attributes.getInts('pads', []);\r\n    this.ceilMode = attributes.getInt('ceil_mode', 0);\r\n    this.storageOrder = attributes.getInt('storage_order', 0);\r\n\r\n    // TODO: support attribute 'ceil_mode' and 'storage_order'\r\n    if (this.storageOrder !== 0) {\r\n      throw new Error(`column major storage order is not yet supported for MaxPool`);\r\n    }\r\n    if (this.ceilMode !== 0) {\r\n      throw new Error(`using ceil() in shape computation is not yet supported for MaxPool`);\r\n    }\r\n  }\r\n\r\n  protected storageOrder: number;\r\n}\r\n\r\nexport abstract class GlobalMaxPool extends PoolBase implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {}\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class Softmax implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.axis = attributes.getInt('axis', 1);\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 1) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  protected axis: number;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class Sum implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {}\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length === 0) {\r\n      return false;\r\n    }\r\n\r\n    const length = inputs[0].dims.length;\r\n    for (let i = 1; i < inputs.length; i++) {\r\n      if (length !== inputs[i].dims.length) {\r\n        return false;\r\n      }\r\n\r\n      for (let j = 0; j < length; j++) {\r\n        if (inputs[0].dims[j] !== inputs[i].dims[j]) {\r\n          return false;\r\n        }\r\n      }\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\r\n      return false;\r\n    }\r\n    for (let i = 1; i < inputs.length; i++) {\r\n      if (inputs[0].type !== inputs[i].type) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","import * as platform from 'platform';\r\n\r\nimport * as onnx from './api';\r\nimport {Backend, Environment, Onnx} from './api';\r\n\r\ninterface ENV extends Environment {\r\n  readonly onnx: Onnx;\r\n  readonly backend: Backend;\r\n  readonly platform: Platform;\r\n}\r\n\r\nclass EnvironmentImpl implements ENV {\r\n  public readonly onnx = onnx;\r\n  public readonly backend = onnx.backend;\r\n  public readonly platform = platform;\r\n\r\n  public debug = false;\r\n}\r\n\r\nexport const env: ENV = new EnvironmentImpl();\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Onnx} from './onnx';\r\nimport * as onnxImpl from './onnx-impl';\r\n\r\n// get or create the onnx object in the global context\r\nconst onnxGlobal = ((typeof window !== 'undefined') ? window : global) as {onnx?: Onnx};\r\nconst onnx: Onnx = onnxImpl;\r\nonnxGlobal.onnx = onnx;\r\n\r\n// set module exported object to global.onnx\r\nexport = onnxImpl;\r\n\r\n// declaration of object global.onnx\r\ndeclare global {\r\n  /**\r\n   * the global onnxjs exported object\r\n   */\r\n  const onnx: Onnx;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {FLOAT_TYPES, NUMBER_TYPES} from '../../operators';\r\nimport {OpSet} from '../../opset';\r\n\r\nimport {CpuArgMax} from './ops/argMax';\r\nimport {CpuBatchNormalization} from './ops/batch-normalization';\r\nimport {CpuBinaryOp} from './ops/binary-op';\r\nimport {CpuConcat} from './ops/concat';\r\nimport {CpuConv} from './ops/conv';\r\nimport {CpuDropout} from './ops/dropout';\r\nimport {CpuFlatten} from './ops/flatten';\r\nimport {CpuGather} from './ops/gather';\r\nimport {CpuGemm} from './ops/gemm';\r\nimport {CpuImageScaler} from './ops/image-scaler';\r\nimport {CpuInstanceNormalization} from './ops/instance-normalization';\r\nimport {CpuLrn} from './ops/lrn';\r\nimport {CpuMatMul} from './ops/matmul';\r\nimport {CpuAveragePool, CpuGlobalAveragePool, CpuGlobalMaxPool, CpuMaxPool} from './ops/pool';\r\nimport * as cpuReduce from './ops/reduce';\r\nimport {CpuReshape} from './ops/reshape';\r\nimport {CpuSlice, CpuSliceV10} from './ops/slice';\r\nimport {CpuSoftmax} from './ops/softmax';\r\nimport {CpuSqueeze} from './ops/squeeze';\r\nimport {CpuSum} from './ops/sum';\r\nimport {CpuTile} from './ops/tile';\r\nimport {CpuTranspose} from './ops/transpose';\r\nimport * as unaryOps from './ops/unary-op';\r\nimport {CpuUnaryOp} from './ops/unary-op';\r\nimport {CpuUnsqueeze} from './ops/unsqueeze';\r\n\r\nexport const CPU_OP_RESOLVE_RULES: ReadonlyArray<OpSet.ResolveRule> = [\r\n  ['Abs', '', '6+', () => new CpuUnaryOp(NUMBER_TYPES, unaryOps.abs)],\r\n  ['Acos', '', '7+', () => new CpuUnaryOp(FLOAT_TYPES, unaryOps.acos)],\r\n  ['Acosh', '', '9+', () => new CpuUnaryOp(FLOAT_TYPES, unaryOps.acosh)],\r\n  ['Add', '', '7+', () => new CpuBinaryOp(NUMBER_TYPES, (e1, e2) => (e1 + e2))],\r\n  ['And', '', '7+', () => new CpuBinaryOp(['bool'], (e1, e2) => (e1 && e2))],\r\n  ['ArgMax', '', '1+', () => new CpuArgMax()],\r\n  ['Asin', '', '7+', () => new CpuUnaryOp(FLOAT_TYPES, unaryOps.asin)],\r\n  ['Asinh', '', '9+', () => new CpuUnaryOp(FLOAT_TYPES, unaryOps.asinh)],\r\n  ['Atan', '', '7+', () => new CpuUnaryOp(FLOAT_TYPES, unaryOps.atan)],\r\n  ['Atanh', '', '9+', () => new CpuUnaryOp(FLOAT_TYPES, unaryOps.atanh)],\r\n  ['AveragePool', '', '7+', () => new CpuAveragePool()],  // TODO: support new attributes for AveragePool-10\r\n  ['BatchNormalization', '', '7+', () => new CpuBatchNormalization()],\r\n  ['Ceil', '', '6+', () => new CpuUnaryOp(FLOAT_TYPES, unaryOps.ceil)],\r\n  ['Clip', '', '6+', () => new CpuUnaryOp(FLOAT_TYPES, unaryOps.clip, unaryOps.clipInitializer)],\r\n  ['Concat', '', '4+', () => new CpuConcat()],\r\n  ['Conv', '', '1+', () => new CpuConv()],\r\n  ['Cos', '', '7+', () => new CpuUnaryOp(FLOAT_TYPES, unaryOps.cos)],\r\n  ['Cosh', '', '9+', () => new CpuUnaryOp(FLOAT_TYPES, unaryOps.cosh)],\r\n  ['Div', '', '7+', () => new CpuBinaryOp(NUMBER_TYPES, (e1, e2) => (e1 / e2))],\r\n  ['Dropout', '', '7+', () => new CpuDropout()],\r\n  ['Elu', '', '6+', () => new CpuUnaryOp(FLOAT_TYPES, unaryOps.elu, unaryOps.eluInitializer)],\r\n  ['Exp', '', '6+', () => new CpuUnaryOp(FLOAT_TYPES, unaryOps.exp)],\r\n  ['Flatten', '', '1+', () => new CpuFlatten()],\r\n  ['Floor', '', '6+', () => new CpuUnaryOp(FLOAT_TYPES, unaryOps.floor)],\r\n  ['Gather', '', '1+', () => new CpuGather()],\r\n  ['Gemm', '', '7+', () => new CpuGemm()],\r\n  ['GlobalAveragePool', '', '1+', () => new CpuGlobalAveragePool()],\r\n  ['GlobalMaxPool', '', '1+', () => new CpuGlobalMaxPool()],\r\n  ['ImageScaler', '', '1+', () => new CpuImageScaler()],\r\n  ['InstanceNormalization', '', '6+', () => new CpuInstanceNormalization()],\r\n  ['IsNaN', '', '9+', () => new CpuUnaryOp(FLOAT_TYPES, unaryOps.isNan, undefined, 'bool')],\r\n  ['LeakyRelu', '', '6+', () => new CpuUnaryOp(FLOAT_TYPES, unaryOps.leakyRelu, unaryOps.leakyReluInitializer)],\r\n  ['Log', '', '6+', () => new CpuUnaryOp(FLOAT_TYPES, unaryOps.log)],\r\n  ['LRN', '', '1+', () => new CpuLrn()],\r\n  ['MatMul', '', '1+', () => new CpuMatMul()],\r\n  ['MaxPool', '', '1+', () => new CpuMaxPool()],  // TODO: support new attributes for MaxPool-8 and MaxPool-10\r\n  ['Mul', '', '7+', () => new CpuBinaryOp(NUMBER_TYPES, (e1, e2) => (e1 * e2))],\r\n  ['Neg', '', '6+', () => new CpuUnaryOp(NUMBER_TYPES, unaryOps.neg)],\r\n  ['Not', '', '1+', () => new CpuUnaryOp(['bool'], unaryOps.not, undefined, 'bool')],\r\n  ['Or', '', '7+', () => new CpuBinaryOp(['bool'], (e1, e2) => (e1 || e2))],\r\n  ['PRelu', '', '7+', () => new CpuBinaryOp(NUMBER_TYPES, (e1, e2) => (e1 >= 0 ? e1 : e1 * e2))],\r\n  ['Reciprocal', '', '6+', () => new CpuUnaryOp(FLOAT_TYPES, unaryOps.reciprocal)],\r\n  ['ReduceLogSum', '', '1+', () => new cpuReduce.CpuReduceLogSum()],\r\n  ['ReduceMax', '', '1+', () => new cpuReduce.CpuReduceMax()],\r\n  ['ReduceMean', '', '1+', () => new cpuReduce.CpuReduceMean()],\r\n  ['ReduceMin', '', '1+', () => new cpuReduce.CpuReduceMin()],\r\n  ['ReduceProd', '', '1+', () => new cpuReduce.CpuReduceProd()],\r\n  ['ReduceSum', '', '1+', () => new cpuReduce.CpuReduceSum()],\r\n  ['ReduceSumSquare', '', '1+', () => new cpuReduce.CpuReduceSumSquare()],\r\n  ['Relu', '', '6+', () => new CpuUnaryOp(FLOAT_TYPES, unaryOps.relu)],\r\n  ['Reshape', '', '5+', () => new CpuReshape()],\r\n  ['Sigmoid', '', '6+', () => new CpuUnaryOp(FLOAT_TYPES, unaryOps.sigmoid)],\r\n  ['Sign', '', '9+', () => new CpuUnaryOp(NUMBER_TYPES, unaryOps.sign)],\r\n  ['Sin', '', '7+', () => new CpuUnaryOp(FLOAT_TYPES, unaryOps.sin)],\r\n  ['Sinh', '', '9+', () => new CpuUnaryOp(FLOAT_TYPES, unaryOps.sinh)],\r\n  ['Slice', '', '10+', () => new CpuSliceV10()],  // TODO: support 'steps' for Slice-10\r\n  ['Slice', '', '1-9', () => new CpuSlice()],\r\n  ['Softmax', '', '1+', () => new CpuSoftmax()],\r\n  ['Sqrt', '', '6+', () => new CpuUnaryOp(FLOAT_TYPES, unaryOps.sqrt)],\r\n  ['Squeeze', '', '1+', () => new CpuSqueeze()],\r\n  ['Sub', '', '7+', () => new CpuBinaryOp(NUMBER_TYPES, (e1, e2) => (e1 - e2))],\r\n  ['Sum', '', '6+', () => new CpuSum()],  // TODO: support multidirectional broadcast for Sum-8\r\n  ['Tan', '', '7+', () => new CpuUnaryOp(FLOAT_TYPES, unaryOps.tan)],\r\n  ['Tanh', '', '6+', () => new CpuUnaryOp(FLOAT_TYPES, unaryOps.tanh)],\r\n  ['Tile', '', '6+', () => new CpuTile()],\r\n  ['Transpose', '', '1+', () => new CpuTranspose()],\r\n  ['Unsqueeze', '', '1+', () => new CpuUnsqueeze()],\r\n  ['Xor', '', '7+', () => new CpuBinaryOp(['bool'], (e1, e2) => (e1 ^ e2))],\r\n];\r\n","\"use strict\";\r\nmodule.exports = Writer;\r\n\r\nvar util      = require(\"./util/minimal\");\r\n\r\nvar BufferWriter; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    base64    = util.base64,\r\n    utf8      = util.utf8;\r\n\r\n/**\r\n * Constructs a new writer operation instance.\r\n * @classdesc Scheduled writer operation.\r\n * @constructor\r\n * @param {function(*, Uint8Array, number)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {*} val Value to write\r\n * @ignore\r\n */\r\nfunction Op(fn, len, val) {\r\n\r\n    /**\r\n     * Function to call.\r\n     * @type {function(Uint8Array, number, *)}\r\n     */\r\n    this.fn = fn;\r\n\r\n    /**\r\n     * Value byte length.\r\n     * @type {number}\r\n     */\r\n    this.len = len;\r\n\r\n    /**\r\n     * Next operation.\r\n     * @type {Writer.Op|undefined}\r\n     */\r\n    this.next = undefined;\r\n\r\n    /**\r\n     * Value to write.\r\n     * @type {*}\r\n     */\r\n    this.val = val; // type varies\r\n}\r\n\r\n/* istanbul ignore next */\r\nfunction noop() {} // eslint-disable-line no-empty-function\r\n\r\n/**\r\n * Constructs a new writer state instance.\r\n * @classdesc Copied writer state.\r\n * @memberof Writer\r\n * @constructor\r\n * @param {Writer} writer Writer to copy state from\r\n * @ignore\r\n */\r\nfunction State(writer) {\r\n\r\n    /**\r\n     * Current head.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.head = writer.head;\r\n\r\n    /**\r\n     * Current tail.\r\n     * @type {Writer.Op}\r\n     */\r\n    this.tail = writer.tail;\r\n\r\n    /**\r\n     * Current buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = writer.len;\r\n\r\n    /**\r\n     * Next state.\r\n     * @type {State|null}\r\n     */\r\n    this.next = writer.states;\r\n}\r\n\r\n/**\r\n * Constructs a new writer instance.\r\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n */\r\nfunction Writer() {\r\n\r\n    /**\r\n     * Current length.\r\n     * @type {number}\r\n     */\r\n    this.len = 0;\r\n\r\n    /**\r\n     * Operations head.\r\n     * @type {Object}\r\n     */\r\n    this.head = new Op(noop, 0, 0);\r\n\r\n    /**\r\n     * Operations tail\r\n     * @type {Object}\r\n     */\r\n    this.tail = this.head;\r\n\r\n    /**\r\n     * Linked forked states.\r\n     * @type {Object|null}\r\n     */\r\n    this.states = null;\r\n\r\n    // When a value is written, the writer calculates its byte length and puts it into a linked\r\n    // list of operations to perform when finish() is called. This both allows us to allocate\r\n    // buffers of the exact required size and reduces the amount of work we have to do compared\r\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\r\n    // part is just a linked list walk calling operations with already prepared values.\r\n}\r\n\r\n/**\r\n * Creates a new writer.\r\n * @function\r\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\r\n */\r\nWriter.create = util.Buffer\r\n    ? function create_buffer_setup() {\r\n        return (Writer.create = function create_buffer() {\r\n            return new BufferWriter();\r\n        })();\r\n    }\r\n    /* istanbul ignore next */\r\n    : function create_array() {\r\n        return new Writer();\r\n    };\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\nWriter.alloc = function alloc(size) {\r\n    return new util.Array(size);\r\n};\r\n\r\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\r\n/* istanbul ignore else */\r\nif (util.Array !== Array)\r\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\r\n\r\n/**\r\n * Pushes a new operation to the queue.\r\n * @param {function(Uint8Array, number, *)} fn Function to call\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @returns {Writer} `this`\r\n * @private\r\n */\r\nWriter.prototype._push = function push(fn, len, val) {\r\n    this.tail = this.tail.next = new Op(fn, len, val);\r\n    this.len += len;\r\n    return this;\r\n};\r\n\r\nfunction writeByte(val, buf, pos) {\r\n    buf[pos] = val & 255;\r\n}\r\n\r\nfunction writeVarint32(val, buf, pos) {\r\n    while (val > 127) {\r\n        buf[pos++] = val & 127 | 128;\r\n        val >>>= 7;\r\n    }\r\n    buf[pos] = val;\r\n}\r\n\r\n/**\r\n * Constructs a new varint writer operation instance.\r\n * @classdesc Scheduled varint writer operation.\r\n * @extends Op\r\n * @constructor\r\n * @param {number} len Value byte length\r\n * @param {number} val Value to write\r\n * @ignore\r\n */\r\nfunction VarintOp(len, val) {\r\n    this.len = len;\r\n    this.next = undefined;\r\n    this.val = val;\r\n}\r\n\r\nVarintOp.prototype = Object.create(Op.prototype);\r\nVarintOp.prototype.fn = writeVarint32;\r\n\r\n/**\r\n * Writes an unsigned 32 bit value as a varint.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.uint32 = function write_uint32(value) {\r\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\r\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\r\n    this.len += (this.tail = this.tail.next = new VarintOp(\r\n        (value = value >>> 0)\r\n                < 128       ? 1\r\n        : value < 16384     ? 2\r\n        : value < 2097152   ? 3\r\n        : value < 268435456 ? 4\r\n        :                     5,\r\n    value)).len;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Writes a signed 32 bit value as a varint.\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.int32 = function write_int32(value) {\r\n    return value < 0\r\n        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\r\n        : this.uint32(value);\r\n};\r\n\r\n/**\r\n * Writes a 32 bit value as a varint, zig-zag encoded.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.sint32 = function write_sint32(value) {\r\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\r\n};\r\n\r\nfunction writeVarint64(val, buf, pos) {\r\n    while (val.hi) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\r\n        val.hi >>>= 7;\r\n    }\r\n    while (val.lo > 127) {\r\n        buf[pos++] = val.lo & 127 | 128;\r\n        val.lo = val.lo >>> 7;\r\n    }\r\n    buf[pos++] = val.lo;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 64 bit value as a varint.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.uint64 = function write_uint64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this._push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint.\r\n * @function\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.int64 = Writer.prototype.uint64;\r\n\r\n/**\r\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.sint64 = function write_sint64(value) {\r\n    var bits = LongBits.from(value).zzEncode();\r\n    return this._push(writeVarint64, bits.length(), bits);\r\n};\r\n\r\n/**\r\n * Writes a boolish value as a varint.\r\n * @param {boolean} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.bool = function write_bool(value) {\r\n    return this._push(writeByte, 1, value ? 1 : 0);\r\n};\r\n\r\nfunction writeFixed32(val, buf, pos) {\r\n    buf[pos    ] =  val         & 255;\r\n    buf[pos + 1] =  val >>> 8   & 255;\r\n    buf[pos + 2] =  val >>> 16  & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\n/**\r\n * Writes an unsigned 32 bit value as fixed 32 bits.\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.fixed32 = function write_fixed32(value) {\r\n    return this._push(writeFixed32, 4, value >>> 0);\r\n};\r\n\r\n/**\r\n * Writes a signed 32 bit value as fixed 32 bits.\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\r\n\r\n/**\r\n * Writes an unsigned 64 bit value as fixed 64 bits.\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.fixed64 = function write_fixed64(value) {\r\n    var bits = LongBits.from(value);\r\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\r\n};\r\n\r\n/**\r\n * Writes a signed 64 bit value as fixed 64 bits.\r\n * @function\r\n * @param {Long|number|string} value Value to write\r\n * @returns {Writer} `this`\r\n * @throws {TypeError} If `value` is a string and no long library is present.\r\n */\r\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\r\n\r\n/**\r\n * Writes a float (32 bit).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.float = function write_float(value) {\r\n    return this._push(util.float.writeFloatLE, 4, value);\r\n};\r\n\r\n/**\r\n * Writes a double (64 bit float).\r\n * @function\r\n * @param {number} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.double = function write_double(value) {\r\n    return this._push(util.float.writeDoubleLE, 8, value);\r\n};\r\n\r\nvar writeBytes = util.Array.prototype.set\r\n    ? function writeBytes_set(val, buf, pos) {\r\n        buf.set(val, pos); // also works for plain array values\r\n    }\r\n    /* istanbul ignore next */\r\n    : function writeBytes_for(val, buf, pos) {\r\n        for (var i = 0; i < val.length; ++i)\r\n            buf[pos + i] = val[i];\r\n    };\r\n\r\n/**\r\n * Writes a sequence of bytes.\r\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.bytes = function write_bytes(value) {\r\n    var len = value.length >>> 0;\r\n    if (!len)\r\n        return this._push(writeByte, 1, 0);\r\n    if (util.isString(value)) {\r\n        var buf = Writer.alloc(len = base64.length(value));\r\n        base64.decode(value, buf, 0);\r\n        value = buf;\r\n    }\r\n    return this.uint32(len)._push(writeBytes, len, value);\r\n};\r\n\r\n/**\r\n * Writes a string.\r\n * @param {string} value Value to write\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.string = function write_string(value) {\r\n    var len = utf8.length(value);\r\n    return len\r\n        ? this.uint32(len)._push(utf8.write, len, value)\r\n        : this._push(writeByte, 1, 0);\r\n};\r\n\r\n/**\r\n * Forks this writer's state by pushing it to a stack.\r\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.fork = function fork() {\r\n    this.states = new State(this);\r\n    this.head = this.tail = new Op(noop, 0, 0);\r\n    this.len = 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets this instance to the last state.\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.reset = function reset() {\r\n    if (this.states) {\r\n        this.head   = this.states.head;\r\n        this.tail   = this.states.tail;\r\n        this.len    = this.states.len;\r\n        this.states = this.states.next;\r\n    } else {\r\n        this.head = this.tail = new Op(noop, 0, 0);\r\n        this.len  = 0;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\r\n * @returns {Writer} `this`\r\n */\r\nWriter.prototype.ldelim = function ldelim() {\r\n    var head = this.head,\r\n        tail = this.tail,\r\n        len  = this.len;\r\n    this.reset().uint32(len);\r\n    if (len) {\r\n        this.tail.next = head.next; // skip noop\r\n        this.tail = tail;\r\n        this.len += len;\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Finishes the write operation.\r\n * @returns {Uint8Array} Finished buffer\r\n */\r\nWriter.prototype.finish = function finish() {\r\n    var head = this.head.next, // skip noop\r\n        buf  = this.constructor.alloc(this.len),\r\n        pos  = 0;\r\n    while (head) {\r\n        head.fn(head.val, buf, pos);\r\n        pos += head.len;\r\n        head = head.next;\r\n    }\r\n    // this.head = this.tail = null;\r\n    return buf;\r\n};\r\n\r\nWriter._configure = function(BufferWriter_) {\r\n    BufferWriter = BufferWriter_;\r\n};\r\n","\"use strict\";\r\nmodule.exports = Reader;\r\n\r\nvar util      = require(\"./util/minimal\");\r\n\r\nvar BufferReader; // cyclic\r\n\r\nvar LongBits  = util.LongBits,\r\n    utf8      = util.utf8;\r\n\r\n/* istanbul ignore next */\r\nfunction indexOutOfRange(reader, writeLength) {\r\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\r\n}\r\n\r\n/**\r\n * Constructs a new reader instance using the specified buffer.\r\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\r\n * @constructor\r\n * @param {Uint8Array} buffer Buffer to read from\r\n */\r\nfunction Reader(buffer) {\r\n\r\n    /**\r\n     * Read buffer.\r\n     * @type {Uint8Array}\r\n     */\r\n    this.buf = buffer;\r\n\r\n    /**\r\n     * Read buffer position.\r\n     * @type {number}\r\n     */\r\n    this.pos = 0;\r\n\r\n    /**\r\n     * Read buffer length.\r\n     * @type {number}\r\n     */\r\n    this.len = buffer.length;\r\n}\r\n\r\nvar create_array = typeof Uint8Array !== \"undefined\"\r\n    ? function create_typed_array(buffer) {\r\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\r\n            return new Reader(buffer);\r\n        throw Error(\"illegal buffer\");\r\n    }\r\n    /* istanbul ignore next */\r\n    : function create_array(buffer) {\r\n        if (Array.isArray(buffer))\r\n            return new Reader(buffer);\r\n        throw Error(\"illegal buffer\");\r\n    };\r\n\r\n/**\r\n * Creates a new reader using the specified buffer.\r\n * @function\r\n * @param {Uint8Array|Buffer} buffer Buffer to read from\r\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\r\n * @throws {Error} If `buffer` is not a valid buffer\r\n */\r\nReader.create = util.Buffer\r\n    ? function create_buffer_setup(buffer) {\r\n        return (Reader.create = function create_buffer(buffer) {\r\n            return util.Buffer.isBuffer(buffer)\r\n                ? new BufferReader(buffer)\r\n                /* istanbul ignore next */\r\n                : create_array(buffer);\r\n        })(buffer);\r\n    }\r\n    /* istanbul ignore next */\r\n    : create_array;\r\n\r\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\r\n\r\n/**\r\n * Reads a varint as an unsigned 32 bit value.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.uint32 = (function read_uint32_setup() {\r\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\r\n    return function read_uint32() {\r\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\r\n\r\n        /* istanbul ignore if */\r\n        if ((this.pos += 5) > this.len) {\r\n            this.pos = this.len;\r\n            throw indexOutOfRange(this, 10);\r\n        }\r\n        return value;\r\n    };\r\n})();\r\n\r\n/**\r\n * Reads a varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.int32 = function read_int32() {\r\n    return this.uint32() | 0;\r\n};\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 32 bit value.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.sint32 = function read_sint32() {\r\n    var value = this.uint32();\r\n    return value >>> 1 ^ -(value & 1) | 0;\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readLongVarint() {\r\n    // tends to deopt with local vars for octet etc.\r\n    var bits = new LongBits(0, 0);\r\n    var i = 0;\r\n    if (this.len - this.pos > 4) { // fast route (lo)\r\n        for (; i < 4; ++i) {\r\n            // 1st..4th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        // 5th\r\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\r\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\r\n        if (this.buf[this.pos++] < 128)\r\n            return bits;\r\n        i = 0;\r\n    } else {\r\n        for (; i < 3; ++i) {\r\n            /* istanbul ignore if */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 1st..3th\r\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n        // 4th\r\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\r\n        return bits;\r\n    }\r\n    if (this.len - this.pos > 4) { // fast route (hi)\r\n        for (; i < 5; ++i) {\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    } else {\r\n        for (; i < 5; ++i) {\r\n            /* istanbul ignore if */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n            // 6th..10th\r\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\r\n            if (this.buf[this.pos++] < 128)\r\n                return bits;\r\n        }\r\n    }\r\n    /* istanbul ignore next */\r\n    throw Error(\"invalid varint encoding\");\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads a varint as a signed 64 bit value.\r\n * @name Reader#int64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as an unsigned 64 bit value.\r\n * @name Reader#uint64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads a zig-zag encoded varint as a signed 64 bit value.\r\n * @name Reader#sint64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads a varint as a boolean.\r\n * @returns {boolean} Value read\r\n */\r\nReader.prototype.bool = function read_bool() {\r\n    return this.uint32() !== 0;\r\n};\r\n\r\nfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\r\n    return (buf[end - 4]\r\n          | buf[end - 3] << 8\r\n          | buf[end - 2] << 16\r\n          | buf[end - 1] << 24) >>> 0;\r\n}\r\n\r\n/**\r\n * Reads fixed 32 bits as an unsigned 32 bit integer.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.fixed32 = function read_fixed32() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    return readFixed32_end(this.buf, this.pos += 4);\r\n};\r\n\r\n/**\r\n * Reads fixed 32 bits as a signed 32 bit integer.\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.sfixed32 = function read_sfixed32() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\r\n};\r\n\r\n/* eslint-disable no-invalid-this */\r\n\r\nfunction readFixed64(/* this: Reader */) {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 8);\r\n\r\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\r\n}\r\n\r\n/* eslint-enable no-invalid-this */\r\n\r\n/**\r\n * Reads fixed 64 bits.\r\n * @name Reader#fixed64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads zig-zag encoded fixed 64 bits.\r\n * @name Reader#sfixed64\r\n * @function\r\n * @returns {Long} Value read\r\n */\r\n\r\n/**\r\n * Reads a float (32 bit) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.float = function read_float() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 4 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = util.float.readFloatLE(this.buf, this.pos);\r\n    this.pos += 4;\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a double (64 bit float) as a number.\r\n * @function\r\n * @returns {number} Value read\r\n */\r\nReader.prototype.double = function read_double() {\r\n\r\n    /* istanbul ignore if */\r\n    if (this.pos + 8 > this.len)\r\n        throw indexOutOfRange(this, 4);\r\n\r\n    var value = util.float.readDoubleLE(this.buf, this.pos);\r\n    this.pos += 8;\r\n    return value;\r\n};\r\n\r\n/**\r\n * Reads a sequence of bytes preceeded by its length as a varint.\r\n * @returns {Uint8Array} Value read\r\n */\r\nReader.prototype.bytes = function read_bytes() {\r\n    var length = this.uint32(),\r\n        start  = this.pos,\r\n        end    = this.pos + length;\r\n\r\n    /* istanbul ignore if */\r\n    if (end > this.len)\r\n        throw indexOutOfRange(this, length);\r\n\r\n    this.pos += length;\r\n    if (Array.isArray(this.buf)) // plain array\r\n        return this.buf.slice(start, end);\r\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\r\n        ? new this.buf.constructor(0)\r\n        : this._slice.call(this.buf, start, end);\r\n};\r\n\r\n/**\r\n * Reads a string preceeded by its byte length as a varint.\r\n * @returns {string} Value read\r\n */\r\nReader.prototype.string = function read_string() {\r\n    var bytes = this.bytes();\r\n    return utf8.read(bytes, 0, bytes.length);\r\n};\r\n\r\n/**\r\n * Skips the specified number of bytes if specified, otherwise skips a varint.\r\n * @param {number} [length] Length if known, otherwise a varint is assumed\r\n * @returns {Reader} `this`\r\n */\r\nReader.prototype.skip = function skip(length) {\r\n    if (typeof length === \"number\") {\r\n        /* istanbul ignore if */\r\n        if (this.pos + length > this.len)\r\n            throw indexOutOfRange(this, length);\r\n        this.pos += length;\r\n    } else {\r\n        do {\r\n            /* istanbul ignore if */\r\n            if (this.pos >= this.len)\r\n                throw indexOutOfRange(this);\r\n        } while (this.buf[this.pos++] & 128);\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Skips the next element of the specified wire type.\r\n * @param {number} wireType Wire type received\r\n * @returns {Reader} `this`\r\n */\r\nReader.prototype.skipType = function(wireType) {\r\n    switch (wireType) {\r\n        case 0:\r\n            this.skip();\r\n            break;\r\n        case 1:\r\n            this.skip(8);\r\n            break;\r\n        case 2:\r\n            this.skip(this.uint32());\r\n            break;\r\n        case 3:\r\n            while ((wireType = this.uint32() & 7) !== 4) {\r\n                this.skipType(wireType);\r\n            }\r\n            break;\r\n        case 5:\r\n            this.skip(4);\r\n            break;\r\n\r\n        /* istanbul ignore next */\r\n        default:\r\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\r\n    }\r\n    return this;\r\n};\r\n\r\nReader._configure = function(BufferReader_) {\r\n    BufferReader = BufferReader_;\r\n\r\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\r\n    util.merge(Reader.prototype, {\r\n\r\n        int64: function read_int64() {\r\n            return readLongVarint.call(this)[fn](false);\r\n        },\r\n\r\n        uint64: function read_uint64() {\r\n            return readLongVarint.call(this)[fn](true);\r\n        },\r\n\r\n        sint64: function read_sint64() {\r\n            return readLongVarint.call(this).zzDecode()[fn](false);\r\n        },\r\n\r\n        fixed64: function read_fixed64() {\r\n            return readFixed64.call(this)[fn](true);\r\n        },\r\n\r\n        sfixed64: function read_sfixed64() {\r\n            return readFixed64.call(this)[fn](false);\r\n        }\r\n\r\n    });\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class Concat implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.axis = attributes.getInt('axis');\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length < 1) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    const inputType = inputs[0].type;\r\n    const inputDimensionality = inputs[0].dims.length;\r\n\r\n    // TODO: Support string concat\r\n    if (inputType === 'string') {\r\n      return false;\r\n    }\r\n\r\n    for (const input of inputs) {\r\n      // make sure types of all inputs match\r\n      if (input.type !== inputType) {\r\n        return false;\r\n      }\r\n\r\n      // make sure the dimensionality of all inputs are the same\r\n      if (input.dims.length !== inputDimensionality) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  protected axis: number;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class Dropout implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.ratio = attributes.getFloat('ratio', 0.5);\r\n    this.testMode = true;  // this is a hack to reflect that test mode is hardcoded\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 1) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  protected ratio: number;\r\n  protected testMode: boolean;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class Flatten implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.axis = attributes.getInt('axis', 1);  // default axis is 1\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 1) {\r\n      return false;\r\n    }\r\n\r\n    if (inputs[0].dims.length === 0) {\r\n      return false;  // scalar tensor is not supported\r\n    }\r\n\r\n    if (this.axis < 0 || this.axis > inputs[0].dims.length) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    // TODO: Support string type\r\n    if (inputs[0].type === 'string') {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  protected axis: number;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {NUMBER_TYPES, Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class Gather implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.axis = attributes.getInt('axis', 0);\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 2) {\r\n      return false;\r\n    }\r\n    const tensorRank = inputs[0].dims.length;\r\n    if (tensorRank < 1) {\r\n      return false;\r\n    }\r\n    if (this.axis < -tensorRank || this.axis > tensorRank - 1) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\r\n      return false;\r\n    }\r\n    if (inputs[1].type !== 'int32' && inputs[1].type !== 'int16') {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  protected axis: number;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class ImageScaler implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.scale = attributes.getFloat('scale');\r\n    this.bias = attributes.getFloats('bias');\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 1) {\r\n      return false;\r\n    }\r\n\r\n    if (inputs[0].dims.length !== 4) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  protected scale: number;\r\n  protected bias: number[];\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class InstanceNormalization implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.epsilon = attributes.getFloat('epsilon', 1e-5);\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 3) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    const X = inputs[0];\r\n    const scale = inputs[1];\r\n    const B = inputs[2];\r\n\r\n    // input should atleast have three dimensions - N,C,dim1,...,dimn\r\n    // other inputs can have only one dimensions\r\n    if (X.dims.length < 3 || scale.dims.length !== 1 || B.dims.length !== 1) {\r\n      return false;\r\n    }\r\n    if (scale.dims[0] !== X.dims[1] || B.dims[0] !== X.dims[1]) {\r\n      return false;\r\n    }\r\n    if ((X.type !== 'float32' && X.type !== 'float64') || (scale.type !== 'float32' && scale.type !== 'float64') ||\r\n        (B.type !== 'float32' && B.type !== 'float64')) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  protected epsilon: number;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {NUMBER_TYPES, Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class ReduceBase implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.axes = attributes.getInts('axes', []);\r\n    this.keepDims = attributes.getInt('keepdims', 1) === 1;\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 1) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  protected axes: number[];\r\n  protected keepDims: boolean;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class Reshape implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {}\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 2 || inputs[1].dims.length !== 1) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\r\n      return false;\r\n    }\r\n\r\n    if (inputs[1].type !== 'int32') {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class Slice implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.starts = attributes.getInts('starts');\r\n    this.ends = attributes.getInts('ends');\r\n    this.axes = attributes.getInts('axes', []);\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 1) {\r\n      return false;\r\n    }\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  protected axes: number[];\r\n  protected ends: number[];\r\n  protected starts: number[];\r\n}\r\n\r\nexport abstract class SliceV10 implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {}\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length < 3 || inputs.length > 5) {\r\n      return false;\r\n    }\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (inputs[1].type !== 'int32' || inputs[1].dims.length !== 1) {\r\n      return false;\r\n    }\r\n    if (inputs[2].type !== 'int32' || inputs[2].dims.length !== 1) {\r\n      return false;\r\n    }\r\n    if (inputs.length >= 4 && (inputs[3].type !== 'int32' || inputs[3].dims.length !== 1)) {\r\n      return false;\r\n    }\r\n    if (inputs.length >= 5 && (inputs[4].type !== 'int32' || inputs[4].dims.length !== 1)) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class Squeeze implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.axes = attributes.getInts('axes');\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 1) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    // TODO: Support string type\r\n    if (inputs[0].type === 'string') {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  protected axes: number[];\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {NUMBER_TYPES, Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class Tile implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {}\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 2) {\r\n      return false;\r\n    }\r\n    if (inputs[1].dims.length !== 1) {\r\n      return false;\r\n    }\r\n    if (inputs[1].dims[0] !== inputs[0].dims.length) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\r\n      return false;\r\n    }\r\n    if (inputs[1].type !== 'int32' && inputs[1].type !== 'int16') {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class Transpose implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.perm = attributes.getInts('perm', []);\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 1) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  protected perm: number[];\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Attribute} from '../../../attribute';\r\nimport {UnaryOp} from '../../../ops/unary-op';\r\nimport {Tensor} from '../../../tensor';\r\nimport {CpuInferenceHandler} from '../inference-handler';\r\n\r\ntype UnaryOpCoreFunction<T> = (input: Tensor.NumberType, output: Tensor.NumberType, attributes?: T) => void;\r\n\r\nexport class CpuUnaryOp<T = unknown> extends UnaryOp {\r\n  private attributes?: T;\r\n\r\n  constructor(\r\n      typeConstraint: ReadonlyArray<Tensor.DataType>, private func: UnaryOpCoreFunction<T>,\r\n      private attributesInitializer?: (attributes: Attribute) => T, resultType?: Tensor.DataType) {\r\n    super(typeConstraint, resultType);\r\n  }\r\n\r\n  initialize(attributes: Attribute) {\r\n    if (this.attributesInitializer) {\r\n      this.attributes = this.attributesInitializer(attributes);\r\n    }\r\n  }\r\n\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    // TODO:  use webpack + ts-loader + CustomTransformer\r\n    // tslint:disable-next-line:max-line-length\r\n    // https://github.com/TypeStrong/ts-loader#getcustomtransformers-----before-transformerfactory-after-transformerfactory--\r\n    const output = unaryOp(inputs[0], this.func, this.attributes, this.resultType);\r\n    return [output];\r\n  }\r\n}\r\n\r\nexport function unaryOp<T>(\r\n    x: Tensor, func: UnaryOpCoreFunction<T>, attributes: T, resultType?: Tensor.DataType): Tensor {\r\n  const output = new Tensor(x.dims, resultType ? resultType : x.type);\r\n  const inputNumberData = x.data as Tensor.NumberType;\r\n  const outputNumberData = output.data as Tensor.NumberType;\r\n  func(inputNumberData, outputNumberData, attributes);\r\n  return output;\r\n}\r\n\r\n// specific implementations pertaining to each unary-op.\r\n// although this can be accomplished with an op lambda\r\n// that approach was found to be detrimental to performance\r\n// so we use this approach which involves slight code duplication\r\n\r\nexport function abs(input: Tensor.NumberType, output: Tensor.NumberType) {\r\n  for (let i = 0; i < input.length; i++) {\r\n    output[i] = Math.abs(input[i]);\r\n  }\r\n}\r\n\r\nexport function acos(input: Tensor.NumberType, output: Tensor.NumberType) {\r\n  for (let i = 0; i < input.length; i++) {\r\n    output[i] = Math.acos(input[i]);\r\n  }\r\n}\r\n\r\nexport function acosh(input: Tensor.NumberType, output: Tensor.NumberType) {\r\n  for (let i = 0; i < input.length; i++) {\r\n    output[i] = Math.acosh(input[i]);\r\n  }\r\n}\r\n\r\nexport function asin(input: Tensor.NumberType, output: Tensor.NumberType) {\r\n  for (let i = 0; i < input.length; i++) {\r\n    output[i] = Math.asin(input[i]);\r\n  }\r\n}\r\n\r\nexport function asinh(input: Tensor.NumberType, output: Tensor.NumberType) {\r\n  for (let i = 0; i < input.length; i++) {\r\n    output[i] = Math.asinh(input[i]);\r\n  }\r\n}\r\n\r\nexport function atan(input: Tensor.NumberType, output: Tensor.NumberType) {\r\n  for (let i = 0; i < input.length; i++) {\r\n    output[i] = Math.atan(input[i]);\r\n  }\r\n}\r\n\r\nexport function atanh(input: Tensor.NumberType, output: Tensor.NumberType) {\r\n  for (let i = 0; i < input.length; i++) {\r\n    output[i] = Math.atanh(input[i]);\r\n  }\r\n}\r\n\r\nexport function ceil(input: Tensor.NumberType, output: Tensor.NumberType) {\r\n  for (let i = 0; i < input.length; i++) {\r\n    output[i] = Math.ceil(input[i]);\r\n  }\r\n}\r\n\r\nexport function clipInitializer(attributes: Attribute) {\r\n  return {\r\n    min: attributes.getFloat('min', -3.4028234663852886e+38),\r\n    max: attributes.getFloat('max', 3.4028234663852886e+38)\r\n  };\r\n}\r\n\r\nexport function clip(input: Tensor.NumberType, output: Tensor.NumberType, attributes: {min: number, max: number}) {\r\n  const min = attributes.min;\r\n  const max = attributes.max;\r\n  for (let i = 0; i < input.length; i++) {\r\n    const value = input[i];\r\n    output[i] = (value < min) ? min : (value > max) ? max : value;\r\n  }\r\n}\r\n\r\nexport function cos(input: Tensor.NumberType, output: Tensor.NumberType) {\r\n  for (let i = 0; i < input.length; i++) {\r\n    output[i] = Math.cos(input[i]);\r\n  }\r\n}\r\n\r\nexport function cosh(input: Tensor.NumberType, output: Tensor.NumberType) {\r\n  for (let i = 0; i < input.length; i++) {\r\n    output[i] = Math.cosh(input[i]);\r\n  }\r\n}\r\n\r\nexport function eluInitializer(attributes: Attribute) {\r\n  return attributes.getFloat('alpha', 1.0);\r\n}\r\n\r\nexport function elu(input: Tensor.NumberType, output: Tensor.NumberType, attributes: number) {\r\n  const alpha = attributes;\r\n  for (let i = 0; i < input.length; i++) {\r\n    const value = input[i];\r\n    output[i] = value >= 0 ? value : alpha * (Math.exp(value) - 1.0);\r\n  }\r\n}\r\n\r\nexport function exp(input: Tensor.NumberType, output: Tensor.NumberType) {\r\n  for (let i = 0; i < input.length; i++) {\r\n    output[i] = Math.exp(input[i]);\r\n  }\r\n}\r\n\r\nexport function floor(input: Tensor.NumberType, output: Tensor.NumberType) {\r\n  for (let i = 0; i < input.length; i++) {\r\n    output[i] = Math.floor(input[i]);\r\n  }\r\n}\r\n\r\nexport function isNan(input: Tensor.NumberType, output: Tensor.BooleanType) {\r\n  for (let i = 0; i < input.length; i++) {\r\n    output[i] = Number.isNaN(input[i]) ? 1 : 0;\r\n  }\r\n}\r\n\r\nexport function leakyReluInitializer(attributes: Attribute) {\r\n  return attributes.getFloat('alpha', 0.01);\r\n}\r\n\r\nexport function leakyRelu(input: Tensor.NumberType, output: Tensor.NumberType, attributes: number) {\r\n  const alpha = attributes;\r\n  for (let i = 0; i < input.length; i++) {\r\n    const value = input[i];\r\n    output[i] = value >= 0 ? value : alpha * value;\r\n  }\r\n}\r\n\r\nexport function log(input: Tensor.NumberType, output: Tensor.NumberType) {\r\n  for (let i = 0; i < input.length; i++) {\r\n    output[i] = Math.log(input[i]);\r\n  }\r\n}\r\n\r\nexport function neg(input: Tensor.NumberType, output: Tensor.NumberType) {\r\n  for (let i = 0; i < input.length; i++) {\r\n    output[i] = -input[i];\r\n  }\r\n}\r\n\r\nexport function not(input: Tensor.BooleanType, output: Tensor.BooleanType) {\r\n  for (let i = 0; i < input.length; i++) {\r\n    output[i] = input[i] ? 0 : 1;\r\n  }\r\n}\r\n\r\nexport function reciprocal(input: Tensor.NumberType, output: Tensor.NumberType) {\r\n  for (let i = 0; i < input.length; i++) {\r\n    output[i] = 1.0 / input[i];\r\n  }\r\n}\r\n\r\nexport function relu(input: Tensor.NumberType, output: Tensor.NumberType) {\r\n  for (let i = 0; i < input.length; i++) {\r\n    output[i] = Math.max(0, input[i]);\r\n  }\r\n}\r\n\r\nexport function sigmoid(input: Tensor.NumberType, output: Tensor.NumberType) {\r\n  for (let i = 0; i < input.length; i++) {\r\n    output[i] = (1 / (1 + Math.exp(-input[i])));\r\n  }\r\n}\r\n\r\nexport function sign(input: Tensor.NumberType, output: Tensor.NumberType) {\r\n  for (let i = 0; i < input.length; i++) {\r\n    output[i] = input[i] > 0 ? 1 : input[i] < 0 ? -1 : 0;\r\n  }\r\n}\r\n\r\nexport function sin(input: Tensor.NumberType, output: Tensor.NumberType) {\r\n  for (let i = 0; i < input.length; i++) {\r\n    output[i] = Math.sin(input[i]);\r\n  }\r\n}\r\n\r\nexport function sinh(input: Tensor.NumberType, output: Tensor.NumberType) {\r\n  for (let i = 0; i < input.length; i++) {\r\n    output[i] = Math.sinh(input[i]);\r\n  }\r\n}\r\n\r\nexport function sqrt(input: Tensor.NumberType, output: Tensor.NumberType) {\r\n  for (let i = 0; i < input.length; i++) {\r\n    output[i] = Math.sqrt(input[i]);\r\n  }\r\n}\r\n\r\nexport function tan(input: Tensor.NumberType, output: Tensor.NumberType) {\r\n  for (let i = 0; i < input.length; i++) {\r\n    output[i] = Math.tan(input[i]);\r\n  }\r\n}\r\n\r\nexport function tanh(input: Tensor.NumberType, output: Tensor.NumberType) {\r\n  for (let i = 0; i < input.length; i++) {\r\n    output[i] = Math.tanh(input[i]);\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class UnaryOp implements Operator {\r\n  constructor(protected typeConstraint: ReadonlyArray<Tensor.DataType>, protected resultType?: Tensor.DataType) {}\r\n\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {}\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 1) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (this.typeConstraint.indexOf(inputs[0].type) === -1) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class Unsqueeze implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.axes = attributes.getInts('axes');\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 1) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    // TODO: Support string type\r\n    if (inputs[0].type === 'string') {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  protected axes: number[];\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class Clip implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.min = attributes.getFloat('min', -3.4028234663852886e+38);\r\n    this.max = attributes.getFloat('max', 3.4028234663852886e+38);\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 1) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  protected min: number;\r\n  protected max: number;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * Given a non RGBA shape calculate the R version\r\n * It is assumed that the dimensions are multiples of given channels\r\n * NOTE: it is always the last dim that gets packed.\r\n * @param unpackedShape original shape to create a packed version from\r\n */\r\nexport function getPackedShape(unpackedShape: ReadonlyArray<number>): ReadonlyArray<number> {\r\n  const len = unpackedShape.length;\r\n  return unpackedShape.slice(0, len - 1).concat(unpackedShape[len - 1] / 4);\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n// tslint:disable:use-named-parameter\r\n\r\nimport {Tensor as InternalTensor} from '../tensor';\r\nimport {Tensor as TensorInterface} from './tensor';\r\n\r\nimport * as Utils from './tensor-impl-utils';\r\n\r\ntype DataType = TensorInterface.DataType;\r\ntype Type = TensorInterface.Type;\r\ntype ElementType = TensorInterface.ElementType;\r\n\r\nexport class Tensor implements TensorInterface {\r\n  internalTensor: InternalTensor;\r\n  constructor(data: DataType|number[]|boolean[], type: Type, dims?: ReadonlyArray<number>) {\r\n    const inferredDims = dims ? dims : [data.length];\r\n    if (data.length === 0) {\r\n      throw new RangeError(`Tensor data should contain at least one element.`);\r\n    }\r\n    // convert regular arrays to typeArrays\r\n    if (Array.isArray(data) && type !== 'string') {\r\n      if (type === 'float32') {\r\n        // convert number[] to Float32Array\r\n        this.data = Float32Array.from(data as number[]);\r\n      } else if (type === 'bool') {\r\n        // convert boolean[] to Uint8Array\r\n        this.data = Uint8Array.from(data as number[]);\r\n      } else if (type === 'int32') {\r\n        // convert number[] to Int32Array\r\n        this.data = Int32Array.from(data as number[]);\r\n      }\r\n    } else {\r\n      this.data = data as DataType;\r\n    }\r\n\r\n    this.dims = inferredDims;\r\n    this.type = type;\r\n    this.internalTensor = new InternalTensor(this.dims, this.type, undefined, undefined, this.data);\r\n    this.size = this.internalTensor.size;\r\n  }\r\n\r\n  dims: ReadonlyArray<number>;\r\n  type: Type;\r\n  size: number;\r\n  data: DataType;\r\n  get(...indices: number[]): ElementType;\r\n  get(indices: ReadonlyArray<number>): ElementType;\r\n  get(indices?: ReadonlyArray<number>|number, ...rest: number[]): ElementType {\r\n    let indexArray: ReadonlyArray<number> = [];\r\n    if (typeof indices === 'number') {\r\n      indexArray = [indices, ...rest];\r\n    } else if (indices) {\r\n      indexArray = indices;\r\n    } else {\r\n      throw new Error(`Input index array is undefined. `);\r\n    }\r\n    // check dims\r\n    Utils.validateIndices(indexArray);\r\n    if (indexArray.length !== this.dims.length) {\r\n      throw new RangeError(`Input index array dims don't match the tensor dims.`);\r\n    }\r\n    // compute the flattened index\r\n    indexArray.forEach((dim: number, idx: number) => {\r\n      if (dim >= this.dims[idx]) {\r\n        throw new RangeError(`Input index array dims don't match the tensor dims.`);\r\n      }\r\n    });\r\n    const value = this.internalTensor.get(indexArray);\r\n    if (this.type === 'bool') {\r\n      return value === 1 ? true : false;\r\n    }\r\n    return value;\r\n  }\r\n  set(value: ElementType, ...indices: number[]): void;\r\n  set(value: ElementType, indices: ReadonlyArray<number>): void;\r\n  set(value: ElementType, indices?: ReadonlyArray<number>|number, ...rest: number[]) {\r\n    Utils.matchElementType(this.type, value);\r\n    let indexArray: ReadonlyArray<number> = [];\r\n    if (typeof indices === 'number') {\r\n      indexArray = [indices, ...rest];\r\n    } else if (indices) {\r\n      indexArray = indices;\r\n    } else {\r\n      throw new Error(`Input index array is undefined.`);\r\n    }\r\n    // check dims\r\n    Utils.validateIndices(indexArray);\r\n    if (indexArray.length !== this.dims.length) {\r\n      throw new RangeError(`Input index array dims don't match the tensor dims.`);\r\n    }\r\n    // compute the flattened index\r\n    indexArray.forEach((dim: number, idx: number) => {\r\n      if (dim >= this.dims[idx]) {\r\n        throw new RangeError(`Input index array dims don't match the tensor dims.`);\r\n      }\r\n    });\r\n\r\n    if (typeof value === 'boolean') {\r\n      this.internalTensor.set(indexArray, value ? 1 : 0);\r\n    } else {\r\n      this.internalTensor.set(indexArray, value);\r\n    }\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Tensor as InternalTensor} from '../tensor';\r\nimport {Tensor as TensorInterface} from './tensor';\r\nimport {Tensor as ApiTensor} from './tensor-impl';\r\n\r\nexport function fromInternalTensor(internalTensor: InternalTensor): ApiTensor {\r\n  switch (internalTensor.type) {\r\n    case 'bool':\r\n      return new ApiTensor(new Uint8Array(internalTensor.integerData), 'bool', internalTensor.dims);\r\n    case 'float32':\r\n      return new ApiTensor(internalTensor.floatData as Float32Array, 'float32', internalTensor.dims);\r\n    case 'float64':\r\n      return new ApiTensor(new Float32Array(internalTensor.floatData), 'float32', internalTensor.dims);\r\n    case 'string':\r\n      return new ApiTensor(internalTensor.stringData, 'string', internalTensor.dims);\r\n    case 'int8' || 'uint8' || 'int16' || 'uint16' || 'uint32':\r\n      return new ApiTensor(new Int32Array(internalTensor.integerData), 'int32', internalTensor.dims);\r\n    case 'int32':\r\n      return new ApiTensor(internalTensor.integerData as Int32Array, 'int32', internalTensor.dims);\r\n    default:\r\n      throw new TypeError('Tensor type is not supported. ');\r\n  }\r\n}\r\n\r\nexport function toInternalTensor(tensor: ApiTensor): InternalTensor {\r\n  return new InternalTensor(tensor.dims, tensor.type, undefined, undefined, tensor.data);\r\n}\r\n\r\nexport function matchElementType(type: TensorInterface.Type, element: TensorInterface.ElementType) {\r\n  switch (typeof element) {\r\n    case 'string':\r\n      if (type !== 'string') {\r\n        throw new TypeError(`The new element type doesn't match the tensor data type.`);\r\n      }\r\n      break;\r\n    case 'number':\r\n      if (type !== 'float32' && type !== 'int32') {\r\n        throw new TypeError(`The new element type doesn't match the tensor data type.`);\r\n      }\r\n      if (type === 'float32' && Number.isInteger(element)) {\r\n        throw new TypeError(`The new element type doesn't match the tensor data type.`);\r\n      }\r\n      if (type === 'int32' && !Number.isInteger(element)) {\r\n        throw new TypeError(`The new element type doesn't match the tensor data type.`);\r\n      }\r\n      break;\r\n    case 'boolean':\r\n      if (type !== 'bool') {\r\n        throw new TypeError(`The new element type doesn't match the tensor data type.`);\r\n      }\r\n      break;\r\n    default:\r\n      throw new TypeError(`The new element type is not supported.`);\r\n  }\r\n}\r\n\r\nexport function validateIndices(indices: ReadonlyArray<number>) {\r\n  if (indices.length < 0 || indices.length > 6) {\r\n    throw new RangeError(`Only rank 0 to 6 is supported for tensor shape.`);\r\n  }\r\n  for (const n of indices) {\r\n    if (!Number.isInteger(n)) {\r\n      throw new TypeError(`Invalid index: ${n} is not an integer`);\r\n    }\r\n    if (n < 0 || n > 2147483647) {\r\n      throw new TypeError(`Invalid index: length ${n} is not allowed`);\r\n    }\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {CpuBackend} from '../backends/backend-cpu';\r\nimport {WasmBackend} from '../backends/backend-wasm';\r\nimport {WebGLBackend} from '../backends/backend-webgl';\r\n\r\nimport {Environment} from './env';\r\nimport {envImpl} from './env-impl';\r\nimport {Backend} from './onnx';\r\n\r\nexport * from './env';\r\nexport * from './onnx';\r\nexport * from './tensor';\r\nexport * from './inference-session';\r\n\r\nexport const backend: Backend = {\r\n  cpu: new CpuBackend(),\r\n  wasm: new WasmBackend(),\r\n  webgl: new WebGLBackend()\r\n};\r\n\r\nexport const ENV: Environment = envImpl;\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Backend as BackendInterface} from '../api/onnx';\r\nimport {Backend, SessionHandler} from '../backend';\r\nimport {Session} from '../session';\r\n\r\nimport {CpuSessionHandler} from './cpu/session-handler';\r\n\r\ntype CpuOptions = BackendInterface.CpuOptions;\r\n\r\nexport class CpuBackend implements Backend, CpuOptions {\r\n  disabled?: boolean;\r\n\r\n  initialize(): boolean {\r\n    return true;\r\n  }\r\n  createSessionHandler(context: Session.Context): SessionHandler {\r\n    return new CpuSessionHandler(this, context);\r\n  }\r\n  dispose(): void {}\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Backend, InferenceHandler, SessionHandler} from '../../backend';\r\nimport {Graph} from '../../graph';\r\nimport {Operator} from '../../operators';\r\nimport {OpSet, resolveOperator} from '../../opset';\r\nimport {Session} from '../../session';\r\n\r\nimport {CpuInferenceHandler} from './inference-handler';\r\nimport {CPU_OP_RESOLVE_RULES} from './op-resolve-rules';\r\n\r\nexport class CpuSessionHandler implements SessionHandler {\r\n  constructor(readonly backend: Backend, readonly context: Session.Context) {}\r\n\r\n  createInferenceHandler(): InferenceHandler {\r\n    return new CpuInferenceHandler(this, this.context.profiler);\r\n  }\r\n\r\n  dispose(): void {}\r\n\r\n  resolve(node: Graph.Node, opsets: ReadonlyArray<OpSet>): Operator {\r\n    const op = resolveOperator(node, opsets, CPU_OP_RESOLVE_RULES);\r\n    op.initialize(node.attributes);\r\n    return op;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {InferenceHandler} from '../../backend';\r\nimport {Profiler} from '../../instrument';\r\n\r\nimport {CpuSessionHandler} from './session-handler';\r\n\r\nexport class CpuInferenceHandler implements InferenceHandler {\r\n  constructor(public readonly session: CpuSessionHandler, public readonly profiler?: Readonly<Profiler>) {}\r\n\r\n  dispose(): void {}\r\n}\r\n","import {ArgMax} from '../../../ops/argMax';\r\nimport {Tensor} from '../../../tensor';\r\nimport {BroadcastUtil, ReduceUtil, ShapeUtil} from '../../../util';\r\nimport {CpuInferenceHandler} from '../inference-handler';\r\n\r\nexport class CpuArgMax extends ArgMax {\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]> {\r\n    const output = argMax(inputs[0], this.axis, this.keepDims);\r\n    return [output];\r\n  }\r\n}\r\n\r\nexport function argMax(x: Tensor, axis: number, keepdims: boolean): Tensor {\r\n  const rank = x.dims ? x.dims.length : 1;\r\n  axis = ShapeUtil.parseAxis(axis, rank);\r\n  const outputDims = ReduceUtil.calcReduceShape(x.dims, [axis], true);\r\n  const X = x.data;\r\n  const Y = new Int32Array(ShapeUtil.size(outputDims));\r\n  const blockSize = ShapeUtil.sizeFromDimension(x.dims, axis + 1);\r\n  const strides = ShapeUtil.computeStrides(outputDims);\r\n  const inputStrides = ShapeUtil.computeStrides(x.dims);\r\n  const indicesY = new Array(x.dims.length);\r\n  for (let i = 0; i < Y.length; i++) {\r\n    const indices = ShapeUtil.offsetToIndices(i, strides);\r\n    // map index\r\n    BroadcastUtil.fillIndex(indices, x.dims, indicesY);\r\n    const offset = ShapeUtil.indicesToOffset(indicesY, inputStrides);\r\n    let max = x.data[offset];\r\n    let index = 0;\r\n    for (let j = 0; j < x.dims[axis]; ++j) {\r\n      const value = X[offset + j * blockSize];\r\n      if (value > max) {\r\n        max = value;\r\n        index = j;\r\n      }\r\n    }\r\n    Y[i] = index;\r\n  }\r\n\r\n  return new Tensor(\r\n      keepdims ? outputDims : ReduceUtil.calcReduceShape(x.dims, [axis], keepdims), 'int32', undefined, undefined, Y);\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {NUMBER_TYPES, Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class ArgMax implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.axis = attributes.getInt('axis', 0);\r\n    this.keepDims = attributes.getInt('keepdims', 1) === 1;\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 1) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (NUMBER_TYPES.indexOf(inputs[0].type) === -1) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  protected axis: number;\r\n  protected keepDims: boolean;\r\n}\r\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  for (var i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n","// minimal library entry point.\r\n\r\n\"use strict\";\r\nmodule.exports = require(\"./src/index-minimal\");\r\n","\"use strict\";\r\nvar protobuf = exports;\r\n\r\n/**\r\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\r\n * @name build\r\n * @type {string}\r\n * @const\r\n */\r\nprotobuf.build = \"minimal\";\r\n\r\n// Serialization\r\nprotobuf.Writer       = require(\"./writer\");\r\nprotobuf.BufferWriter = require(\"./writer_buffer\");\r\nprotobuf.Reader       = require(\"./reader\");\r\nprotobuf.BufferReader = require(\"./reader_buffer\");\r\n\r\n// Utility\r\nprotobuf.util         = require(\"./util/minimal\");\r\nprotobuf.rpc          = require(\"./rpc\");\r\nprotobuf.roots        = require(\"./roots\");\r\nprotobuf.configure    = configure;\r\n\r\n/* istanbul ignore next */\r\n/**\r\n * Reconfigures the library according to the environment.\r\n * @returns {undefined}\r\n */\r\nfunction configure() {\r\n    protobuf.Reader._configure(protobuf.BufferReader);\r\n    protobuf.util._configure();\r\n}\r\n\r\n// Set up buffer utility according to the environment\r\nprotobuf.Writer._configure(protobuf.BufferWriter);\r\nconfigure();\r\n","\"use strict\";\r\nmodule.exports = asPromise;\r\n\r\n/**\r\n * Callback as used by {@link util.asPromise}.\r\n * @typedef asPromiseCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {...*} params Additional arguments\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {asPromiseCallback} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\r\nfunction asPromise(fn, ctx/*, varargs */) {\r\n    var params  = new Array(arguments.length - 1),\r\n        offset  = 0,\r\n        index   = 2,\r\n        pending = true;\r\n    while (index < arguments.length)\r\n        params[offset++] = arguments[index++];\r\n    return new Promise(function executor(resolve, reject) {\r\n        params[offset] = function callback(err/*, varargs */) {\r\n            if (pending) {\r\n                pending = false;\r\n                if (err)\r\n                    reject(err);\r\n                else {\r\n                    var params = new Array(arguments.length - 1),\r\n                        offset = 0;\r\n                    while (offset < params.length)\r\n                        params[offset++] = arguments[offset];\r\n                    resolve.apply(null, params);\r\n                }\r\n            }\r\n        };\r\n        try {\r\n            fn.apply(ctx || null, params);\r\n        } catch (err) {\r\n            if (pending) {\r\n                pending = false;\r\n                reject(err);\r\n            }\r\n        }\r\n    });\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar base64 = exports;\r\n\r\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\r\nbase64.length = function length(string) {\r\n    var p = string.length;\r\n    if (!p)\r\n        return 0;\r\n    var n = 0;\r\n    while (--p % 4 > 1 && string.charAt(p) === \"=\")\r\n        ++n;\r\n    return Math.ceil(string.length * 3) / 4 - n;\r\n};\r\n\r\n// Base64 encoding table\r\nvar b64 = new Array(64);\r\n\r\n// Base64 decoding table\r\nvar s64 = new Array(123);\r\n\r\n// 65..90, 97..122, 48..57, 43, 47\r\nfor (var i = 0; i < 64;)\r\n    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\r\n\r\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\r\nbase64.encode = function encode(buffer, start, end) {\r\n    var parts = null,\r\n        chunk = [];\r\n    var i = 0, // output index\r\n        j = 0, // goto index\r\n        t;     // temporary\r\n    while (start < end) {\r\n        var b = buffer[start++];\r\n        switch (j) {\r\n            case 0:\r\n                chunk[i++] = b64[b >> 2];\r\n                t = (b & 3) << 4;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                chunk[i++] = b64[t | b >> 4];\r\n                t = (b & 15) << 2;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                chunk[i++] = b64[t | b >> 6];\r\n                chunk[i++] = b64[b & 63];\r\n                j = 0;\r\n                break;\r\n        }\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (j) {\r\n        chunk[i++] = b64[t];\r\n        chunk[i++] = 61;\r\n        if (j === 1)\r\n            chunk[i++] = 61;\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\nvar invalidEncoding = \"invalid encoding\";\r\n\r\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\r\nbase64.decode = function decode(string, buffer, offset) {\r\n    var start = offset;\r\n    var j = 0, // goto index\r\n        t;     // temporary\r\n    for (var i = 0; i < string.length;) {\r\n        var c = string.charCodeAt(i++);\r\n        if (c === 61 && j > 1)\r\n            break;\r\n        if ((c = s64[c]) === undefined)\r\n            throw Error(invalidEncoding);\r\n        switch (j) {\r\n            case 0:\r\n                t = c;\r\n                j = 1;\r\n                break;\r\n            case 1:\r\n                buffer[offset++] = t << 2 | (c & 48) >> 4;\r\n                t = c;\r\n                j = 2;\r\n                break;\r\n            case 2:\r\n                buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\r\n                t = c;\r\n                j = 3;\r\n                break;\r\n            case 3:\r\n                buffer[offset++] = (t & 3) << 6 | c;\r\n                j = 0;\r\n                break;\r\n        }\r\n    }\r\n    if (j === 1)\r\n        throw Error(invalidEncoding);\r\n    return offset - start;\r\n};\r\n\r\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\r\nbase64.test = function test(string) {\r\n    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\r\n};\r\n","\"use strict\";\r\nmodule.exports = EventEmitter;\r\n\r\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\r\nfunction EventEmitter() {\r\n\r\n    /**\r\n     * Registered listeners.\r\n     * @type {Object.<string,*>}\r\n     * @private\r\n     */\r\n    this._listeners = {};\r\n}\r\n\r\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\r\n    (this._listeners[evt] || (this._listeners[evt] = [])).push({\r\n        fn  : fn,\r\n        ctx : ctx || this\r\n    });\r\n    return this;\r\n};\r\n\r\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.off = function off(evt, fn) {\r\n    if (evt === undefined)\r\n        this._listeners = {};\r\n    else {\r\n        if (fn === undefined)\r\n            this._listeners[evt] = [];\r\n        else {\r\n            var listeners = this._listeners[evt];\r\n            for (var i = 0; i < listeners.length;)\r\n                if (listeners[i].fn === fn)\r\n                    listeners.splice(i, 1);\r\n                else\r\n                    ++i;\r\n        }\r\n    }\r\n    return this;\r\n};\r\n\r\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\r\nEventEmitter.prototype.emit = function emit(evt) {\r\n    var listeners = this._listeners[evt];\r\n    if (listeners) {\r\n        var args = [],\r\n            i = 1;\r\n        for (; i < arguments.length;)\r\n            args.push(arguments[i++]);\r\n        for (i = 0; i < listeners.length;)\r\n            listeners[i].fn.apply(listeners[i++].ctx, args);\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\n\r\nmodule.exports = factory(factory);\r\n\r\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\r\n\r\n// Factory function for the purpose of node-based testing in modified global environments\r\nfunction factory(exports) {\r\n\r\n    // float: typed array\r\n    if (typeof Float32Array !== \"undefined\") (function() {\r\n\r\n        var f32 = new Float32Array([ -0 ]),\r\n            f8b = new Uint8Array(f32.buffer),\r\n            le  = f8b[3] === 128;\r\n\r\n        function writeFloat_f32_cpy(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n        }\r\n\r\n        function writeFloat_f32_rev(val, buf, pos) {\r\n            f32[0] = val;\r\n            buf[pos    ] = f8b[3];\r\n            buf[pos + 1] = f8b[2];\r\n            buf[pos + 2] = f8b[1];\r\n            buf[pos + 3] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\r\n\r\n        function readFloat_f32_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        function readFloat_f32_rev(buf, pos) {\r\n            f8b[3] = buf[pos    ];\r\n            f8b[2] = buf[pos + 1];\r\n            f8b[1] = buf[pos + 2];\r\n            f8b[0] = buf[pos + 3];\r\n            return f32[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\r\n        /* istanbul ignore next */\r\n        exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\r\n\r\n    // float: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeFloat_ieee754(writeUint, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0)\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos);\r\n            else if (isNaN(val))\r\n                writeUint(2143289344, buf, pos);\r\n            else if (val > 3.4028234663852886e+38) // +-Infinity\r\n                writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);\r\n            else if (val < 1.1754943508222875e-38) // denormal\r\n                writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);\r\n            else {\r\n                var exponent = Math.floor(Math.log(val) / Math.LN2),\r\n                    mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\r\n                writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\r\n            }\r\n        }\r\n\r\n        exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\r\n        exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\r\n\r\n        function readFloat_ieee754(readUint, buf, pos) {\r\n            var uint = readUint(buf, pos),\r\n                sign = (uint >> 31) * 2 + 1,\r\n                exponent = uint >>> 23 & 255,\r\n                mantissa = uint & 8388607;\r\n            return exponent === 255\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 1.401298464324817e-45 * mantissa\r\n                : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\r\n        }\r\n\r\n        exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\r\n        exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\r\n\r\n    })();\r\n\r\n    // double: typed array\r\n    if (typeof Float64Array !== \"undefined\") (function() {\r\n\r\n        var f64 = new Float64Array([-0]),\r\n            f8b = new Uint8Array(f64.buffer),\r\n            le  = f8b[7] === 128;\r\n\r\n        function writeDouble_f64_cpy(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[0];\r\n            buf[pos + 1] = f8b[1];\r\n            buf[pos + 2] = f8b[2];\r\n            buf[pos + 3] = f8b[3];\r\n            buf[pos + 4] = f8b[4];\r\n            buf[pos + 5] = f8b[5];\r\n            buf[pos + 6] = f8b[6];\r\n            buf[pos + 7] = f8b[7];\r\n        }\r\n\r\n        function writeDouble_f64_rev(val, buf, pos) {\r\n            f64[0] = val;\r\n            buf[pos    ] = f8b[7];\r\n            buf[pos + 1] = f8b[6];\r\n            buf[pos + 2] = f8b[5];\r\n            buf[pos + 3] = f8b[4];\r\n            buf[pos + 4] = f8b[3];\r\n            buf[pos + 5] = f8b[2];\r\n            buf[pos + 6] = f8b[1];\r\n            buf[pos + 7] = f8b[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\r\n\r\n        function readDouble_f64_cpy(buf, pos) {\r\n            f8b[0] = buf[pos    ];\r\n            f8b[1] = buf[pos + 1];\r\n            f8b[2] = buf[pos + 2];\r\n            f8b[3] = buf[pos + 3];\r\n            f8b[4] = buf[pos + 4];\r\n            f8b[5] = buf[pos + 5];\r\n            f8b[6] = buf[pos + 6];\r\n            f8b[7] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        function readDouble_f64_rev(buf, pos) {\r\n            f8b[7] = buf[pos    ];\r\n            f8b[6] = buf[pos + 1];\r\n            f8b[5] = buf[pos + 2];\r\n            f8b[4] = buf[pos + 3];\r\n            f8b[3] = buf[pos + 4];\r\n            f8b[2] = buf[pos + 5];\r\n            f8b[1] = buf[pos + 6];\r\n            f8b[0] = buf[pos + 7];\r\n            return f64[0];\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\r\n        /* istanbul ignore next */\r\n        exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\r\n\r\n    // double: ieee754\r\n    })(); else (function() {\r\n\r\n        function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\r\n            var sign = val < 0 ? 1 : 0;\r\n            if (sign)\r\n                val = -val;\r\n            if (val === 0) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(1 / val > 0 ? /* positive */ 0 : /* negative 0 */ 2147483648, buf, pos + off1);\r\n            } else if (isNaN(val)) {\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint(2146959360, buf, pos + off1);\r\n            } else if (val > 1.7976931348623157e+308) { // +-Infinity\r\n                writeUint(0, buf, pos + off0);\r\n                writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\r\n            } else {\r\n                var mantissa;\r\n                if (val < 2.2250738585072014e-308) { // denormal\r\n                    mantissa = val / 5e-324;\r\n                    writeUint(mantissa >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\r\n                } else {\r\n                    var exponent = Math.floor(Math.log(val) / Math.LN2);\r\n                    if (exponent === 1024)\r\n                        exponent = 1023;\r\n                    mantissa = val * Math.pow(2, -exponent);\r\n                    writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\r\n                    writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\r\n                }\r\n            }\r\n        }\r\n\r\n        exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\r\n        exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\r\n\r\n        function readDouble_ieee754(readUint, off0, off1, buf, pos) {\r\n            var lo = readUint(buf, pos + off0),\r\n                hi = readUint(buf, pos + off1);\r\n            var sign = (hi >> 31) * 2 + 1,\r\n                exponent = hi >>> 20 & 2047,\r\n                mantissa = 4294967296 * (hi & 1048575) + lo;\r\n            return exponent === 2047\r\n                ? mantissa\r\n                ? NaN\r\n                : sign * Infinity\r\n                : exponent === 0 // denormal\r\n                ? sign * 5e-324 * mantissa\r\n                : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\r\n        }\r\n\r\n        exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\r\n        exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\r\n\r\n    })();\r\n\r\n    return exports;\r\n}\r\n\r\n// uint helpers\r\n\r\nfunction writeUintLE(val, buf, pos) {\r\n    buf[pos    ] =  val        & 255;\r\n    buf[pos + 1] =  val >>> 8  & 255;\r\n    buf[pos + 2] =  val >>> 16 & 255;\r\n    buf[pos + 3] =  val >>> 24;\r\n}\r\n\r\nfunction writeUintBE(val, buf, pos) {\r\n    buf[pos    ] =  val >>> 24;\r\n    buf[pos + 1] =  val >>> 16 & 255;\r\n    buf[pos + 2] =  val >>> 8  & 255;\r\n    buf[pos + 3] =  val        & 255;\r\n}\r\n\r\nfunction readUintLE(buf, pos) {\r\n    return (buf[pos    ]\r\n          | buf[pos + 1] << 8\r\n          | buf[pos + 2] << 16\r\n          | buf[pos + 3] << 24) >>> 0;\r\n}\r\n\r\nfunction readUintBE(buf, pos) {\r\n    return (buf[pos    ] << 24\r\n          | buf[pos + 1] << 16\r\n          | buf[pos + 2] << 8\r\n          | buf[pos + 3]) >>> 0;\r\n}\r\n","\"use strict\";\r\nmodule.exports = inquire;\r\n\r\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\r\nfunction inquire(moduleName) {\r\n    try {\r\n        var mod = eval(\"quire\".replace(/^/,\"re\"))(moduleName); // eslint-disable-line no-eval\r\n        if (mod && (mod.length || Object.keys(mod).length))\r\n            return mod;\r\n    } catch (e) {} // eslint-disable-line no-empty\r\n    return null;\r\n}\r\n","\"use strict\";\r\n\r\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\r\nvar utf8 = exports;\r\n\r\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\r\nutf8.length = function utf8_length(string) {\r\n    var len = 0,\r\n        c = 0;\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c = string.charCodeAt(i);\r\n        if (c < 128)\r\n            len += 1;\r\n        else if (c < 2048)\r\n            len += 2;\r\n        else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\r\n            ++i;\r\n            len += 4;\r\n        } else\r\n            len += 3;\r\n    }\r\n    return len;\r\n};\r\n\r\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\r\nutf8.read = function utf8_read(buffer, start, end) {\r\n    var len = end - start;\r\n    if (len < 1)\r\n        return \"\";\r\n    var parts = null,\r\n        chunk = [],\r\n        i = 0, // char offset\r\n        t;     // temporary\r\n    while (start < end) {\r\n        t = buffer[start++];\r\n        if (t < 128)\r\n            chunk[i++] = t;\r\n        else if (t > 191 && t < 224)\r\n            chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;\r\n        else if (t > 239 && t < 365) {\r\n            t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\r\n            chunk[i++] = 0xD800 + (t >> 10);\r\n            chunk[i++] = 0xDC00 + (t & 1023);\r\n        } else\r\n            chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\r\n        if (i > 8191) {\r\n            (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\r\n            i = 0;\r\n        }\r\n    }\r\n    if (parts) {\r\n        if (i)\r\n            parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\r\n        return parts.join(\"\");\r\n    }\r\n    return String.fromCharCode.apply(String, chunk.slice(0, i));\r\n};\r\n\r\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\r\nutf8.write = function utf8_write(string, buffer, offset) {\r\n    var start = offset,\r\n        c1, // character 1\r\n        c2; // character 2\r\n    for (var i = 0; i < string.length; ++i) {\r\n        c1 = string.charCodeAt(i);\r\n        if (c1 < 128) {\r\n            buffer[offset++] = c1;\r\n        } else if (c1 < 2048) {\r\n            buffer[offset++] = c1 >> 6       | 192;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\r\n            c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\r\n            ++i;\r\n            buffer[offset++] = c1 >> 18      | 240;\r\n            buffer[offset++] = c1 >> 12 & 63 | 128;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        } else {\r\n            buffer[offset++] = c1 >> 12      | 224;\r\n            buffer[offset++] = c1 >> 6  & 63 | 128;\r\n            buffer[offset++] = c1       & 63 | 128;\r\n        }\r\n    }\r\n    return offset - start;\r\n};\r\n","\"use strict\";\r\nmodule.exports = pool;\r\n\r\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\r\n\r\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\r\n\r\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\r\nfunction pool(alloc, slice, size) {\r\n    var SIZE   = size || 8192;\r\n    var MAX    = SIZE >>> 1;\r\n    var slab   = null;\r\n    var offset = SIZE;\r\n    return function pool_alloc(size) {\r\n        if (size < 1 || size > MAX)\r\n            return alloc(size);\r\n        if (offset + size > SIZE) {\r\n            slab = alloc(SIZE);\r\n            offset = 0;\r\n        }\r\n        var buf = slice.call(slab, offset, offset += size);\r\n        if (offset & 7) // align to 32 bit\r\n            offset = (offset | 7) + 1;\r\n        return buf;\r\n    };\r\n}\r\n","\"use strict\";\r\nmodule.exports = LongBits;\r\n\r\nvar util = require(\"../util/minimal\");\r\n\r\n/**\r\n * Constructs new long bits.\r\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\r\n * @memberof util\r\n * @constructor\r\n * @param {number} lo Low 32 bits, unsigned\r\n * @param {number} hi High 32 bits, unsigned\r\n */\r\nfunction LongBits(lo, hi) {\r\n\r\n    // note that the casts below are theoretically unnecessary as of today, but older statically\r\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\r\n\r\n    /**\r\n     * Low bits.\r\n     * @type {number}\r\n     */\r\n    this.lo = lo >>> 0;\r\n\r\n    /**\r\n     * High bits.\r\n     * @type {number}\r\n     */\r\n    this.hi = hi >>> 0;\r\n}\r\n\r\n/**\r\n * Zero bits.\r\n * @memberof util.LongBits\r\n * @type {util.LongBits}\r\n */\r\nvar zero = LongBits.zero = new LongBits(0, 0);\r\n\r\nzero.toNumber = function() { return 0; };\r\nzero.zzEncode = zero.zzDecode = function() { return this; };\r\nzero.length = function() { return 1; };\r\n\r\n/**\r\n * Zero hash.\r\n * @memberof util.LongBits\r\n * @type {string}\r\n */\r\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\r\n\r\n/**\r\n * Constructs new long bits from the specified number.\r\n * @param {number} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.fromNumber = function fromNumber(value) {\r\n    if (value === 0)\r\n        return zero;\r\n    var sign = value < 0;\r\n    if (sign)\r\n        value = -value;\r\n    var lo = value >>> 0,\r\n        hi = (value - lo) / 4294967296 >>> 0;\r\n    if (sign) {\r\n        hi = ~hi >>> 0;\r\n        lo = ~lo >>> 0;\r\n        if (++lo > 4294967295) {\r\n            lo = 0;\r\n            if (++hi > 4294967295)\r\n                hi = 0;\r\n        }\r\n    }\r\n    return new LongBits(lo, hi);\r\n};\r\n\r\n/**\r\n * Constructs new long bits from a number, long or string.\r\n * @param {Long|number|string} value Value\r\n * @returns {util.LongBits} Instance\r\n */\r\nLongBits.from = function from(value) {\r\n    if (typeof value === \"number\")\r\n        return LongBits.fromNumber(value);\r\n    if (util.isString(value)) {\r\n        /* istanbul ignore else */\r\n        if (util.Long)\r\n            value = util.Long.fromString(value);\r\n        else\r\n            return LongBits.fromNumber(parseInt(value, 10));\r\n    }\r\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a possibly unsafe JavaScript number.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {number} Possibly unsafe number\r\n */\r\nLongBits.prototype.toNumber = function toNumber(unsigned) {\r\n    if (!unsigned && this.hi >>> 31) {\r\n        var lo = ~this.lo + 1 >>> 0,\r\n            hi = ~this.hi     >>> 0;\r\n        if (!lo)\r\n            hi = hi + 1 >>> 0;\r\n        return -(lo + hi * 4294967296);\r\n    }\r\n    return this.lo + this.hi * 4294967296;\r\n};\r\n\r\n/**\r\n * Converts this long bits to a long.\r\n * @param {boolean} [unsigned=false] Whether unsigned or not\r\n * @returns {Long} Long\r\n */\r\nLongBits.prototype.toLong = function toLong(unsigned) {\r\n    return util.Long\r\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\r\n        /* istanbul ignore next */\r\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\r\n};\r\n\r\nvar charCodeAt = String.prototype.charCodeAt;\r\n\r\n/**\r\n * Constructs new long bits from the specified 8 characters long hash.\r\n * @param {string} hash Hash\r\n * @returns {util.LongBits} Bits\r\n */\r\nLongBits.fromHash = function fromHash(hash) {\r\n    if (hash === zeroHash)\r\n        return zero;\r\n    return new LongBits(\r\n        ( charCodeAt.call(hash, 0)\r\n        | charCodeAt.call(hash, 1) << 8\r\n        | charCodeAt.call(hash, 2) << 16\r\n        | charCodeAt.call(hash, 3) << 24) >>> 0\r\n    ,\r\n        ( charCodeAt.call(hash, 4)\r\n        | charCodeAt.call(hash, 5) << 8\r\n        | charCodeAt.call(hash, 6) << 16\r\n        | charCodeAt.call(hash, 7) << 24) >>> 0\r\n    );\r\n};\r\n\r\n/**\r\n * Converts this long bits to a 8 characters long hash.\r\n * @returns {string} Hash\r\n */\r\nLongBits.prototype.toHash = function toHash() {\r\n    return String.fromCharCode(\r\n        this.lo        & 255,\r\n        this.lo >>> 8  & 255,\r\n        this.lo >>> 16 & 255,\r\n        this.lo >>> 24      ,\r\n        this.hi        & 255,\r\n        this.hi >>> 8  & 255,\r\n        this.hi >>> 16 & 255,\r\n        this.hi >>> 24\r\n    );\r\n};\r\n\r\n/**\r\n * Zig-zag encodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBits.prototype.zzEncode = function zzEncode() {\r\n    var mask =   this.hi >> 31;\r\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\r\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Zig-zag decodes this long bits.\r\n * @returns {util.LongBits} `this`\r\n */\r\nLongBits.prototype.zzDecode = function zzDecode() {\r\n    var mask = -(this.lo & 1);\r\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\r\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\r\n    return this;\r\n};\r\n\r\n/**\r\n * Calculates the length of this longbits when encoded as a varint.\r\n * @returns {number} Length\r\n */\r\nLongBits.prototype.length = function length() {\r\n    var part0 =  this.lo,\r\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\r\n        part2 =  this.hi >>> 24;\r\n    return part2 === 0\r\n         ? part1 === 0\r\n           ? part0 < 16384\r\n             ? part0 < 128 ? 1 : 2\r\n             : part0 < 2097152 ? 3 : 4\r\n           : part1 < 16384\r\n             ? part1 < 128 ? 5 : 6\r\n             : part1 < 2097152 ? 7 : 8\r\n         : part2 < 128 ? 9 : 10;\r\n};\r\n","\"use strict\";\r\nmodule.exports = BufferWriter;\r\n\r\n// extends Writer\r\nvar Writer = require(\"./writer\");\r\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\r\n\r\nvar util = require(\"./util/minimal\");\r\n\r\nvar Buffer = util.Buffer;\r\n\r\n/**\r\n * Constructs a new buffer writer instance.\r\n * @classdesc Wire format writer using node buffers.\r\n * @extends Writer\r\n * @constructor\r\n */\r\nfunction BufferWriter() {\r\n    Writer.call(this);\r\n}\r\n\r\n/**\r\n * Allocates a buffer of the specified size.\r\n * @param {number} size Buffer size\r\n * @returns {Buffer} Buffer\r\n */\r\nBufferWriter.alloc = function alloc_buffer(size) {\r\n    return (BufferWriter.alloc = util._Buffer_allocUnsafe)(size);\r\n};\r\n\r\nvar writeBytesBuffer = Buffer && Buffer.prototype instanceof Uint8Array && Buffer.prototype.set.name === \"set\"\r\n    ? function writeBytesBuffer_set(val, buf, pos) {\r\n        buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\r\n                           // also works for plain array values\r\n    }\r\n    /* istanbul ignore next */\r\n    : function writeBytesBuffer_copy(val, buf, pos) {\r\n        if (val.copy) // Buffer values\r\n            val.copy(buf, pos, 0, val.length);\r\n        else for (var i = 0; i < val.length;) // plain array values\r\n            buf[pos++] = val[i++];\r\n    };\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\r\n    if (util.isString(value))\r\n        value = util._Buffer_from(value, \"base64\");\r\n    var len = value.length >>> 0;\r\n    this.uint32(len);\r\n    if (len)\r\n        this._push(writeBytesBuffer, len, value);\r\n    return this;\r\n};\r\n\r\nfunction writeStringBuffer(val, buf, pos) {\r\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\r\n        util.utf8.write(val, buf, pos);\r\n    else\r\n        buf.utf8Write(val, pos);\r\n}\r\n\r\n/**\r\n * @override\r\n */\r\nBufferWriter.prototype.string = function write_string_buffer(value) {\r\n    var len = Buffer.byteLength(value);\r\n    this.uint32(len);\r\n    if (len)\r\n        this._push(writeStringBuffer, len, value);\r\n    return this;\r\n};\r\n\r\n\r\n/**\r\n * Finishes the write operation.\r\n * @name BufferWriter#finish\r\n * @function\r\n * @returns {Buffer} Finished buffer\r\n */\r\n","\"use strict\";\r\nmodule.exports = BufferReader;\r\n\r\n// extends Reader\r\nvar Reader = require(\"./reader\");\r\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\r\n\r\nvar util = require(\"./util/minimal\");\r\n\r\n/**\r\n * Constructs a new buffer reader instance.\r\n * @classdesc Wire format reader using node buffers.\r\n * @extends Reader\r\n * @constructor\r\n * @param {Buffer} buffer Buffer to read from\r\n */\r\nfunction BufferReader(buffer) {\r\n    Reader.call(this, buffer);\r\n\r\n    /**\r\n     * Read buffer.\r\n     * @name BufferReader#buf\r\n     * @type {Buffer}\r\n     */\r\n}\r\n\r\n/* istanbul ignore else */\r\nif (util.Buffer)\r\n    BufferReader.prototype._slice = util.Buffer.prototype.slice;\r\n\r\n/**\r\n * @override\r\n */\r\nBufferReader.prototype.string = function read_string_buffer() {\r\n    var len = this.uint32(); // modifies pos\r\n    return this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len));\r\n};\r\n\r\n/**\r\n * Reads a sequence of bytes preceeded by its length as a varint.\r\n * @name BufferReader#bytes\r\n * @function\r\n * @returns {Buffer} Value read\r\n */\r\n","\"use strict\";\r\n\r\n/**\r\n * Streaming RPC helpers.\r\n * @namespace\r\n */\r\nvar rpc = exports;\r\n\r\n/**\r\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\r\n * @typedef RPCImpl\r\n * @type {function}\r\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\r\n * @param {Uint8Array} requestData Request data\r\n * @param {RPCImplCallback} callback Callback function\r\n * @returns {undefined}\r\n * @example\r\n * function rpcImpl(method, requestData, callback) {\r\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\r\n *         throw Error(\"no such method\");\r\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\r\n *         callback(err, responseData);\r\n *     });\r\n * }\r\n */\r\n\r\n/**\r\n * Node-style callback as used by {@link RPCImpl}.\r\n * @typedef RPCImplCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any, otherwise `null`\r\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\r\n * @returns {undefined}\r\n */\r\n\r\nrpc.Service = require(\"./rpc/service\");\r\n","\"use strict\";\r\nmodule.exports = Service;\r\n\r\nvar util = require(\"../util/minimal\");\r\n\r\n// Extends EventEmitter\r\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\r\n\r\n/**\r\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\r\n *\r\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\r\n * @typedef rpc.ServiceMethodCallback\r\n * @template TRes extends Message<TRes>\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {TRes} [response] Response message\r\n * @returns {undefined}\r\n */\r\n\r\n/**\r\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\r\n * @typedef rpc.ServiceMethod\r\n * @template TReq extends Message<TReq>\r\n * @template TRes extends Message<TRes>\r\n * @type {function}\r\n * @param {TReq|Properties<TReq>} request Request message or plain object\r\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\r\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\r\n */\r\n\r\n/**\r\n * Constructs a new RPC service instance.\r\n * @classdesc An RPC service as returned by {@link Service#create}.\r\n * @exports rpc.Service\r\n * @extends util.EventEmitter\r\n * @constructor\r\n * @param {RPCImpl} rpcImpl RPC implementation\r\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\r\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\r\n */\r\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\r\n\r\n    if (typeof rpcImpl !== \"function\")\r\n        throw TypeError(\"rpcImpl must be a function\");\r\n\r\n    util.EventEmitter.call(this);\r\n\r\n    /**\r\n     * RPC implementation. Becomes `null` once the service is ended.\r\n     * @type {RPCImpl|null}\r\n     */\r\n    this.rpcImpl = rpcImpl;\r\n\r\n    /**\r\n     * Whether requests are length-delimited.\r\n     * @type {boolean}\r\n     */\r\n    this.requestDelimited = Boolean(requestDelimited);\r\n\r\n    /**\r\n     * Whether responses are length-delimited.\r\n     * @type {boolean}\r\n     */\r\n    this.responseDelimited = Boolean(responseDelimited);\r\n}\r\n\r\n/**\r\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\r\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\r\n * @param {Constructor<TReq>} requestCtor Request constructor\r\n * @param {Constructor<TRes>} responseCtor Response constructor\r\n * @param {TReq|Properties<TReq>} request Request message or plain object\r\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\r\n * @returns {undefined}\r\n * @template TReq extends Message<TReq>\r\n * @template TRes extends Message<TRes>\r\n */\r\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\r\n\r\n    if (!request)\r\n        throw TypeError(\"request must be specified\");\r\n\r\n    var self = this;\r\n    if (!callback)\r\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\r\n\r\n    if (!self.rpcImpl) {\r\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\r\n        return undefined;\r\n    }\r\n\r\n    try {\r\n        return self.rpcImpl(\r\n            method,\r\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\r\n            function rpcCallback(err, response) {\r\n\r\n                if (err) {\r\n                    self.emit(\"error\", err, method);\r\n                    return callback(err);\r\n                }\r\n\r\n                if (response === null) {\r\n                    self.end(/* endedByRPC */ true);\r\n                    return undefined;\r\n                }\r\n\r\n                if (!(response instanceof responseCtor)) {\r\n                    try {\r\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\r\n                    } catch (err) {\r\n                        self.emit(\"error\", err, method);\r\n                        return callback(err);\r\n                    }\r\n                }\r\n\r\n                self.emit(\"data\", response, method);\r\n                return callback(null, response);\r\n            }\r\n        );\r\n    } catch (err) {\r\n        self.emit(\"error\", err, method);\r\n        setTimeout(function() { callback(err); }, 0);\r\n        return undefined;\r\n    }\r\n};\r\n\r\n/**\r\n * Ends this service and emits the `end` event.\r\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\r\n * @returns {rpc.Service} `this`\r\n */\r\nService.prototype.end = function end(endedByRPC) {\r\n    if (this.rpcImpl) {\r\n        if (!endedByRPC) // signal end to rpcImpl\r\n            this.rpcImpl(null, null, null);\r\n        this.rpcImpl = null;\r\n        this.emit(\"end\").off();\r\n    }\r\n    return this;\r\n};\r\n","\"use strict\";\r\nmodule.exports = {};\r\n\r\n/**\r\n * Named roots.\r\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\r\n * Can also be used manually to make roots available accross modules.\r\n * @name roots\r\n * @type {Object.<string,Root>}\r\n * @example\r\n * // pbjs -r myroot -o compiled.js ...\r\n *\r\n * // in another module:\r\n * require(\"./compiled.js\");\r\n *\r\n * // in any subsequent module:\r\n * var root = protobuf.roots[\"myroot\"];\r\n */\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {BatchNormalization} from '../../../ops/batch-normalization';\r\nimport {Tensor} from '../../../tensor';\r\nimport {CpuInferenceHandler} from '../inference-handler';\r\n\r\nexport class CpuBatchNormalization extends BatchNormalization {\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const output = batchNormalization(\r\n        inputs[0], inputs[1], inputs[2], inputs[3], inputs[4], this.epsilon, this.momentum, this.spatial);\r\n    return [output];\r\n  }\r\n}\r\n\r\nexport function batchNormalization(\r\n    x: Tensor, scale: Tensor, b: Tensor, mean: Tensor, variance: Tensor, epsilon: number, momentum: number,\r\n    spatial: number) {\r\n  const inputDimensions = x.dims;\r\n  const N = inputDimensions[0];\r\n  const C = inputDimensions[1];\r\n\r\n  // calculate channel size (i.e.) data points per channel\r\n  let channelSize = 1;\r\n  for (let i = 2; i < inputDimensions.length; i++) {\r\n    channelSize *= inputDimensions[i];\r\n  }\r\n\r\n  const output = new Tensor(x.dims, x.type);\r\n\r\n  const X = x.floatData;\r\n  const Y = output.floatData;\r\n  const scaleData = scale.numberData;\r\n  const bData = b.numberData;\r\n  const meanData = mean.numberData;\r\n  const varianceData = variance.numberData;\r\n\r\n  for (let nc = 0; nc < N * C; nc++) {\r\n    const offset = nc * channelSize;\r\n    for (let i = 0; i < channelSize; i++) {\r\n      Y[offset + i] =\r\n          scaleData[nc % C] * ((X[offset + i] - meanData[nc % C]) / Math.sqrt(varianceData[nc % C] + epsilon)) +\r\n          bData[nc % C];\r\n    }\r\n  }\r\n  return output;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Attribute} from '../../../attribute';\r\nimport {BinaryOp} from '../../../ops/binary-op';\r\nimport {Tensor} from '../../../tensor';\r\nimport {BroadcastUtil} from '../../../util';\r\nimport {CpuInferenceHandler} from '../inference-handler';\r\n\r\nexport class CpuBinaryOp extends BinaryOp {\r\n  constructor(\r\n      typeConstraint: ReadonlyArray<Tensor.DataType>, private opLambda?: (e1: number, e2: number) => number,\r\n      opType?: string, resultType?: Tensor.DataType) {\r\n    super(typeConstraint, opType, resultType);\r\n  }\r\n\r\n  // overriding the initialize() in the base class\r\n  initialize(attributes: Attribute): void {\r\n    if (!this.opType && !this.opLambda) {\r\n      throw new Error(`Both opType and opLambda cannot be missing for a binary op`);\r\n    }\r\n    // Expose functionality to construct opLambdas on the fly\r\n    // This is not costly as initialize() should be invoked only once after the model is resolved to a graph object\r\n    if (!this.opLambda) {\r\n      switch (this.opType) {\r\n        default:\r\n          throw new Error(`Binary op could not be initialized. Missing op lambda.`);\r\n      }\r\n    }\r\n  }\r\n\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const output = binaryOp(inputs[0], inputs[1], this.opLambda!, false, this.resultType);\r\n    return [output];\r\n  }\r\n}\r\n\r\nfunction binaryOp(\r\n    x: Tensor, y: Tensor, opLambda: (e1: number, e2: number) => number, inplace: boolean,\r\n    resultType?: Tensor.DataType): Tensor {\r\n  const result = BroadcastUtil.calc(x, y, opLambda, inplace, resultType);\r\n  if (!result) {\r\n    throw new Error('not broadcastable');\r\n  }\r\n  return result;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Concat} from '../../../ops/concat';\r\nimport {Tensor} from '../../../tensor';\r\nimport * as Util from '../../../util';\r\nimport {CpuInferenceHandler} from '../inference-handler';\r\n\r\nexport class CpuConcat extends Concat {\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const output = concat(inputs, this.axis);\r\n    return [output];\r\n  }\r\n}\r\n\r\nexport function concat(x: Tensor[], axis: number) {\r\n  const input0 = x[0];\r\n  const inputShape = input0.dims;\r\n\r\n  if (axis >= inputShape.length || axis < (-1 * inputShape.length)) {\r\n    throw new Error(`axis specified for concat doesn't match input dimensionality`);\r\n  }\r\n\r\n  if (axis < 0) {\r\n    axis = inputShape.length + axis;\r\n  }\r\n\r\n  // ensure all of the non-concatenated axes match each other\r\n  // along the way, calculate the shape of the output tensor\r\n  let concatAxisSize = inputShape[axis];\r\n  const outputShape = new Array<number>(inputShape.length);\r\n\r\n  for (let i = 1; i < x.length; i++) {\r\n    const dataN = x[i];\r\n    const dataNShape = dataN.dims;\r\n\r\n    for (let axisIndex = 0; axisIndex < inputShape.length; axisIndex++) {\r\n      // add to the placeholder for computing output shape\r\n      if (axisIndex === axis) {\r\n        concatAxisSize += dataNShape[axisIndex];\r\n      }\r\n\r\n      // ensure all non-cancatenated axes match each other\r\n      else if (inputShape[axisIndex] !== dataNShape[axisIndex]) {\r\n        throw new Error(`non concat dimensions must match`);\r\n      }\r\n\r\n      // fill the 'outputShape' array\r\n      outputShape[axisIndex] = dataNShape[axisIndex];\r\n    }\r\n  }\r\n\r\n  // complete the 'outputShape' array\r\n  outputShape[axis] = concatAxisSize;\r\n\r\n  // main logic\r\n  const output = new Tensor(outputShape, input0.type);\r\n  const Y = output.numberData;\r\n\r\n  // the axisPitch is the number of elements to add to move\r\n  // to the next split axis in the output\r\n  let axisPitch = 1;\r\n  for (let i = outputShape.length - 1; i >= axis; i--) {\r\n    axisPitch *= outputShape[i];\r\n  }\r\n\r\n  let outputBase = 0;\r\n  for (let inputIndex = 0; inputIndex < x.length; inputIndex++) {\r\n    const dataN = x[inputIndex];\r\n\r\n    // the inputAxisPitch is the number of elements to add\r\n    // to move to the next split axis in the input\r\n    let inputAxisPitch = 1;\r\n    for (let i = dataN.dims.length - 1; i >= axis; i--) {\r\n      inputAxisPitch *= dataN.dims[i];\r\n    }\r\n\r\n    const inputData = dataN.numberData;\r\n    const inputSize = Util.ShapeUtil.size(dataN.dims);\r\n\r\n    // copy the data across.\r\n    // for every 'inputAxisPitch' values copied, we move over by\r\n    // the 'axisPitch'\r\n\r\n    let outputOffset = outputBase;\r\n\r\n    for (let i = 0, j = 0; i < inputSize; i++) {\r\n      Y[outputOffset + i] = inputData[i];\r\n      if (++j === inputAxisPitch) {\r\n        // subtract inputAxisPitch because output is being indexed by 'i'\r\n        outputOffset += (axisPitch - inputAxisPitch);\r\n        j = 0;\r\n      }\r\n    }\r\n    outputBase += inputAxisPitch;\r\n  }\r\n\r\n  return output;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Conv} from '../../../ops/conv';\r\nimport {Tensor} from '../../../tensor';\r\nimport {PoolConvUtil} from '../../../util';\r\nimport {CpuInferenceHandler} from '../inference-handler';\r\n\r\nimport {matMul2d} from './matmul';\r\n\r\nexport class CpuConv extends Conv {\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const x = inputs[0];\r\n    const w = inputs[1];\r\n    const b = inputs.length === 3 ? inputs[2] : undefined;\r\n\r\n    // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\r\n    if (this.kernelShape.length === 0) {\r\n      const wDims = inputs[1].dims;\r\n      for (let i = 2; i < wDims.length; ++i) {\r\n        this.kernelShape.push(wDims[i]);\r\n      }\r\n    }\r\n\r\n    // create output Tensor after determining output size (after adjusting pads based on 'autoPad' attribute)\r\n    const outputDims = PoolConvUtil.computeConvOutputShape(\r\n        x.dims, w.dims, this.strides, this.dilations, this.kernelShape, this.pads, this.autoPad);\r\n    const y = new Tensor(outputDims, x.type);\r\n\r\n    conv2d(y, x, w, b, this.dilations, this.group, this.pads, this.strides);\r\n    return [y];\r\n  }\r\n}\r\n\r\n// tslint:disable: variable-name\r\nexport function conv2d(\r\n    Y: Tensor, X: Tensor, W: Tensor, B: Tensor|undefined, dilations: ReadonlyArray<number>, group: number,\r\n    pads: ReadonlyArray<number>, strides: ReadonlyArray<number>): void {\r\n  const input_num = X.dims[0];\r\n  const input_channels = X.dims[1];\r\n  const input_height = X.dims[2];\r\n  const input_width = X.dims[3];\r\n\r\n  const filter_num = W.dims[0];\r\n  const filter_channels = W.dims[1];\r\n  const filter_height = W.dims[2];\r\n  const filter_width = W.dims[3];\r\n  const filter_size = filter_num * filter_channels * filter_height * filter_width;\r\n  const kernel_shape = [filter_height, filter_width];\r\n\r\n  const output_num = Y.dims[0];\r\n  const output_channels = Y.dims[1];\r\n  const output_height = Y.dims[2];\r\n  const output_width = Y.dims[3];\r\n  const output_size = output_num * output_channels * output_height * output_width;\r\n\r\n  const input_image_size = input_height * input_width;\r\n  const output_image_size = output_height * output_width;\r\n  const kernel_size = kernel_shape[0] * kernel_shape[1];\r\n  const X_offset = input_channels / group * input_image_size;\r\n  const Y_offset = output_size / output_num / group;\r\n  const W_offset = filter_size / group;\r\n  const kernel_dim = input_channels / group * kernel_size;\r\n  const col_buffer_size = kernel_dim * output_image_size;\r\n\r\n  const col_buffer_data = new Float32Array(col_buffer_size);\r\n\r\n  for (let image_id = 0; image_id < input_num; ++image_id) {\r\n    let X_image_offset = 0;\r\n    let Y_image_offset = 0;\r\n    for (let group_id = 0; group_id < group; ++group_id) {\r\n      im2col(\r\n          X.floatData.subarray(X_image_offset + group_id * X_offset), col_buffer_data, input_channels / group,\r\n          input_height, input_width, kernel_shape[0], kernel_shape[1], dilations[0], dilations[1], pads[0], pads[1],\r\n          pads[2], pads[3], strides[0], strides[1]);\r\n\r\n      matMul2d(\r\n          W.floatData.subarray(group_id * W_offset), col_buffer_data,\r\n          Y.floatData.subarray(Y_image_offset + group_id * Y_offset), false, false, 1, 0, filter_num / group,\r\n          output_image_size, kernel_dim);\r\n    }\r\n\r\n    X_image_offset += X_offset * group;\r\n    Y_image_offset += Y_offset * group;\r\n  }\r\n\r\n  // Add bias if applicable\r\n  if (B) {\r\n    const biasData = B.floatData;\r\n    const outputData = Y.floatData;\r\n    const batchSize = Y.dims[0];\r\n    const outputChannels = Y.dims[1];\r\n    const channelSize = Y.dims[2] * Y.dims[3];\r\n    const dataSize = outputChannels * channelSize;\r\n    for (let batch = 0; batch < batchSize; ++batch) {\r\n      for (let channel = 0; channel < outputChannels; ++channel) {\r\n        const offset = batch * dataSize + channel * channelSize;\r\n        for (let index = 0; index < channelSize; ++index) {\r\n          outputData[offset + index] += biasData[channel];\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction im2col(\r\n    data_im: Float32Array|Float64Array, data_col: Float32Array|Float64Array, channels: number, height: number,\r\n    width: number, kernel_h: number, kernel_w: number, dilation_h: number, dilation_w: number, pad_t: number,\r\n    pad_l: number, pad_b: number, pad_r: number, stride_h: number, stride_w: number) {\r\n  const output_h = ~~((height + pad_b + pad_t - (dilation_h * (kernel_h - 1) + 1)) / stride_h) + 1;\r\n  const output_w = ~~((width + pad_l + pad_r - (dilation_w * (kernel_w - 1) + 1)) / stride_w) + 1;\r\n\r\n  // Fast path for zero padding and no dilation\r\n  // From Torch, THNN_(unfolded_copy)\r\n  if (dilation_h === 1 && dilation_w === 1 && pad_l === 0 && pad_r === 0 && pad_t === 0 && pad_b === 0) {\r\n    for (let k = 0; k < channels * kernel_h * kernel_w; k++) {\r\n      const nip = ~~(k / (kernel_h * kernel_w));\r\n      const rest = k % (kernel_h * kernel_w);\r\n      const kh = ~~(rest / kernel_w);\r\n      const kw = rest % kernel_w;\r\n      const dst_offset = nip * (kernel_h * kernel_w * output_h * output_w) + kh * (kernel_w * output_h * output_w) +\r\n          kw * (output_h * output_w);\r\n      const src_offset = nip * (height * width);\r\n      for (let y = 0; y < output_h; y++) {\r\n        const iy = y * stride_h + kh;\r\n        const ix = kw;\r\n        if (stride_w === 1) {\r\n          data_col.set(\r\n              data_im.subarray(src_offset + iy * width + ix, src_offset + iy * width + ix + output_w),\r\n              dst_offset + y * output_w);\r\n        } else {\r\n          for (let x = 0; x < output_w; x++) {\r\n            data_col[dst_offset + (y * output_w + x)] = data_im[src_offset + (iy * width + ix + x * stride_w)];\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return;\r\n  }\r\n\r\n  // Baseline\r\n  const dkernel_h = dilation_h * (kernel_h - 1) + 1;\r\n  const dkernel_w = dilation_w * (kernel_w - 1) + 1;\r\n\r\n  const height_col = ~~((height + pad_t + pad_b - dkernel_h) / stride_h) + 1;\r\n  const width_col = ~~((width + pad_l + pad_r - dkernel_w) / stride_w) + 1;\r\n\r\n  const channels_col = channels * kernel_h * kernel_w;\r\n  for (let c = 0; c < channels_col; ++c) {\r\n    const w_offset = c % kernel_w;\r\n    const h_offset = ~~(c / kernel_w) % kernel_h;\r\n    const c_im = ~~(c / (kernel_h * kernel_w));\r\n    for (let h = 0; h < height_col; ++h) {\r\n      for (let w = 0; w < width_col; ++w) {\r\n        const h_pad = h * stride_h - pad_t + h_offset * dilation_h;\r\n        const w_pad = w * stride_w - pad_l + w_offset * dilation_w;\r\n        if (h_pad >= 0 && h_pad < height && w_pad >= 0 && w_pad < width) {\r\n          data_col[(c * height_col + h) * width_col + w] = data_im[(c_im * height + h_pad) * width + w_pad];\r\n        } else {\r\n          data_col[(c * height_col + h) * width_col + w] = 0;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Dropout} from '../../../ops/dropout';\r\nimport {Tensor} from '../../../tensor';\r\nimport {CpuInferenceHandler} from '../inference-handler';\r\n\r\nexport class CpuDropout extends Dropout {\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const output = dropout(inputs[0], this.ratio, this.testMode);\r\n    return [output];\r\n  }\r\n}\r\n\r\nexport function dropout(x: Tensor, ratio: number, isTestMode: boolean) {\r\n  if (!isTestMode) {\r\n    throw new Error('only test mode is supported');\r\n  }\r\n\r\n  const output = new Tensor(x.dims, x.type);\r\n  const X = x.floatData;\r\n  const Y = output.numberData;\r\n  Y.set(X);\r\n  return output;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Flatten} from '../../../ops/flatten';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {CpuInferenceHandler} from '../inference-handler';\r\n\r\nexport class CpuFlatten extends Flatten {\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const output = flatten(inputs[0], this.axis);\r\n    return [output];\r\n  }\r\n}\r\n\r\nexport function flatten(x: Tensor, axis: number): Tensor {\r\n  const outputDims = ShapeUtil.flattenShape(x.dims, axis);\r\n  const output = new Tensor(outputDims, x.type);\r\n\r\n  const X = x.numberData;\r\n  const Y = output.numberData;\r\n\r\n  Y.set(X);\r\n\r\n  return output;\r\n}\r\n","import {Gather} from '../../../ops/gather';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {CpuInferenceHandler} from '../inference-handler';\r\n\r\nexport class CpuGather extends Gather {\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]> {\r\n    const output = gather(inputs[0], inputs[1], this.axis);\r\n    return [output];\r\n  }\r\n}\r\n\r\nexport function gather(x: Tensor, indices: Tensor, axis: number): Tensor {\r\n  axis = ShapeUtil.parseAxis(axis, x.dims.length);\r\n  const dims = x.dims.slice();\r\n  const newDims = dims.slice();\r\n  const indicesData = indices.data;\r\n  newDims[axis] = indicesData.length;\r\n  const dimsStrides = ShapeUtil.computeStrides(dims);\r\n  const newDimsStrides = ShapeUtil.computeStrides(newDims);\r\n  const output = new Tensor(newDims, x.type);\r\n  const Y = output.numberData;\r\n  const X = x.data;\r\n  for (let i = 0; i < Y.length; ++i) {\r\n    const newLogicalIndex = ShapeUtil.offsetToIndices(i, newDimsStrides);\r\n    const oldLogicalIndex = newLogicalIndex.slice();\r\n    oldLogicalIndex[axis] = indicesData[newLogicalIndex[axis]] as number;\r\n    const oldOffset = ShapeUtil.indicesToOffset(oldLogicalIndex, dimsStrides);\r\n    Y[i] = X[oldOffset] as number;\r\n  }\r\n  // calculate the output dims\r\n  const outputDims = dims.slice(0, axis).concat(indices.dims).concat(dims.slice(axis + 1));\r\n  return new Tensor(outputDims, x.type, undefined, undefined, Y);\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Gemm} from '../../../ops/gemm';\r\nimport {Tensor} from '../../../tensor';\r\nimport * as util from '../../../util';\r\nimport {CpuInferenceHandler} from '../inference-handler';\r\n\r\nimport {matMul2d} from './matmul';\r\n\r\nexport class CpuGemm extends Gemm {\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const output = gemm(inputs[0], inputs[1], inputs[2], this.alpha, this.beta, this.transA, this.transB);\r\n    return [output];\r\n  }\r\n}\r\n\r\nexport function gemm(a: Tensor, b: Tensor, c: Tensor, alpha: number, beta: number, transA: boolean, transB: boolean) {\r\n  const [M, N, K] = util.GemmUtil.getShapeOfGemmResult(a.dims, transA, b.dims, transB, c.dims);\r\n\r\n  // The result will always be of the shape [M,N]\r\n  const output = new Tensor([M, N], a.type);\r\n  // broadcast and assign value from C to output\r\n  if (util.BroadcastUtil.calc(output, c, (a, b) => b, true) !== output) {\r\n    throw new Error(`tensor C is not broadcastable to [M,N]`);\r\n  }\r\n\r\n  matMul2d(a.floatData, b.floatData, output.floatData, transA, transB, alpha, beta, M, N, K);\r\n\r\n  return output;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {ImageScaler} from '../../../ops/image-scaler';\r\nimport {Tensor} from '../../../tensor';\r\nimport {CpuInferenceHandler} from '../inference-handler';\r\n\r\nexport class CpuImageScaler extends ImageScaler {\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const output = imageScaler(inputs[0], this.bias, this.scale);\r\n    return [output];\r\n  }\r\n}\r\n\r\nexport function imageScaler(x: Tensor, bias: number[], scale: number): Tensor {\r\n  const [N, C, H, W] = x.dims;\r\n  const output = new Tensor([N, C, H, W], x.type);\r\n  const X = x.floatData;\r\n  const Y = output.floatData;\r\n  for (let nc = 0; nc < N * C; nc++) {\r\n    for (let hw = 0; hw < H * W; hw++) {\r\n      const index = nc * H * W + hw;\r\n      Y[index] = X[index] * scale + bias[nc % C];\r\n    }\r\n  }\r\n\r\n  return output;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {InstanceNormalization} from '../../../ops/instance-normalization';\r\nimport {Tensor} from '../../../tensor';\r\nimport {CpuInferenceHandler} from '../inference-handler';\r\n\r\nexport class CpuInstanceNormalization extends InstanceNormalization {\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const output = instanceNormalization(inputs[0], inputs[1], inputs[2], this.epsilon);\r\n    return [output];\r\n  }\r\n}\r\n\r\nexport function instanceNormalization(x: Tensor, scale: Tensor, b: Tensor, epsilon: number) {\r\n  const inputDimensions = x.dims;\r\n  const N = inputDimensions[0];\r\n  const C = inputDimensions[1];\r\n\r\n  // calculate channel size (i.e.) data points per channel\r\n  let channelSize = 1;\r\n  for (let i = 2; i < inputDimensions.length; i++) {\r\n    channelSize *= inputDimensions[i];\r\n  }\r\n  const output = new Tensor(x.dims, x.type);\r\n\r\n  const X = x.floatData;\r\n  const Y = output.floatData;\r\n  const scaleData = scale.numberData;\r\n  const bData = b.numberData;\r\n\r\n  let temp: number;\r\n  let mean: number;\r\n  let variance: number;\r\n  let physicalOffset: number;\r\n  let iterEnd: number;\r\n  let currentChannel: number;\r\n\r\n  for (let nc = 0; nc < N * C; nc++) {\r\n    physicalOffset = nc * channelSize;\r\n    iterEnd = physicalOffset + channelSize;\r\n    currentChannel = nc % C;\r\n\r\n    // compute mean for this channel\r\n    temp = 0;\r\n    for (let i = physicalOffset; i < iterEnd; ++i) {\r\n      temp += X[i];\r\n    }\r\n    mean = temp / channelSize;\r\n\r\n    // compute variance for this channel\r\n    temp = 0;\r\n    for (let i = physicalOffset; i < iterEnd; ++i) {\r\n      temp += Math.pow(X[i] - mean, 2);\r\n    }\r\n    variance = temp / channelSize;\r\n\r\n    // compute normalized value for data in this channel\r\n    for (let i = physicalOffset; i < iterEnd; ++i) {\r\n      Y[i] = scaleData[currentChannel] * ((X[i] - mean) / Math.sqrt(variance + epsilon)) + bData[currentChannel];\r\n    }\r\n  }\r\n\r\n  return output;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Lrn} from '../../../ops/lrn';\r\nimport {Tensor} from '../../../tensor';\r\nimport * as util from '../../../util';\r\nimport {CpuInferenceHandler} from '../inference-handler';\r\n\r\nexport class CpuLrn extends Lrn {\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const output = lrn(inputs[0], this.alpha, this.beta, this.bias, this.size);\r\n    return [output];\r\n  }\r\n}\r\n\r\nexport function lrn(x: Tensor, alpha: number, beta: number, bias: number, size: number): Tensor {\r\n  const N = x.dims[0];\r\n  const C = x.dims[1];\r\n  const X = x.floatData;\r\n  let channelSize = 1;\r\n\r\n  for (let i = 2; i < x.dims.length; ++i) {\r\n    channelSize *= x.dims[i];\r\n  }\r\n\r\n  const tensorDataSize = channelSize * C;\r\n\r\n  // create new tensor to hold the result\r\n  const output = new Tensor(x.dims, x.type);\r\n  const Y: number[] = new Array(util.ShapeUtil.size(x.dims));\r\n\r\n  // update the output with just the bias to begin with\r\n  for (let i = 0; i < Y.length; ++i) {\r\n    Y[i] = bias;\r\n  }\r\n\r\n  // placeholder to store padded square (i.e.) intermediate data\r\n  const paddedSquareSize = (C + size - 1) * channelSize;\r\n  const paddedSquareData = new Float64Array(paddedSquareSize);\r\n\r\n  const alphaOverSize = alpha / size;\r\n  const prePad = (size - 1) / 2;\r\n\r\n  // go through the images\r\n  for (let n = 0; n < N; ++n) {\r\n    // compute the padded square\r\n    util.MathUtil.sqr(paddedSquareData, X, prePad * channelSize, tensorDataSize * n, tensorDataSize);\r\n\r\n    // create the first channel\r\n    for (let c = 0; c < size; ++c) {\r\n      util.MathUtil.axpy(Y, paddedSquareData, tensorDataSize * n, c * channelSize, channelSize, alphaOverSize);\r\n    }\r\n\r\n    for (let c = 1; c < C; ++c) {\r\n      const scaleSliceStart = n * tensorDataSize + c * channelSize;\r\n\r\n      // copy previous scale\r\n      util.arrayCopyHelper(Y, Y, scaleSliceStart, scaleSliceStart - channelSize, channelSize);\r\n\r\n      // add head\r\n      util.MathUtil.axpy(\r\n          Y, paddedSquareData, scaleSliceStart, (c + size - 1) * channelSize, channelSize, alphaOverSize);\r\n\r\n      // subtract tail\r\n      util.MathUtil.axpy(Y, paddedSquareData, scaleSliceStart, (c - 1) * channelSize, channelSize, -alphaOverSize);\r\n    }\r\n  }\r\n\r\n  util.MathUtil.powx(Y, Y, 0, 0, util.ShapeUtil.size(x.dims), -beta);\r\n\r\n  util.MathUtil.mul(Y, X, 0, 0, util.ShapeUtil.size(x.dims));\r\n\r\n  output.floatData.set(Y);\r\n\r\n  return output;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class Lrn implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.alpha = attributes.getFloat('alpha', 1E-4);\r\n    this.beta = attributes.getFloat('beta', 0.75);\r\n    this.bias = attributes.getFloat('bias', 1.0);\r\n    this.size = attributes.getInt('size');\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 1) {\r\n      return false;\r\n    }\r\n\r\n    // input tensor must have atleast 3 dimensions\r\n    if (inputs[0].dims.length < 3) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  protected alpha: number;\r\n  protected beta: number;\r\n  protected bias: number;\r\n  protected size: number;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {AveragePool, GlobalAveragePool, GlobalMaxPool, MaxPool} from '../../../ops/pool';\r\nimport {Tensor} from '../../../tensor';\r\nimport {PoolConvUtil, ShapeUtil} from '../../../util';\r\nimport {CpuInferenceHandler} from '../inference-handler';\r\n\r\nexport class CpuAveragePool extends AveragePool {\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const output =\r\n        averagePool(inputs[0], this.autoPad, this.countIncludePad, this.kernelShape, this.pads, this.strides);\r\n    return [output];\r\n  }\r\n}\r\n\r\nexport class CpuGlobalAveragePool extends GlobalAveragePool {\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]> {\r\n    const output = globalAveragePool(inputs[0]);\r\n    return [output];\r\n  }\r\n}\r\n\r\nexport class CpuMaxPool extends MaxPool {\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]> {\r\n    const output = maxPool(inputs[0], this.autoPad, this.kernelShape, this.pads, this.strides);\r\n    return [output];\r\n  }\r\n}\r\n\r\nexport class CpuGlobalMaxPool extends GlobalMaxPool {\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]> {\r\n    const output = globalMaxPool(inputs[0]);\r\n    return [output];\r\n  }\r\n}\r\n\r\n// Functions implementing specific pooling operations\r\nexport function averagePool(\r\n    input: Tensor, autoPad: string, countIncludePad: boolean, kernelShape: number[], pads: number[],\r\n    strides: number[]): Tensor {\r\n  return pool(\r\n      false, input, autoPad, countIncludePad, kernelShape, pads, strides, 0, (a, b) => (a + b), (a, b) => (a / b));\r\n}\r\n\r\nexport function globalAveragePool(input: Tensor): Tensor {\r\n  return pool(true, input, 'NOTSET', false, [], [], [], 0, (a, b) => (a + b), (a, b) => (a / b));\r\n}\r\n\r\nexport function maxPool(\r\n    input: Tensor, autoPad: string, kernelShape: number[], pads: number[], strides: number[]): Tensor {\r\n  return pool(\r\n      false, input, autoPad, false, kernelShape, pads, strides, Number.MIN_SAFE_INTEGER, (a, b) => (Math.max(a, b)),\r\n      (a, b) => a);\r\n}\r\n\r\nexport function globalMaxPool(input: Tensor): Tensor {\r\n  return pool(\r\n      true, input, 'NOTSET', false, [], [], [], Number.MIN_SAFE_INTEGER, (a, b) => (Math.max(a, b)), (a, b) => a);\r\n}\r\n\r\n/**\r\n * Perform pooling operations based on input\r\n * @param isGlobalOperator If true, perform global pooling.\r\n * @param input The input tensor.\r\n * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\r\n *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID\r\n * @param countIncludePad Whether include pad pixels when calculating values for the edges.\r\n * @param kernelShape The size of the kernel along each axis.\r\n * @param pads Padding for the beginning and ending along each axis. `pads` format should be as follow [x1_begin,\r\n *       x2_begin...x1_end, x2_end,...], where xi_begin the number of pixels added at the beginning of axis `i` and\r\n *       xi_end, the number of pixels added at the end of axis `i`.\r\n * @param strides Stride along each axis.\r\n * @param startVal The initial value to do pooling operations\r\n * @param processOp The operation to be performed on each element inside kernel\r\n * @param finalOp The operation to be performed over all elements inside kernel\r\n */\r\nexport function pool(\r\n    isGlobalOperator: boolean, input: Tensor, autoPad: string, countIncludePad: boolean, kernelShape: number[],\r\n    pads: number[], strides: number[], startVal: number, processOp: (a: number, b: number) => number,\r\n    finalOp: (a: number, b: number) => number): Tensor {\r\n  // adjust the shapes of input attributes\r\n  PoolConvUtil.adjustPoolAttributes(isGlobalOperator, input.dims, kernelShape, strides, pads);\r\n\r\n  // calculate output shape based on input attributes.\r\n  const outputShape =\r\n      PoolConvUtil.computePoolOutputShape(isGlobalOperator, input.dims, strides, kernelShape, pads, autoPad);\r\n\r\n  const kernelSize = ShapeUtil.size(kernelShape);\r\n  const kernelStrides = ShapeUtil.computeStrides(kernelShape);\r\n  const stridesRank = kernelStrides.length;\r\n  const rank = outputShape.length;\r\n\r\n  const outputSize = ShapeUtil.size(outputShape);\r\n  const output = new Tensor(outputShape, input.type);\r\n  const outputStride = ShapeUtil.computeStrides(outputShape);\r\n\r\n  for (let ind = 0; ind < outputSize; ind++) {\r\n    const curInd = ShapeUtil.offsetToIndices(ind, outputStride);\r\n    const startInd = curInd.slice(0);\r\n    const x = curInd.slice(0);\r\n    // calculate the start indices of kernel corresponding to current output indices\r\n    for (let i = 0; i < stridesRank; i++) {\r\n      startInd[rank - stridesRank + i] = curInd[rank - stridesRank + i] * strides[i];\r\n    }\r\n    let value = startVal;\r\n    let pad = 0;\r\n    let isPad = false;\r\n    // loop through elements within kernel\r\n    for (let i = 0; i < kernelSize; i++) {\r\n      const offset = ShapeUtil.offsetToIndices(i, kernelStrides);\r\n      isPad = false;\r\n      // \"Shift\" the kernel by the kernel start indices to loop through the kernel mapped to current output indices\r\n      for (let j = rank - stridesRank; j < rank; j++) {\r\n        x[j] = startInd[j] + offset[j - rank + stridesRank] - pads[j - 2];\r\n        // check if current indices fall in the padding area\r\n        if (x[j] >= input.dims[j] || x[j] < 0) {\r\n          pad++;\r\n          isPad = true;\r\n          break;\r\n        }\r\n      }\r\n      value = isPad ? value : processOp(value, input.get(x) as number);\r\n    }\r\n    value = countIncludePad ? finalOp(value, kernelSize) : finalOp(value, kernelSize - pad);\r\n    output.set(curInd, value);\r\n  }\r\n\r\n  return output;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {ReduceBase} from '../../../ops/reduce-op';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ReduceUtil, ShapeUtil} from '../../../util';\r\nimport {CpuInferenceHandler} from '../inference-handler';\r\n\r\nexport class CpuReduceSum extends ReduceBase {\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]> {\r\n    const output = reduceSum(inputs[0], this.axes, this.keepDims);\r\n    return [output];\r\n  }\r\n}\r\n\r\nexport class CpuReduceSumSquare extends ReduceBase {\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const output = reduceSumSquare(inputs[0], this.axes, this.keepDims);\r\n    return [output];\r\n  }\r\n}\r\n\r\nexport class CpuReduceLogSum extends ReduceBase {\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const output = reduceLogSum(inputs[0], this.axes, this.keepDims);\r\n    return [output];\r\n  }\r\n}\r\n\r\nexport class CpuReduceMax extends ReduceBase {\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const output = reduceMax(inputs[0], this.axes, this.keepDims);\r\n    return [output];\r\n  }\r\n}\r\n\r\nexport class CpuReduceMin extends ReduceBase {\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const output = reduceMin(inputs[0], this.axes, this.keepDims);\r\n    return [output];\r\n  }\r\n}\r\n\r\nexport class CpuReduceMean extends ReduceBase {\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const output = reduceMean(inputs[0], this.axes, this.keepDims);\r\n    return [output];\r\n  }\r\n}\r\n\r\nexport class CpuReduceProd extends ReduceBase {\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const output = reduceProd(inputs[0], this.axes, this.keepDims);\r\n    return [output];\r\n  }\r\n}\r\n\r\n// Functions implementing specific reduce operations\r\nexport function reduceSum(input: Tensor, axes: number[], keepDims: boolean): Tensor {\r\n  return ReduceUtil.calcReduce(input, axes, keepDims, b => b, (a, b) => a + b);\r\n}\r\n\r\nexport function reduceSumSquare(input: Tensor, axes: number[], keepDims: boolean): Tensor {\r\n  return ReduceUtil.calcReduce(input, axes, keepDims, b => b * b, (a, b) => a + b);\r\n}\r\n\r\nexport function reduceLogSum(input: Tensor, axes: number[], keepDims: boolean): Tensor {\r\n  const output = ReduceUtil.calcReduce(input, axes, keepDims, b => b, (a, b) => a + b);\r\n  const length = output.floatData.length;\r\n  for (let i = 0; i < length; i++) {\r\n    output.floatData[i] = Math.log(output.floatData[i]);\r\n  }\r\n  return output;\r\n}\r\n\r\nexport function reduceMax(input: Tensor, axes: number[], keepDims: boolean): Tensor {\r\n  return ReduceUtil.calcReduce(input, axes, keepDims, b => b, (a, b) => Math.max(a, b));\r\n}\r\n\r\nexport function reduceMin(input: Tensor, axes: number[], keepDims: boolean): Tensor {\r\n  return ReduceUtil.calcReduce(input, axes, keepDims, b => b, (a, b) => Math.min(a, b));\r\n}\r\n\r\nexport function reduceMean(input: Tensor, axes: number[], keepDims: boolean): Tensor {\r\n  const output = ReduceUtil.calcReduce(input, axes, keepDims, b => b, (a, b) => a + b);\r\n  const outputDims = ReduceUtil.calcReduceShape(input.dims as number[], axes, keepDims);\r\n  const inputSize = ShapeUtil.size(input.dims);\r\n  const outputSize = ShapeUtil.size(outputDims);\r\n  const numItems = inputSize / outputSize;\r\n  const length = output.floatData.length;\r\n  for (let i = 0; i < length; i++) {\r\n    output.floatData[i] = output.floatData[i] / numItems;\r\n  }\r\n  return output;\r\n}\r\n\r\nexport function reduceProd(input: Tensor, axes: number[], keepDims: boolean): Tensor {\r\n  return ReduceUtil.calcReduce(input, axes, keepDims, b => b, (a, b) => a * b);\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Reshape} from '../../../ops/reshape';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {CpuInferenceHandler} from '../inference-handler';\r\n\r\nexport class CpuReshape extends Reshape {\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const output = reshape(inputs[0], inputs[1]);\r\n    return [output];\r\n  }\r\n}\r\n\r\nexport function reshape(x: Tensor, shape: Tensor): Tensor {\r\n  const reshapedDims = ShapeUtil.calculateReshapedDims(x.dims, shape.integerData);\r\n  const output = new Tensor(reshapedDims, x.type);\r\n  const Y = output.floatData;\r\n  Y.set(x.floatData);\r\n  return output;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Slice, SliceV10} from '../../../ops/slice';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {CpuInferenceHandler} from '../inference-handler';\r\n\r\nexport class CpuSlice extends Slice {\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const output = slice(inputs[0], this.starts, this.ends, this.axes);\r\n    return [output];\r\n  }\r\n}\r\n\r\nexport class CpuSliceV10 extends SliceV10 {\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    if (inputs.length >= 5 && inputs[4].integerData.some((i: number) => i !== 1)) {\r\n      throw new Error(`currently non-1 steps is not supported for Slice`);\r\n    }\r\n    const starts = Array.from(inputs[1].integerData);\r\n    const ends = Array.from(inputs[2].integerData);\r\n    const axes = inputs.length >= 4 ? Array.from(inputs[3].integerData) : [];\r\n    const output = slice(inputs[0], starts, ends, axes);\r\n    return [output];\r\n  }\r\n}\r\n\r\nexport function slice(\r\n    x: Tensor, starts: ReadonlyArray<number>, ends: ReadonlyArray<number>, axes: ReadonlyArray<number>): Tensor {\r\n  if (axes.length === 0) {\r\n    axes = x.dims.map((val, ind) => ind);\r\n  }\r\n  axes = axes.map(axis => ShapeUtil.parseAxis(axis, x.dims.length));\r\n  starts = starts.map((start, ind) => {\r\n    if (start > x.dims[axes[ind]] - 1) {\r\n      return x.dims[axes[ind]];\r\n    }\r\n    return ShapeUtil.parseAxis(start, x.dims[axes[ind]]);\r\n  });\r\n  ends = ends.map((end, ind) => {\r\n    if (end > x.dims[axes[ind]] - 1) {\r\n      return x.dims[axes[ind]];\r\n    }\r\n    return ShapeUtil.parseAxis(end, x.dims[axes[ind]]);\r\n  });\r\n  const size: number[] = [];\r\n  const adjustedStarts: number[] = [];\r\n  axes.forEach((val, ind) => {\r\n    size[val] = ends[ind] - starts[ind];\r\n    adjustedStarts[val] = starts[ind];\r\n  });\r\n  for (let i = 0; i < x.dims.length; i++) {\r\n    size[i] = size[i] || x.dims[i];\r\n    adjustedStarts[i] = adjustedStarts[i] || 0;\r\n  }\r\n\r\n  const newDimsStride = ShapeUtil.computeStrides(size);\r\n  const oldDimsStride = ShapeUtil.computeStrides(x.dims ? x.dims : [x.data.length]);\r\n  const X = x.data;\r\n  const output = new Tensor(size, x.type);\r\n  const Y = output.data;\r\n  for (let i = 0; i < Y.length; ++i) {\r\n    const newLogicalIndex = ShapeUtil.offsetToIndices(i, newDimsStride);\r\n    const oldLogicalIndex = newLogicalIndex.map((idx, j) => idx + adjustedStarts[j]);\r\n    const oldOffset = ShapeUtil.indicesToOffset(oldLogicalIndex, oldDimsStride);\r\n    Y[i] = X[oldOffset];\r\n  }\r\n  return output;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Softmax} from '../../../ops/softmax';\r\nimport {Tensor} from '../../../tensor';\r\nimport * as util from '../../../util';\r\nimport {CpuInferenceHandler} from '../inference-handler';\r\n\r\nexport class CpuSoftmax extends Softmax {\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const output = softmax(inputs[0], this.axis);\r\n    return [output];\r\n  }\r\n}\r\n\r\nexport function softmax(x: Tensor, axis: number): Tensor {\r\n  const inputDimensions = x.dims;\r\n  const inputRank = inputDimensions.length;\r\n\r\n  const axisCorrected = util.ShapeUtil.parseAxis(axis, inputRank);\r\n  const N = util.ShapeUtil.sizeToDimension(inputDimensions, axisCorrected);\r\n  const D = util.ShapeUtil.sizeFromDimension(inputDimensions, axisCorrected);\r\n\r\n  const X = x.numberData;\r\n\r\n  const output = new Tensor(x.dims, x.type);\r\n  const Y = output.numberData;\r\n\r\n  for (let i = 0; i < N; i++) {\r\n    // find row offset\r\n    const offset = i * D;\r\n\r\n    // find max of each logical row\r\n    let max = Number.MIN_VALUE;\r\n    for (let j = 0; j < D; j++) {\r\n      if (X[offset + j] > max) {\r\n        max = X[offset + j];\r\n      }\r\n    }\r\n\r\n    // find normalization scale per row\r\n    let scale = 0;\r\n    for (let j = 0; j < D; j++) {\r\n      const value = X[offset + j] - max;\r\n      Y[offset + j] = Math.exp(value);\r\n      scale += Math.exp(value);\r\n    }\r\n\r\n    // perform the softmax normalization\r\n    for (let j = 0; j < D; j++) {\r\n      if (scale === 0) {\r\n        Y[offset + j] = 0;\r\n      } else {\r\n        Y[offset + j] /= scale;\r\n      }\r\n    }\r\n  }\r\n\r\n  return output;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Squeeze} from '../../../ops/squeeze';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {CpuInferenceHandler} from '../inference-handler';\r\n\r\nexport class CpuSqueeze extends Squeeze {\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const output = squeeze(inputs[0], this.axes);\r\n    return [output];\r\n  }\r\n}\r\n\r\nexport function squeeze(x: Tensor, axes: number[]): Tensor {\r\n  const outputDims = ShapeUtil.squeezeShape(x.dims, axes);\r\n  const output = new Tensor(outputDims, x.type);\r\n\r\n  const X = x.numberData;\r\n  const Y = output.numberData;\r\n\r\n  Y.set(X);\r\n\r\n  return output;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Sum} from '../../../ops/sum';\r\nimport {Tensor} from '../../../tensor';\r\nimport {CpuInferenceHandler} from '../inference-handler';\r\n\r\nexport class CpuSum extends Sum {\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const output = sum(inputs);\r\n    return [output];\r\n  }\r\n}\r\n\r\nexport function sum(x: Tensor[]): Tensor {\r\n  const output = new Tensor(x[0].dims, x[0].type);\r\n  const size = x[0].floatData.length;\r\n  const Y = output.floatData;\r\n  for (let i = 0; i < x.length; i++) {\r\n    const arr = x[i].floatData;\r\n    for (let j = 0; j < size; ++j) {\r\n      Y[j] += arr[j];\r\n    }\r\n  }\r\n\r\n  return output;\r\n}\r\n","import {Tile} from '../../../ops/tile';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {CpuInferenceHandler} from '../inference-handler';\r\n\r\nexport class CpuTile extends Tile {\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]> {\r\n    const output = tile(inputs[0], inputs[1]);\r\n    return [output];\r\n  }\r\n}\r\n\r\nexport function tile(x: Tensor, repeats: Tensor): Tensor {\r\n  const dims = x.dims ? x.dims : [x.data.length];\r\n  const rank = dims.length;\r\n  const newDims = new Array(rank);\r\n  for (let i = 0; i < rank; i++) {\r\n    newDims[i] = dims[i] * repeats.numberData[i];\r\n  }\r\n  const dimsStrides = ShapeUtil.computeStrides(dims);\r\n  const newDimsStrides = ShapeUtil.computeStrides(newDims);\r\n  const output = new Tensor(newDims, x.type);\r\n  const Y = output.numberData;\r\n  // TensorTransformUtils.createTypedArray(x.type, ShapeUtil.size(newDims));\r\n  const X = x.data;\r\n  for (let i = 0; i < Y.length; ++i) {\r\n    const newLogicalIndex = ShapeUtil.offsetToIndices(i, newDimsStrides);\r\n    const oldLogicalIndex = new Array(rank);\r\n    for (let j = 0; j < rank; ++j) {\r\n      oldLogicalIndex[j] = newLogicalIndex[j] % x.dims[j];\r\n    }\r\n    const oldOffset = ShapeUtil.indicesToOffset(oldLogicalIndex, dimsStrides);\r\n    Y[i] = X[oldOffset] as number;\r\n  }\r\n  return output;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Transpose} from '../../../ops/transpose';\r\nimport {Tensor} from '../../../tensor';\r\nimport {arrayCopyHelper, ShapeUtil} from '../../../util';\r\nimport {CpuInferenceHandler} from '../inference-handler';\r\n\r\nexport class CpuTranspose extends Transpose {\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const output = transpose(inputs[0], this.perm);\r\n    return [output];\r\n  }\r\n}\r\n\r\nexport function transpose(x: Tensor, perm: number[]): Tensor {\r\n  const inputDims = x.dims;\r\n  const rank = inputDims.length;\r\n\r\n  // determine permutation to use\r\n  // if no permutation was specified in the attributes,\r\n  // the default is [rank-1, ..., 0]\r\n  let finalPerm = new Array<number>(rank);\r\n  if (perm.length === rank) {\r\n    finalPerm = perm;\r\n  } else {\r\n    for (let i = 0; i < rank; i++) {\r\n      finalPerm[i] = rank - i - 1;\r\n    }\r\n  }\r\n\r\n  const outputDims = new Array<number>(rank);\r\n  const stride = new Array<number>(rank);\r\n\r\n  // determine shape of output, as well as stride to be used\r\n  // stride[i] indicates the stride for the input-tensor dimension\r\n  // corresponding to the i-th dimension of the output\r\n  for (let i = 0; i < rank; i++) {\r\n    const inpDim = finalPerm[i];\r\n    outputDims[i] = inputDims[inpDim];\r\n    if (inpDim + 1 < rank) {\r\n      stride[i] = ShapeUtil.sizeFromDimension(inputDims, inpDim + 1);\r\n    } else {\r\n      stride[i] = 1;\r\n    }\r\n  }\r\n\r\n  const output = new Tensor(outputDims, x.type);\r\n\r\n  const X = x.floatData;\r\n  const Y = output.floatData;\r\n\r\n  // partition the permutation into a prefix and the largest suffix such that\r\n  // every axis i in the suffix is mapped to i.\r\n  let numAxesInPrefix = 0;  // number of axes in prefix\r\n  let suffixBlocksize = 1;  // product of dimensions in the suffix\r\n  let prefixBlocksize = 1;  // product of dimensions in the prefix\r\n  let isSuffix = true;\r\n  for (let i = rank - 1; i >= 0; --i) {\r\n    const inpAxis = finalPerm[i];\r\n    if (isSuffix && (inpAxis === i)) {\r\n      suffixBlocksize *= inputDims[inpAxis];\r\n    } else {\r\n      isSuffix = false;\r\n      prefixBlocksize *= inputDims[inpAxis];\r\n      ++numAxesInPrefix;\r\n    }\r\n  }\r\n\r\n  if (prefixBlocksize === 1) {\r\n    doTransposeSingleBlock(suffixBlocksize, Y, X);\r\n  } else if (suffixBlocksize === 1) {\r\n    doTransposeEltWise(numAxesInPrefix, outputDims, prefixBlocksize, stride, Y, X);\r\n  } else {\r\n    doTranspose(numAxesInPrefix, outputDims, prefixBlocksize, suffixBlocksize, stride, Y, X);\r\n  }\r\n\r\n  return output;\r\n}\r\n\r\n// doTranspose: copies source tensor to target, transposing elements.\r\n// the stride vector indicates the transposition.\r\nfunction doTranspose(\r\n    numAxes: number, targetDims: number[], numBlocks: number, numElementsInBlock: number, stride: number[],\r\n    target: Tensor.FloatType, source: Tensor.FloatType) {\r\n  const targetIndex = new Array<number>(numAxes).fill(0);\r\n\r\n  const startSourceIndex = 0;\r\n  let startTargetIndex = 0;\r\n\r\n  for (let i = 0; i < numBlocks; ++i) {\r\n    const sizeOffset = ShapeUtil.indicesToOffset(targetIndex, stride, numAxes);\r\n    arrayCopyHelper(target, source, startTargetIndex, startSourceIndex + sizeOffset, numElementsInBlock);\r\n\r\n    ShapeUtil.incrementIndex(targetIndex, targetDims, numAxes);\r\n    startTargetIndex += numElementsInBlock;\r\n  }\r\n}\r\n\r\n// doTransposeEltWise: specialization of DoTranspose for the\r\n// num_elts_in_block=1 case. copies source tensor to target, transposing\r\n// elements. The stride vector indicates the transposition.\r\nfunction doTransposeEltWise(\r\n    numAxes: number, targetDims: number[], numBlocks: number, stride: number[], target: Tensor.FloatType,\r\n    source: Tensor.FloatType) {\r\n  const targetIndex = new Array<number>(numAxes).fill(0);\r\n\r\n  let startTargetIndex = 0;\r\n\r\n  for (let i = 0; i < numBlocks; ++i) {\r\n    const sourceOffset = ShapeUtil.indicesToOffset(targetIndex, stride, numAxes);\r\n    target[startTargetIndex++] = source[sourceOffset];\r\n    ShapeUtil.incrementIndex(targetIndex, targetDims, numAxes);\r\n  }\r\n}\r\n\r\n// doTransposeSingleBlock: specialization of DoTranspose for the num_blocks=1\r\n// case. copies source tensor to target, transposing elements. The stride\r\n// vector indicates the transposition.\r\nfunction doTransposeSingleBlock(numElementsInBlock: number, target: Tensor.FloatType, source: Tensor.FloatType) {\r\n  arrayCopyHelper(target, source, 0, 0, numElementsInBlock);\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Unsqueeze} from '../../../ops/unsqueeze';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {CpuInferenceHandler} from '../inference-handler';\r\n\r\nexport class CpuUnsqueeze extends Unsqueeze {\r\n  run(inferenceHandler: CpuInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const output = unsqueeze(inputs[0], this.axes);\r\n    return [output];\r\n  }\r\n}\r\n\r\nexport function unsqueeze(x: Tensor, axes: number[]): Tensor {\r\n  const outputDims = ShapeUtil.unsqueezeShape(x.dims, axes);\r\n  const output = new Tensor(outputDims, x.type);\r\n\r\n  const X = x.numberData;\r\n  const Y = output.numberData;\r\n\r\n  Y.set(X);\r\n\r\n  return output;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Backend as BackendInterface} from '../api/onnx';\r\nimport {Backend, SessionHandler} from '../backend';\r\nimport {Logger} from '../instrument';\r\nimport {Session} from '../session';\r\nimport * as wasmBinding from '../wasm-binding';\r\n\r\nimport {WasmSessionHandler} from './wasm/session-handler';\r\n\r\nexport let bindingInitPromise: Promise<void>|undefined;\r\n\r\ntype WasmOptions = BackendInterface.WasmOptions;\r\n\r\nexport class WasmBackend implements Backend, WasmOptions {\r\n  disabled?: boolean;\r\n  worker: number;\r\n  cpuFallback: boolean;\r\n  initTimeout: number;\r\n  constructor() {\r\n    // default parameters that users can override using the onnx global object\r\n\r\n    // by default fallback to pure JS cpu ops if not resolved in wasm backend\r\n    this.cpuFallback = true;\r\n\r\n    // by default use 3 workers\r\n    // TODO: Have logic to determing optimal fallback worker numbers based on CPU cores\r\n    this.worker = 3;\r\n\r\n    this.initTimeout = 5000;\r\n  }\r\n  async initialize(): Promise<boolean> {\r\n    this.checkIfNumWorkersIsValid();\r\n    const init = await this.isWasmSupported();\r\n    if (!init) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n  createSessionHandler(context: Session.Context): SessionHandler {\r\n    return new WasmSessionHandler(this, context, this.cpuFallback);\r\n  }\r\n  dispose(): void {}\r\n  checkIfNumWorkersIsValid() {\r\n    if (!Number.isFinite(this.worker) || Number.isNaN(this.worker)) {\r\n      throw new Error(`${this.worker} is not valid number of workers`);\r\n    }\r\n    if (!Number.isInteger(this.worker)) {\r\n      throw new Error(`${this.worker} is not an integer and hence not valid number of workers`);\r\n    }\r\n  }\r\n  async isWasmSupported(): Promise<boolean> {\r\n    try {\r\n      await wasmBinding.init(this.worker, this.initTimeout);\r\n      return true;\r\n    } catch (e) {\r\n      Logger.warning('WebAssembly', `Unable to initialize WebAssembly backend. ${e}`);\r\n      return false;\r\n    }\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\ndeclare interface OnnxWasmBindingJs {\r\n  (self: OnnxWasmBindingJs): Promise<void>;\r\n\r\n  _malloc: (ptr: number) => number;\r\n  _free: (ptr: number) => void;\r\n\r\n  buffer: ArrayBuffer;\r\n\r\n  HEAP8: Int8Array;\r\n  HEAP16: Int16Array;\r\n  HEAP32: Int32Array;\r\n  HEAPU8: Uint8Array;\r\n  HEAPU16: Uint16Array;\r\n  HEAPU32: Uint32Array;\r\n  HEAPF32: Float32Array;\r\n  HEAPF64: Float64Array;\r\n}\r\n\r\n// an interface to define argument handling\r\nexport interface WasmCallArgumentTypeMap {\r\n  bool: boolean;\r\n  int32: number;\r\n  float32: number;\r\n  float64: number;\r\n  boolptr: ReadonlyArray<boolean>|Uint8Array;\r\n  int32ptr: ReadonlyArray<number>|Uint32Array|Int32Array|null;\r\n  float32ptr: ReadonlyArray<number>|Int32Array|Uint32Array|Float32Array|null;\r\n  float64ptr: ReadonlyArray<number>|Float64Array|null;\r\n}\r\n\r\n// some types related to arguments\r\nexport type WasmCallArgumentType = keyof WasmCallArgumentTypeMap;\r\nexport type WasmCallArgumentDataType = WasmCallArgumentTypeMap[WasmCallArgumentType];\r\n\r\nexport type WasmCallArgumentPass = 'in'|'out'|'inout';\r\n\r\nexport type WasmCallArgument = [WasmCallArgumentDataType, WasmCallArgumentType, WasmCallArgumentPass?];\r\n\r\n// an interface to deal with performance data related to Wasm function calls\r\nexport interface PerformanceData {\r\n  startTime?: number;\r\n  endTime?: number;\r\n\r\n  startTimeFunc?: number;\r\n  endTimeFunc?: number;\r\n}\r\n\r\n// some global parameters to deal with wasm binding initialization\r\nlet binding: OnnxWasmBindingJs|undefined;\r\nlet initialized = false;\r\nlet initializing = false;\r\n\r\n/**\r\n * initialize the WASM instance.\r\n *\r\n * this function should be called before any other calls to the WASM binding.\r\n */\r\nexport function init(): Promise<void> {\r\n  if (initialized) {\r\n    return Promise.resolve();\r\n  }\r\n  if (initializing) {\r\n    throw new Error(`multiple calls to 'init()' detected.`);\r\n  }\r\n\r\n  initializing = true;\r\n\r\n  return new Promise<void>((resolve, reject) => {\r\n    // tslint:disable-next-line:no-require-imports\r\n    binding = require('../dist/onnx-wasm') as OnnxWasmBindingJs;\r\n    binding(binding).then(\r\n        () => {\r\n          // resolve init() promise\r\n          resolve();\r\n          initializing = false;\r\n          initialized = true;\r\n        },\r\n        err => {\r\n          initializing = false;\r\n          reject(err);\r\n        });\r\n  });\r\n}\r\n\r\n// class that deals with Wasm data interop and method calling\r\nexport class WasmBinding {\r\n  protected ptr8: number;\r\n  protected numBytesAllocated: number;\r\n  protected constructor() {\r\n    this.ptr8 = 0;\r\n    this.numBytesAllocated = 0;\r\n  }\r\n\r\n  /**\r\n   * ccall in current thread\r\n   * @param functionName\r\n   * @param params\r\n   */\r\n  ccall(functionName: string, ...params: WasmCallArgument[]): PerformanceData {\r\n    if (!initialized) {\r\n      throw new Error(`wasm not initialized. please ensure 'init()' is called.`);\r\n    }\r\n    const startTime = now();\r\n\r\n    const offset: number[] = [];\r\n    const size = WasmBinding.calculateOffsets(offset, params);\r\n    if (size > this.numBytesAllocated) {\r\n      this.expandMemory(size);\r\n    }\r\n    WasmBinding.ccallSerialize(binding!.HEAPU8.subarray(this.ptr8, this.ptr8 + size), offset, params);\r\n\r\n    const startTimeFunc = now();\r\n    this.func(functionName, this.ptr8);\r\n    const endTimeFunc = now();\r\n\r\n    WasmBinding.ccallDeserialize(binding!.HEAPU8.subarray(this.ptr8, this.ptr8 + size), offset, params);\r\n    const endTime = now();\r\n\r\n    return {startTime, endTime, startTimeFunc, endTimeFunc};\r\n  }\r\n\r\n  // raw ccall method  without invoking ccallSerialize() and ccallDeserialize()\r\n  // user by ccallRemote() in the web-worker\r\n  ccallRaw(functionName: string, data: Uint8Array): PerformanceData {\r\n    if (!initialized) {\r\n      throw new Error(`wasm not initialized. please ensure 'init()' is called.`);\r\n    }\r\n    const startTime = now();\r\n\r\n    const size = data.byteLength;\r\n    if (size > this.numBytesAllocated) {\r\n      this.expandMemory(size);\r\n    }\r\n\r\n    // copy input memory (data) to WASM heap\r\n    binding!.HEAPU8.subarray(this.ptr8, this.ptr8 + size).set(data);\r\n\r\n    const startTimeFunc = now();\r\n    this.func(functionName, this.ptr8);\r\n    const endTimeFunc = now();\r\n\r\n    // copy Wasm heap to output memory (data)\r\n    data.set(binding!.HEAPU8.subarray(this.ptr8, this.ptr8 + size));\r\n    const endTime = now();\r\n\r\n    return {startTime, endTime, startTimeFunc, endTimeFunc};\r\n  }\r\n\r\n  protected func(functionName: string, ptr8: number): void {\r\n    // tslint:disable-next-line:no-any\r\n    const func = (binding as any)[functionName] as (data: number) => void;\r\n    func(ptr8);\r\n  }\r\n\r\n  static calculateOffsets(offset: number[], params: WasmCallArgument[]): number {\r\n    // calculate size and offset\r\n    let size = 4 + 4 * params.length;\r\n    for (let i = 0; i < params.length; i++) {\r\n      const param = params[i];\r\n      const paramData = param[0];\r\n      const paramType = param[1];\r\n      const paramPass = param[2];\r\n\r\n      let len = 0;\r\n      switch (paramType) {\r\n        case 'bool':\r\n        case 'int32':\r\n        case 'float32':\r\n          len = 4;\r\n          break;\r\n        case 'float64':\r\n          len = 8;\r\n          break;\r\n        case 'boolptr':\r\n          if (!paramData) {\r\n            // deal with nullptr\r\n            offset.push(0);\r\n            continue;\r\n          } else if (Array.isArray(paramData) || ArrayBuffer.isView(paramData)) {\r\n            len = 4 * Math.ceil(paramData.length / 4);\r\n          } else {\r\n            throw new Error(`boolptr requires boolean array or Uint8Array`);\r\n          }\r\n          break;\r\n        case 'int32ptr':\r\n        case 'float32ptr':\r\n          if (!paramData) {\r\n            // deal with nullptr\r\n            offset.push(0);\r\n            continue;\r\n          } else if (Array.isArray(paramData)) {\r\n            if (paramPass === 'inout' || paramPass === 'out') {\r\n              throw new TypeError(`inout/out parameters must be ArrayBufferView for ptr types.`);\r\n            }\r\n            len = paramData.length * 4;\r\n          } else if (ArrayBuffer.isView(paramData)) {\r\n            len = paramData.byteLength;\r\n          } else {\r\n            throw new TypeError(`unsupported data type in 'ccall()'`);\r\n          }\r\n          break;\r\n        default:\r\n          throw new Error(`not supported parameter type: ${paramType}`);\r\n      }\r\n\r\n      offset.push(size);\r\n      size += len;\r\n    }\r\n\r\n    return size;\r\n  }\r\n\r\n  // tranfer data parameters (in/inout) to emscripten heap for ccall()\r\n  static ccallSerialize(heapU8: Uint8Array, offset: number[], params: WasmCallArgument[]) {\r\n    const heap32 = new Int32Array(heapU8.buffer, heapU8.byteOffset);\r\n    const heapU32 = new Uint32Array(heapU8.buffer, heapU8.byteOffset);\r\n    const heapF32 = new Float32Array(heapU8.buffer, heapU8.byteOffset);\r\n\r\n    heapU32[0] = params.length;\r\n\r\n    for (let i = 0; i < params.length; i++) {\r\n      const param = params[i];\r\n      const paramData = param[0];\r\n      const paramType = param[1];\r\n      const paramPass = param[2];\r\n      const offset8 = offset[i];\r\n      const offset32 = offset8 >> 2;\r\n\r\n      heapU32[i + 1] = offset8;\r\n\r\n      if (paramPass === 'out' || offset8 === 0) {\r\n        continue;\r\n      }\r\n\r\n      switch (paramType) {\r\n        case 'bool':\r\n          heapU8[offset8] = (paramData as WasmCallArgumentTypeMap['bool']) === true ? 1 : 0;\r\n          break;\r\n        case 'int32':\r\n          heap32[offset32] = paramData as number;\r\n          break;\r\n        case 'float32':\r\n          heapF32[offset32] = paramData as number;\r\n          break;\r\n        case 'boolptr':\r\n          const boolArray = paramData as WasmCallArgumentTypeMap['boolptr'];\r\n          // This will work for both Uint8Array as well as ReadonlyArray<boolean>\r\n          heapU8.subarray(offset8, offset8 + boolArray.length).set(paramData as Uint8Array);\r\n          break;\r\n        case 'int32ptr':\r\n          const int32Array = (paramData as WasmCallArgumentTypeMap['int32ptr'])!;\r\n          heap32.subarray(offset32, offset32 + int32Array.length).set(int32Array);\r\n          break;\r\n        case 'float32ptr':\r\n          const float32Array = (paramData as WasmCallArgumentTypeMap['float32ptr'])!;\r\n          heapF32.subarray(offset32, offset32 + float32Array.length).set(float32Array);\r\n          break;\r\n        default:\r\n          throw new Error(`not supported parameter type: ${paramType}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  // retrieve data parameters (in/inout) from emscripten heap after ccall()\r\n  static ccallDeserialize(buffer: Uint8Array, offset: number[], params: WasmCallArgument[]) {\r\n    const heapF32 = new Float32Array(buffer.buffer, buffer.byteOffset);\r\n    const heapU8 = new Uint8Array(buffer.buffer, buffer.byteOffset);\r\n\r\n    for (let i = 0; i < params.length; i++) {\r\n      const param = params[i];\r\n      const paramData = param[0];\r\n      const paramType = param[1];\r\n      const paramPass = param[2];\r\n      const offset8 = offset[i];\r\n      // const offset16 = offset8 >> 1;\r\n      const offset32 = offset8 >> 2;\r\n      // const offset64 = offset8 >> 3;\r\n\r\n      if (paramPass !== 'out' && paramPass !== 'inout') {\r\n        continue;\r\n      }\r\n\r\n      switch (paramType) {\r\n        case 'float32ptr':\r\n          const float32Array = (paramData as Float32Array);\r\n          float32Array.set(heapF32.subarray(offset32, offset32 + float32Array.length));\r\n          break;\r\n        case 'boolptr':\r\n          const boolArray = (paramData as Uint8Array);\r\n          boolArray.set(heapU8.subarray(offset8, offset8 + boolArray.length));\r\n          break;\r\n        default:\r\n          throw new Error(`not supported parameter type: ${paramType}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  // function for defining memory allocation strategy\r\n  private expandMemory(minBytesRequired: number) {\r\n    // free already held memory if applicable\r\n    if (this.ptr8 !== 0) {\r\n      binding!._free(this.ptr8);\r\n    }\r\n    // current simplistic strategy is to allocate 2 times the minimum bytes requested\r\n    this.numBytesAllocated = 2 * minBytesRequired;\r\n    this.ptr8 = binding!._malloc(this.numBytesAllocated);\r\n    if (this.ptr8 === 0) {\r\n      throw new Error('Unable to allocate requested amount of memory. Failing.');\r\n    }\r\n  }\r\n\r\n  dispose(): void {\r\n    if (!initialized) {\r\n      throw new Error(`wasm not initialized. please ensure 'init()' is called.`);\r\n    }\r\n    if (this.ptr8 !== 0) {\r\n      binding!._free(this.ptr8);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * returns a number to represent the current timestamp in a resolution as high as possible.\r\n */\r\nexport const now = (typeof performance !== 'undefined' && performance.now) ? () => performance.now() : Date.now;\r\n","\r\nvar Module = (function() {\r\n  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;\r\n  return (\r\nfunction(Module) {\r\n  Module = Module || {};\r\n\r\nvar Module=typeof Module!==\"undefined\"?Module:{};var moduleOverrides={};var key;for(key in Module){if(Module.hasOwnProperty(key)){moduleOverrides[key]=Module[key]}}Module[\"arguments\"]=[];Module[\"thisProgram\"]=\"./this.program\";Module[\"quit\"]=function(status,toThrow){throw toThrow};Module[\"preRun\"]=[];Module[\"postRun\"]=[];var ENVIRONMENT_IS_WEB=false;var ENVIRONMENT_IS_WORKER=false;var ENVIRONMENT_IS_NODE=false;var ENVIRONMENT_IS_SHELL=false;ENVIRONMENT_IS_WEB=typeof window===\"object\";ENVIRONMENT_IS_WORKER=typeof importScripts===\"function\";ENVIRONMENT_IS_NODE=typeof process===\"object\"&&typeof require===\"function\"&&!ENVIRONMENT_IS_WEB&&!ENVIRONMENT_IS_WORKER;ENVIRONMENT_IS_SHELL=!ENVIRONMENT_IS_WEB&&!ENVIRONMENT_IS_NODE&&!ENVIRONMENT_IS_WORKER;var scriptDirectory=\"\";function locateFile(path){if(Module[\"locateFile\"]){return Module[\"locateFile\"](path,scriptDirectory)}else{return scriptDirectory+path}}if(ENVIRONMENT_IS_NODE){scriptDirectory=__dirname+\"/\";var nodeFS;var nodePath;Module[\"read\"]=function shell_read(filename,binary){var ret;if(!nodeFS)nodeFS=require(\"fs\");if(!nodePath)nodePath=require(\"path\");filename=nodePath[\"normalize\"](filename);ret=nodeFS[\"readFileSync\"](filename);return binary?ret:ret.toString()};Module[\"readBinary\"]=function readBinary(filename){var ret=Module[\"read\"](filename,true);if(!ret.buffer){ret=new Uint8Array(ret)}assert(ret.buffer);return ret};if(process[\"argv\"].length>1){Module[\"thisProgram\"]=process[\"argv\"][1].replace(/\\\\/g,\"/\")}Module[\"arguments\"]=process[\"argv\"].slice(2);process[\"on\"](\"uncaughtException\",function(ex){if(!(ex instanceof ExitStatus)){throw ex}});process[\"on\"](\"unhandledRejection\",abort);Module[\"quit\"]=function(status){process[\"exit\"](status)};Module[\"inspect\"]=function(){return\"[Emscripten Module object]\"}}else if(ENVIRONMENT_IS_SHELL){if(typeof read!=\"undefined\"){Module[\"read\"]=function shell_read(f){return read(f)}}Module[\"readBinary\"]=function readBinary(f){var data;if(typeof readbuffer===\"function\"){return new Uint8Array(readbuffer(f))}data=read(f,\"binary\");assert(typeof data===\"object\");return data};if(typeof scriptArgs!=\"undefined\"){Module[\"arguments\"]=scriptArgs}else if(typeof arguments!=\"undefined\"){Module[\"arguments\"]=arguments}if(typeof quit===\"function\"){Module[\"quit\"]=function(status){quit(status)}}}else if(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER){if(ENVIRONMENT_IS_WORKER){scriptDirectory=self.location.href}else if(document.currentScript){scriptDirectory=document.currentScript.src}if(_scriptDir){scriptDirectory=_scriptDir}if(scriptDirectory.indexOf(\"blob:\")!==0){scriptDirectory=scriptDirectory.substr(0,scriptDirectory.lastIndexOf(\"/\")+1)}else{scriptDirectory=\"\"}Module[\"read\"]=function shell_read(url){var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,false);xhr.send(null);return xhr.responseText};if(ENVIRONMENT_IS_WORKER){Module[\"readBinary\"]=function readBinary(url){var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,false);xhr.responseType=\"arraybuffer\";xhr.send(null);return new Uint8Array(xhr.response)}}Module[\"readAsync\"]=function readAsync(url,onload,onerror){var xhr=new XMLHttpRequest;xhr.open(\"GET\",url,true);xhr.responseType=\"arraybuffer\";xhr.onload=function xhr_onload(){if(xhr.status==200||xhr.status==0&&xhr.response){onload(xhr.response);return}onerror()};xhr.onerror=onerror;xhr.send(null)};Module[\"setWindowTitle\"]=function(title){document.title=title}}else{}var out=Module[\"print\"]||(typeof console!==\"undefined\"?console.log.bind(console):typeof print!==\"undefined\"?print:null);var err=Module[\"printErr\"]||(typeof printErr!==\"undefined\"?printErr:typeof console!==\"undefined\"&&console.warn.bind(console)||out);for(key in moduleOverrides){if(moduleOverrides.hasOwnProperty(key)){Module[key]=moduleOverrides[key]}}moduleOverrides=undefined;var STACK_ALIGN=16;function dynamicAlloc(size){var ret=HEAP32[DYNAMICTOP_PTR>>2];var end=ret+size+15&-16;if(end<=_emscripten_get_heap_size()){HEAP32[DYNAMICTOP_PTR>>2]=end}else{var success=_emscripten_resize_heap(end);if(!success)return 0}return ret}function getNativeTypeSize(type){switch(type){case\"i1\":case\"i8\":return 1;case\"i16\":return 2;case\"i32\":return 4;case\"i64\":return 8;case\"float\":return 4;case\"double\":return 8;default:{if(type[type.length-1]===\"*\"){return 4}else if(type[0]===\"i\"){var bits=parseInt(type.substr(1));assert(bits%8===0,\"getNativeTypeSize invalid bits \"+bits+\", type \"+type);return bits/8}else{return 0}}}}function warnOnce(text){if(!warnOnce.shown)warnOnce.shown={};if(!warnOnce.shown[text]){warnOnce.shown[text]=1;err(text)}}var asm2wasmImports={\"f64-rem\":function(x,y){return x%y},\"debugger\":function(){debugger}};var jsCallStartIndex=1;var functionPointers=new Array(0);function convertJsFunctionToWasm(func,sig){var typeSection=[1,0,1,96];var sigRet=sig.slice(0,1);var sigParam=sig.slice(1);var typeCodes={\"i\":127,\"j\":126,\"f\":125,\"d\":124};typeSection.push(sigParam.length);for(var i=0;i<sigParam.length;++i){typeSection.push(typeCodes[sigParam[i]])}if(sigRet==\"v\"){typeSection.push(0)}else{typeSection=typeSection.concat([1,typeCodes[sigRet]])}typeSection[1]=typeSection.length-2;var bytes=new Uint8Array([0,97,115,109,1,0,0,0].concat(typeSection,[2,7,1,1,101,1,102,0,0,7,5,1,1,102,0,0]));var module=new WebAssembly.Module(bytes);var instance=new WebAssembly.Instance(module,{e:{f:func}});var wrappedFunc=instance.exports.f;return wrappedFunc}var funcWrappers={};function dynCall(sig,ptr,args){if(args&&args.length){return Module[\"dynCall_\"+sig].apply(null,[ptr].concat(args))}else{return Module[\"dynCall_\"+sig].call(null,ptr)}}var tempRet0=0;var setTempRet0=function(value){tempRet0=value};var getTempRet0=function(){return tempRet0};if(typeof WebAssembly!==\"object\"){err(\"no native wasm support detected\")}var wasmMemory;var wasmTable;var ABORT=false;var EXITSTATUS=0;function assert(condition,text){if(!condition){abort(\"Assertion failed: \"+text)}}function getCFunc(ident){var func=Module[\"_\"+ident];assert(func,\"Cannot call unknown function \"+ident+\", make sure it is exported\");return func}function ccall(ident,returnType,argTypes,args,opts){var toC={\"string\":function(str){var ret=0;if(str!==null&&str!==undefined&&str!==0){var len=(str.length<<2)+1;ret=stackAlloc(len);stringToUTF8(str,ret,len)}return ret},\"array\":function(arr){var ret=stackAlloc(arr.length);writeArrayToMemory(arr,ret);return ret}};function convertReturnValue(ret){if(returnType===\"string\")return UTF8ToString(ret);if(returnType===\"boolean\")return Boolean(ret);return ret}var func=getCFunc(ident);var cArgs=[];var stack=0;if(args){for(var i=0;i<args.length;i++){var converter=toC[argTypes[i]];if(converter){if(stack===0)stack=stackSave();cArgs[i]=converter(args[i])}else{cArgs[i]=args[i]}}}var ret=func.apply(null,cArgs);ret=convertReturnValue(ret);if(stack!==0)stackRestore(stack);return ret}function setValue(ptr,value,type,noSafe){type=type||\"i8\";if(type.charAt(type.length-1)===\"*\")type=\"i32\";switch(type){case\"i1\":HEAP8[ptr>>0]=value;break;case\"i8\":HEAP8[ptr>>0]=value;break;case\"i16\":HEAP16[ptr>>1]=value;break;case\"i32\":HEAP32[ptr>>2]=value;break;case\"i64\":tempI64=[value>>>0,(tempDouble=value,+Math_abs(tempDouble)>=1?tempDouble>0?(Math_min(+Math_floor(tempDouble/4294967296),4294967295)|0)>>>0:~~+Math_ceil((tempDouble-+(~~tempDouble>>>0))/4294967296)>>>0:0)],HEAP32[ptr>>2]=tempI64[0],HEAP32[ptr+4>>2]=tempI64[1];break;case\"float\":HEAPF32[ptr>>2]=value;break;case\"double\":HEAPF64[ptr>>3]=value;break;default:abort(\"invalid type for setValue: \"+type)}}var ALLOC_NONE=3;var UTF8Decoder=typeof TextDecoder!==\"undefined\"?new TextDecoder(\"utf8\"):undefined;function UTF8ArrayToString(u8Array,idx,maxBytesToRead){var endIdx=idx+maxBytesToRead;var endPtr=idx;while(u8Array[endPtr]&&!(endPtr>=endIdx))++endPtr;if(endPtr-idx>16&&u8Array.subarray&&UTF8Decoder){return UTF8Decoder.decode(u8Array.subarray(idx,endPtr))}else{var str=\"\";while(idx<endPtr){var u0=u8Array[idx++];if(!(u0&128)){str+=String.fromCharCode(u0);continue}var u1=u8Array[idx++]&63;if((u0&224)==192){str+=String.fromCharCode((u0&31)<<6|u1);continue}var u2=u8Array[idx++]&63;if((u0&240)==224){u0=(u0&15)<<12|u1<<6|u2}else{u0=(u0&7)<<18|u1<<12|u2<<6|u8Array[idx++]&63}if(u0<65536){str+=String.fromCharCode(u0)}else{var ch=u0-65536;str+=String.fromCharCode(55296|ch>>10,56320|ch&1023)}}}return str}function UTF8ToString(ptr,maxBytesToRead){return ptr?UTF8ArrayToString(HEAPU8,ptr,maxBytesToRead):\"\"}function stringToUTF8Array(str,outU8Array,outIdx,maxBytesToWrite){if(!(maxBytesToWrite>0))return 0;var startIdx=outIdx;var endIdx=outIdx+maxBytesToWrite-1;for(var i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343){var u1=str.charCodeAt(++i);u=65536+((u&1023)<<10)|u1&1023}if(u<=127){if(outIdx>=endIdx)break;outU8Array[outIdx++]=u}else if(u<=2047){if(outIdx+1>=endIdx)break;outU8Array[outIdx++]=192|u>>6;outU8Array[outIdx++]=128|u&63}else if(u<=65535){if(outIdx+2>=endIdx)break;outU8Array[outIdx++]=224|u>>12;outU8Array[outIdx++]=128|u>>6&63;outU8Array[outIdx++]=128|u&63}else{if(outIdx+3>=endIdx)break;outU8Array[outIdx++]=240|u>>18;outU8Array[outIdx++]=128|u>>12&63;outU8Array[outIdx++]=128|u>>6&63;outU8Array[outIdx++]=128|u&63}}outU8Array[outIdx]=0;return outIdx-startIdx}function stringToUTF8(str,outPtr,maxBytesToWrite){return stringToUTF8Array(str,HEAPU8,outPtr,maxBytesToWrite)}function lengthBytesUTF8(str){var len=0;for(var i=0;i<str.length;++i){var u=str.charCodeAt(i);if(u>=55296&&u<=57343)u=65536+((u&1023)<<10)|str.charCodeAt(++i)&1023;if(u<=127)++len;else if(u<=2047)len+=2;else if(u<=65535)len+=3;else len+=4}return len}var UTF16Decoder=typeof TextDecoder!==\"undefined\"?new TextDecoder(\"utf-16le\"):undefined;function writeArrayToMemory(array,buffer){HEAP8.set(array,buffer)}function writeAsciiToMemory(str,buffer,dontAddNull){for(var i=0;i<str.length;++i){HEAP8[buffer++>>0]=str.charCodeAt(i)}if(!dontAddNull)HEAP8[buffer>>0]=0}function demangle(func){return func}function demangleAll(text){var regex=/__Z[\\w\\d_]+/g;return text.replace(regex,function(x){var y=demangle(x);return x===y?x:y+\" [\"+x+\"]\"})}function jsStackTrace(){var err=new Error;if(!err.stack){try{throw new Error(0)}catch(e){err=e}if(!err.stack){return\"(no stack trace available)\"}}return err.stack.toString()}var WASM_PAGE_SIZE=65536;function alignUp(x,multiple){if(x%multiple>0){x+=multiple-x%multiple}return x}var buffer,HEAP8,HEAPU8,HEAP16,HEAPU16,HEAP32,HEAPU32,HEAPF32,HEAPF64;function updateGlobalBufferViews(){Module[\"HEAP8\"]=HEAP8=new Int8Array(buffer);Module[\"HEAP16\"]=HEAP16=new Int16Array(buffer);Module[\"HEAP32\"]=HEAP32=new Int32Array(buffer);Module[\"HEAPU8\"]=HEAPU8=new Uint8Array(buffer);Module[\"HEAPU16\"]=HEAPU16=new Uint16Array(buffer);Module[\"HEAPU32\"]=HEAPU32=new Uint32Array(buffer);Module[\"HEAPF32\"]=HEAPF32=new Float32Array(buffer);Module[\"HEAPF64\"]=HEAPF64=new Float64Array(buffer)}var STACK_BASE=6352,DYNAMIC_BASE=5249232,DYNAMICTOP_PTR=6096;var TOTAL_STACK=5242880;var INITIAL_TOTAL_MEMORY=Module[\"TOTAL_MEMORY\"]||16777216;if(INITIAL_TOTAL_MEMORY<TOTAL_STACK)err(\"TOTAL_MEMORY should be larger than TOTAL_STACK, was \"+INITIAL_TOTAL_MEMORY+\"! (TOTAL_STACK=\"+TOTAL_STACK+\")\");if(Module[\"buffer\"]){buffer=Module[\"buffer\"]}else{if(typeof WebAssembly===\"object\"&&typeof WebAssembly.Memory===\"function\"){wasmMemory=new WebAssembly.Memory({\"initial\":INITIAL_TOTAL_MEMORY/WASM_PAGE_SIZE});buffer=wasmMemory.buffer}else{buffer=new ArrayBuffer(INITIAL_TOTAL_MEMORY)}}updateGlobalBufferViews();HEAP32[DYNAMICTOP_PTR>>2]=DYNAMIC_BASE;function callRuntimeCallbacks(callbacks){while(callbacks.length>0){var callback=callbacks.shift();if(typeof callback==\"function\"){callback();continue}var func=callback.func;if(typeof func===\"number\"){if(callback.arg===undefined){Module[\"dynCall_v\"](func)}else{Module[\"dynCall_vi\"](func,callback.arg)}}else{func(callback.arg===undefined?null:callback.arg)}}}var __ATPRERUN__=[];var __ATINIT__=[];var __ATMAIN__=[];var __ATEXIT__=[];var __ATPOSTRUN__=[];var runtimeInitialized=false;var runtimeExited=false;function preRun(){if(Module[\"preRun\"]){if(typeof Module[\"preRun\"]==\"function\")Module[\"preRun\"]=[Module[\"preRun\"]];while(Module[\"preRun\"].length){addOnPreRun(Module[\"preRun\"].shift())}}callRuntimeCallbacks(__ATPRERUN__)}function ensureInitRuntime(){if(runtimeInitialized)return;runtimeInitialized=true;callRuntimeCallbacks(__ATINIT__)}function preMain(){callRuntimeCallbacks(__ATMAIN__)}function exitRuntime(){callRuntimeCallbacks(__ATEXIT__);runtimeExited=true}function postRun(){if(Module[\"postRun\"]){if(typeof Module[\"postRun\"]==\"function\")Module[\"postRun\"]=[Module[\"postRun\"]];while(Module[\"postRun\"].length){addOnPostRun(Module[\"postRun\"].shift())}}callRuntimeCallbacks(__ATPOSTRUN__)}function addOnPreRun(cb){__ATPRERUN__.unshift(cb)}function addOnPostRun(cb){__ATPOSTRUN__.unshift(cb)}var Math_abs=Math.abs;var Math_ceil=Math.ceil;var Math_floor=Math.floor;var Math_min=Math.min;var runDependencies=0;var runDependencyWatcher=null;var dependenciesFulfilled=null;function addRunDependency(id){runDependencies++;if(Module[\"monitorRunDependencies\"]){Module[\"monitorRunDependencies\"](runDependencies)}}function removeRunDependency(id){runDependencies--;if(Module[\"monitorRunDependencies\"]){Module[\"monitorRunDependencies\"](runDependencies)}if(runDependencies==0){if(runDependencyWatcher!==null){clearInterval(runDependencyWatcher);runDependencyWatcher=null}if(dependenciesFulfilled){var callback=dependenciesFulfilled;dependenciesFulfilled=null;callback()}}}Module[\"preloadedImages\"]={};Module[\"preloadedAudios\"]={};var dataURIPrefix=\"data:application/octet-stream;base64,\";function isDataURI(filename){return String.prototype.startsWith?filename.startsWith(dataURIPrefix):filename.indexOf(dataURIPrefix)===0}var wasmBinaryFile=\"onnx-wasm.wasm\";if(!isDataURI(wasmBinaryFile)){wasmBinaryFile=locateFile(wasmBinaryFile)}function getBinary(){try{if(Module[\"wasmBinary\"]){return new Uint8Array(Module[\"wasmBinary\"])}if(Module[\"readBinary\"]){return Module[\"readBinary\"](wasmBinaryFile)}else{throw\"both async and sync fetching of the wasm failed\"}}catch(err){abort(err)}}function getBinaryPromise(){if(!Module[\"wasmBinary\"]&&(ENVIRONMENT_IS_WEB||ENVIRONMENT_IS_WORKER)&&typeof fetch===\"function\"){return fetch(wasmBinaryFile,{credentials:\"same-origin\"}).then(function(response){if(!response[\"ok\"]){throw\"failed to load wasm binary file at '\"+wasmBinaryFile+\"'\"}return response[\"arrayBuffer\"]()}).catch(function(){return getBinary()})}return new Promise(function(resolve,reject){resolve(getBinary())})}function createWasm(env){var info={\"env\":env,\"global\":{\"NaN\":NaN,Infinity:Infinity},\"global.Math\":Math,\"asm2wasm\":asm2wasmImports};function receiveInstance(instance,module){var exports=instance.exports;Module[\"asm\"]=exports;removeRunDependency(\"wasm-instantiate\")}addRunDependency(\"wasm-instantiate\");if(Module[\"instantiateWasm\"]){try{return Module[\"instantiateWasm\"](info,receiveInstance)}catch(e){err(\"Module.instantiateWasm callback failed with error: \"+e);return false}}function receiveInstantiatedSource(output){receiveInstance(output[\"instance\"])}function instantiateArrayBuffer(receiver){getBinaryPromise().then(function(binary){return WebAssembly.instantiate(binary,info)}).then(receiver,function(reason){err(\"failed to asynchronously prepare wasm: \"+reason);abort(reason)})}if(!Module[\"wasmBinary\"]&&typeof WebAssembly.instantiateStreaming===\"function\"&&!isDataURI(wasmBinaryFile)&&typeof fetch===\"function\"){WebAssembly.instantiateStreaming(fetch(wasmBinaryFile,{credentials:\"same-origin\"}),info).then(receiveInstantiatedSource,function(reason){err(\"wasm streaming compile failed: \"+reason);err(\"falling back to ArrayBuffer instantiation\");instantiateArrayBuffer(receiveInstantiatedSource)})}else{instantiateArrayBuffer(receiveInstantiatedSource)}return{}}Module[\"asm\"]=function(global,env,providedBuffer){env[\"memory\"]=wasmMemory;env[\"table\"]=wasmTable=new WebAssembly.Table({\"initial\":41,\"maximum\":41,\"element\":\"anyfunc\"});env[\"__memory_base\"]=1024;env[\"__table_base\"]=0;var exports=createWasm(env);return exports};var tempDoublePtr=6336;function ___assert_fail(condition,filename,line,func){abort(\"Assertion failed: \"+UTF8ToString(condition)+\", at: \"+[filename?UTF8ToString(filename):\"unknown filename\",line,func?UTF8ToString(func):\"unknown function\"])}function ___cxa_allocate_exception(size){return _malloc(size)}function __ZSt18uncaught_exceptionv(){return!!__ZSt18uncaught_exceptionv.uncaught_exception}function ___cxa_free_exception(ptr){try{return _free(ptr)}catch(e){}}var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function(adjusted){if(!adjusted||EXCEPTIONS.infos[adjusted])return adjusted;for(var key in EXCEPTIONS.infos){var ptr=+key;var adj=EXCEPTIONS.infos[ptr].adjusted;var len=adj.length;for(var i=0;i<len;i++){if(adj[i]===adjusted){return ptr}}}return adjusted},addRef:function(ptr){if(!ptr)return;var info=EXCEPTIONS.infos[ptr];info.refcount++},decRef:function(ptr){if(!ptr)return;var info=EXCEPTIONS.infos[ptr];assert(info.refcount>0);info.refcount--;if(info.refcount===0&&!info.rethrown){if(info.destructor){Module[\"dynCall_vi\"](info.destructor,ptr)}delete EXCEPTIONS.infos[ptr];___cxa_free_exception(ptr)}},clearRef:function(ptr){if(!ptr)return;var info=EXCEPTIONS.infos[ptr];info.refcount=0}};function ___resumeException(ptr){if(!EXCEPTIONS.last){EXCEPTIONS.last=ptr}throw ptr}function ___cxa_find_matching_catch(){var thrown=EXCEPTIONS.last;if(!thrown){return(setTempRet0(0),0)|0}var info=EXCEPTIONS.infos[thrown];var throwntype=info.type;if(!throwntype){return(setTempRet0(0),thrown)|0}var typeArray=Array.prototype.slice.call(arguments);var pointer=Module[\"___cxa_is_pointer_type\"](throwntype);if(!___cxa_find_matching_catch.buffer)___cxa_find_matching_catch.buffer=_malloc(4);HEAP32[___cxa_find_matching_catch.buffer>>2]=thrown;thrown=___cxa_find_matching_catch.buffer;for(var i=0;i<typeArray.length;i++){if(typeArray[i]&&Module[\"___cxa_can_catch\"](typeArray[i],throwntype,thrown)){thrown=HEAP32[thrown>>2];info.adjusted.push(thrown);return(setTempRet0(typeArray[i]),thrown)|0}}thrown=HEAP32[thrown>>2];return(setTempRet0(throwntype),thrown)|0}function ___cxa_throw(ptr,type,destructor){EXCEPTIONS.infos[ptr]={ptr:ptr,adjusted:[ptr],type:type,destructor:destructor,refcount:0,caught:false,rethrown:false};EXCEPTIONS.last=ptr;if(!(\"uncaught_exception\"in __ZSt18uncaught_exceptionv)){__ZSt18uncaught_exceptionv.uncaught_exception=1}else{__ZSt18uncaught_exceptionv.uncaught_exception++}throw ptr}function ___gxx_personality_v0(){}function ___lock(){}var SYSCALLS={buffers:[null,[],[]],printChar:function(stream,curr){var buffer=SYSCALLS.buffers[stream];if(curr===0||curr===10){(stream===1?out:err)(UTF8ArrayToString(buffer,0));buffer.length=0}else{buffer.push(curr)}},varargs:0,get:function(varargs){SYSCALLS.varargs+=4;var ret=HEAP32[SYSCALLS.varargs-4>>2];return ret},getStr:function(){var ret=UTF8ToString(SYSCALLS.get());return ret},get64:function(){var low=SYSCALLS.get(),high=SYSCALLS.get();return low},getZero:function(){SYSCALLS.get()}};function ___syscall140(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD(),offset_high=SYSCALLS.get(),offset_low=SYSCALLS.get(),result=SYSCALLS.get(),whence=SYSCALLS.get();var offset=offset_low;FS.llseek(stream,offset,whence);HEAP32[result>>2]=stream.position;if(stream.getdents&&offset===0&&whence===0)stream.getdents=null;return 0}catch(e){if(typeof FS===\"undefined\"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}function flush_NO_FILESYSTEM(){var fflush=Module[\"_fflush\"];if(fflush)fflush(0);var buffers=SYSCALLS.buffers;if(buffers[1].length)SYSCALLS.printChar(1,10);if(buffers[2].length)SYSCALLS.printChar(2,10)}function ___syscall146(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.get(),iov=SYSCALLS.get(),iovcnt=SYSCALLS.get();var ret=0;for(var i=0;i<iovcnt;i++){var ptr=HEAP32[iov+i*8>>2];var len=HEAP32[iov+(i*8+4)>>2];for(var j=0;j<len;j++){SYSCALLS.printChar(stream,HEAPU8[ptr+j])}ret+=len}return ret}catch(e){if(typeof FS===\"undefined\"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}function ___syscall54(which,varargs){SYSCALLS.varargs=varargs;try{return 0}catch(e){if(typeof FS===\"undefined\"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}function ___syscall6(which,varargs){SYSCALLS.varargs=varargs;try{var stream=SYSCALLS.getStreamFromFD();FS.close(stream);return 0}catch(e){if(typeof FS===\"undefined\"||!(e instanceof FS.ErrnoError))abort(e);return-e.errno}}function ___unlock(){}function _abort(){Module[\"abort\"]()}function _emscripten_get_heap_size(){return HEAP8.length}function abortOnCannotGrowMemory(requestedSize){abort(\"OOM\")}function emscripten_realloc_buffer(size){var PAGE_MULTIPLE=65536;size=alignUp(size,PAGE_MULTIPLE);var oldSize=buffer.byteLength;try{var result=wasmMemory.grow((size-oldSize)/65536);if(result!==(-1|0)){return buffer=wasmMemory.buffer}else{return null}}catch(e){return null}}function _emscripten_resize_heap(requestedSize){var oldSize=_emscripten_get_heap_size();var PAGE_MULTIPLE=65536;var LIMIT=2147483648-PAGE_MULTIPLE;if(requestedSize>LIMIT){return false}var MIN_TOTAL_MEMORY=16777216;var newSize=Math.max(oldSize,MIN_TOTAL_MEMORY);while(newSize<requestedSize){if(newSize<=536870912){newSize=alignUp(2*newSize,PAGE_MULTIPLE)}else{newSize=Math.min(alignUp((3*newSize+2147483648)/4,PAGE_MULTIPLE),LIMIT)}}var replacement=emscripten_realloc_buffer(newSize);if(!replacement||replacement.byteLength!=newSize){return false}updateGlobalBufferViews();return true}function _llvm_trap(){abort(\"trap!\")}function _emscripten_memcpy_big(dest,src,num){HEAPU8.set(HEAPU8.subarray(src,src+num),dest)}function ___setErrNo(value){if(Module[\"___errno_location\"])HEAP32[Module[\"___errno_location\"]()>>2]=value;return value}__ATEXIT__.push(flush_NO_FILESYSTEM);var ASSERTIONS=false;var asmGlobalArg={};var asmLibraryArg={\"abort\":abort,\"setTempRet0\":setTempRet0,\"getTempRet0\":getTempRet0,\"__ZSt18uncaught_exceptionv\":__ZSt18uncaught_exceptionv,\"___assert_fail\":___assert_fail,\"___cxa_allocate_exception\":___cxa_allocate_exception,\"___cxa_find_matching_catch\":___cxa_find_matching_catch,\"___cxa_free_exception\":___cxa_free_exception,\"___cxa_throw\":___cxa_throw,\"___gxx_personality_v0\":___gxx_personality_v0,\"___lock\":___lock,\"___resumeException\":___resumeException,\"___setErrNo\":___setErrNo,\"___syscall140\":___syscall140,\"___syscall146\":___syscall146,\"___syscall54\":___syscall54,\"___syscall6\":___syscall6,\"___unlock\":___unlock,\"_abort\":_abort,\"_emscripten_get_heap_size\":_emscripten_get_heap_size,\"_emscripten_memcpy_big\":_emscripten_memcpy_big,\"_emscripten_resize_heap\":_emscripten_resize_heap,\"_llvm_trap\":_llvm_trap,\"abortOnCannotGrowMemory\":abortOnCannotGrowMemory,\"emscripten_realloc_buffer\":emscripten_realloc_buffer,\"flush_NO_FILESYSTEM\":flush_NO_FILESYSTEM,\"tempDoublePtr\":tempDoublePtr,\"DYNAMICTOP_PTR\":DYNAMICTOP_PTR};var asm=Module[\"asm\"](asmGlobalArg,asmLibraryArg,buffer);Module[\"asm\"]=asm;var ___errno_location=Module[\"___errno_location\"]=function(){return Module[\"asm\"][\"___errno_location\"].apply(null,arguments)};var _add_f32=Module[\"_add_f32\"]=function(){return Module[\"asm\"][\"_add_f32\"].apply(null,arguments)};var _and_u8=Module[\"_and_u8\"]=function(){return Module[\"asm\"][\"_and_u8\"].apply(null,arguments)};var _average_pool_f32=Module[\"_average_pool_f32\"]=function(){return Module[\"asm\"][\"_average_pool_f32\"].apply(null,arguments)};var _batch_normalization_f32=Module[\"_batch_normalization_f32\"]=function(){return Module[\"asm\"][\"_batch_normalization_f32\"].apply(null,arguments)};var _clip_f32=Module[\"_clip_f32\"]=function(){return Module[\"asm\"][\"_clip_f32\"].apply(null,arguments)};var _conv_f32=Module[\"_conv_f32\"]=function(){return Module[\"asm\"][\"_conv_f32\"].apply(null,arguments)};var _div_f32=Module[\"_div_f32\"]=function(){return Module[\"asm\"][\"_div_f32\"].apply(null,arguments)};var _emscripten_replace_memory=Module[\"_emscripten_replace_memory\"]=function(){return Module[\"asm\"][\"_emscripten_replace_memory\"].apply(null,arguments)};var _fflush=Module[\"_fflush\"]=function(){return Module[\"asm\"][\"_fflush\"].apply(null,arguments)};var _free=Module[\"_free\"]=function(){return Module[\"asm\"][\"_free\"].apply(null,arguments)};var _gemm_f32=Module[\"_gemm_f32\"]=function(){return Module[\"asm\"][\"_gemm_f32\"].apply(null,arguments)};var _instance_normalization_f32=Module[\"_instance_normalization_f32\"]=function(){return Module[\"asm\"][\"_instance_normalization_f32\"].apply(null,arguments)};var _malloc=Module[\"_malloc\"]=function(){return Module[\"asm\"][\"_malloc\"].apply(null,arguments)};var _matmul_f32=Module[\"_matmul_f32\"]=function(){return Module[\"asm\"][\"_matmul_f32\"].apply(null,arguments)};var _max_pool_f32=Module[\"_max_pool_f32\"]=function(){return Module[\"asm\"][\"_max_pool_f32\"].apply(null,arguments)};var _memcpy=Module[\"_memcpy\"]=function(){return Module[\"asm\"][\"_memcpy\"].apply(null,arguments)};var _memset=Module[\"_memset\"]=function(){return Module[\"asm\"][\"_memset\"].apply(null,arguments)};var _mul_f32=Module[\"_mul_f32\"]=function(){return Module[\"asm\"][\"_mul_f32\"].apply(null,arguments)};var _or_u8=Module[\"_or_u8\"]=function(){return Module[\"asm\"][\"_or_u8\"].apply(null,arguments)};var _prelu_f32=Module[\"_prelu_f32\"]=function(){return Module[\"asm\"][\"_prelu_f32\"].apply(null,arguments)};var _sbrk=Module[\"_sbrk\"]=function(){return Module[\"asm\"][\"_sbrk\"].apply(null,arguments)};var _softmax_f32=Module[\"_softmax_f32\"]=function(){return Module[\"asm\"][\"_softmax_f32\"].apply(null,arguments)};var _sub_f32=Module[\"_sub_f32\"]=function(){return Module[\"asm\"][\"_sub_f32\"].apply(null,arguments)};var _sum_f32=Module[\"_sum_f32\"]=function(){return Module[\"asm\"][\"_sum_f32\"].apply(null,arguments)};var _xor_u8=Module[\"_xor_u8\"]=function(){return Module[\"asm\"][\"_xor_u8\"].apply(null,arguments)};var establishStackSpace=Module[\"establishStackSpace\"]=function(){return Module[\"asm\"][\"establishStackSpace\"].apply(null,arguments)};var stackAlloc=Module[\"stackAlloc\"]=function(){return Module[\"asm\"][\"stackAlloc\"].apply(null,arguments)};var stackRestore=Module[\"stackRestore\"]=function(){return Module[\"asm\"][\"stackRestore\"].apply(null,arguments)};var stackSave=Module[\"stackSave\"]=function(){return Module[\"asm\"][\"stackSave\"].apply(null,arguments)};var dynCall_ii=Module[\"dynCall_ii\"]=function(){return Module[\"asm\"][\"dynCall_ii\"].apply(null,arguments)};var dynCall_iiii=Module[\"dynCall_iiii\"]=function(){return Module[\"asm\"][\"dynCall_iiii\"].apply(null,arguments)};var dynCall_v=Module[\"dynCall_v\"]=function(){return Module[\"asm\"][\"dynCall_v\"].apply(null,arguments)};var dynCall_vi=Module[\"dynCall_vi\"]=function(){return Module[\"asm\"][\"dynCall_vi\"].apply(null,arguments)};var dynCall_viiii=Module[\"dynCall_viiii\"]=function(){return Module[\"asm\"][\"dynCall_viiii\"].apply(null,arguments)};var dynCall_viiiii=Module[\"dynCall_viiiii\"]=function(){return Module[\"asm\"][\"dynCall_viiiii\"].apply(null,arguments)};var dynCall_viiiiii=Module[\"dynCall_viiiiii\"]=function(){return Module[\"asm\"][\"dynCall_viiiiii\"].apply(null,arguments)};Module[\"asm\"]=asm;Module[\"then\"]=function(func){if(Module[\"calledRun\"]){func(Module)}else{var old=Module[\"onRuntimeInitialized\"];Module[\"onRuntimeInitialized\"]=function(){if(old)old();func(Module)}}return Module};function ExitStatus(status){this.name=\"ExitStatus\";this.message=\"Program terminated with exit(\"+status+\")\";this.status=status}ExitStatus.prototype=new Error;ExitStatus.prototype.constructor=ExitStatus;dependenciesFulfilled=function runCaller(){if(!Module[\"calledRun\"])run();if(!Module[\"calledRun\"])dependenciesFulfilled=runCaller};function run(args){args=args||Module[\"arguments\"];if(runDependencies>0){return}preRun();if(runDependencies>0)return;if(Module[\"calledRun\"])return;function doRun(){if(Module[\"calledRun\"])return;Module[\"calledRun\"]=true;if(ABORT)return;ensureInitRuntime();preMain();if(Module[\"onRuntimeInitialized\"])Module[\"onRuntimeInitialized\"]();postRun()}if(Module[\"setStatus\"]){Module[\"setStatus\"](\"Running...\");setTimeout(function(){setTimeout(function(){Module[\"setStatus\"](\"\")},1);doRun()},1)}else{doRun()}}Module[\"run\"]=run;function abort(what){if(Module[\"onAbort\"]){Module[\"onAbort\"](what)}if(what!==undefined){out(what);err(what);what=JSON.stringify(what)}else{what=\"\"}ABORT=true;EXITSTATUS=1;throw\"abort(\"+what+\"). Build with -s ASSERTIONS=1 for more info.\"}Module[\"abort\"]=abort;if(Module[\"preInit\"]){if(typeof Module[\"preInit\"]==\"function\")Module[\"preInit\"]=[Module[\"preInit\"]];while(Module[\"preInit\"].length>0){Module[\"preInit\"].pop()()}}run();\r\n\r\n\r\n  return Module\r\n}\r\n);\r\n})();\r\nif (typeof exports === 'object' && typeof module === 'object')\r\n      module.exports = Module;\r\n    else if (typeof define === 'function' && define['amd'])\r\n      define([], function() { return Module; });\r\n    else if (typeof exports === 'object')\r\n      exports[\"Module\"] = Module;\r\n    ","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// resolves . and .. elements in a path array with directory names there\n// must be no slashes, empty elements, or device names (c:\\) in the array\n// (so also no leading and trailing slashes - it does not distinguish\n// relative and absolute paths)\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = parts.length - 1; i >= 0; i--) {\n    var last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// Split a filename into [root, dir, basename, ext], unix version\n// 'root' is just a slash, or nothing.\nvar splitPathRe =\n    /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/;\nvar splitPath = function(filename) {\n  return splitPathRe.exec(filename).slice(1);\n};\n\n// path.resolve([from ...], to)\n// posix version\nexports.resolve = function() {\n  var resolvedPath = '',\n      resolvedAbsolute = false;\n\n  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    var path = (i >= 0) ? arguments[i] : process.cwd();\n\n    // Skip empty and invalid entries\n    if (typeof path !== 'string') {\n      throw new TypeError('Arguments to path.resolve must be strings');\n    } else if (!path) {\n      continue;\n    }\n\n    resolvedPath = path + '/' + resolvedPath;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {\n    return !!p;\n  }), !resolvedAbsolute).join('/');\n\n  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\n};\n\n// path.normalize(path)\n// posix version\nexports.normalize = function(path) {\n  var isAbsolute = exports.isAbsolute(path),\n      trailingSlash = substr(path, -1) === '/';\n\n  // Normalize the path\n  path = normalizeArray(filter(path.split('/'), function(p) {\n    return !!p;\n  }), !isAbsolute).join('/');\n\n  if (!path && !isAbsolute) {\n    path = '.';\n  }\n  if (path && trailingSlash) {\n    path += '/';\n  }\n\n  return (isAbsolute ? '/' : '') + path;\n};\n\n// posix version\nexports.isAbsolute = function(path) {\n  return path.charAt(0) === '/';\n};\n\n// posix version\nexports.join = function() {\n  var paths = Array.prototype.slice.call(arguments, 0);\n  return exports.normalize(filter(paths, function(p, index) {\n    if (typeof p !== 'string') {\n      throw new TypeError('Arguments to path.join must be strings');\n    }\n    return p;\n  }).join('/'));\n};\n\n\n// path.relative(from, to)\n// posix version\nexports.relative = function(from, to) {\n  from = exports.resolve(from).substr(1);\n  to = exports.resolve(to).substr(1);\n\n  function trim(arr) {\n    var start = 0;\n    for (; start < arr.length; start++) {\n      if (arr[start] !== '') break;\n    }\n\n    var end = arr.length - 1;\n    for (; end >= 0; end--) {\n      if (arr[end] !== '') break;\n    }\n\n    if (start > end) return [];\n    return arr.slice(start, end - start + 1);\n  }\n\n  var fromParts = trim(from.split('/'));\n  var toParts = trim(to.split('/'));\n\n  var length = Math.min(fromParts.length, toParts.length);\n  var samePartsLength = length;\n  for (var i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  var outputParts = [];\n  for (var i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n  return outputParts.join('/');\n};\n\nexports.sep = '/';\nexports.delimiter = ':';\n\nexports.dirname = function(path) {\n  var result = splitPath(path),\n      root = result[0],\n      dir = result[1];\n\n  if (!root && !dir) {\n    // No dirname whatsoever\n    return '.';\n  }\n\n  if (dir) {\n    // It has a dirname, strip trailing slash\n    dir = dir.substr(0, dir.length - 1);\n  }\n\n  return root + dir;\n};\n\n\nexports.basename = function(path, ext) {\n  var f = splitPath(path)[2];\n  // TODO: make this comparison case-insensitive on windows?\n  if (ext && f.substr(-1 * ext.length) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n  return f;\n};\n\n\nexports.extname = function(path) {\n  return splitPath(path)[3];\n};\n\nfunction filter (xs, f) {\n    if (xs.filter) return xs.filter(f);\n    var res = [];\n    for (var i = 0; i < xs.length; i++) {\n        if (f(xs[i], i, xs)) res.push(xs[i]);\n    }\n    return res;\n}\n\n// String.prototype.substr - negative index don't work in IE8\nvar substr = 'ab'.substr(-1) === 'b'\n    ? function (str, start, len) { return str.substr(start, len) }\n    : function (str, start, len) {\n        if (start < 0) start = str.length + start;\n        return str.substr(start, len);\n    }\n;\n","module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"./onnx-worker.js\");\n};","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Backend, InferenceHandler, SessionHandler} from '../../backend';\r\nimport {Graph} from '../../graph';\r\nimport {Operator} from '../../operators';\r\nimport {OpSet, resolveOperator} from '../../opset';\r\nimport {Session} from '../../session';\r\nimport {CPU_OP_RESOLVE_RULES} from '../cpu/op-resolve-rules';\r\n\r\nimport {WasmInferenceHandler} from './inference-handler';\r\nimport {WASM_OP_RESOLVE_RULES} from './op-resolve-rules';\r\n\r\nexport class WasmSessionHandler implements SessionHandler {\r\n  private opResolveRules: ReadonlyArray<OpSet.ResolveRule>;\r\n  constructor(readonly backend: Backend, readonly context: Session.Context, fallbackToCpuOps: boolean) {\r\n    this.opResolveRules = fallbackToCpuOps ? WASM_OP_RESOLVE_RULES.concat(CPU_OP_RESOLVE_RULES) : WASM_OP_RESOLVE_RULES;\r\n  }\r\n\r\n  createInferenceHandler(): InferenceHandler {\r\n    return new WasmInferenceHandler(this, this.context.profiler);\r\n  }\r\n\r\n  dispose(): void {}\r\n\r\n  resolve(node: Graph.Node, opsets: ReadonlyArray<OpSet>): Operator {\r\n    const op = resolveOperator(node, opsets, this.opResolveRules);\r\n    op.initialize(node.attributes);\r\n    return op;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {InferenceHandler} from '../../backend';\r\nimport {Profiler} from '../../instrument';\r\n\r\nimport {WasmSessionHandler} from './session-handler';\r\n\r\nexport class WasmInferenceHandler implements InferenceHandler {\r\n  constructor(public readonly session: WasmSessionHandler, public readonly profiler?: Readonly<Profiler>) {}\r\n\r\n  dispose(): void {}\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {OpSet} from '../../opset';\r\n\r\nimport {WasmBatchNormalization} from './ops/batch-normalization';\r\nimport {WasmBinaryOp} from './ops/binary-op';\r\nimport {WasmClip} from './ops/clip';\r\nimport {WasmConv} from './ops/conv';\r\nimport {WasmGemm} from './ops/gemm';\r\nimport {WasmInstanceNormalization} from './ops/instance-normalization';\r\nimport {WasmMatMul} from './ops/matmul';\r\nimport {WasmAveragePool, WasmGlobalAveragePool, WasmGlobalMaxPool, WasmMaxPool} from './ops/pool';\r\nimport {WasmSoftmax} from './ops/softmax';\r\nimport {WasmSum} from './ops/sum';\r\n\r\nexport const WASM_OP_RESOLVE_RULES: ReadonlyArray<OpSet.ResolveRule> = [\r\n  ['Add', '', '7+', () => new WasmBinaryOp(['float32'], 'Add')],\r\n  ['And', '', '7+', () => new WasmBinaryOp(['bool'], 'And')],\r\n  ['AveragePool', '', '7+', () => new WasmAveragePool()],  // TODO: support new attributes for AveragePool-10\r\n  ['BatchNormalization', '', '7+', () => new WasmBatchNormalization()],\r\n  ['Clip', '', '6+', () => new WasmClip()],\r\n  ['Conv', '', '1+', () => new WasmConv()],\r\n  ['Div', '', '7+', () => new WasmBinaryOp(['float32'], 'Div')],\r\n  ['Gemm', '', '7+', () => new WasmGemm()],\r\n  ['GlobalAveragePool', '', '1+', () => new WasmGlobalAveragePool()],\r\n  ['GlobalMaxPool', '', '1+', () => new WasmGlobalMaxPool()],\r\n  ['InstanceNormalization', '', '6+', () => new WasmInstanceNormalization()],\r\n  ['MatMul', '', '1+', () => new WasmMatMul()],\r\n  ['MaxPool', '', '1+', () => new WasmMaxPool()],  // TODO: support new attributes for MaxPool-8 and MaxPool-10\r\n  ['Mul', '', '7+', () => new WasmBinaryOp(['float32'], 'Mul')],\r\n  ['Or', '', '7+', () => new WasmBinaryOp(['bool'], 'Or')],\r\n  ['PRelu', '', '7+', () => new WasmBinaryOp(['float32'], 'PRelu')],\r\n  ['Softmax', '', '1+', () => new WasmSoftmax()],\r\n  ['Sub', '', '7+', () => new WasmBinaryOp(['float32'], 'Sub')],\r\n  ['Sum', '', '6+', () => new WasmSum()],  // TODO: support multidirectional broadcast for Sum-8\r\n  ['Xor', '', '7+', () => new WasmBinaryOp(['bool'], 'Xor')],\r\n];\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {BatchNormalization} from '../../../ops/batch-normalization';\r\nimport {Tensor} from '../../../tensor';\r\nimport {WasmBinding} from '../../../wasm-binding';\r\nimport {WasmInferenceHandler} from '../inference-handler';\r\n\r\nexport class WasmBatchNormalization extends BatchNormalization {\r\n  run(inferenceHandler: WasmInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const x = inputs[0];\r\n    const scale = inputs[1];\r\n    const b = inputs[2];\r\n    const mean = inputs[3];\r\n    const variance = inputs[4];\r\n\r\n    // calculate channel size (i.e.) data points per channel\r\n    let channelSize = 1;\r\n    for (let i = 2; i < x.dims.length; i++) {\r\n      channelSize *= x.dims[i];\r\n    }\r\n\r\n    // create output Tensor after determining output size\r\n    const y = new Tensor(x.dims, x.type);\r\n    WasmBinding.getInstance().ccall(\r\n        '_batch_normalization_f32', [x.floatData, 'float32ptr'], [y.floatData, 'float32ptr', 'out'],\r\n        [x.dims[0], 'int32'], [x.dims[1], 'int32'], [channelSize, 'int32'], [scale.floatData, 'float32ptr'],\r\n        [b.floatData, 'float32ptr'], [mean.floatData, 'float32ptr'], [variance.floatData, 'float32ptr'],\r\n        [this.epsilon, 'float32']);\r\n\r\n    return [y];\r\n  }\r\n\r\n  // overriding the checkInputTypes() in the base class because Wasm backend has special type limitations\r\n  checkInputTypes(inputs: Tensor[]): boolean {\r\n    const X = inputs[0];\r\n    const scale = inputs[1];\r\n    const B = inputs[2];\r\n    const mean = inputs[3];\r\n    const var_ = inputs[4];\r\n\r\n    // input should atleast have three dimensions - N,C,dim1,...,dimn\r\n    // other inputs need to be one dimensional\r\n    if (X.dims.length < 3 || scale.dims.length !== 1 || B.dims.length !== 1 || mean.dims.length !== 1 ||\r\n        var_.dims.length !== 1) {\r\n      return false;\r\n    }\r\n    if (scale.dims[0] !== X.dims[1] || B.dims[0] !== X.dims[1] || mean.dims[0] !== X.dims[1] ||\r\n        var_.dims[0] !== X.dims[1]) {\r\n      return false;\r\n    }\r\n    // currently Wasm backend only supports 'float32' input type\r\n    if (X.type !== 'float32' || scale.type !== 'float32' || B.type !== 'float32' || mean.type !== 'float32' ||\r\n        var_.type !== 'float32') {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {BinaryOp} from '../../../ops/binary-op';\r\nimport {Tensor} from '../../../tensor';\r\nimport {BroadcastUtil} from '../../../util';\r\nimport {WasmBinding} from '../../../wasm-binding';\r\nimport {WasmInferenceHandler} from '../inference-handler';\r\n\r\nexport class WasmBinaryOp extends BinaryOp {\r\n  constructor(typeConstraint: ReadonlyArray<Tensor.DataType>, opType: string, resultType?: Tensor.DataType) {\r\n    super(typeConstraint, opType, resultType);\r\n  }\r\n\r\n  run(inferenceHandler: WasmInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const outputShape = BroadcastUtil.calcShape(inputs[0].dims, inputs[1].dims, false);\r\n    if (!outputShape) {\r\n      throw new Error('not broadcastable');\r\n    }\r\n    let fun = '';\r\n    // TODO: Explore better ways to deal with types than current `binaryOpType` approach\r\n    let binaryOpType = '';\r\n    switch (this.opType) {\r\n      case 'Add':\r\n        if (inputs[0].type === 'float32') {\r\n          fun = '_add_f32';\r\n          binaryOpType = 'float32InFloat32Out';\r\n        }\r\n        break;\r\n      case 'Sub':\r\n        if (inputs[0].type === 'float32') {\r\n          fun = '_sub_f32';\r\n          binaryOpType = 'float32InFloat32Out';\r\n        }\r\n        break;\r\n      case 'Mul':\r\n        if (inputs[0].type === 'float32') {\r\n          fun = '_mul_f32';\r\n          binaryOpType = 'float32InFloat32Out';\r\n        }\r\n        break;\r\n      case 'Div':\r\n        if (inputs[0].type === 'float32') {\r\n          fun = '_div_f32';\r\n          binaryOpType = 'float32InFloat32Out';\r\n        }\r\n        break;\r\n      case 'PRelu':\r\n        if (inputs[0].type === 'float32') {\r\n          fun = '_prelu_f32';\r\n          binaryOpType = 'float32InFloat32Out';\r\n        }\r\n        break;\r\n      case 'Xor':\r\n        fun = '_xor_u8';\r\n        binaryOpType = 'boolInBoolOut';\r\n        break;\r\n      case 'Or':\r\n        fun = '_or_u8';\r\n        binaryOpType = 'boolInBoolOut';\r\n        break;\r\n      case 'And':\r\n        fun = '_and_u8';\r\n        binaryOpType = 'boolInBoolOut';\r\n        break;\r\n      default:\r\n        throw Error(`unsupported binary op by the Wasm backend`);\r\n    }\r\n    let result: Tensor;\r\n    if (binaryOpType === 'float32InFloat32Out') {\r\n      result = new Tensor(outputShape, 'float32');\r\n      WasmBinding.getInstance().ccall(\r\n          fun, [inputs[0].floatData, 'float32ptr'], [inputs[0].dims.length, 'int32'], [inputs[0].dims, 'int32ptr'],\r\n          [inputs[1].floatData, 'float32ptr'], [inputs[1].dims.length, 'int32'], [inputs[1].dims, 'int32ptr'],\r\n          [result.floatData, 'float32ptr', 'out'], [result.floatData.length, 'int32'], [outputShape.length, 'int32'],\r\n          [outputShape, 'int32ptr']);\r\n    } else if (binaryOpType === 'boolInBoolOut') {\r\n      result = new Tensor(outputShape, 'bool');\r\n      WasmBinding.getInstance().ccall(\r\n          fun, [inputs[0].integerData as Uint8Array, 'boolptr'], [inputs[0].dims.length, 'int32'],\r\n          [inputs[0].dims, 'int32ptr'], [inputs[1].integerData as Uint8Array, 'boolptr'],\r\n          [inputs[1].dims.length, 'int32'], [inputs[1].dims, 'int32ptr'],\r\n          [result.integerData as Uint8Array, 'boolptr', 'out'], [result.integerData.length, 'int32'],\r\n          [outputShape.length, 'int32'], [outputShape, 'int32ptr']);\r\n    } else {\r\n      throw new Error(`Unsupported binary op format. Probably unsupported data types.`);\r\n    }\r\n    return [result];\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Clip} from '../../../ops/clip';\r\nimport {Tensor} from '../../../tensor';\r\nimport {WasmBinding} from '../../../wasm-binding';\r\nimport {WasmInferenceHandler} from '../inference-handler';\r\n\r\nexport class WasmClip extends Clip {\r\n  run(inferenceHandler: WasmInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const result = new Tensor(inputs[0].dims, inputs[0].type);\r\n    const size = result.floatData.length;\r\n    if (inputs[0].type === 'float32') {\r\n      WasmBinding.getInstance().ccall(\r\n          '_clip_f32', [inputs[0].floatData, 'float32ptr'], [result.floatData, 'float32ptr', 'out'], [size, 'int32'],\r\n          [this.min, 'float32'], [this.max, 'float32']);\r\n    }\r\n    // Expand for differnt types supported for this specific kernel of Clip\r\n    else {\r\n      throw new Error(`Unsupported input type for Clip operator.`);\r\n    }\r\n    return [result];\r\n  }\r\n\r\n  // overriding the checkInputTypes() in the base class because Wasm backend has special type limitations\r\n  checkInputTypes(inputs: Tensor[]): boolean {\r\n    // currently Wasm backend only supports 'float32' input type\r\n    if (inputs[0].type !== 'float32') {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Conv} from '../../../ops/conv';\r\nimport {Tensor} from '../../../tensor';\r\nimport {PoolConvUtil} from '../../../util';\r\nimport {WasmBinding} from '../../../wasm-binding';\r\nimport {PerformanceData} from '../../../wasm-binding-core';\r\nimport {WasmInferenceHandler} from '../inference-handler';\r\n\r\nexport class WasmConv extends Conv {\r\n  async run(inferenceHandler: WasmInferenceHandler, inputs: Tensor[]): Promise<Tensor[]> {\r\n    const x = inputs[0];\r\n    const w = inputs[1];\r\n    const b = inputs.length === 3 ? inputs[2] : undefined;\r\n\r\n    // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\r\n    if (this.kernelShape.length === 0) {\r\n      const wDims = inputs[1].dims;\r\n      for (let i = 2; i < wDims.length; ++i) {\r\n        this.kernelShape.push(wDims[i]);\r\n      }\r\n    }\r\n\r\n    // create output Tensor after determining output size (after adjusting pads based on 'autoPad' attribute)\r\n    const outputDims = PoolConvUtil.computeConvOutputShape(\r\n        x.dims, w.dims, this.strides, this.dilations, this.kernelShape, this.pads, this.autoPad);\r\n    const y = new Tensor(outputDims, x.type);\r\n\r\n    // determine number of threads needed to process\r\n    const numThreads = determineNumThreads(x.dims[0], this.group, w.dims[0], WasmBinding.workerNumber);\r\n\r\n    // no multi-threading\r\n    if (numThreads === 1) {\r\n      WasmBinding.getInstance().ccall(\r\n          '_conv_f32', [x.floatData, 'float32ptr'], [x.dims, 'int32ptr'], [w.floatData, 'float32ptr'],\r\n          [w.dims, 'int32ptr'], [y.floatData, 'float32ptr', 'out'], [y.dims, 'int32ptr'],\r\n          [b ? b.floatData : null, 'float32ptr'], [this.dilations, 'int32ptr'], [this.group, 'int32'],\r\n          [this.pads, 'int32ptr'], [this.strides, 'int32ptr']);\r\n      return [y];\r\n    }\r\n\r\n    // multi-threaded using web-workers\r\n    else {\r\n      // data pre-processing\r\n      const wDimsSp = w.dims.slice(0);\r\n      wDimsSp[0] = Math.floor(w.dims[0] / numThreads);\r\n      const wSizeSp = wDimsSp[0] * wDimsSp[1] * wDimsSp[2] * wDimsSp[3];\r\n\r\n      const wDimsFinal = w.dims.slice(0);\r\n      wDimsFinal[0] = w.dims[0] - (numThreads - 1) * wDimsSp[0];\r\n\r\n      const yDimsSp = [1, wDimsSp[0], outputDims[2], outputDims[3]];\r\n      const ySizeSp = wDimsSp[0] * outputDims[2] * outputDims[3];\r\n\r\n      const yDimsFinal = [1, wDimsFinal[0], outputDims[2], outputDims[3]];\r\n\r\n      const wArray = new Array<Float32Array>(numThreads);\r\n      const yArray = new Array<Float32Array>(numThreads);\r\n      const bArray = new Array<Float32Array>(numThreads);\r\n      const workerTasks = new Array<Promise<PerformanceData>>(numThreads - 1);\r\n\r\n      // function calls\r\n      for (let i = 0; i < numThreads; ++i) {\r\n        if (i !== numThreads - 1) {\r\n          wArray[i] = w.floatData.subarray(i * wSizeSp, (i + 1) * wSizeSp) as Float32Array;\r\n          yArray[i] = y.floatData.subarray(i * ySizeSp, (i + 1) * ySizeSp) as Float32Array;\r\n          if (b) {\r\n            bArray[i] = b.floatData.subarray(i * wDimsSp[0], (i + 1) * wDimsSp[0]) as Float32Array;\r\n          }\r\n          workerTasks[i] = WasmBinding.getInstance().ccallRemote(\r\n              i, '_conv_f32', [x.floatData, 'float32ptr'], [x.dims, 'int32ptr'], [wArray[i], 'float32ptr'],\r\n              [wDimsSp, 'int32ptr'], [yArray[i], 'float32ptr', 'out'], [yDimsSp, 'int32ptr'],\r\n              [bArray.length > 0 ? bArray[i] : null, 'float32ptr'], [this.dilations, 'int32ptr'], [this.group, 'int32'],\r\n              [this.pads, 'int32ptr'], [this.strides, 'int32ptr']);\r\n        } else {\r\n          wArray[i] = w.floatData.subarray(i * wSizeSp) as Float32Array;\r\n          yArray[i] = y.floatData.subarray(i * ySizeSp) as Float32Array;\r\n          if (b) {\r\n            bArray[i] = b.floatData.subarray(i * wDimsSp[0]) as Float32Array;\r\n          }\r\n          WasmBinding.getInstance().ccall(\r\n              '_conv_f32', [x.floatData, 'float32ptr'], [x.dims, 'int32ptr'], [wArray[i], 'float32ptr'],\r\n              [wDimsFinal, 'int32ptr'], [yArray[i], 'float32ptr', 'out'], [yDimsFinal, 'int32ptr'],\r\n              [bArray.length > 0 ? bArray[i] : null, 'float32ptr'], [this.dilations, 'int32ptr'], [this.group, 'int32'],\r\n              [this.pads, 'int32ptr'], [this.strides, 'int32ptr']);\r\n        }\r\n      }\r\n\r\n      await Promise.all(workerTasks);\r\n      return [y];\r\n    }\r\n  }\r\n\r\n  // overriding the checkInputTypes() in the base class because Wasm backend has special type limitations\r\n  checkInputTypes(inputs: Tensor[]): boolean {\r\n    // currently Wasm backend only supports 'float32' input type\r\n    if (inputs[0].type !== 'float32' || inputs[1].type !== 'float32') {\r\n      return false;\r\n    }\r\n\r\n    if (inputs.length === 3 && inputs[2].type !== 'float32') {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n\r\n// This function will determine the number of threads\r\n// The strategy to parallelize is to parallelize on number of filter maps in the kernel\r\n// (i.e.) number of output channels\r\nfunction determineNumThreads(batchSize: number, group: number, numFilterMaps: number, numWebWorkers: number): number {\r\n  // single threaded if:\r\n  // 1) batch size is not 1 (data splitting logic across threads is specific to batch size being 1)\r\n  // 2) multi-threading not supported yet for mulitple groups\r\n  // 3) if number of filter maps is 1\r\n  // 4) number of web workers is 0\r\n  if (batchSize !== 1 || group !== 1 || numFilterMaps === 1 || numWebWorkers <= 0) {\r\n    return 1;\r\n  }\r\n\r\n  // multi-threaded:\r\n  // determine number of threads\r\n  return Math.min(numFilterMaps, numWebWorkers + 1);\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Gemm} from '../../../ops/gemm';\r\nimport {Tensor} from '../../../tensor';\r\nimport {BroadcastUtil, GemmUtil} from '../../../util';\r\nimport {WasmBinding} from '../../../wasm-binding';\r\nimport {WasmInferenceHandler} from '../inference-handler';\r\n\r\nexport class WasmGemm extends Gemm {\r\n  run(inferenceHandler: WasmInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const a = inputs[0];\r\n    const b = inputs[1];\r\n    const c = inputs[2];\r\n\r\n    const [M, N] = GemmUtil.getShapeOfGemmResult(a.dims, this.transA, b.dims, this.transB, c.dims);\r\n    const y = new Tensor([M, N], a.type);\r\n    if (!BroadcastUtil.calc(y, c, (a, b) => (b), true)) {\r\n      throw new Error(`c is not broadcastable to the shape of the result of the Gemm operator`);\r\n    }\r\n    WasmBinding.getInstance().ccall(\r\n        '_gemm_f32', [this.transA, 'bool'], [this.transB, 'bool'], [this.transA ? a.dims[1] : a.dims[0], 'int32'],\r\n        [this.transB ? b.dims[0] : b.dims[1], 'int32'], [this.transA ? a.dims[0] : a.dims[1], 'int32'],\r\n        [this.alpha, 'float32'], [a.floatData, 'float32ptr'], [b.floatData, 'float32ptr'], [this.beta, 'float32'],\r\n        [y.floatData, 'float32ptr', 'inout']);\r\n\r\n    return [y];\r\n  }\r\n\r\n  // overriding the checkInputTypes() in the base class because Wasm backend has special type limitations\r\n  checkInputTypes(inputs: Tensor[]): boolean {\r\n    // currently Wasm backend only supports 'float32' input type\r\n    if (inputs[0].type !== 'float32' || inputs[1].type !== 'float32' || inputs[2].type !== 'float32') {\r\n      return false;\r\n    }\r\n\r\n    if ((inputs[0].type !== inputs[1].type) || (inputs[0].type !== inputs[2].type)) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {InstanceNormalization} from '../../../ops/instance-normalization';\r\nimport {Tensor} from '../../../tensor';\r\nimport {WasmBinding} from '../../../wasm-binding';\r\nimport {WasmInferenceHandler} from '../inference-handler';\r\n\r\nexport class WasmInstanceNormalization extends InstanceNormalization {\r\n  run(inferenceHandler: WasmInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const x = inputs[0];\r\n    const scale = inputs[1];\r\n    const b = inputs[2];\r\n\r\n    // calculate channel size (i.e.) data points per channel\r\n    let channelSize = 1;\r\n    for (let i = 2; i < x.dims.length; i++) {\r\n      channelSize *= x.dims[i];\r\n    }\r\n\r\n    // create output Tensor after determining output size\r\n    const y = new Tensor(x.dims, x.type);\r\n    WasmBinding.getInstance().ccall(\r\n        '_instance_normalization_f32', [x.floatData, 'float32ptr'], [y.floatData, 'float32ptr', 'out'],\r\n        [x.dims[0], 'int32'], [x.dims[1], 'int32'], [channelSize, 'int32'], [scale.floatData, 'float32ptr'],\r\n        [b.floatData, 'float32ptr'], [this.epsilon, 'float32']);\r\n\r\n    return [y];\r\n  }\r\n\r\n  // overriding the checkInputTypes() in the base class because Wasm backend has special type limitations\r\n  checkInputTypes(inputs: Tensor[]): boolean {\r\n    const X = inputs[0];\r\n    const scale = inputs[1];\r\n    const B = inputs[2];\r\n\r\n    // input should atleast have three dimensions - N,C,dim1,...,dimn\r\n    // other inputs need to be one dimensional\r\n    if (X.dims.length < 3 || scale.dims.length !== 1 || B.dims.length !== 1) {\r\n      return false;\r\n    }\r\n    if (scale.dims[0] !== X.dims[1] || B.dims[0] !== X.dims[1]) {\r\n      return false;\r\n    }\r\n    // currently Wasm backend only supports 'float32' input type\r\n    if (X.type !== 'float32' || scale.type !== 'float32' || B.type !== 'float32') {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {MatMul} from '../../../ops/matmul';\r\nimport {Tensor} from '../../../tensor';\r\nimport {BroadcastUtil, MatMulUtil, ShapeUtil} from '../../../util';\r\nimport {WasmBinding} from '../../../wasm-binding';\r\nimport {WasmInferenceHandler} from '../inference-handler';\r\n\r\nexport class WasmMatMul extends MatMul {\r\n  run(inferenceHandler: WasmInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const [dimsA, dimsB] = MatMulUtil.preprocessInputShapes(inputs[0].dims, inputs[1].dims);\r\n    const outputShape = BroadcastUtil.calcShape(dimsA, dimsB, true);\r\n    if (!outputShape) {\r\n      // the inputs cannot broadcast or cannot multiply\r\n      throw new Error(`input dimensions do not match the requirement`);\r\n    }\r\n\r\n    const outputSize = ShapeUtil.size(outputShape);\r\n    const resultData = new Float32Array(outputSize);\r\n    WasmBinding.getInstance().ccall(\r\n        '_matmul_f32', [inputs[0].floatData, 'float32ptr'], [inputs[0].dims, 'int32ptr'],\r\n        [inputs[0].dims.length, 'int32'], [inputs[1].floatData, 'float32ptr'], [inputs[1].dims, 'int32ptr'],\r\n        [inputs[1].dims.length, 'int32'], [resultData, 'float32ptr', 'out'], [resultData.length, 'int32'],\r\n        [outputShape, 'int32ptr'], [outputShape.length, 'int32']);\r\n    MatMulUtil.postprocessOutputShape(outputShape as number[], inputs[0].dims.length, inputs[1].dims.length);\r\n    const result = new Tensor(outputShape, inputs[0].type);\r\n    result.floatData.set(resultData);\r\n    return [result];\r\n  }\r\n\r\n  // overriding the checkInputTypes() in the base class because Wasm backend has special type limitations\r\n  checkInputTypes(inputs: Tensor[]): boolean {\r\n    // currently Wasm backend only supports 'float32' input type\r\n    if (inputs[0].type !== 'float32' || inputs[1].type !== 'float32') {\r\n      return false;\r\n    }\r\n\r\n    if (inputs[0].type !== inputs[1].type) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {AveragePool, GlobalAveragePool, GlobalMaxPool, MaxPool} from '../../../ops/pool';\r\nimport {Tensor} from '../../../tensor';\r\nimport {PoolConvUtil, ShapeUtil} from '../../../util';\r\nimport {WasmBinding} from '../../../wasm-binding';\r\nimport {PerformanceData} from '../../../wasm-binding-core';\r\nimport {WasmInferenceHandler} from '../inference-handler';\r\n\r\nexport class WasmAveragePool extends AveragePool {\r\n  // overriding the checkInputTypes() in the base class because Wasm backend has special type limitations\r\n  checkInputTypes(inputs: Tensor[]): boolean {\r\n    return checkInputTypes(inputs);\r\n  }\r\n\r\n  async run(inferenceHandler: WasmInferenceHandler, inputs: Tensor[]): Promise<Tensor[]> {\r\n    return averagePool(inputs[0], this.autoPad, this.countIncludePad, this.kernelShape, this.pads, this.strides);\r\n  }\r\n}\r\n\r\nexport class WasmGlobalAveragePool extends GlobalAveragePool {\r\n  // overriding the checkInputTypes() in the base class because Wasm backend has special type limitations\r\n  checkInputTypes(inputs: Tensor[]): boolean {\r\n    return checkInputTypes(inputs);\r\n  }\r\n\r\n  async run(inferenceHandler: WasmInferenceHandler, inputs: Tensor[]): Promise<Tensor[]> {\r\n    return globalAveragePool(inputs[0]);\r\n  }\r\n}\r\n\r\nexport class WasmMaxPool extends MaxPool {\r\n  // overriding the checkInputTypes() in the base class because Wasm backend has special type limitations\r\n  checkInputTypes(inputs: Tensor[]): boolean {\r\n    return checkInputTypes(inputs);\r\n  }\r\n\r\n  async run(inferenceHandler: WasmInferenceHandler, inputs: Tensor[]): Promise<Tensor[]> {\r\n    return maxPool(inputs[0], this.autoPad, this.kernelShape, this.pads, this.strides);\r\n  }\r\n}\r\n\r\nexport class WasmGlobalMaxPool extends GlobalMaxPool {\r\n  // overriding the checkInputTypes() in the base class because Wasm backend has special type limitations\r\n  checkInputTypes(inputs: Tensor[]): boolean {\r\n    return checkInputTypes(inputs);\r\n  }\r\n\r\n  async run(inferenceHandler: WasmInferenceHandler, inputs: Tensor[]): Promise<Tensor[]> {\r\n    return globalMaxPool(inputs[0]);\r\n  }\r\n}\r\n\r\n// type check function\r\nfunction checkInputTypes(inputs: Tensor[]): boolean {\r\n  // currently Wasm backend only supports 'float32' input type\r\n  if (inputs[0].type !== 'float32') {\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\n// functions implementing specific pooling operations\r\nasync function averagePool(\r\n    input: Tensor, autoPad: string, countIncludePad: boolean, kernelShape: number[], pads: number[],\r\n    strides: number[]): Promise<Tensor[]> {\r\n  return pool(false, 1, input, autoPad, countIncludePad, kernelShape, pads, strides);\r\n}\r\n\r\nasync function globalAveragePool(input: Tensor): Promise<Tensor[]> {\r\n  return pool(true, 1, input, 'NOTSET', false, [], [], []);\r\n}\r\n\r\nasync function maxPool(\r\n    input: Tensor, autoPad: string, kernelShape: number[], pads: number[], strides: number[]): Promise<Tensor[]> {\r\n  return pool(false, 2, input, autoPad, false, kernelShape, pads, strides);\r\n}\r\n\r\nasync function globalMaxPool(input: Tensor): Promise<Tensor[]> {\r\n  return pool(true, 2, input, 'NOTSET', false, [], [], []);\r\n}\r\n\r\n/**\r\n * Perform pooling operations based on input\r\n * @param isGlobalOperator If true, perform global pooling.\r\n * @param poolType 1 if averagepool, 2 for maxpool.\r\n * @param input The input tensor.\r\n * @param autoPad DEPRECATED attribute supported for legacy models. Specifies how to implicitly calculate pads in each\r\n *     dimension. Can take values NOTSET, SAME_UPPER, SAME_LOWER, or VALID\r\n * @param countIncludePad Whether include pad pixels when calculating values for the edges.\r\n * @param kernelShape The size of the kernel along each axis.\r\n * @param pads Padding for the beginning and ending along each axis. `pads` format should be as follow [x1_begin,\r\n *       x2_begin...x1_end, x2_end,...], where xi_begin the number of pixels added at the beginning of axis `i` and\r\n *       xi_end, the number of pixels added at the end of axis `i`.\r\n * @param strides Stride along each axis.\r\n */\r\nasync function pool(\r\n    isGlobalOperator: boolean, poolType: number, input: Tensor, autoPad: string, countIncludePad: boolean,\r\n    kernelShape: number[], pads: number[], strides: number[]): Promise<Tensor[]> {\r\n  // determine pool function name in wasm\r\n  let poolFunc = '';\r\n  switch (poolType) {\r\n    case 1:\r\n      poolFunc = '_average_pool_f32';\r\n      break;\r\n    case 2:\r\n      poolFunc = '_max_pool_f32';\r\n      break;\r\n    default:\r\n      throw new Error(`unknown pool type`);\r\n  }\r\n  // adjust the shapes of input attributes\r\n  PoolConvUtil.adjustPoolAttributes(isGlobalOperator, input.dims, kernelShape, strides, pads);\r\n\r\n  // calculate output shape based on input attributes\r\n  const outputDims =\r\n      PoolConvUtil.computePoolOutputShape(isGlobalOperator, input.dims, strides, kernelShape, pads, autoPad);\r\n\r\n  // create output\r\n  const y = new Tensor(outputDims, input.type);\r\n\r\n  // determine number of threads needed to process\r\n  const numThreads = determineNumThreads(input.dims[0], input.dims[1], WasmBinding.workerNumber);\r\n\r\n  // no multi-threading\r\n  if (numThreads === 1) {\r\n    WasmBinding.getInstance().ccall(\r\n        poolFunc, [kernelShape.length, 'int32'], [isGlobalOperator, 'bool'], [input.floatData, 'float32ptr'],\r\n        [input.dims, 'int32ptr'], [y.floatData, 'float32ptr', 'out'], [y.dims, 'int32ptr'], [kernelShape, 'int32ptr'],\r\n        [pads, 'int32ptr'], [strides, 'int32ptr'], [countIncludePad, 'bool']);\r\n  }\r\n\r\n  // multi-threaded using web-workers\r\n  else {\r\n    // data pre-processing\r\n    const xDimsSp = input.dims.slice(0);\r\n    xDimsSp[1] = Math.floor(input.dims[1] / numThreads);\r\n    const xSizeSp = ShapeUtil.size(xDimsSp);\r\n\r\n    const xDimsFinal = input.dims.slice(0);\r\n    xDimsFinal[1] = input.dims[1] - (numThreads - 1) * xDimsSp[1];\r\n\r\n    const yDimsSp = outputDims.slice(0);\r\n    yDimsSp[1] = xDimsSp[1];\r\n    const ySizeSp = ShapeUtil.size(yDimsSp);\r\n\r\n    const yDimsFinal = outputDims.slice(0);\r\n    yDimsFinal[1] = xDimsFinal[1];\r\n\r\n    const workerTasks = new Array<Promise<PerformanceData>>(numThreads - 1);\r\n\r\n    const X = input.floatData;\r\n    const Y = y.floatData;\r\n\r\n    // function calls\r\n    for (let i = 0; i < numThreads; ++i) {\r\n      if (i !== numThreads - 1) {\r\n        workerTasks[i] = WasmBinding.getInstance().ccallRemote(\r\n            i, poolFunc, [kernelShape.length, 'int32'], [isGlobalOperator, 'bool'],\r\n            [X.subarray(i * xSizeSp, (i + 1) * xSizeSp), 'float32ptr'], [xDimsSp, 'int32ptr'],\r\n            [Y.subarray(i * ySizeSp, (i + 1) * ySizeSp), 'float32ptr', 'out'], [yDimsSp, 'int32ptr'],\r\n            [kernelShape, 'int32ptr'], [pads, 'int32ptr'], [strides, 'int32ptr'], [countIncludePad, 'bool']);\r\n      } else {\r\n        WasmBinding.getInstance().ccall(\r\n            poolFunc, [kernelShape.length, 'int32'], [isGlobalOperator, 'bool'],\r\n            [X.subarray((numThreads - 1) * xSizeSp), 'float32ptr'], [xDimsFinal, 'int32ptr'],\r\n            [Y.subarray((numThreads - 1) * ySizeSp), 'float32ptr', 'out'], [yDimsFinal, 'int32ptr'],\r\n            [kernelShape, 'int32ptr'], [pads, 'int32ptr'], [strides, 'int32ptr'], [countIncludePad, 'bool']);\r\n      }\r\n    }\r\n\r\n    await Promise.all(workerTasks);\r\n  }\r\n\r\n  return [y];\r\n}\r\n\r\n// this function will determine the number of threads\r\n// the strategy to parallelize is to parallelize on number of data channels\r\nfunction determineNumThreads(batchSize: number, numChannels: number, numWebWorkers: number): number {\r\n  // single threaded if:\r\n  // 1) batch size is not 1 (data splitting logic across threads is specific to batch size being 1)\r\n  // 2) if number of channels is 1\r\n  // 3) number of web workers is 0\r\n  if (batchSize !== 1 || numChannels === 1 || numWebWorkers <= 0) {\r\n    return 1;\r\n  }\r\n\r\n  // multi-threaded:\r\n  // determine number of threads\r\n  return Math.min(numChannels, numWebWorkers + 1);\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Softmax} from '../../../ops/softmax';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {WasmBinding} from '../../../wasm-binding';\r\nimport {WasmInferenceHandler} from '../inference-handler';\r\n\r\nexport class WasmSoftmax extends Softmax {\r\n  run(inferenceHandler: WasmInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const x = inputs[0];\r\n    const axisCorrected = ShapeUtil.parseAxis(this.axis, x.dims.length);\r\n    const N = ShapeUtil.sizeToDimension(x.dims, axisCorrected);\r\n    const D = ShapeUtil.sizeFromDimension(x.dims, axisCorrected);\r\n    const y = new Tensor(x.dims, x.type);\r\n    WasmBinding.getInstance().ccall(\r\n        '_softmax_f32', [x.floatData, 'float32ptr'], [y.floatData, 'float32ptr', 'out'], [N, 'int32'], [D, 'int32']);\r\n\r\n    return [y];\r\n  }\r\n\r\n  // overriding the checkInputTypes() in the base class because Wasm backend has special type limitations\r\n  checkInputTypes(inputs: Tensor[]): boolean {\r\n    // currently Wasm backend only supports 'float32' input type\r\n    if (inputs[0].type !== 'float32') {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Sum} from '../../../ops/sum';\r\nimport {Tensor} from '../../../tensor';\r\nimport {WasmBinding, WasmCallArgument} from '../../../wasm-binding';\r\nimport {WasmInferenceHandler} from '../inference-handler';\r\n\r\nexport class WasmSum extends Sum {\r\n  run(inferenceHandler: WasmInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const y = new Tensor(inputs[0].dims, inputs[0].type);\r\n    const size = inputs[0].floatData.length;\r\n    const input = new Array<WasmCallArgument>(inputs.length);\r\n    for (let i = 0; i < inputs.length; i++) {\r\n      input[i] = [inputs[i].floatData, 'float32ptr'];\r\n    }\r\n    WasmBinding.getInstance().ccall(\r\n        '_sum_f32', [inputs.length, 'int32'], [size, 'int32'], [y.floatData, 'float32ptr', 'inout'], ...input);\r\n\r\n    return [y];\r\n  }\r\n\r\n  // overriding the checkInputTypes() in the base class because Wasm backend has special type limitations\r\n  checkInputTypes(inputs: Tensor[]): boolean {\r\n    // currently Wasm backend only supports 'float32' input type\r\n    if (inputs[0].type !== 'float32') {\r\n      return false;\r\n    }\r\n    for (let i = 1; i < inputs.length; i++) {\r\n      if (inputs[0].type !== inputs[i].type) {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Backend as BackendInterface} from '../api/onnx';\r\nimport {Backend, SessionHandler} from '../backend';\r\nimport {Logger} from '../instrument';\r\nimport {Session} from '../session';\r\n\r\nimport {WebGLSessionHandler} from './webgl/session-handler';\r\nimport {WebGLContext} from './webgl/webgl-context';\r\nimport {createWebGLContext} from './webgl/webgl-context-factory';\r\n\r\ntype WebGLOptions = BackendInterface.WebGLOptions;\r\n\r\n/**\r\n * WebGLBackend is the entry point for all WebGL opeartions\r\n * When it starts it created the WebGLRenderingContext\r\n * and other main framework components such as Program and Texture Managers\r\n */\r\nexport class WebGLBackend implements Backend, WebGLOptions {\r\n  disabled?: boolean;\r\n  glContext: WebGLContext;\r\n  contextId?: 'webgl'|'webgl2';\r\n  matmulMaxBatchSize?: number;\r\n  textureCacheMode?: 'initializerOnly'|'full';\r\n\r\n  initialize(): boolean {\r\n    try {\r\n      this.glContext = createWebGLContext(this.contextId);\r\n      if (typeof this.matmulMaxBatchSize !== 'number') {\r\n        this.matmulMaxBatchSize = 16;\r\n      }\r\n      if (typeof this.textureCacheMode !== 'string') {\r\n        this.textureCacheMode = 'full';\r\n      }\r\n      Logger.verbose('WebGLBackend', `Created WebGLContext: ${typeof this.glContext}`);\r\n      return true;\r\n    } catch (e) {\r\n      Logger.warning('WebGLBackend', `Unable to initialize WebGLBackend. ${e}`);\r\n      return false;\r\n    }\r\n  }\r\n  createSessionHandler(context: Session.Context): SessionHandler {\r\n    return new WebGLSessionHandler(this, context);\r\n  }\r\n  dispose(): void {\r\n    this.glContext.dispose();\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {SessionHandler} from '../../backend';\r\nimport {Graph} from '../../graph';\r\nimport {Logger} from '../../instrument';\r\nimport {Operator} from '../../operators';\r\nimport {OpSet, resolveOperator} from '../../opset';\r\nimport {Session} from '../../session';\r\nimport {Tensor} from '../../tensor';\r\nimport {WebGLBackend} from '../backend-webgl';\r\n\r\nimport {WebGLInferenceHandler} from './inference-handler';\r\nimport {WEBGL_OP_RESOLVE_RULES} from './op-resolve-rules';\r\nimport {ProgramManager} from './program-manager';\r\nimport {AlwaysKeepOriginalSizeStrategy, TextureLayoutStrategy} from './texture-layout-strategy';\r\nimport {TextureManager} from './texture-manager';\r\nimport {TextureData} from './types';\r\n\r\nexport class WebGLSessionHandler implements SessionHandler {\r\n  programManager: ProgramManager;\r\n  textureManager: TextureManager;\r\n  layoutStrategy: TextureLayoutStrategy;\r\n  textureDataCache: Map<Tensor.Id, TextureData>;\r\n  initializers: Set<Tensor.Id>;\r\n\r\n  constructor(public readonly backend: WebGLBackend, public readonly context: Session.Context) {\r\n    this.programManager = new ProgramManager(this.context.profiler, backend.glContext);\r\n    this.layoutStrategy = new AlwaysKeepOriginalSizeStrategy(backend.glContext.maxTextureSize);\r\n    this.textureManager = new TextureManager(\r\n        backend.glContext, this.layoutStrategy, this.context.profiler,\r\n        {reuseTextures: backend.textureCacheMode === 'full'});\r\n    this.textureDataCache = new Map();\r\n  }\r\n\r\n  createInferenceHandler() {\r\n    return new WebGLInferenceHandler(this);\r\n  }\r\n  onGraphInitialized(graph: Graph): void {\r\n    const initializers = graph.getValues().filter(v => v.from === -1 && v.tensor).map(v => v.tensor!.dataId);\r\n    this.initializers = new Set(initializers);\r\n  }\r\n  isInitializer(tensorId: Tensor.Id): boolean {\r\n    return this.initializers ? this.initializers.has(tensorId) : false;\r\n  }\r\n  getTextureData(tensorId: Tensor.Id): TextureData|undefined {\r\n    return this.textureDataCache.get(tensorId);\r\n  }\r\n  setTextureData(tensorId: Tensor.Id, textureData: TextureData): void {\r\n    Logger.verbose('WebGLSessionHandler', 'Storing Texture data in cache');\r\n    this.textureDataCache.set(tensorId, textureData);\r\n  }\r\n  dispose(): void {\r\n    this.programManager.dispose();\r\n    this.textureManager.clearActiveTextures();\r\n    this.textureDataCache.forEach(td => this.textureManager.releaseTexture(td, true));\r\n    this.textureDataCache = new Map();\r\n  }\r\n  resolve(node: Graph.Node, opsets: ReadonlyArray<OpSet>): Operator {\r\n    const op = resolveOperator(node, opsets, WEBGL_OP_RESOLVE_RULES);\r\n    op.initialize(node.attributes);\r\n    return op;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {InferenceHandler} from '../../backend';\r\nimport {Logger} from '../../instrument';\r\nimport {Tensor} from '../../tensor';\r\nimport {ShapeUtil} from '../../util';\r\n\r\nimport {WebGLUint8Encode} from './ops/uint8-encode';\r\nimport {WebGLSessionHandler} from './session-handler';\r\nimport {Encoder} from './texture-data-encoder';\r\nimport {WidthHeightPrefs} from './texture-layout-strategy';\r\nimport {TextureData, TextureLayout, WebGLOperator} from './types';\r\nimport {getPackedShape} from './utils';\r\n\r\nexport class WebGLInferenceHandler implements InferenceHandler {\r\n  private textureDataCache: Map<Tensor.Id, TextureData>;\r\n  constructor(public session: WebGLSessionHandler) {\r\n    this.textureDataCache = new Map();\r\n  }\r\n\r\n  run(op: WebGLOperator, inputs: Tensor[]): Tensor[] {\r\n    let artifact = this.session.programManager.getArtifact(op);\r\n    if (!artifact) {\r\n      const programInfo = op.createProgramInfo(this, inputs);\r\n      artifact = this.session.programManager.build(programInfo);\r\n      this.session.programManager.setArtifact(op, artifact);\r\n    }\r\n    const runData = op.createRunData(this, artifact.programInfo, inputs);\r\n    this.session.programManager.run(artifact, runData);\r\n    return [runData.outputTextureData.tensor];\r\n  }\r\n\r\n  /**\r\n   * Create a TextureData object from a tensor.\r\n   * Usage = Encoder.Usage.UploadOnly.\r\n   * If a related texture data is found in cache, returns it;\r\n   * Otherwise:\r\n   *   Creates a new texture layout if not provided;\r\n   *   Creates WebGLTexture with the layout;\r\n   *   Upload tensor data to the texture;\r\n   *   Creates a texture data object associated with the given tensor.\r\n   * @param tensor the tensor with data to upload\r\n   */\r\n  getOrCreateTextureData(tensor: Tensor, layout?: TextureLayout) {\r\n    let td = this.getTextureData(tensor.dataId);\r\n    if (!td) {\r\n      Logger.verbose('InferenceHandler', `Creating new TextureData for dims: [${tensor.dims}]`);\r\n      if (!layout) {\r\n        layout = this.createTextureLayoutFromShape(tensor.dims.slice());\r\n      }\r\n      // graph inputs or initializers\r\n      td = this.createTextureData(layout, tensor.type, tensor.numberData, tensor, Encoder.Usage.UploadOnly);\r\n    } else {\r\n      Logger.verbose('InferenceHandler', `Retrieving TextureData from cache: [${tensor.dims}]`);\r\n    }\r\n    return td;\r\n  }\r\n\r\n  /**\r\n   * Create a TextureData object from the given data type and texture layout.\r\n   * Usage = Encoder.Usage.Default.\r\n   * @param dataType the tensor data type\r\n   */\r\n  createTextureDataFromLayout(layout: TextureLayout, dataType: Tensor.DataType): TextureData {\r\n    return this.createTextureData(layout, dataType);\r\n  }\r\n\r\n  /**\r\n   * Create a TextureData object using the given data and bind to the given tensor.\r\n   * Usage = Encoder.Usage.UploadOnly.\r\n   * NOTE: this function is a hack for Conv implementation. should remove this function, after rewriting Conv\r\n   * implementation by Graph.Transformer\r\n   * @param dataType the tensor data type\r\n   * @param data the actual data to upload\r\n   * @param tensor the tensor to bind. tensor's data is ignored.\r\n   */\r\n  createTextureDataFromLayoutBindTensor(\r\n      layout: TextureLayout, dataType: Tensor.DataType, data: Tensor.NumberType, tensor: Tensor): TextureData {\r\n    return this.createTextureData(layout, dataType, data, tensor, Encoder.Usage.UploadOnly);\r\n  }\r\n\r\n  private createTextureData(\r\n      layout: TextureLayout, dataType: Tensor.DataType, data?: Tensor.NumberType, tensor?: Tensor,\r\n      usage?: Encoder.Usage): TextureData {\r\n    Logger.verbose('InferenceHandler', `Creating TextureData: layout:[${JSON.stringify(layout)}]`);\r\n    const texture = this.session.textureManager.createTextureFromLayout(dataType, layout, data, usage);\r\n    return this.createTextureDataFromTexture(layout, dataType, texture, tensor);\r\n  }\r\n\r\n  /**\r\n   * Create a TextureData object, using the given texture.\r\n   * This function does not create new texture. Usually used in scenarios using texture sharing. (eg. Reshape)\r\n   * @param dataType the tensor data type\r\n   * @param texture the WebGLTexture object to share\r\n   * @param tensorId the tensor ID of the shared tensor data\r\n   */\r\n  createSharedTextureData(layout: TextureLayout, dataType: Tensor.DataType, texture: WebGLTexture, tensorId: Tensor.Id):\r\n      TextureData {\r\n    return this.createTextureDataFromTexture(layout, dataType, texture, undefined, tensorId);\r\n  }\r\n\r\n  private createTextureDataFromTexture(\r\n      layout: TextureLayout, dataType: Tensor.DataType, texture: WebGLTexture, tensor?: Tensor, tensorId?: Tensor.Id) {\r\n    const textureData: TextureData = {\r\n      ...layout,\r\n      tensor: tensor ||\r\n          new Tensor(\r\n                  layout.unpackedShape, dataType,\r\n                  (id: Tensor.Id) => {\r\n                    return this.readTexture(textureData);\r\n                  },\r\n                  undefined, undefined, tensorId),\r\n      texture\r\n    };\r\n    this.setTextureData(textureData.tensor.dataId, textureData);\r\n    return textureData;\r\n  }\r\n\r\n  getTextureData(tensorId: Tensor.Id): TextureData|undefined {\r\n    return this.session.isInitializer(tensorId) ? this.session.getTextureData(tensorId) :\r\n                                                  this.textureDataCache.get(tensorId);\r\n  }\r\n  setTextureData(tensorId: Tensor.Id, td: TextureData): void {\r\n    if (this.session.isInitializer(tensorId)) {\r\n      this.session.setTextureData(tensorId, td);\r\n    } else {\r\n      this.textureDataCache.set(tensorId, td);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create a TextureLayout object from a tensor. If a related texture data is found, returns the cached texture layout.\r\n   */\r\n  getOrCreateTextureLayout(tensor: Tensor, channels: 1|2|3|4 = 1, unpackedShape?: ReadonlyArray<number>):\r\n      TextureLayout {\r\n    const td = this.getTextureData(tensor.dataId);\r\n    if (td) {\r\n      return td;\r\n    }\r\n    return this.createTextureLayoutFromShape(\r\n        channels === 1 ? tensor.dims.slice() : getPackedShape(tensor.dims.slice()), channels, unpackedShape);\r\n  }\r\n  /**\r\n   * Create a TextureLayout object from shape.\r\n   */\r\n  createTextureLayoutFromShape(\r\n      shape: ReadonlyArray<number>, channels: 1|2|3|4 = 1, unpackedShape?: ReadonlyArray<number>,\r\n      prefs?: WidthHeightPrefs): TextureLayout {\r\n    const [width, height] = this.session.layoutStrategy.computeTextureWH(shape, prefs);\r\n    let inferredDims = shape;\r\n    if (shape.length === 0) {\r\n      inferredDims = [1];\r\n    }\r\n    if (channels === 1) {\r\n      // unpackedShape will take `shape` and not `inferredDims` so as to create a scalar Tensor if need be\r\n      unpackedShape = shape;\r\n    } else if (!unpackedShape) {\r\n      throw new Error('Unpacked shape is needed when using channels > 1');\r\n    }\r\n    return {\r\n      width,\r\n      height,\r\n      channels: channels ? channels : 1,\r\n      shape: inferredDims,\r\n      strides: ShapeUtil.computeStrides(inferredDims),\r\n      unpackedShape\r\n    };\r\n  }\r\n\r\n  dispose(): void {\r\n    this.session.textureManager.clearActiveTextures();\r\n    this.textureDataCache.forEach(td => this.session.textureManager.releaseTexture(td));\r\n    this.textureDataCache = new Map();\r\n  }\r\n\r\n  readTexture(textureData: TextureData): Tensor.NumberType {\r\n    if (!this.session.backend.glContext.isFloat32DownloadSupported) {\r\n      const op = new WebGLUint8Encode();\r\n      const uint8TD = op.runInternal(this, textureData);\r\n      return this.session.textureManager.readUint8TextureAsFloat(uint8TD);\r\n    }\r\n    return this.session.textureManager.readTexture(textureData, textureData.tensor.type, textureData.channels);\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {ShapeUtil} from '../../../util';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {TextureData, TextureLayout} from '../types';\r\n\r\nexport class WebGLUint8Encode {\r\n  runInternal(inferenceHandler: WebGLInferenceHandler, input: TextureData): TextureData {\r\n    const outputShape = input.shape;\r\n    const [width, height] = inferenceHandler.session.layoutStrategy.computeTextureWH(input.shape);\r\n    const outputLayout: TextureLayout = {\r\n      width,\r\n      height,\r\n      channels: 4,\r\n      shape: outputShape,\r\n      strides: ShapeUtil.computeStrides(outputShape),\r\n      unpackedShape: outputShape\r\n    };\r\n    const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\r\n    // TODO: remove this special script. Use graph transformer instead.\r\n    /**\r\n     * https://github.com/tensorflow/tfjs-core/blob/master/src/kernels/webgl/encode_float_gpu.ts\r\n     */\r\n    const shaderSource = `\r\n      const float FLOAT_MAX = 1.70141184e38;\r\n      const float FLOAT_MIN = 1.17549435e-38;\r\n\r\n      bool isNaN(float val) {\r\n        return (val < 1.0 || 0.0 < val || val == 0.0) ? false : true;\r\n      }\r\n\r\n      highp vec4 encodeAsUint8(highp float v) {\r\n        if (isNaN(v)) {\r\n          return vec4(255, 255, 255, 255);\r\n        }\r\n\r\n        highp float av = abs(v);\r\n\r\n        if(av < FLOAT_MIN) {\r\n          return vec4(0.0, 0.0, 0.0, 0.0);\r\n        } else if(v > FLOAT_MAX) {\r\n          return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\r\n        } else if(v < -FLOAT_MAX) {\r\n          return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\r\n        }\r\n\r\n        highp vec4 c = vec4(0,0,0,0);\r\n\r\n        highp float e = floor(log2(av));\r\n        highp float m = exp2(fract(log2(av))) - 1.0;\r\n\r\n        c[2] = floor(128.0 * m);\r\n        m -= c[2] / 128.0;\r\n        c[1] = floor(32768.0 * m);\r\n        m -= c[1] / 32768.0;\r\n        c[0] = floor(8388608.0 * m);\r\n\r\n        highp float ebias = e + 127.0;\r\n        c[3] = floor(ebias / 2.0);\r\n        ebias -= c[3] * 2.0;\r\n        c[2] += floor(ebias) * 128.0;\r\n\r\n        c[3] += 128.0 * step(0.0, -v);\r\n\r\n        return c / 255.0;\r\n      }\r\n\r\n      void main() {\r\n        float value = ${glsl.texture2D}(X,TexCoords).r;\r\n        ${glsl.output} = encodeAsUint8(value);\r\n      }`;\r\n    const programInfo = {inputLayouts: [input], outputLayout, samplers: ['X'], shaderSource, hasMain: true};\r\n    const artifact = inferenceHandler.session.programManager.build(programInfo);\r\n\r\n    const encoder = inferenceHandler.session.backend.glContext.getEncoder('byte', 4);\r\n    const texture =\r\n        inferenceHandler.session.backend.glContext.allocateTexture(outputLayout.width, outputLayout.height, encoder);\r\n    const outputTextureData = inferenceHandler.createSharedTextureData(outputLayout, 'uint8', texture, {});\r\n    const runData = {inputTextureDatas: [input], outputTextureData, uniformData: {}};\r\n\r\n    inferenceHandler.session.programManager.run(artifact, runData);\r\n    return runData.outputTextureData;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {FLOAT_TYPES, NUMBER_TYPES} from '../../operators';\r\nimport {OpSet} from '../../opset';\r\n\r\nimport {WebGLBatchNormalization} from './ops/batch-normalization';\r\nimport * as binaryOps from './ops/binary-op';\r\nimport {WebGLClip} from './ops/clip';\r\nimport {WebGLConcat} from './ops/concat';\r\nimport {WebGLConv} from './ops/conv';\r\nimport {WebGLDropout} from './ops/dropout';\r\nimport {WebGLElu} from './ops/elu';\r\nimport {WebGLFlatten} from './ops/flatten';\r\nimport {WebGLGather} from './ops/gather';\r\nimport {WebGLGemm} from './ops/gemm';\r\nimport {WebGLImageScaler} from './ops/image-scaler';\r\nimport {WebGLLeakyRelu} from './ops/leaky-relu';\r\nimport {WebGLMatMul} from './ops/matmul';\r\nimport {WebGLPad} from './ops/pad';\r\nimport {WebGLAveragePool, WebGLGlobalAveragePool, WebGLGlobalMaxPool, WebGLMaxPool} from './ops/pool';\r\nimport * as reduceOps from './ops/reduce';\r\nimport {WebGLReshape} from './ops/reshape';\r\nimport {WebGLSlice, WebGLSliceV10} from './ops/slice';\r\nimport {WebGLSoftmax} from './ops/softmax';\r\nimport {WebGLSplit} from './ops/split';\r\nimport {WebGLSqueeze} from './ops/squeeze';\r\nimport {WebGLSum} from './ops/sum';\r\nimport {WebGLTile} from './ops/tile';\r\nimport {WebGLTranspose} from './ops/transpose';\r\nimport * as unaryOps from './ops/unary-op';\r\nimport {WebGLUnsqueeze} from './ops/unsqueeze';\r\n\r\nexport const WEBGL_OP_RESOLVE_RULES: ReadonlyArray<OpSet.ResolveRule> = [\r\n  ['Abs', '', '6+', () => new unaryOps.WebGLUnaryOp(NUMBER_TYPES, unaryOps.glslAbs())],\r\n  ['Acos', '', '7+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslAcos())],\r\n  ['Add', '', '7+', () => new binaryOps.WebGLBinaryOp(NUMBER_TYPES, binaryOps.glslAdd())],\r\n  ['And', '', '7+', () => new binaryOps.WebGLBinaryOp(['bool'], binaryOps.glslAnd())],\r\n  ['Asin', '', '7+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslAsin())],\r\n  ['Atan', '', '7+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslAtan())],\r\n  ['AveragePool', '', '7+', () => new WebGLAveragePool()],  // TODO: support new attributes for AveragePool-10\r\n  ['BatchNormalization', '', '7+', () => new WebGLBatchNormalization()],\r\n  ['Ceil', '', '6+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslCeil())],\r\n  ['Clip', '', '6+', () => new WebGLClip()],\r\n  ['Concat', '', '4+', () => new WebGLConcat()],\r\n  ['Conv', '', '1+', () => new WebGLConv()],\r\n  ['Cos', '', '7+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslCos())],\r\n  ['Div', '', '7+', () => new binaryOps.WebGLBinaryOp(NUMBER_TYPES, binaryOps.glslDiv())],\r\n  ['Dropout', '', '7+', () => new WebGLDropout()],\r\n  ['Equal', '', '7+', () => new binaryOps.WebGLBinaryOp(NUMBER_TYPES, binaryOps.glslEqual(), undefined, 'bool')],\r\n  ['Elu', '', '6+', () => new WebGLElu()],\r\n  ['Exp', '', '6+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslExp())],\r\n  ['Flatten', '', '1+', () => new WebGLFlatten()],\r\n  ['Floor', '', '6+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslFloor())],\r\n  ['Gather', '', '1+', () => new WebGLGather()],\r\n  ['Gemm', '', '7+', () => new WebGLGemm()],\r\n  ['GlobalAveragePool', '', '1+', () => new WebGLGlobalAveragePool()],\r\n  ['GlobalMaxPool', '', '1+', () => new WebGLGlobalMaxPool()],\r\n  ['Greater', '', '7+', () => new binaryOps.WebGLBinaryOp(NUMBER_TYPES, binaryOps.glslGreater(), undefined, 'bool')],\r\n  ['Identity', '', '1+', () => new unaryOps.WebGLUnaryOp(NUMBER_TYPES, unaryOps.glslIdentity())],\r\n  ['ImageScaler', '', '1+', () => new WebGLImageScaler()],\r\n  ['LeakyRelu', '', '6+', () => new WebGLLeakyRelu()],\r\n  ['Less', '', '7+', () => new binaryOps.WebGLBinaryOp(NUMBER_TYPES, binaryOps.glslLess(), undefined, 'bool')],\r\n  ['Log', '', '6+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslLog())],\r\n  ['MatMul', '', '1+', () => new WebGLMatMul()],\r\n  ['MaxPool', '', '1+', () => new WebGLMaxPool()],  // TODO: support new attributes for MaxPool-8 and MaxPool-10\r\n  ['Mul', '', '7+', () => new binaryOps.WebGLBinaryOp(NUMBER_TYPES, binaryOps.glslMul())],\r\n  ['Neg', '', '6+', () => new unaryOps.WebGLUnaryOp(NUMBER_TYPES, unaryOps.glslNeg())],\r\n  ['Not', '', '1+', () => new unaryOps.WebGLUnaryOp(['bool'], unaryOps.glslNot())],\r\n  ['Or', '', '7+', () => new binaryOps.WebGLBinaryOp(['bool'], binaryOps.glslOr())],\r\n  ['Pad', '', '2+', () => new WebGLPad()],\r\n  ['Pow', '', '7+', () => new binaryOps.WebGLBinaryOp(FLOAT_TYPES, binaryOps.glslPow())],\r\n  ['PRelu', '', '7+', () => new binaryOps.WebGLBinaryOp(FLOAT_TYPES, binaryOps.glslPRelu())],\r\n  ['ReduceLogSum', '', '1+', () => new reduceOps.WebGLReduceLogSum()],\r\n  ['ReduceMax', '', '1+', () => new reduceOps.WebGLReduceMax()],\r\n  ['ReduceMean', '', '1+', () => new reduceOps.WebGLReduceMean()],\r\n  ['ReduceMin', '', '1+', () => new reduceOps.WebGLReduceMin()],\r\n  ['ReduceProd', '', '1+', () => new reduceOps.WebGLReduceProd()],\r\n  ['ReduceSum', '', '1+', () => new reduceOps.WebGLReduceSum()],\r\n  ['ReduceSumSquare', '', '1+', () => new reduceOps.WebGLReduceSumSquare()],\r\n  ['Relu', '', '6+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslRelu())],\r\n  ['Reshape', '', '5+', () => new WebGLReshape()],\r\n  ['Sigmoid', '', '6+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslSigmoid())],\r\n  ['Sin', '', '7+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslSin())],\r\n  ['Slice', '', '10+', () => new WebGLSliceV10()],  // TODO: support 'steps' for Slice-10\r\n  ['Slice', '', '1-9', () => new WebGLSlice()],\r\n  ['Softmax', '', '1+', () => new WebGLSoftmax()],\r\n  // 'Split' operator has an optional attribute 'split'\r\n  // this attribute determines how the specified axis of input data\r\n  // is split. When the attribute is missing, we need the count of number of outputs\r\n  // so that we can determine the 'split' attribute from the runtime input to the Operator\r\n  ['Split', '', '2+', (node) => new WebGLSplit(node.outputs.length)],\r\n  ['Sqrt', '', '6+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslSqrt())],\r\n  ['Squeeze', '', '1+', () => new WebGLSqueeze()],\r\n  ['Sub', '', '7+', () => new binaryOps.WebGLBinaryOp(NUMBER_TYPES, binaryOps.glslSub())],\r\n  ['Sum', '', '6+', () => new WebGLSum()],  // TODO: support multidirectional broadcast for Sum-8\r\n  ['Tan', '', '7+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslTan())],\r\n  ['Tanh', '', '6+', () => new unaryOps.WebGLUnaryOp(FLOAT_TYPES, unaryOps.glslTanh())],\r\n  ['Tile', '', '6+', () => new WebGLTile()],\r\n  ['Transpose', '', '1+', () => new WebGLTranspose()],\r\n  ['Unsqueeze', '', '1+', () => new WebGLUnsqueeze()],\r\n  ['Xor', '', '7+', () => new binaryOps.WebGLBinaryOp(['bool'], binaryOps.glslXor())],\r\n];\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {BatchNormalization} from '../../../ops/batch-normalization';\r\nimport {Tensor} from '../../../tensor';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData} from '../types';\r\n\r\nexport class WebGLBatchNormalization extends BatchNormalization {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    const inputLayouts = inputs.map(t => handler.getOrCreateTextureLayout(t));\r\n    const outputShape = inputs[0].dims.slice();\r\n    const rank = outputShape.length;\r\n    const scale = inputLayouts[1];\r\n    const glsl = getGlsl(handler.session.backend.glContext.version);\r\n    const shaderSource = `\r\n      float process(int[${rank}] indices) {\r\n        vec2 position = offsetToCoords(indices[1], ${scale.width}, ${scale.height});\r\n        float scale = getColorAsFloat(${glsl.texture2D}(Scale, position));\r\n        float mean = getColorAsFloat(${glsl.texture2D}(Mean, position));\r\n        float variance = getColorAsFloat(${glsl.texture2D}(Variance, position));\r\n        float b = getColorAsFloat(${glsl.texture2D}(B, position));\r\n\r\n        return scale * ( (_A(indices) - mean) / sqrt(variance + float(${this.epsilon})) ) + b;\r\n      }`;\r\n    return {\r\n      inputLayouts,\r\n      outputLayout: handler.createTextureLayoutFromShape(outputShape),\r\n      samplers: ['A', 'Scale', 'B', 'Mean', 'Variance'],\r\n      shaderSource\r\n    };\r\n  }\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = [handler.getOrCreateTextureData(inputs[0], programInfo.inputLayouts[0])];\r\n    inputs.slice(1).forEach(t => inputTDs.push(handler.getOrCreateTextureData(t)));\r\n    const outputTD = handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type);\r\n    return {inputTextureDatas: inputTDs, outputTextureData: outputTD, uniformData: {}};\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {BinaryOp} from '../../../ops/binary-op';\r\nimport {Tensor} from '../../../tensor';\r\nimport {BroadcastUtil, ShapeUtil} from '../../../util';\r\nimport {FunctionType, GlslValueFunction} from '../glsl-definitions';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\r\n\r\nexport class WebGLBinaryOp extends BinaryOp implements WebGLOperator {\r\n  constructor(\r\n      typeConstraint: ReadonlyArray<Tensor.DataType>, protected glslFunc: GlslValueFunction, opType?: string,\r\n      resultType?: Tensor.DataType) {\r\n    super(typeConstraint, opType, resultType);\r\n  }\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    const inputLayouts = inputs.map(t => handler.getOrCreateTextureLayout(t));\r\n    const isBroadcast = !ShapeUtil.areEqual(inputs[0].dims, inputs[1].dims);\r\n    if (isBroadcast) {\r\n      const outputShape = BroadcastUtil.calcShape(inputs[0].dims, inputs[1].dims, false);\r\n      if (!outputShape) {\r\n        throw new Error(`Can't perform binary op on the given tensors`);\r\n      }\r\n      const outputRank = outputShape.length;\r\n      const aRank = inputs[0].dims.length !== 0 ? inputs[0].dims.length : 1;\r\n      const bRank = inputs[1].dims.length !== 0 ? inputs[1].dims.length : 1;\r\n      const aBcast = inputs[0].dims.length !== 0 ? `bcastIndices_A(indices, aindices);` : `aindices[0] = 0;`;\r\n      const bBcast = inputs[1].dims.length !== 0 ? `bcastIndices_B(indices, bindices);` : `bindices[0] = 0;`;\r\n      const shaderSource = `\r\n      ${this.glslFunc.body}\r\n      float process(int indices[${outputRank}]) {\r\n        int aindices[${aRank}];\r\n        int bindices[${bRank}];\r\n        ${aBcast}\r\n        ${bBcast}\r\n        return ${this.glslFunc.name}(_A(aindices), _B(bindices));\r\n    }`;\r\n      return {\r\n        inputLayouts,\r\n        outputLayout: handler.createTextureLayoutFromShape(outputShape),\r\n        samplers: ['A', 'B'],\r\n        shaderSource,\r\n      };\r\n    }\r\n    const glsl = getGlsl(handler.session.backend.glContext.version);\r\n    const shaderSource = `\r\n    ${this.glslFunc.body}\r\n    void main() {\r\n      vec4 v1 = ${glsl.texture2D}(A, TexCoords);\r\n      vec4 v2 = ${glsl.texture2D}(B, TexCoords);\r\n      vec4 result = ${this.glslFunc.name}(v1, v2);\r\n      ${glsl.output} = result;\r\n    }\r\n    `;\r\n    return {\r\n      hasMain: true,\r\n      inputLayouts,\r\n      outputLayout: handler.createTextureLayoutFromShape(inputs[0].dims),\r\n      samplers: ['A', 'B'],\r\n      shaderSource,\r\n    };\r\n  }\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = inputs.map((t, i) => handler.getOrCreateTextureData(t, programInfo.inputLayouts[i]));\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData: handler.createTextureDataFromLayout(\r\n          programInfo.outputLayout, this.resultType ? this.resultType : inputs[0].type),\r\n      uniformData: {}\r\n    };\r\n  }\r\n}\r\n\r\nexport function glslAdd(): GlslValueFunction {\r\n  const name = `add_`;\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return a + b;\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    return v1 + v2;\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslDiv(): GlslValueFunction {\r\n  const name = `div_`;\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return a / b;\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    return v1 / v2;\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslMul(): GlslValueFunction {\r\n  const name = `mul_`;\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return a * b;\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    return v1 * v2;\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslSub(): GlslValueFunction {\r\n  const name = `sub_`;\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return a - b;\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    return v1 - v2;\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslEqual(): GlslValueFunction {\r\n  const name = `equal_`;\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return float(a == b);\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    return vec4( v1 == v2 );\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslGreater(): GlslValueFunction {\r\n  const name = `greater_`;\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return float(a > b);\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    return vec4( v1.r > v2.r ,\r\n      v1.g > v2.g,\r\n      v1.b > v2.b,\r\n      v1.a > v2.a );\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslLess(): GlslValueFunction {\r\n  const name = `less_`;\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return float(a < b);\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    return vec4( v1.r < v2.r ,\r\n                v1.g < v2.g,\r\n                v1.b < v2.b,\r\n                v1.a < v2.a );\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslAnd(): GlslValueFunction {\r\n  const name = `and_`;\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return float( bool(a) && bool(b) );\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    bvec4 b1 = bvec4(v1);\r\n    bvec4 b2 = bvec4(v2);\r\n    return vec4( b1.r && b2.r ,\r\n                b1.g && b2.g,\r\n                b1.b && b2.b,\r\n                b1.a && b2.a );\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslOr(): GlslValueFunction {\r\n  const name = `or_`;\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return float( bool(a) || bool(b) );\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    bvec4 b1 = bvec4(v1);\r\n    bvec4 b2 = bvec4(v2);\r\n    return vec4( b1.r || b2.r ,\r\n                b1.g || b2.g,\r\n                b1.b || b2.b,\r\n                b1.a || b2.a );\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslXor(): GlslValueFunction {\r\n  const name = `xor_`;\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return float( bool(a) ^^ bool(b) );\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    bvec4 b1 = bvec4(v1);\r\n    bvec4 b2 = bvec4(v2);\r\n    return vec4( b1.r ^^ b2.r ,\r\n                b1.g ^^ b2.g,\r\n                b1.b ^^ b2.b,\r\n                b1.a ^^ b2.a );\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslPow(): GlslValueFunction {\r\n  return glslBuiltinBinary('pow');\r\n}\r\nexport function glslPRelu(): GlslValueFunction {\r\n  const name = `prelu_`;\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return a < 0.0 ? a * b: a;\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    return vec4(\r\n      v1.r < 0.0 ? v1.r * v2.r: v1.r,\r\n      v1.g < 0.0 ? v1.g * v2.g: v1.g,\r\n      v1.b < 0.0 ? v1.b * v2.b: v1.b,\r\n      v1.a < 0.0 ? v1.a * v2.a: v1.a\r\n      );\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\n\r\nfunction glslBuiltinBinary(fname: string): GlslValueFunction {\r\n  const name = `${fname}_`;\r\n  const body = `\r\n  float ${name}(float a, float b) {\r\n    return ${fname}(a, b);\r\n  }\r\n  vec4 ${name}(vec4 v1, vec4 v2) {\r\n    return ${fname}(v1, v2);\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Clip} from '../../../ops/clip';\r\nimport {Tensor} from '../../../tensor';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\r\n\r\nexport class WebGLClip extends Clip implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    const outputShape = inputs[0].dims.slice();\r\n    const glsl = getGlsl(handler.session.backend.glContext.version);\r\n    const shaderSource = `\r\n      const float min = float(${this.min});\r\n      const float max = float(${this.max});\r\n      void main() {\r\n        float v = ${glsl.texture2D}(A, TexCoords).r;\r\n        ${glsl.output} = vec4(clamp(v, min, max));\r\n      }\r\n      `;\r\n    return {\r\n      inputLayouts: [handler.getOrCreateTextureLayout(inputs[0])],\r\n      outputLayout: handler.createTextureLayoutFromShape(outputShape),\r\n      samplers: ['A'],\r\n      shaderSource,\r\n      hasMain: true,\r\n    };\r\n  }\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = [handler.getOrCreateTextureData(inputs[0], programInfo.inputLayouts[0])];\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {}\r\n    };\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Concat} from '../../../ops/concat';\r\nimport {Tensor} from '../../../tensor';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\r\n\r\nexport class WebGLConcat extends Concat implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    const inputShape = inputs[0].dims.slice();\r\n    if (this.axis >= inputShape.length || this.axis < (-1 * inputShape.length)) {\r\n      throw new Error(`axis specified for concat doesn't match input dimensionality`);\r\n    }\r\n    if (this.axis < 0) {\r\n      this.axis = inputShape.length + this.axis;\r\n    }\r\n    // ensure all of the non-concatenated axes match each other\r\n    // calculate the shape of the output tensor while we do that\r\n    const outputShape = inputShape.slice(0);\r\n    for (let i = 1; i < inputs.length; i++) {\r\n      const dataNShape = inputs[i].dims.slice();\r\n      for (let axisIndex = 0; axisIndex < inputShape.length; axisIndex++) {\r\n        // add to the placeholder for computing output shape\r\n        if (axisIndex === this.axis) {\r\n          outputShape[this.axis] += dataNShape[axisIndex];\r\n        }\r\n        // ensure all non-cancatenated axes match each other\r\n        else if (inputShape[axisIndex] !== dataNShape[axisIndex]) {\r\n          throw new Error(`non concat dimensions must match`);\r\n        }\r\n      }\r\n    }\r\n\r\n    const rank = outputShape.length;\r\n\r\n    let getTextureIndexWhereDataResidesMethod = ``;\r\n    // in most cases linear search is sufficient, as in most scenarios, only 2 tensors are concatenated\r\n    if (inputs.length < 5) {\r\n      getTextureIndexWhereDataResidesMethod = this.getTextureIndexWhereDataResidesLinearSearch(inputs.length);\r\n    } else {\r\n      getTextureIndexWhereDataResidesMethod = this.getTextureIndexWhereDataResidesBinarySearch(inputs.length);\r\n    }\r\n\r\n    const fetchDataFromCorrectTextureMethod = this.fetchDataFromCorrectTextureMethod(inputs.length, rank);\r\n    const getValueFromArrayIndexMethod = this.getValueFromArrayIndexMethod(inputs.length);\r\n    const samplers = inputs.map((v, i) => `X${i}`);\r\n    const shaderSource = `\r\n      ${fetchDataFromCorrectTextureMethod}\r\n      ${getValueFromArrayIndexMethod}\r\n      ${getTextureIndexWhereDataResidesMethod}\r\n      float process(int indices[${rank}]) {\r\n        int textureIndex = getTextureWhereDataResides (indices[${this.axis}]);\r\n\r\n        if(textureIndex != 0) {\r\n          indices[${this.axis}] = indices[${\r\n        this.axis}] - int(getValueFromArrayIndex(sizeInConcatAxis, textureIndex-int(1)));\r\n        }\r\n\r\n        return fetchDataFromCorrectTexture(textureIndex, indices);\r\n      }`;\r\n    return {\r\n      inputLayouts: inputs.map(t => handler.getOrCreateTextureLayout(t)),\r\n      outputLayout: handler.createTextureLayoutFromShape(outputShape),\r\n      samplers,\r\n      variables: [{name: 'sizeInConcatAxis', type: 'int', arrayLength: inputs.length}],\r\n      shaderSource,\r\n    };\r\n  }\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = inputs.map((t, i) => handler.getOrCreateTextureData(t, programInfo.inputLayouts[i]));\r\n    const sizeInConcatAxis = new Array<number>(programInfo.inputLayouts.length);\r\n    let previousSum = 0;\r\n    for (let i = 0; i < programInfo.inputLayouts.length; ++i) {\r\n      previousSum += programInfo.inputLayouts[i].shape[this.axis];\r\n      sizeInConcatAxis[i] = previousSum;\r\n    }\r\n    const uniformData = {'sizeInConcatAxis': sizeInConcatAxis};\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData\r\n    };\r\n  }\r\n  private getTextureIndexWhereDataResidesLinearSearch(numberOfTensors: number): string {\r\n    return `int getTextureWhereDataResides(int index) {\r\n      for(int i=0; i<${numberOfTensors}; i++) {\r\n          if(index < int(sizeInConcatAxis[i])){\r\n              return i;\r\n          }\r\n        }\r\n      }`;\r\n  }\r\n\r\n  // TODO: Implement BinarySearch in GLSL\r\n  private getTextureIndexWhereDataResidesBinarySearch(numberOfTensors: number): string {\r\n    return this.getTextureIndexWhereDataResidesLinearSearch(numberOfTensors);\r\n  }\r\n\r\n  private fetchDataFromCorrectTextureMethod(numberOfTensors: number, tensorRank: number) {\r\n    const codeLines: string[] = [`float fetchDataFromCorrectTexture(int textureIndex, int indices[${tensorRank}]) {`];\r\n    for (let i = 0; i < numberOfTensors; ++i) {\r\n      if (i === 0) {\r\n        codeLines.push(\r\n            `\\t` +\r\n            `if (textureIndex == ${i}) { return _X${i}(indices); }`);\r\n      } else if (i === numberOfTensors - 1) {\r\n        codeLines.push(\r\n            `\\t` +\r\n            `else { return _X${i}(indices); }`);\r\n      } else {\r\n        codeLines.push(\r\n            `\\t` +\r\n            `else if (textureIndex == ${i}) { return _X${i}(indices); }`);\r\n      }\r\n    }\r\n    codeLines.push(\r\n        `\\t` +\r\n        `}`);\r\n    return codeLines.join('\\n');\r\n  }\r\n\r\n  private getValueFromArrayIndexMethod(arrayRank: number): string {\r\n    const codeLines: string[] = [`int getValueFromArrayIndex(int arr[${arrayRank}], int index) {`];\r\n    for (let i = 0; i < arrayRank; ++i) {\r\n      if (i === 0) {\r\n        codeLines.push(\r\n            `\\t` +\r\n            `if (index == ${i}) { return arr[${i}]; }`);\r\n      } else if (i === arrayRank - 1) {\r\n        codeLines.push(\r\n            `\\t` +\r\n            `else { return arr[${i}]; }`);\r\n      } else {\r\n        codeLines.push(\r\n            `\\t` +\r\n            `else if (index == ${i}) { return arr[${i}]; }`);\r\n      }\r\n    }\r\n    codeLines.push(\r\n        `\\t` +\r\n        `}`);\r\n\r\n    return codeLines.join('\\n');\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Logger} from '../../../instrument';\r\nimport {Conv} from '../../../ops/conv';\r\nimport {Tensor} from '../../../tensor';\r\nimport {PoolConvUtil, ShapeUtil} from '../../../util';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {Artifact, ProgramInfo, RunData, TextureLayout} from '../types';\r\nimport {WebGLContext} from '../webgl-context';\r\n\r\nexport class WebGLConv extends Conv {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const programManager = inferenceHandler.session.programManager;\r\n    if (!this.artifacts) {\r\n      this.artifacts = [];\r\n      const programInfos = this.createProgramInfos(inferenceHandler, inputs);\r\n      for (let i = 0; i < programInfos.length; ++i) {\r\n        const artifact = inferenceHandler.session.programManager.build(programInfos[i]);\r\n        this.artifacts.push(artifact);\r\n      }\r\n    }\r\n    const runDatas = this.createRunDatas(inferenceHandler, this.artifacts.map(a => a.programInfo), inputs);\r\n    programManager.run(this.artifacts[0], runDatas[0]);\r\n    programManager.run(this.artifacts[1], runDatas[1]);\r\n    return [runDatas[1].outputTextureData.tensor];\r\n  }\r\n  createProgramInfos(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo[] {\r\n    const xshape = inputs[0].dims.slice();\r\n    const kshape = inputs[1].dims.slice();\r\n    // if kernelShape is not specified in the attributes of this op, infer it from the weight tensor dims\r\n    if (this.kernelShape.length === 0) {\r\n      const wDims = inputs[1].dims;\r\n      for (let i = 2; i < wDims.length; ++i) {\r\n        this.kernelShape.push(wDims[i]);\r\n      }\r\n    }\r\n    PoolConvUtil.adjustPadsBasedOnAutoPad(\r\n        inputs[0].dims, this.strides, this.dilations, this.kernelShape, this.pads, this.autoPad);\r\n    Logger.verbose(\r\n        'Conv',\r\n        `autpPad:${this.autoPad}, dilations:${this.dilations}, group:${this.group}, kernelShape:${\r\n            this.kernelShape}, pads:${this.pads}, strides:${this.strides}`);\r\n    const outputShape = WebGLConv.calcOutputShape(xshape, kshape, this.dilations, this.pads, this.strides);\r\n    const im2colProgramInfo = this.createIm2ColProgramInfo(inferenceHandler, inputs, outputShape);\r\n    const dotProductProgramInfo =\r\n        this.createDotProductProgramInfo(inferenceHandler, im2colProgramInfo.outputLayout, inputs, outputShape);\r\n    return [im2colProgramInfo, dotProductProgramInfo];\r\n  }\r\n  createRunDatas(inferenceHandler: WebGLInferenceHandler, programInfos: ProgramInfo[], inputs: Tensor[]): RunData[] {\r\n    const k = inputs[1];\r\n    const b = inputs.length >= 3 ? inputs[2] : undefined;\r\n    let kTD = inferenceHandler.getTextureData(k.dataId);\r\n    if (!kTD) {\r\n      Logger.verbose('Conv', 'Did not find the adjustedKernel texture in the cache. Creating rew.');\r\n      const newKernelData =\r\n          WebGLConv.prepKernelForDotProduct(k.dims.slice(), this.group, 4, k.floatData as Float32Array);\r\n      // hack: should use graph transformer to rewrite initializer K\r\n      kTD = inferenceHandler.createTextureDataFromLayoutBindTensor(\r\n          programInfos[1].inputLayouts[1], k.type, newKernelData, k);\r\n    }\r\n    const runtDataIm2Col = {\r\n      inputTextureDatas: [inferenceHandler.getOrCreateTextureData(inputs[0])],\r\n      outputTextureData: inferenceHandler.createTextureDataFromLayout(programInfos[0].outputLayout, inputs[0].type),\r\n      uniformData: {}\r\n    };\r\n    const inputTDs = [runtDataIm2Col.outputTextureData, kTD];\r\n    if (b) {\r\n      inputTDs.push(inferenceHandler.getOrCreateTextureData(b));\r\n    }\r\n    const outputTD = inferenceHandler.createTextureDataFromLayout(programInfos[1].outputLayout, inputs[0].type);\r\n    const runDataDotProduct = {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData: outputTD,\r\n      uniformData: {},\r\n      draw: (glContext: WebGLContext, artifact: Artifact) => {\r\n        const gl = glContext.gl;\r\n        const sharedDim = artifact.programInfo.params!.sharedDim as number;\r\n        const sharedDimReadSize = artifact.programInfo.params!.sharedDimReadSize as number;\r\n        const sharedDimOffsetLocation = artifact.uniformLocations.find(l => l.name === 'sharedDimOffset')!.location;\r\n        let blend = false;\r\n        for (let k = 0; k < sharedDim; k += sharedDimReadSize) {\r\n          Logger.verbose('MatMul2D', `k = ${k}, sharedDim: ${sharedDim}, readSize = ${sharedDimReadSize}`);\r\n\r\n          if (k === sharedDimReadSize) {\r\n            blend = true;\r\n            gl.enable(gl.BLEND);\r\n            glContext.checkError();\r\n            gl.blendEquation(gl.FUNC_ADD);\r\n            glContext.checkError();\r\n            gl.blendFunc(gl.ONE, gl.ONE);\r\n            glContext.checkError();\r\n          }\r\n\r\n          gl.uniform1i(sharedDimOffsetLocation, k);\r\n          glContext.checkError();\r\n          glContext.draw();\r\n        }\r\n\r\n        if (blend) {\r\n          gl.disable(gl.BLEND);\r\n          glContext.checkError();\r\n        }\r\n      }\r\n    };\r\n    return [runtDataIm2Col, runDataDotProduct];\r\n  }\r\n  createIm2ColProgramInfo(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], outputShape: number[]):\r\n      ProgramInfo {\r\n    const xshape = inputs[0].dims.slice();\r\n    const kshape = inputs[1].dims.slice();\r\n\r\n    const rank = outputShape.length;\r\n    const im2colDims = WebGLConv.calcIm2ColDims(xshape, kshape, outputShape, 4);\r\n    const outputLayout = inferenceHandler.createTextureLayoutFromShape(\r\n        im2colDims, 4, [im2colDims[0], im2colDims[1], im2colDims[2], im2colDims[3] * 4], {breakAxis: 3});\r\n    const shaderSource = `\r\n      const int XC = ${xshape[1]};\r\n      const int XH = ${xshape[2]};\r\n      const int XW = ${xshape[3]};\r\n      const int KH = ${this.kernelShape[0]};\r\n      const int KW = ${this.kernelShape[1]};\r\n      const int dilationH = ${this.dilations[0]};\r\n      const int dilationW = ${this.dilations[1]};\r\n      const int strideH = ${this.strides[0]};\r\n      const int strideW = ${this.strides[1]};\r\n      const int padH = ${this.pads[0]};\r\n      const int padW = ${this.pads[1]};\r\n      const int KHKW = KH*KW;\r\n      const int XCKHKW = XC * KHKW;\r\n      const int outputChannels = 4;\r\n\r\n      vec4 process(int indices[${rank}]) {\r\n        int b  = indices[0]; // batch size\r\n        int oh = indices[1] * strideH - padH; //output height\r\n        int ow = indices[2] * strideW - padW; //output width\r\n        int p = indices[3] * outputChannels; //patch\r\n        vec4 v = vec4(0.0);\r\n        for(int i=0; i < outputChannels; ++i) {\r\n          if(p < XCKHKW) {\r\n            int patchC = p / KHKW;\r\n            int patchH = (p - patchC*KHKW) / KW;\r\n            int patchW = (p - patchC*KHKW) - patchH * KW;\r\n            int xh2 = oh + patchH * dilationH;\r\n            int xw2 = ow + patchW * dilationW;\r\n            int x[${xshape.length}];\r\n            x[0] = b;\r\n            x[1] = patchC;\r\n            x[2] = xh2;\r\n            x[3] = xw2;\r\n            if(xh2 >= 0 &&\r\n                xh2 < XH &&\r\n                xw2 >= 0 &&\r\n                xw2 < XW) {\r\n              v[i] = _X(x);\r\n            }\r\n          }\r\n          ++p;\r\n        }\r\n        return v;\r\n      }\r\n      `;\r\n    return {\r\n      inputLayouts: [inferenceHandler.createTextureLayoutFromShape(xshape)],\r\n      outputLayout,\r\n      samplers: ['X'],\r\n      shaderSource,\r\n    };\r\n  }\r\n  createDotProductProgramInfo(\r\n      inferenceHandler: WebGLInferenceHandler, im2colLayout: TextureLayout, inputs: Tensor[],\r\n      outputShape: number[]): ProgramInfo {\r\n    const xshape = inputs[0].dims.slice();\r\n    const kshape = inputs[1].dims.slice();\r\n    const adjustedKernelShape = [kshape[0], Math.ceil((xshape[1] * kshape[2] * kshape[3]) / 4)];\r\n    const kLayout = inferenceHandler.createTextureLayoutFromShape(\r\n        adjustedKernelShape, 4, [adjustedKernelShape[0], adjustedKernelShape[1] * 4], {breakAxis: 1});\r\n\r\n    let bLayout: TextureLayout|undefined;\r\n    const rank = outputShape.length;\r\n\r\n    const inputLayouts = [im2colLayout, kLayout];\r\n    if (inputs.length === 3) {\r\n      bLayout = inferenceHandler.createTextureLayoutFromShape(inputs[2].dims.slice());\r\n      inputLayouts.push(bLayout);\r\n    }\r\n    const outputLayout = inferenceHandler.createTextureLayoutFromShape(outputShape);\r\n    const initValue = (inputs.length < 3) ? '0.0' : '_B(b)';\r\n    const sharedDim = im2colLayout.shape[3];\r\n    const blendEnabled = inferenceHandler.session.backend.glContext.isBlendSupported;\r\n    const sharedDimReadSize = blendEnabled && inferenceHandler.session.backend.matmulMaxBatchSize ?\r\n        this.calcSharedDimReadSize(inferenceHandler.session.backend.matmulMaxBatchSize, sharedDim) :\r\n        sharedDim;\r\n    const samplers = ['Im2Col', 'K'];\r\n    if (inputs.length === 3) {\r\n      samplers.push('B');\r\n    }\r\n    const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\r\n    const shaderSource = `\r\n    float process(int indices[${rank}]) {\r\n      int b[1];\r\n      b[0] = indices[1];\r\n      int im2col[${im2colLayout.shape.length}];\r\n      im2col[0] = indices[0];\r\n      im2col[1] = indices[2];\r\n      im2col[2] = indices[3];\r\n      int im2colOffset = im2col[0] * ${im2colLayout.strides[0]} + im2col[1] * ${\r\n        im2colLayout.strides[1]} + im2col[2] * ${im2colLayout.strides[2]} + sharedDimOffset;\r\n      int kernelOffset = indices[1] * ${kLayout.strides[0]} + sharedDimOffset;\r\n      float sum = sharedDimOffset == 0 ? ${initValue} : 0.0;\r\n      for (int i = 0; i < ${sharedDimReadSize}; ++i) {\r\n        vec2 im2colCoords = offsetToCoords(im2colOffset, ${im2colLayout.width}, ${im2colLayout.height});\r\n        vec2 kernelCoords = offsetToCoords(kernelOffset, ${kLayout.width}, ${kLayout.height});\r\n        sum += dot(${glsl.texture2D}(Im2Col, im2colCoords), ${glsl.texture2D}(K, kernelCoords));\r\n        ++im2colOffset;\r\n        ++kernelOffset;\r\n      }\r\n      return sum;\r\n    }`;\r\n    return {\r\n      inputLayouts: inputs.length === 3 ? [im2colLayout, kLayout, bLayout!] : [im2colLayout, kLayout],\r\n      outputLayout,\r\n      shaderSource,\r\n      samplers,\r\n      variables: [{name: 'sharedDimOffset', type: 'int'}],\r\n      params: {'sharedDim': sharedDim, 'sharedDimReadSize': sharedDimReadSize}\r\n    };\r\n  }\r\n  static prepKernelForDotProduct(shape: number[], group: number, channels: number, kernel: Float32Array): Float32Array {\r\n    if (group === 1 && (channels === 1 || (shape[2] * shape[3]) % channels === 0)) {\r\n      return kernel;\r\n    }\r\n    const strides = ShapeUtil.computeStrides(shape);\r\n    const oldRowSize = shape[1] * shape[2] * shape[3];\r\n    const newRowSize = Math.ceil(oldRowSize / channels) * channels;\r\n    const newSize = shape[0] * newRowSize;\r\n    const buffer = new Float32Array(newSize);\r\n\r\n    const rowbuf = new Float32Array(newRowSize);\r\n    for (let f = 0; f < shape[0]; ++f) {\r\n      const oldOffset = f * strides[0];\r\n      rowbuf.set(kernel.slice(oldOffset, oldOffset + oldRowSize), 0);\r\n      const newOffset = f * newRowSize;\r\n      buffer.set(rowbuf, newOffset);\r\n    }\r\n    return buffer;\r\n  }\r\n  static calcIm2ColDims(inputShape: number[], kernelShape: number[], outputShape: number[], channels = 1): number[] {\r\n    return [\r\n      outputShape[0], outputShape[2], outputShape[3],\r\n      Math.ceil(inputShape[1] * kernelShape[2] * kernelShape[3] / channels)\r\n    ];\r\n  }\r\n  static calcOutputShape(\r\n      inputShape: number[], kernelShape: number[], dilations: number[], adjustPads: number[],\r\n      strides: number[]): number[] {\r\n    const batchSize = inputShape[0];\r\n    const inputSpatialShape = inputShape.slice(2);\r\n    const spatialRank = inputSpatialShape.length;\r\n    const outChannels = kernelShape[0];\r\n    const kernelSpatialShape = kernelShape.slice(2);\r\n    const dilatedKernelShape = kernelSpatialShape.map((v, i) => v + (v - 1) * (dilations[i] - 1));\r\n    const inputSpatialShapeWithPad = inputSpatialShape.map((v, i) => v + adjustPads[i] + adjustPads[i + spatialRank]);\r\n    const outputSpatialShape =\r\n        inputSpatialShapeWithPad.map((v, i) => Math.floor((v - dilatedKernelShape[i] + strides[i]) / strides[i]));\r\n    const outputShape = [batchSize, outChannels].concat(...outputSpatialShape);\r\n    return outputShape;\r\n  }\r\n  protected calcSharedDimReadSize(preferredBatchSize: number, sharedDim: number): number {\r\n    if (preferredBatchSize <= 0 || sharedDim < preferredBatchSize || sharedDim % preferredBatchSize !== 0) {\r\n      return sharedDim;\r\n    }\r\n    return preferredBatchSize;\r\n  }\r\n  protected calcBlockSize(outputLayout: TextureLayout): [number, number]|undefined {\r\n    const preferredRowCount = 64;\r\n    const preferredColCount = 64;\r\n    if (outputLayout.height < preferredRowCount) {\r\n      return undefined;\r\n    }\r\n    return [preferredColCount, preferredRowCount];\r\n  }\r\n  protected artifacts: Artifact[];\r\n  protected readSize = 8;\r\n  protected blockSize = 64;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Dropout} from '../../../ops/dropout';\r\nimport {Tensor} from '../../../tensor';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\r\n\r\nexport class WebGLDropout extends Dropout implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    if (this.testMode) {\r\n      return [inputs[0]];\r\n    }\r\n    throw new Error(`Non test mode Dropout is not implemented yet`);\r\n  }\r\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    throw new Error(`Non test mode Dropout is not implemented yet`);\r\n  }\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    throw new Error(`Non test mode Dropout is not implemented yet`);\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Elu} from '../../../ops/elu';\r\nimport {Tensor} from '../../../tensor';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\r\n\r\nexport class WebGLElu extends Elu implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    const outputShape = inputs[0].dims.slice();\r\n    const glsl = getGlsl(handler.session.backend.glContext.version);\r\n    const shaderSource = `\r\n      void main() {\r\n        float v = ${glsl.texture2D}(A, TexCoords).r;\r\n        ${glsl.output} = vec4(v >= 0.0 ? v: (exp(v) - 1.0) * ${this.alpha.toExponential()}); /* float number format */\r\n      }\r\n      `;\r\n    return {\r\n      inputLayouts: [handler.getOrCreateTextureLayout(inputs[0])],\r\n      outputLayout: handler.createTextureLayoutFromShape(outputShape),\r\n      samplers: ['A'],\r\n      shaderSource,\r\n      hasMain: true,\r\n    };\r\n  }\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = [handler.getOrCreateTextureData(inputs[0], programInfo.inputLayouts[0])];\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {}\r\n    };\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class Elu implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.alpha = attributes.getFloat('alpha', 1.0);\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 1) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  protected alpha: number;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Flatten} from '../../../ops/flatten';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\n\r\nimport {reshape} from './reshape';\r\n\r\nexport class WebGLFlatten extends Flatten {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const outputDims = ShapeUtil.flattenShape(inputs[0].dims, this.axis);\r\n\r\n    return [reshape(inferenceHandler, inputs[0], outputDims)];\r\n  }\r\n}\r\n","// Licensed under the MIT license.\r\n\r\nimport {Gather} from '../../../ops/gather';\r\nimport {Tensor} from '../../../tensor';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\r\n\r\nexport class WebGLGather extends Gather implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n\r\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    const inputShape = inputs[0].dims.slice();\r\n    const indexDataShape = inputs[1].dims.slice();\r\n    const outputShape = new Array(inputShape.length + indexDataShape.length - 1);\r\n\r\n    if (outputShape.length === 0) {\r\n      throw Error('A scalar tensor output has not been supported');\r\n    }\r\n\r\n    const indexCopyOps: string[] = [];\r\n    for (let i = 0; i < outputShape.length; i++) {\r\n      // outputShape is divided into three parts: A, B, C\r\n      // |0         this.axis|           this.axis + indexDataShape.length|          end|\r\n      // |     A             |                     B                      |      C      |\r\n      //\r\n      // inputIdx: [A, inputs[1][B], C]\r\n      if (i < this.axis) {  // A\r\n        outputShape[i] = inputShape[i];\r\n        indexCopyOps.push(`inputIdx[${i}] = outputIdx[${i}];`);\r\n      } else {\r\n        if (i < this.axis + indexDataShape.length) {  // B\r\n          outputShape[i] = indexDataShape[i - this.axis];\r\n          indexCopyOps.push(`indexDataIdx[${i - this.axis}] = outputIdx[${i}];`);\r\n        } else {                                                       // C\r\n          outputShape[i] = inputShape[i - indexDataShape.length + 1];  // skip 1 for this.axis\r\n          indexCopyOps.push(`inputIdx[${i - indexDataShape.length + 1}] = outputIdx[${i}];`);\r\n        }\r\n      }\r\n    }\r\n\r\n    const orank = outputShape.length;\r\n    const irank = inputShape.length;\r\n    const iDrank = indexDataShape.length;\r\n    const shaderSource = `\r\n      float process(int outputIdx[${orank}]) {\r\n        int inputIdx[${irank}];\r\n        int indexDataIdx[${iDrank}];\r\n        ${indexCopyOps.join('\\n        ')}\r\n        inputIdx[${this.axis}] = int(_B(indexDataIdx));\r\n        return _A(inputIdx);\r\n      }`;\r\n    return {\r\n      inputLayouts: inputs.map(t => handler.getOrCreateTextureLayout(t)),\r\n      outputLayout: handler.createTextureLayoutFromShape(outputShape),\r\n      samplers: ['A', 'B'],\r\n      shaderSource,\r\n    };\r\n  }\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = inputs.map((t, i) => handler.getOrCreateTextureData(t, programInfo.inputLayouts[i]));\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {}\r\n    };\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Gemm} from '../../../ops/gemm';\r\nimport {Tensor} from '../../../tensor';\r\nimport {GemmUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\r\n\r\nexport class WebGLGemm extends Gemm implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  createProgramInfo(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    const aShape = inputs[0].dims.slice();\r\n    const bShape = inputs[1].dims.slice();\r\n    const cShape = inputs[2].dims.slice();\r\n    const [M, N] = GemmUtil.getShapeOfGemmResult(aShape, this.transA, bShape, this.transB, cShape);\r\n    const oShape = [M, N];\r\n    if (!oShape) {\r\n      throw new Error('Can\\'t use gemm on the given tensors');\r\n    }\r\n    let sharedDim = aShape[aShape.length - 1];\r\n    let line = '';\r\n    if (this.transA) {\r\n      sharedDim = aShape[0];\r\n    }\r\n    if (this.transA && this.transB) {\r\n      line = `value += _A_T(a) * _B_T(b);`;\r\n    } else if (this.transA && !this.transB) {\r\n      line = `value += _A_T(a) * _B(b);`;\r\n    } else if (!this.transA && this.transB) {\r\n      line = `value += _A(a) * _B_T(b);`;\r\n    } else if (!this.transA && !this.transB) {\r\n      line = `value += _A(a) * _B(b);`;\r\n    }\r\n    const rank = oShape.length;\r\n    const cRank = cShape.length;\r\n    const shaderSource = `\r\n      float process(int indices[${rank}]) {\r\n          int a[${rank}];\r\n          int b[${rank}];\r\n          int c[${cRank}];\r\n\r\n          copyVec(indices, a);\r\n          copyVec(indices, b);\r\n          bcastIndices_C(indices, c);\r\n\r\n          float value = 0.0;\r\n          for (int k=0; k<${sharedDim}; ++k) {\r\n              a[${rank - 1}] = k;\r\n              b[${rank - 2}] = k;\r\n              ${line}\r\n          }\r\n\r\n          value = value * alpha;\r\n          value += beta * _C(c);\r\n          return value;\r\n      }`;\r\n    const inputLayouts = inputs.map(t => inferenceHandler.getOrCreateTextureLayout(t));\r\n    return {\r\n      inputLayouts,\r\n      outputLayout: inferenceHandler.createTextureLayoutFromShape(oShape),\r\n      samplers: ['A', 'B', 'C'],\r\n      variables: [{name: 'alpha', type: 'float'}, {name: 'beta', type: 'float'}],\r\n      shaderSource,\r\n    };\r\n  }\r\n  createRunData(inferenceHandler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = inputs.map((t, i) => inferenceHandler.getOrCreateTextureData(t, programInfo.inputLayouts[i]));\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData:\r\n          inferenceHandler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {'alpha': this.alpha, 'beta': this.beta}\r\n    };\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {ImageScaler} from '../../../ops/image-scaler';\r\nimport {Tensor} from '../../../tensor';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\r\n\r\nexport class WebGLImageScaler extends ImageScaler implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    const outputShape = inputs[0].dims.slice();\r\n    const rank = outputShape.length;\r\n    const getBiasMethod = this.createGetBiasMethod(this.bias.length);\r\n    const shaderSource = `\r\n      ${getBiasMethod}\r\n      float process(int indices[${rank}]) {\r\n        return _X(indices) * scale + getBias(bias, indices[1]);\r\n      }`;\r\n    return {\r\n      inputLayouts: [handler.getOrCreateTextureLayout(inputs[0])],\r\n      outputLayout: handler.createTextureLayoutFromShape(outputShape),\r\n      samplers: ['X'],\r\n      variables: [{name: 'bias', type: 'float', arrayLength: this.bias.length}, {name: 'scale', type: 'float'}],\r\n      shaderSource,\r\n    };\r\n  }\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = [handler.getOrCreateTextureData(inputs[0], programInfo.inputLayouts[0])];\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {'bias': this.bias, 'scale': this.scale}\r\n    };\r\n  }\r\n  private createGetBiasMethod(numChannels: number): string {\r\n    const codeLines: string[] = [`float getBias(float bias[${numChannels}], int channel) {`];\r\n    for (let i = 0; i < numChannels; ++i) {\r\n      if (i === 0) {\r\n        codeLines.push(\r\n            `\\t` +\r\n            `if (channel == ${i}) { return bias[${i}]; }`);\r\n      } else if (i === numChannels - 1) {\r\n        codeLines.push(\r\n            `\\t` +\r\n            `else { return bias[${i}]; }`);\r\n      } else {\r\n        codeLines.push(\r\n            `\\t` +\r\n            `else if (channel == ${i}) { return bias[${i}]; }`);\r\n      }\r\n    }\r\n    codeLines.push(\r\n        `\\t` +\r\n        `}`);\r\n    return codeLines.join('\\n');\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {LeakyRelu} from '../../../ops/leaky-relu';\r\nimport {Tensor} from '../../../tensor';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\r\n\r\nexport class WebGLLeakyRelu extends LeakyRelu implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    const outputShape = inputs[0].dims.slice();\r\n    const glsl = getGlsl(handler.session.backend.glContext.version);\r\n    const shaderSource = `\r\n      void main() {\r\n        float v = ${glsl.texture2D}(A, TexCoords).r;\r\n        ${glsl.output} = vec4(v < 0.0 ? v * float(${this.alpha}) : v);\r\n      }\r\n      `;\r\n    return {\r\n      hasMain: true,\r\n      inputLayouts: [handler.getOrCreateTextureLayout(inputs[0])],\r\n      outputLayout: handler.createTextureLayoutFromShape(outputShape),\r\n      samplers: ['A'],\r\n      shaderSource,\r\n    };\r\n  }\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = [handler.getOrCreateTextureData(inputs[0], programInfo.inputLayouts[0])];\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {}\r\n    };\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class LeakyRelu implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.alpha = attributes.getFloat('alpha', 0.01);\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 1) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  protected alpha: number;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {MatMul} from '../../../ops/matmul';\r\nimport {Tensor} from '../../../tensor';\r\nimport {BroadcastUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\r\n\r\nexport class WebGLMatMul extends MatMul implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    const aShape = inputs[0].dims;\r\n    const bShape = inputs[1].dims;\r\n    const outputShape = BroadcastUtil.calcShape(aShape, bShape, true);\r\n    if (!outputShape) {\r\n      throw new Error('Can\\'t use matmul on the given tensors');\r\n    }\r\n    const rank = outputShape.length;\r\n    const arank = aShape.length;\r\n    const brank = bShape.length;\r\n    const sharedDim = aShape[aShape.length - 1];\r\n    const shaderSource = `\r\n      float process(int indices[${rank}]) {\r\n          int a[${arank}];\r\n          int b[${brank}];\r\n          bcastMatmulIndices_A(indices, a);\r\n          bcastMatmulIndices_B(indices, b);\r\n\r\n          float value;\r\n          for (int k=0; k<${sharedDim}; ++k) {\r\n              a[${arank - 1}] = k;\r\n              b[${brank - 2}] = k;\r\n              value += _A(a) * _B(b);\r\n          }\r\n          return value;\r\n      }`;\r\n    return {\r\n      inputLayouts: inputs.map(t => handler.getOrCreateTextureLayout(t)),\r\n      outputLayout: handler.createTextureLayoutFromShape(outputShape),\r\n      samplers: ['A', 'B'],\r\n      shaderSource,\r\n    };\r\n  }\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = inputs.map((t, i) => handler.getOrCreateTextureData(t, programInfo.inputLayouts[i]));\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {}\r\n    };\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Pad} from '../../../ops/pad';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {getGlsl, Glsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, TextureLayout, WebGLOperator} from '../types';\r\n\r\nexport class WebGLPad extends Pad implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  createProgramInfo(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    const outputShape = ShapeUtil.padShape(inputs[0].dims.slice(), this.pads);\r\n    const rank = outputShape.length;\r\n    const alayout = inferenceHandler.getOrCreateTextureLayout(inputs[0]);\r\n    const padFunction = getPadFunction(\r\n        getGlsl(inferenceHandler.session.backend.glContext.version), 'A', alayout, this.mode, this.pads, this.value);\r\n    const shaderSource = `\r\n      ${padFunction}\r\n      float process(int[${rank}] indices) {\r\n          return padA(indices);\r\n      }`;\r\n    return {\r\n      inputLayouts: [alayout],\r\n      outputLayout: inferenceHandler.createTextureLayoutFromShape(outputShape),\r\n      samplers: ['A'],\r\n      shaderSource,\r\n    };\r\n  }\r\n  createRunData(inferenceHandler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = [inferenceHandler.getOrCreateTextureData(inputs[0], programInfo.inputLayouts[0])];\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData:\r\n          inferenceHandler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {}\r\n    };\r\n  }\r\n}\r\nexport function getPadFunction(\r\n    glsl: Glsl, name: string, inputLayout: TextureLayout, mode: string, pads: number[], value: number): string {\r\n  switch (mode) {\r\n    case 'constant':\r\n      return getPadConstant(\r\n          glsl, name, inputLayout.shape, inputLayout.strides, inputLayout.width, inputLayout.height, pads, value);\r\n    case 'reflect':\r\n      return getPadReflect(\r\n          glsl, name, inputLayout.shape, inputLayout.strides, inputLayout.width, inputLayout.height, pads);\r\n    case 'edge':\r\n      return getPadEdge(\r\n          glsl, name, inputLayout.shape, inputLayout.strides, inputLayout.width, inputLayout.height, pads);\r\n    default:\r\n      throw new Error('Invalid mode');\r\n  }\r\n}\r\nfunction getPadConstant(\r\n    glsl: Glsl, name: string, shape: ReadonlyArray<number>, strides: ReadonlyArray<number>, width: number,\r\n    height: number, pads: number[], value: number) {\r\n  const rank = shape.length;\r\n  let block = '';\r\n  for (let i = rank - 1; i >= 0; --i) {\r\n    block += `\r\n          k = m[${i}] - ${pads[i]};\r\n          if (k < 0)  return constant;\r\n          if (k >= ${shape[i]}) return constant;\r\n          offset += k * ${strides[i]};\r\n          `;\r\n  }\r\n  return `\r\n        float pad${name}(int m[${rank}]) {\r\n          const float constant = float(${value});\r\n          int offset = 0;\r\n          int k = 0;\r\n          ${block}\r\n          vec2 coords = offsetToCoords(offset, ${width}, ${height});\r\n          float value = getColorAsFloat(${glsl.texture2D}(${name}, coords));\r\n          return value;\r\n        }\r\n        `;\r\n}\r\nfunction getPadReflect(\r\n    glsl: Glsl, name: string, shape: ReadonlyArray<number>, strides: ReadonlyArray<number>, width: number,\r\n    height: number, pads: number[]) {\r\n  const rank = shape.length;\r\n\r\n  let block = '';\r\n  for (let i = rank - 1; i >= 0; --i) {\r\n    block += `\r\n        k = m[${i}] - ${pads[i]};\r\n        if (k < 0) { k = -k; }\r\n        {\r\n          const int _2n_1 = ${2 * (shape[i] - 1)};\r\n          k = int( mod( float(k), float(_2n_1) ) ) ;\r\n          if(k >= ${shape[i]}) { k = _2n_1 - k; }\r\n        }\r\n        offset += k * ${strides[i]};\r\n        `;\r\n  }\r\n  return `\r\n      float pad${name}(int m[${rank}]) {\r\n        int offset = 0;\r\n        int k = 0;\r\n        ${block}\r\n        vec2 coords = offsetToCoords(offset, ${width}, ${height});\r\n        float value = getColorAsFloat(${glsl.texture2D}(${name}, coords));\r\n        return value;\r\n      }\r\n      `;\r\n}\r\nfunction getPadEdge(\r\n    glsl: Glsl, name: string, shape: ReadonlyArray<number>, strides: ReadonlyArray<number>, width: number,\r\n    height: number, pads: number[]) {\r\n  const rank = shape.length;\r\n\r\n  let block = '';\r\n  for (let i = rank - 1; i >= 0; --i) {\r\n    block += `\r\n      k = m[${i}] - ${pads[i]};\r\n      if (k < 0)  k = 0;\r\n      if (k >= ${shape[i]}) k = ${shape[i] - 1};\r\n      offset += k * ${strides[i]};\r\n      `;\r\n  }\r\n  return `\r\n    float pad${name}(int m[${rank}]) {\r\n      int offset = 0;\r\n      int k = 0;\r\n      ${block}\r\n      vec2 coords = offsetToCoords(offset, ${width}, ${height});\r\n      float value = getColorAsFloat(${glsl.texture2D}(${name}, coords));\r\n      return value;\r\n    }\r\n    `;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class Pad implements Operator {\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.mode = attributes.getString('mode', 'constant');\r\n    this.value = attributes.getFloat('value', 0.0);\r\n    this.pads = attributes.getInts('pads');\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 1) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (inputs[0].type !== 'float32' && inputs[0].type !== 'float64') {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  protected mode: string;\r\n  protected pads: number[];\r\n  protected value: number;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {AveragePool, GlobalAveragePool, GlobalMaxPool, MaxPool} from '../../../ops/pool';\r\nimport {Tensor} from '../../../tensor';\r\nimport {PoolConvUtil, ShapeUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, TextureLayout, WebGLOperator} from '../types';\r\n\r\nexport class WebGLGlobalAveragePool extends GlobalAveragePool implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  createProgramInfo(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    return createAveragePoolProgramInfo(\r\n        inferenceHandler, inputs, true, this.kernelShape, this.autoPad, this.strides, this.pads, this.countIncludePad);\r\n  }\r\n  createRunData(inferenceHandler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = [inferenceHandler.getOrCreateTextureData(inputs[0], programInfo.inputLayouts[0])];\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData:\r\n          inferenceHandler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {}\r\n    };\r\n  }\r\n}\r\n\r\nexport class WebGLAveragePool extends AveragePool implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  createProgramInfo(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    return createAveragePoolProgramInfo(\r\n        inferenceHandler, inputs, false, this.kernelShape, this.autoPad, this.strides, this.pads, this.countIncludePad);\r\n  }\r\n  createRunData(inferenceHandler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = [inferenceHandler.getOrCreateTextureData(inputs[0], programInfo.inputLayouts[0])];\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData:\r\n          inferenceHandler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {}\r\n    };\r\n  }\r\n}\r\nfunction createAveragePoolProgramInfo(\r\n    inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], isGlobalOperator: boolean, kernelShape: number[] = [],\r\n    autoPad = '', strides: number[] = [], pads: number[] = [], countIncludePad: boolean): ProgramInfo {\r\n  const inputShape = inputs[0].dims.slice();\r\n  PoolConvUtil.adjustPoolAttributes(isGlobalOperator, inputShape, kernelShape, strides, pads);\r\n  const outputShape =\r\n      PoolConvUtil.computePoolOutputShape(isGlobalOperator, inputShape, strides, kernelShape, pads, autoPad);\r\n  const kernelSize = ShapeUtil.size(kernelShape);\r\n  const op1 = `value += _X(x);`;\r\n  let op2 = ``;\r\n  if (countIncludePad) {\r\n    op2 += `value /= float(${kernelSize});`;\r\n  } else {\r\n    op2 += `value /= float(${kernelSize} - pad);`;\r\n  }\r\n  const inputLayout = inferenceHandler.getOrCreateTextureLayout(inputs[0]);\r\n  const poolingCode = GeneratePoolingCode(inputLayout, kernelShape, pads, strides, op1, op2, '0.0');\r\n  const shaderSource = `\r\n      ${poolingCode}\r\n    `;\r\n  return {\r\n    inputLayouts: [inputLayout],\r\n    outputLayout: inferenceHandler.createTextureLayoutFromShape(outputShape),\r\n    samplers: ['X'],\r\n    shaderSource,\r\n  };\r\n}\r\n\r\nexport class WebGLGlobalMaxPool extends GlobalMaxPool implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  createProgramInfo(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    return createMaxPoolProgramInfo(\r\n        inferenceHandler, inputs, true, this.kernelShape, this.autoPad, this.strides, this.pads);\r\n  }\r\n  createRunData(inferenceHandler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = [inferenceHandler.getOrCreateTextureData(inputs[0])];\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData:\r\n          inferenceHandler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {}\r\n    };\r\n  }\r\n}\r\n\r\nexport class WebGLMaxPool extends MaxPool implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  createProgramInfo(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    return createMaxPoolProgramInfo(\r\n        inferenceHandler, inputs, false, this.kernelShape, this.autoPad, this.strides, this.pads);\r\n  }\r\n  createRunData(inferenceHandler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = [inferenceHandler.getOrCreateTextureData(inputs[0])];\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData:\r\n          inferenceHandler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {}\r\n    };\r\n  }\r\n}\r\nfunction createMaxPoolProgramInfo(\r\n    inferenceHandler: WebGLInferenceHandler, inputs: Tensor[], isGlobalOperator: boolean, kernelShape: number[] = [],\r\n    autoPad = '', strides: number[] = [], pads: number[] = []): ProgramInfo {\r\n  const inputShape = inputs[0].dims.slice();\r\n  PoolConvUtil.adjustPoolAttributes(isGlobalOperator, inputShape, kernelShape, strides, pads);\r\n  const outputShape =\r\n      PoolConvUtil.computePoolOutputShape(isGlobalOperator, inputShape, strides, kernelShape, pads, autoPad);\r\n  const op1 = `\r\n              value = max(_X(x), value);\r\n      `;\r\n  const op2 = ``;\r\n  const inputLayout = inferenceHandler.createTextureLayoutFromShape(inputShape);\r\n  const poolingCode = GeneratePoolingCode(inputLayout, kernelShape, pads, strides, op1, op2, '-1e5');\r\n  const shaderSource = `\r\n    ${poolingCode}\r\n  `;\r\n  return {\r\n    inputLayouts: [inputLayout],\r\n    outputLayout: inferenceHandler.createTextureLayoutFromShape(outputShape),\r\n    samplers: ['X'],\r\n    shaderSource,\r\n  };\r\n}\r\n\r\nexport function GeneratePoolingCode(\r\n    x: TextureLayout, kernelShape: number[], pads: number[], strides: number[], op1: string, op2: string,\r\n    startVal: string): string {\r\n  const inputDims = x.shape;\r\n  const rank = x.shape.length;\r\n  if (kernelShape.length <= 2) {\r\n    const kw = kernelShape[kernelShape.length - 1];\r\n    const sw = strides[strides.length - 1];\r\n    const pwStart = pads[pads.length / 2 - 1];\r\n    const pwEnd = pads[pads.length - 1];\r\n    const dimW = inputDims[rank - 1];\r\n    let codeW = ``;\r\n    let codeH = ``;\r\n    let codeHEnd = ``;\r\n    if (pwStart + pwEnd !== 0) {\r\n      codeW = `\r\n                for (int i = 0; i < ${kw}; i++) {\r\n                  x[${rank} - 1] = indices[${rank} - 1] * ${sw} - ${pwStart} + i;\r\n                  if (x[${rank} - 1] < 0 || x[${rank} - 1] >= ${dimW}) {\r\n                    pad++;\r\n                    continue;\r\n                  }\r\n                  ${op1}\r\n                }`;\r\n    } else {\r\n      codeW = `\r\n                for (int i = 0; i < ${kw}; i++) {\r\n                  x[${rank} - 1] = indices[${rank} - 1] * ${sw} - ${pwStart} + i;\r\n                  ${op1}\r\n                }`;\r\n    }\r\n\r\n    if (kernelShape.length === 2) {\r\n      const kh = kernelShape[kernelShape.length - 2];\r\n      const sh = strides[strides.length - 2];\r\n      const phStart = pads[pads.length / 2 - 2];\r\n      const phEnd = pads[pads.length - 2];\r\n      const dimH = inputDims[rank - 2];\r\n      if (phStart + phEnd !== 0) {\r\n        codeH = `\r\n              for (int j = 0; j < ${kh}; j++) {\r\n                x[${rank} - 2] = indices[${rank} - 2] * ${sh} - ${phStart} + j;\r\n                if (x[${rank} - 2] < 0 || x[${rank} - 2] >= ${dimH}) {\r\n                  pad+= ${kw};\r\n                  continue;\r\n                }\r\n            `;\r\n      } else {\r\n        codeH = `\r\n                for (int j = 0; j < ${kh}; j++) {\r\n                  x[${rank} - 2] = indices[${rank} - 2] * ${sh} - ${phStart} + j;\r\n                `;\r\n      }\r\n      codeHEnd = `\r\n              }\r\n            `;\r\n    }\r\n\r\n    const poolingCode = `\r\n            float process(int indices[${rank}]) {\r\n              int x[${rank}];\r\n              copyVec(indices, x);\r\n\r\n              float value = ${startVal};\r\n              int pad = 0;\r\n              ${codeH}\r\n              ${codeW}\r\n              ${codeHEnd}\r\n              ${op2}\r\n              return value;\r\n            }\r\n          `;\r\n    return poolingCode;\r\n  } else {\r\n    const kernelSize = ShapeUtil.size(kernelShape);\r\n    const kernelStrides = ShapeUtil.computeStrides(kernelShape);\r\n    const stridesRank = kernelStrides.length;\r\n    const padsRank = pads.length;\r\n    const offsetToIndicesFunction = offsetToIndices(stridesRank);\r\n    const copyInputDims = copyArray(inputDims, 'inputDims');\r\n    const copyPads = copyArray(pads, 'pads');\r\n    const copyKernelStrides = copyArray(kernelStrides, 'kernelStrides');\r\n    const copyStrides = copyArray(strides, 'strides');\r\n    const hasPads = pads.reduce((sum, cur) => sum + cur);\r\n    let padCode = ``;\r\n    if (hasPads) {\r\n      padCode = `\r\n                if (x[j] >= inputDims[j] || x[j] < 0) {\r\n                  pad++;\r\n                  isPad = true;\r\n                  break;\r\n                }\r\n              }\r\n              if (!isPad) {\r\n                ${op1}\r\n              }`;\r\n    } else {\r\n      padCode = `\r\n                  }\r\n                  ${op1}`;\r\n    }\r\n    const poolingCode = `\r\n            ${offsetToIndicesFunction}\r\n            float process(int indices[${rank}]) {\r\n                int x[${rank}];\r\n                copyVec(indices, x);\r\n                int offset[${stridesRank}];\r\n                int pads[${padsRank}];\r\n                int inputDims[${rank}];\r\n                int kernelStrides[${stridesRank}];\r\n                int strides[${stridesRank}];\r\n                ${copyPads}\r\n                ${copyInputDims}\r\n                ${copyStrides}\r\n                ${copyKernelStrides}\r\n\r\n                float value = ${startVal};\r\n                int pad = 0;\r\n                bool isPad = false;\r\n                for (int i = 0; i < ${kernelSize}; i++) {\r\n                    offsetToIndices(i, kernelStrides, offset);\r\n                    isPad = false;\r\n                    for (int j = ${rank} - ${stridesRank}; j < ${rank}; j++) {\r\n                      x[j] = indices[j] * strides[j - ${rank} + ${stridesRank}]\r\n                        + offset[j - ${rank} + ${stridesRank}] - pads[j - 2];\r\n                      ${padCode}\r\n                }\r\n                ${op2}\r\n\r\n                return value;\r\n            }`;\r\n    return poolingCode;\r\n  }\r\n}\r\n\r\nexport function copyArray(array: ReadonlyArray<number>, arrayName: string): string {\r\n  let block = ``;\r\n  for (let i = 0; i < array.length; i++) {\r\n    block += `\r\n      ${arrayName}[${i}] = ${array[i]};\r\n    `;\r\n  }\r\n  return block;\r\n}\r\n\r\nexport function offsetToIndices(rank: number): string {\r\n  return `\r\n    void offsetToIndices(int offset, int[${rank}] strides, out int[${rank}] indices) {\r\n      if (${rank} == 0) {\r\n        return;\r\n      }\r\n      for (int i = 0; i < ${rank} - 1; ++i) {\r\n        indices[i] = offset / strides[i];\r\n        offset -= indices[i] * strides[i];\r\n      }\r\n      indices[${rank} - 1] = offset;\r\n    }`;\r\n}\r\n","// Licensed under the MIT license.\r\n\r\nimport {ReduceBase} from '../../../ops/reduce-op';\r\nimport {Tensor} from '../../../tensor';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\r\n\r\nabstract class WebGLGenericReduce extends ReduceBase implements WebGLOperator {\r\n  abstract getOps(inputs: Tensor[]): string[];\r\n\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    const outputShape: number[] = [];\r\n    const iRank = inputs[0].dims.length || 1;\r\n\r\n    const idxCopy = [];  // copy output indexes to input indexes\r\n\r\n    const ops = this.getOps(inputs);  // [init ops, reduce ops, final ops]\r\n    let reduceOps = ops[1];\r\n\r\n    for (let k = 0; k < inputs[0].dims.length; k++) {\r\n      // if this axis is reduced\r\n      if (this.axes.indexOf(k) >= 0 || this.axes.length === 0) {\r\n        if (this.keepDims) {\r\n          outputShape.push(1);\r\n        }  // else { remove the axis from outputShape; }\r\n\r\n        // loop over the d-th axis\r\n        reduceOps = `\r\n        for(int j${k} = 0; j${k} < ${inputs[0].dims[k]}; j${k}++) {\r\n          inputIdx[${k}] = j${k};\r\n          ${reduceOps}\r\n        }\r\n        `;\r\n      } else {\r\n        idxCopy.push(`inputIdx[${k}] = outputIdx[${outputShape.length}];`);\r\n\r\n        outputShape.push(inputs[0].dims[k]);\r\n      }\r\n    }\r\n\r\n    const oRank = outputShape.length || 1;\r\n\r\n    const shaderSource = `\r\n      float process(int outputIdx[${oRank}]) {\r\n        float value;                 // final result\r\n        int inputIdx[${iRank}];      // addressing input data\r\n        ${idxCopy.join('\\n')}\r\n        ${ops[0]}       // init ops for reduce max/min\r\n        ${reduceOps}\r\n        ${ops[2]}       // final computation for reduce mean\r\n        return value;\r\n      }`;\r\n\r\n    return {\r\n      inputLayouts: inputs.map(t => handler.getOrCreateTextureLayout(t)),\r\n      outputLayout: handler.createTextureLayoutFromShape(outputShape),\r\n      samplers: ['A'],\r\n      shaderSource,\r\n    };\r\n  }\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = inputs.map((t, i) => handler.getOrCreateTextureData(t, programInfo.inputLayouts[i]));\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {}\r\n    };\r\n  }\r\n}\r\n\r\nexport class WebGLReduceSum extends WebGLGenericReduce {\r\n  getOps(inputs: Tensor[]): string[] {\r\n    return ['value = 0.0;', 'value += _A(inputIdx);', ''];\r\n  }\r\n}\r\n\r\nexport class WebGLReduceMean extends WebGLGenericReduce {\r\n  getOps(inputs: Tensor[]): string[] {\r\n    let size = 1.0;\r\n    for (let k = 0; k < inputs[0].dims.length; k++) {\r\n      if (this.axes.indexOf(k) >= 0 || this.axes.length === 0) {\r\n        size *= inputs[0].dims[k];\r\n      }\r\n    }\r\n\r\n    return ['value = 0.0;', 'value += _A(inputIdx);', `value /= ${size}.;`];  // ensure real number with `.`\r\n  }\r\n}\r\n\r\nexport class WebGLReduceMax extends WebGLGenericReduce {\r\n  getOps(inputs: Tensor[]): string[] {\r\n    const idxZero = [];\r\n    for (let k = 0; k < inputs[0].dims.length; k++) {\r\n      if (this.axes.indexOf(k) >= 0 || this.axes.length === 0) {\r\n        idxZero.push(`inputIdx[${k}] = 0;`);  // first element\r\n      }\r\n    }\r\n\r\n    return [`${idxZero.join('\\n')}\\nvalue = _A(inputIdx);`, 'value = max(value, _A(inputIdx));', ''];\r\n  }\r\n}\r\n\r\nexport class WebGLReduceMin extends WebGLGenericReduce {\r\n  getOps(inputs: Tensor[]): string[] {\r\n    const idxZero = [];\r\n    for (let k = 0; k < inputs[0].dims.length; k++) {\r\n      if (this.axes.indexOf(k) >= 0 || this.axes.length === 0) {\r\n        idxZero.push(`inputIdx[${k}] = 0;`);  // first element\r\n      }\r\n    }\r\n\r\n    return [`${idxZero.join('\\n')}\\nvalue = _A(inputIdx);`, 'value = min(value, _A(inputIdx));', ''];\r\n  }\r\n}\r\n\r\nexport class WebGLReduceProd extends WebGLGenericReduce {\r\n  getOps(inputs: Tensor[]): string[] {\r\n    return ['value = 1.0;', 'value *= _A(inputIdx);', ''];\r\n  }\r\n}\r\n\r\nexport class WebGLReduceLogSum extends WebGLGenericReduce {\r\n  getOps(inputs: Tensor[]): string[] {\r\n    return ['value = 0.0;', 'value += _A(inputIdx);', 'value = log(value);'];\r\n  }\r\n}\r\n\r\nexport class WebGLReduceSumSquare extends WebGLGenericReduce {\r\n  getOps(inputs: Tensor[]): string[] {\r\n    return ['float t; value = 0.0;', 't = _A(inputIdx); value += t * t;', ''];\r\n  }\r\n}\r\n","// Licensed under the MIT license.\r\n\r\nimport {Slice, SliceV10} from '../../../ops/slice';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\r\n\r\nexport class WebGLSlice extends Slice implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n\r\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    return createProgramInfo(handler, inputs[0], this.starts, this.ends, this.axes);\r\n  }\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    return createRunData(handler, programInfo, inputs);\r\n  }\r\n}\r\n\r\nexport class WebGLSliceV10 extends SliceV10 implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n\r\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    if (!handler.session.isInitializer(inputs[1].dataId) || !handler.session.isInitializer(inputs[2].dataId) ||\r\n        (inputs.length >= 4 && !handler.session.isInitializer(inputs[3].dataId)) ||\r\n        (inputs.length >= 5 && !handler.session.isInitializer(inputs[4].dataId))) {\r\n      throw new Error(`dynamic slice attributes are not allowed`);\r\n    }\r\n    if (inputs.length >= 5 && inputs[4].integerData.some((i: number) => i !== 1)) {\r\n      throw new Error(`currently non-1 steps is not supported for Slice`);\r\n    }\r\n    const starts = Array.from(inputs[1].integerData);\r\n    const ends = Array.from(inputs[2].integerData);\r\n    const axes = inputs.length >= 4 ? Array.from(inputs[3].integerData) : [];\r\n\r\n    return createProgramInfo(handler, inputs[0], starts, ends, axes);\r\n  }\r\n\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    return createRunData(handler, programInfo, inputs);\r\n  }\r\n}\r\n\r\nfunction createProgramInfo(\r\n    handler: WebGLInferenceHandler, x: Tensor, starts: ReadonlyArray<number>, ends: ReadonlyArray<number>,\r\n    axes: ReadonlyArray<number>): ProgramInfo {\r\n  if (axes.length === 0) {\r\n    axes = x.dims.slice(0).map((val, ind) => ind);\r\n  }\r\n  axes = axes.map(axis => ShapeUtil.parseAxis(axis, x.dims.length));\r\n  starts = starts.map((start, ind) => {\r\n    if (start > x.dims[axes[ind]] - 1) {\r\n      return x.dims[axes[ind]];\r\n    }\r\n    return ShapeUtil.parseAxis(start, x.dims[axes[ind]]);\r\n  });\r\n  ends = ends.map((end, ind) => {\r\n    if (end > x.dims[axes[ind]] - 1) {\r\n      return x.dims[axes[ind]];\r\n    }\r\n    return ShapeUtil.parseAxis(end, x.dims[axes[ind]]);\r\n  });\r\n\r\n  const outputShape = x.dims.slice();\r\n\r\n  const sliceOps: string[] = [];\r\n  for (let i = 0; i < axes.length; i++) {\r\n    outputShape[axes[i]] = ends[i] - starts[i];\r\n    if (starts[i] > 0) {\r\n      sliceOps.push(`outputIdx[${axes[i]}] += ${starts[i]};`);\r\n    }  // else { sliceOps.push(`outputIdx[${axes[i]}] += 0;`); }\r\n  }\r\n\r\n  const rank = outputShape.length;\r\n  const shaderSource = `\r\n      float process(int outputIdx[${rank}]) {\r\n        ${sliceOps.join('\\n      ')}\r\n        return _A(outputIdx);\r\n      }`;\r\n  return {\r\n    inputLayouts: [handler.getOrCreateTextureLayout(x)],\r\n    outputLayout: handler.createTextureLayoutFromShape(outputShape),\r\n    samplers: ['A'],\r\n    shaderSource,\r\n  };\r\n}\r\n\r\nfunction createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n  const inputTDs = [handler.getOrCreateTextureData(inputs[0], programInfo.inputLayouts[0])];\r\n  return {\r\n    inputTextureDatas: inputTDs,\r\n    outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n    uniformData: {}\r\n  };\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Softmax} from '../../../ops/softmax';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {Artifact, ProgramInfo, RunData, TextureLayout} from '../types';\r\n\r\nexport class WebGLSoftmax extends Softmax {\r\n  constructor() {\r\n    super();\r\n  }\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    if (!this.artifacts) {\r\n      this.artifacts = [];\r\n      const programInfos = this.createProgramInfos(inferenceHandler, inputs);\r\n      programInfos.forEach((pi, i) => {\r\n        const artifact = inferenceHandler.session.programManager.build(pi);\r\n        this.artifacts.push(artifact);\r\n      });\r\n    }\r\n\r\n    const runDatas = this.createRunDatas(inferenceHandler, this.artifacts.map(a => a.programInfo), inputs);\r\n    runDatas.forEach((v, i) => inferenceHandler.session.programManager.run(this.artifacts[i], v));\r\n    // return only the last output\r\n    return [runDatas[runDatas.length - 1].outputTextureData.tensor];\r\n  }\r\n  createSoftMaxProgramInfo(\r\n      inferenceHandler: WebGLInferenceHandler, input: Tensor, N: number, D: number,\r\n      maxElementPerLogicalRow: TextureLayout, normalizationPerLogicalRow: TextureLayout): ProgramInfo {\r\n    const inputShape = input.dims.slice();\r\n    const inputLayout = inferenceHandler.createTextureLayoutFromShape(inputShape);\r\n    const outputShape = inputShape;\r\n    const rank = outputShape.length;\r\n    const textureWidth = inputLayout.width;\r\n    const textureHeight = inputLayout.height;\r\n\r\n    if (N < 1 || D < 1) {\r\n      throw new Error(`Logical row count N and feature count D must be greater than or equal to 1`);\r\n    }\r\n\r\n    if (maxElementPerLogicalRow.shape.length !== 1 || normalizationPerLogicalRow.shape.length !== 1) {\r\n      throw new Error(`Dimensionality of the intermediate results should be 1`);\r\n    }\r\n\r\n    if (maxElementPerLogicalRow.shape[0] !== N || normalizationPerLogicalRow.shape[0] !== N) {\r\n      throw new Error(`Shape of the intermediate results should be equal to logical row count`);\r\n    }\r\n\r\n    const shaderSource = `\r\n    float process(int[${rank}] indices) {\r\n\r\n      // get offset of current logical tensor index from the 2-D texture coordinates (TexCoords)\r\n      int offset = coordsToOffset(TexCoords, ${textureWidth}, ${textureHeight});\r\n\r\n      //determine the logical row for this index\r\n      int logical_row_index[1];\r\n      logical_row_index[0] = offset / ${D};\r\n\r\n      float norm_factor = _Norm(logical_row_index);\r\n\r\n      // avoid possible division by 0\r\n      // if norm_facor is 0, all elements are zero\r\n      // if so, return 0\r\n      if(norm_factor == 0.0)\r\n        return 0.0;\r\n\r\n      return exp(_A(indices) - _Max(logical_row_index)) / norm_factor;\r\n    }`;\r\n    return {\r\n      inputLayouts: [inputLayout, maxElementPerLogicalRow, normalizationPerLogicalRow],\r\n      outputLayout: inferenceHandler.createTextureLayoutFromShape(outputShape),\r\n      samplers: ['A', 'Max', 'Norm'],\r\n      shaderSource,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Create a texture that contains the normalization factor for each of the 'N' rows\r\n   */\r\n  createComputScaleProgramInfo(\r\n      inferenceHandler: WebGLInferenceHandler, x: Tensor, N: number, D: number, maxElementPerLogicalRow: TextureLayout,\r\n      outputShape: number[]): ProgramInfo {\r\n    const xlayout = inferenceHandler.createTextureLayoutFromShape(x.dims.slice());\r\n    const rank = outputShape.length;\r\n    const textureWidth = xlayout.width;\r\n    const textureHeight = xlayout.height;\r\n\r\n    if (N < 1 || D < 1) {\r\n      throw new Error(`Logical row count N and feature count D must be greater than or equal to 1`);\r\n    }\r\n\r\n    if (outputShape.length !== 1) {\r\n      throw new Error(`Dimensionality of the output should be 1`);\r\n    }\r\n\r\n    if (outputShape[0] !== N) {\r\n      throw new Error(`Shape of the output should be equal to logical row count`);\r\n    }\r\n\r\n    if (maxElementPerLogicalRow.shape.length !== 1) {\r\n      throw new Error(`Dimensionality of the intermediate results should be 1`);\r\n    }\r\n\r\n    if (maxElementPerLogicalRow.shape[0] !== N) {\r\n      throw new Error(`Shape of the intermediate results should be equal to logical row count`);\r\n    }\r\n\r\n    const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\r\n    const shaderSource = `\r\n    float process(int[${rank}] indices) {\r\n\r\n      int logical_row_start_offset = indices[0] * ${D};\r\n\r\n      float norm_factor = 0.0;\r\n      float max = _Max(indices);\r\n      for(int i=0; i<${D}; ++i)\r\n      {\r\n        norm_factor += exp(getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset + i, ${\r\n        textureWidth}, ${textureHeight}))) - max);\r\n      }\r\n\r\n      return norm_factor;\r\n    }`;\r\n    return {\r\n      inputLayouts: [xlayout, maxElementPerLogicalRow],\r\n      outputLayout: inferenceHandler.createTextureLayoutFromShape(outputShape),\r\n      samplers: ['A', 'Max'],\r\n      shaderSource,\r\n    };\r\n  }\r\n  /**\r\n   * Create a texture that contains the maximum value of each of the 'N' rows\r\n   */\r\n  createComputeMaxProgramInfo(\r\n      inferenceHandler: WebGLInferenceHandler, x: Tensor, N: number, D: number, outputShape: number[]): ProgramInfo {\r\n    const xlayout = inferenceHandler.createTextureLayoutFromShape(x.dims.slice());\r\n    const rank = outputShape.length;\r\n    const textureWidth = xlayout.width;\r\n    const textureHeight = xlayout.height;\r\n\r\n    if (N < 1 || D < 1) {\r\n      throw new Error(`Logical row count N and feature count D must be greater than or equal to 1`);\r\n    }\r\n\r\n    if (outputShape.length !== 1) {\r\n      throw new Error(`Dimensionality of the output should be 1`);\r\n    }\r\n\r\n    if (outputShape[0] !== N) {\r\n      throw new Error(`Shape of the output should be equal to logical row count`);\r\n    }\r\n\r\n    const glsl = getGlsl(inferenceHandler.session.backend.glContext.version);\r\n    const shaderSource = `\r\n        float process(int[${rank}] indices) {\r\n\r\n          int logical_row_start_offset = indices[0] * ${D};\r\n\r\n          float max = getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset, ${textureWidth}, ${\r\n        textureHeight} )));\r\n          for(int i=1; i<${D}; ++i)\r\n          {\r\n            float current = getColorAsFloat(${glsl.texture2D}(A, offsetToCoords(logical_row_start_offset + i, ${\r\n        textureWidth}, ${textureHeight})));\r\n            if(current > max)\r\n              max = current;\r\n          }\r\n\r\n          return max;\r\n        }`;\r\n    return {\r\n      inputLayouts: [xlayout],\r\n      outputLayout: inferenceHandler.createTextureLayoutFromShape(outputShape),\r\n      samplers: ['A'],\r\n      shaderSource,\r\n    };\r\n  }\r\n  createProgramInfos(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo[] {\r\n    const inputShape = inputs[0].dims.slice();\r\n    const axisCorrected = ShapeUtil.parseAxis(this.axis, inputShape.length);\r\n    const N = ShapeUtil.sizeToDimension(inputShape, axisCorrected);\r\n    const D = ShapeUtil.sizeFromDimension(inputShape, axisCorrected);\r\n    const computeMaxProgramInfo = this.createComputeMaxProgramInfo(inferenceHandler, inputs[0], N, D, [N]);\r\n    const computeScaleProgramInfo =\r\n        this.createComputScaleProgramInfo(inferenceHandler, inputs[0], N, D, computeMaxProgramInfo.outputLayout, [N]);\r\n    const softMaxProgramInfo = this.createSoftMaxProgramInfo(\r\n        inferenceHandler, inputs[0], N, D, computeMaxProgramInfo.outputLayout, computeScaleProgramInfo.outputLayout);\r\n\r\n    const programInfos: ProgramInfo[] = [computeMaxProgramInfo, computeScaleProgramInfo, softMaxProgramInfo];\r\n    return programInfos;\r\n  }\r\n  createRunDatas(inferenceHandler: WebGLInferenceHandler, programInfos: ProgramInfo[], inputs: Tensor[]): RunData[] {\r\n    const dataType = inputs[0].type;\r\n    const inputTD = inferenceHandler.getOrCreateTextureData(inputs[0], programInfos[0].inputLayouts[0]);\r\n    const runDatas: RunData[] = [];\r\n    runDatas.push({\r\n      inputTextureDatas: [inputTD],\r\n      outputTextureData: inferenceHandler.createTextureDataFromLayout(programInfos[0].outputLayout, dataType),\r\n      uniformData: {}\r\n    });\r\n    for (let i = 1; i < programInfos.length; ++i) {\r\n      runDatas.push({\r\n        inputTextureDatas: [...runDatas[i - 1].inputTextureDatas, runDatas[i - 1].outputTextureData],\r\n        outputTextureData: inferenceHandler.createTextureDataFromLayout(programInfos[i].outputLayout, dataType),\r\n        uniformData: {}\r\n      });\r\n    }\r\n    return runDatas;\r\n  }\r\n  protected artifacts: Artifact[];\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Split} from '../../../ops/split';\r\nimport {Tensor} from '../../../tensor';\r\nimport {SplitUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {Artifact, ProgramInfo, RunData} from '../types';\r\n\r\nexport class WebGLSplit extends Split {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const count = this.getProgramCount(inferenceHandler, inputs);\r\n    if (!this.artifacts) {\r\n      this.artifacts = [];\r\n      for (let i = 0; i < count; ++i) {\r\n        const programInfo = this.createProgramInfo(inferenceHandler, inputs[0], i);\r\n        const artifact = inferenceHandler.session.programManager.build(programInfo);\r\n        this.artifacts.push(artifact);\r\n      }\r\n    }\r\n    const results: Tensor[] = [];\r\n\r\n    this.artifacts.forEach(artifact => {\r\n      const rundata = this.createRunData(inferenceHandler, artifact.programInfo, inputs);\r\n      inferenceHandler.session.programManager.run(artifact, rundata);\r\n      results.push(rundata.outputTextureData.tensor);\r\n    });\r\n    return results;\r\n  }\r\n  getProgramCount(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): number {\r\n    const [, offsets] = SplitUtil.splitShape(inputs[0].dims, this.axis, this.split, this.numOutputs);\r\n    return offsets.length;\r\n  }\r\n  createProgramInfo(inferenceHandler: WebGLInferenceHandler, input: Tensor, index: number): ProgramInfo {\r\n    const [shapes, offsets] = SplitUtil.splitShape(input.dims, this.axis, this.split, this.numOutputs);\r\n    const offset = offsets[index];\r\n    const outputShape = shapes[index];\r\n    const rank = outputShape.length;\r\n    const shaderSource = `\r\n      float process(int indices[${rank}]) {\r\n        indices[${this.axis}] += ${offset};\r\n        return _A(indices);\r\n      }`;\r\n    return {\r\n      inputLayouts: [inferenceHandler.getOrCreateTextureLayout(input)],\r\n      outputLayout: inferenceHandler.createTextureLayoutFromShape(outputShape),\r\n      samplers: ['A'],\r\n      shaderSource,\r\n    };\r\n  }\r\n  createRunData(inferenceHandler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = [inferenceHandler.getOrCreateTextureData(inputs[0], programInfo.inputLayouts[0])];\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData:\r\n          inferenceHandler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {}\r\n    };\r\n  }\r\n  protected artifacts: Artifact[];\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Attribute} from '../attribute';\r\nimport {InferenceHandler} from '../backend';\r\nimport {Operator} from '../operators';\r\nimport {Tensor} from '../tensor';\r\n\r\nexport abstract class Split implements Operator {\r\n  constructor(protected numOutputs?: number) {}\r\n\r\n  abstract run(inferenceHandler: InferenceHandler, inputs: Tensor[]): Tensor[]|Promise<Tensor[]>;\r\n\r\n  initialize(attributes: Attribute): void {\r\n    this.axis = attributes.getInt('axis', 0);\r\n    this.split = attributes.getInts('split', []);\r\n  }\r\n\r\n  checkInputs(inputs: Tensor[]): boolean {\r\n    if (!inputs || inputs.length !== 1) {\r\n      return false;\r\n    }\r\n\r\n    return this.checkInputTypes(inputs);\r\n  }\r\n\r\n  protected checkInputTypes(inputs: Tensor[]): boolean {\r\n    if (inputs[0].type !== 'int8' && inputs[0].type !== 'uint8' && inputs[0].type !== 'int16' &&\r\n        inputs[0].type !== 'uint16' && inputs[0].type !== 'int32' && inputs[0].type !== 'uint32' &&\r\n        inputs[0].type !== 'float32' && inputs[0].type !== 'float64' && inputs[0].type !== 'bool') {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  protected split: number[];\r\n  protected axis: number;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Squeeze} from '../../../ops/squeeze';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {reshape} from './reshape';\r\n\r\nexport class WebGLSqueeze extends Squeeze {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const outputDims = ShapeUtil.squeezeShape(inputs[0].dims, this.axes);\r\n    return [reshape(inferenceHandler, inputs[0], outputDims)];\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Sum} from '../../../ops/sum';\r\nimport {Tensor} from '../../../tensor';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\r\n\r\nexport class WebGLSum extends Sum implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    const glsl = getGlsl(handler.session.backend.glContext.version);\r\n    const outputShape = inputs[0].dims.slice();\r\n    const sumLine = inputs.map((v, i) => `${glsl.texture2D}(X${i},TexCoords)`).join(' + ');\r\n    const samplers = inputs.map((v, i) => `X${i}`);\r\n    return {\r\n      inputLayouts: inputs.map(t => handler.getOrCreateTextureLayout(t)),\r\n      outputLayout: handler.createTextureLayoutFromShape(outputShape),\r\n      samplers,\r\n      shaderSource: `\r\n      void main() {\r\n        vec4 result = ${sumLine};\r\n        ${glsl.output} = result;\r\n      }`,\r\n      hasMain: true\r\n    };\r\n  }\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = inputs.map((t, i) => handler.getOrCreateTextureData(t, programInfo.inputLayouts[i]));\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {}\r\n    };\r\n  }\r\n}\r\n","// Licensed under the MIT license.\r\n\r\nimport {Tile} from '../../../ops/tile';\r\nimport {Tensor} from '../../../tensor';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\r\n\r\nexport class WebGLTile extends Tile implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n\r\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    const inputShape = inputs[0].dims.slice();\r\n    const outputShape = new Array(inputShape.length);  // inputs[0].dims.slice();\r\n\r\n    const tileOps: string[] = [];\r\n    for (let i = 0; i < inputShape.length; i++) {\r\n      outputShape[i] = inputShape[i] * inputs[1].numberData[i];\r\n      tileOps.push(`inputIdx[${i}] = int(mod(float(outputIdx[${i}]), ${inputShape[i]}.));`);\r\n    }\r\n\r\n    const rank = outputShape.length;\r\n    const shaderSource = `\r\n    float process(int outputIdx[${rank}]) {\r\n      int inputIdx[${rank}];\r\n      ${tileOps.join('\\n')}\r\n      return _A(inputIdx);\r\n    }`;\r\n    return {\r\n      inputLayouts: inputs.map(t => handler.getOrCreateTextureLayout(t)),\r\n      outputLayout: handler.createTextureLayoutFromShape(outputShape),\r\n      samplers: ['A'],\r\n      shaderSource,\r\n    };\r\n  }\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = inputs.map((t, i) => handler.getOrCreateTextureData(t, programInfo.inputLayouts[i]));\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {}\r\n    };\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Transpose} from '../../../ops/transpose';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {FunctionType, GlslPositionalFunction} from '../glsl-definitions';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\r\n\r\nexport class WebGLTranspose extends Transpose implements WebGLOperator {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  getOutputShape(inputShapes: Array<ReadonlyArray<number>>): ReadonlyArray<number> {\r\n    const perm = this.getAdjustedPerm(inputShapes[0]);\r\n    return ShapeUtil.sortBasedOnPerm(inputShapes[0], perm);\r\n  }\r\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    const inputShapes = inputs.map(t => t.dims.slice());\r\n    const perm = this.getAdjustedPerm(inputShapes[0]);\r\n    const unpackedOutputShape = this.getOutputShape(inputShapes);\r\n    const rank = inputs[0].dims.length;\r\n    // A dims=[${inputs[0].dims.toString()}]\r\n    // out Dims=[${unpackedOutputShape.toString()}]\r\n    // based on perm=[${perm.toString()}]\r\n    const shaderSource = `\r\n      ${this.getPermFunctionBody('perm', perm, rank)}\r\n      float process(int indices[${rank}]) {\r\n        int a[${rank}];\r\n        perm(a, indices);\r\n        return _A(a);\r\n      }`;\r\n    const outputLayout = handler.createTextureLayoutFromShape(unpackedOutputShape, 1, unpackedOutputShape);\r\n    return {inputLayouts: [handler.getOrCreateTextureLayout(inputs[0])], outputLayout, samplers: ['A'], shaderSource};\r\n  }\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = [handler.getOrCreateTextureData(inputs[0], programInfo.inputLayouts[0])];\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {}\r\n    };\r\n  }\r\n  getPositionalFunction(handler: WebGLInferenceHandler, inputShape: number[], name?: string): GlslPositionalFunction {\r\n    const outputShape = this.getOutputShape([inputShape]);\r\n    if (!name) {\r\n      name = 'perm';\r\n    }\r\n    return {\r\n      name,\r\n      body: this.getPermFunctionBody(name, this.getAdjustedPerm(inputShape), outputShape.length),\r\n      type: FunctionType.Positional,\r\n      inputShape,\r\n      outputShape\r\n    };\r\n  }\r\n  protected getAdjustedPerm(inputShape: ReadonlyArray<number>): number[] {\r\n    let perm = this.perm;\r\n    if (perm && perm.length !== inputShape.length) {\r\n      perm = [...(inputShape.keys())].reverse();\r\n    }\r\n    return perm;\r\n  }\r\n  protected getPermFunctionBody(name: string, perm: number[], rank: number): string {\r\n    const reverseFunc = [];\r\n    reverseFunc.push(`void ${name}(out int a[${rank}], int src[${rank}]) {`);\r\n    for (let i = 0; i < rank; ++i) {\r\n      reverseFunc.push(`\\ta[${perm[i]}]=src[${i}];`);\r\n    }\r\n    reverseFunc.push('\\t}');\r\n    return reverseFunc.join('\\n');\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {UnaryOp} from '../../../ops/unary-op';\r\nimport {Tensor} from '../../../tensor';\r\nimport {FunctionType, GlslValueFunction} from '../glsl-definitions';\r\nimport {getGlsl} from '../glsl-source';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {ProgramInfo, RunData, WebGLOperator} from '../types';\r\n\r\nexport class WebGLUnaryOp extends UnaryOp implements WebGLOperator {\r\n  constructor(protected typeConstraint: ReadonlyArray<Tensor.DataType>, protected glslFunc: GlslValueFunction) {\r\n    super(typeConstraint);\r\n  }\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    return inferenceHandler.run(this, inputs);\r\n  }\r\n  createProgramInfo(handler: WebGLInferenceHandler, inputs: Tensor[]): ProgramInfo {\r\n    const outputShape = inputs[0].dims.slice();\r\n    const inputLayout = handler.getOrCreateTextureLayout(inputs[0]);\r\n    const glsl = getGlsl(handler.session.backend.glContext.version);\r\n    const shaderSource = `\r\n      ${this.glslFunc.body}\r\n      void main() {\r\n        vec4 v = ${glsl.texture2D}(A, TexCoords);\r\n        v = ${this.glslFunc.name}(v);\r\n        ${glsl.output} = v;\r\n      }\r\n      `;\r\n    const outputLayout = handler.createTextureLayoutFromShape(outputShape);\r\n    return {inputLayouts: [inputLayout], outputLayout, samplers: ['A'], shaderSource, hasMain: true};\r\n  }\r\n  createRunData(handler: WebGLInferenceHandler, programInfo: ProgramInfo, inputs: Tensor[]): RunData {\r\n    const inputTDs = [handler.getOrCreateTextureData(inputs[0], programInfo.inputLayouts[0])];\r\n    return {\r\n      inputTextureDatas: inputTDs,\r\n      outputTextureData: handler.createTextureDataFromLayout(programInfo.outputLayout, inputTDs[0].tensor.type),\r\n      uniformData: {}\r\n    };\r\n  }\r\n}\r\n\r\nexport function glslAbs(): GlslValueFunction {\r\n  return glslBuiltinUnary('abs');\r\n}\r\nexport function glslAcos(): GlslValueFunction {\r\n  return glslBuiltinUnary('acos');\r\n}\r\nexport function glslAsin(): GlslValueFunction {\r\n  return glslBuiltinUnary('asin');\r\n}\r\nexport function glslAtan(): GlslValueFunction {\r\n  return glslBuiltinUnary('atan');\r\n}\r\nexport function glslCeil(): GlslValueFunction {\r\n  return glslBuiltinUnary('ceil');\r\n}\r\nexport function glslCos(): GlslValueFunction {\r\n  return glslBuiltinUnary('cos');\r\n}\r\nexport function glslExp(): GlslValueFunction {\r\n  return glslBuiltinUnary('exp');\r\n}\r\nexport function glslFloor(): GlslValueFunction {\r\n  return glslBuiltinUnary('floor');\r\n}\r\nexport function glslIdentity(): GlslValueFunction {\r\n  const name = `indentity_`;\r\n  const body = `\r\n  float ${name}(float a) {\r\n    return a;\r\n  }\r\n  vec4 ${name}(vec4 v) {\r\n    return v;\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslLog(): GlslValueFunction {\r\n  return glslBuiltinUnary('log');\r\n}\r\nexport function glslNeg(): GlslValueFunction {\r\n  const name = `neg_`;\r\n  const body = `\r\n  float ${name}(float a) {\r\n    return -a;\r\n  }\r\n  vec4 ${name}(vec4 v) {\r\n    return -v;\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslNot(): GlslValueFunction {\r\n  const name = `not_`;\r\n  const body = `\r\n  float ${name}(float a) {\r\n    return float( ! bool(a) );\r\n  }\r\n  bool ${name}(bool a) {\r\n    return !a;\r\n  }\r\n  vec4 ${name}(vec4 v) {\r\n    return vec4(!bool(v.x), !bool(v.y), !bool(v.z), !bool(v.w));\r\n  }\r\n  bvec4 ${name}(bvec4 v) {\r\n    return bvec4(!v.x, !v.y, !v.z, !v.w);\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslSin(): GlslValueFunction {\r\n  return glslBuiltinUnary('sin');\r\n}\r\nexport function glslRelu(): GlslValueFunction {\r\n  const name = `relu_`;\r\n  const body = `\r\n  float ${name}(float a) {\r\n    return max( a, 0.0 );\r\n  }\r\n  vec4 ${name}(vec4 v) {\r\n    return max( v, 0.0 );\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslSigmoid(): GlslValueFunction {\r\n  const name = `sigmoid_`;\r\n  const body = `\r\n  float ${name}(float a) {\r\n    return 1.0 / (1.0 + exp(-a));\r\n  }\r\n  vec4 ${name}(vec4 v) {\r\n    return 1.0 / (1.0 + exp(-v));\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nexport function glslSqrt(): GlslValueFunction {\r\n  return glslBuiltinUnary('sqrt');\r\n}\r\nexport function glslTan(): GlslValueFunction {\r\n  return glslBuiltinUnary('tan');\r\n}\r\nexport function glslTanh(): GlslValueFunction {\r\n  const name = `tanh_`;\r\n  const body = `\r\n  float ${name}(float a) {\r\n    a = clamp(a, -10., 10.);\r\n    a = exp(2.*a);\r\n    return (a - 1.) / (a + 1.);\r\n  }\r\n  vec4 ${name}(vec4 v) {\r\n    v = clamp(v, -10., 10.);\r\n    v = exp(2.*v);\r\n    return (v - 1.) / (v + 1.);\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\nfunction glslBuiltinUnary(fname: string): GlslValueFunction {\r\n  const name = `${fname}_`;\r\n  const body = `\r\n  float ${name}(float a) {\r\n    return ${fname}(a);\r\n  }\r\n  vec4 ${name}(vec4 v) {\r\n    return ${fname}(v);\r\n  }\r\n  `;\r\n  return {body, name, type: FunctionType.ValueBased};\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Unsqueeze} from '../../../ops/unsqueeze';\r\nimport {Tensor} from '../../../tensor';\r\nimport {ShapeUtil} from '../../../util';\r\nimport {WebGLInferenceHandler} from '../inference-handler';\r\nimport {reshape} from './reshape';\r\n\r\nexport class WebGLUnsqueeze extends Unsqueeze {\r\n  run(inferenceHandler: WebGLInferenceHandler, inputs: Tensor[]): Tensor[] {\r\n    const outputDims = ShapeUtil.unsqueezeShape(inputs[0].dims, this.axes);\r\n    return [reshape(inferenceHandler, inputs[0], outputDims)];\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {env} from '../../env';\r\nimport {Logger, Profiler} from '../../instrument';\r\n\r\nimport {GlslPreprocessor} from './glsl-preprocessor';\r\nimport {getVertexShaderSource} from './glsl-source';\r\nimport {Artifact, ProgramInfo, RunData, TextureData, UniformData, VariableInfo} from './types';\r\nimport {WebGLContext} from './webgl-context';\r\n\r\n/**\r\n * ProgramManager is the main class behind running computations\r\n * It builds ProgramInfo's into Artifacts\r\n * It compiles given ProgramInfo's into WebGL Prorams (cached as Artifacts)\r\n * Uses the artifact to run the computation by calling Draw on\r\n * the WebGL drawing buffer\r\n * ProgramManager automatically maps (binds) input variables to their\r\n * corresponding Location's in the binary program\r\n */\r\nexport class ProgramManager {\r\n  repo: Map<{}, Artifact>;  // this should be per-session object\r\n  vertexShader: WebGLShader;\r\n  attributesBound: boolean;\r\n\r\n  constructor(public profiler: Readonly<Profiler>, public glContext: WebGLContext) {\r\n    this.repo = new Map();\r\n    this.attributesBound = false;\r\n  }\r\n  getArtifact(key: {}): Artifact|undefined {\r\n    return this.repo.get(key);\r\n  }\r\n  setArtifact(key: {}, artifact: Artifact): void {\r\n    this.repo.set(key, artifact);\r\n  }\r\n  run(buildArtifact: Artifact, runData: RunData): void {\r\n    this.profiler.event('backend', 'ProgramManager.run', () => {\r\n      const gl = this.glContext.gl;\r\n      const program = buildArtifact.program;\r\n      gl.useProgram(program);\r\n      try {\r\n        this.bindOutput(runData.outputTextureData);\r\n        if (!this.attributesBound) {\r\n          this.bindAttributes(buildArtifact.attribLocations);\r\n        }\r\n        this.bindUniforms(buildArtifact.uniformLocations, runData.uniformData, runData.inputTextureDatas);\r\n      } catch (err) {\r\n        Logger.error('ProgramManager', buildArtifact.programInfo.shaderSource);\r\n        throw err;\r\n      }\r\n      this.profiler.event('backend', 'GlContext.draw()', () => {\r\n        this.doDraw(buildArtifact, runData);\r\n        gl.flush();\r\n      });\r\n    });\r\n  }\r\n  dispose(): void {\r\n    if (this.vertexShader) {\r\n      this.glContext.deleteShader(this.vertexShader);\r\n    }\r\n    this.repo.forEach(a => this.glContext.deleteProgram(a.program));\r\n  }\r\n  build(programInfo: ProgramInfo): Artifact {\r\n    return this.profiler.event('backend', 'ProgramManager.build', () => {\r\n      const preprocessor = new GlslPreprocessor(this.glContext, programInfo);\r\n      const fragScript = preprocessor.preprocess();\r\n      const program = this.compile(fragScript);\r\n      const artifact = {\r\n        programInfo,\r\n        program,\r\n        uniformLocations: this.getUniformLocations(\r\n            program, preprocessor.context.programInfo.samplers, preprocessor.context.programInfo.variables),\r\n        attribLocations: this.getAttribLocations(program)\r\n      };\r\n      return artifact;\r\n    });\r\n  }\r\n  protected doDraw(artifact: Artifact, runData: RunData): void {\r\n    if (runData.draw) {\r\n      Logger.verbose('ProgramManager', 'Custom draw function');\r\n      runData.draw(this.glContext, artifact);\r\n    } else {\r\n      this.glContext.draw();\r\n    }\r\n  }\r\n  protected compile(fragShaderScript: string): WebGLProgram {\r\n    if (!this.vertexShader) {\r\n      Logger.verbose('ProrgramManager', 'Compiling and caching Vertex shader for the first time');\r\n      const vertexShaderScript = getVertexShaderSource(this.glContext.version);\r\n      this.vertexShader = this.glContext.compileShader(vertexShaderScript, this.glContext.gl.VERTEX_SHADER);\r\n    }\r\n    if (env.debug) {\r\n      Logger.verbose('ProrgramManager', `FragShader:\r\n${fragShaderScript}\r\n`);\r\n    }\r\n    const fragShader = this.glContext.compileShader(fragShaderScript, this.glContext.gl.FRAGMENT_SHADER);\r\n    const program = this.glContext.createProgram(this.vertexShader, fragShader);\r\n    this.glContext.deleteShader(fragShader);\r\n    return program;\r\n  }\r\n  bindOutput(td: TextureData): void {\r\n    Logger.verbose(\r\n        'ProrgramManager',\r\n        `Binding output texture to Framebuffer: w/h=${td.width}/${td.height}, shape=${td.shape}, type=${\r\n            td.tensor.type}`);\r\n    this.glContext.attachFramebuffer(td.texture, td.width, td.height);\r\n  }\r\n  bindAttributes(attribLocations: Artifact.AttribLocations): void {\r\n    const positionHandle = attribLocations.position;\r\n    const textureCoordHandle = attribLocations.textureCoord;\r\n    this.glContext.setVertexAttributes(positionHandle, textureCoordHandle);\r\n    this.attributesBound = true;\r\n  }\r\n  bindUniforms(uniformLocations: Artifact.UniformLocations, uniformData: UniformData, textures: TextureData[]): void {\r\n    const gl = this.glContext.gl;\r\n    let texturePosition = 0;\r\n    for (const {name, type, location, arrayLength} of uniformLocations) {\r\n      switch (type) {\r\n        case 'sampler2D':\r\n          this.bindTexture(textures[texturePosition], location, texturePosition);\r\n          texturePosition++;\r\n          break;\r\n        case 'float':\r\n          if (arrayLength) {\r\n            gl.uniform1fv(location, uniformData[name] as number[]);\r\n          } else {\r\n            gl.uniform1f(location, uniformData[name] as number);\r\n          }\r\n          break;\r\n        case 'int':\r\n          if (arrayLength) {\r\n            gl.uniform1iv(location, uniformData[name] as number[]);\r\n          } else {\r\n            gl.uniform1i(location, uniformData[name] as number);\r\n          }\r\n          break;\r\n        default:\r\n          throw new Error(`Uniform not implemented: ${type}`);\r\n      }\r\n    }\r\n  }\r\n  bindTexture(td: TextureData, uniformHandle: WebGLUniformLocation, position: number): void {\r\n    this.glContext.bindTextureToUniform(td.texture, position, uniformHandle);\r\n  }\r\n  getAttribLocations(program: WebGLProgram): Artifact.AttribLocations {\r\n    return {\r\n      position: this.getAttribLocation(program, 'position'),\r\n      textureCoord: this.getAttribLocation(program, 'textureCoord')\r\n    };\r\n  }\r\n  getUniformLocations(program: WebGLProgram, samplers?: string[], variables?: VariableInfo[]):\r\n      Artifact.UniformLocations {\r\n    const uniformLocations: Artifact.UniformLocations = [];\r\n    if (samplers) {\r\n      for (const sampler of samplers) {\r\n        uniformLocations.push({name: sampler, type: 'sampler2D', location: this.getUniformLocation(program, sampler)});\r\n      }\r\n    }\r\n    if (variables) {\r\n      for (const variable of variables) {\r\n        uniformLocations.push({...variable, location: this.getUniformLocation(program, variable.name)});\r\n      }\r\n    }\r\n    return uniformLocations;\r\n  }\r\n  getUniformLocation(program: WebGLProgram, name: string): WebGLUniformLocation {\r\n    const gl = this.glContext.gl;\r\n    const reference = gl.getUniformLocation(program, name);\r\n    if (reference === null) {\r\n      throw new Error(`Uniform ${name} not found.`);\r\n    }\r\n    return reference;\r\n  }\r\n  getAttribLocation(program: WebGLProgram, name: string): number {\r\n    const gl = this.glContext.gl;\r\n    const attributeLocation: number = gl.getAttribLocation(program, name);\r\n    return attributeLocation;\r\n  }\r\n}\r\n","/*!\n * Platform.js <https://mths.be/platform>\n * Copyright 2014-2018 Benjamin Tan <https://bnjmnt4n.now.sh/>\n * Copyright 2011-2013 John-David Dalton <http://allyoucanleet.com/>\n * Available under MIT license <https://mths.be/mit>\n */\n;(function() {\n  'use strict';\n\n  /** Used to determine if values are of the language type `Object`. */\n  var objectTypes = {\n    'function': true,\n    'object': true\n  };\n\n  /** Used as a reference to the global object. */\n  var root = (objectTypes[typeof window] && window) || this;\n\n  /** Backup possible global object. */\n  var oldRoot = root;\n\n  /** Detect free variable `exports`. */\n  var freeExports = objectTypes[typeof exports] && exports;\n\n  /** Detect free variable `module`. */\n  var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;\n\n  /** Detect free variable `global` from Node.js or Browserified code and use it as `root`. */\n  var freeGlobal = freeExports && freeModule && typeof global == 'object' && global;\n  if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal)) {\n    root = freeGlobal;\n  }\n\n  /**\n   * Used as the maximum length of an array-like object.\n   * See the [ES6 spec](http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength)\n   * for more details.\n   */\n  var maxSafeInteger = Math.pow(2, 53) - 1;\n\n  /** Regular expression to detect Opera. */\n  var reOpera = /\\bOpera/;\n\n  /** Possible global object. */\n  var thisBinding = this;\n\n  /** Used for native method references. */\n  var objectProto = Object.prototype;\n\n  /** Used to check for own properties of an object. */\n  var hasOwnProperty = objectProto.hasOwnProperty;\n\n  /** Used to resolve the internal `[[Class]]` of values. */\n  var toString = objectProto.toString;\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Capitalizes a string value.\n   *\n   * @private\n   * @param {string} string The string to capitalize.\n   * @returns {string} The capitalized string.\n   */\n  function capitalize(string) {\n    string = String(string);\n    return string.charAt(0).toUpperCase() + string.slice(1);\n  }\n\n  /**\n   * A utility function to clean up the OS name.\n   *\n   * @private\n   * @param {string} os The OS name to clean up.\n   * @param {string} [pattern] A `RegExp` pattern matching the OS name.\n   * @param {string} [label] A label for the OS.\n   */\n  function cleanupOS(os, pattern, label) {\n    // Platform tokens are defined at:\n    // http://msdn.microsoft.com/en-us/library/ms537503(VS.85).aspx\n    // http://web.archive.org/web/20081122053950/http://msdn.microsoft.com/en-us/library/ms537503(VS.85).aspx\n    var data = {\n      '10.0': '10',\n      '6.4':  '10 Technical Preview',\n      '6.3':  '8.1',\n      '6.2':  '8',\n      '6.1':  'Server 2008 R2 / 7',\n      '6.0':  'Server 2008 / Vista',\n      '5.2':  'Server 2003 / XP 64-bit',\n      '5.1':  'XP',\n      '5.01': '2000 SP1',\n      '5.0':  '2000',\n      '4.0':  'NT',\n      '4.90': 'ME'\n    };\n    // Detect Windows version from platform tokens.\n    if (pattern && label && /^Win/i.test(os) && !/^Windows Phone /i.test(os) &&\n        (data = data[/[\\d.]+$/.exec(os)])) {\n      os = 'Windows ' + data;\n    }\n    // Correct character case and cleanup string.\n    os = String(os);\n\n    if (pattern && label) {\n      os = os.replace(RegExp(pattern, 'i'), label);\n    }\n\n    os = format(\n      os.replace(/ ce$/i, ' CE')\n        .replace(/\\bhpw/i, 'web')\n        .replace(/\\bMacintosh\\b/, 'Mac OS')\n        .replace(/_PowerPC\\b/i, ' OS')\n        .replace(/\\b(OS X) [^ \\d]+/i, '$1')\n        .replace(/\\bMac (OS X)\\b/, '$1')\n        .replace(/\\/(\\d)/, ' $1')\n        .replace(/_/g, '.')\n        .replace(/(?: BePC|[ .]*fc[ \\d.]+)$/i, '')\n        .replace(/\\bx86\\.64\\b/gi, 'x86_64')\n        .replace(/\\b(Windows Phone) OS\\b/, '$1')\n        .replace(/\\b(Chrome OS \\w+) [\\d.]+\\b/, '$1')\n        .split(' on ')[0]\n    );\n\n    return os;\n  }\n\n  /**\n   * An iteration utility for arrays and objects.\n   *\n   * @private\n   * @param {Array|Object} object The object to iterate over.\n   * @param {Function} callback The function called per iteration.\n   */\n  function each(object, callback) {\n    var index = -1,\n        length = object ? object.length : 0;\n\n    if (typeof length == 'number' && length > -1 && length <= maxSafeInteger) {\n      while (++index < length) {\n        callback(object[index], index, object);\n      }\n    } else {\n      forOwn(object, callback);\n    }\n  }\n\n  /**\n   * Trim and conditionally capitalize string values.\n   *\n   * @private\n   * @param {string} string The string to format.\n   * @returns {string} The formatted string.\n   */\n  function format(string) {\n    string = trim(string);\n    return /^(?:webOS|i(?:OS|P))/.test(string)\n      ? string\n      : capitalize(string);\n  }\n\n  /**\n   * Iterates over an object's own properties, executing the `callback` for each.\n   *\n   * @private\n   * @param {Object} object The object to iterate over.\n   * @param {Function} callback The function executed per own property.\n   */\n  function forOwn(object, callback) {\n    for (var key in object) {\n      if (hasOwnProperty.call(object, key)) {\n        callback(object[key], key, object);\n      }\n    }\n  }\n\n  /**\n   * Gets the internal `[[Class]]` of a value.\n   *\n   * @private\n   * @param {*} value The value.\n   * @returns {string} The `[[Class]]`.\n   */\n  function getClassOf(value) {\n    return value == null\n      ? capitalize(value)\n      : toString.call(value).slice(8, -1);\n  }\n\n  /**\n   * Host objects can return type values that are different from their actual\n   * data type. The objects we are concerned with usually return non-primitive\n   * types of \"object\", \"function\", or \"unknown\".\n   *\n   * @private\n   * @param {*} object The owner of the property.\n   * @param {string} property The property to check.\n   * @returns {boolean} Returns `true` if the property value is a non-primitive, else `false`.\n   */\n  function isHostType(object, property) {\n    var type = object != null ? typeof object[property] : 'number';\n    return !/^(?:boolean|number|string|undefined)$/.test(type) &&\n      (type == 'object' ? !!object[property] : true);\n  }\n\n  /**\n   * Prepares a string for use in a `RegExp` by making hyphens and spaces optional.\n   *\n   * @private\n   * @param {string} string The string to qualify.\n   * @returns {string} The qualified string.\n   */\n  function qualify(string) {\n    return String(string).replace(/([ -])(?!$)/g, '$1?');\n  }\n\n  /**\n   * A bare-bones `Array#reduce` like utility function.\n   *\n   * @private\n   * @param {Array} array The array to iterate over.\n   * @param {Function} callback The function called per iteration.\n   * @returns {*} The accumulated result.\n   */\n  function reduce(array, callback) {\n    var accumulator = null;\n    each(array, function(value, index) {\n      accumulator = callback(accumulator, value, index, array);\n    });\n    return accumulator;\n  }\n\n  /**\n   * Removes leading and trailing whitespace from a string.\n   *\n   * @private\n   * @param {string} string The string to trim.\n   * @returns {string} The trimmed string.\n   */\n  function trim(string) {\n    return String(string).replace(/^ +| +$/g, '');\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  /**\n   * Creates a new platform object.\n   *\n   * @memberOf platform\n   * @param {Object|string} [ua=navigator.userAgent] The user agent string or\n   *  context object.\n   * @returns {Object} A platform object.\n   */\n  function parse(ua) {\n\n    /** The environment context object. */\n    var context = root;\n\n    /** Used to flag when a custom context is provided. */\n    var isCustomContext = ua && typeof ua == 'object' && getClassOf(ua) != 'String';\n\n    // Juggle arguments.\n    if (isCustomContext) {\n      context = ua;\n      ua = null;\n    }\n\n    /** Browser navigator object. */\n    var nav = context.navigator || {};\n\n    /** Browser user agent string. */\n    var userAgent = nav.userAgent || '';\n\n    ua || (ua = userAgent);\n\n    /** Used to flag when `thisBinding` is the [ModuleScope]. */\n    var isModuleScope = isCustomContext || thisBinding == oldRoot;\n\n    /** Used to detect if browser is like Chrome. */\n    var likeChrome = isCustomContext\n      ? !!nav.likeChrome\n      : /\\bChrome\\b/.test(ua) && !/internal|\\n/i.test(toString.toString());\n\n    /** Internal `[[Class]]` value shortcuts. */\n    var objectClass = 'Object',\n        airRuntimeClass = isCustomContext ? objectClass : 'ScriptBridgingProxyObject',\n        enviroClass = isCustomContext ? objectClass : 'Environment',\n        javaClass = (isCustomContext && context.java) ? 'JavaPackage' : getClassOf(context.java),\n        phantomClass = isCustomContext ? objectClass : 'RuntimeObject';\n\n    /** Detect Java environments. */\n    var java = /\\bJava/.test(javaClass) && context.java;\n\n    /** Detect Rhino. */\n    var rhino = java && getClassOf(context.environment) == enviroClass;\n\n    /** A character to represent alpha. */\n    var alpha = java ? 'a' : '\\u03b1';\n\n    /** A character to represent beta. */\n    var beta = java ? 'b' : '\\u03b2';\n\n    /** Browser document object. */\n    var doc = context.document || {};\n\n    /**\n     * Detect Opera browser (Presto-based).\n     * http://www.howtocreate.co.uk/operaStuff/operaObject.html\n     * http://dev.opera.com/articles/view/opera-mini-web-content-authoring-guidelines/#operamini\n     */\n    var opera = context.operamini || context.opera;\n\n    /** Opera `[[Class]]`. */\n    var operaClass = reOpera.test(operaClass = (isCustomContext && opera) ? opera['[[Class]]'] : getClassOf(opera))\n      ? operaClass\n      : (opera = null);\n\n    /*------------------------------------------------------------------------*/\n\n    /** Temporary variable used over the script's lifetime. */\n    var data;\n\n    /** The CPU architecture. */\n    var arch = ua;\n\n    /** Platform description array. */\n    var description = [];\n\n    /** Platform alpha/beta indicator. */\n    var prerelease = null;\n\n    /** A flag to indicate that environment features should be used to resolve the platform. */\n    var useFeatures = ua == userAgent;\n\n    /** The browser/environment version. */\n    var version = useFeatures && opera && typeof opera.version == 'function' && opera.version();\n\n    /** A flag to indicate if the OS ends with \"/ Version\" */\n    var isSpecialCasedOS;\n\n    /* Detectable layout engines (order is important). */\n    var layout = getLayout([\n      { 'label': 'EdgeHTML', 'pattern': 'Edge' },\n      'Trident',\n      { 'label': 'WebKit', 'pattern': 'AppleWebKit' },\n      'iCab',\n      'Presto',\n      'NetFront',\n      'Tasman',\n      'KHTML',\n      'Gecko'\n    ]);\n\n    /* Detectable browser names (order is important). */\n    var name = getName([\n      'Adobe AIR',\n      'Arora',\n      'Avant Browser',\n      'Breach',\n      'Camino',\n      'Electron',\n      'Epiphany',\n      'Fennec',\n      'Flock',\n      'Galeon',\n      'GreenBrowser',\n      'iCab',\n      'Iceweasel',\n      'K-Meleon',\n      'Konqueror',\n      'Lunascape',\n      'Maxthon',\n      { 'label': 'Microsoft Edge', 'pattern': 'Edge' },\n      'Midori',\n      'Nook Browser',\n      'PaleMoon',\n      'PhantomJS',\n      'Raven',\n      'Rekonq',\n      'RockMelt',\n      { 'label': 'Samsung Internet', 'pattern': 'SamsungBrowser' },\n      'SeaMonkey',\n      { 'label': 'Silk', 'pattern': '(?:Cloud9|Silk-Accelerated)' },\n      'Sleipnir',\n      'SlimBrowser',\n      { 'label': 'SRWare Iron', 'pattern': 'Iron' },\n      'Sunrise',\n      'Swiftfox',\n      'Waterfox',\n      'WebPositive',\n      'Opera Mini',\n      { 'label': 'Opera Mini', 'pattern': 'OPiOS' },\n      'Opera',\n      { 'label': 'Opera', 'pattern': 'OPR' },\n      'Chrome',\n      { 'label': 'Chrome Mobile', 'pattern': '(?:CriOS|CrMo)' },\n      { 'label': 'Firefox', 'pattern': '(?:Firefox|Minefield)' },\n      { 'label': 'Firefox for iOS', 'pattern': 'FxiOS' },\n      { 'label': 'IE', 'pattern': 'IEMobile' },\n      { 'label': 'IE', 'pattern': 'MSIE' },\n      'Safari'\n    ]);\n\n    /* Detectable products (order is important). */\n    var product = getProduct([\n      { 'label': 'BlackBerry', 'pattern': 'BB10' },\n      'BlackBerry',\n      { 'label': 'Galaxy S', 'pattern': 'GT-I9000' },\n      { 'label': 'Galaxy S2', 'pattern': 'GT-I9100' },\n      { 'label': 'Galaxy S3', 'pattern': 'GT-I9300' },\n      { 'label': 'Galaxy S4', 'pattern': 'GT-I9500' },\n      { 'label': 'Galaxy S5', 'pattern': 'SM-G900' },\n      { 'label': 'Galaxy S6', 'pattern': 'SM-G920' },\n      { 'label': 'Galaxy S6 Edge', 'pattern': 'SM-G925' },\n      { 'label': 'Galaxy S7', 'pattern': 'SM-G930' },\n      { 'label': 'Galaxy S7 Edge', 'pattern': 'SM-G935' },\n      'Google TV',\n      'Lumia',\n      'iPad',\n      'iPod',\n      'iPhone',\n      'Kindle',\n      { 'label': 'Kindle Fire', 'pattern': '(?:Cloud9|Silk-Accelerated)' },\n      'Nexus',\n      'Nook',\n      'PlayBook',\n      'PlayStation Vita',\n      'PlayStation',\n      'TouchPad',\n      'Transformer',\n      { 'label': 'Wii U', 'pattern': 'WiiU' },\n      'Wii',\n      'Xbox One',\n      { 'label': 'Xbox 360', 'pattern': 'Xbox' },\n      'Xoom'\n    ]);\n\n    /* Detectable manufacturers. */\n    var manufacturer = getManufacturer({\n      'Apple': { 'iPad': 1, 'iPhone': 1, 'iPod': 1 },\n      'Archos': {},\n      'Amazon': { 'Kindle': 1, 'Kindle Fire': 1 },\n      'Asus': { 'Transformer': 1 },\n      'Barnes & Noble': { 'Nook': 1 },\n      'BlackBerry': { 'PlayBook': 1 },\n      'Google': { 'Google TV': 1, 'Nexus': 1 },\n      'HP': { 'TouchPad': 1 },\n      'HTC': {},\n      'LG': {},\n      'Microsoft': { 'Xbox': 1, 'Xbox One': 1 },\n      'Motorola': { 'Xoom': 1 },\n      'Nintendo': { 'Wii U': 1,  'Wii': 1 },\n      'Nokia': { 'Lumia': 1 },\n      'Samsung': { 'Galaxy S': 1, 'Galaxy S2': 1, 'Galaxy S3': 1, 'Galaxy S4': 1 },\n      'Sony': { 'PlayStation': 1, 'PlayStation Vita': 1 }\n    });\n\n    /* Detectable operating systems (order is important). */\n    var os = getOS([\n      'Windows Phone',\n      'Android',\n      'CentOS',\n      { 'label': 'Chrome OS', 'pattern': 'CrOS' },\n      'Debian',\n      'Fedora',\n      'FreeBSD',\n      'Gentoo',\n      'Haiku',\n      'Kubuntu',\n      'Linux Mint',\n      'OpenBSD',\n      'Red Hat',\n      'SuSE',\n      'Ubuntu',\n      'Xubuntu',\n      'Cygwin',\n      'Symbian OS',\n      'hpwOS',\n      'webOS ',\n      'webOS',\n      'Tablet OS',\n      'Tizen',\n      'Linux',\n      'Mac OS X',\n      'Macintosh',\n      'Mac',\n      'Windows 98;',\n      'Windows '\n    ]);\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * Picks the layout engine from an array of guesses.\n     *\n     * @private\n     * @param {Array} guesses An array of guesses.\n     * @returns {null|string} The detected layout engine.\n     */\n    function getLayout(guesses) {\n      return reduce(guesses, function(result, guess) {\n        return result || RegExp('\\\\b' + (\n          guess.pattern || qualify(guess)\n        ) + '\\\\b', 'i').exec(ua) && (guess.label || guess);\n      });\n    }\n\n    /**\n     * Picks the manufacturer from an array of guesses.\n     *\n     * @private\n     * @param {Array} guesses An object of guesses.\n     * @returns {null|string} The detected manufacturer.\n     */\n    function getManufacturer(guesses) {\n      return reduce(guesses, function(result, value, key) {\n        // Lookup the manufacturer by product or scan the UA for the manufacturer.\n        return result || (\n          value[product] ||\n          value[/^[a-z]+(?: +[a-z]+\\b)*/i.exec(product)] ||\n          RegExp('\\\\b' + qualify(key) + '(?:\\\\b|\\\\w*\\\\d)', 'i').exec(ua)\n        ) && key;\n      });\n    }\n\n    /**\n     * Picks the browser name from an array of guesses.\n     *\n     * @private\n     * @param {Array} guesses An array of guesses.\n     * @returns {null|string} The detected browser name.\n     */\n    function getName(guesses) {\n      return reduce(guesses, function(result, guess) {\n        return result || RegExp('\\\\b' + (\n          guess.pattern || qualify(guess)\n        ) + '\\\\b', 'i').exec(ua) && (guess.label || guess);\n      });\n    }\n\n    /**\n     * Picks the OS name from an array of guesses.\n     *\n     * @private\n     * @param {Array} guesses An array of guesses.\n     * @returns {null|string} The detected OS name.\n     */\n    function getOS(guesses) {\n      return reduce(guesses, function(result, guess) {\n        var pattern = guess.pattern || qualify(guess);\n        if (!result && (result =\n              RegExp('\\\\b' + pattern + '(?:/[\\\\d.]+|[ \\\\w.]*)', 'i').exec(ua)\n            )) {\n          result = cleanupOS(result, pattern, guess.label || guess);\n        }\n        return result;\n      });\n    }\n\n    /**\n     * Picks the product name from an array of guesses.\n     *\n     * @private\n     * @param {Array} guesses An array of guesses.\n     * @returns {null|string} The detected product name.\n     */\n    function getProduct(guesses) {\n      return reduce(guesses, function(result, guess) {\n        var pattern = guess.pattern || qualify(guess);\n        if (!result && (result =\n              RegExp('\\\\b' + pattern + ' *\\\\d+[.\\\\w_]*', 'i').exec(ua) ||\n              RegExp('\\\\b' + pattern + ' *\\\\w+-[\\\\w]*', 'i').exec(ua) ||\n              RegExp('\\\\b' + pattern + '(?:; *(?:[a-z]+[_-])?[a-z]+\\\\d+|[^ ();-]*)', 'i').exec(ua)\n            )) {\n          // Split by forward slash and append product version if needed.\n          if ((result = String((guess.label && !RegExp(pattern, 'i').test(guess.label)) ? guess.label : result).split('/'))[1] && !/[\\d.]+/.test(result[0])) {\n            result[0] += ' ' + result[1];\n          }\n          // Correct character case and cleanup string.\n          guess = guess.label || guess;\n          result = format(result[0]\n            .replace(RegExp(pattern, 'i'), guess)\n            .replace(RegExp('; *(?:' + guess + '[_-])?', 'i'), ' ')\n            .replace(RegExp('(' + guess + ')[-_.]?(\\\\w)', 'i'), '$1 $2'));\n        }\n        return result;\n      });\n    }\n\n    /**\n     * Resolves the version using an array of UA patterns.\n     *\n     * @private\n     * @param {Array} patterns An array of UA patterns.\n     * @returns {null|string} The detected version.\n     */\n    function getVersion(patterns) {\n      return reduce(patterns, function(result, pattern) {\n        return result || (RegExp(pattern +\n          '(?:-[\\\\d.]+/|(?: for [\\\\w-]+)?[ /-])([\\\\d.]+[^ ();/_-]*)', 'i').exec(ua) || 0)[1] || null;\n      });\n    }\n\n    /**\n     * Returns `platform.description` when the platform object is coerced to a string.\n     *\n     * @name toString\n     * @memberOf platform\n     * @returns {string} Returns `platform.description` if available, else an empty string.\n     */\n    function toStringPlatform() {\n      return this.description || '';\n    }\n\n    /*------------------------------------------------------------------------*/\n\n    // Convert layout to an array so we can add extra details.\n    layout && (layout = [layout]);\n\n    // Detect product names that contain their manufacturer's name.\n    if (manufacturer && !product) {\n      product = getProduct([manufacturer]);\n    }\n    // Clean up Google TV.\n    if ((data = /\\bGoogle TV\\b/.exec(product))) {\n      product = data[0];\n    }\n    // Detect simulators.\n    if (/\\bSimulator\\b/i.test(ua)) {\n      product = (product ? product + ' ' : '') + 'Simulator';\n    }\n    // Detect Opera Mini 8+ running in Turbo/Uncompressed mode on iOS.\n    if (name == 'Opera Mini' && /\\bOPiOS\\b/.test(ua)) {\n      description.push('running in Turbo/Uncompressed mode');\n    }\n    // Detect IE Mobile 11.\n    if (name == 'IE' && /\\blike iPhone OS\\b/.test(ua)) {\n      data = parse(ua.replace(/like iPhone OS/, ''));\n      manufacturer = data.manufacturer;\n      product = data.product;\n    }\n    // Detect iOS.\n    else if (/^iP/.test(product)) {\n      name || (name = 'Safari');\n      os = 'iOS' + ((data = / OS ([\\d_]+)/i.exec(ua))\n        ? ' ' + data[1].replace(/_/g, '.')\n        : '');\n    }\n    // Detect Kubuntu.\n    else if (name == 'Konqueror' && !/buntu/i.test(os)) {\n      os = 'Kubuntu';\n    }\n    // Detect Android browsers.\n    else if ((manufacturer && manufacturer != 'Google' &&\n        ((/Chrome/.test(name) && !/\\bMobile Safari\\b/i.test(ua)) || /\\bVita\\b/.test(product))) ||\n        (/\\bAndroid\\b/.test(os) && /^Chrome/.test(name) && /\\bVersion\\//i.test(ua))) {\n      name = 'Android Browser';\n      os = /\\bAndroid\\b/.test(os) ? os : 'Android';\n    }\n    // Detect Silk desktop/accelerated modes.\n    else if (name == 'Silk') {\n      if (!/\\bMobi/i.test(ua)) {\n        os = 'Android';\n        description.unshift('desktop mode');\n      }\n      if (/Accelerated *= *true/i.test(ua)) {\n        description.unshift('accelerated');\n      }\n    }\n    // Detect PaleMoon identifying as Firefox.\n    else if (name == 'PaleMoon' && (data = /\\bFirefox\\/([\\d.]+)\\b/.exec(ua))) {\n      description.push('identifying as Firefox ' + data[1]);\n    }\n    // Detect Firefox OS and products running Firefox.\n    else if (name == 'Firefox' && (data = /\\b(Mobile|Tablet|TV)\\b/i.exec(ua))) {\n      os || (os = 'Firefox OS');\n      product || (product = data[1]);\n    }\n    // Detect false positives for Firefox/Safari.\n    else if (!name || (data = !/\\bMinefield\\b/i.test(ua) && /\\b(?:Firefox|Safari)\\b/.exec(name))) {\n      // Escape the `/` for Firefox 1.\n      if (name && !product && /[\\/,]|^[^(]+?\\)/.test(ua.slice(ua.indexOf(data + '/') + 8))) {\n        // Clear name of false positives.\n        name = null;\n      }\n      // Reassign a generic name.\n      if ((data = product || manufacturer || os) &&\n          (product || manufacturer || /\\b(?:Android|Symbian OS|Tablet OS|webOS)\\b/.test(os))) {\n        name = /[a-z]+(?: Hat)?/i.exec(/\\bAndroid\\b/.test(os) ? os : data) + ' Browser';\n      }\n    }\n    // Add Chrome version to description for Electron.\n    else if (name == 'Electron' && (data = (/\\bChrome\\/([\\d.]+)\\b/.exec(ua) || 0)[1])) {\n      description.push('Chromium ' + data);\n    }\n    // Detect non-Opera (Presto-based) versions (order is important).\n    if (!version) {\n      version = getVersion([\n        '(?:Cloud9|CriOS|CrMo|Edge|FxiOS|IEMobile|Iron|Opera ?Mini|OPiOS|OPR|Raven|SamsungBrowser|Silk(?!/[\\\\d.]+$))',\n        'Version',\n        qualify(name),\n        '(?:Firefox|Minefield|NetFront)'\n      ]);\n    }\n    // Detect stubborn layout engines.\n    if ((data =\n          layout == 'iCab' && parseFloat(version) > 3 && 'WebKit' ||\n          /\\bOpera\\b/.test(name) && (/\\bOPR\\b/.test(ua) ? 'Blink' : 'Presto') ||\n          /\\b(?:Midori|Nook|Safari)\\b/i.test(ua) && !/^(?:Trident|EdgeHTML)$/.test(layout) && 'WebKit' ||\n          !layout && /\\bMSIE\\b/i.test(ua) && (os == 'Mac OS' ? 'Tasman' : 'Trident') ||\n          layout == 'WebKit' && /\\bPlayStation\\b(?! Vita\\b)/i.test(name) && 'NetFront'\n        )) {\n      layout = [data];\n    }\n    // Detect Windows Phone 7 desktop mode.\n    if (name == 'IE' && (data = (/; *(?:XBLWP|ZuneWP)(\\d+)/i.exec(ua) || 0)[1])) {\n      name += ' Mobile';\n      os = 'Windows Phone ' + (/\\+$/.test(data) ? data : data + '.x');\n      description.unshift('desktop mode');\n    }\n    // Detect Windows Phone 8.x desktop mode.\n    else if (/\\bWPDesktop\\b/i.test(ua)) {\n      name = 'IE Mobile';\n      os = 'Windows Phone 8.x';\n      description.unshift('desktop mode');\n      version || (version = (/\\brv:([\\d.]+)/.exec(ua) || 0)[1]);\n    }\n    // Detect IE 11 identifying as other browsers.\n    else if (name != 'IE' && layout == 'Trident' && (data = /\\brv:([\\d.]+)/.exec(ua))) {\n      if (name) {\n        description.push('identifying as ' + name + (version ? ' ' + version : ''));\n      }\n      name = 'IE';\n      version = data[1];\n    }\n    // Leverage environment features.\n    if (useFeatures) {\n      // Detect server-side environments.\n      // Rhino has a global function while others have a global object.\n      if (isHostType(context, 'global')) {\n        if (java) {\n          data = java.lang.System;\n          arch = data.getProperty('os.arch');\n          os = os || data.getProperty('os.name') + ' ' + data.getProperty('os.version');\n        }\n        if (rhino) {\n          try {\n            version = context.require('ringo/engine').version.join('.');\n            name = 'RingoJS';\n          } catch(e) {\n            if ((data = context.system) && data.global.system == context.system) {\n              name = 'Narwhal';\n              os || (os = data[0].os || null);\n            }\n          }\n          if (!name) {\n            name = 'Rhino';\n          }\n        }\n        else if (\n          typeof context.process == 'object' && !context.process.browser &&\n          (data = context.process)\n        ) {\n          if (typeof data.versions == 'object') {\n            if (typeof data.versions.electron == 'string') {\n              description.push('Node ' + data.versions.node);\n              name = 'Electron';\n              version = data.versions.electron;\n            } else if (typeof data.versions.nw == 'string') {\n              description.push('Chromium ' + version, 'Node ' + data.versions.node);\n              name = 'NW.js';\n              version = data.versions.nw;\n            }\n          }\n          if (!name) {\n            name = 'Node.js';\n            arch = data.arch;\n            os = data.platform;\n            version = /[\\d.]+/.exec(data.version);\n            version = version ? version[0] : null;\n          }\n        }\n      }\n      // Detect Adobe AIR.\n      else if (getClassOf((data = context.runtime)) == airRuntimeClass) {\n        name = 'Adobe AIR';\n        os = data.flash.system.Capabilities.os;\n      }\n      // Detect PhantomJS.\n      else if (getClassOf((data = context.phantom)) == phantomClass) {\n        name = 'PhantomJS';\n        version = (data = data.version || null) && (data.major + '.' + data.minor + '.' + data.patch);\n      }\n      // Detect IE compatibility modes.\n      else if (typeof doc.documentMode == 'number' && (data = /\\bTrident\\/(\\d+)/i.exec(ua))) {\n        // We're in compatibility mode when the Trident version + 4 doesn't\n        // equal the document mode.\n        version = [version, doc.documentMode];\n        if ((data = +data[1] + 4) != version[1]) {\n          description.push('IE ' + version[1] + ' mode');\n          layout && (layout[1] = '');\n          version[1] = data;\n        }\n        version = name == 'IE' ? String(version[1].toFixed(1)) : version[0];\n      }\n      // Detect IE 11 masking as other browsers.\n      else if (typeof doc.documentMode == 'number' && /^(?:Chrome|Firefox)\\b/.test(name)) {\n        description.push('masking as ' + name + ' ' + version);\n        name = 'IE';\n        version = '11.0';\n        layout = ['Trident'];\n        os = 'Windows';\n      }\n      os = os && format(os);\n    }\n    // Detect prerelease phases.\n    if (version && (data =\n          /(?:[ab]|dp|pre|[ab]\\d+pre)(?:\\d+\\+?)?$/i.exec(version) ||\n          /(?:alpha|beta)(?: ?\\d)?/i.exec(ua + ';' + (useFeatures && nav.appMinorVersion)) ||\n          /\\bMinefield\\b/i.test(ua) && 'a'\n        )) {\n      prerelease = /b/i.test(data) ? 'beta' : 'alpha';\n      version = version.replace(RegExp(data + '\\\\+?$'), '') +\n        (prerelease == 'beta' ? beta : alpha) + (/\\d+\\+?/.exec(data) || '');\n    }\n    // Detect Firefox Mobile.\n    if (name == 'Fennec' || name == 'Firefox' && /\\b(?:Android|Firefox OS)\\b/.test(os)) {\n      name = 'Firefox Mobile';\n    }\n    // Obscure Maxthon's unreliable version.\n    else if (name == 'Maxthon' && version) {\n      version = version.replace(/\\.[\\d.]+/, '.x');\n    }\n    // Detect Xbox 360 and Xbox One.\n    else if (/\\bXbox\\b/i.test(product)) {\n      if (product == 'Xbox 360') {\n        os = null;\n      }\n      if (product == 'Xbox 360' && /\\bIEMobile\\b/.test(ua)) {\n        description.unshift('mobile mode');\n      }\n    }\n    // Add mobile postfix.\n    else if ((/^(?:Chrome|IE|Opera)$/.test(name) || name && !product && !/Browser|Mobi/.test(name)) &&\n        (os == 'Windows CE' || /Mobi/i.test(ua))) {\n      name += ' Mobile';\n    }\n    // Detect IE platform preview.\n    else if (name == 'IE' && useFeatures) {\n      try {\n        if (context.external === null) {\n          description.unshift('platform preview');\n        }\n      } catch(e) {\n        description.unshift('embedded');\n      }\n    }\n    // Detect BlackBerry OS version.\n    // http://docs.blackberry.com/en/developers/deliverables/18169/HTTP_headers_sent_by_BB_Browser_1234911_11.jsp\n    else if ((/\\bBlackBerry\\b/.test(product) || /\\bBB10\\b/.test(ua)) && (data =\n          (RegExp(product.replace(/ +/g, ' *') + '/([.\\\\d]+)', 'i').exec(ua) || 0)[1] ||\n          version\n        )) {\n      data = [data, /BB10/.test(ua)];\n      os = (data[1] ? (product = null, manufacturer = 'BlackBerry') : 'Device Software') + ' ' + data[0];\n      version = null;\n    }\n    // Detect Opera identifying/masking itself as another browser.\n    // http://www.opera.com/support/kb/view/843/\n    else if (this != forOwn && product != 'Wii' && (\n          (useFeatures && opera) ||\n          (/Opera/.test(name) && /\\b(?:MSIE|Firefox)\\b/i.test(ua)) ||\n          (name == 'Firefox' && /\\bOS X (?:\\d+\\.){2,}/.test(os)) ||\n          (name == 'IE' && (\n            (os && !/^Win/.test(os) && version > 5.5) ||\n            /\\bWindows XP\\b/.test(os) && version > 8 ||\n            version == 8 && !/\\bTrident\\b/.test(ua)\n          ))\n        ) && !reOpera.test((data = parse.call(forOwn, ua.replace(reOpera, '') + ';'))) && data.name) {\n      // When \"identifying\", the UA contains both Opera and the other browser's name.\n      data = 'ing as ' + data.name + ((data = data.version) ? ' ' + data : '');\n      if (reOpera.test(name)) {\n        if (/\\bIE\\b/.test(data) && os == 'Mac OS') {\n          os = null;\n        }\n        data = 'identify' + data;\n      }\n      // When \"masking\", the UA contains only the other browser's name.\n      else {\n        data = 'mask' + data;\n        if (operaClass) {\n          name = format(operaClass.replace(/([a-z])([A-Z])/g, '$1 $2'));\n        } else {\n          name = 'Opera';\n        }\n        if (/\\bIE\\b/.test(data)) {\n          os = null;\n        }\n        if (!useFeatures) {\n          version = null;\n        }\n      }\n      layout = ['Presto'];\n      description.push(data);\n    }\n    // Detect WebKit Nightly and approximate Chrome/Safari versions.\n    if ((data = (/\\bAppleWebKit\\/([\\d.]+\\+?)/i.exec(ua) || 0)[1])) {\n      // Correct build number for numeric comparison.\n      // (e.g. \"532.5\" becomes \"532.05\")\n      data = [parseFloat(data.replace(/\\.(\\d)$/, '.0$1')), data];\n      // Nightly builds are postfixed with a \"+\".\n      if (name == 'Safari' && data[1].slice(-1) == '+') {\n        name = 'WebKit Nightly';\n        prerelease = 'alpha';\n        version = data[1].slice(0, -1);\n      }\n      // Clear incorrect browser versions.\n      else if (version == data[1] ||\n          version == (data[2] = (/\\bSafari\\/([\\d.]+\\+?)/i.exec(ua) || 0)[1])) {\n        version = null;\n      }\n      // Use the full Chrome version when available.\n      data[1] = (/\\bChrome\\/([\\d.]+)/i.exec(ua) || 0)[1];\n      // Detect Blink layout engine.\n      if (data[0] == 537.36 && data[2] == 537.36 && parseFloat(data[1]) >= 28 && layout == 'WebKit') {\n        layout = ['Blink'];\n      }\n      // Detect JavaScriptCore.\n      // http://stackoverflow.com/questions/6768474/how-can-i-detect-which-javascript-engine-v8-or-jsc-is-used-at-runtime-in-androi\n      if (!useFeatures || (!likeChrome && !data[1])) {\n        layout && (layout[1] = 'like Safari');\n        data = (data = data[0], data < 400 ? 1 : data < 500 ? 2 : data < 526 ? 3 : data < 533 ? 4 : data < 534 ? '4+' : data < 535 ? 5 : data < 537 ? 6 : data < 538 ? 7 : data < 601 ? 8 : '8');\n      } else {\n        layout && (layout[1] = 'like Chrome');\n        data = data[1] || (data = data[0], data < 530 ? 1 : data < 532 ? 2 : data < 532.05 ? 3 : data < 533 ? 4 : data < 534.03 ? 5 : data < 534.07 ? 6 : data < 534.10 ? 7 : data < 534.13 ? 8 : data < 534.16 ? 9 : data < 534.24 ? 10 : data < 534.30 ? 11 : data < 535.01 ? 12 : data < 535.02 ? '13+' : data < 535.07 ? 15 : data < 535.11 ? 16 : data < 535.19 ? 17 : data < 536.05 ? 18 : data < 536.10 ? 19 : data < 537.01 ? 20 : data < 537.11 ? '21+' : data < 537.13 ? 23 : data < 537.18 ? 24 : data < 537.24 ? 25 : data < 537.36 ? 26 : layout != 'Blink' ? '27' : '28');\n      }\n      // Add the postfix of \".x\" or \"+\" for approximate versions.\n      layout && (layout[1] += ' ' + (data += typeof data == 'number' ? '.x' : /[.+]/.test(data) ? '' : '+'));\n      // Obscure version for some Safari 1-2 releases.\n      if (name == 'Safari' && (!version || parseInt(version) > 45)) {\n        version = data;\n      }\n    }\n    // Detect Opera desktop modes.\n    if (name == 'Opera' &&  (data = /\\bzbov|zvav$/.exec(os))) {\n      name += ' ';\n      description.unshift('desktop mode');\n      if (data == 'zvav') {\n        name += 'Mini';\n        version = null;\n      } else {\n        name += 'Mobile';\n      }\n      os = os.replace(RegExp(' *' + data + '$'), '');\n    }\n    // Detect Chrome desktop mode.\n    else if (name == 'Safari' && /\\bChrome\\b/.exec(layout && layout[1])) {\n      description.unshift('desktop mode');\n      name = 'Chrome Mobile';\n      version = null;\n\n      if (/\\bOS X\\b/.test(os)) {\n        manufacturer = 'Apple';\n        os = 'iOS 4.3+';\n      } else {\n        os = null;\n      }\n    }\n    // Strip incorrect OS versions.\n    if (version && version.indexOf((data = /[\\d.]+$/.exec(os))) == 0 &&\n        ua.indexOf('/' + data + '-') > -1) {\n      os = trim(os.replace(data, ''));\n    }\n    // Add layout engine.\n    if (layout && !/\\b(?:Avant|Nook)\\b/.test(name) && (\n        /Browser|Lunascape|Maxthon/.test(name) ||\n        name != 'Safari' && /^iOS/.test(os) && /\\bSafari\\b/.test(layout[1]) ||\n        /^(?:Adobe|Arora|Breach|Midori|Opera|Phantom|Rekonq|Rock|Samsung Internet|Sleipnir|Web)/.test(name) && layout[1])) {\n      // Don't add layout details to description if they are falsey.\n      (data = layout[layout.length - 1]) && description.push(data);\n    }\n    // Combine contextual information.\n    if (description.length) {\n      description = ['(' + description.join('; ') + ')'];\n    }\n    // Append manufacturer to description.\n    if (manufacturer && product && product.indexOf(manufacturer) < 0) {\n      description.push('on ' + manufacturer);\n    }\n    // Append product to description.\n    if (product) {\n      description.push((/^on /.test(description[description.length - 1]) ? '' : 'on ') + product);\n    }\n    // Parse the OS into an object.\n    if (os) {\n      data = / ([\\d.+]+)$/.exec(os);\n      isSpecialCasedOS = data && os.charAt(os.length - data[0].length - 1) == '/';\n      os = {\n        'architecture': 32,\n        'family': (data && !isSpecialCasedOS) ? os.replace(data[0], '') : os,\n        'version': data ? data[1] : null,\n        'toString': function() {\n          var version = this.version;\n          return this.family + ((version && !isSpecialCasedOS) ? ' ' + version : '') + (this.architecture == 64 ? ' 64-bit' : '');\n        }\n      };\n    }\n    // Add browser/OS architecture.\n    if ((data = /\\b(?:AMD|IA|Win|WOW|x86_|x)64\\b/i.exec(arch)) && !/\\bi686\\b/i.test(arch)) {\n      if (os) {\n        os.architecture = 64;\n        os.family = os.family.replace(RegExp(' *' + data), '');\n      }\n      if (\n          name && (/\\bWOW64\\b/i.test(ua) ||\n          (useFeatures && /\\w(?:86|32)$/.test(nav.cpuClass || nav.platform) && !/\\bWin64; x64\\b/i.test(ua)))\n      ) {\n        description.unshift('32-bit');\n      }\n    }\n    // Chrome 39 and above on OS X is always 64-bit.\n    else if (\n        os && /^OS X/.test(os.family) &&\n        name == 'Chrome' && parseFloat(version) >= 39\n    ) {\n      os.architecture = 64;\n    }\n\n    ua || (ua = null);\n\n    /*------------------------------------------------------------------------*/\n\n    /**\n     * The platform object.\n     *\n     * @name platform\n     * @type Object\n     */\n    var platform = {};\n\n    /**\n     * The platform description.\n     *\n     * @memberOf platform\n     * @type string|null\n     */\n    platform.description = ua;\n\n    /**\n     * The name of the browser's layout engine.\n     *\n     * The list of common layout engines include:\n     * \"Blink\", \"EdgeHTML\", \"Gecko\", \"Trident\" and \"WebKit\"\n     *\n     * @memberOf platform\n     * @type string|null\n     */\n    platform.layout = layout && layout[0];\n\n    /**\n     * The name of the product's manufacturer.\n     *\n     * The list of manufacturers include:\n     * \"Apple\", \"Archos\", \"Amazon\", \"Asus\", \"Barnes & Noble\", \"BlackBerry\",\n     * \"Google\", \"HP\", \"HTC\", \"LG\", \"Microsoft\", \"Motorola\", \"Nintendo\",\n     * \"Nokia\", \"Samsung\" and \"Sony\"\n     *\n     * @memberOf platform\n     * @type string|null\n     */\n    platform.manufacturer = manufacturer;\n\n    /**\n     * The name of the browser/environment.\n     *\n     * The list of common browser names include:\n     * \"Chrome\", \"Electron\", \"Firefox\", \"Firefox for iOS\", \"IE\",\n     * \"Microsoft Edge\", \"PhantomJS\", \"Safari\", \"SeaMonkey\", \"Silk\",\n     * \"Opera Mini\" and \"Opera\"\n     *\n     * Mobile versions of some browsers have \"Mobile\" appended to their name:\n     * eg. \"Chrome Mobile\", \"Firefox Mobile\", \"IE Mobile\" and \"Opera Mobile\"\n     *\n     * @memberOf platform\n     * @type string|null\n     */\n    platform.name = name;\n\n    /**\n     * The alpha/beta release indicator.\n     *\n     * @memberOf platform\n     * @type string|null\n     */\n    platform.prerelease = prerelease;\n\n    /**\n     * The name of the product hosting the browser.\n     *\n     * The list of common products include:\n     *\n     * \"BlackBerry\", \"Galaxy S4\", \"Lumia\", \"iPad\", \"iPod\", \"iPhone\", \"Kindle\",\n     * \"Kindle Fire\", \"Nexus\", \"Nook\", \"PlayBook\", \"TouchPad\" and \"Transformer\"\n     *\n     * @memberOf platform\n     * @type string|null\n     */\n    platform.product = product;\n\n    /**\n     * The browser's user agent string.\n     *\n     * @memberOf platform\n     * @type string|null\n     */\n    platform.ua = ua;\n\n    /**\n     * The browser/environment version.\n     *\n     * @memberOf platform\n     * @type string|null\n     */\n    platform.version = name && version;\n\n    /**\n     * The name of the operating system.\n     *\n     * @memberOf platform\n     * @type Object\n     */\n    platform.os = os || {\n\n      /**\n       * The CPU architecture the OS is built for.\n       *\n       * @memberOf platform.os\n       * @type number|null\n       */\n      'architecture': null,\n\n      /**\n       * The family of the OS.\n       *\n       * Common values include:\n       * \"Windows\", \"Windows Server 2008 R2 / 7\", \"Windows Server 2008 / Vista\",\n       * \"Windows XP\", \"OS X\", \"Ubuntu\", \"Debian\", \"Fedora\", \"Red Hat\", \"SuSE\",\n       * \"Android\", \"iOS\" and \"Windows Phone\"\n       *\n       * @memberOf platform.os\n       * @type string|null\n       */\n      'family': null,\n\n      /**\n       * The version of the OS.\n       *\n       * @memberOf platform.os\n       * @type string|null\n       */\n      'version': null,\n\n      /**\n       * Returns the OS string.\n       *\n       * @memberOf platform.os\n       * @returns {string} The OS string.\n       */\n      'toString': function() { return 'null'; }\n    };\n\n    platform.parse = parse;\n    platform.toString = toStringPlatform;\n\n    if (platform.version) {\n      description.unshift(version);\n    }\n    if (platform.name) {\n      description.unshift(name);\n    }\n    if (os && name && !(os == String(os).split(' ')[0] && (os == name.split(' ')[0] || product))) {\n      description.push(product ? '(' + os + ')' : 'on ' + os);\n    }\n    if (description.length) {\n      platform.description = description.join(' ');\n    }\n    return platform;\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  // Export platform.\n  var platform = parse();\n\n  // Some AMD build optimizers, like r.js, check for condition patterns like the following:\n  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {\n    // Expose platform on the global object to prevent errors when platform is\n    // loaded by a script tag in the presence of an AMD loader.\n    // See http://requirejs.org/docs/errors.html#mismatch for more details.\n    root.platform = platform;\n\n    // Define as an anonymous module so platform can be aliased through path mapping.\n    define(function() {\n      return platform;\n    });\n  }\n  // Check for `exports` after `define` in case a build optimizer adds an `exports` object.\n  else if (freeExports && freeModule) {\n    // Export for CommonJS support.\n    forOwn(platform, function(value, key) {\n      freeExports[key] = value;\n    });\n  }\n  else {\n    // Export to the global object.\n    root.platform = platform;\n  }\n}.call(this));\n","module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {GlslContext, GlslLib, GlslLibRoutineNode, TopologicalSortGlslRoutines} from './glsl-definitions';\r\nimport {replaceInlines} from './glsl-function-inliner';\r\nimport {glslRegistry} from './glsl-registered-libs';\r\nimport {getDefaultFragShaderMain, getFragShaderPreamble} from './glsl-source';\r\nimport {ProgramInfo, VariableInfo} from './types';\r\nimport {WebGLContext} from './webgl-context';\r\n\r\n/**\r\n * Preprocessor for the additions to the GLSL language\r\n * It deals with:\r\n *  @include directives\r\n *  @inline\r\n *  Loop unrolling (not implemented)\r\n *  Macro resolution (not implemented)\r\n */\r\nexport class GlslPreprocessor {\r\n  readonly context: GlslContext;\r\n  readonly libs: {[name: string]: GlslLib} = {};\r\n  readonly glslLibRoutineDependencyGraph: {[routineName: string]: GlslLibRoutineNode} = {};\r\n\r\n  constructor(glContext: WebGLContext, programInfo: ProgramInfo) {\r\n    this.context = new GlslContext(glContext, programInfo);\r\n\r\n    // construct GlslLibs\r\n    Object.keys(glslRegistry).forEach((name: string) => {\r\n      const lib = new glslRegistry[name](this.context);\r\n      this.libs[name] = lib;\r\n    });\r\n\r\n    // construct GlslRoutineDependencyGraph\r\n    const map = this.glslLibRoutineDependencyGraph;\r\n    for (const libName in this.libs) {\r\n      const lib = this.libs[libName];\r\n      const routinesInLib = lib.getFunctions();\r\n      for (const routine in routinesInLib) {\r\n        const key = libName + '.' + routine;\r\n        let currentNode: GlslLibRoutineNode;\r\n        if (map[key]) {\r\n          currentNode = map[key];\r\n          currentNode.routineBody = routinesInLib[routine].routineBody;\r\n        } else {\r\n          currentNode = new GlslLibRoutineNode(key, routinesInLib[routine].routineBody);\r\n          map[key] = currentNode;\r\n        }\r\n        const dependencies = routinesInLib[routine].dependencies;\r\n        if (dependencies) {\r\n          for (let i = 0; i < dependencies.length; ++i) {\r\n            if (!map[dependencies[i]]) {\r\n              const node = new GlslLibRoutineNode(dependencies[i]);\r\n              map[dependencies[i]] = node;\r\n              currentNode.addDependency(node);\r\n            } else {\r\n              currentNode.addDependency(map[dependencies[i]]);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  preprocess(): string {\r\n    const programInfo = this.context.programInfo;\r\n    let source = programInfo.shaderSource;\r\n\r\n    // append main() function\r\n    if (!this.context.programInfo.hasMain) {\r\n      source = `${source}\r\n      ${getDefaultFragShaderMain(this.context.glContext.version, programInfo.outputLayout.shape.length)}`;\r\n    }\r\n    // replace inlines\r\n    source = replaceInlines(source);\r\n\r\n    // concat final source string\r\n    return `${getFragShaderPreamble(this.context.glContext.version)}\r\n    ${this.getUniforms(programInfo.samplers, programInfo.variables)}\r\n    ${this.getImports(source)}\r\n    ${source}`;\r\n  }\r\n\r\n  protected getImports(script: string): string {\r\n    const routinesIncluded = this.selectGlslLibRoutinesToBeIncluded(script);\r\n\r\n    if (routinesIncluded.length === 0) {\r\n      return '';\r\n    }\r\n\r\n    let routines = ``;\r\n    for (let i = 0; i < routinesIncluded.length; ++i) {\r\n      if (routinesIncluded[i].routineBody) {\r\n        routines += routinesIncluded[i].routineBody + `\\n`;\r\n      } else {\r\n        throw new Error(`Missing body for the Glsl Library routine: ${routinesIncluded[i].name}`);\r\n      }\r\n    }\r\n\r\n    return routines;\r\n  }\r\n  private selectGlslLibRoutinesToBeIncluded(script: string): GlslLibRoutineNode[] {\r\n    const nodes: GlslLibRoutineNode[] = [];\r\n\r\n    Object.keys(this.glslLibRoutineDependencyGraph).forEach(classAndRoutine => {\r\n      const routine = classAndRoutine.split('.')[1];\r\n      if (script.indexOf(routine) !== -1) {\r\n        nodes.push(this.glslLibRoutineDependencyGraph[classAndRoutine]);\r\n      }\r\n    });\r\n\r\n    return TopologicalSortGlslRoutines.returnOrderedNodes(nodes);\r\n  }\r\n\r\n  protected getUniforms(samplers?: string[], variables?: VariableInfo[]): string {\r\n    const uniformLines: string[] = [];\r\n    if (samplers) {\r\n      for (const sampler of samplers) {\r\n        uniformLines.push(`uniform sampler2D ${sampler};`);\r\n      }\r\n    }\r\n    if (variables) {\r\n      for (const variable of variables) {\r\n        uniformLines.push(\r\n            `uniform ${variable.type} ${variable.name}${variable.arrayLength ? `[${variable.arrayLength}]` : ''};`);\r\n      }\r\n    }\r\n    return uniformLines.join('\\n');\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nconst INLINE_FUNC_DEF_REGEX: RegExp =\r\n    /@inline[\\s\\n\\r]+(\\w+)[\\s\\n\\r]+([0-9a-zA-Z_]+)\\s*\\(([^)]*)\\)\\s*{(([^}]|[\\n\\r])*)}/gm;\r\nconst FUNC_CALL_REGEX = '(\\\\w+)?\\\\s+([_0-9a-zA-Z]+)\\\\s+=\\\\s+__FUNC__\\\\((.*)\\\\)\\\\s*;';\r\n/**\r\n * GLSL preprocessor responsible for resolving @inline directives\r\n */\r\nexport function replaceInlines(script: string): string {\r\n  const inlineDefs: {[name: string]: {params: Array<{type: string, name: string}|null>, body: string}} = {};\r\n  let match;\r\n  while ((match = INLINE_FUNC_DEF_REGEX.exec(script)) !== null) {\r\n    const params = match[3]\r\n                       .split(',')\r\n                       .map(s => {\r\n                         const tokens = s.trim().split(' ');\r\n                         if (tokens && tokens.length === 2) {\r\n                           return {type: tokens[0], name: tokens[1]};\r\n                         }\r\n                         return null;\r\n                       })\r\n                       .filter(v => v !== null);\r\n    inlineDefs[match[2]] = {params, body: match[4]};\r\n  }\r\n  for (const name in inlineDefs) {\r\n    const regexString = FUNC_CALL_REGEX.replace('__FUNC__', name);\r\n    const regex = new RegExp(regexString, 'gm');\r\n    while ((match = regex.exec(script)) !== null) {\r\n      const type = match[1];\r\n      const variable = match[2];\r\n      const params = match[3].split(',');\r\n      const declLine = (type) ? `${type} ${variable};` : '';\r\n      let newBody: string = inlineDefs[name].body;\r\n      let paramRedecLine = '';\r\n      inlineDefs[name].params.forEach((v, i) => {\r\n        if (v) {\r\n          paramRedecLine += `${v.type} ${v.name} = ${params[i]};\\n`;\r\n        }\r\n      });\r\n      newBody = `${paramRedecLine}\\n ${newBody}`;\r\n      newBody = newBody.replace('return', `${variable} = `);\r\n      const replacement = `\r\n      ${declLine}\r\n      {\r\n        ${newBody}\r\n      }\r\n      `;\r\n      script = script.replace(match[0], replacement);\r\n    }\r\n  }\r\n  script = script.replace(INLINE_FUNC_DEF_REGEX, '');\r\n  return script;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {CoordsGlslLib} from './glsl-coordinate-lib';\r\nimport {GlslContext, GlslLib} from './glsl-definitions';\r\nimport {EncodingGlslLib} from './glsl-encoding-lib.';\r\nimport {FragColorGlslLib} from './glsl-fragcolor-lib';\r\nimport {ShapeUtilsGlslLib} from './glsl-shape-utils-lib';\r\nimport {VecGlslLib} from './glsl-vec-lib';\r\n\r\nexport const glslRegistry: {[name: string]: new (context: GlslContext) => GlslLib} = {\r\n  'encoding': EncodingGlslLib,\r\n  'fragcolor': FragColorGlslLib,\r\n  'vec': VecGlslLib,\r\n  'shapeUtils': ShapeUtilsGlslLib,\r\n  'coordinates': CoordsGlslLib,\r\n  //  'arrays': ArrayGlslSLib\r\n};\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\r\nimport {getGlsl} from './glsl-source';\r\n\r\n/**\r\n * GLSL Library responsible for data types and routines for manipulating\r\n * coordinates and mapping to/from tensor indices\r\n */\r\nexport class CoordsGlslLib extends GlslLib {\r\n  returnType: string;\r\n\r\n  constructor(context: GlslContext) {\r\n    super(context);\r\n  }\r\n  getFunctions(): {[name: string]: GlslLibRoutine;} {\r\n    return {...this.offsetToCoords(), ...this.coordsToOffset(), ...this.toVec(), ...this.valueFrom()};\r\n  }\r\n  getCustomTypes() {\r\n    return {};\r\n  }\r\n  /**\r\n   * Produces a function that can map from\r\n   * 2D normalzied coordinates (s,t) to a flat offset\r\n   */\r\n  protected offsetToCoords(): {[name: string]: GlslLibRoutine} {\r\n    const funcName = `offsetToCoords`;\r\n    return {\r\n      offsetToCoords: new GlslLibRoutine(`\r\n      vec2 ${funcName}(int offset, int width, int height) {\r\n        int t = offset / width;\r\n        int s = offset - t*width;\r\n        vec2 coords = (vec2(s,t) + vec2(0.5,0.5)) / vec2(width, height);\r\n        return coords;\r\n      }\r\n      `)\r\n    };\r\n  }\r\n  /**\r\n   * Produces a function that can map from\r\n   * 2D normalzied coordinates (s,t) to a flat offset\r\n   */\r\n  protected coordsToOffset(): {[name: string]: GlslLibRoutine} {\r\n    const funcName = `coordsToOffset`;\r\n    return {\r\n      coordsToOffset: new GlslLibRoutine(`\r\n      int ${funcName}(vec2 coords, int width, int height) {\r\n        float s = coords.s * float(width);\r\n        float t = coords.t * float(height);\r\n        int offset = int(t) * width + int(s);\r\n        return offset;\r\n      }\r\n      `)\r\n    };\r\n  }\r\n  /**\r\n   * This is the main function to map from the given texture coordiantes (s,t)\r\n   * to logical indices for the output\r\n   * There will only be one single variation of this\r\n   * Also see coordsToOffset and offsetToIndices for input-specific versions\r\n   */\r\n  protected toVec(): {[name: string]: GlslLibRoutine;} {\r\n    const output = this.context.programInfo.outputLayout;\r\n    const rank = output.shape.length;\r\n    const strides = output.strides;\r\n    const xScale = output.width;\r\n    const yScale = output.height;\r\n\r\n    const stridesBlock = [];\r\n    for (let i = 0; i < rank - 1; ++i) {\r\n      stridesBlock.push(`\r\n        c[${i}] = offset / ${strides[i]};`);\r\n      stridesBlock.push(`\r\n        offset -= c[${i}] * ${strides[i]};`);\r\n    }\r\n    stridesBlock.push(`\r\n        c[${rank - 1}] = offset;`);\r\n    const body = `\r\n      void toVec(vec2 texCoords, out int c[${rank}]) {\r\n        int offset = coordsToOffset(texCoords, ${xScale}, ${yScale});\r\n        ${stridesBlock.join('')}\r\n      }\r\n      void toVec(int offset, out int c[${rank}]) {\r\n        ${stridesBlock.join('')}\r\n      }\r\n    `;\r\n    return {toVec: new GlslLibRoutine(body, ['coordinates.coordsToOffset'])};\r\n  }\r\n  /**\r\n   * These are value getter functions generated for each input\r\n   * Each function is hardwired to the name and dimensions of the input\r\n   * An '_T' variation is also produced which accesses values as if the\r\n   * input was transposed\r\n   */\r\n  protected valueFrom(): {[name: string]: GlslLibRoutine} {\r\n    const programInfo = this.context.programInfo;\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    this.context.programInfo.samplers.forEach((name, i) => {\r\n      const layout = programInfo.inputLayouts[i];\r\n      const shape = layout.shape;\r\n      const rank = shape.length;\r\n      let funcName = `_${name}`;\r\n      result[funcName] = new GlslLibRoutine(\r\n          this.getValueFromSingle(name, rank, layout.width, layout.height, false),\r\n          [`shapeUtils.indicesToOffset${funcName}`, `coordinates.offsetToCoords`, `fragcolor.getColorAsFloat`]);\r\n      funcName = funcName + '_T';\r\n      result[funcName] = new GlslLibRoutine(\r\n          this.getValueFromSingle(name, rank, layout.width, layout.height, true),\r\n          [`shapeUtils.indicesToOffset${funcName}`, `coordinates.offsetToCoords`, `fragcolor.getColorAsFloat`]);\r\n    });\r\n    return result;\r\n  }\r\n  /**\r\n   * Produces one value getter function for the name and rank given\r\n   * If a transpose is set proper offsetToCoords mapping will be used\r\n   * @param name name of the function\r\n   * @param rank rank of the input\r\n   * @param transpose whether or not should generate a transpose variation\r\n   */\r\n  protected getValueFromSingle(varName: string, rank: number, width: number, height: number, transpose: boolean):\r\n      string {\r\n    let name = `_${varName}`;\r\n    if (transpose) {\r\n      name = name + '_T';\r\n    }\r\n    const glsl = getGlsl(this.context.glContext.version);\r\n    return `\r\n        float ${name}(int m[${rank}]) {\r\n          int offset = indicesToOffset${name}(m);\r\n          vec2 coords = offsetToCoords(offset, ${width}, ${height});\r\n          float value = getColorAsFloat(${glsl.texture2D}(${varName}, coords));\r\n          return value;\r\n        }\r\n        `;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\r\n\r\n/**\r\n * This GLSL library handles routines converting\r\n * float32 to/from Unsigned byte or float 16\r\n */\r\nexport class EncodingGlslLib extends GlslLib {\r\n  constructor(context: GlslContext) {\r\n    super(context);\r\n  }\r\n  getFunctions(): {[name: string]: GlslLibRoutine;} {\r\n    return {...this.encodeFloat32(), ...this.decodeFloat32()};\r\n  }\r\n  getCustomTypes(): {[name: string]: string;} {\r\n    return {};\r\n  }\r\n  protected encodeFloat32(): {[name: string]: GlslLibRoutine} {\r\n    return {\r\n      encode: new GlslLibRoutine(`highp vec4 encode(highp float f) {\r\n        return vec4(f, 0.0, 0.0, 0.0);\r\n      }\r\n        `)\r\n    };\r\n  }\r\n  protected decodeFloat32(): {[name: string]: GlslLibRoutine} {\r\n    return {\r\n      decode: new GlslLibRoutine(`highp float decode(highp vec4 rgba) {\r\n        return rgba.r;\r\n      }\r\n        `)\r\n    };\r\n  }\r\n  /**\r\n   * returns the routine to encode encode a 32bit float to a vec4 (of unsigned bytes)\r\n   * @credit: https://stackoverflow.com/questions/7059962/how-do-i-convert-a-vec4-rgba-value-to-a-float\r\n   */\r\n  protected encodeUint8(): {[name: string]: GlslLibRoutine} {\r\n    const endianness = EncodingGlslLib.isLittleEndian() ? 'rgba.rgba=rgba.abgr;' : '';\r\n    return {\r\n      encode: new GlslLibRoutine(`\r\n      highp vec4 encode(highp float f) {\r\n        highp float F = abs(f);\r\n        highp float Sign = step(0.0,-f);\r\n        highp float Exponent = floor(log2(F));\r\n        highp float Mantissa = (exp2(- Exponent) * F);\r\n        Exponent = floor(log2(F) + 127.0) + floor(log2(Mantissa));\r\n        highp vec4 rgba;\r\n        rgba[0] = 128.0 * Sign  + floor(Exponent*exp2(-1.0));\r\n        rgba[1] = 128.0 * mod(Exponent,2.0) + mod(floor(Mantissa*128.0),128.0);\r\n        rgba[2] = floor(mod(floor(Mantissa*exp2(23.0 -8.0)),exp2(8.0)));\r\n        rgba[3] = floor(exp2(23.0)*mod(Mantissa,exp2(-15.0)));\r\n        ${endianness}\r\n        rgba = rgba / 255.0; // values need to be normalized to [0,1]\r\n        return rgba;\r\n    }\r\n        `)\r\n    };\r\n  }\r\n  /**\r\n   * returns the routine to encode a vec4 of unsigned bytes to float32\r\n   * @credit: https://stackoverflow.com/questions/7059962/how-do-i-convert-a-vec4-rgba-value-to-a-float\r\n   */\r\n  protected decodeUint8(): {[name: string]: GlslLibRoutine} {\r\n    const endianness = EncodingGlslLib.isLittleEndian() ? 'rgba.rgba=rgba.abgr;' : '';\r\n    return {\r\n      decode: new GlslLibRoutine(`\r\n        highp float decode(highp vec4 rgba) {\r\n          rgba = rgba * 255.0; // values need to be de-normalized from [0,1] to [0,255]\r\n          ${endianness}\r\n          highp float Sign = 1.0 - step(128.0,rgba[0])*2.0;\r\n          highp float Exponent = 2.0 * mod(rgba[0],128.0) + step(128.0,rgba[1]) - 127.0;\r\n          highp float Mantissa = mod(rgba[1],128.0)*65536.0 + rgba[2]*256.0 +rgba[3] + float(0x800000);\r\n          highp float Result =  Sign * exp2(Exponent) * (Mantissa * exp2(-23.0 ));\r\n          return Result;\r\n      }\r\n        `)\r\n    };\r\n  }\r\n  /**\r\n   * Determines if the machine is little endian or not\r\n   * @credit: https://gist.github.com/TooTallNate/4750953\r\n   */\r\n  static isLittleEndian(): boolean {\r\n    const b = new ArrayBuffer(4);\r\n    const a = new Uint32Array(b);\r\n    const c = new Uint8Array(b);\r\n    a[0] = 0xdeadbeef;\r\n    if (c[0] === 0xef) {\r\n      return true;\r\n    }\r\n    if (c[0] === 0xde) {\r\n      return false;\r\n    }\r\n    throw new Error('unknown endianness');\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\r\nimport {getGlsl} from './glsl-source';\r\n\r\n/**\r\n * This GLSL library handles routines around reading a texlet and writing to it\r\n * Reading and writing could be more than just dealing with one channel\r\n * It may require encoding/decoding to/from 4 channels into one\r\n */\r\nexport class FragColorGlslLib extends GlslLib {\r\n  constructor(context: GlslContext) {\r\n    super(context);\r\n  }\r\n  getFunctions(): {[name: string]: GlslLibRoutine;} {\r\n    return {...this.setFragColor(), ...this.getColorAsFloat()};\r\n  }\r\n  getCustomTypes(): {[name: string]: string;} {\r\n    return {};\r\n  }\r\n  protected setFragColor(): {[name: string]: GlslLibRoutine} {\r\n    const glsl = getGlsl(this.context.glContext.version);\r\n    return {\r\n      setFragColor: new GlslLibRoutine(\r\n          `\r\n        void setFragColor(float value) {\r\n            ${glsl.output} = encode(value);\r\n        }\r\n        `,\r\n          ['encoding.encode'])\r\n    };\r\n  }\r\n  protected getColorAsFloat(): {[name: string]: GlslLibRoutine} {\r\n    return {\r\n      getColorAsFloat: new GlslLibRoutine(\r\n          `\r\n        float getColorAsFloat(vec4 color) {\r\n            return decode(color);\r\n        }\r\n        `,\r\n          ['encoding.decode'])\r\n    };\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\r\n\r\n/**\r\n * GLSL Library responsible for data types and routines for manipulating\r\n * coordinates and mapping to/from tensor indices\r\n */\r\nexport class ShapeUtilsGlslLib extends GlslLib {\r\n  constructor(context: GlslContext) {\r\n    super(context);\r\n  }\r\n  getFunctions(): {[name: string]: GlslLibRoutine;} {\r\n    return {\r\n      ...this.bcastIndex(),\r\n      ...this.bcastMatmulIndex(),\r\n      ...this.offsetToIndices(),\r\n      ...this.indicesToOffset(),\r\n      ...this.incrementIndices()\r\n    };\r\n  }\r\n  getCustomTypes() {\r\n    return {};\r\n  }\r\n  protected bcastIndex(): {[name: string]: GlslLibRoutine;} {\r\n    const programInfo = this.context.programInfo;\r\n    const outputRank = programInfo.outputLayout.shape.length;\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    this.context.programInfo.samplers.forEach((name, i) => {\r\n      const shape = programInfo.inputLayouts[i].shape;\r\n      if (shape.length <= outputRank) {\r\n        const rank = shape.length;\r\n        const dimOffset = outputRank - rank;\r\n        const funcName = `bcastIndices_${name}`;\r\n        let block = '';\r\n        for (let i = 0; i < rank; ++i) {\r\n          block += `\r\n          realIndices[${i}] = int( mod(float(bcastedIndices[${dimOffset + i}]), ${shape[i]}.0) );\r\n          `;\r\n        }\r\n        const body = `\r\n        void ${funcName} (int bcastedIndices[${outputRank}], out int realIndices[${rank}]) {\r\n          ${block}\r\n        }\r\n        `;\r\n        result[funcName] = new GlslLibRoutine(body);\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n  protected bcastMatmulIndex(): {[name: string]: GlslLibRoutine;} {\r\n    const programInfo = this.context.programInfo;\r\n    const outputRank = programInfo.outputLayout.shape.length;\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    this.context.programInfo.samplers.forEach((name, i) => {\r\n      const shape = programInfo.inputLayouts[i].shape;\r\n      if (!(shape.length < 2 || shape.length > outputRank)) {\r\n        const rank = shape.length;\r\n        const dimOffset = outputRank - rank;\r\n        const funcName = `bcastMatmulIndices_${name}`;\r\n        let block = '';\r\n        for (let i = 0; i < rank - 2; ++i) {\r\n          block += `\r\n          realIndices[${i}] = int( mod(float(bcastedIndices[${dimOffset + i}]), ${shape[i]}.0) );\r\n          `;\r\n        }\r\n        const body = `\r\n        void ${funcName}(int bcastedIndices[${outputRank}], out int realIndices[${rank}]) {\r\n          ${block}\r\n          realIndices[${rank - 1}] = bcastedIndices[${outputRank - 1}];\r\n          realIndices[${rank - 2}] = bcastedIndices[${outputRank - 2}];\r\n        }\r\n        `;\r\n        result[funcName] = new GlslLibRoutine(body);\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n  protected indicesToOffset(): {[name: string]: GlslLibRoutine;} {\r\n    const programInfo = this.context.programInfo;\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    this.context.programInfo.samplers.forEach((name, i) => {\r\n      const shape = programInfo.inputLayouts[i].shape;\r\n      const strides = programInfo.inputLayouts[i].strides;\r\n      const rank = shape.length;\r\n      let funcName = `indicesToOffset_${name}`;\r\n      result[funcName] = new GlslLibRoutine(ShapeUtilsGlslLib.indexToOffsetSingle(funcName, rank, strides));\r\n      funcName = `indicesToOffset_${name}_T`;\r\n      result[funcName] =\r\n          new GlslLibRoutine(ShapeUtilsGlslLib.indexToOffsetSingle(funcName, rank, strides.slice().reverse()));\r\n    });\r\n    return result;\r\n  }\r\n  static indexToOffsetSingle(name: string, rank: number, strides: ReadonlyArray<number>): string {\r\n    let block = '';\r\n    for (let i = rank - 1; i >= 0; --i) {\r\n      block += `\r\n        offset += indices[${i}] * ${strides[i]};\r\n        `;\r\n    }\r\n    return `\r\n      int ${name}(int indices[${rank}]) {\r\n        int offset = 0;\r\n        ${block}\r\n        return offset;\r\n      }\r\n      `;\r\n  }\r\n  protected offsetToIndices(): {[name: string]: GlslLibRoutine;} {\r\n    const programInfo = this.context.programInfo;\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    this.context.programInfo.samplers.forEach((name, i) => {\r\n      const shape = programInfo.inputLayouts[i].shape;\r\n      const strides = programInfo.inputLayouts[i].strides;\r\n      const rank = shape.length;\r\n      let funcName = `offsetToIndices_${name}`;\r\n      result[funcName] = new GlslLibRoutine(ShapeUtilsGlslLib.offsetToIndicesSingle(funcName, rank, strides));\r\n      funcName = `offsetToIndices_${name}_T`;\r\n      result[funcName] =\r\n          new GlslLibRoutine(ShapeUtilsGlslLib.offsetToIndicesSingle(funcName, rank, strides.slice().reverse()));\r\n    });\r\n    return result;\r\n  }\r\n  static offsetToIndicesSingle(name: string, rank: number, strides: ReadonlyArray<number>): string {\r\n    const stridesBlock = [];\r\n    for (let i = 0; i < rank - 1; ++i) {\r\n      stridesBlock.push(`\r\n      indices[${i}] = offset / ${strides[i]};`);\r\n      stridesBlock.push(`\r\n        offset -= indices[${i}] * ${strides[i]};`);\r\n    }\r\n    stridesBlock.push(`\r\n      indices[${rank - 1}] = offset;`);\r\n    return `\r\n      void ${name}(int offset, out int indices[${rank}]) {\r\n        ${stridesBlock.join('')}\r\n      }\r\n      `;\r\n  }\r\n  protected incrementIndices(): {[name: string]: GlslLibRoutine;} {\r\n    const programInfo = this.context.programInfo;\r\n    const result: {[name: string]: GlslLibRoutine} = {};\r\n    this.context.programInfo.samplers.forEach((name, i) => {\r\n      const shape = programInfo.inputLayouts[i].shape;\r\n      const rank = shape.length;\r\n      const funcName = `incrementIndices_${name}`;\r\n      let shapeInit = '';\r\n      for (let i = 0; i < rank; ++i) {\r\n        shapeInit += `\r\n        shape[${i}] = ${shape[i]};`;\r\n      }\r\n      const body = `\r\n        void ${funcName}(int axis, out int indices[${rank}]) {\r\n          int shape[${rank}];\r\n          ${shapeInit};\r\n          for(int i = ${rank} -1 ; i >= 0; --i) {\r\n            if(i > axis) continue;\r\n            indices[i] += 1;\r\n            if(indices[i] < shape[i]) {\r\n              break;\r\n            }\r\n            indices[i] = 0;\r\n          }\r\n        }\r\n        `;\r\n      result[funcName] = new GlslLibRoutine(body);\r\n    });\r\n    return result;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {GlslContext, GlslLib, GlslLibRoutine} from './glsl-definitions';\r\n\r\n/**\r\n * GLSL Library responsible for vec routines\r\n * Vec is an varible length int array. The length is fixed at the time of\r\n * generating the library functions from the dimensions of the output.\r\n */\r\nexport class VecGlslLib extends GlslLib {\r\n  constructor(context: GlslContext) {\r\n    super(context);\r\n  }\r\n  getCustomTypes(): {[name: string]: string;} {\r\n    return {};\r\n  }\r\n  getFunctions(): {[name: string]: GlslLibRoutine;} {\r\n    return {...this.binaryVecFunctions(), ...this.copyVec(), ...this.setVecItem(), ...this.getVecItem()};\r\n  }\r\n  protected binaryVecFunctions(): {[name: string]: GlslLibRoutine;} {\r\n    const outputLayout = this.context.programInfo.outputLayout;\r\n    const rank = outputLayout.shape.length;\r\n    const nameOp: {[name: string]: string;} = {add: '+=', sub: '-=', mul: '*=', div: '/='};\r\n    const result: {[name: string]: GlslLibRoutine;} = {};\r\n    for (const name in nameOp) {\r\n      const fname = `${name}Vec`;\r\n      let assignmentBlock = '';\r\n      for (let i = 0; i < rank; ++i) {\r\n        assignmentBlock += `\r\n          dest[${i}] ${nameOp[name]} src[${i}];\r\n          `;\r\n      }\r\n      const body = `\r\n        void ${fname}(int src[${rank}], out int dest[${rank}]) {\r\n          ${assignmentBlock}\r\n        }\r\n        `;\r\n      result[fname] = new GlslLibRoutine(body);\r\n    }\r\n\r\n    return result;\r\n  }\r\n  protected copyVec(): {[name: string]: GlslLibRoutine;} {\r\n    const outputLayout = this.context.programInfo.outputLayout;\r\n    const rank = outputLayout.shape.length;\r\n    let assignmentBlock = '';\r\n    for (let i = 0; i < rank; ++i) {\r\n      assignmentBlock += `\r\n        dest[${i}] = src[${i}];\r\n        `;\r\n    }\r\n    const body = `\r\n      void copyVec(int src[${rank}], out int dest[${rank}]) {\r\n        ${assignmentBlock}\r\n      }\r\n      `;\r\n    return {copyVec: new GlslLibRoutine(body)};\r\n  }\r\n\r\n  protected setVecItem(): {[name: string]: GlslLibRoutine;} {\r\n    const outputLayout = this.context.programInfo.outputLayout;\r\n    const rank = outputLayout.shape.length;\r\n    let block = `\r\n        if(index < 0)\r\n            index =${rank} + index;\r\n        if (index == 0)\r\n            m[0] = value;\r\n        `;\r\n    for (let i = 1; i < rank - 1; ++i) {\r\n      block += `\r\n        else if (index == ${i})\r\n            m[${i}] = value;\r\n            `;\r\n    }\r\n    block += `\r\n        else\r\n            m[${rank - 1}] = value;\r\n        `;\r\n    const body = `\r\n      void setVecItem(out int m[${rank}], int index, int value) {\r\n        ${block}\r\n      }\r\n        `;\r\n    return {setVecItem: new GlslLibRoutine(body)};\r\n  }\r\n  protected getVecItem(): {[name: string]: GlslLibRoutine;} {\r\n    const outputLayout = this.context.programInfo.outputLayout;\r\n    const rank = outputLayout.shape.length;\r\n    let block = `\r\n        if(index < 0)\r\n            index = ${rank} + index;\r\n        if (index == 0)\r\n            return m[0];\r\n      `;\r\n    for (let i = 1; i < rank - 1; ++i) {\r\n      block += `\r\n        else if (index == ${i})\r\n            return m[${i}];\r\n      `;\r\n    }\r\n    block += `\r\n        else\r\n            return m[${rank - 1}];\r\n        `;\r\n    const body = `\r\n      int getVecItem(int m[${rank}], int index) {\r\n        ${block}\r\n      }\r\n    `;\r\n    return {getVecItem: new GlslLibRoutine(body)};\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Logger} from '../../instrument';\r\n\r\n/** Layout preferences */\r\nexport interface WidthHeightPrefs {\r\n  breakAxis: number;\r\n}\r\n/**\r\n * TextureLayoutStrategy is an abstraction for different plans\r\n * for mapping n-dimensional arrays to 2D textures (and back)\r\n */\r\nexport interface TextureLayoutStrategy {\r\n  computeTextureWH(shape: ReadonlyArray<number>, prefs?: WidthHeightPrefs): [number, number];\r\n}\r\n\r\n/**\r\n * This strategy try to find the minimal max(W,H) that fulfills (W * H == totalSize)\r\n */\r\nexport class AlwaysKeepOriginalSizeStrategy implements TextureLayoutStrategy {\r\n  constructor(public maxTextureSize: number) {}\r\n  computeTextureWH(shape: ReadonlyArray<number>, prefs?: WidthHeightPrefs): [number, number] {\r\n    // scalar tensor\r\n    if (shape.length === 0) {\r\n      return [1, 1];\r\n    }\r\n    const maxTextureSize = this.maxTextureSize;\r\n    if (prefs) {\r\n      // check to see if dims fit\r\n      const wsize = prefs.breakAxis >= shape.length ? 1 : shape.slice(prefs.breakAxis).reduce((a, b) => a * b);\r\n      const hsize = prefs.breakAxis <= 0 ? 1 : shape.slice(0, prefs.breakAxis).reduce((a, b) => a * b);\r\n      if (wsize > maxTextureSize || hsize > maxTextureSize) {\r\n        // ignore preferences\r\n        // continue with default layout\r\n        Logger.verbose(\r\n            'TextureLayout',\r\n            `Given width/height preferences were unattainable: shape:${shape}, breakAxis:${prefs.breakAxis}`);\r\n      } else {\r\n        return [wsize, hsize];\r\n      }\r\n    }\r\n    const totalSize = shape.reduce((a, b) => a * b);\r\n\r\n    let width = Math.floor(Math.sqrt(totalSize));\r\n\r\n    for (; width < maxTextureSize && width < totalSize; width++) {\r\n      if (totalSize % width === 0) {\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (width >= maxTextureSize || totalSize % width !== 0) {\r\n      throw new Error(`The given dimensions are outside this GPU\\'s boundaries: ${shape}`);\r\n    }\r\n    return [width, totalSize / width];\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Logger, Profiler} from '../../instrument';\r\nimport {Tensor} from '../../tensor';\r\n\r\nimport {Encoder} from './texture-data-encoder';\r\nimport {TextureLayoutStrategy} from './texture-layout-strategy';\r\nimport {TextureData, TextureLayout} from './types';\r\nimport {WebGLContext} from './webgl-context';\r\n\r\nexport interface TextureManagerConfig {\r\n  reuseTextures?: boolean;\r\n}\r\n\r\n/**\r\n * TextureManager is the mainly responsible for caching Textures\r\n * Textures are cached in 2 levels:\r\n *   1. the texures which are associated with a dataId (from Tensor)\r\n *    Caching these is crucial to performance. These are In-use Textures\r\n *   2. textures which are not in use by any current ProgramInfo/Tensor\r\n *     These are called Free Textures\r\n * TextureManager is also used to help creating textures. For this it\r\n * uses WebGLContext and TextureLayoutStrategy\r\n */\r\nexport class TextureManager {\r\n  private readonly inUseTextures: Map<string, WebGLTexture[]>;\r\n  private readonly idleTextures: Map<string, WebGLTexture[]>;\r\n  private readonly textureLookup: Map<WebGLTexture, string>;\r\n\r\n  constructor(\r\n      public glContext: WebGLContext, public layoutStrategy: TextureLayoutStrategy, public profiler: Readonly<Profiler>,\r\n      private config: TextureManagerConfig) {\r\n    if (config.reuseTextures) {\r\n      this.inUseTextures = new Map();\r\n      this.idleTextures = new Map();\r\n      this.textureLookup = new Map();\r\n    }\r\n  }\r\n  createTextureFromLayout(\r\n      dataType: Tensor.DataType, layout: TextureLayout, data?: Tensor.NumberType, usage?: Encoder.Usage) {\r\n    const textureDataType = this.toEncoderType(dataType);\r\n\r\n    const encoder = this.glContext.getEncoder(textureDataType, layout.channels || 1, usage);\r\n\r\n    let key: string|undefined;\r\n    let inUseTextures: WebGLTexture[]|undefined;\r\n    if (this.config.reuseTextures) {\r\n      key = `${layout.width}x${layout.height}_${encoder.format}_${encoder.internalFormat}_${encoder.textureType}`;\r\n      inUseTextures = this.inUseTextures.get(key);\r\n      if (!inUseTextures) {\r\n        inUseTextures = [];\r\n        this.inUseTextures.set(key, inUseTextures);\r\n      }\r\n\r\n      const idleTextures = this.idleTextures.get(key);\r\n      if (idleTextures && idleTextures.length > 0) {\r\n        const texture = idleTextures.pop()!;\r\n        inUseTextures.push(texture);\r\n        if (usage === Encoder.Usage.UploadOnly) {\r\n          this.glContext.updateTexture(\r\n              texture, layout.width, layout.height, encoder, this.toTextureData(dataType, data)!);\r\n        }\r\n        return texture;\r\n      }\r\n    }\r\n\r\n    Logger.verbose('TextureManager', `Creating new texture of size ${layout.width}x${layout.height}`);\r\n    const texture =\r\n        this.glContext.allocateTexture(layout.width, layout.height, encoder, this.toTextureData(dataType, data));\r\n\r\n    if (this.config.reuseTextures) {\r\n      inUseTextures!.push(texture);\r\n      this.textureLookup.set(texture, key!);\r\n    }\r\n    return texture;\r\n  }\r\n  readTexture(td: TextureData, dataType: Tensor.DataType, channels?: number): Tensor.NumberType {\r\n    if (!channels) {\r\n      channels = 1;\r\n    }\r\n    return this.profiler.event('backend', 'TextureManager.readTexture', () => {\r\n      const dataSize = td.shape.reduce((a, b) => a * b) * channels!;\r\n      const data = this.glContext.readTexture(\r\n          td.texture, td.width, td.height, dataSize, this.toEncoderType(dataType), channels!);\r\n      return this.toTensorData(dataType, data);\r\n    });\r\n  }\r\n  readUint8TextureAsFloat(td: TextureData): Float32Array {\r\n    return this.profiler.event('backend', 'TextureManager.readUint8TextureAsFloat', () => {\r\n      const dataSize = td.shape.reduce((a, b) => a * b);\r\n      const data = this.glContext.readTexture(td.texture, td.width, td.height, dataSize * 4, 'byte', 4);\r\n      return new Float32Array(data.buffer, data.byteOffset, dataSize);\r\n    });\r\n  }\r\n  releaseTexture(textureData: TextureData, deleteTexture?: boolean): void {\r\n    let key: string|undefined;\r\n    if (this.config.reuseTextures) {\r\n      key = this.textureLookup.get(textureData.texture);\r\n      if (key) {\r\n        if (deleteTexture) {\r\n          this.textureLookup.delete(key);\r\n        }\r\n        const inUseTextures = this.inUseTextures.get(key);\r\n        if (inUseTextures) {\r\n          const index = inUseTextures.indexOf(textureData.texture);\r\n          if (index !== -1) {\r\n            inUseTextures.splice(index, 1);\r\n            let idleTextures = this.idleTextures.get(key);\r\n            if (!idleTextures) {\r\n              idleTextures = [];\r\n              this.idleTextures.set(key, idleTextures);\r\n            }\r\n            idleTextures.push(textureData.texture);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (!key || deleteTexture) {\r\n      Logger.verbose('TextureManager', `Deleting texture of size ${textureData.width}x${textureData.height}`);\r\n      this.glContext.deleteTexture(textureData.texture);\r\n    }\r\n  }\r\n  toTensorData(dataType: Tensor.DataType, data: Encoder.DataArrayType): Tensor.NumberType {\r\n    return (data.constructor === Float32Array) ? data as Float32Array : new Float32Array(data);\r\n    /*\r\n    switch (dataType) {\r\n      case 'int16':\r\n        return new Int16Array(data);\r\n      case 'int32':\r\n        return new Int32Array(data);\r\n      case 'int8':\r\n        return new Int8Array(data);\r\n      case 'uint16':\r\n        return new Uint16Array(data);\r\n      case 'uint32':\r\n        return data as Uint32Array;\r\n      case 'uint8':\r\n      case 'bool':\r\n        return data as Uint8Array;\r\n      case 'float32':\r\n        return data as Float32Array;\r\n      case 'float64':\r\n        return new Float64Array(data);\r\n      default:\r\n        throw new Error(`TensorData type ${dataType} is not supported`);\r\n    }\r\n    */\r\n  }\r\n  toTextureData(dataType: Tensor.DataType, data: Tensor.NumberType|undefined): Encoder.DataArrayType|undefined {\r\n    if (!data) {\r\n      return undefined;\r\n    }\r\n    return (data.constructor === Float32Array) ? data as Float32Array : new Float32Array(data);\r\n    /*\r\n    switch (dataType) {\r\n      case 'int16':\r\n      case 'int32':\r\n      case 'uint16':\r\n      case 'uint32':\r\n        return (data.constructor === Uint32Array) ? data as Uint32Array : new Uint32Array(data);\r\n      case 'int8':\r\n      case 'uint8':\r\n      case 'bool':\r\n        return (data.constructor === Uint8Array) ? data as Uint8Array : new Uint8Array(data);\r\n      case 'float32':\r\n      case 'float64':\r\n        return (data.constructor === Float32Array) ? data as Float32Array : new Float32Array(data);\r\n      default:\r\n        throw new Error(`TensorData type ${dataType} is not supported`);\r\n    }\r\n    */\r\n  }\r\n  toEncoderType(dataType: Tensor.DataType): Encoder.DataType {\r\n    return 'float';\r\n    // switch (dataType) {\r\n    //   case 'int16':\r\n    //   case 'int32':\r\n    //   case 'uint16':\r\n    //   case 'uint32':\r\n    //     return 'int';\r\n    //   case 'uint8':\r\n    //   case 'bool':\r\n    //     return 'byte';\r\n    //   case 'float32':\r\n    //   case 'float64':\r\n    //     return 'float';\r\n    //   default:\r\n    //     throw new Error(`TensorData type ${dataType} is not supported`);\r\n    // }\r\n  }\r\n  clearActiveTextures(): void {\r\n    this.glContext.clearActiveTextures();\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Logger} from '../../instrument';\r\n\r\nimport {WebGLContext} from './webgl-context';\r\n\r\nconst cache: {[contextId: string]: WebGLContext} = {};\r\n\r\n/**\r\n * This factory function creates proper WebGLRenderingContext based on\r\n * the current browsers capabilities\r\n * The order is from higher/most recent versions to most basic\r\n */\r\nexport function createWebGLContext(contextId?: 'webgl'|'webgl2'): WebGLContext {\r\n  let context: WebGLContext|undefined;\r\n  if ((!contextId || contextId === 'webgl2') && 'webgl2' in cache) {\r\n    context = cache.webgl2;\r\n  } else if ((!contextId || contextId === 'webgl') && 'webgl' in cache) {\r\n    context = cache.webgl;\r\n  }\r\n\r\n  context = context || createNewWebGLContext(contextId);\r\n  contextId = contextId || context.version === 1 ? 'webgl' : 'webgl2';\r\n  const gl = context.gl;\r\n\r\n  cache[contextId] = context;\r\n\r\n  if (gl.isContextLost()) {\r\n    delete cache[contextId];\r\n    return createWebGLContext(contextId);\r\n  }\r\n\r\n  gl.disable(gl.DEPTH_TEST);\r\n  gl.disable(gl.STENCIL_TEST);\r\n  gl.disable(gl.BLEND);\r\n  gl.disable(gl.DITHER);\r\n  gl.disable(gl.POLYGON_OFFSET_FILL);\r\n  gl.disable(gl.SAMPLE_COVERAGE);\r\n  gl.enable(gl.SCISSOR_TEST);\r\n  gl.enable(gl.CULL_FACE);\r\n  gl.cullFace(gl.BACK);\r\n\r\n  return context;\r\n}\r\n\r\nexport function createNewWebGLContext(contextId?: 'webgl'|'webgl2'): WebGLContext {\r\n  const canvas = createCanvas();\r\n  const contextAttributes: WebGLContextAttributes = {\r\n    alpha: false,\r\n    depth: false,\r\n    antialias: false,\r\n    stencil: false,\r\n    preserveDrawingBuffer: false,\r\n    premultipliedAlpha: false,\r\n    failIfMajorPerformanceCaveat: false\r\n  };\r\n  let gl: WebGLRenderingContext|null;\r\n  const ca = contextAttributes;\r\n  if (!contextId || contextId === 'webgl2') {\r\n    gl = canvas.getContext('webgl2', ca);\r\n    if (gl) {\r\n      try {\r\n        return new WebGLContext(gl, 2);\r\n      } catch (err) {\r\n        Logger.warning('GlContextFactory', `failed to create WebGLContext using contextId 'webgl2'. Error: ${err}`);\r\n      }\r\n    }\r\n  }\r\n  if (!contextId || contextId === 'webgl') {\r\n    gl = canvas.getContext('webgl', ca) || canvas.getContext('experimental-webgl', ca);\r\n    if (gl) {\r\n      try {\r\n        return new WebGLContext(gl, 1);\r\n      } catch (err) {\r\n        Logger.warning(\r\n            'GlContextFactory',\r\n            `failed to create WebGLContext using contextId 'webgl' or 'experimental-webgl'. Error: ${err}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  throw new Error('WebGL is not supported');\r\n}\r\n\r\nfunction createCanvas(): HTMLCanvasElement {\r\n  const canvas: HTMLCanvasElement = document.createElement('canvas');\r\n  canvas.width = 1;\r\n  canvas.height = 1;\r\n  return canvas;\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {env} from '../../env';\r\n\r\nimport * as DataEncoders from './texture-data-encoder';\r\nimport {DataEncoder, Encoder} from './texture-data-encoder';\r\n\r\n/**\r\n * Abstraction and wrapper around WebGLRenderingContext and its operations\r\n */\r\nexport class WebGLContext {\r\n  gl: WebGLRenderingContext;\r\n  version: 1|2;\r\n\r\n  private vertexbuffer: WebGLBuffer;\r\n  private framebuffer: WebGLFramebuffer;\r\n\r\n  // WebGL flags and vital parameters\r\n  private isFloatTextureAttachableToFrameBuffer: boolean;\r\n  isFloat32DownloadSupported: boolean;\r\n  isRenderFloat32Supported: boolean;\r\n  isBlendSupported: boolean;\r\n  maxTextureSize: number;\r\n  // private maxCombinedTextureImageUnits: number;\r\n  private maxTextureImageUnits: number;\r\n  // private maxCubeMapTextureSize: number;\r\n  // private shadingLanguageVersion: string;\r\n  // private webglVendor: string;\r\n  // private webglVersion: string;\r\n\r\n  // WebGL2 flags and vital parameters\r\n  // private max3DTextureSize: number;\r\n  // private maxArrayTextureLayers: number;\r\n  // private maxColorAttachments: number;\r\n  // private maxDrawBuffers: number;\r\n\r\n  // WebGL extensions\r\n  textureFloatExtension: OES_texture_float|null;\r\n  textureHalfFloatExtension: OES_texture_half_float|null;\r\n\r\n  // WebGL2 extensions\r\n  colorBufferFloatExtension: {}|null;\r\n\r\n  private disposed: boolean;\r\n  private frameBufferBound = false;\r\n\r\n  constructor(gl: WebGLRenderingContext, version: 1|2) {\r\n    this.gl = gl;\r\n    this.version = version;\r\n\r\n    this.getExtensions();\r\n    this.vertexbuffer = this.createVertexbuffer();\r\n    this.framebuffer = this.createFramebuffer();\r\n    this.queryVitalParameters();\r\n  }\r\n\r\n  allocateTexture(width: number, height: number, encoder: DataEncoder, data?: Encoder.DataArrayType): WebGLTexture {\r\n    const gl = this.gl;\r\n    // create the texture\r\n    const texture = gl.createTexture();\r\n    // bind the texture so the following methods effect this texture.\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n    const buffer = data ? encoder.encode(data, width * height) : null;\r\n    gl.texImage2D(\r\n        gl.TEXTURE_2D,\r\n        0,  // Level of detail.\r\n        encoder.internalFormat, width, height,\r\n        0,  // Always 0 in OpenGL ES.\r\n        encoder.format, encoder.textureType, buffer);\r\n    this.checkError();\r\n    return texture as WebGLTexture;\r\n  }\r\n  updateTexture(\r\n      texture: WebGLTexture, width: number, height: number, encoder: DataEncoder, data: Encoder.DataArrayType): void {\r\n    const gl = this.gl;\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    const buffer = encoder.encode(data, width * height);\r\n    gl.texSubImage2D(\r\n        gl.TEXTURE_2D,\r\n        0,  // level\r\n        0,  // xoffset\r\n        0,  // yoffset\r\n        width, height, encoder.format, encoder.textureType, buffer);\r\n    this.checkError();\r\n  }\r\n  attachFramebuffer(texture: WebGLTexture, width: number, height: number): void {\r\n    const gl = this.gl;\r\n    // Make it the target for framebuffer operations - including rendering.\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\r\n    gl.framebufferTexture2D(\r\n        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture,\r\n        0);  // 0, we aren't using MIPMAPs\r\n    this.checkError();\r\n    gl.viewport(0, 0, width, height);\r\n    gl.scissor(0, 0, width, height);\r\n  }\r\n  readTexture(\r\n      texture: WebGLTexture, width: number, height: number, dataSize: number, dataType: Encoder.DataType,\r\n      channels: number): Encoder.DataArrayType {\r\n    const gl = this.gl;\r\n    if (!channels) {\r\n      channels = 1;\r\n    }\r\n    if (!this.frameBufferBound) {\r\n      this.attachFramebuffer(texture, width, height);\r\n    }\r\n    const encoder = this.getEncoder(dataType, channels);\r\n    const buffer = encoder.allocate(width * height);\r\n    // bind texture to framebuffer\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    gl.framebufferTexture2D(\r\n        gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture,\r\n        0);  // 0, we aren't using MIPMAPs\r\n    // TODO: Check if framebuffer is ready\r\n    gl.readPixels(0, 0, width, height, gl.RGBA, encoder.textureType, buffer);\r\n    this.checkError();\r\n    // unbind FB\r\n    return encoder.decode(buffer, dataSize);\r\n  }\r\n  isFramebufferReady(): boolean {\r\n    // TODO: Implement logic to check if the framebuffer is ready\r\n    return true;\r\n  }\r\n  getActiveTexture(): string {\r\n    const gl = this.gl;\r\n    const n = gl.getParameter(this.gl.ACTIVE_TEXTURE);\r\n    return `TEXTURE${(n - gl.TEXTURE0)}`;\r\n  }\r\n  getTextureBinding(): WebGLTexture {\r\n    return this.gl.getParameter(this.gl.TEXTURE_BINDING_2D);\r\n  }\r\n  getFramebufferBinding(): WebGLFramebuffer {\r\n    return this.gl.getParameter(this.gl.FRAMEBUFFER_BINDING);\r\n  }\r\n  setVertexAttributes(positionHandle: number, textureCoordHandle: number): void {\r\n    const gl = this.gl;\r\n    gl.vertexAttribPointer(positionHandle, 3, gl.FLOAT, false, 20, 0);\r\n    gl.enableVertexAttribArray(positionHandle);\r\n    if (textureCoordHandle !== -1) {\r\n      gl.vertexAttribPointer(textureCoordHandle, 2, gl.FLOAT, false, 20, 12);\r\n      gl.enableVertexAttribArray(textureCoordHandle);\r\n    }\r\n    this.checkError();\r\n  }\r\n  createProgram(\r\n      vertexShader: WebGLShader,\r\n      fragShader: WebGLShader,\r\n      ): WebGLProgram {\r\n    const gl = this.gl;\r\n    const program = gl.createProgram()!;\r\n\r\n    // the program consists of our shaders\r\n    gl.attachShader(program, vertexShader);\r\n    gl.attachShader(program, fragShader);\r\n    gl.linkProgram(program);\r\n    return program;\r\n  }\r\n  compileShader(shaderSource: string, shaderType: number): WebGLShader {\r\n    const gl = this.gl;\r\n    const shader = gl.createShader(shaderType);\r\n    if (!shader) {\r\n      throw new Error(`createShader() returned null with type ${shaderType}`);\r\n    }\r\n\r\n    gl.shaderSource(shader, shaderSource);\r\n    gl.compileShader(shader);\r\n    if (gl.getShaderParameter(shader, gl.COMPILE_STATUS) === false) {\r\n      throw new Error(`Failed to compile shader: ${gl.getShaderInfoLog(shader)}`);\r\n    }\r\n    return shader;\r\n  }\r\n  deleteShader(shader: WebGLShader): void {\r\n    this.gl.deleteShader(shader);\r\n  }\r\n  bindTextureToUniform(texture: WebGLTexture, position: number, uniformHandle: WebGLUniformLocation): void {\r\n    const gl = this.gl;\r\n    gl.activeTexture(gl.TEXTURE0 + position);\r\n    this.checkError();\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    this.checkError();\r\n    gl.uniform1i(uniformHandle, position);\r\n    this.checkError();\r\n  }\r\n  draw(): void {\r\n    this.gl.drawArrays(this.gl.TRIANGLE_STRIP, 0, 4);\r\n    this.checkError();\r\n  }\r\n  checkError(): void {\r\n    if (env.debug) {\r\n      const gl = this.gl;\r\n      const error = gl.getError();\r\n      let label = '';\r\n      switch (error) {\r\n        case (gl.NO_ERROR):\r\n          return;\r\n        case (gl.INVALID_ENUM):\r\n          label = 'INVALID_ENUM';\r\n          break;\r\n        case (gl.INVALID_VALUE):\r\n          label = 'INVALID_VALUE';\r\n          break;\r\n        case (gl.INVALID_OPERATION):\r\n          label = 'INVALID_OPERATION';\r\n          break;\r\n        case (gl.INVALID_FRAMEBUFFER_OPERATION):\r\n          label = 'INVALID_FRAMEBUFFER_OPERATION';\r\n          break;\r\n        case (gl.OUT_OF_MEMORY):\r\n          label = 'OUT_OF_MEMORY';\r\n          break;\r\n        case (gl.CONTEXT_LOST_WEBGL):\r\n          label = 'CONTEXT_LOST_WEBGL';\r\n          break;\r\n        default:\r\n          label = 'Unknown WebGL Error: ' + error.toString(16);\r\n      }\r\n      throw new Error(label);\r\n    }\r\n  }\r\n  deleteTexture(texture: WebGLTexture): void {\r\n    this.gl.deleteTexture(texture);\r\n  }\r\n  deleteProgram(program: WebGLProgram): void {\r\n    this.gl.deleteProgram(program);\r\n  }\r\n  getEncoder(dataType: Encoder.DataType, channels: number, usage: Encoder.Usage = Encoder.Usage.Default): DataEncoder {\r\n    if (this.version === 2) {\r\n      return new DataEncoders.RedFloat32DataEncoder(this.gl as WebGL2RenderingContext, channels);\r\n    }\r\n\r\n    switch (dataType) {\r\n      case 'float':\r\n        if (usage === Encoder.Usage.UploadOnly || this.isRenderFloat32Supported) {\r\n          return new DataEncoders.RGBAFloatDataEncoder(this.gl, channels);\r\n        } else {\r\n          return new DataEncoders.RGBAFloatDataEncoder(\r\n              this.gl, channels, this.textureHalfFloatExtension!.HALF_FLOAT_OES);\r\n        }\r\n      case 'int':\r\n        throw new Error('not implemented');\r\n      case 'byte':\r\n        return new DataEncoders.Uint8DataEncoder(this.gl, channels);\r\n      default:\r\n        throw new Error(`Invalid dataType: ${dataType}`);\r\n    }\r\n  }\r\n  clearActiveTextures(): void {\r\n    const gl = this.gl;\r\n    for (let unit = 0; unit < this.maxTextureImageUnits; ++unit) {\r\n      gl.activeTexture(gl.TEXTURE0 + unit);\r\n      gl.bindTexture(gl.TEXTURE_2D, null);\r\n    }\r\n  }\r\n  dispose(): void {\r\n    if (this.disposed) {\r\n      return;\r\n    }\r\n    const gl = this.gl;\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n    gl.deleteFramebuffer(this.framebuffer);\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, null);\r\n    gl.deleteBuffer(this.vertexbuffer);\r\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);\r\n    gl.finish();\r\n    this.disposed = true;\r\n  }\r\n\r\n  private createDefaultGeometry(): Float32Array {\r\n    // Sets of x,y,z(=0),s,t coordinates.\r\n    return new Float32Array([\r\n      -1.0, 1.0,  0.0, 0.0, 1.0,  // upper left\r\n      -1.0, -1.0, 0.0, 0.0, 0.0,  // lower left\r\n      1.0,  1.0,  0.0, 1.0, 1.0,  // upper right\r\n      1.0,  -1.0, 0.0, 1.0, 0.0\r\n    ]);  // lower right\r\n  }\r\n  private createVertexbuffer(): WebGLBuffer {\r\n    const gl = this.gl;\r\n    const buffer = gl.createBuffer();\r\n    if (!buffer) {\r\n      throw new Error('createBuffer() returned null');\r\n    }\r\n    const geometry = this.createDefaultGeometry();\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\r\n    gl.bufferData(gl.ARRAY_BUFFER, geometry, gl.STATIC_DRAW);\r\n    this.checkError();\r\n    return buffer;\r\n  }\r\n  private createFramebuffer(): WebGLFramebuffer {\r\n    const fb = this.gl.createFramebuffer();\r\n    if (!fb) {\r\n      throw new Error('createFramebuffer returned null');\r\n    }\r\n    return fb;\r\n  }\r\n\r\n  private queryVitalParameters(): void {\r\n    const gl = this.gl;\r\n\r\n    this.isFloatTextureAttachableToFrameBuffer = this.checkFloatTextureAttachableToFrameBuffer();\r\n    this.isRenderFloat32Supported = this.checkRenderFloat32();\r\n    this.isFloat32DownloadSupported = this.checkFloat32Download();\r\n\r\n    if (this.version === 1 && !this.textureHalfFloatExtension && !this.isRenderFloat32Supported) {\r\n      throw new Error(`both float32 and float16 TextureType are not supported`);\r\n    }\r\n\r\n    this.isBlendSupported = !this.isRenderFloat32Supported || this.checkFloat32Blend();\r\n\r\n    // this.maxCombinedTextureImageUnits = gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);\r\n    this.maxTextureSize = gl.getParameter(gl.MAX_TEXTURE_SIZE);\r\n    this.maxTextureImageUnits = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\r\n    // this.maxCubeMapTextureSize = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);\r\n    // this.shadingLanguageVersion = gl.getParameter(gl.SHADING_LANGUAGE_VERSION);\r\n    // this.webglVendor = gl.getParameter(gl.VENDOR);\r\n    // this.webglVersion = gl.getParameter(gl.VERSION);\r\n\r\n    if (this.version === 2) {\r\n      // this.max3DTextureSize = gl.getParameter(WebGL2RenderingContext.MAX_3D_TEXTURE_SIZE);\r\n      // this.maxArrayTextureLayers = gl.getParameter(WebGL2RenderingContext.MAX_ARRAY_TEXTURE_LAYERS);\r\n      // this.maxColorAttachments = gl.getParameter(WebGL2RenderingContext.MAX_COLOR_ATTACHMENTS);\r\n      // this.maxDrawBuffers = gl.getParameter(WebGL2RenderingContext.MAX_DRAW_BUFFERS);\r\n    }\r\n  }\r\n  private getExtensions(): void {\r\n    if (this.version === 2) {\r\n      this.colorBufferFloatExtension = this.gl.getExtension('EXT_color_buffer_float');\r\n    } else {\r\n      this.textureFloatExtension = this.gl.getExtension('OES_texture_float');\r\n      this.textureHalfFloatExtension = this.gl.getExtension('OES_texture_half_float');\r\n    }\r\n  }\r\n\r\n  private checkFloatTextureAttachableToFrameBuffer(): boolean {\r\n    // test whether Float32 texture is supported:\r\n    // STEP.1 create a float texture\r\n    const gl = this.gl;\r\n    const texture = gl.createTexture();\r\n    gl.bindTexture(gl.TEXTURE_2D, texture);\r\n    const internalFormat = this.version === 2 ? (gl as unknown as {RGBA32F: number}).RGBA32F : gl.RGBA;\r\n    gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 1, 1, 0, gl.RGBA, gl.FLOAT, null);\r\n    // STEP.2 bind a frame buffer\r\n    const frameBuffer = gl.createFramebuffer();\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\r\n    // STEP.3 attach texture to framebuffer\r\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\r\n    // STEP.4 test whether framebuffer is complete\r\n    const isComplete = gl.checkFramebufferStatus(gl.FRAMEBUFFER) === gl.FRAMEBUFFER_COMPLETE;\r\n    gl.bindTexture(gl.TEXTURE_2D, null);\r\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n    gl.deleteTexture(texture);\r\n    gl.deleteFramebuffer(frameBuffer);\r\n    return isComplete;\r\n  }\r\n\r\n  private checkRenderFloat32(): boolean {\r\n    if (this.version === 2) {\r\n      if (!this.colorBufferFloatExtension) {\r\n        return false;\r\n      }\r\n    } else {\r\n      if (!this.textureFloatExtension) {\r\n        return false;\r\n      }\r\n    }\r\n    return this.isFloatTextureAttachableToFrameBuffer;\r\n  }\r\n\r\n  private checkFloat32Download(): boolean {\r\n    if (this.version === 2) {\r\n      if (!this.colorBufferFloatExtension) {\r\n        return false;\r\n      }\r\n    } else {\r\n      if (!this.textureFloatExtension) {\r\n        return false;\r\n      }\r\n      if (!this.gl.getExtension('WEBGL_color_buffer_float')) {\r\n        return false;\r\n      }\r\n    }\r\n    return this.isFloatTextureAttachableToFrameBuffer;\r\n  }\r\n\r\n  /**\r\n   * Check whether GL_BLEND is supported\r\n   */\r\n  private checkFloat32Blend(): boolean {\r\n    // it looks like currently (2019-05-08) there is no easy way to detect whether BLEND is supported\r\n    // https://github.com/microsoft/onnxjs/issues/145\r\n\r\n    const gl = this.gl;\r\n\r\n    let texture: WebGLTexture|null|undefined;\r\n    let frameBuffer: WebGLFramebuffer|null|undefined;\r\n    let vertexShader: WebGLShader|null|undefined;\r\n    let fragmentShader: WebGLShader|null|undefined;\r\n    let program: WebGLProgram|null|undefined;\r\n\r\n    try {\r\n      texture = gl.createTexture();\r\n      frameBuffer = gl.createFramebuffer();\r\n      gl.bindTexture(gl.TEXTURE_2D, texture);\r\n\r\n      const internalFormat = this.version === 2 ? (gl as unknown as {RGBA32F: number}).RGBA32F : gl.RGBA;\r\n      gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, 1, 1, 0, gl.RGBA, gl.FLOAT, null);\r\n\r\n      gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\r\n      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\r\n\r\n      gl.enable(gl.BLEND);\r\n\r\n      vertexShader = gl.createShader(gl.VERTEX_SHADER);\r\n      if (!vertexShader) {\r\n        return false;\r\n      }\r\n      gl.shaderSource(vertexShader, 'void main(){}');\r\n      gl.compileShader(vertexShader);\r\n\r\n      fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\r\n      if (!fragmentShader) {\r\n        return false;\r\n      }\r\n      gl.shaderSource(fragmentShader, `precision highp float;void main(){gl_FragColor=vec4(0.5);}`);\r\n      gl.compileShader(fragmentShader);\r\n\r\n      program = gl.createProgram();\r\n      if (!program) {\r\n        return false;\r\n      }\r\n      gl.attachShader(program, vertexShader);\r\n      gl.attachShader(program, fragmentShader);\r\n      gl.linkProgram(program);\r\n      gl.useProgram(program);\r\n\r\n      gl.drawArrays(gl.POINTS, 0, 1);\r\n      return gl.getError() === gl.NO_ERROR;\r\n\r\n    } finally {\r\n      gl.disable(gl.BLEND);\r\n\r\n      if (program) {\r\n        gl.deleteProgram(program);\r\n      }\r\n      if (vertexShader) {\r\n        gl.deleteShader(vertexShader);\r\n      }\r\n      if (fragmentShader) {\r\n        gl.deleteShader(fragmentShader);\r\n      }\r\n      if (frameBuffer) {\r\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\r\n        gl.deleteFramebuffer(frameBuffer);\r\n      }\r\n      if (texture) {\r\n        gl.bindTexture(gl.TEXTURE_2D, null);\r\n        gl.deleteTexture(texture);\r\n      }\r\n    }\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Logger} from '../../instrument';\r\n\r\nexport declare namespace Encoder {\r\n  export interface DataTypeMap {\r\n    float: Float32Array;\r\n    byte: Uint8Array;\r\n    int: Uint32Array;\r\n  }\r\n  export type DataType = keyof DataTypeMap;\r\n  type DataArrayType = DataTypeMap[DataType];\r\n\r\n  export const enum Usage {\r\n    Default = 0,\r\n    UploadOnly,\r\n    Download4BytesAsFloat32,\r\n  }\r\n}\r\n\r\n/**\r\n * Abstraction for mapping data types to texture texlets\r\n * Encoding means how a Float32 is mapped to 1 or 4 channels for each texlet\r\n * Decoding means how a texlet's channels are mapped to a resulting Float32\r\n */\r\nexport interface DataEncoder {\r\n  internalFormat: number;\r\n  format: number;\r\n  textureType: number;\r\n  channelSize: number;\r\n  encode(src: Encoder.DataArrayType, textureSize: number): Encoder.DataArrayType;\r\n  allocate(size: number): Encoder.DataArrayType;\r\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Encoder.DataArrayType;\r\n}\r\n/**\r\n * WebGL2 data encoder\r\n * Uses R32F as the format for texlet\r\n */\r\nexport class RedFloat32DataEncoder implements DataEncoder {\r\n  internalFormat: number;\r\n  format: number;\r\n  textureType: number;\r\n  channelSize: number;\r\n  constructor(gl: WebGL2RenderingContext, channels = 1) {\r\n    if (channels === 1) {\r\n      this.internalFormat = gl.R32F;\r\n      this.format = gl.RED;\r\n      this.textureType = gl.FLOAT;\r\n      this.channelSize = channels;\r\n    } else if (channels === 4) {\r\n      this.internalFormat = gl.RGBA32F;\r\n      this.format = gl.RGBA;\r\n      this.textureType = gl.FLOAT;\r\n      this.channelSize = channels;\r\n    } else {\r\n      throw new Error(`Invalid number of channels: ${channels}`);\r\n    }\r\n  }\r\n  encode(src: Encoder.DataArrayType, textureSize: number): Encoder.DataArrayType {\r\n    let result: Float32Array;\r\n    let source: Float32Array;\r\n    if (src.constructor !== Float32Array) {\r\n      Logger.warning('Encoder', 'data was not of type Float32; creating new Float32Array');\r\n      source = new Float32Array(src);\r\n    }\r\n    if (textureSize * this.channelSize > src.length) {\r\n      Logger.warning('Encoder', 'Source data too small. Allocating larger array');\r\n      source = src as Float32Array;\r\n      result = this.allocate(textureSize * this.channelSize) as Float32Array;\r\n      source.forEach((v, i) => result[i] = v);\r\n    } else {\r\n      source = src as Float32Array;\r\n      result = source;\r\n    }\r\n    return result;\r\n  }\r\n  allocate(size: number): Encoder.DataArrayType {\r\n    return new Float32Array(size * 4);\r\n  }\r\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Float32Array {\r\n    if (this.channelSize === 1) {\r\n      const filteredData = (buffer as Float32Array).filter((value, index) => index % 4 === 0).subarray(0, dataSize);\r\n      return filteredData;\r\n    }\r\n    return buffer.subarray(0, dataSize) as Float32Array;\r\n  }\r\n}\r\n/**\r\n * Data encoder for WebGL 1 with support for floating point texture\r\n */\r\nexport class RGBAFloatDataEncoder implements DataEncoder {\r\n  internalFormat: number;\r\n  format: number;\r\n  textureType: number;\r\n  channelSize: number;\r\n  constructor(gl: WebGLRenderingContext, channels = 1, textureType?: number) {\r\n    if (channels !== 1 && channels !== 4) {\r\n      throw new Error(`Invalid number of channels: ${channels}`);\r\n    }\r\n    this.internalFormat = gl.RGBA;\r\n    this.format = gl.RGBA;\r\n    this.channelSize = channels;\r\n    this.textureType = textureType || gl.FLOAT;\r\n  }\r\n  encode(src: Float32Array, textureSize: number): Encoder.DataArrayType {\r\n    let dest = src;\r\n    if (this.channelSize === 1) {\r\n      Logger.verbose('Encoder', 'Exploding into a larger array');\r\n      dest = this.allocate(textureSize) as Float32Array;\r\n      src.forEach((v, i) => dest[i * 4] = v);\r\n    }\r\n    return dest;\r\n  }\r\n  allocate(size: number): Encoder.DataArrayType {\r\n    return new Float32Array(size * 4);\r\n  }\r\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Float32Array {\r\n    if (this.channelSize === 1) {\r\n      const filteredData = (buffer as Float32Array).filter((value, index) => index % 4 === 0).subarray(0, dataSize);\r\n      return filteredData;\r\n    }\r\n    return buffer.subarray(0, dataSize) as Float32Array;\r\n  }\r\n}\r\n\r\nexport class Uint8DataEncoder implements DataEncoder {\r\n  internalFormat: number;\r\n  format: number;\r\n  textureType: number;\r\n  channelSize = 4;\r\n  constructor(gl: WebGLRenderingContext, channels = 1) {\r\n    if (channels === 1) {\r\n      this.internalFormat = gl.ALPHA;\r\n      this.format = gl.ALPHA;  // not tested\r\n      this.textureType = gl.UNSIGNED_BYTE;\r\n      this.channelSize = channels;\r\n    } else if (channels === 4) {\r\n      this.internalFormat = gl.RGBA;\r\n      this.format = gl.RGBA;\r\n      this.textureType = gl.UNSIGNED_BYTE;\r\n      this.channelSize = channels;\r\n    } else {\r\n      throw new Error(`Invalid number of channels: ${channels}`);\r\n    }\r\n  }\r\n  encode(src: Uint8Array, textureSize: number): Encoder.DataArrayType {\r\n    return new Uint8Array(src.buffer, src.byteOffset, src.byteLength);\r\n  }\r\n  allocate(size: number): Encoder.DataArrayType {\r\n    return new Uint8Array(size * this.channelSize);\r\n  }\r\n  decode(buffer: Encoder.DataArrayType, dataSize: number): Uint8Array {\r\n    if (buffer.constructor === Uint8Array) {\r\n      return buffer.subarray(0, dataSize) as Uint8Array;\r\n    }\r\n    throw new Error(`Invalid array type: ${buffer.constructor}`);\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {env} from '../env';\r\n\r\nimport {Environment} from './env';\r\n\r\nclass ENV implements Environment {\r\n  public set debug(value: boolean) {\r\n    env.debug = value;\r\n  }\r\n  public get debug(): boolean {\r\n    return env.debug;\r\n  }\r\n}\r\n\r\nexport const envImpl = new ENV();\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\n/**\r\n * represent a tensor with specified dimensions and data type.\r\n */\r\nexport interface Tensor {\r\n  /**\r\n   * get the dimensions of the tensor\r\n   */\r\n  readonly dims: ReadonlyArray<number>;\r\n\r\n  /**\r\n   * get the data type of the tensor\r\n   */\r\n  readonly type: Tensor.Type;\r\n\r\n  /**\r\n   * get the number of elements in the tensor\r\n   */\r\n  readonly size: number;\r\n\r\n  /**\r\n   * get the underlying data of the tensor\r\n   */\r\n  readonly data: Tensor.DataType;\r\n\r\n  /**\r\n   * get value of an element\r\n   * @param indices the indices to the element\r\n   * @returns value of the element\r\n   */\r\n  get(...indices: number[]): Tensor.ElementType;\r\n\r\n  /**\r\n   * get value of an element\r\n   * @param indices the indices to the element\r\n   * @returns value of the element\r\n   */\r\n  get(indices: ReadonlyArray<number>): Tensor.ElementType;\r\n\r\n  /**\r\n   * set value of an element\r\n   * @param value the value to set\r\n   * @param indices the indices to the element\r\n   */\r\n  set(value: Tensor.ElementType, ...indices: number[]): void;\r\n\r\n  /**\r\n   * set value of an element\r\n   * @param value the value to set\r\n   * @param indices the indices to the element\r\n   */\r\n  set(value: Tensor.ElementType, indices: ReadonlyArray<number>): void;\r\n}\r\n\r\nexport declare namespace Tensor {\r\n  interface DataTypeMap {\r\n    bool: Uint8Array;\r\n    float32: Float32Array;\r\n    int32: Int32Array;\r\n    string: string[];\r\n  }\r\n\r\n  interface ElementTypeMap {\r\n    bool: boolean;\r\n    float32: number;\r\n    int32: number;\r\n    string: string;\r\n  }\r\n\r\n  type DataType = DataTypeMap[Type];\r\n  type ElementType = ElementTypeMap[Type];\r\n\r\n  /**\r\n   * represent the data type of a tensor\r\n   */\r\n  export type Type = keyof DataTypeMap;\r\n}\r\n\r\nexport interface TensorConstructor {\r\n  /**\r\n   * Create a Tensor with provided data, dimension, and type\r\n   * @param data The value of the tensor. It could a flat array or a TypedArray.\r\n   * @param type The data type. Should match the value of the tensor, else throw\r\n   *     TypeError exception.\r\n   * @param dims Optional. Should match the length of the value provided. If not\r\n   *     specified, dims will be inferred as a 1d tensor.\r\n   */\r\n  new(data: Tensor.DataType|boolean[]|number[], type: Tensor.Type, dims?: ReadonlyArray<number>): Tensor;\r\n}\r\n\r\nexport interface TensorConstructor {\r\n  // Tensor factory functions\r\n}\r\n\r\nexport interface Tensor {\r\n  // Tensor utilities\r\n}\r\n\r\nimport * as TensorImpl from './tensor-impl';\r\nexport const Tensor: TensorConstructor = TensorImpl.Tensor;\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Tensor} from './tensor';\r\n\r\n/**\r\n * represent a runtime instance of an ONNX model\r\n */\r\nexport interface InferenceSession {\r\n  //#region loadModel\r\n\r\n  /**\r\n   * load an ONNX model asynchronously\r\n   * @param uri the URI of the model to load\r\n   */\r\n  loadModel(uri: string): Promise<void>;\r\n  /**\r\n   * load an ONNX model\r\n   * @param blob a Blob object representation of an ONNX model\r\n   */\r\n  loadModel(blob: Blob): Promise<void>;\r\n  /**\r\n   * load an ONNX model\r\n   * @param buffer an ArrayBuffer representation of an ONNX model\r\n   */\r\n  loadModel(buffer: ArrayBufferLike, byteOffset?: number, length?: number): Promise<void>;\r\n  /**\r\n   * load an ONNX model\r\n   * @param buffer an Uint8Array representation of an ONNX model\r\n   */\r\n  loadModel(buffer: Uint8Array): Promise<void>;\r\n\r\n  //#endregion loadModel\r\n\r\n  /**\r\n   * execute the model asynchronously with the given inputs, output names and options\r\n   * @param inputs representation of the model input. It can be a string-to-tensor Map object or a plain object,\r\n   *     with all required inputs present with their names as keys; it can be a tensor array as well, with input\r\n   *     tensors inside in the order defined by the model.\r\n   * @param options Optional. A set of options that controls the behavior of model inference\r\n   * @returns a Promise object representing the result of the execution. Resolve to a string-to-tensor Map object\r\n   *     for the model output, or reject to any runtime error.\r\n   */\r\n  run(inputs: InferenceSession.InputType, options?: InferenceSession.RunOptions): Promise<InferenceSession.OutputType>;\r\n\r\n  /**\r\n   * start profiling for the session\r\n   */\r\n  startProfiling(): void;\r\n  /**\r\n   * end profiling for the session and flush data\r\n   */\r\n  endProfiling(): void;\r\n}\r\n\r\nexport declare namespace InferenceSession {\r\n  type TensorsMapType = ReadonlyMap<string, Tensor>;\r\n  type TensorsIndexType = {readonly [name: string]: Tensor};\r\n  type TensorsArrayType = ReadonlyArray<Tensor>;\r\n  type InputType = TensorsMapType|TensorsIndexType|TensorsArrayType;\r\n  type OutputType = TensorsMapType;\r\n\r\n  export namespace Config {\r\n    /**\r\n     * represent the configuration of the profiler that used in an inference session\r\n     */\r\n    export interface Profiler {\r\n      /**\r\n       * the max number of events to be recorded\r\n       */\r\n      maxNumberEvents?: number;\r\n      /**\r\n       * the maximum size of a batch to flush\r\n       */\r\n      flushBatchSize?: number;\r\n      /**\r\n       * the maximum interval in milliseconds to flush\r\n       */\r\n      flushIntervalInMilliseconds?: number;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * configuration for creating a new inference session\r\n   */\r\n  export interface Config {\r\n    /**\r\n     * specify a hint of the preferred backend. If not set, the backend will be determined by the platform and\r\n     * environment.\r\n     */\r\n    backendHint?: string;\r\n\r\n    /**\r\n     * specify the configuration of the profiler that used in an inference session\r\n     */\r\n    profiler?: Config.Profiler;\r\n  }\r\n\r\n  /**\r\n   * options for running inference\r\n   */\r\n  export interface RunOptions {\r\n    /**\r\n     * represent a list of output names as an array of string. This must be a subset of the output list defined by the\r\n     * model. If not specified, use the model's output list.\r\n     */\r\n    outputNames?: ReadonlyArray<string>;\r\n  }\r\n}\r\n\r\nexport interface InferenceSessionConstructor {\r\n  /**\r\n   * construct a new inference session\r\n   * @param config specify configuration for creating a new inference session\r\n   */\r\n  new(config?: InferenceSession.Config): InferenceSession;\r\n}\r\n\r\nimport * as InferenceSessionImpl from './inference-session-impl';\r\nexport const InferenceSession: InferenceSessionConstructor = InferenceSessionImpl.InferenceSession;\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Session} from '../session';\r\nimport {Tensor as InternalTensor} from '../tensor';\r\n\r\nimport {InferenceSession as InferenceSessionInterface} from './inference-session';\r\nimport * as TensorInterface from './tensor';\r\nimport {Tensor as ApiTensor} from './tensor-impl';\r\nimport * as tensorUtils from './tensor-impl-utils';\r\n\r\ntype InputType = InferenceSessionInterface.InputType;\r\ntype RunOptions = InferenceSessionInterface.RunOptions;\r\ntype OutputType = InferenceSessionInterface.OutputType;\r\n\r\nexport class InferenceSession implements InferenceSessionInterface {\r\n  session: Session;\r\n  constructor(config?: InferenceSessionInterface.Config) {\r\n    this.session = new Session(config);\r\n  }\r\n  loadModel(uri: string): Promise<void>;\r\n  loadModel(blob: Blob): Promise<void>;\r\n  loadModel(buffer: ArrayBuffer, byteOffset?: number, length?: number): Promise<void>;\r\n  loadModel(buffer: Uint8Array): Promise<void>;\r\n  loadModel(arg0: string|Blob|ArrayBuffer|Uint8Array, byteOffset?: number, length?: number): Promise<void> {\r\n    if (typeof arg0 === 'string') {\r\n      return this.session.loadModel(arg0);\r\n    } else if (typeof Blob !== 'undefined' && (arg0 instanceof Blob)) {\r\n      // create a url from Blob\r\n      const url = URL.createObjectURL(arg0);\r\n      return this.session.loadModel(url);\r\n    } else if (arg0 instanceof ArrayBuffer) {\r\n      // load model from array buffer\r\n      return this.session.loadModel(arg0, byteOffset, length);\r\n    } else if (ArrayBuffer.isView(arg0)) {\r\n      // load model from Uint8array\r\n      return this.session.loadModel(arg0);\r\n    } else {\r\n      throw new Error('Model type is not supported.');\r\n    }\r\n  }\r\n\r\n  async run(inputFeed: InputType, options?: RunOptions): Promise<OutputType> {\r\n    let output = new Map<string, InternalTensor>();\r\n    if (inputFeed instanceof Map) {\r\n      const modelInputFeed = new Map<string, InternalTensor>();\r\n      inputFeed.forEach((value: ApiTensor, key: string) => {\r\n        modelInputFeed.set(key, value.internalTensor);\r\n      });\r\n      output = await this.session.run(modelInputFeed);\r\n    } else if (Array.isArray(inputFeed)) {\r\n      const modelInputFeed: InternalTensor[] = [];\r\n      inputFeed.forEach((value) => {\r\n        modelInputFeed.push(value.internalTensor);\r\n      });\r\n      output = await this.session.run(modelInputFeed);\r\n    } else {\r\n      const modelInputFeed = new Map<string, InternalTensor>();\r\n      for (const name in inputFeed) {\r\n        modelInputFeed.set(name, (inputFeed as {readonly [name: string]: ApiTensor})[name].internalTensor);\r\n      }\r\n    }\r\n    const convertedOutput: Map<string, TensorInterface.Tensor> = new Map<string, TensorInterface.Tensor>();\r\n    output.forEach((value, key) => {\r\n      convertedOutput.set(key, tensorUtils.fromInternalTensor(value));\r\n    });\r\n    return convertedOutput;\r\n  }\r\n  startProfiling(): void {\r\n    this.session.startProfiling();\r\n  }\r\n  endProfiling(): void {\r\n    this.session.endProfiling();\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {readFile} from 'fs';\r\nimport {promisify} from 'util';\r\n\r\nimport {Backend, SessionHandlerType} from './backend';\r\nimport {ExecutionPlan} from './execution-plan';\r\nimport {Graph} from './graph';\r\nimport {Profiler} from './instrument';\r\nimport {Model} from './model';\r\nimport {Operator} from './operators';\r\nimport {Tensor} from './tensor';\r\n\r\nexport declare namespace Session {\r\n  export interface Config {\r\n    backendHint?: string;\r\n    profiler?: Profiler.Config;\r\n  }\r\n\r\n  export interface Context {\r\n    profiler: Readonly<Profiler>;\r\n    graphInputTypes?: Tensor.DataType[];\r\n    graphInputDims?: Array<ReadonlyArray<number>>;\r\n  }\r\n}\r\n\r\nexport class Session {\r\n  constructor(config: Session.Config = {}) {\r\n    this._initialized = false;\r\n    this.backendHint = config.backendHint;\r\n    this.profiler = Profiler.create(config.profiler);\r\n    this.context = {profiler: this.profiler, graphInputTypes: [], graphInputDims: []};\r\n  }\r\n\r\n  startProfiling() {\r\n    this.profiler.start();\r\n  }\r\n\r\n  endProfiling() {\r\n    this.profiler.stop();\r\n  }\r\n\r\n  async loadModel(uri: string): Promise<void>;\r\n  async loadModel(buffer: ArrayBuffer, byteOffset?: number, length?: number): Promise<void>;\r\n  async loadModel(buffer: Uint8Array): Promise<void>;\r\n  async loadModel(arg: string|ArrayBuffer|Uint8Array, byteOffset?: number, length?: number): Promise<void> {\r\n    await this.profiler.event('session', 'Session.loadModel', async () => {\r\n      // resolve backend and session handler\r\n      const backend = await Backend(this.backendHint);\r\n      this.sessionHandler = backend.createSessionHandler(this.context);\r\n\r\n      this._model = new Model();\r\n      if (typeof arg === 'string') {\r\n        if (typeof fetch === 'undefined') {\r\n          // node\r\n          const buf = await promisify(readFile)(arg);\r\n          this.initialize(Buffer.from(buf));\r\n        } else {\r\n          // browser\r\n          const response = await fetch(arg);\r\n          const buf = await response.arrayBuffer();\r\n          this.initialize(Buffer.from(buf));\r\n        }\r\n      } else if (!ArrayBuffer.isView(arg)) {\r\n        // load model from ArrayBuffer\r\n        const arr = new Uint8Array(arg, byteOffset || 0, length || arg.byteLength);\r\n        this.initialize(Buffer.from(arr));\r\n      } else {\r\n        // load model from Uint8array\r\n        this.initialize(Buffer.from(arg));\r\n      }\r\n    });\r\n  }\r\n\r\n  private initialize(modelProtoBlob: Buffer): void {\r\n    if (this._initialized) {\r\n      throw new Error('already initialized');\r\n    }\r\n\r\n    this.profiler.event('session', 'Session.initialize', () => {\r\n      // load graph\r\n      const graphInitializer =\r\n          this.sessionHandler.transformGraph ? this.sessionHandler as Graph.Initializer : undefined;\r\n      this._model.load(modelProtoBlob, graphInitializer);\r\n\r\n      // graph is completely initialzied at this stage , let the interested handlers know\r\n      if (this.sessionHandler.onGraphInitialized) {\r\n        this.sessionHandler.onGraphInitialized(this._model.graph);\r\n      }\r\n      // initialize each operator in the graph\r\n      this.initializeOps(this._model.graph);\r\n\r\n      // instantiate an ExecutionPlan object to be used by the Session object\r\n      this._executionPlan = new ExecutionPlan(this._model.graph, this._ops, this.profiler);\r\n    });\r\n\r\n    this._initialized = true;\r\n  }\r\n\r\n  run(inputs: Map<string, Tensor>|Tensor[]): Promise<Map<string, Tensor>> {\r\n    if (!this._initialized) {\r\n      throw new Error('session not initialized yet');\r\n    }\r\n\r\n    return this.profiler.event('session', 'Session.run', async () => {\r\n      const inputTensors = this.normalizeAndValidateInputs(inputs);\r\n\r\n      const outputTensors = await this._executionPlan.execute(this.sessionHandler, inputTensors);\r\n\r\n      return this.createOutput(outputTensors);\r\n    });\r\n  }\r\n\r\n  private normalizeAndValidateInputs(inputs: Map<string, Tensor>|Tensor[]): Tensor[] {\r\n    const modelInputNames = this._model.graph.getInputNames();\r\n\r\n    // normalize inputs\r\n    // inputs: Tensor[]\r\n    if (Array.isArray(inputs)) {\r\n      if (inputs.length !== modelInputNames.length) {\r\n        throw new Error(`incorrect input array length: expected ${modelInputNames.length} but got ${inputs.length}`);\r\n      }\r\n    }\r\n    // convert map to array\r\n    // inputs: Map<string, Tensor>\r\n    else {\r\n      if (inputs.size !== modelInputNames.length) {\r\n        throw new Error(`incorrect input map size: expected ${modelInputNames.length} but got ${inputs.size}`);\r\n      }\r\n\r\n      const sortedInputs = new Array<Tensor>(inputs.size);\r\n      let sortedInputsIndex = 0;\r\n      for (let i = 0; i < modelInputNames.length; ++i) {\r\n        const tensor = inputs.get(modelInputNames[i]);\r\n        if (!tensor) {\r\n          throw new Error(`missing input tensor for: '${name}'`);\r\n        }\r\n        sortedInputs[sortedInputsIndex++] = tensor;\r\n      }\r\n\r\n      inputs = sortedInputs;\r\n    }\r\n\r\n    // validate dims requirements\r\n    // First session run - graph input data is not cached for the session\r\n    if (!this.context.graphInputTypes || this.context.graphInputTypes.length === 0 || !this.context.graphInputDims ||\r\n        this.context.graphInputDims.length === 0) {\r\n      const modelInputIndices = this._model.graph.getInputIndices();\r\n      const modelValues = this._model.graph.getValues();\r\n\r\n      const graphInputDims = new Array<ReadonlyArray<number>>(modelInputIndices.length);\r\n\r\n      for (let i = 0; i < modelInputIndices.length; ++i) {\r\n        const graphInput = modelValues[modelInputIndices[i]];\r\n        graphInputDims[i] = graphInput.type!.shape.dims;\r\n\r\n        // cached for second and subsequent runs.\r\n        // Some parts of the framework works on the assumption that the graph and types and shapes are static\r\n        this.context.graphInputTypes!.push(graphInput.type!.tensorType);\r\n        this.context.graphInputDims!.push(inputs[i].dims);\r\n      }\r\n\r\n      this.validateInputTensorDims(graphInputDims, inputs, true);\r\n    }\r\n\r\n    // Second and subsequent session runs - graph input data is cached for the session\r\n    else {\r\n      this.validateInputTensorDims(this.context.graphInputDims, inputs, false);\r\n    }\r\n\r\n    // validate types requirement\r\n    this.validateInputTensorTypes(this.context.graphInputTypes!, inputs);\r\n\r\n    return inputs;\r\n  }\r\n\r\n  private validateInputTensorTypes(graphInputTypes: Tensor.DataType[], givenInputs: Tensor[]) {\r\n    for (let i = 0; i < givenInputs.length; i++) {\r\n      const expectedType = graphInputTypes[i];\r\n      const actualType = givenInputs[i].type;\r\n      if (expectedType !== actualType) {\r\n        throw new Error(`input tensor[${i}] check failed: expected type '${expectedType}' but got ${actualType}`);\r\n      }\r\n    }\r\n  }\r\n\r\n  private validateInputTensorDims(\r\n      graphInputDims: Array<ReadonlyArray<number>>, givenInputs: Tensor[], noneDimSupported: boolean) {\r\n    for (let i = 0; i < givenInputs.length; i++) {\r\n      const expectedDims = graphInputDims[i];\r\n      const actualDims = givenInputs[i].dims;\r\n      if (!this.compareTensorDims(expectedDims, actualDims, noneDimSupported)) {\r\n        throw new Error(`input tensor[${i}] check failed: expected shape '[${expectedDims.join(',')}]' but got [${\r\n            actualDims.join(',')}]`);\r\n      }\r\n    }\r\n  }\r\n\r\n  private compareTensorDims(\r\n      expectedDims: ReadonlyArray<number>, actualDims: ReadonlyArray<number>, noneDimSupported: boolean): boolean {\r\n    if (expectedDims.length !== actualDims.length) {\r\n      return false;\r\n    }\r\n\r\n    for (let i = 0; i < expectedDims.length; ++i) {\r\n      if (expectedDims[i] !== actualDims[i] && (!noneDimSupported || expectedDims[i] !== 0)) {\r\n        // data shape mis-match AND not a 'None' dimension.\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  private createOutput(outputTensors: Tensor[]): Map<string, Tensor> {\r\n    const modelOutputNames = this._model.graph.getOutputNames();\r\n    if (outputTensors.length !== modelOutputNames.length) {\r\n      throw new Error(`expected number of outputs do not match number of generated outputs`);\r\n    }\r\n\r\n    const output = new Map<string, Tensor>();\r\n    for (let i = 0; i < modelOutputNames.length; ++i) {\r\n      output.set(modelOutputNames[i], outputTensors[i]);\r\n    }\r\n\r\n    return output;\r\n  }\r\n\r\n  private initializeOps(graph: Graph): void {\r\n    const nodes = graph.getNodes();\r\n    this._ops = new Array(nodes.length);\r\n\r\n    for (let i = 0; i < nodes.length; i++) {\r\n      this._ops[i] = this.sessionHandler.resolve(nodes[i], this._model.opsets);\r\n    }\r\n  }\r\n\r\n  private _model: Model;\r\n  private _initialized: boolean;\r\n\r\n  private _ops: Operator[];\r\n  private _executionPlan: ExecutionPlan;\r\n\r\n  private backendHint?: string;\r\n\r\n  private sessionHandler: SessionHandlerType;\r\n  private context: Session.Context;\r\n  private profiler: Readonly<Profiler>;\r\n}\r\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors ||\n  function getOwnPropertyDescriptors(obj) {\n    var keys = Object.keys(obj);\n    var descriptors = {};\n    for (var i = 0; i < keys.length; i++) {\n      descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);\n    }\n    return descriptors;\n  };\n\nvar formatRegExp = /%[sdj%]/g;\nexports.format = function(f) {\n  if (!isString(f)) {\n    var objects = [];\n    for (var i = 0; i < arguments.length; i++) {\n      objects.push(inspect(arguments[i]));\n    }\n    return objects.join(' ');\n  }\n\n  var i = 1;\n  var args = arguments;\n  var len = args.length;\n  var str = String(f).replace(formatRegExp, function(x) {\n    if (x === '%%') return '%';\n    if (i >= len) return x;\n    switch (x) {\n      case '%s': return String(args[i++]);\n      case '%d': return Number(args[i++]);\n      case '%j':\n        try {\n          return JSON.stringify(args[i++]);\n        } catch (_) {\n          return '[Circular]';\n        }\n      default:\n        return x;\n    }\n  });\n  for (var x = args[i]; i < len; x = args[++i]) {\n    if (isNull(x) || !isObject(x)) {\n      str += ' ' + x;\n    } else {\n      str += ' ' + inspect(x);\n    }\n  }\n  return str;\n};\n\n\n// Mark that a method should not be used.\n// Returns a modified function which warns once by default.\n// If --no-deprecation is set, then it is a no-op.\nexports.deprecate = function(fn, msg) {\n  if (typeof process !== 'undefined' && process.noDeprecation === true) {\n    return fn;\n  }\n\n  // Allow for deprecating things in the process of starting up.\n  if (typeof process === 'undefined') {\n    return function() {\n      return exports.deprecate(fn, msg).apply(this, arguments);\n    };\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (process.throwDeprecation) {\n        throw new Error(msg);\n      } else if (process.traceDeprecation) {\n        console.trace(msg);\n      } else {\n        console.error(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n};\n\n\nvar debugs = {};\nvar debugEnviron;\nexports.debuglog = function(set) {\n  if (isUndefined(debugEnviron))\n    debugEnviron = process.env.NODE_DEBUG || '';\n  set = set.toUpperCase();\n  if (!debugs[set]) {\n    if (new RegExp('\\\\b' + set + '\\\\b', 'i').test(debugEnviron)) {\n      var pid = process.pid;\n      debugs[set] = function() {\n        var msg = exports.format.apply(exports, arguments);\n        console.error('%s %d: %s', set, pid, msg);\n      };\n    } else {\n      debugs[set] = function() {};\n    }\n  }\n  return debugs[set];\n};\n\n\n/**\n * Echos the value of a value. Trys to print the value out\n * in the best way possible given the different types.\n *\n * @param {Object} obj The object to print out.\n * @param {Object} opts Optional options object that alters the output.\n */\n/* legacy: obj, showHidden, depth, colors*/\nfunction inspect(obj, opts) {\n  // default options\n  var ctx = {\n    seen: [],\n    stylize: stylizeNoColor\n  };\n  // legacy...\n  if (arguments.length >= 3) ctx.depth = arguments[2];\n  if (arguments.length >= 4) ctx.colors = arguments[3];\n  if (isBoolean(opts)) {\n    // legacy...\n    ctx.showHidden = opts;\n  } else if (opts) {\n    // got an \"options\" object\n    exports._extend(ctx, opts);\n  }\n  // set default options\n  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;\n  if (isUndefined(ctx.depth)) ctx.depth = 2;\n  if (isUndefined(ctx.colors)) ctx.colors = false;\n  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;\n  if (ctx.colors) ctx.stylize = stylizeWithColor;\n  return formatValue(ctx, obj, ctx.depth);\n}\nexports.inspect = inspect;\n\n\n// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics\ninspect.colors = {\n  'bold' : [1, 22],\n  'italic' : [3, 23],\n  'underline' : [4, 24],\n  'inverse' : [7, 27],\n  'white' : [37, 39],\n  'grey' : [90, 39],\n  'black' : [30, 39],\n  'blue' : [34, 39],\n  'cyan' : [36, 39],\n  'green' : [32, 39],\n  'magenta' : [35, 39],\n  'red' : [31, 39],\n  'yellow' : [33, 39]\n};\n\n// Don't use 'blue' not visible on cmd.exe\ninspect.styles = {\n  'special': 'cyan',\n  'number': 'yellow',\n  'boolean': 'yellow',\n  'undefined': 'grey',\n  'null': 'bold',\n  'string': 'green',\n  'date': 'magenta',\n  // \"name\": intentionally not styling\n  'regexp': 'red'\n};\n\n\nfunction stylizeWithColor(str, styleType) {\n  var style = inspect.styles[styleType];\n\n  if (style) {\n    return '\\u001b[' + inspect.colors[style][0] + 'm' + str +\n           '\\u001b[' + inspect.colors[style][1] + 'm';\n  } else {\n    return str;\n  }\n}\n\n\nfunction stylizeNoColor(str, styleType) {\n  return str;\n}\n\n\nfunction arrayToHash(array) {\n  var hash = {};\n\n  array.forEach(function(val, idx) {\n    hash[val] = true;\n  });\n\n  return hash;\n}\n\n\nfunction formatValue(ctx, value, recurseTimes) {\n  // Provide a hook for user-specified inspect functions.\n  // Check that value is an object with an inspect function on it\n  if (ctx.customInspect &&\n      value &&\n      isFunction(value.inspect) &&\n      // Filter out the util module, it's inspect function is special\n      value.inspect !== exports.inspect &&\n      // Also filter out any prototype objects using the circular check.\n      !(value.constructor && value.constructor.prototype === value)) {\n    var ret = value.inspect(recurseTimes, ctx);\n    if (!isString(ret)) {\n      ret = formatValue(ctx, ret, recurseTimes);\n    }\n    return ret;\n  }\n\n  // Primitive types cannot have properties\n  var primitive = formatPrimitive(ctx, value);\n  if (primitive) {\n    return primitive;\n  }\n\n  // Look up the keys of the object.\n  var keys = Object.keys(value);\n  var visibleKeys = arrayToHash(keys);\n\n  if (ctx.showHidden) {\n    keys = Object.getOwnPropertyNames(value);\n  }\n\n  // IE doesn't make error fields non-enumerable\n  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx\n  if (isError(value)\n      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {\n    return formatError(value);\n  }\n\n  // Some type of object without properties can be shortcutted.\n  if (keys.length === 0) {\n    if (isFunction(value)) {\n      var name = value.name ? ': ' + value.name : '';\n      return ctx.stylize('[Function' + name + ']', 'special');\n    }\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    }\n    if (isDate(value)) {\n      return ctx.stylize(Date.prototype.toString.call(value), 'date');\n    }\n    if (isError(value)) {\n      return formatError(value);\n    }\n  }\n\n  var base = '', array = false, braces = ['{', '}'];\n\n  // Make Array say that they are Array\n  if (isArray(value)) {\n    array = true;\n    braces = ['[', ']'];\n  }\n\n  // Make functions say that they are functions\n  if (isFunction(value)) {\n    var n = value.name ? ': ' + value.name : '';\n    base = ' [Function' + n + ']';\n  }\n\n  // Make RegExps say that they are RegExps\n  if (isRegExp(value)) {\n    base = ' ' + RegExp.prototype.toString.call(value);\n  }\n\n  // Make dates with properties first say the date\n  if (isDate(value)) {\n    base = ' ' + Date.prototype.toUTCString.call(value);\n  }\n\n  // Make error with message first say the error\n  if (isError(value)) {\n    base = ' ' + formatError(value);\n  }\n\n  if (keys.length === 0 && (!array || value.length == 0)) {\n    return braces[0] + base + braces[1];\n  }\n\n  if (recurseTimes < 0) {\n    if (isRegExp(value)) {\n      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');\n    } else {\n      return ctx.stylize('[Object]', 'special');\n    }\n  }\n\n  ctx.seen.push(value);\n\n  var output;\n  if (array) {\n    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);\n  } else {\n    output = keys.map(function(key) {\n      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);\n    });\n  }\n\n  ctx.seen.pop();\n\n  return reduceToSingleString(output, base, braces);\n}\n\n\nfunction formatPrimitive(ctx, value) {\n  if (isUndefined(value))\n    return ctx.stylize('undefined', 'undefined');\n  if (isString(value)) {\n    var simple = '\\'' + JSON.stringify(value).replace(/^\"|\"$/g, '')\n                                             .replace(/'/g, \"\\\\'\")\n                                             .replace(/\\\\\"/g, '\"') + '\\'';\n    return ctx.stylize(simple, 'string');\n  }\n  if (isNumber(value))\n    return ctx.stylize('' + value, 'number');\n  if (isBoolean(value))\n    return ctx.stylize('' + value, 'boolean');\n  // For some reason typeof null is \"object\", so special case here.\n  if (isNull(value))\n    return ctx.stylize('null', 'null');\n}\n\n\nfunction formatError(value) {\n  return '[' + Error.prototype.toString.call(value) + ']';\n}\n\n\nfunction formatArray(ctx, value, recurseTimes, visibleKeys, keys) {\n  var output = [];\n  for (var i = 0, l = value.length; i < l; ++i) {\n    if (hasOwnProperty(value, String(i))) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          String(i), true));\n    } else {\n      output.push('');\n    }\n  }\n  keys.forEach(function(key) {\n    if (!key.match(/^\\d+$/)) {\n      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,\n          key, true));\n    }\n  });\n  return output;\n}\n\n\nfunction formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {\n  var name, str, desc;\n  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };\n  if (desc.get) {\n    if (desc.set) {\n      str = ctx.stylize('[Getter/Setter]', 'special');\n    } else {\n      str = ctx.stylize('[Getter]', 'special');\n    }\n  } else {\n    if (desc.set) {\n      str = ctx.stylize('[Setter]', 'special');\n    }\n  }\n  if (!hasOwnProperty(visibleKeys, key)) {\n    name = '[' + key + ']';\n  }\n  if (!str) {\n    if (ctx.seen.indexOf(desc.value) < 0) {\n      if (isNull(recurseTimes)) {\n        str = formatValue(ctx, desc.value, null);\n      } else {\n        str = formatValue(ctx, desc.value, recurseTimes - 1);\n      }\n      if (str.indexOf('\\n') > -1) {\n        if (array) {\n          str = str.split('\\n').map(function(line) {\n            return '  ' + line;\n          }).join('\\n').substr(2);\n        } else {\n          str = '\\n' + str.split('\\n').map(function(line) {\n            return '   ' + line;\n          }).join('\\n');\n        }\n      }\n    } else {\n      str = ctx.stylize('[Circular]', 'special');\n    }\n  }\n  if (isUndefined(name)) {\n    if (array && key.match(/^\\d+$/)) {\n      return str;\n    }\n    name = JSON.stringify('' + key);\n    if (name.match(/^\"([a-zA-Z_][a-zA-Z_0-9]*)\"$/)) {\n      name = name.substr(1, name.length - 2);\n      name = ctx.stylize(name, 'name');\n    } else {\n      name = name.replace(/'/g, \"\\\\'\")\n                 .replace(/\\\\\"/g, '\"')\n                 .replace(/(^\"|\"$)/g, \"'\");\n      name = ctx.stylize(name, 'string');\n    }\n  }\n\n  return name + ': ' + str;\n}\n\n\nfunction reduceToSingleString(output, base, braces) {\n  var numLinesEst = 0;\n  var length = output.reduce(function(prev, cur) {\n    numLinesEst++;\n    if (cur.indexOf('\\n') >= 0) numLinesEst++;\n    return prev + cur.replace(/\\u001b\\[\\d\\d?m/g, '').length + 1;\n  }, 0);\n\n  if (length > 60) {\n    return braces[0] +\n           (base === '' ? '' : base + '\\n ') +\n           ' ' +\n           output.join(',\\n  ') +\n           ' ' +\n           braces[1];\n  }\n\n  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];\n}\n\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\nfunction isArray(ar) {\n  return Array.isArray(ar);\n}\nexports.isArray = isArray;\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\nexports.isBoolean = isBoolean;\n\nfunction isNull(arg) {\n  return arg === null;\n}\nexports.isNull = isNull;\n\nfunction isNullOrUndefined(arg) {\n  return arg == null;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\nexports.isNumber = isNumber;\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\nexports.isString = isString;\n\nfunction isSymbol(arg) {\n  return typeof arg === 'symbol';\n}\nexports.isSymbol = isSymbol;\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\nexports.isUndefined = isUndefined;\n\nfunction isRegExp(re) {\n  return isObject(re) && objectToString(re) === '[object RegExp]';\n}\nexports.isRegExp = isRegExp;\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\nexports.isObject = isObject;\n\nfunction isDate(d) {\n  return isObject(d) && objectToString(d) === '[object Date]';\n}\nexports.isDate = isDate;\n\nfunction isError(e) {\n  return isObject(e) &&\n      (objectToString(e) === '[object Error]' || e instanceof Error);\n}\nexports.isError = isError;\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\nexports.isFunction = isFunction;\n\nfunction isPrimitive(arg) {\n  return arg === null ||\n         typeof arg === 'boolean' ||\n         typeof arg === 'number' ||\n         typeof arg === 'string' ||\n         typeof arg === 'symbol' ||  // ES6 symbol\n         typeof arg === 'undefined';\n}\nexports.isPrimitive = isPrimitive;\n\nexports.isBuffer = require('./support/isBuffer');\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n\n\nfunction pad(n) {\n  return n < 10 ? '0' + n.toString(10) : n.toString(10);\n}\n\n\nvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',\n              'Oct', 'Nov', 'Dec'];\n\n// 26 Feb 16:19:34\nfunction timestamp() {\n  var d = new Date();\n  var time = [pad(d.getHours()),\n              pad(d.getMinutes()),\n              pad(d.getSeconds())].join(':');\n  return [d.getDate(), months[d.getMonth()], time].join(' ');\n}\n\n\n// log is just a thin wrapper to console.log that prepends a timestamp\nexports.log = function() {\n  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));\n};\n\n\n/**\n * Inherit the prototype methods from one constructor into another.\n *\n * The Function.prototype.inherits from lang.js rewritten as a standalone\n * function (not on Function.prototype). NOTE: If this file is to be loaded\n * during bootstrapping this function needs to be rewritten using some native\n * functions as prototype setup using normal JavaScript does not work as\n * expected during bootstrapping (see mirror.js in r114903).\n *\n * @param {function} ctor Constructor function which needs to inherit the\n *     prototype.\n * @param {function} superCtor Constructor function to inherit prototype from.\n */\nexports.inherits = require('inherits');\n\nexports._extend = function(origin, add) {\n  // Don't do anything if add isn't an object\n  if (!add || !isObject(add)) return origin;\n\n  var keys = Object.keys(add);\n  var i = keys.length;\n  while (i--) {\n    origin[keys[i]] = add[keys[i]];\n  }\n  return origin;\n};\n\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nvar kCustomPromisifiedSymbol = typeof Symbol !== 'undefined' ? Symbol('util.promisify.custom') : undefined;\n\nexports.promisify = function promisify(original) {\n  if (typeof original !== 'function')\n    throw new TypeError('The \"original\" argument must be of type Function');\n\n  if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {\n    var fn = original[kCustomPromisifiedSymbol];\n    if (typeof fn !== 'function') {\n      throw new TypeError('The \"util.promisify.custom\" argument must be of type Function');\n    }\n    Object.defineProperty(fn, kCustomPromisifiedSymbol, {\n      value: fn, enumerable: false, writable: false, configurable: true\n    });\n    return fn;\n  }\n\n  function fn() {\n    var promiseResolve, promiseReject;\n    var promise = new Promise(function (resolve, reject) {\n      promiseResolve = resolve;\n      promiseReject = reject;\n    });\n\n    var args = [];\n    for (var i = 0; i < arguments.length; i++) {\n      args.push(arguments[i]);\n    }\n    args.push(function (err, value) {\n      if (err) {\n        promiseReject(err);\n      } else {\n        promiseResolve(value);\n      }\n    });\n\n    try {\n      original.apply(this, args);\n    } catch (err) {\n      promiseReject(err);\n    }\n\n    return promise;\n  }\n\n  Object.setPrototypeOf(fn, Object.getPrototypeOf(original));\n\n  if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {\n    value: fn, enumerable: false, writable: false, configurable: true\n  });\n  return Object.defineProperties(\n    fn,\n    getOwnPropertyDescriptors(original)\n  );\n}\n\nexports.promisify.custom = kCustomPromisifiedSymbol\n\nfunction callbackifyOnRejected(reason, cb) {\n  // `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).\n  // Because `null` is a special error value in callbacks which means \"no error\n  // occurred\", we error-wrap so the callback consumer can distinguish between\n  // \"the promise rejected with null\" or \"the promise fulfilled with undefined\".\n  if (!reason) {\n    var newReason = new Error('Promise was rejected with a falsy value');\n    newReason.reason = reason;\n    reason = newReason;\n  }\n  return cb(reason);\n}\n\nfunction callbackify(original) {\n  if (typeof original !== 'function') {\n    throw new TypeError('The \"original\" argument must be of type Function');\n  }\n\n  // We DO NOT return the promise as it gives the user a false sense that\n  // the promise is actually somehow related to the callback's execution\n  // and that the callback throwing will reject the promise.\n  function callbackified() {\n    var args = [];\n    for (var i = 0; i < arguments.length; i++) {\n      args.push(arguments[i]);\n    }\n\n    var maybeCb = args.pop();\n    if (typeof maybeCb !== 'function') {\n      throw new TypeError('The last argument must be of type Function');\n    }\n    var self = this;\n    var cb = function() {\n      return maybeCb.apply(self, arguments);\n    };\n    // In true node style we process the callback on `nextTick` with all the\n    // implications (stack, `uncaughtException`, `async_hooks`)\n    original.apply(this, args)\n      .then(function(ret) { process.nextTick(cb, null, ret) },\n            function(rej) { process.nextTick(callbackifyOnRejected, rej, cb) });\n  }\n\n  Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));\n  Object.defineProperties(callbackified,\n                          getOwnPropertyDescriptors(original));\n  return callbackified;\n}\nexports.callbackify = callbackify;\n","module.exports = function isBuffer(arg) {\n  return arg && typeof arg === 'object'\n    && typeof arg.copy === 'function'\n    && typeof arg.fill === 'function'\n    && typeof arg.readUInt8 === 'function';\n}","if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    var TempCtor = function () {}\n    TempCtor.prototype = superCtor.prototype\n    ctor.prototype = new TempCtor()\n    ctor.prototype.constructor = ctor\n  }\n}\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {Graph} from './graph';\r\nimport {Operator} from './operators';\r\nimport {OpSet} from './opset';\r\nimport {Session} from './session';\r\n\r\nexport interface InferenceHandler {\r\n  /**\r\n   * dispose the inference handler. it will be called as the last step in Session.run()\r\n   */\r\n  dispose(): void;\r\n}\r\n\r\nexport interface SessionHandler {\r\n  /**\r\n   * transform the graph at initialization time\r\n   * @param graphTransformer the graph transformer to manipulate the model graph\r\n   */\r\n  transformGraph?(graphTransformer: Graph.Transformer): void;\r\n\r\n  /**\r\n   * create an instance of InferenceHandler to use in a Session.run() call\r\n   */\r\n  createInferenceHandler(): InferenceHandler;\r\n\r\n  /**\r\n   * dispose the session handler. it will be called when a session is being disposed explicitly\r\n   */\r\n  dispose(): void;\r\n\r\n  /**\r\n   * Resolves the operator from the name and opset version; backend specific\r\n   * @param node\r\n   * @param opsets\r\n   */\r\n\r\n  resolve(node: Graph.Node, opsets: ReadonlyArray<OpSet>): Operator;\r\n  /**\r\n   * This method let's the sessionHandler know that the graph initialization is complete\r\n   * @param graph the completely initialized graph\r\n   */\r\n\r\n  onGraphInitialized?(graph: Graph): void;\r\n\r\n  /**\r\n   * a reference to the corresponding backend\r\n   */\r\n  readonly backend: Backend;\r\n\r\n  /**\r\n   * a reference to the session context\r\n   */\r\n  readonly context: Session.Context;\r\n}\r\n\r\nexport interface Backend {\r\n  /**\r\n   * initialize the backend. will be called only once, when the first time the\r\n   * backend it to be used\r\n   */\r\n  initialize(): boolean|Promise<boolean>;\r\n\r\n  /**\r\n   * create an instance of SessionHandler to use in a Session object's lifecycle\r\n   */\r\n  createSessionHandler(context: Session.Context): SessionHandler;\r\n\r\n  /**\r\n   * dispose the backend. currently this will not be called\r\n   */\r\n  dispose(): void;\r\n}\r\n\r\n// caches all initialized backend instances\r\nconst backendsCache: Map<string, Backend> = new Map();\r\n\r\n/**\r\n * Resolve a reference to the backend. If a hint is specified, the corresponding\r\n * backend will be used.\r\n */\r\nexport async function Backend(hint?: string|ReadonlyArray<string>): Promise<Backend> {\r\n  if (!hint) {\r\n    return Backend(['webgl', 'wasm', 'cpu']);\r\n  } else {\r\n    const hints = typeof hint === 'string' ? [hint] : hint;\r\n\r\n    for (const backendHint of hints) {\r\n      const cache = backendsCache.get(backendHint);\r\n      if (cache) {\r\n        return cache;\r\n      }\r\n\r\n      const backend = await tryLoadBackend(backendHint);\r\n      if (backend) {\r\n        return backend;\r\n      }\r\n    }\r\n  }\r\n\r\n  throw new Error('no available backend to use');\r\n}\r\n\r\nasync function tryLoadBackend(backendHint: string): Promise<Backend|undefined> {\r\n  const backendObj = onnx.backend;\r\n\r\n  if (typeof backendObj[backendHint] !== 'undefined' && isBackend(backendObj[backendHint])) {\r\n    if (!backendObj[backendHint].disabled) {\r\n      const backend = backendObj[backendHint] as Backend;\r\n      let init = backend.initialize();\r\n      if (typeof init === 'object' && 'then' in init) {\r\n        init = await init;\r\n      }\r\n      if (init) {\r\n        backendsCache.set(backendHint, backend);\r\n        return backend;\r\n      }\r\n    }\r\n  }\r\n\r\n  return undefined;\r\n}\r\n\r\nfunction isBackend(obj: unknown) {\r\n  // tslint:disable-next-line:no-any\r\n  const o = obj as any;\r\n\r\n  // check if an object is a Backend instance\r\n  if (\r\n      'initialize' in o && typeof o.initialize === 'function' &&                      // initialize()\r\n      'createSessionHandler' in o && typeof o.createSessionHandler === 'function' &&  // createSessionHandler()\r\n      'dispose' in o && typeof o.dispose === 'function'                               // dispose()\r\n  ) {\r\n    return true;\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nexport type BackendType = Backend;\r\nexport type SessionHandlerType = ReturnType<BackendType['createSessionHandler']>;\r\nexport type InferenceHandlerType = ReturnType<SessionHandlerType['createInferenceHandler']>;\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {SessionHandler} from './backend';\r\nimport {Graph} from './graph';\r\nimport {Logger, Profiler} from './instrument';\r\nimport {Operator} from './operators';\r\nimport {Tensor} from './tensor';\r\n\r\nclass KernelOp {\r\n  constructor(public op: Operator, public node: Graph.Node) {}\r\n}\r\n\r\nexport class ExecutionPlan {\r\n  constructor(private graph: Graph, ops: Operator[], private profiler: Readonly<Profiler>) {\r\n    this.initialize(ops);\r\n  }\r\n\r\n  initialize(ops: Operator[]) {\r\n    this.profiler.event('session', 'ExecutionPlan.initialize', () => {\r\n      const graphNodes = this.graph.getNodes();\r\n      if (graphNodes.length !== ops.length) {\r\n        throw new Error('The size of nodes and OPs do not match.');\r\n      }\r\n\r\n      this._ops = ops.map((op, i) => new KernelOp(op, graphNodes[i]));\r\n      this.reset();\r\n\r\n      // look for starter node(s)\r\n      this._starter = [];\r\n      this._ops.forEach((op, i) => {\r\n        let resolved = true;\r\n        for (const input of op.node.inputs) {\r\n          if (\r\n              !this._values[input]                                   // not an initialized input\r\n              && this.graph.getInputIndices().indexOf(input) === -1  // not model input\r\n          ) {\r\n            resolved = false;\r\n            break;\r\n          }\r\n        }\r\n        if (resolved) {\r\n          this._starter.push(i);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  reset() {\r\n    this._values = this.graph.getValues().map(i => i.tensor);\r\n  }\r\n\r\n  execute(sessionHandler: SessionHandler, modelInputs: Tensor[]): Promise<Tensor[]> {\r\n    return this.profiler.event('session', 'ExecutionPlan.execute', async () => {\r\n      // reset mediem result\r\n      this.reset();\r\n\r\n      // create inference handler\r\n      const inferenceHandler = sessionHandler.createInferenceHandler();\r\n\r\n      // populate inputs value\r\n      const graphInputs = this.graph.getInputIndices();\r\n      if (modelInputs.length !== graphInputs.length) {\r\n        throw new Error(`number of input tensors don't match the number of inputs to the model: actual: ${\r\n            modelInputs.length} expected: ${graphInputs.length}`);\r\n      }\r\n\r\n      modelInputs.forEach((input, i) => {\r\n        const index = graphInputs[i];\r\n        this._values[index] = input;\r\n      });\r\n\r\n      // prepare running sequence\r\n      const sequence: number[] = this._starter.slice(0);\r\n\r\n      // execution iterations\r\n      const graphValues = this.graph.getValues();\r\n      const graphNodes = this.graph.getNodes();\r\n\r\n      let rear = 0;\r\n      while (rear < sequence.length) {\r\n        const thisOpIndex = sequence[rear++];\r\n        const thisOp = this._ops[thisOpIndex];\r\n\r\n        // check input\r\n        const inputList = thisOp.node.inputs.map(i => this._values[i]);\r\n        if (inputList.indexOf(undefined) !== -1) {\r\n          throw new Error(`unresolved input detected: op: ${thisOp.node}`);\r\n        }\r\n\r\n        // run\r\n        const inputTensors = inputList as Tensor[];\r\n        Logger.verbose(\r\n            'ExecPlan',\r\n            `Runing op:${thisOp.node.name} (${\r\n                inputTensors.map((t, i) => `'${thisOp.node.inputs[i]}': ${t.type}[${t.dims.join(',')}]`).join(', ')})`);\r\n\r\n        const outputList = await this.profiler.event('node', thisOp.node.name, async () => {\r\n          const op = thisOp.op;\r\n          if (!op.checkInputs(inputTensors)) {\r\n            throw new Error(`invalid inputs detected; op: ${thisOp.node.name}`);\r\n          }\r\n\r\n          const result = op.run(inferenceHandler, inputTensors);\r\n\r\n          return result;\r\n        });\r\n\r\n        // check output\r\n        if (outputList.length !== thisOp.node.outputs.length) {\r\n          throw new Error('the size of output does not match model definition.');\r\n        }\r\n\r\n        // fill value\r\n        outputList.forEach((output, i) => {\r\n          const j = thisOp.node.outputs[i];\r\n          if (this._values[j]) {\r\n            throw new Error(`output [${j}] already has value: op:${thisOp.node.name}`);\r\n          }\r\n          this._values[j] = output;\r\n        });\r\n\r\n        // resolve downstream nodes\r\n        const downstreamNodes = new Set<number>();\r\n        outputList.forEach((output, i) => {\r\n          const j = thisOp.node.outputs[i];\r\n          for (const currentDownstreamNodeIndex of graphValues[j].to) {\r\n            const currentDownstreamNode = graphNodes[currentDownstreamNodeIndex];\r\n            let resolved = true;\r\n            for (const k of currentDownstreamNode.inputs) {\r\n              if (!this._values[k]) {\r\n                resolved = false;\r\n                break;\r\n              }\r\n            }\r\n            if (resolved) {\r\n              downstreamNodes.add(currentDownstreamNodeIndex);\r\n            }\r\n          }\r\n        });\r\n        sequence.push(...downstreamNodes);\r\n      }\r\n\r\n      const output: Tensor[] = [];\r\n      this.graph.getOutputIndices().forEach((outputIndex, i) => {\r\n        const thisValue = this._values[outputIndex];\r\n        if (thisValue === undefined) {\r\n          throw new Error(`required output [${outputIndex}] does not have value`);\r\n        }\r\n        // tslint:disable-next-line:no-unused-expression-chai\r\n        thisValue.data;\r\n        output.push(thisValue);\r\n      });\r\n      Logger.verbose('ExecPlan', 'disposing of inferenceHandler');\r\n      inferenceHandler.dispose();\r\n      return output;\r\n    });\r\n  }\r\n\r\n  _values: Array<Tensor|undefined>;\r\n  _ops: KernelOp[];\r\n  _starter: number[];\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {onnx} from 'onnx-proto';\r\n\r\nimport {Graph} from './graph';\r\nimport {OpSet} from './opset';\r\nimport {LongUtil} from './util';\r\n\r\nexport class Model {\r\n  // empty model\r\n  constructor() {}\r\n\r\n  load(buf: Buffer, graphInitializer?: Graph.Initializer): void {\r\n    const modelProto = onnx.ModelProto.decode(buf);\r\n    const irVersion = LongUtil.longToNumber(modelProto.irVersion);\r\n    if (irVersion < 3) {\r\n      throw new Error('only support ONNX model with IR_VERSION>=3');\r\n    }\r\n\r\n    this._opsets = modelProto.opsetImport.map(i => {\r\n      return {domain: i.domain as string, version: LongUtil.longToNumber(i.version!)};\r\n    });\r\n\r\n    this._graph = Graph.from(modelProto.graph!, graphInitializer);\r\n  }\r\n\r\n  private _graph: Graph;\r\n  get graph(): Graph {\r\n    return this._graph;\r\n  }\r\n\r\n  private _opsets: OpSet[];\r\n  get opsets(): ReadonlyArray<OpSet> {\r\n    return this._opsets;\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport {onnx} from 'onnx-proto';\r\n\r\nimport {Attribute} from './attribute';\r\nimport {Tensor} from './tensor';\r\nimport {ProtoUtil} from './util';\r\n\r\nexport declare namespace Graph {\r\n  export interface Shape {\r\n    readonly dims: ReadonlyArray<number>;\r\n  }\r\n  export interface ValueType {\r\n    readonly tensorType: Tensor.DataType;\r\n    readonly shape: Shape;\r\n  }\r\n  export interface Value {\r\n    // the tensor data. empty for non-initialized inputs\r\n    readonly tensor?: Tensor;\r\n\r\n    // index to the Node where the value comes from. -1 for initializer.\r\n    readonly from: number;\r\n\r\n    // indices to the Nodes where the values go to.\r\n    readonly to: ReadonlyArray<number>;\r\n\r\n    // value type specification. empty for non-input values.\r\n    readonly type?: ValueType;\r\n  }\r\n  export interface Node {\r\n    // name of the node\r\n    readonly name: string;\r\n\r\n    // the operator type\r\n    readonly opType: string;\r\n\r\n    // indices to the Values where the inputs come from.\r\n    readonly inputs: ReadonlyArray<number>;\r\n\r\n    // indices to the Values where the outpus go to.\r\n    readonly outputs: ReadonlyArray<number>;\r\n\r\n    // the attributes that used by the operator\r\n    readonly attributes: Attribute;\r\n  }\r\n\r\n  /**\r\n   * a Transformer is an instance that allows all possible transformation operations that applied to a graph\r\n   */\r\n  export interface Transformer {\r\n    removeAllIdentityNodes(): void;\r\n    removeAllDropoutNodes(): void;\r\n    // TODO: add generic functions to manipulate the graph\r\n  }\r\n\r\n  // an initializer can use transformer to transform the graph\r\n  export interface Initializer {\r\n    transformGraph(transformer: Transformer): void;\r\n  }\r\n}\r\n\r\nexport interface Graph {\r\n  getInputIndices(): ReadonlyArray<number>;\r\n  getInputNames(): ReadonlyArray<string>;\r\n  getOutputIndices(): ReadonlyArray<number>;\r\n  getOutputNames(): ReadonlyArray<string>;\r\n  getValues(): ReadonlyArray<Graph.Value>;\r\n  getNodes(): ReadonlyArray<Graph.Node>;\r\n}\r\n\r\n// tslint:disable-next-line:variable-name\r\nexport const Graph = {\r\n  /**\r\n   * construct a graph from a graph protobuf type\r\n   */\r\n  from: (graphProto: onnx.IGraphProto, initializer?: Graph.Initializer) => new GraphImpl(graphProto, initializer)\r\n};\r\n\r\nclass Value implements Graph.Value {\r\n  constructor(valueInfo?: onnx.IValueInfoProto) {\r\n    this._from = undefined;\r\n    this._to = [];\r\n    this.tensor = undefined;\r\n    this.type = undefined;\r\n\r\n    if (valueInfo) {\r\n      this.type = ProtoUtil.tensorValueTypeFromProto(valueInfo.type!.tensorType!);\r\n    }\r\n  }\r\n\r\n  _from?: number;  // -1 represent from initializer\r\n  get from() {\r\n    return this._from!;\r\n  }\r\n  _to: number[];\r\n  get to() {\r\n    return this._to;\r\n  }\r\n  type?: Graph.ValueType;\r\n  tensor?: Tensor;\r\n}\r\n\r\nclass Node implements Graph.Node {\r\n  constructor(_nodeProto: onnx.INodeProto) {\r\n    this.name = _nodeProto.name!;\r\n    this.opType = _nodeProto.opType!;\r\n    this.inputs = [];\r\n    this.outputs = [];\r\n    this.attributes = new Attribute(_nodeProto.attribute);\r\n    this.executeNode = true;\r\n  }\r\n\r\n  name: string;\r\n  opType: string;\r\n  inputs: number[];\r\n  outputs: number[];\r\n  attributes: Attribute;\r\n  executeNode: boolean;\r\n}\r\n\r\nclass GraphImpl implements Graph, Graph.Transformer {\r\n  private _allData: Value[];\r\n\r\n  private _allInputIndices: number[];\r\n  private _allInputNames: string[];\r\n\r\n  private _allOutputIndices: number[];\r\n  private _allOutputNames: string[];\r\n\r\n  private _nodes: Node[];\r\n\r\n  constructor(graph: onnx.IGraphProto, graphInitializer?: Graph.Initializer) {\r\n    if (!graph) {\r\n      throw new TypeError('graph is empty');\r\n    }\r\n\r\n    // build the graph - will throw exceptions if something fatal is detected\r\n    this.buildGraph(graph);\r\n\r\n    // execute any transformation logic for the graph (if applicable)\r\n    this.transformGraph(graphInitializer);\r\n\r\n    // check for cycles and other inconsistencies - will throw exceptions if something fatal is detected\r\n    this.checkIsAcyclic();\r\n  }\r\n\r\n  getInputIndices(): ReadonlyArray<number> {\r\n    return this._allInputIndices;\r\n  }\r\n\r\n  getInputNames(): ReadonlyArray<string> {\r\n    return this._allInputNames;\r\n  }\r\n\r\n  getOutputIndices(): ReadonlyArray<number> {\r\n    return this._allOutputIndices;\r\n  }\r\n\r\n  getOutputNames(): ReadonlyArray<string> {\r\n    return this._allOutputNames;\r\n  }\r\n\r\n  getValues(): ReadonlyArray<Graph.Value> {\r\n    return this._allData;\r\n  }\r\n\r\n  getNodes(): ReadonlyArray<Graph.Node> {\r\n    return this._nodes;\r\n  }\r\n\r\n  private buildGraph(graph: onnx.IGraphProto) {\r\n    const dataIndices = new Map<string, number>();\r\n    this._allData = [];\r\n\r\n    this._allInputIndices = [];\r\n    this._allInputNames = [];\r\n\r\n    this._allOutputIndices = [];\r\n    this._allOutputNames = [];\r\n\r\n    this._nodes = [];\r\n\r\n    const nodesIndices = new Map<string, number>();\r\n\r\n    // scan all inputs\r\n    if (!graph.input) {\r\n      throw new Error('missing information in graph: input');\r\n    }\r\n    const inputValueNames = [];\r\n    for (const i of graph.input) {\r\n      if (dataIndices.has(i.name!)) {\r\n        throw new Error(`duplicated input name: ${i.name}`);\r\n      }\r\n      const currentIndex = this._allData.push(new Value(i)) - 1;\r\n      dataIndices.set(i.name!, currentIndex);\r\n      inputValueNames.push(i.name!);\r\n    }\r\n\r\n    // scan all initializers\r\n    if (!graph.initializer) {\r\n      throw new Error('missing information in graph: initializer');\r\n    }\r\n    for (const i of graph.initializer) {\r\n      let index = dataIndices.get(i.name!);\r\n      if (index === undefined) {\r\n        const value = new Value();\r\n        value.type = {\r\n          shape: {dims: ProtoUtil.tensorDimsFromProto(i.dims!)},\r\n          tensorType: ProtoUtil.tensorDataTypeFromProto(i.dataType!)\r\n        };\r\n        index = this._allData.push(value) - 1;\r\n        dataIndices.set(i.name!, index);\r\n      }\r\n      this._allData[index]._from = -1;\r\n      this._allData[index].tensor = Tensor.fromProto(i);\r\n    }\r\n\r\n    // filter out input indices\r\n    for (let i = 0; i < this._allData.length; i++) {\r\n      if (!this._allData[i].tensor) {\r\n        this._allInputIndices.push(i);\r\n        this._allInputNames.push(inputValueNames[i]);\r\n      }\r\n    }\r\n\r\n    // scan all outputs\r\n    if (!graph.output) {\r\n      throw new Error('missing information in graph: output');\r\n    }\r\n    for (const i of graph.output) {\r\n      if (dataIndices.has(i.name!)) {\r\n        throw new Error(`duplicated output name: ${i.name}`);\r\n      }\r\n      const currentIndex = this._allData.push(new Value(i)) - 1;\r\n      dataIndices.set(i.name!, currentIndex);\r\n      this._allOutputIndices.push(currentIndex);\r\n      this._allOutputNames.push(i.name!);\r\n    }\r\n\r\n    // scan all nodes\r\n    if (!graph.node) {\r\n      throw new Error('missing information in graph: node');\r\n    }\r\n    for (const nodeProto of graph.node) {\r\n      if (!nodeProto.name) {\r\n        // assign a name to the node if it doesn't have one\r\n        for (let pick = 0;; pick++) {\r\n          const name = `unnamed_${nodeProto.opType}_${pick}`;\r\n          if (!nodesIndices.has(name)) {\r\n            nodeProto.name = name;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (nodesIndices.has(nodeProto.name)) {\r\n        throw new Error(`duplicated node name: ${nodeProto.name}`);\r\n      }\r\n      const currentIndex = this._nodes.push(new Node(nodeProto)) - 1;\r\n      nodesIndices.set(nodeProto.name, currentIndex);\r\n    }\r\n\r\n    // scan node's outputs\r\n    for (let i = 0; i < this._nodes.length; i++) {\r\n      const node = this._nodes[i];\r\n      const nodeProto = graph.node[i];\r\n      if (!nodeProto.output) {\r\n        throw new Error(`missing output for node: ${nodeProto.name}`);\r\n      }\r\n      for (const output of nodeProto.output) {\r\n        let dataIndex = dataIndices.get(output);\r\n        if (typeof dataIndex === 'undefined') {\r\n          dataIndex = this._allData.push(new Value()) - 1;\r\n          dataIndices.set(output, dataIndex);\r\n        }\r\n        node.outputs.push(dataIndex);\r\n\r\n        if (this._allData[dataIndex]._from !== undefined) {\r\n          throw new Error(`multiple nodes output to one data value: ${dataIndex}`);\r\n        }\r\n        this._allData[dataIndex]._from = i;\r\n\r\n        // for the 'Constant' operator, just create a new edge in the graph corresponding to the 'output' of the\r\n        // operator and ignore the node from the graph\r\n        if (nodeProto.opType === 'Constant') {\r\n          if (!nodeProto.attribute || nodeProto.attribute.length !== 1 || !nodeProto.attribute[0].t) {\r\n            throw new Error(`missing attributes or missing tensor value in attributes for this Constant operator`);\r\n          }\r\n          if (!nodeProto.output || nodeProto.output.length !== 1) {\r\n            throw new Error(`missing output or incorrect number of outputs for this Constant operator`);\r\n          }\r\n          node.outputs.pop();\r\n          node.executeNode = false;\r\n\r\n          this._allData[dataIndex]._from = -1;\r\n          this._allData[dataIndex].tensor = Tensor.fromProto(nodeProto.attribute[0].t);\r\n        }\r\n      }\r\n    }\r\n\r\n    // scan node's inputs\r\n    for (let i = 0; i < this._nodes.length; i++) {\r\n      const node = this._nodes[i];\r\n      const nodeProto = graph.node[i];\r\n\r\n      if (!nodeProto.input) {\r\n        throw new Error(`missing input for node: ${nodeProto.name}`);\r\n      }\r\n      for (const input of nodeProto.input) {\r\n        const dataIndex = dataIndices.get(input);\r\n        if (typeof dataIndex === 'undefined') {\r\n          throw new Error(`unrecognized input '${input}' for node: ${nodeProto.name}`);\r\n        }\r\n        node.inputs.push(dataIndex);\r\n\r\n        this._allData[dataIndex]._to.push(i);\r\n      }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  private checkIsAcyclic() {\r\n    // go through the graph and check for cycles or other fatal inconsistencies\r\n    const starters: Set<number> = new Set<number>();\r\n    this._allInputIndices.forEach(i => {\r\n      const data = this._allData[i];\r\n      data._to.forEach(j => {\r\n        starters.add(j);\r\n      });\r\n    });\r\n\r\n    // Iterative DFS to check for cycles\r\n    const nodesStack = Array.from(starters);\r\n    const nodesState = new Array<string>(this._nodes.length).fill('white');\r\n\r\n    while (nodesStack.length > 0) {\r\n      const nodeIndex = nodesStack.pop()!;\r\n      // this node has now been processed completely. Mark this node 'black' to denote this.\r\n      if (nodesState[nodeIndex] === 'gray') {\r\n        nodesState[nodeIndex] = 'black';\r\n      } else {\r\n        // this node is under processing stage. mark this node 'gray' to denote this.\r\n        nodesStack.push(nodeIndex);\r\n        nodesState[nodeIndex] = 'gray';\r\n\r\n        this._nodes[nodeIndex].outputs.forEach((outgoingEdgeIndex) => {\r\n          const data = this._allData[outgoingEdgeIndex];\r\n          if (typeof data.tensor !== 'undefined') {\r\n            throw new Error(`node outputs should not be initialized`);\r\n          }\r\n          if (data._from !== nodeIndex) {\r\n            throw new Error(`from property of the Value object doesn't match index of Node being processed`);\r\n          }\r\n          data._to.forEach((downstreamNodeIndex) => {\r\n            // back edge found - cyclic\r\n            if (nodesState[downstreamNodeIndex] === 'gray') {\r\n              throw new Error(`model graph is cyclic`);\r\n            }\r\n            // tree edge found - continue processing by adding it to stack\r\n            else if (nodesState[downstreamNodeIndex] === 'white') {\r\n              nodesStack.push(downstreamNodeIndex);\r\n            }\r\n          });\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  private transformGraph(graphInitializer?: Graph.Initializer): void {\r\n    // apply common transform\r\n    this.removeAllIdentityNodes();\r\n    this.removeAllDropoutNodes();\r\n\r\n    // apply initializer specific transform\r\n    if (graphInitializer) {\r\n      graphInitializer.transformGraph(this);\r\n    }\r\n\r\n    // finalize graph\r\n    this.finalizeGraph();\r\n  }\r\n\r\n  /**\r\n   * finalize the graph.\r\n   *\r\n   * this function should be called after all the transformation completed.\r\n   * this function removes all unnecessary nodes and values from the graph\r\n   */\r\n  finalizeGraph() {\r\n    let offset = 0;\r\n    // delete all nodes that are not being executed\r\n    for (let i = 0; i < this._nodes.length; i++) {\r\n      if (!this._nodes[i].executeNode) {\r\n        // delete this node and shift all subsequent nodes up\r\n        offset++;\r\n        // delete all output values\r\n        this._nodes[i].outputs.forEach(ind => {\r\n          this._allData[ind]._from = -2;\r\n        });\r\n        this._nodes.splice(i, 1);\r\n        i--;\r\n        continue;\r\n      }\r\n      if (offset > 0) {\r\n        // update the value table\r\n        this._nodes[i].inputs.forEach(value => {\r\n          const ind = this._allData[value]._to.indexOf(i + offset);\r\n          if (ind !== -1) {\r\n            this._allData[value]._to[ind] = i;\r\n          }\r\n        });\r\n        this._nodes[i].outputs.forEach(value => {\r\n          if (this._allData[value]._from && this._allData[value]._from! === i + offset) {\r\n            this._allData[value]._from! = i;\r\n          }\r\n        });\r\n      }\r\n    }\r\n    offset = 0;\r\n    // delete all values that are not being referenced\r\n    for (let i = 0; i < this._allData.length; i++) {\r\n      // if current value is neither linked to next node, nor an output value, remove it.\r\n      if (this._allData[i].from === -2 && this._allOutputIndices.indexOf(i + offset) === -1) {\r\n        offset++;\r\n        this._allData.splice(i, 1);\r\n        i--;\r\n        continue;\r\n      }\r\n      if (offset > 0) {\r\n        let ind = -1;\r\n        // if current value is neither an input value nor an initializer, find the node it's\r\n        // coming from and update the corresponding node output\r\n        if (this._allData[i].from !== undefined && this._allData[i].from !== -1) {\r\n          ind = this._nodes[this._allData[i].from].outputs.indexOf(i + offset);\r\n          if (ind !== -1) {\r\n            this._nodes[this._allData[i].from].outputs[ind] = i;\r\n          }\r\n        } else {\r\n          // if current value is an input value, update its reference in inputIndices\r\n          ind = this._allInputIndices.indexOf(i + offset);\r\n          if (ind !== -1) {\r\n            this._allInputIndices[ind] = i;\r\n          }\r\n        }\r\n\r\n        // find the node that the current value is linking to and update its input reference\r\n        this._allData[i].to.forEach(node => {\r\n          ind = this._nodes[node].inputs.indexOf(i + offset);\r\n          if (ind !== -1) {\r\n            this._nodes[node].inputs[ind] = i;\r\n          }\r\n        });\r\n        if (this._allData[i].to.length === 0) {\r\n          // if current value is a graph output, update its reference in outputIndices\r\n          ind = this._allOutputIndices.indexOf(i + offset);\r\n          if (ind !== -1) {\r\n            this._allOutputIndices[ind] = i;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Delete the specifed node. Assume the node has only one input and the first output connected to other nodes\r\n   * @param nodeIndex The index of node to be deleted\r\n   */\r\n  private deleteNode(nodeIndex: number) {\r\n    const node = this._nodes[nodeIndex];\r\n    if (node.inputs.length > 1) {\r\n      throw new Error(`Node deletion with multiple inputs is not supported. `);\r\n    }\r\n    if (node.outputs.length > 1) {\r\n      for (let i = 1; i < node.outputs.length; i++) {\r\n        if (this._allData[node.outputs[i]].to.length > 0) {\r\n          throw new Error(`Node deletion with more than one output connected to other nodes is not supported. `);\r\n        }\r\n      }\r\n    }\r\n\r\n    // this node wil not be executed\r\n    node.executeNode = false;\r\n    const inputValueIndex = node.inputs[0];\r\n    const outputValueIndex = node.outputs[0];\r\n    const nodesConsumingOutput = this._allData[outputValueIndex].to;\r\n\r\n    // remove this node from the to property of the input Value\r\n    const delIndex = this._allData[inputValueIndex].to.indexOf(nodeIndex);\r\n    // should not happen\r\n    if (delIndex === -1) {\r\n      throw new Error(`The Value object doesn't have the current Node in it's 'to' property `);\r\n    }\r\n    this._allData[inputValueIndex].to.splice(delIndex, 1);\r\n\r\n    // clear node indices consuming this output Value\r\n    this._allData[outputValueIndex]._to = [];\r\n\r\n    // if the output of this node is a graph output, adjust the index appropriately\r\n    const index = this._allOutputIndices.indexOf(outputValueIndex);\r\n    if (index !== -1) {\r\n      this._allOutputIndices[index] = inputValueIndex;\r\n    }\r\n\r\n    // override the inputs for nodes consuming this node's output with the input to this node\r\n    if (nodesConsumingOutput && nodesConsumingOutput.length > 0) {\r\n      for (const nodeIndex of nodesConsumingOutput) {\r\n        const replaceIndex = this._nodes[nodeIndex].inputs.indexOf(outputValueIndex);\r\n        // should not happen\r\n        if (replaceIndex === -1) {\r\n          throw new Error(`The Node object doesn't have the output Value in it's 'inputs' property `);\r\n        }\r\n        this._nodes[nodeIndex].inputs[replaceIndex] = inputValueIndex;\r\n        this._allData[inputValueIndex].to.push(nodeIndex);\r\n      }\r\n    }\r\n  }\r\n\r\n  removeAllDropoutNodes() {\r\n    let nodeIndex = 0;\r\n    for (const node of this._nodes) {\r\n      // weed out 'Dropout' nodes so that no time is wasted in execution\r\n      if (node.opType === 'Dropout') {\r\n        // the node should have exactly 1 input and 1 or 2 outputs\r\n        if (node.inputs.length !== 1) {\r\n          throw new Error(`Dropout nodes should only contain one input. `);\r\n        }\r\n        if (node.outputs.length !== 1 && node.outputs.length !== 2) {\r\n          throw new Error(`Dropout nodes should contain either 1 or 2 output(s)`);\r\n        }\r\n        // the second output should not be referenced by any other node\r\n        if (node.outputs.length === 2 && this._allData[node.outputs[1]]._to.length !== 0) {\r\n          throw new Error(`Dropout nodes's second output should not be referenced by other nodes`);\r\n        }\r\n        this.deleteNode(nodeIndex);\r\n      }\r\n      nodeIndex++;\r\n    }\r\n  }\r\n\r\n  removeAllIdentityNodes() {\r\n    let nodeIndex = 0;\r\n    for (const node of this._nodes) {\r\n      // weed out 'Identity' nodes so that no time is wasted in execution\r\n      if (node.opType === 'Identity') {\r\n        this.deleteNode(nodeIndex);\r\n      }\r\n      nodeIndex++;\r\n    }\r\n  }\r\n}\r\n","// Copyright (c) Microsoft Corporation. All rights reserved.\r\n// Licensed under the MIT license.\r\n\r\nimport Long from 'long';\r\nimport {onnx} from 'onnx-proto';\r\n\r\nimport {Tensor} from './tensor';\r\nimport {LongUtil} from './util';\r\n\r\nexport declare namespace Attribute {\r\n  export interface DataTypeMap {\r\n    float: number;\r\n    int: number;\r\n    string: string;\r\n    tensor: Tensor;\r\n    floats: number[];\r\n    ints: number[];\r\n    strings: string[];\r\n    tensors: Tensor[];\r\n  }\r\n\r\n  export type DataType = keyof DataTypeMap;\r\n}\r\n\r\ntype ValueTypes = Attribute.DataTypeMap[Attribute.DataType];\r\n\r\ntype Value = [ValueTypes, Attribute.DataType];\r\n\r\nexport class Attribute {\r\n  constructor(attributes: onnx.IAttributeProto[]|null|undefined) {\r\n    this._attributes = new Map();\r\n    if (attributes !== null && attributes !== undefined) {\r\n      for (const attr of attributes) {\r\n        this._attributes.set(attr.name!, [Attribute.getValue(attr), Attribute.getType(attr)]);\r\n      }\r\n\r\n      if (this._attributes.size < attributes.length) {\r\n        throw new Error('duplicated attribute names');\r\n      }\r\n    }\r\n  }\r\n\r\n  set(key: string, type: Attribute.DataType, value: ValueTypes): void {\r\n    this._attributes.set(key, [value, type]);\r\n  }\r\n  delete(key: string): void {\r\n    this._attributes.delete(key);\r\n  }\r\n  getFloat(key: string, defaultValue?: Attribute.DataTypeMap['float']) {\r\n    return this.get(key, 'float', defaultValue);\r\n  }\r\n\r\n  getInt(key: string, defaultValue?: Attribute.DataTypeMap['int']) {\r\n    return this.get(key, 'int', defaultValue);\r\n  }\r\n\r\n  getString(key: string, defaultValue?: Attribute.DataTypeMap['string']) {\r\n    return this.get(key, 'string', defaultValue);\r\n  }\r\n\r\n  getTensor(key: string, defaultValue?: Attribute.DataTypeMap['tensor']) {\r\n    return this.get(key, 'tensor', defaultValue);\r\n  }\r\n\r\n  getFloats(key: string, defaultValue?: Attribute.DataTypeMap['floats']) {\r\n    return this.get(key, 'floats', defaultValue);\r\n  }\r\n\r\n  getInts(key: string, defaultValue?: Attribute.DataTypeMap['ints']) {\r\n    return this.get(key, 'ints', defaultValue);\r\n  }\r\n\r\n  getStrings(key: string, defaultValue?: Attribute.DataTypeMap['strings']) {\r\n    return this.get(key, 'strings', defaultValue);\r\n  }\r\n\r\n  getTensors(key: string, defaultValue?: Attribute.DataTypeMap['tensors']) {\r\n    return this.get(key, 'tensors', defaultValue);\r\n  }\r\n\r\n  private get<V extends Attribute.DataTypeMap[Attribute.DataType]>(\r\n      key: string, type: Attribute.DataType, defaultValue?: V): V {\r\n    const valueAndType = this._attributes.get(key);\r\n    if (valueAndType === undefined) {\r\n      if (defaultValue !== undefined) {\r\n        return defaultValue;\r\n      }\r\n      throw new Error(`required attribute not found: ${key}`);\r\n    }\r\n    if (valueAndType[1] !== type) {\r\n      throw new Error(`type mismatch: expected ${type} but got ${valueAndType[1]}`);\r\n    }\r\n    return valueAndType[0] as V;\r\n  }\r\n\r\n  private static getType(attr: onnx.IAttributeProto): Attribute.DataType {\r\n    switch (attr.type!) {\r\n      case onnx.AttributeProto.AttributeType.FLOAT:\r\n        return 'float';\r\n      case onnx.AttributeProto.AttributeType.INT:\r\n        return 'int';\r\n      case onnx.AttributeProto.AttributeType.STRING:\r\n        return 'string';\r\n      case onnx.AttributeProto.AttributeType.TENSOR:\r\n        return 'tensor';\r\n      case onnx.AttributeProto.AttributeType.FLOATS:\r\n        return 'floats';\r\n      case onnx.AttributeProto.AttributeType.INTS:\r\n        return 'ints';\r\n      case onnx.AttributeProto.AttributeType.STRINGS:\r\n        return 'strings';\r\n      case onnx.AttributeProto.AttributeType.TENSORS:\r\n        return 'tensors';\r\n      default:\r\n        throw new Error(`attribute type is not supported yet: ${onnx.AttributeProto.AttributeType[attr.type!]}`);\r\n    }\r\n  }\r\n\r\n  private static getValue(attr: onnx.IAttributeProto) {\r\n    if (attr.type === onnx.AttributeProto.AttributeType.GRAPH ||\r\n        attr.type === onnx.AttributeProto.AttributeType.GRAPHS) {\r\n      throw new Error('graph attribute is not supported yet');\r\n    }\r\n\r\n    const value = this.getValueNoCheck(attr);\r\n\r\n    // cast LONG to number\r\n    if (attr.type === onnx.AttributeProto.AttributeType.INT && Long.isLong(value)) {\r\n      return (value as Long).toNumber();\r\n    }\r\n\r\n    // cast LONG[] to number[]\r\n    if (attr.type === onnx.AttributeProto.AttributeType.INTS) {\r\n      const arr = (value as Array<number|Long>);\r\n      const numberValue: number[] = new Array<number>(arr.length);\r\n\r\n      for (let i = 0; i < arr.length; i++) {\r\n        const maybeLong = arr[i];\r\n        numberValue[i] = LongUtil.longToNumber(maybeLong);\r\n      }\r\n\r\n      return numberValue;\r\n    }\r\n\r\n    // cast onnx.TensorProto to onnxjs.Tensor\r\n    if (attr.type === onnx.AttributeProto.AttributeType.TENSOR) {\r\n      return Tensor.fromProto(value as onnx.ITensorProto);\r\n    }\r\n\r\n    // cast onnx.TensorProto[] to onnxjs.Tensor[]\r\n    if (attr.type === onnx.AttributeProto.AttributeType.TENSORS) {\r\n      const tensorProtos = value as onnx.ITensorProto[];\r\n      return tensorProtos.map(value => Tensor.fromProto(value));\r\n    }\r\n\r\n    // cast Uint8Array to string\r\n    if (attr.type === onnx.AttributeProto.AttributeType.STRING) {\r\n      const utf8String = value as Uint8Array;\r\n      return Buffer.from(utf8String.buffer, utf8String.byteOffset, utf8String.byteLength).toString();\r\n    }\r\n\r\n    // cast Uint8Array[] to string[]\r\n    if (attr.type === onnx.AttributeProto.AttributeType.STRINGS) {\r\n      const utf8Strings = value as Uint8Array[];\r\n      return utf8Strings.map(\r\n          utf8String => Buffer.from(utf8String.buffer, utf8String.byteOffset, utf8String.byteLength).toString());\r\n    }\r\n\r\n    return value as ValueTypes;\r\n  }\r\n\r\n  private static getValueNoCheck(attr: onnx.IAttributeProto) {\r\n    switch (attr.type!) {\r\n      case onnx.AttributeProto.AttributeType.FLOAT:\r\n        return attr.f;\r\n      case onnx.AttributeProto.AttributeType.INT:\r\n        return attr.i;\r\n      case onnx.AttributeProto.AttributeType.STRING:\r\n        return attr.s;\r\n      case onnx.AttributeProto.AttributeType.TENSOR:\r\n        return attr.t;\r\n      case onnx.AttributeProto.AttributeType.GRAPH:\r\n        return attr.g;\r\n      case onnx.AttributeProto.AttributeType.FLOATS:\r\n        return attr.floats;\r\n      case onnx.AttributeProto.AttributeType.INTS:\r\n        return attr.ints;\r\n      case onnx.AttributeProto.AttributeType.STRINGS:\r\n        return attr.strings;\r\n      case onnx.AttributeProto.AttributeType.TENSORS:\r\n        return attr.tensors;\r\n      case onnx.AttributeProto.AttributeType.GRAPHS:\r\n        return attr.graphs;\r\n      default:\r\n        throw new Error(`unsupported attribute type: ${onnx.AttributeProto.AttributeType[attr.type!]}`);\r\n    }\r\n  }\r\n\r\n  protected _attributes: Map<string, Value>;\r\n}\r\n","// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nvar global = module.exports = typeof window != 'undefined' && window.Math == Math\n  ? window : typeof self != 'undefined' && self.Math == Math ? self\n  // eslint-disable-next-line no-new-func\n  : Function('return this')();\nif (typeof __g == 'number') __g = global; // eslint-disable-line no-undef\n","var hasOwnProperty = {}.hasOwnProperty;\nmodule.exports = function (it, key) {\n  return hasOwnProperty.call(it, key);\n};\n","module.exports = function (exec) {\n  try {\n    return !!exec();\n  } catch (e) {\n    return true;\n  }\n};\n","// Thank's IE8 for his funny defineProperty\nmodule.exports = !require('./_fails')(function () {\n  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;\n});\n","var core = module.exports = { version: '2.6.11' };\nif (typeof __e == 'number') __e = core; // eslint-disable-line no-undef\n","module.exports = function (it) {\n  return typeof it === 'object' ? it !== null : typeof it === 'function';\n};\n","var isObject = require('./_is-object');\nmodule.exports = function (it) {\n  if (!isObject(it)) throw TypeError(it + ' is not an object!');\n  return it;\n};\n","var isObject = require('./_is-object');\nvar document = require('./_global').document;\n// typeof document.createElement is 'object' in old IE\nvar is = isObject(document) && isObject(document.createElement);\nmodule.exports = function (it) {\n  return is ? document.createElement(it) : {};\n};\n","module.exports = !require('./_descriptors') && !require('./_fails')(function () {\n  return Object.defineProperty(require('./_dom-create')('div'), 'a', { get: function () { return 7; } }).a != 7;\n});\n","// 7.1.1 ToPrimitive(input [, PreferredType])\nvar isObject = require('./_is-object');\n// instead of the ES6 spec version, we didn't implement @@toPrimitive case\n// and the second argument - flag - preferred type is a string\nmodule.exports = function (it, S) {\n  if (!isObject(it)) return it;\n  var fn, val;\n  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  throw TypeError(\"Can't convert object to primitive value\");\n};\n","var anObject = require('./_an-object');\nvar IE8_DOM_DEFINE = require('./_ie8-dom-define');\nvar toPrimitive = require('./_to-primitive');\nvar dP = Object.defineProperty;\n\nexports.f = require('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes) {\n  anObject(O);\n  P = toPrimitive(P, true);\n  anObject(Attributes);\n  if (IE8_DOM_DEFINE) try {\n    return dP(O, P, Attributes);\n  } catch (e) { /* empty */ }\n  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');\n  if ('value' in Attributes) O[P] = Attributes.value;\n  return O;\n};\n","module.exports = function (bitmap, value) {\n  return {\n    enumerable: !(bitmap & 1),\n    configurable: !(bitmap & 2),\n    writable: !(bitmap & 4),\n    value: value\n  };\n};\n","var dP = require('./_object-dp');\nvar createDesc = require('./_property-desc');\nmodule.exports = require('./_descriptors') ? function (object, key, value) {\n  return dP.f(object, key, createDesc(1, value));\n} : function (object, key, value) {\n  object[key] = value;\n  return object;\n};\n","var id = 0;\nvar px = Math.random();\nmodule.exports = function (key) {\n  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));\n};\n","module.exports = false;\n","var core = require('./_core');\nvar global = require('./_global');\nvar SHARED = '__core-js_shared__';\nvar store = global[SHARED] || (global[SHARED] = {});\n\n(module.exports = function (key, value) {\n  return store[key] || (store[key] = value !== undefined ? value : {});\n})('versions', []).push({\n  version: core.version,\n  mode: require('./_library') ? 'pure' : 'global',\n  copyright: '© 2019 Denis Pushkarev (zloirock.ru)'\n});\n","module.exports = require('./_shared')('native-function-to-string', Function.toString);\n","var global = require('./_global');\nvar hide = require('./_hide');\nvar has = require('./_has');\nvar SRC = require('./_uid')('src');\nvar $toString = require('./_function-to-string');\nvar TO_STRING = 'toString';\nvar TPL = ('' + $toString).split(TO_STRING);\n\nrequire('./_core').inspectSource = function (it) {\n  return $toString.call(it);\n};\n\n(module.exports = function (O, key, val, safe) {\n  var isFunction = typeof val == 'function';\n  if (isFunction) has(val, 'name') || hide(val, 'name', key);\n  if (O[key] === val) return;\n  if (isFunction) has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));\n  if (O === global) {\n    O[key] = val;\n  } else if (!safe) {\n    delete O[key];\n    hide(O, key, val);\n  } else if (O[key]) {\n    O[key] = val;\n  } else {\n    hide(O, key, val);\n  }\n// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative\n})(Function.prototype, TO_STRING, function toString() {\n  return typeof this == 'function' && this[SRC] || $toString.call(this);\n});\n","module.exports = function (it) {\n  if (typeof it != 'function') throw TypeError(it + ' is not a function!');\n  return it;\n};\n","// optional / simple context binding\nvar aFunction = require('./_a-function');\nmodule.exports = function (fn, that, length) {\n  aFunction(fn);\n  if (that === undefined) return fn;\n  switch (length) {\n    case 1: return function (a) {\n      return fn.call(that, a);\n    };\n    case 2: return function (a, b) {\n      return fn.call(that, a, b);\n    };\n    case 3: return function (a, b, c) {\n      return fn.call(that, a, b, c);\n    };\n  }\n  return function (/* ...args */) {\n    return fn.apply(that, arguments);\n  };\n};\n","var global = require('./_global');\nvar core = require('./_core');\nvar hide = require('./_hide');\nvar redefine = require('./_redefine');\nvar ctx = require('./_ctx');\nvar PROTOTYPE = 'prototype';\n\nvar $export = function (type, name, source) {\n  var IS_FORCED = type & $export.F;\n  var IS_GLOBAL = type & $export.G;\n  var IS_STATIC = type & $export.S;\n  var IS_PROTO = type & $export.P;\n  var IS_BIND = type & $export.B;\n  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE];\n  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});\n  var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});\n  var key, own, out, exp;\n  if (IS_GLOBAL) source = name;\n  for (key in source) {\n    // contains in native\n    own = !IS_FORCED && target && target[key] !== undefined;\n    // export native or passed\n    out = (own ? target : source)[key];\n    // bind timers to global for call from export context\n    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;\n    // extend global\n    if (target) redefine(target, key, out, type & $export.U);\n    // export\n    if (exports[key] != out) hide(exports, key, exp);\n    if (IS_PROTO && expProto[key] != out) expProto[key] = out;\n  }\n};\nglobal.core = core;\n// type bitmap\n$export.F = 1;   // forced\n$export.G = 2;   // global\n$export.S = 4;   // static\n$export.P = 8;   // proto\n$export.B = 16;  // bind\n$export.W = 32;  // wrap\n$export.U = 64;  // safe\n$export.R = 128; // real proto method for `library`\nmodule.exports = $export;\n","var META = require('./_uid')('meta');\nvar isObject = require('./_is-object');\nvar has = require('./_has');\nvar setDesc = require('./_object-dp').f;\nvar id = 0;\nvar isExtensible = Object.isExtensible || function () {\n  return true;\n};\nvar FREEZE = !require('./_fails')(function () {\n  return isExtensible(Object.preventExtensions({}));\n});\nvar setMeta = function (it) {\n  setDesc(it, META, { value: {\n    i: 'O' + ++id, // object ID\n    w: {}          // weak collections IDs\n  } });\n};\nvar fastKey = function (it, create) {\n  // return primitive with prefix\n  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;\n  if (!has(it, META)) {\n    // can't set metadata to uncaught frozen object\n    if (!isExtensible(it)) return 'F';\n    // not necessary to add metadata\n    if (!create) return 'E';\n    // add missing metadata\n    setMeta(it);\n  // return object ID\n  } return it[META].i;\n};\nvar getWeak = function (it, create) {\n  if (!has(it, META)) {\n    // can't set metadata to uncaught frozen object\n    if (!isExtensible(it)) return true;\n    // not necessary to add metadata\n    if (!create) return false;\n    // add missing metadata\n    setMeta(it);\n  // return hash weak collections IDs\n  } return it[META].w;\n};\n// add metadata on freeze-family methods calling\nvar onFreeze = function (it) {\n  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);\n  return it;\n};\nvar meta = module.exports = {\n  KEY: META,\n  NEED: false,\n  fastKey: fastKey,\n  getWeak: getWeak,\n  onFreeze: onFreeze\n};\n","var store = require('./_shared')('wks');\nvar uid = require('./_uid');\nvar Symbol = require('./_global').Symbol;\nvar USE_SYMBOL = typeof Symbol == 'function';\n\nvar $exports = module.exports = function (name) {\n  return store[name] || (store[name] =\n    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));\n};\n\n$exports.store = store;\n","var def = require('./_object-dp').f;\nvar has = require('./_has');\nvar TAG = require('./_wks')('toStringTag');\n\nmodule.exports = function (it, tag, stat) {\n  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });\n};\n","exports.f = require('./_wks');\n","var global = require('./_global');\nvar core = require('./_core');\nvar LIBRARY = require('./_library');\nvar wksExt = require('./_wks-ext');\nvar defineProperty = require('./_object-dp').f;\nmodule.exports = function (name) {\n  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});\n  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });\n};\n","var toString = {}.toString;\n\nmodule.exports = function (it) {\n  return toString.call(it).slice(8, -1);\n};\n","// fallback for non-array-like ES3 and non-enumerable old V8 strings\nvar cof = require('./_cof');\n// eslint-disable-next-line no-prototype-builtins\nmodule.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {\n  return cof(it) == 'String' ? it.split('') : Object(it);\n};\n","// 7.2.1 RequireObjectCoercible(argument)\nmodule.exports = function (it) {\n  if (it == undefined) throw TypeError(\"Can't call method on  \" + it);\n  return it;\n};\n","// to indexed object, toObject with fallback for non-array-like ES3 strings\nvar IObject = require('./_iobject');\nvar defined = require('./_defined');\nmodule.exports = function (it) {\n  return IObject(defined(it));\n};\n","// 7.1.4 ToInteger\nvar ceil = Math.ceil;\nvar floor = Math.floor;\nmodule.exports = function (it) {\n  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);\n};\n","// 7.1.15 ToLength\nvar toInteger = require('./_to-integer');\nvar min = Math.min;\nmodule.exports = function (it) {\n  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991\n};\n","var toInteger = require('./_to-integer');\nvar max = Math.max;\nvar min = Math.min;\nmodule.exports = function (index, length) {\n  index = toInteger(index);\n  return index < 0 ? max(index + length, 0) : min(index, length);\n};\n","// false -> Array#indexOf\n// true  -> Array#includes\nvar toIObject = require('./_to-iobject');\nvar toLength = require('./_to-length');\nvar toAbsoluteIndex = require('./_to-absolute-index');\nmodule.exports = function (IS_INCLUDES) {\n  return function ($this, el, fromIndex) {\n    var O = toIObject($this);\n    var length = toLength(O.length);\n    var index = toAbsoluteIndex(fromIndex, length);\n    var value;\n    // Array#includes uses SameValueZero equality algorithm\n    // eslint-disable-next-line no-self-compare\n    if (IS_INCLUDES && el != el) while (length > index) {\n      value = O[index++];\n      // eslint-disable-next-line no-self-compare\n      if (value != value) return true;\n    // Array#indexOf ignores holes, Array#includes - not\n    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {\n      if (O[index] === el) return IS_INCLUDES || index || 0;\n    } return !IS_INCLUDES && -1;\n  };\n};\n","var shared = require('./_shared')('keys');\nvar uid = require('./_uid');\nmodule.exports = function (key) {\n  return shared[key] || (shared[key] = uid(key));\n};\n","var has = require('./_has');\nvar toIObject = require('./_to-iobject');\nvar arrayIndexOf = require('./_array-includes')(false);\nvar IE_PROTO = require('./_shared-key')('IE_PROTO');\n\nmodule.exports = function (object, names) {\n  var O = toIObject(object);\n  var i = 0;\n  var result = [];\n  var key;\n  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);\n  // Don't enum bug & hidden keys\n  while (names.length > i) if (has(O, key = names[i++])) {\n    ~arrayIndexOf(result, key) || result.push(key);\n  }\n  return result;\n};\n","// IE 8- don't enum bug keys\nmodule.exports = (\n  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'\n).split(',');\n","// 19.1.2.14 / 15.2.3.14 Object.keys(O)\nvar $keys = require('./_object-keys-internal');\nvar enumBugKeys = require('./_enum-bug-keys');\n\nmodule.exports = Object.keys || function keys(O) {\n  return $keys(O, enumBugKeys);\n};\n","exports.f = Object.getOwnPropertySymbols;\n","exports.f = {}.propertyIsEnumerable;\n","// all enumerable object keys, includes symbols\nvar getKeys = require('./_object-keys');\nvar gOPS = require('./_object-gops');\nvar pIE = require('./_object-pie');\nmodule.exports = function (it) {\n  var result = getKeys(it);\n  var getSymbols = gOPS.f;\n  if (getSymbols) {\n    var symbols = getSymbols(it);\n    var isEnum = pIE.f;\n    var i = 0;\n    var key;\n    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);\n  } return result;\n};\n","// 7.2.2 IsArray(argument)\nvar cof = require('./_cof');\nmodule.exports = Array.isArray || function isArray(arg) {\n  return cof(arg) == 'Array';\n};\n","// 7.1.13 ToObject(argument)\nvar defined = require('./_defined');\nmodule.exports = function (it) {\n  return Object(defined(it));\n};\n","var dP = require('./_object-dp');\nvar anObject = require('./_an-object');\nvar getKeys = require('./_object-keys');\n\nmodule.exports = require('./_descriptors') ? Object.defineProperties : function defineProperties(O, Properties) {\n  anObject(O);\n  var keys = getKeys(Properties);\n  var length = keys.length;\n  var i = 0;\n  var P;\n  while (length > i) dP.f(O, P = keys[i++], Properties[P]);\n  return O;\n};\n","var document = require('./_global').document;\nmodule.exports = document && document.documentElement;\n","// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\nvar anObject = require('./_an-object');\nvar dPs = require('./_object-dps');\nvar enumBugKeys = require('./_enum-bug-keys');\nvar IE_PROTO = require('./_shared-key')('IE_PROTO');\nvar Empty = function () { /* empty */ };\nvar PROTOTYPE = 'prototype';\n\n// Create object with fake `null` prototype: use iframe Object with cleared prototype\nvar createDict = function () {\n  // Thrash, waste and sodomy: IE GC bug\n  var iframe = require('./_dom-create')('iframe');\n  var i = enumBugKeys.length;\n  var lt = '<';\n  var gt = '>';\n  var iframeDocument;\n  iframe.style.display = 'none';\n  require('./_html').appendChild(iframe);\n  iframe.src = 'javascript:'; // eslint-disable-line no-script-url\n  // createDict = iframe.contentWindow.Object;\n  // html.removeChild(iframe);\n  iframeDocument = iframe.contentWindow.document;\n  iframeDocument.open();\n  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);\n  iframeDocument.close();\n  createDict = iframeDocument.F;\n  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];\n  return createDict();\n};\n\nmodule.exports = Object.create || function create(O, Properties) {\n  var result;\n  if (O !== null) {\n    Empty[PROTOTYPE] = anObject(O);\n    result = new Empty();\n    Empty[PROTOTYPE] = null;\n    // add \"__proto__\" for Object.getPrototypeOf polyfill\n    result[IE_PROTO] = O;\n  } else result = createDict();\n  return Properties === undefined ? result : dPs(result, Properties);\n};\n","// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)\nvar $keys = require('./_object-keys-internal');\nvar hiddenKeys = require('./_enum-bug-keys').concat('length', 'prototype');\n\nexports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {\n  return $keys(O, hiddenKeys);\n};\n","// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window\nvar toIObject = require('./_to-iobject');\nvar gOPN = require('./_object-gopn').f;\nvar toString = {}.toString;\n\nvar windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames\n  ? Object.getOwnPropertyNames(window) : [];\n\nvar getWindowNames = function (it) {\n  try {\n    return gOPN(it);\n  } catch (e) {\n    return windowNames.slice();\n  }\n};\n\nmodule.exports.f = function getOwnPropertyNames(it) {\n  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));\n};\n","var pIE = require('./_object-pie');\nvar createDesc = require('./_property-desc');\nvar toIObject = require('./_to-iobject');\nvar toPrimitive = require('./_to-primitive');\nvar has = require('./_has');\nvar IE8_DOM_DEFINE = require('./_ie8-dom-define');\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nexports.f = require('./_descriptors') ? gOPD : function getOwnPropertyDescriptor(O, P) {\n  O = toIObject(O);\n  P = toPrimitive(P, true);\n  if (IE8_DOM_DEFINE) try {\n    return gOPD(O, P);\n  } catch (e) { /* empty */ }\n  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);\n};\n","'use strict';\n// ECMAScript 6 symbols shim\nvar global = require('./_global');\nvar has = require('./_has');\nvar DESCRIPTORS = require('./_descriptors');\nvar $export = require('./_export');\nvar redefine = require('./_redefine');\nvar META = require('./_meta').KEY;\nvar $fails = require('./_fails');\nvar shared = require('./_shared');\nvar setToStringTag = require('./_set-to-string-tag');\nvar uid = require('./_uid');\nvar wks = require('./_wks');\nvar wksExt = require('./_wks-ext');\nvar wksDefine = require('./_wks-define');\nvar enumKeys = require('./_enum-keys');\nvar isArray = require('./_is-array');\nvar anObject = require('./_an-object');\nvar isObject = require('./_is-object');\nvar toObject = require('./_to-object');\nvar toIObject = require('./_to-iobject');\nvar toPrimitive = require('./_to-primitive');\nvar createDesc = require('./_property-desc');\nvar _create = require('./_object-create');\nvar gOPNExt = require('./_object-gopn-ext');\nvar $GOPD = require('./_object-gopd');\nvar $GOPS = require('./_object-gops');\nvar $DP = require('./_object-dp');\nvar $keys = require('./_object-keys');\nvar gOPD = $GOPD.f;\nvar dP = $DP.f;\nvar gOPN = gOPNExt.f;\nvar $Symbol = global.Symbol;\nvar $JSON = global.JSON;\nvar _stringify = $JSON && $JSON.stringify;\nvar PROTOTYPE = 'prototype';\nvar HIDDEN = wks('_hidden');\nvar TO_PRIMITIVE = wks('toPrimitive');\nvar isEnum = {}.propertyIsEnumerable;\nvar SymbolRegistry = shared('symbol-registry');\nvar AllSymbols = shared('symbols');\nvar OPSymbols = shared('op-symbols');\nvar ObjectProto = Object[PROTOTYPE];\nvar USE_NATIVE = typeof $Symbol == 'function' && !!$GOPS.f;\nvar QObject = global.QObject;\n// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173\nvar setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;\n\n// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687\nvar setSymbolDesc = DESCRIPTORS && $fails(function () {\n  return _create(dP({}, 'a', {\n    get: function () { return dP(this, 'a', { value: 7 }).a; }\n  })).a != 7;\n}) ? function (it, key, D) {\n  var protoDesc = gOPD(ObjectProto, key);\n  if (protoDesc) delete ObjectProto[key];\n  dP(it, key, D);\n  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);\n} : dP;\n\nvar wrap = function (tag) {\n  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);\n  sym._k = tag;\n  return sym;\n};\n\nvar isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {\n  return typeof it == 'symbol';\n} : function (it) {\n  return it instanceof $Symbol;\n};\n\nvar $defineProperty = function defineProperty(it, key, D) {\n  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);\n  anObject(it);\n  key = toPrimitive(key, true);\n  anObject(D);\n  if (has(AllSymbols, key)) {\n    if (!D.enumerable) {\n      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));\n      it[HIDDEN][key] = true;\n    } else {\n      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;\n      D = _create(D, { enumerable: createDesc(0, false) });\n    } return setSymbolDesc(it, key, D);\n  } return dP(it, key, D);\n};\nvar $defineProperties = function defineProperties(it, P) {\n  anObject(it);\n  var keys = enumKeys(P = toIObject(P));\n  var i = 0;\n  var l = keys.length;\n  var key;\n  while (l > i) $defineProperty(it, key = keys[i++], P[key]);\n  return it;\n};\nvar $create = function create(it, P) {\n  return P === undefined ? _create(it) : $defineProperties(_create(it), P);\n};\nvar $propertyIsEnumerable = function propertyIsEnumerable(key) {\n  var E = isEnum.call(this, key = toPrimitive(key, true));\n  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;\n  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;\n};\nvar $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {\n  it = toIObject(it);\n  key = toPrimitive(key, true);\n  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;\n  var D = gOPD(it, key);\n  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;\n  return D;\n};\nvar $getOwnPropertyNames = function getOwnPropertyNames(it) {\n  var names = gOPN(toIObject(it));\n  var result = [];\n  var i = 0;\n  var key;\n  while (names.length > i) {\n    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);\n  } return result;\n};\nvar $getOwnPropertySymbols = function getOwnPropertySymbols(it) {\n  var IS_OP = it === ObjectProto;\n  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));\n  var result = [];\n  var i = 0;\n  var key;\n  while (names.length > i) {\n    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);\n  } return result;\n};\n\n// 19.4.1.1 Symbol([description])\nif (!USE_NATIVE) {\n  $Symbol = function Symbol() {\n    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');\n    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);\n    var $set = function (value) {\n      if (this === ObjectProto) $set.call(OPSymbols, value);\n      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;\n      setSymbolDesc(this, tag, createDesc(1, value));\n    };\n    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });\n    return wrap(tag);\n  };\n  redefine($Symbol[PROTOTYPE], 'toString', function toString() {\n    return this._k;\n  });\n\n  $GOPD.f = $getOwnPropertyDescriptor;\n  $DP.f = $defineProperty;\n  require('./_object-gopn').f = gOPNExt.f = $getOwnPropertyNames;\n  require('./_object-pie').f = $propertyIsEnumerable;\n  $GOPS.f = $getOwnPropertySymbols;\n\n  if (DESCRIPTORS && !require('./_library')) {\n    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);\n  }\n\n  wksExt.f = function (name) {\n    return wrap(wks(name));\n  };\n}\n\n$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });\n\nfor (var es6Symbols = (\n  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14\n  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'\n).split(','), j = 0; es6Symbols.length > j;)wks(es6Symbols[j++]);\n\nfor (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);\n\n$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {\n  // 19.4.2.1 Symbol.for(key)\n  'for': function (key) {\n    return has(SymbolRegistry, key += '')\n      ? SymbolRegistry[key]\n      : SymbolRegistry[key] = $Symbol(key);\n  },\n  // 19.4.2.5 Symbol.keyFor(sym)\n  keyFor: function keyFor(sym) {\n    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');\n    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;\n  },\n  useSetter: function () { setter = true; },\n  useSimple: function () { setter = false; }\n});\n\n$export($export.S + $export.F * !USE_NATIVE, 'Object', {\n  // 19.1.2.2 Object.create(O [, Properties])\n  create: $create,\n  // 19.1.2.4 Object.defineProperty(O, P, Attributes)\n  defineProperty: $defineProperty,\n  // 19.1.2.3 Object.defineProperties(O, Properties)\n  defineProperties: $defineProperties,\n  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)\n  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,\n  // 19.1.2.7 Object.getOwnPropertyNames(O)\n  getOwnPropertyNames: $getOwnPropertyNames,\n  // 19.1.2.8 Object.getOwnPropertySymbols(O)\n  getOwnPropertySymbols: $getOwnPropertySymbols\n});\n\n// Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives\n// https://bugs.chromium.org/p/v8/issues/detail?id=3443\nvar FAILS_ON_PRIMITIVES = $fails(function () { $GOPS.f(1); });\n\n$export($export.S + $export.F * FAILS_ON_PRIMITIVES, 'Object', {\n  getOwnPropertySymbols: function getOwnPropertySymbols(it) {\n    return $GOPS.f(toObject(it));\n  }\n});\n\n// 24.3.2 JSON.stringify(value [, replacer [, space]])\n$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {\n  var S = $Symbol();\n  // MS Edge converts symbol values to JSON as {}\n  // WebKit converts symbol values to JSON as null\n  // V8 throws on boxed symbols\n  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';\n})), 'JSON', {\n  stringify: function stringify(it) {\n    var args = [it];\n    var i = 1;\n    var replacer, $replacer;\n    while (arguments.length > i) args.push(arguments[i++]);\n    $replacer = replacer = args[1];\n    if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined\n    if (!isArray(replacer)) replacer = function (key, value) {\n      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);\n      if (!isSymbol(value)) return value;\n    };\n    args[1] = replacer;\n    return _stringify.apply($JSON, args);\n  }\n});\n\n// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)\n$Symbol[PROTOTYPE][TO_PRIMITIVE] || require('./_hide')($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);\n// 19.4.3.5 Symbol.prototype[@@toStringTag]\nsetToStringTag($Symbol, 'Symbol');\n// 20.2.1.9 Math[@@toStringTag]\nsetToStringTag(Math, 'Math', true);\n// 24.3.3 JSON[@@toStringTag]\nsetToStringTag(global.JSON, 'JSON', true);\n","var $export = require('./_export');\n// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\n$export($export.S, 'Object', { create: require('./_object-create') });\n","var $export = require('./_export');\n// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)\n$export($export.S + $export.F * !require('./_descriptors'), 'Object', { defineProperty: require('./_object-dp').f });\n","var $export = require('./_export');\n// 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)\n$export($export.S + $export.F * !require('./_descriptors'), 'Object', { defineProperties: require('./_object-dps') });\n","// most Object methods by ES6 should accept primitives\nvar $export = require('./_export');\nvar core = require('./_core');\nvar fails = require('./_fails');\nmodule.exports = function (KEY, exec) {\n  var fn = (core.Object || {})[KEY] || Object[KEY];\n  var exp = {};\n  exp[KEY] = exec(fn);\n  $export($export.S + $export.F * fails(function () { fn(1); }), 'Object', exp);\n};\n","// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)\nvar toIObject = require('./_to-iobject');\nvar $getOwnPropertyDescriptor = require('./_object-gopd').f;\n\nrequire('./_object-sap')('getOwnPropertyDescriptor', function () {\n  return function getOwnPropertyDescriptor(it, key) {\n    return $getOwnPropertyDescriptor(toIObject(it), key);\n  };\n});\n","// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)\nvar has = require('./_has');\nvar toObject = require('./_to-object');\nvar IE_PROTO = require('./_shared-key')('IE_PROTO');\nvar ObjectProto = Object.prototype;\n\nmodule.exports = Object.getPrototypeOf || function (O) {\n  O = toObject(O);\n  if (has(O, IE_PROTO)) return O[IE_PROTO];\n  if (typeof O.constructor == 'function' && O instanceof O.constructor) {\n    return O.constructor.prototype;\n  } return O instanceof Object ? ObjectProto : null;\n};\n","// 19.1.2.9 Object.getPrototypeOf(O)\nvar toObject = require('./_to-object');\nvar $getPrototypeOf = require('./_object-gpo');\n\nrequire('./_object-sap')('getPrototypeOf', function () {\n  return function getPrototypeOf(it) {\n    return $getPrototypeOf(toObject(it));\n  };\n});\n","// 19.1.2.14 Object.keys(O)\nvar toObject = require('./_to-object');\nvar $keys = require('./_object-keys');\n\nrequire('./_object-sap')('keys', function () {\n  return function keys(it) {\n    return $keys(toObject(it));\n  };\n});\n","// 19.1.2.7 Object.getOwnPropertyNames(O)\nrequire('./_object-sap')('getOwnPropertyNames', function () {\n  return require('./_object-gopn-ext').f;\n});\n","// 19.1.2.5 Object.freeze(O)\nvar isObject = require('./_is-object');\nvar meta = require('./_meta').onFreeze;\n\nrequire('./_object-sap')('freeze', function ($freeze) {\n  return function freeze(it) {\n    return $freeze && isObject(it) ? $freeze(meta(it)) : it;\n  };\n});\n","// 19.1.2.17 Object.seal(O)\nvar isObject = require('./_is-object');\nvar meta = require('./_meta').onFreeze;\n\nrequire('./_object-sap')('seal', function ($seal) {\n  return function seal(it) {\n    return $seal && isObject(it) ? $seal(meta(it)) : it;\n  };\n});\n","// 19.1.2.15 Object.preventExtensions(O)\nvar isObject = require('./_is-object');\nvar meta = require('./_meta').onFreeze;\n\nrequire('./_object-sap')('preventExtensions', function ($preventExtensions) {\n  return function preventExtensions(it) {\n    return $preventExtensions && isObject(it) ? $preventExtensions(meta(it)) : it;\n  };\n});\n","// 19.1.2.12 Object.isFrozen(O)\nvar isObject = require('./_is-object');\n\nrequire('./_object-sap')('isFrozen', function ($isFrozen) {\n  return function isFrozen(it) {\n    return isObject(it) ? $isFrozen ? $isFrozen(it) : false : true;\n  };\n});\n","// 19.1.2.13 Object.isSealed(O)\nvar isObject = require('./_is-object');\n\nrequire('./_object-sap')('isSealed', function ($isSealed) {\n  return function isSealed(it) {\n    return isObject(it) ? $isSealed ? $isSealed(it) : false : true;\n  };\n});\n","// 19.1.2.11 Object.isExtensible(O)\nvar isObject = require('./_is-object');\n\nrequire('./_object-sap')('isExtensible', function ($isExtensible) {\n  return function isExtensible(it) {\n    return isObject(it) ? $isExtensible ? $isExtensible(it) : true : false;\n  };\n});\n","'use strict';\n// 19.1.2.1 Object.assign(target, source, ...)\nvar DESCRIPTORS = require('./_descriptors');\nvar getKeys = require('./_object-keys');\nvar gOPS = require('./_object-gops');\nvar pIE = require('./_object-pie');\nvar toObject = require('./_to-object');\nvar IObject = require('./_iobject');\nvar $assign = Object.assign;\n\n// should work with symbols and should have deterministic property order (V8 bug)\nmodule.exports = !$assign || require('./_fails')(function () {\n  var A = {};\n  var B = {};\n  // eslint-disable-next-line no-undef\n  var S = Symbol();\n  var K = 'abcdefghijklmnopqrst';\n  A[S] = 7;\n  K.split('').forEach(function (k) { B[k] = k; });\n  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;\n}) ? function assign(target, source) { // eslint-disable-line no-unused-vars\n  var T = toObject(target);\n  var aLen = arguments.length;\n  var index = 1;\n  var getSymbols = gOPS.f;\n  var isEnum = pIE.f;\n  while (aLen > index) {\n    var S = IObject(arguments[index++]);\n    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);\n    var length = keys.length;\n    var j = 0;\n    var key;\n    while (length > j) {\n      key = keys[j++];\n      if (!DESCRIPTORS || isEnum.call(S, key)) T[key] = S[key];\n    }\n  } return T;\n} : $assign;\n","// 19.1.3.1 Object.assign(target, source)\nvar $export = require('./_export');\n\n$export($export.S + $export.F, 'Object', { assign: require('./_object-assign') });\n","// 7.2.9 SameValue(x, y)\nmodule.exports = Object.is || function is(x, y) {\n  // eslint-disable-next-line no-self-compare\n  return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;\n};\n","// 19.1.3.10 Object.is(value1, value2)\nvar $export = require('./_export');\n$export($export.S, 'Object', { is: require('./_same-value') });\n","// Works with __proto__ only. Old v8 can't work with null proto objects.\n/* eslint-disable no-proto */\nvar isObject = require('./_is-object');\nvar anObject = require('./_an-object');\nvar check = function (O, proto) {\n  anObject(O);\n  if (!isObject(proto) && proto !== null) throw TypeError(proto + \": can't set as prototype!\");\n};\nmodule.exports = {\n  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line\n    function (test, buggy, set) {\n      try {\n        set = require('./_ctx')(Function.call, require('./_object-gopd').f(Object.prototype, '__proto__').set, 2);\n        set(test, []);\n        buggy = !(test instanceof Array);\n      } catch (e) { buggy = true; }\n      return function setPrototypeOf(O, proto) {\n        check(O, proto);\n        if (buggy) O.__proto__ = proto;\n        else set(O, proto);\n        return O;\n      };\n    }({}, false) : undefined),\n  check: check\n};\n","// 19.1.3.19 Object.setPrototypeOf(O, proto)\nvar $export = require('./_export');\n$export($export.S, 'Object', { setPrototypeOf: require('./_set-proto').set });\n","// getting tag from 19.1.3.6 Object.prototype.toString()\nvar cof = require('./_cof');\nvar TAG = require('./_wks')('toStringTag');\n// ES3 wrong here\nvar ARG = cof(function () { return arguments; }()) == 'Arguments';\n\n// fallback for IE11 Script Access Denied error\nvar tryGet = function (it, key) {\n  try {\n    return it[key];\n  } catch (e) { /* empty */ }\n};\n\nmodule.exports = function (it) {\n  var O, T, B;\n  return it === undefined ? 'Undefined' : it === null ? 'Null'\n    // @@toStringTag case\n    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T\n    // builtinTag case\n    : ARG ? cof(O)\n    // ES3 arguments fallback\n    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;\n};\n","'use strict';\n// 19.1.3.6 Object.prototype.toString()\nvar classof = require('./_classof');\nvar test = {};\ntest[require('./_wks')('toStringTag')] = 'z';\nif (test + '' != '[object z]') {\n  require('./_redefine')(Object.prototype, 'toString', function toString() {\n    return '[object ' + classof(this) + ']';\n  }, true);\n}\n","// fast apply, http://jsperf.lnkit.com/fast-apply/5\nmodule.exports = function (fn, args, that) {\n  var un = that === undefined;\n  switch (args.length) {\n    case 0: return un ? fn()\n                      : fn.call(that);\n    case 1: return un ? fn(args[0])\n                      : fn.call(that, args[0]);\n    case 2: return un ? fn(args[0], args[1])\n                      : fn.call(that, args[0], args[1]);\n    case 3: return un ? fn(args[0], args[1], args[2])\n                      : fn.call(that, args[0], args[1], args[2]);\n    case 4: return un ? fn(args[0], args[1], args[2], args[3])\n                      : fn.call(that, args[0], args[1], args[2], args[3]);\n  } return fn.apply(that, args);\n};\n","'use strict';\nvar aFunction = require('./_a-function');\nvar isObject = require('./_is-object');\nvar invoke = require('./_invoke');\nvar arraySlice = [].slice;\nvar factories = {};\n\nvar construct = function (F, len, args) {\n  if (!(len in factories)) {\n    for (var n = [], i = 0; i < len; i++) n[i] = 'a[' + i + ']';\n    // eslint-disable-next-line no-new-func\n    factories[len] = Function('F,a', 'return new F(' + n.join(',') + ')');\n  } return factories[len](F, args);\n};\n\nmodule.exports = Function.bind || function bind(that /* , ...args */) {\n  var fn = aFunction(this);\n  var partArgs = arraySlice.call(arguments, 1);\n  var bound = function (/* args... */) {\n    var args = partArgs.concat(arraySlice.call(arguments));\n    return this instanceof bound ? construct(fn, args.length, args) : invoke(fn, args, that);\n  };\n  if (isObject(fn.prototype)) bound.prototype = fn.prototype;\n  return bound;\n};\n","// 19.2.3.2 / 15.3.4.5 Function.prototype.bind(thisArg, args...)\nvar $export = require('./_export');\n\n$export($export.P, 'Function', { bind: require('./_bind') });\n","var dP = require('./_object-dp').f;\nvar FProto = Function.prototype;\nvar nameRE = /^\\s*function ([^ (]*)/;\nvar NAME = 'name';\n\n// 19.2.4.2 name\nNAME in FProto || require('./_descriptors') && dP(FProto, NAME, {\n  configurable: true,\n  get: function () {\n    try {\n      return ('' + this).match(nameRE)[1];\n    } catch (e) {\n      return '';\n    }\n  }\n});\n","'use strict';\nvar isObject = require('./_is-object');\nvar getPrototypeOf = require('./_object-gpo');\nvar HAS_INSTANCE = require('./_wks')('hasInstance');\nvar FunctionProto = Function.prototype;\n// 19.2.3.6 Function.prototype[@@hasInstance](V)\nif (!(HAS_INSTANCE in FunctionProto)) require('./_object-dp').f(FunctionProto, HAS_INSTANCE, { value: function (O) {\n  if (typeof this != 'function' || !isObject(O)) return false;\n  if (!isObject(this.prototype)) return O instanceof this;\n  // for environment w/o native `@@hasInstance` logic enough `instanceof`, but add this:\n  while (O = getPrototypeOf(O)) if (this.prototype === O) return true;\n  return false;\n} });\n","module.exports = '\\x09\\x0A\\x0B\\x0C\\x0D\\x20\\xA0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003' +\n  '\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028\\u2029\\uFEFF';\n","var $export = require('./_export');\nvar defined = require('./_defined');\nvar fails = require('./_fails');\nvar spaces = require('./_string-ws');\nvar space = '[' + spaces + ']';\nvar non = '\\u200b\\u0085';\nvar ltrim = RegExp('^' + space + space + '*');\nvar rtrim = RegExp(space + space + '*$');\n\nvar exporter = function (KEY, exec, ALIAS) {\n  var exp = {};\n  var FORCE = fails(function () {\n    return !!spaces[KEY]() || non[KEY]() != non;\n  });\n  var fn = exp[KEY] = FORCE ? exec(trim) : spaces[KEY];\n  if (ALIAS) exp[ALIAS] = fn;\n  $export($export.P + $export.F * FORCE, 'String', exp);\n};\n\n// 1 -> String#trimLeft\n// 2 -> String#trimRight\n// 3 -> String#trim\nvar trim = exporter.trim = function (string, TYPE) {\n  string = String(defined(string));\n  if (TYPE & 1) string = string.replace(ltrim, '');\n  if (TYPE & 2) string = string.replace(rtrim, '');\n  return string;\n};\n\nmodule.exports = exporter;\n","var $parseInt = require('./_global').parseInt;\nvar $trim = require('./_string-trim').trim;\nvar ws = require('./_string-ws');\nvar hex = /^[-+]?0[xX]/;\n\nmodule.exports = $parseInt(ws + '08') !== 8 || $parseInt(ws + '0x16') !== 22 ? function parseInt(str, radix) {\n  var string = $trim(String(str), 3);\n  return $parseInt(string, (radix >>> 0) || (hex.test(string) ? 16 : 10));\n} : $parseInt;\n","var $export = require('./_export');\nvar $parseInt = require('./_parse-int');\n// 18.2.5 parseInt(string, radix)\n$export($export.G + $export.F * (parseInt != $parseInt), { parseInt: $parseInt });\n","var $parseFloat = require('./_global').parseFloat;\nvar $trim = require('./_string-trim').trim;\n\nmodule.exports = 1 / $parseFloat(require('./_string-ws') + '-0') !== -Infinity ? function parseFloat(str) {\n  var string = $trim(String(str), 3);\n  var result = $parseFloat(string);\n  return result === 0 && string.charAt(0) == '-' ? -0 : result;\n} : $parseFloat;\n","var $export = require('./_export');\nvar $parseFloat = require('./_parse-float');\n// 18.2.4 parseFloat(string)\n$export($export.G + $export.F * (parseFloat != $parseFloat), { parseFloat: $parseFloat });\n","var isObject = require('./_is-object');\nvar setPrototypeOf = require('./_set-proto').set;\nmodule.exports = function (that, target, C) {\n  var S = target.constructor;\n  var P;\n  if (S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf) {\n    setPrototypeOf(that, P);\n  } return that;\n};\n","'use strict';\nvar global = require('./_global');\nvar has = require('./_has');\nvar cof = require('./_cof');\nvar inheritIfRequired = require('./_inherit-if-required');\nvar toPrimitive = require('./_to-primitive');\nvar fails = require('./_fails');\nvar gOPN = require('./_object-gopn').f;\nvar gOPD = require('./_object-gopd').f;\nvar dP = require('./_object-dp').f;\nvar $trim = require('./_string-trim').trim;\nvar NUMBER = 'Number';\nvar $Number = global[NUMBER];\nvar Base = $Number;\nvar proto = $Number.prototype;\n// Opera ~12 has broken Object#toString\nvar BROKEN_COF = cof(require('./_object-create')(proto)) == NUMBER;\nvar TRIM = 'trim' in String.prototype;\n\n// 7.1.3 ToNumber(argument)\nvar toNumber = function (argument) {\n  var it = toPrimitive(argument, false);\n  if (typeof it == 'string' && it.length > 2) {\n    it = TRIM ? it.trim() : $trim(it, 3);\n    var first = it.charCodeAt(0);\n    var third, radix, maxCode;\n    if (first === 43 || first === 45) {\n      third = it.charCodeAt(2);\n      if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix\n    } else if (first === 48) {\n      switch (it.charCodeAt(1)) {\n        case 66: case 98: radix = 2; maxCode = 49; break; // fast equal /^0b[01]+$/i\n        case 79: case 111: radix = 8; maxCode = 55; break; // fast equal /^0o[0-7]+$/i\n        default: return +it;\n      }\n      for (var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++) {\n        code = digits.charCodeAt(i);\n        // parseInt parses a string to a first unavailable symbol\n        // but ToNumber should return NaN if a string contains unavailable symbols\n        if (code < 48 || code > maxCode) return NaN;\n      } return parseInt(digits, radix);\n    }\n  } return +it;\n};\n\nif (!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')) {\n  $Number = function Number(value) {\n    var it = arguments.length < 1 ? 0 : value;\n    var that = this;\n    return that instanceof $Number\n      // check on 1..constructor(foo) case\n      && (BROKEN_COF ? fails(function () { proto.valueOf.call(that); }) : cof(that) != NUMBER)\n        ? inheritIfRequired(new Base(toNumber(it)), that, $Number) : toNumber(it);\n  };\n  for (var keys = require('./_descriptors') ? gOPN(Base) : (\n    // ES3:\n    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +\n    // ES6 (in case, if modules with ES6 Number statics required before):\n    'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +\n    'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'\n  ).split(','), j = 0, key; keys.length > j; j++) {\n    if (has(Base, key = keys[j]) && !has($Number, key)) {\n      dP($Number, key, gOPD(Base, key));\n    }\n  }\n  $Number.prototype = proto;\n  proto.constructor = $Number;\n  require('./_redefine')(global, NUMBER, $Number);\n}\n","var cof = require('./_cof');\nmodule.exports = function (it, msg) {\n  if (typeof it != 'number' && cof(it) != 'Number') throw TypeError(msg);\n  return +it;\n};\n","'use strict';\nvar toInteger = require('./_to-integer');\nvar defined = require('./_defined');\n\nmodule.exports = function repeat(count) {\n  var str = String(defined(this));\n  var res = '';\n  var n = toInteger(count);\n  if (n < 0 || n == Infinity) throw RangeError(\"Count can't be negative\");\n  for (;n > 0; (n >>>= 1) && (str += str)) if (n & 1) res += str;\n  return res;\n};\n","'use strict';\nvar $export = require('./_export');\nvar toInteger = require('./_to-integer');\nvar aNumberValue = require('./_a-number-value');\nvar repeat = require('./_string-repeat');\nvar $toFixed = 1.0.toFixed;\nvar floor = Math.floor;\nvar data = [0, 0, 0, 0, 0, 0];\nvar ERROR = 'Number.toFixed: incorrect invocation!';\nvar ZERO = '0';\n\nvar multiply = function (n, c) {\n  var i = -1;\n  var c2 = c;\n  while (++i < 6) {\n    c2 += n * data[i];\n    data[i] = c2 % 1e7;\n    c2 = floor(c2 / 1e7);\n  }\n};\nvar divide = function (n) {\n  var i = 6;\n  var c = 0;\n  while (--i >= 0) {\n    c += data[i];\n    data[i] = floor(c / n);\n    c = (c % n) * 1e7;\n  }\n};\nvar numToString = function () {\n  var i = 6;\n  var s = '';\n  while (--i >= 0) {\n    if (s !== '' || i === 0 || data[i] !== 0) {\n      var t = String(data[i]);\n      s = s === '' ? t : s + repeat.call(ZERO, 7 - t.length) + t;\n    }\n  } return s;\n};\nvar pow = function (x, n, acc) {\n  return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);\n};\nvar log = function (x) {\n  var n = 0;\n  var x2 = x;\n  while (x2 >= 4096) {\n    n += 12;\n    x2 /= 4096;\n  }\n  while (x2 >= 2) {\n    n += 1;\n    x2 /= 2;\n  } return n;\n};\n\n$export($export.P + $export.F * (!!$toFixed && (\n  0.00008.toFixed(3) !== '0.000' ||\n  0.9.toFixed(0) !== '1' ||\n  1.255.toFixed(2) !== '1.25' ||\n  1000000000000000128.0.toFixed(0) !== '1000000000000000128'\n) || !require('./_fails')(function () {\n  // V8 ~ Android 4.3-\n  $toFixed.call({});\n})), 'Number', {\n  toFixed: function toFixed(fractionDigits) {\n    var x = aNumberValue(this, ERROR);\n    var f = toInteger(fractionDigits);\n    var s = '';\n    var m = ZERO;\n    var e, z, j, k;\n    if (f < 0 || f > 20) throw RangeError(ERROR);\n    // eslint-disable-next-line no-self-compare\n    if (x != x) return 'NaN';\n    if (x <= -1e21 || x >= 1e21) return String(x);\n    if (x < 0) {\n      s = '-';\n      x = -x;\n    }\n    if (x > 1e-21) {\n      e = log(x * pow(2, 69, 1)) - 69;\n      z = e < 0 ? x * pow(2, -e, 1) : x / pow(2, e, 1);\n      z *= 0x10000000000000;\n      e = 52 - e;\n      if (e > 0) {\n        multiply(0, z);\n        j = f;\n        while (j >= 7) {\n          multiply(1e7, 0);\n          j -= 7;\n        }\n        multiply(pow(10, j, 1), 0);\n        j = e - 1;\n        while (j >= 23) {\n          divide(1 << 23);\n          j -= 23;\n        }\n        divide(1 << j);\n        multiply(1, 1);\n        divide(2);\n        m = numToString();\n      } else {\n        multiply(0, z);\n        multiply(1 << -e, 0);\n        m = numToString() + repeat.call(ZERO, f);\n      }\n    }\n    if (f > 0) {\n      k = m.length;\n      m = s + (k <= f ? '0.' + repeat.call(ZERO, f - k) + m : m.slice(0, k - f) + '.' + m.slice(k - f));\n    } else {\n      m = s + m;\n    } return m;\n  }\n});\n","'use strict';\nvar $export = require('./_export');\nvar $fails = require('./_fails');\nvar aNumberValue = require('./_a-number-value');\nvar $toPrecision = 1.0.toPrecision;\n\n$export($export.P + $export.F * ($fails(function () {\n  // IE7-\n  return $toPrecision.call(1, undefined) !== '1';\n}) || !$fails(function () {\n  // V8 ~ Android 4.3-\n  $toPrecision.call({});\n})), 'Number', {\n  toPrecision: function toPrecision(precision) {\n    var that = aNumberValue(this, 'Number#toPrecision: incorrect invocation!');\n    return precision === undefined ? $toPrecision.call(that) : $toPrecision.call(that, precision);\n  }\n});\n","// 20.1.2.1 Number.EPSILON\nvar $export = require('./_export');\n\n$export($export.S, 'Number', { EPSILON: Math.pow(2, -52) });\n","// 20.1.2.2 Number.isFinite(number)\nvar $export = require('./_export');\nvar _isFinite = require('./_global').isFinite;\n\n$export($export.S, 'Number', {\n  isFinite: function isFinite(it) {\n    return typeof it == 'number' && _isFinite(it);\n  }\n});\n","// 20.1.2.3 Number.isInteger(number)\nvar isObject = require('./_is-object');\nvar floor = Math.floor;\nmodule.exports = function isInteger(it) {\n  return !isObject(it) && isFinite(it) && floor(it) === it;\n};\n","// 20.1.2.3 Number.isInteger(number)\nvar $export = require('./_export');\n\n$export($export.S, 'Number', { isInteger: require('./_is-integer') });\n","// 20.1.2.4 Number.isNaN(number)\nvar $export = require('./_export');\n\n$export($export.S, 'Number', {\n  isNaN: function isNaN(number) {\n    // eslint-disable-next-line no-self-compare\n    return number != number;\n  }\n});\n","// 20.1.2.5 Number.isSafeInteger(number)\nvar $export = require('./_export');\nvar isInteger = require('./_is-integer');\nvar abs = Math.abs;\n\n$export($export.S, 'Number', {\n  isSafeInteger: function isSafeInteger(number) {\n    return isInteger(number) && abs(number) <= 0x1fffffffffffff;\n  }\n});\n","// 20.1.2.6 Number.MAX_SAFE_INTEGER\nvar $export = require('./_export');\n\n$export($export.S, 'Number', { MAX_SAFE_INTEGER: 0x1fffffffffffff });\n","// 20.1.2.10 Number.MIN_SAFE_INTEGER\nvar $export = require('./_export');\n\n$export($export.S, 'Number', { MIN_SAFE_INTEGER: -0x1fffffffffffff });\n","var $export = require('./_export');\nvar $parseFloat = require('./_parse-float');\n// 20.1.2.12 Number.parseFloat(string)\n$export($export.S + $export.F * (Number.parseFloat != $parseFloat), 'Number', { parseFloat: $parseFloat });\n","var $export = require('./_export');\nvar $parseInt = require('./_parse-int');\n// 20.1.2.13 Number.parseInt(string, radix)\n$export($export.S + $export.F * (Number.parseInt != $parseInt), 'Number', { parseInt: $parseInt });\n","// 20.2.2.20 Math.log1p(x)\nmodule.exports = Math.log1p || function log1p(x) {\n  return (x = +x) > -1e-8 && x < 1e-8 ? x - x * x / 2 : Math.log(1 + x);\n};\n","// 20.2.2.3 Math.acosh(x)\nvar $export = require('./_export');\nvar log1p = require('./_math-log1p');\nvar sqrt = Math.sqrt;\nvar $acosh = Math.acosh;\n\n$export($export.S + $export.F * !($acosh\n  // V8 bug: https://code.google.com/p/v8/issues/detail?id=3509\n  && Math.floor($acosh(Number.MAX_VALUE)) == 710\n  // Tor Browser bug: Math.acosh(Infinity) -> NaN\n  && $acosh(Infinity) == Infinity\n), 'Math', {\n  acosh: function acosh(x) {\n    return (x = +x) < 1 ? NaN : x > 94906265.62425156\n      ? Math.log(x) + Math.LN2\n      : log1p(x - 1 + sqrt(x - 1) * sqrt(x + 1));\n  }\n});\n","// 20.2.2.5 Math.asinh(x)\nvar $export = require('./_export');\nvar $asinh = Math.asinh;\n\nfunction asinh(x) {\n  return !isFinite(x = +x) || x == 0 ? x : x < 0 ? -asinh(-x) : Math.log(x + Math.sqrt(x * x + 1));\n}\n\n// Tor Browser bug: Math.asinh(0) -> -0\n$export($export.S + $export.F * !($asinh && 1 / $asinh(0) > 0), 'Math', { asinh: asinh });\n","// 20.2.2.7 Math.atanh(x)\nvar $export = require('./_export');\nvar $atanh = Math.atanh;\n\n// Tor Browser bug: Math.atanh(-0) -> 0\n$export($export.S + $export.F * !($atanh && 1 / $atanh(-0) < 0), 'Math', {\n  atanh: function atanh(x) {\n    return (x = +x) == 0 ? x : Math.log((1 + x) / (1 - x)) / 2;\n  }\n});\n","// 20.2.2.28 Math.sign(x)\nmodule.exports = Math.sign || function sign(x) {\n  // eslint-disable-next-line no-self-compare\n  return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;\n};\n","// 20.2.2.9 Math.cbrt(x)\nvar $export = require('./_export');\nvar sign = require('./_math-sign');\n\n$export($export.S, 'Math', {\n  cbrt: function cbrt(x) {\n    return sign(x = +x) * Math.pow(Math.abs(x), 1 / 3);\n  }\n});\n","// 20.2.2.11 Math.clz32(x)\nvar $export = require('./_export');\n\n$export($export.S, 'Math', {\n  clz32: function clz32(x) {\n    return (x >>>= 0) ? 31 - Math.floor(Math.log(x + 0.5) * Math.LOG2E) : 32;\n  }\n});\n","// 20.2.2.12 Math.cosh(x)\nvar $export = require('./_export');\nvar exp = Math.exp;\n\n$export($export.S, 'Math', {\n  cosh: function cosh(x) {\n    return (exp(x = +x) + exp(-x)) / 2;\n  }\n});\n","// 20.2.2.14 Math.expm1(x)\nvar $expm1 = Math.expm1;\nmodule.exports = (!$expm1\n  // Old FF bug\n  || $expm1(10) > 22025.465794806719 || $expm1(10) < 22025.4657948067165168\n  // Tor Browser bug\n  || $expm1(-2e-17) != -2e-17\n) ? function expm1(x) {\n  return (x = +x) == 0 ? x : x > -1e-6 && x < 1e-6 ? x + x * x / 2 : Math.exp(x) - 1;\n} : $expm1;\n","// 20.2.2.14 Math.expm1(x)\nvar $export = require('./_export');\nvar $expm1 = require('./_math-expm1');\n\n$export($export.S + $export.F * ($expm1 != Math.expm1), 'Math', { expm1: $expm1 });\n","// 20.2.2.16 Math.fround(x)\nvar sign = require('./_math-sign');\nvar pow = Math.pow;\nvar EPSILON = pow(2, -52);\nvar EPSILON32 = pow(2, -23);\nvar MAX32 = pow(2, 127) * (2 - EPSILON32);\nvar MIN32 = pow(2, -126);\n\nvar roundTiesToEven = function (n) {\n  return n + 1 / EPSILON - 1 / EPSILON;\n};\n\nmodule.exports = Math.fround || function fround(x) {\n  var $abs = Math.abs(x);\n  var $sign = sign(x);\n  var a, result;\n  if ($abs < MIN32) return $sign * roundTiesToEven($abs / MIN32 / EPSILON32) * MIN32 * EPSILON32;\n  a = (1 + EPSILON32 / EPSILON) * $abs;\n  result = a - (a - $abs);\n  // eslint-disable-next-line no-self-compare\n  if (result > MAX32 || result != result) return $sign * Infinity;\n  return $sign * result;\n};\n","// 20.2.2.16 Math.fround(x)\nvar $export = require('./_export');\n\n$export($export.S, 'Math', { fround: require('./_math-fround') });\n","// 20.2.2.17 Math.hypot([value1[, value2[, … ]]])\nvar $export = require('./_export');\nvar abs = Math.abs;\n\n$export($export.S, 'Math', {\n  hypot: function hypot(value1, value2) { // eslint-disable-line no-unused-vars\n    var sum = 0;\n    var i = 0;\n    var aLen = arguments.length;\n    var larg = 0;\n    var arg, div;\n    while (i < aLen) {\n      arg = abs(arguments[i++]);\n      if (larg < arg) {\n        div = larg / arg;\n        sum = sum * div * div + 1;\n        larg = arg;\n      } else if (arg > 0) {\n        div = arg / larg;\n        sum += div * div;\n      } else sum += arg;\n    }\n    return larg === Infinity ? Infinity : larg * Math.sqrt(sum);\n  }\n});\n","// 20.2.2.18 Math.imul(x, y)\nvar $export = require('./_export');\nvar $imul = Math.imul;\n\n// some WebKit versions fails with big numbers, some has wrong arity\n$export($export.S + $export.F * require('./_fails')(function () {\n  return $imul(0xffffffff, 5) != -5 || $imul.length != 2;\n}), 'Math', {\n  imul: function imul(x, y) {\n    var UINT16 = 0xffff;\n    var xn = +x;\n    var yn = +y;\n    var xl = UINT16 & xn;\n    var yl = UINT16 & yn;\n    return 0 | xl * yl + ((UINT16 & xn >>> 16) * yl + xl * (UINT16 & yn >>> 16) << 16 >>> 0);\n  }\n});\n","// 20.2.2.21 Math.log10(x)\nvar $export = require('./_export');\n\n$export($export.S, 'Math', {\n  log10: function log10(x) {\n    return Math.log(x) * Math.LOG10E;\n  }\n});\n","// 20.2.2.20 Math.log1p(x)\nvar $export = require('./_export');\n\n$export($export.S, 'Math', { log1p: require('./_math-log1p') });\n","// 20.2.2.22 Math.log2(x)\nvar $export = require('./_export');\n\n$export($export.S, 'Math', {\n  log2: function log2(x) {\n    return Math.log(x) / Math.LN2;\n  }\n});\n","// 20.2.2.28 Math.sign(x)\nvar $export = require('./_export');\n\n$export($export.S, 'Math', { sign: require('./_math-sign') });\n","// 20.2.2.30 Math.sinh(x)\nvar $export = require('./_export');\nvar expm1 = require('./_math-expm1');\nvar exp = Math.exp;\n\n// V8 near Chromium 38 has a problem with very small numbers\n$export($export.S + $export.F * require('./_fails')(function () {\n  return !Math.sinh(-2e-17) != -2e-17;\n}), 'Math', {\n  sinh: function sinh(x) {\n    return Math.abs(x = +x) < 1\n      ? (expm1(x) - expm1(-x)) / 2\n      : (exp(x - 1) - exp(-x - 1)) * (Math.E / 2);\n  }\n});\n","// 20.2.2.33 Math.tanh(x)\nvar $export = require('./_export');\nvar expm1 = require('./_math-expm1');\nvar exp = Math.exp;\n\n$export($export.S, 'Math', {\n  tanh: function tanh(x) {\n    var a = expm1(x = +x);\n    var b = expm1(-x);\n    return a == Infinity ? 1 : b == Infinity ? -1 : (a - b) / (exp(x) + exp(-x));\n  }\n});\n","// 20.2.2.34 Math.trunc(x)\nvar $export = require('./_export');\n\n$export($export.S, 'Math', {\n  trunc: function trunc(it) {\n    return (it > 0 ? Math.floor : Math.ceil)(it);\n  }\n});\n","var $export = require('./_export');\nvar toAbsoluteIndex = require('./_to-absolute-index');\nvar fromCharCode = String.fromCharCode;\nvar $fromCodePoint = String.fromCodePoint;\n\n// length should be 1, old FF problem\n$export($export.S + $export.F * (!!$fromCodePoint && $fromCodePoint.length != 1), 'String', {\n  // 21.1.2.2 String.fromCodePoint(...codePoints)\n  fromCodePoint: function fromCodePoint(x) { // eslint-disable-line no-unused-vars\n    var res = [];\n    var aLen = arguments.length;\n    var i = 0;\n    var code;\n    while (aLen > i) {\n      code = +arguments[i++];\n      if (toAbsoluteIndex(code, 0x10ffff) !== code) throw RangeError(code + ' is not a valid code point');\n      res.push(code < 0x10000\n        ? fromCharCode(code)\n        : fromCharCode(((code -= 0x10000) >> 10) + 0xd800, code % 0x400 + 0xdc00)\n      );\n    } return res.join('');\n  }\n});\n","var $export = require('./_export');\nvar toIObject = require('./_to-iobject');\nvar toLength = require('./_to-length');\n\n$export($export.S, 'String', {\n  // 21.1.2.4 String.raw(callSite, ...substitutions)\n  raw: function raw(callSite) {\n    var tpl = toIObject(callSite.raw);\n    var len = toLength(tpl.length);\n    var aLen = arguments.length;\n    var res = [];\n    var i = 0;\n    while (len > i) {\n      res.push(String(tpl[i++]));\n      if (i < aLen) res.push(String(arguments[i]));\n    } return res.join('');\n  }\n});\n","'use strict';\n// 21.1.3.25 String.prototype.trim()\nrequire('./_string-trim')('trim', function ($trim) {\n  return function trim() {\n    return $trim(this, 3);\n  };\n});\n","var toInteger = require('./_to-integer');\nvar defined = require('./_defined');\n// true  -> String#at\n// false -> String#codePointAt\nmodule.exports = function (TO_STRING) {\n  return function (that, pos) {\n    var s = String(defined(that));\n    var i = toInteger(pos);\n    var l = s.length;\n    var a, b;\n    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;\n    a = s.charCodeAt(i);\n    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff\n      ? TO_STRING ? s.charAt(i) : a\n      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;\n  };\n};\n","module.exports = {};\n","'use strict';\nvar create = require('./_object-create');\nvar descriptor = require('./_property-desc');\nvar setToStringTag = require('./_set-to-string-tag');\nvar IteratorPrototype = {};\n\n// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()\nrequire('./_hide')(IteratorPrototype, require('./_wks')('iterator'), function () { return this; });\n\nmodule.exports = function (Constructor, NAME, next) {\n  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });\n  setToStringTag(Constructor, NAME + ' Iterator');\n};\n","'use strict';\nvar LIBRARY = require('./_library');\nvar $export = require('./_export');\nvar redefine = require('./_redefine');\nvar hide = require('./_hide');\nvar Iterators = require('./_iterators');\nvar $iterCreate = require('./_iter-create');\nvar setToStringTag = require('./_set-to-string-tag');\nvar getPrototypeOf = require('./_object-gpo');\nvar ITERATOR = require('./_wks')('iterator');\nvar BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`\nvar FF_ITERATOR = '@@iterator';\nvar KEYS = 'keys';\nvar VALUES = 'values';\n\nvar returnThis = function () { return this; };\n\nmodule.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {\n  $iterCreate(Constructor, NAME, next);\n  var getMethod = function (kind) {\n    if (!BUGGY && kind in proto) return proto[kind];\n    switch (kind) {\n      case KEYS: return function keys() { return new Constructor(this, kind); };\n      case VALUES: return function values() { return new Constructor(this, kind); };\n    } return function entries() { return new Constructor(this, kind); };\n  };\n  var TAG = NAME + ' Iterator';\n  var DEF_VALUES = DEFAULT == VALUES;\n  var VALUES_BUG = false;\n  var proto = Base.prototype;\n  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];\n  var $default = $native || getMethod(DEFAULT);\n  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;\n  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;\n  var methods, key, IteratorPrototype;\n  // Fix native\n  if ($anyNative) {\n    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));\n    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {\n      // Set @@toStringTag to native iterators\n      setToStringTag(IteratorPrototype, TAG, true);\n      // fix for some old engines\n      if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);\n    }\n  }\n  // fix Array#{values, @@iterator}.name in V8 / FF\n  if (DEF_VALUES && $native && $native.name !== VALUES) {\n    VALUES_BUG = true;\n    $default = function values() { return $native.call(this); };\n  }\n  // Define iterator\n  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {\n    hide(proto, ITERATOR, $default);\n  }\n  // Plug for library\n  Iterators[NAME] = $default;\n  Iterators[TAG] = returnThis;\n  if (DEFAULT) {\n    methods = {\n      values: DEF_VALUES ? $default : getMethod(VALUES),\n      keys: IS_SET ? $default : getMethod(KEYS),\n      entries: $entries\n    };\n    if (FORCED) for (key in methods) {\n      if (!(key in proto)) redefine(proto, key, methods[key]);\n    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);\n  }\n  return methods;\n};\n","'use strict';\nvar $at = require('./_string-at')(true);\n\n// 21.1.3.27 String.prototype[@@iterator]()\nrequire('./_iter-define')(String, 'String', function (iterated) {\n  this._t = String(iterated); // target\n  this._i = 0;                // next index\n// 21.1.5.2.1 %StringIteratorPrototype%.next()\n}, function () {\n  var O = this._t;\n  var index = this._i;\n  var point;\n  if (index >= O.length) return { value: undefined, done: true };\n  point = $at(O, index);\n  this._i += point.length;\n  return { value: point, done: false };\n});\n","'use strict';\nvar $export = require('./_export');\nvar $at = require('./_string-at')(false);\n$export($export.P, 'String', {\n  // 21.1.3.3 String.prototype.codePointAt(pos)\n  codePointAt: function codePointAt(pos) {\n    return $at(this, pos);\n  }\n});\n","// 7.2.8 IsRegExp(argument)\nvar isObject = require('./_is-object');\nvar cof = require('./_cof');\nvar MATCH = require('./_wks')('match');\nmodule.exports = function (it) {\n  var isRegExp;\n  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');\n};\n","// helper for String#{startsWith, endsWith, includes}\nvar isRegExp = require('./_is-regexp');\nvar defined = require('./_defined');\n\nmodule.exports = function (that, searchString, NAME) {\n  if (isRegExp(searchString)) throw TypeError('String#' + NAME + \" doesn't accept regex!\");\n  return String(defined(that));\n};\n","var MATCH = require('./_wks')('match');\nmodule.exports = function (KEY) {\n  var re = /./;\n  try {\n    '/./'[KEY](re);\n  } catch (e) {\n    try {\n      re[MATCH] = false;\n      return !'/./'[KEY](re);\n    } catch (f) { /* empty */ }\n  } return true;\n};\n","// 21.1.3.6 String.prototype.endsWith(searchString [, endPosition])\n'use strict';\nvar $export = require('./_export');\nvar toLength = require('./_to-length');\nvar context = require('./_string-context');\nvar ENDS_WITH = 'endsWith';\nvar $endsWith = ''[ENDS_WITH];\n\n$export($export.P + $export.F * require('./_fails-is-regexp')(ENDS_WITH), 'String', {\n  endsWith: function endsWith(searchString /* , endPosition = @length */) {\n    var that = context(this, searchString, ENDS_WITH);\n    var endPosition = arguments.length > 1 ? arguments[1] : undefined;\n    var len = toLength(that.length);\n    var end = endPosition === undefined ? len : Math.min(toLength(endPosition), len);\n    var search = String(searchString);\n    return $endsWith\n      ? $endsWith.call(that, search, end)\n      : that.slice(end - search.length, end) === search;\n  }\n});\n","// 21.1.3.7 String.prototype.includes(searchString, position = 0)\n'use strict';\nvar $export = require('./_export');\nvar context = require('./_string-context');\nvar INCLUDES = 'includes';\n\n$export($export.P + $export.F * require('./_fails-is-regexp')(INCLUDES), 'String', {\n  includes: function includes(searchString /* , position = 0 */) {\n    return !!~context(this, searchString, INCLUDES)\n      .indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n","var $export = require('./_export');\n\n$export($export.P, 'String', {\n  // 21.1.3.13 String.prototype.repeat(count)\n  repeat: require('./_string-repeat')\n});\n","// 21.1.3.18 String.prototype.startsWith(searchString [, position ])\n'use strict';\nvar $export = require('./_export');\nvar toLength = require('./_to-length');\nvar context = require('./_string-context');\nvar STARTS_WITH = 'startsWith';\nvar $startsWith = ''[STARTS_WITH];\n\n$export($export.P + $export.F * require('./_fails-is-regexp')(STARTS_WITH), 'String', {\n  startsWith: function startsWith(searchString /* , position = 0 */) {\n    var that = context(this, searchString, STARTS_WITH);\n    var index = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length));\n    var search = String(searchString);\n    return $startsWith\n      ? $startsWith.call(that, search, index)\n      : that.slice(index, index + search.length) === search;\n  }\n});\n","var $export = require('./_export');\nvar fails = require('./_fails');\nvar defined = require('./_defined');\nvar quot = /\"/g;\n// B.2.3.2.1 CreateHTML(string, tag, attribute, value)\nvar createHTML = function (string, tag, attribute, value) {\n  var S = String(defined(string));\n  var p1 = '<' + tag;\n  if (attribute !== '') p1 += ' ' + attribute + '=\"' + String(value).replace(quot, '&quot;') + '\"';\n  return p1 + '>' + S + '</' + tag + '>';\n};\nmodule.exports = function (NAME, exec) {\n  var O = {};\n  O[NAME] = exec(createHTML);\n  $export($export.P + $export.F * fails(function () {\n    var test = ''[NAME]('\"');\n    return test !== test.toLowerCase() || test.split('\"').length > 3;\n  }), 'String', O);\n};\n","'use strict';\n// B.2.3.2 String.prototype.anchor(name)\nrequire('./_string-html')('anchor', function (createHTML) {\n  return function anchor(name) {\n    return createHTML(this, 'a', 'name', name);\n  };\n});\n","'use strict';\n// B.2.3.3 String.prototype.big()\nrequire('./_string-html')('big', function (createHTML) {\n  return function big() {\n    return createHTML(this, 'big', '', '');\n  };\n});\n","'use strict';\n// B.2.3.4 String.prototype.blink()\nrequire('./_string-html')('blink', function (createHTML) {\n  return function blink() {\n    return createHTML(this, 'blink', '', '');\n  };\n});\n","'use strict';\n// B.2.3.5 String.prototype.bold()\nrequire('./_string-html')('bold', function (createHTML) {\n  return function bold() {\n    return createHTML(this, 'b', '', '');\n  };\n});\n","'use strict';\n// B.2.3.6 String.prototype.fixed()\nrequire('./_string-html')('fixed', function (createHTML) {\n  return function fixed() {\n    return createHTML(this, 'tt', '', '');\n  };\n});\n","'use strict';\n// B.2.3.7 String.prototype.fontcolor(color)\nrequire('./_string-html')('fontcolor', function (createHTML) {\n  return function fontcolor(color) {\n    return createHTML(this, 'font', 'color', color);\n  };\n});\n","'use strict';\n// B.2.3.8 String.prototype.fontsize(size)\nrequire('./_string-html')('fontsize', function (createHTML) {\n  return function fontsize(size) {\n    return createHTML(this, 'font', 'size', size);\n  };\n});\n","'use strict';\n// B.2.3.9 String.prototype.italics()\nrequire('./_string-html')('italics', function (createHTML) {\n  return function italics() {\n    return createHTML(this, 'i', '', '');\n  };\n});\n","'use strict';\n// B.2.3.10 String.prototype.link(url)\nrequire('./_string-html')('link', function (createHTML) {\n  return function link(url) {\n    return createHTML(this, 'a', 'href', url);\n  };\n});\n","'use strict';\n// B.2.3.11 String.prototype.small()\nrequire('./_string-html')('small', function (createHTML) {\n  return function small() {\n    return createHTML(this, 'small', '', '');\n  };\n});\n","'use strict';\n// B.2.3.12 String.prototype.strike()\nrequire('./_string-html')('strike', function (createHTML) {\n  return function strike() {\n    return createHTML(this, 'strike', '', '');\n  };\n});\n","'use strict';\n// B.2.3.13 String.prototype.sub()\nrequire('./_string-html')('sub', function (createHTML) {\n  return function sub() {\n    return createHTML(this, 'sub', '', '');\n  };\n});\n","'use strict';\n// B.2.3.14 String.prototype.sup()\nrequire('./_string-html')('sup', function (createHTML) {\n  return function sup() {\n    return createHTML(this, 'sup', '', '');\n  };\n});\n","// 20.3.3.1 / 15.9.4.4 Date.now()\nvar $export = require('./_export');\n\n$export($export.S, 'Date', { now: function () { return new Date().getTime(); } });\n","'use strict';\nvar $export = require('./_export');\nvar toObject = require('./_to-object');\nvar toPrimitive = require('./_to-primitive');\n\n$export($export.P + $export.F * require('./_fails')(function () {\n  return new Date(NaN).toJSON() !== null\n    || Date.prototype.toJSON.call({ toISOString: function () { return 1; } }) !== 1;\n}), 'Date', {\n  // eslint-disable-next-line no-unused-vars\n  toJSON: function toJSON(key) {\n    var O = toObject(this);\n    var pv = toPrimitive(O);\n    return typeof pv == 'number' && !isFinite(pv) ? null : O.toISOString();\n  }\n});\n","'use strict';\n// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()\nvar fails = require('./_fails');\nvar getTime = Date.prototype.getTime;\nvar $toISOString = Date.prototype.toISOString;\n\nvar lz = function (num) {\n  return num > 9 ? num : '0' + num;\n};\n\n// PhantomJS / old WebKit has a broken implementations\nmodule.exports = (fails(function () {\n  return $toISOString.call(new Date(-5e13 - 1)) != '0385-07-25T07:06:39.999Z';\n}) || !fails(function () {\n  $toISOString.call(new Date(NaN));\n})) ? function toISOString() {\n  if (!isFinite(getTime.call(this))) throw RangeError('Invalid time value');\n  var d = this;\n  var y = d.getUTCFullYear();\n  var m = d.getUTCMilliseconds();\n  var s = y < 0 ? '-' : y > 9999 ? '+' : '';\n  return s + ('00000' + Math.abs(y)).slice(s ? -6 : -4) +\n    '-' + lz(d.getUTCMonth() + 1) + '-' + lz(d.getUTCDate()) +\n    'T' + lz(d.getUTCHours()) + ':' + lz(d.getUTCMinutes()) +\n    ':' + lz(d.getUTCSeconds()) + '.' + (m > 99 ? m : '0' + lz(m)) + 'Z';\n} : $toISOString;\n","// 20.3.4.36 / 15.9.5.43 Date.prototype.toISOString()\nvar $export = require('./_export');\nvar toISOString = require('./_date-to-iso-string');\n\n// PhantomJS / old WebKit has a broken implementations\n$export($export.P + $export.F * (Date.prototype.toISOString !== toISOString), 'Date', {\n  toISOString: toISOString\n});\n","var DateProto = Date.prototype;\nvar INVALID_DATE = 'Invalid Date';\nvar TO_STRING = 'toString';\nvar $toString = DateProto[TO_STRING];\nvar getTime = DateProto.getTime;\nif (new Date(NaN) + '' != INVALID_DATE) {\n  require('./_redefine')(DateProto, TO_STRING, function toString() {\n    var value = getTime.call(this);\n    // eslint-disable-next-line no-self-compare\n    return value === value ? $toString.call(this) : INVALID_DATE;\n  });\n}\n","'use strict';\nvar anObject = require('./_an-object');\nvar toPrimitive = require('./_to-primitive');\nvar NUMBER = 'number';\n\nmodule.exports = function (hint) {\n  if (hint !== 'string' && hint !== NUMBER && hint !== 'default') throw TypeError('Incorrect hint');\n  return toPrimitive(anObject(this), hint != NUMBER);\n};\n","var TO_PRIMITIVE = require('./_wks')('toPrimitive');\nvar proto = Date.prototype;\n\nif (!(TO_PRIMITIVE in proto)) require('./_hide')(proto, TO_PRIMITIVE, require('./_date-to-primitive'));\n","// 22.1.2.2 / 15.4.3.2 Array.isArray(arg)\nvar $export = require('./_export');\n\n$export($export.S, 'Array', { isArray: require('./_is-array') });\n","// call something on iterator step with safe closing on error\nvar anObject = require('./_an-object');\nmodule.exports = function (iterator, fn, value, entries) {\n  try {\n    return entries ? fn(anObject(value)[0], value[1]) : fn(value);\n  // 7.4.6 IteratorClose(iterator, completion)\n  } catch (e) {\n    var ret = iterator['return'];\n    if (ret !== undefined) anObject(ret.call(iterator));\n    throw e;\n  }\n};\n","// check on default Array iterator\nvar Iterators = require('./_iterators');\nvar ITERATOR = require('./_wks')('iterator');\nvar ArrayProto = Array.prototype;\n\nmodule.exports = function (it) {\n  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);\n};\n","'use strict';\nvar $defineProperty = require('./_object-dp');\nvar createDesc = require('./_property-desc');\n\nmodule.exports = function (object, index, value) {\n  if (index in object) $defineProperty.f(object, index, createDesc(0, value));\n  else object[index] = value;\n};\n","var classof = require('./_classof');\nvar ITERATOR = require('./_wks')('iterator');\nvar Iterators = require('./_iterators');\nmodule.exports = require('./_core').getIteratorMethod = function (it) {\n  if (it != undefined) return it[ITERATOR]\n    || it['@@iterator']\n    || Iterators[classof(it)];\n};\n","var ITERATOR = require('./_wks')('iterator');\nvar SAFE_CLOSING = false;\n\ntry {\n  var riter = [7][ITERATOR]();\n  riter['return'] = function () { SAFE_CLOSING = true; };\n  // eslint-disable-next-line no-throw-literal\n  Array.from(riter, function () { throw 2; });\n} catch (e) { /* empty */ }\n\nmodule.exports = function (exec, skipClosing) {\n  if (!skipClosing && !SAFE_CLOSING) return false;\n  var safe = false;\n  try {\n    var arr = [7];\n    var iter = arr[ITERATOR]();\n    iter.next = function () { return { done: safe = true }; };\n    arr[ITERATOR] = function () { return iter; };\n    exec(arr);\n  } catch (e) { /* empty */ }\n  return safe;\n};\n","'use strict';\nvar ctx = require('./_ctx');\nvar $export = require('./_export');\nvar toObject = require('./_to-object');\nvar call = require('./_iter-call');\nvar isArrayIter = require('./_is-array-iter');\nvar toLength = require('./_to-length');\nvar createProperty = require('./_create-property');\nvar getIterFn = require('./core.get-iterator-method');\n\n$export($export.S + $export.F * !require('./_iter-detect')(function (iter) { Array.from(iter); }), 'Array', {\n  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)\n  from: function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {\n    var O = toObject(arrayLike);\n    var C = typeof this == 'function' ? this : Array;\n    var aLen = arguments.length;\n    var mapfn = aLen > 1 ? arguments[1] : undefined;\n    var mapping = mapfn !== undefined;\n    var index = 0;\n    var iterFn = getIterFn(O);\n    var length, result, step, iterator;\n    if (mapping) mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);\n    // if object isn't iterable or it's array with default iterator - use simple case\n    if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {\n      for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {\n        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);\n      }\n    } else {\n      length = toLength(O.length);\n      for (result = new C(length); length > index; index++) {\n        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);\n      }\n    }\n    result.length = index;\n    return result;\n  }\n});\n","'use strict';\nvar $export = require('./_export');\nvar createProperty = require('./_create-property');\n\n// WebKit Array.of isn't generic\n$export($export.S + $export.F * require('./_fails')(function () {\n  function F() { /* empty */ }\n  return !(Array.of.call(F) instanceof F);\n}), 'Array', {\n  // 22.1.2.3 Array.of( ...items)\n  of: function of(/* ...args */) {\n    var index = 0;\n    var aLen = arguments.length;\n    var result = new (typeof this == 'function' ? this : Array)(aLen);\n    while (aLen > index) createProperty(result, index, arguments[index++]);\n    result.length = aLen;\n    return result;\n  }\n});\n","'use strict';\nvar fails = require('./_fails');\n\nmodule.exports = function (method, arg) {\n  return !!method && fails(function () {\n    // eslint-disable-next-line no-useless-call\n    arg ? method.call(null, function () { /* empty */ }, 1) : method.call(null);\n  });\n};\n","'use strict';\n// 22.1.3.13 Array.prototype.join(separator)\nvar $export = require('./_export');\nvar toIObject = require('./_to-iobject');\nvar arrayJoin = [].join;\n\n// fallback for not array-like strings\n$export($export.P + $export.F * (require('./_iobject') != Object || !require('./_strict-method')(arrayJoin)), 'Array', {\n  join: function join(separator) {\n    return arrayJoin.call(toIObject(this), separator === undefined ? ',' : separator);\n  }\n});\n","'use strict';\nvar $export = require('./_export');\nvar html = require('./_html');\nvar cof = require('./_cof');\nvar toAbsoluteIndex = require('./_to-absolute-index');\nvar toLength = require('./_to-length');\nvar arraySlice = [].slice;\n\n// fallback for not array-like ES3 strings and DOM objects\n$export($export.P + $export.F * require('./_fails')(function () {\n  if (html) arraySlice.call(html);\n}), 'Array', {\n  slice: function slice(begin, end) {\n    var len = toLength(this.length);\n    var klass = cof(this);\n    end = end === undefined ? len : end;\n    if (klass == 'Array') return arraySlice.call(this, begin, end);\n    var start = toAbsoluteIndex(begin, len);\n    var upTo = toAbsoluteIndex(end, len);\n    var size = toLength(upTo - start);\n    var cloned = new Array(size);\n    var i = 0;\n    for (; i < size; i++) cloned[i] = klass == 'String'\n      ? this.charAt(start + i)\n      : this[start + i];\n    return cloned;\n  }\n});\n","'use strict';\nvar $export = require('./_export');\nvar aFunction = require('./_a-function');\nvar toObject = require('./_to-object');\nvar fails = require('./_fails');\nvar $sort = [].sort;\nvar test = [1, 2, 3];\n\n$export($export.P + $export.F * (fails(function () {\n  // IE8-\n  test.sort(undefined);\n}) || !fails(function () {\n  // V8 bug\n  test.sort(null);\n  // Old WebKit\n}) || !require('./_strict-method')($sort)), 'Array', {\n  // 22.1.3.25 Array.prototype.sort(comparefn)\n  sort: function sort(comparefn) {\n    return comparefn === undefined\n      ? $sort.call(toObject(this))\n      : $sort.call(toObject(this), aFunction(comparefn));\n  }\n});\n","var isObject = require('./_is-object');\nvar isArray = require('./_is-array');\nvar SPECIES = require('./_wks')('species');\n\nmodule.exports = function (original) {\n  var C;\n  if (isArray(original)) {\n    C = original.constructor;\n    // cross-realm fallback\n    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;\n    if (isObject(C)) {\n      C = C[SPECIES];\n      if (C === null) C = undefined;\n    }\n  } return C === undefined ? Array : C;\n};\n","// 9.4.2.3 ArraySpeciesCreate(originalArray, length)\nvar speciesConstructor = require('./_array-species-constructor');\n\nmodule.exports = function (original, length) {\n  return new (speciesConstructor(original))(length);\n};\n","// 0 -> Array#forEach\n// 1 -> Array#map\n// 2 -> Array#filter\n// 3 -> Array#some\n// 4 -> Array#every\n// 5 -> Array#find\n// 6 -> Array#findIndex\nvar ctx = require('./_ctx');\nvar IObject = require('./_iobject');\nvar toObject = require('./_to-object');\nvar toLength = require('./_to-length');\nvar asc = require('./_array-species-create');\nmodule.exports = function (TYPE, $create) {\n  var IS_MAP = TYPE == 1;\n  var IS_FILTER = TYPE == 2;\n  var IS_SOME = TYPE == 3;\n  var IS_EVERY = TYPE == 4;\n  var IS_FIND_INDEX = TYPE == 6;\n  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;\n  var create = $create || asc;\n  return function ($this, callbackfn, that) {\n    var O = toObject($this);\n    var self = IObject(O);\n    var f = ctx(callbackfn, that, 3);\n    var length = toLength(self.length);\n    var index = 0;\n    var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;\n    var val, res;\n    for (;length > index; index++) if (NO_HOLES || index in self) {\n      val = self[index];\n      res = f(val, index, O);\n      if (TYPE) {\n        if (IS_MAP) result[index] = res;   // map\n        else if (res) switch (TYPE) {\n          case 3: return true;             // some\n          case 5: return val;              // find\n          case 6: return index;            // findIndex\n          case 2: result.push(val);        // filter\n        } else if (IS_EVERY) return false; // every\n      }\n    }\n    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;\n  };\n};\n","'use strict';\nvar $export = require('./_export');\nvar $forEach = require('./_array-methods')(0);\nvar STRICT = require('./_strict-method')([].forEach, true);\n\n$export($export.P + $export.F * !STRICT, 'Array', {\n  // 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])\n  forEach: function forEach(callbackfn /* , thisArg */) {\n    return $forEach(this, callbackfn, arguments[1]);\n  }\n});\n","'use strict';\nvar $export = require('./_export');\nvar $map = require('./_array-methods')(1);\n\n$export($export.P + $export.F * !require('./_strict-method')([].map, true), 'Array', {\n  // 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])\n  map: function map(callbackfn /* , thisArg */) {\n    return $map(this, callbackfn, arguments[1]);\n  }\n});\n","'use strict';\nvar $export = require('./_export');\nvar $filter = require('./_array-methods')(2);\n\n$export($export.P + $export.F * !require('./_strict-method')([].filter, true), 'Array', {\n  // 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])\n  filter: function filter(callbackfn /* , thisArg */) {\n    return $filter(this, callbackfn, arguments[1]);\n  }\n});\n","'use strict';\nvar $export = require('./_export');\nvar $some = require('./_array-methods')(3);\n\n$export($export.P + $export.F * !require('./_strict-method')([].some, true), 'Array', {\n  // 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])\n  some: function some(callbackfn /* , thisArg */) {\n    return $some(this, callbackfn, arguments[1]);\n  }\n});\n","'use strict';\nvar $export = require('./_export');\nvar $every = require('./_array-methods')(4);\n\n$export($export.P + $export.F * !require('./_strict-method')([].every, true), 'Array', {\n  // 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])\n  every: function every(callbackfn /* , thisArg */) {\n    return $every(this, callbackfn, arguments[1]);\n  }\n});\n","var aFunction = require('./_a-function');\nvar toObject = require('./_to-object');\nvar IObject = require('./_iobject');\nvar toLength = require('./_to-length');\n\nmodule.exports = function (that, callbackfn, aLen, memo, isRight) {\n  aFunction(callbackfn);\n  var O = toObject(that);\n  var self = IObject(O);\n  var length = toLength(O.length);\n  var index = isRight ? length - 1 : 0;\n  var i = isRight ? -1 : 1;\n  if (aLen < 2) for (;;) {\n    if (index in self) {\n      memo = self[index];\n      index += i;\n      break;\n    }\n    index += i;\n    if (isRight ? index < 0 : length <= index) {\n      throw TypeError('Reduce of empty array with no initial value');\n    }\n  }\n  for (;isRight ? index >= 0 : length > index; index += i) if (index in self) {\n    memo = callbackfn(memo, self[index], index, O);\n  }\n  return memo;\n};\n","'use strict';\nvar $export = require('./_export');\nvar $reduce = require('./_array-reduce');\n\n$export($export.P + $export.F * !require('./_strict-method')([].reduce, true), 'Array', {\n  // 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])\n  reduce: function reduce(callbackfn /* , initialValue */) {\n    return $reduce(this, callbackfn, arguments.length, arguments[1], false);\n  }\n});\n","'use strict';\nvar $export = require('./_export');\nvar $reduce = require('./_array-reduce');\n\n$export($export.P + $export.F * !require('./_strict-method')([].reduceRight, true), 'Array', {\n  // 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])\n  reduceRight: function reduceRight(callbackfn /* , initialValue */) {\n    return $reduce(this, callbackfn, arguments.length, arguments[1], true);\n  }\n});\n","'use strict';\nvar $export = require('./_export');\nvar $indexOf = require('./_array-includes')(false);\nvar $native = [].indexOf;\nvar NEGATIVE_ZERO = !!$native && 1 / [1].indexOf(1, -0) < 0;\n\n$export($export.P + $export.F * (NEGATIVE_ZERO || !require('./_strict-method')($native)), 'Array', {\n  // 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])\n  indexOf: function indexOf(searchElement /* , fromIndex = 0 */) {\n    return NEGATIVE_ZERO\n      // convert -0 to +0\n      ? $native.apply(this, arguments) || 0\n      : $indexOf(this, searchElement, arguments[1]);\n  }\n});\n","'use strict';\nvar $export = require('./_export');\nvar toIObject = require('./_to-iobject');\nvar toInteger = require('./_to-integer');\nvar toLength = require('./_to-length');\nvar $native = [].lastIndexOf;\nvar NEGATIVE_ZERO = !!$native && 1 / [1].lastIndexOf(1, -0) < 0;\n\n$export($export.P + $export.F * (NEGATIVE_ZERO || !require('./_strict-method')($native)), 'Array', {\n  // 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])\n  lastIndexOf: function lastIndexOf(searchElement /* , fromIndex = @[*-1] */) {\n    // convert -0 to +0\n    if (NEGATIVE_ZERO) return $native.apply(this, arguments) || 0;\n    var O = toIObject(this);\n    var length = toLength(O.length);\n    var index = length - 1;\n    if (arguments.length > 1) index = Math.min(index, toInteger(arguments[1]));\n    if (index < 0) index = length + index;\n    for (;index >= 0; index--) if (index in O) if (O[index] === searchElement) return index || 0;\n    return -1;\n  }\n});\n","// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)\n'use strict';\nvar toObject = require('./_to-object');\nvar toAbsoluteIndex = require('./_to-absolute-index');\nvar toLength = require('./_to-length');\n\nmodule.exports = [].copyWithin || function copyWithin(target /* = 0 */, start /* = 0, end = @length */) {\n  var O = toObject(this);\n  var len = toLength(O.length);\n  var to = toAbsoluteIndex(target, len);\n  var from = toAbsoluteIndex(start, len);\n  var end = arguments.length > 2 ? arguments[2] : undefined;\n  var count = Math.min((end === undefined ? len : toAbsoluteIndex(end, len)) - from, len - to);\n  var inc = 1;\n  if (from < to && to < from + count) {\n    inc = -1;\n    from += count - 1;\n    to += count - 1;\n  }\n  while (count-- > 0) {\n    if (from in O) O[to] = O[from];\n    else delete O[to];\n    to += inc;\n    from += inc;\n  } return O;\n};\n","// 22.1.3.31 Array.prototype[@@unscopables]\nvar UNSCOPABLES = require('./_wks')('unscopables');\nvar ArrayProto = Array.prototype;\nif (ArrayProto[UNSCOPABLES] == undefined) require('./_hide')(ArrayProto, UNSCOPABLES, {});\nmodule.exports = function (key) {\n  ArrayProto[UNSCOPABLES][key] = true;\n};\n","// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)\nvar $export = require('./_export');\n\n$export($export.P, 'Array', { copyWithin: require('./_array-copy-within') });\n\nrequire('./_add-to-unscopables')('copyWithin');\n","// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)\n'use strict';\nvar toObject = require('./_to-object');\nvar toAbsoluteIndex = require('./_to-absolute-index');\nvar toLength = require('./_to-length');\nmodule.exports = function fill(value /* , start = 0, end = @length */) {\n  var O = toObject(this);\n  var length = toLength(O.length);\n  var aLen = arguments.length;\n  var index = toAbsoluteIndex(aLen > 1 ? arguments[1] : undefined, length);\n  var end = aLen > 2 ? arguments[2] : undefined;\n  var endPos = end === undefined ? length : toAbsoluteIndex(end, length);\n  while (endPos > index) O[index++] = value;\n  return O;\n};\n","// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)\nvar $export = require('./_export');\n\n$export($export.P, 'Array', { fill: require('./_array-fill') });\n\nrequire('./_add-to-unscopables')('fill');\n","'use strict';\n// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)\nvar $export = require('./_export');\nvar $find = require('./_array-methods')(5);\nvar KEY = 'find';\nvar forced = true;\n// Shouldn't skip holes\nif (KEY in []) Array(1)[KEY](function () { forced = false; });\n$export($export.P + $export.F * forced, 'Array', {\n  find: function find(callbackfn /* , that = undefined */) {\n    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\nrequire('./_add-to-unscopables')(KEY);\n","'use strict';\n// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)\nvar $export = require('./_export');\nvar $find = require('./_array-methods')(6);\nvar KEY = 'findIndex';\nvar forced = true;\n// Shouldn't skip holes\nif (KEY in []) Array(1)[KEY](function () { forced = false; });\n$export($export.P + $export.F * forced, 'Array', {\n  findIndex: function findIndex(callbackfn /* , that = undefined */) {\n    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\nrequire('./_add-to-unscopables')(KEY);\n","'use strict';\nvar global = require('./_global');\nvar dP = require('./_object-dp');\nvar DESCRIPTORS = require('./_descriptors');\nvar SPECIES = require('./_wks')('species');\n\nmodule.exports = function (KEY) {\n  var C = global[KEY];\n  if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {\n    configurable: true,\n    get: function () { return this; }\n  });\n};\n","require('./_set-species')('Array');\n","module.exports = function (done, value) {\n  return { value: value, done: !!done };\n};\n","'use strict';\nvar addToUnscopables = require('./_add-to-unscopables');\nvar step = require('./_iter-step');\nvar Iterators = require('./_iterators');\nvar toIObject = require('./_to-iobject');\n\n// 22.1.3.4 Array.prototype.entries()\n// 22.1.3.13 Array.prototype.keys()\n// 22.1.3.29 Array.prototype.values()\n// 22.1.3.30 Array.prototype[@@iterator]()\nmodule.exports = require('./_iter-define')(Array, 'Array', function (iterated, kind) {\n  this._t = toIObject(iterated); // target\n  this._i = 0;                   // next index\n  this._k = kind;                // kind\n// 22.1.5.2.1 %ArrayIteratorPrototype%.next()\n}, function () {\n  var O = this._t;\n  var kind = this._k;\n  var index = this._i++;\n  if (!O || index >= O.length) {\n    this._t = undefined;\n    return step(1);\n  }\n  if (kind == 'keys') return step(0, index);\n  if (kind == 'values') return step(0, O[index]);\n  return step(0, [index, O[index]]);\n}, 'values');\n\n// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)\nIterators.Arguments = Iterators.Array;\n\naddToUnscopables('keys');\naddToUnscopables('values');\naddToUnscopables('entries');\n","'use strict';\n// 21.2.5.3 get RegExp.prototype.flags\nvar anObject = require('./_an-object');\nmodule.exports = function () {\n  var that = anObject(this);\n  var result = '';\n  if (that.global) result += 'g';\n  if (that.ignoreCase) result += 'i';\n  if (that.multiline) result += 'm';\n  if (that.unicode) result += 'u';\n  if (that.sticky) result += 'y';\n  return result;\n};\n","var global = require('./_global');\nvar inheritIfRequired = require('./_inherit-if-required');\nvar dP = require('./_object-dp').f;\nvar gOPN = require('./_object-gopn').f;\nvar isRegExp = require('./_is-regexp');\nvar $flags = require('./_flags');\nvar $RegExp = global.RegExp;\nvar Base = $RegExp;\nvar proto = $RegExp.prototype;\nvar re1 = /a/g;\nvar re2 = /a/g;\n// \"new\" creates a new object, old webkit buggy here\nvar CORRECT_NEW = new $RegExp(re1) !== re1;\n\nif (require('./_descriptors') && (!CORRECT_NEW || require('./_fails')(function () {\n  re2[require('./_wks')('match')] = false;\n  // RegExp constructor can alter flags and IsRegExp works correct with @@match\n  return $RegExp(re1) != re1 || $RegExp(re2) == re2 || $RegExp(re1, 'i') != '/a/i';\n}))) {\n  $RegExp = function RegExp(p, f) {\n    var tiRE = this instanceof $RegExp;\n    var piRE = isRegExp(p);\n    var fiU = f === undefined;\n    return !tiRE && piRE && p.constructor === $RegExp && fiU ? p\n      : inheritIfRequired(CORRECT_NEW\n        ? new Base(piRE && !fiU ? p.source : p, f)\n        : Base((piRE = p instanceof $RegExp) ? p.source : p, piRE && fiU ? $flags.call(p) : f)\n      , tiRE ? this : proto, $RegExp);\n  };\n  var proxy = function (key) {\n    key in $RegExp || dP($RegExp, key, {\n      configurable: true,\n      get: function () { return Base[key]; },\n      set: function (it) { Base[key] = it; }\n    });\n  };\n  for (var keys = gOPN(Base), i = 0; keys.length > i;) proxy(keys[i++]);\n  proto.constructor = $RegExp;\n  $RegExp.prototype = proto;\n  require('./_redefine')(global, 'RegExp', $RegExp);\n}\n\nrequire('./_set-species')('RegExp');\n","'use strict';\n\nvar regexpFlags = require('./_flags');\n\nvar nativeExec = RegExp.prototype.exec;\n// This always refers to the native implementation, because the\n// String#replace polyfill uses ./fix-regexp-well-known-symbol-logic.js,\n// which loads this file before patching the method.\nvar nativeReplace = String.prototype.replace;\n\nvar patchedExec = nativeExec;\n\nvar LAST_INDEX = 'lastIndex';\n\nvar UPDATES_LAST_INDEX_WRONG = (function () {\n  var re1 = /a/,\n      re2 = /b*/g;\n  nativeExec.call(re1, 'a');\n  nativeExec.call(re2, 'a');\n  return re1[LAST_INDEX] !== 0 || re2[LAST_INDEX] !== 0;\n})();\n\n// nonparticipating capturing group, copied from es5-shim's String#split patch.\nvar NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;\n\nvar PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED;\n\nif (PATCH) {\n  patchedExec = function exec(str) {\n    var re = this;\n    var lastIndex, reCopy, match, i;\n\n    if (NPCG_INCLUDED) {\n      reCopy = new RegExp('^' + re.source + '$(?!\\\\s)', regexpFlags.call(re));\n    }\n    if (UPDATES_LAST_INDEX_WRONG) lastIndex = re[LAST_INDEX];\n\n    match = nativeExec.call(re, str);\n\n    if (UPDATES_LAST_INDEX_WRONG && match) {\n      re[LAST_INDEX] = re.global ? match.index + match[0].length : lastIndex;\n    }\n    if (NPCG_INCLUDED && match && match.length > 1) {\n      // Fix browsers whose `exec` methods don't consistently return `undefined`\n      // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/\n      // eslint-disable-next-line no-loop-func\n      nativeReplace.call(match[0], reCopy, function () {\n        for (i = 1; i < arguments.length - 2; i++) {\n          if (arguments[i] === undefined) match[i] = undefined;\n        }\n      });\n    }\n\n    return match;\n  };\n}\n\nmodule.exports = patchedExec;\n","'use strict';\nvar regexpExec = require('./_regexp-exec');\nrequire('./_export')({\n  target: 'RegExp',\n  proto: true,\n  forced: regexpExec !== /./.exec\n}, {\n  exec: regexpExec\n});\n","// 21.2.5.3 get RegExp.prototype.flags()\nif (require('./_descriptors') && /./g.flags != 'g') require('./_object-dp').f(RegExp.prototype, 'flags', {\n  configurable: true,\n  get: require('./_flags')\n});\n","'use strict';\nrequire('./es6.regexp.flags');\nvar anObject = require('./_an-object');\nvar $flags = require('./_flags');\nvar DESCRIPTORS = require('./_descriptors');\nvar TO_STRING = 'toString';\nvar $toString = /./[TO_STRING];\n\nvar define = function (fn) {\n  require('./_redefine')(RegExp.prototype, TO_STRING, fn, true);\n};\n\n// 21.2.5.14 RegExp.prototype.toString()\nif (require('./_fails')(function () { return $toString.call({ source: 'a', flags: 'b' }) != '/a/b'; })) {\n  define(function toString() {\n    var R = anObject(this);\n    return '/'.concat(R.source, '/',\n      'flags' in R ? R.flags : !DESCRIPTORS && R instanceof RegExp ? $flags.call(R) : undefined);\n  });\n// FF44- RegExp#toString has a wrong name\n} else if ($toString.name != TO_STRING) {\n  define(function toString() {\n    return $toString.call(this);\n  });\n}\n","'use strict';\nvar at = require('./_string-at')(true);\n\n // `AdvanceStringIndex` abstract operation\n// https://tc39.github.io/ecma262/#sec-advancestringindex\nmodule.exports = function (S, index, unicode) {\n  return index + (unicode ? at(S, index).length : 1);\n};\n","'use strict';\n\nvar classof = require('./_classof');\nvar builtinExec = RegExp.prototype.exec;\n\n // `RegExpExec` abstract operation\n// https://tc39.github.io/ecma262/#sec-regexpexec\nmodule.exports = function (R, S) {\n  var exec = R.exec;\n  if (typeof exec === 'function') {\n    var result = exec.call(R, S);\n    if (typeof result !== 'object') {\n      throw new TypeError('RegExp exec method returned something other than an Object or null');\n    }\n    return result;\n  }\n  if (classof(R) !== 'RegExp') {\n    throw new TypeError('RegExp#exec called on incompatible receiver');\n  }\n  return builtinExec.call(R, S);\n};\n","'use strict';\nrequire('./es6.regexp.exec');\nvar redefine = require('./_redefine');\nvar hide = require('./_hide');\nvar fails = require('./_fails');\nvar defined = require('./_defined');\nvar wks = require('./_wks');\nvar regexpExec = require('./_regexp-exec');\n\nvar SPECIES = wks('species');\n\nvar REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function () {\n  // #replace needs built-in support for named groups.\n  // #match works fine because it just return the exec results, even if it has\n  // a \"grops\" property.\n  var re = /./;\n  re.exec = function () {\n    var result = [];\n    result.groups = { a: '7' };\n    return result;\n  };\n  return ''.replace(re, '$<a>') !== '7';\n});\n\nvar SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = (function () {\n  // Chrome 51 has a buggy \"split\" implementation when RegExp#exec !== nativeExec\n  var re = /(?:)/;\n  var originalExec = re.exec;\n  re.exec = function () { return originalExec.apply(this, arguments); };\n  var result = 'ab'.split(re);\n  return result.length === 2 && result[0] === 'a' && result[1] === 'b';\n})();\n\nmodule.exports = function (KEY, length, exec) {\n  var SYMBOL = wks(KEY);\n\n  var DELEGATES_TO_SYMBOL = !fails(function () {\n    // String methods call symbol-named RegEp methods\n    var O = {};\n    O[SYMBOL] = function () { return 7; };\n    return ''[KEY](O) != 7;\n  });\n\n  var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL ? !fails(function () {\n    // Symbol-named RegExp methods call .exec\n    var execCalled = false;\n    var re = /a/;\n    re.exec = function () { execCalled = true; return null; };\n    if (KEY === 'split') {\n      // RegExp[@@split] doesn't call the regex's exec method, but first creates\n      // a new one. We need to return the patched regex when creating the new one.\n      re.constructor = {};\n      re.constructor[SPECIES] = function () { return re; };\n    }\n    re[SYMBOL]('');\n    return !execCalled;\n  }) : undefined;\n\n  if (\n    !DELEGATES_TO_SYMBOL ||\n    !DELEGATES_TO_EXEC ||\n    (KEY === 'replace' && !REPLACE_SUPPORTS_NAMED_GROUPS) ||\n    (KEY === 'split' && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC)\n  ) {\n    var nativeRegExpMethod = /./[SYMBOL];\n    var fns = exec(\n      defined,\n      SYMBOL,\n      ''[KEY],\n      function maybeCallNative(nativeMethod, regexp, str, arg2, forceStringMethod) {\n        if (regexp.exec === regexpExec) {\n          if (DELEGATES_TO_SYMBOL && !forceStringMethod) {\n            // The native String method already delegates to @@method (this\n            // polyfilled function), leasing to infinite recursion.\n            // We avoid it by directly calling the native @@method method.\n            return { done: true, value: nativeRegExpMethod.call(regexp, str, arg2) };\n          }\n          return { done: true, value: nativeMethod.call(str, regexp, arg2) };\n        }\n        return { done: false };\n      }\n    );\n    var strfn = fns[0];\n    var rxfn = fns[1];\n\n    redefine(String.prototype, KEY, strfn);\n    hide(RegExp.prototype, SYMBOL, length == 2\n      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)\n      // 21.2.5.11 RegExp.prototype[@@split](string, limit)\n      ? function (string, arg) { return rxfn.call(string, this, arg); }\n      // 21.2.5.6 RegExp.prototype[@@match](string)\n      // 21.2.5.9 RegExp.prototype[@@search](string)\n      : function (string) { return rxfn.call(string, this); }\n    );\n  }\n};\n","'use strict';\n\nvar anObject = require('./_an-object');\nvar toLength = require('./_to-length');\nvar advanceStringIndex = require('./_advance-string-index');\nvar regExpExec = require('./_regexp-exec-abstract');\n\n// @@match logic\nrequire('./_fix-re-wks')('match', 1, function (defined, MATCH, $match, maybeCallNative) {\n  return [\n    // `String.prototype.match` method\n    // https://tc39.github.io/ecma262/#sec-string.prototype.match\n    function match(regexp) {\n      var O = defined(this);\n      var fn = regexp == undefined ? undefined : regexp[MATCH];\n      return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));\n    },\n    // `RegExp.prototype[@@match]` method\n    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@match\n    function (regexp) {\n      var res = maybeCallNative($match, regexp, this);\n      if (res.done) return res.value;\n      var rx = anObject(regexp);\n      var S = String(this);\n      if (!rx.global) return regExpExec(rx, S);\n      var fullUnicode = rx.unicode;\n      rx.lastIndex = 0;\n      var A = [];\n      var n = 0;\n      var result;\n      while ((result = regExpExec(rx, S)) !== null) {\n        var matchStr = String(result[0]);\n        A[n] = matchStr;\n        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);\n        n++;\n      }\n      return n === 0 ? null : A;\n    }\n  ];\n});\n","'use strict';\n\nvar anObject = require('./_an-object');\nvar toObject = require('./_to-object');\nvar toLength = require('./_to-length');\nvar toInteger = require('./_to-integer');\nvar advanceStringIndex = require('./_advance-string-index');\nvar regExpExec = require('./_regexp-exec-abstract');\nvar max = Math.max;\nvar min = Math.min;\nvar floor = Math.floor;\nvar SUBSTITUTION_SYMBOLS = /\\$([$&`']|\\d\\d?|<[^>]*>)/g;\nvar SUBSTITUTION_SYMBOLS_NO_NAMED = /\\$([$&`']|\\d\\d?)/g;\n\nvar maybeToString = function (it) {\n  return it === undefined ? it : String(it);\n};\n\n// @@replace logic\nrequire('./_fix-re-wks')('replace', 2, function (defined, REPLACE, $replace, maybeCallNative) {\n  return [\n    // `String.prototype.replace` method\n    // https://tc39.github.io/ecma262/#sec-string.prototype.replace\n    function replace(searchValue, replaceValue) {\n      var O = defined(this);\n      var fn = searchValue == undefined ? undefined : searchValue[REPLACE];\n      return fn !== undefined\n        ? fn.call(searchValue, O, replaceValue)\n        : $replace.call(String(O), searchValue, replaceValue);\n    },\n    // `RegExp.prototype[@@replace]` method\n    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@replace\n    function (regexp, replaceValue) {\n      var res = maybeCallNative($replace, regexp, this, replaceValue);\n      if (res.done) return res.value;\n\n      var rx = anObject(regexp);\n      var S = String(this);\n      var functionalReplace = typeof replaceValue === 'function';\n      if (!functionalReplace) replaceValue = String(replaceValue);\n      var global = rx.global;\n      if (global) {\n        var fullUnicode = rx.unicode;\n        rx.lastIndex = 0;\n      }\n      var results = [];\n      while (true) {\n        var result = regExpExec(rx, S);\n        if (result === null) break;\n        results.push(result);\n        if (!global) break;\n        var matchStr = String(result[0]);\n        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);\n      }\n      var accumulatedResult = '';\n      var nextSourcePosition = 0;\n      for (var i = 0; i < results.length; i++) {\n        result = results[i];\n        var matched = String(result[0]);\n        var position = max(min(toInteger(result.index), S.length), 0);\n        var captures = [];\n        // NOTE: This is equivalent to\n        //   captures = result.slice(1).map(maybeToString)\n        // but for some reason `nativeSlice.call(result, 1, result.length)` (called in\n        // the slice polyfill when slicing native arrays) \"doesn't work\" in safari 9 and\n        // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.\n        for (var j = 1; j < result.length; j++) captures.push(maybeToString(result[j]));\n        var namedCaptures = result.groups;\n        if (functionalReplace) {\n          var replacerArgs = [matched].concat(captures, position, S);\n          if (namedCaptures !== undefined) replacerArgs.push(namedCaptures);\n          var replacement = String(replaceValue.apply(undefined, replacerArgs));\n        } else {\n          replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);\n        }\n        if (position >= nextSourcePosition) {\n          accumulatedResult += S.slice(nextSourcePosition, position) + replacement;\n          nextSourcePosition = position + matched.length;\n        }\n      }\n      return accumulatedResult + S.slice(nextSourcePosition);\n    }\n  ];\n\n    // https://tc39.github.io/ecma262/#sec-getsubstitution\n  function getSubstitution(matched, str, position, captures, namedCaptures, replacement) {\n    var tailPos = position + matched.length;\n    var m = captures.length;\n    var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;\n    if (namedCaptures !== undefined) {\n      namedCaptures = toObject(namedCaptures);\n      symbols = SUBSTITUTION_SYMBOLS;\n    }\n    return $replace.call(replacement, symbols, function (match, ch) {\n      var capture;\n      switch (ch.charAt(0)) {\n        case '$': return '$';\n        case '&': return matched;\n        case '`': return str.slice(0, position);\n        case \"'\": return str.slice(tailPos);\n        case '<':\n          capture = namedCaptures[ch.slice(1, -1)];\n          break;\n        default: // \\d\\d?\n          var n = +ch;\n          if (n === 0) return match;\n          if (n > m) {\n            var f = floor(n / 10);\n            if (f === 0) return match;\n            if (f <= m) return captures[f - 1] === undefined ? ch.charAt(1) : captures[f - 1] + ch.charAt(1);\n            return match;\n          }\n          capture = captures[n - 1];\n      }\n      return capture === undefined ? '' : capture;\n    });\n  }\n});\n","'use strict';\n\nvar anObject = require('./_an-object');\nvar sameValue = require('./_same-value');\nvar regExpExec = require('./_regexp-exec-abstract');\n\n// @@search logic\nrequire('./_fix-re-wks')('search', 1, function (defined, SEARCH, $search, maybeCallNative) {\n  return [\n    // `String.prototype.search` method\n    // https://tc39.github.io/ecma262/#sec-string.prototype.search\n    function search(regexp) {\n      var O = defined(this);\n      var fn = regexp == undefined ? undefined : regexp[SEARCH];\n      return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));\n    },\n    // `RegExp.prototype[@@search]` method\n    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@search\n    function (regexp) {\n      var res = maybeCallNative($search, regexp, this);\n      if (res.done) return res.value;\n      var rx = anObject(regexp);\n      var S = String(this);\n      var previousLastIndex = rx.lastIndex;\n      if (!sameValue(previousLastIndex, 0)) rx.lastIndex = 0;\n      var result = regExpExec(rx, S);\n      if (!sameValue(rx.lastIndex, previousLastIndex)) rx.lastIndex = previousLastIndex;\n      return result === null ? -1 : result.index;\n    }\n  ];\n});\n","// 7.3.20 SpeciesConstructor(O, defaultConstructor)\nvar anObject = require('./_an-object');\nvar aFunction = require('./_a-function');\nvar SPECIES = require('./_wks')('species');\nmodule.exports = function (O, D) {\n  var C = anObject(O).constructor;\n  var S;\n  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);\n};\n","'use strict';\n\nvar isRegExp = require('./_is-regexp');\nvar anObject = require('./_an-object');\nvar speciesConstructor = require('./_species-constructor');\nvar advanceStringIndex = require('./_advance-string-index');\nvar toLength = require('./_to-length');\nvar callRegExpExec = require('./_regexp-exec-abstract');\nvar regexpExec = require('./_regexp-exec');\nvar fails = require('./_fails');\nvar $min = Math.min;\nvar $push = [].push;\nvar $SPLIT = 'split';\nvar LENGTH = 'length';\nvar LAST_INDEX = 'lastIndex';\nvar MAX_UINT32 = 0xffffffff;\n\n// babel-minify transpiles RegExp('x', 'y') -> /x/y and it causes SyntaxError\nvar SUPPORTS_Y = !fails(function () { RegExp(MAX_UINT32, 'y'); });\n\n// @@split logic\nrequire('./_fix-re-wks')('split', 2, function (defined, SPLIT, $split, maybeCallNative) {\n  var internalSplit;\n  if (\n    'abbc'[$SPLIT](/(b)*/)[1] == 'c' ||\n    'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 ||\n    'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 ||\n    '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 ||\n    '.'[$SPLIT](/()()/)[LENGTH] > 1 ||\n    ''[$SPLIT](/.?/)[LENGTH]\n  ) {\n    // based on es5-shim implementation, need to rework it\n    internalSplit = function (separator, limit) {\n      var string = String(this);\n      if (separator === undefined && limit === 0) return [];\n      // If `separator` is not a regex, use native split\n      if (!isRegExp(separator)) return $split.call(string, separator, limit);\n      var output = [];\n      var flags = (separator.ignoreCase ? 'i' : '') +\n                  (separator.multiline ? 'm' : '') +\n                  (separator.unicode ? 'u' : '') +\n                  (separator.sticky ? 'y' : '');\n      var lastLastIndex = 0;\n      var splitLimit = limit === undefined ? MAX_UINT32 : limit >>> 0;\n      // Make `global` and avoid `lastIndex` issues by working with a copy\n      var separatorCopy = new RegExp(separator.source, flags + 'g');\n      var match, lastIndex, lastLength;\n      while (match = regexpExec.call(separatorCopy, string)) {\n        lastIndex = separatorCopy[LAST_INDEX];\n        if (lastIndex > lastLastIndex) {\n          output.push(string.slice(lastLastIndex, match.index));\n          if (match[LENGTH] > 1 && match.index < string[LENGTH]) $push.apply(output, match.slice(1));\n          lastLength = match[0][LENGTH];\n          lastLastIndex = lastIndex;\n          if (output[LENGTH] >= splitLimit) break;\n        }\n        if (separatorCopy[LAST_INDEX] === match.index) separatorCopy[LAST_INDEX]++; // Avoid an infinite loop\n      }\n      if (lastLastIndex === string[LENGTH]) {\n        if (lastLength || !separatorCopy.test('')) output.push('');\n      } else output.push(string.slice(lastLastIndex));\n      return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;\n    };\n  // Chakra, V8\n  } else if ('0'[$SPLIT](undefined, 0)[LENGTH]) {\n    internalSplit = function (separator, limit) {\n      return separator === undefined && limit === 0 ? [] : $split.call(this, separator, limit);\n    };\n  } else {\n    internalSplit = $split;\n  }\n\n  return [\n    // `String.prototype.split` method\n    // https://tc39.github.io/ecma262/#sec-string.prototype.split\n    function split(separator, limit) {\n      var O = defined(this);\n      var splitter = separator == undefined ? undefined : separator[SPLIT];\n      return splitter !== undefined\n        ? splitter.call(separator, O, limit)\n        : internalSplit.call(String(O), separator, limit);\n    },\n    // `RegExp.prototype[@@split]` method\n    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@split\n    //\n    // NOTE: This cannot be properly polyfilled in engines that don't support\n    // the 'y' flag.\n    function (regexp, limit) {\n      var res = maybeCallNative(internalSplit, regexp, this, limit, internalSplit !== $split);\n      if (res.done) return res.value;\n\n      var rx = anObject(regexp);\n      var S = String(this);\n      var C = speciesConstructor(rx, RegExp);\n\n      var unicodeMatching = rx.unicode;\n      var flags = (rx.ignoreCase ? 'i' : '') +\n                  (rx.multiline ? 'm' : '') +\n                  (rx.unicode ? 'u' : '') +\n                  (SUPPORTS_Y ? 'y' : 'g');\n\n      // ^(? + rx + ) is needed, in combination with some S slicing, to\n      // simulate the 'y' flag.\n      var splitter = new C(SUPPORTS_Y ? rx : '^(?:' + rx.source + ')', flags);\n      var lim = limit === undefined ? MAX_UINT32 : limit >>> 0;\n      if (lim === 0) return [];\n      if (S.length === 0) return callRegExpExec(splitter, S) === null ? [S] : [];\n      var p = 0;\n      var q = 0;\n      var A = [];\n      while (q < S.length) {\n        splitter.lastIndex = SUPPORTS_Y ? q : 0;\n        var z = callRegExpExec(splitter, SUPPORTS_Y ? S : S.slice(q));\n        var e;\n        if (\n          z === null ||\n          (e = $min(toLength(splitter.lastIndex + (SUPPORTS_Y ? 0 : q)), S.length)) === p\n        ) {\n          q = advanceStringIndex(S, q, unicodeMatching);\n        } else {\n          A.push(S.slice(p, q));\n          if (A.length === lim) return A;\n          for (var i = 1; i <= z.length - 1; i++) {\n            A.push(z[i]);\n            if (A.length === lim) return A;\n          }\n          q = p = e;\n        }\n      }\n      A.push(S.slice(p));\n      return A;\n    }\n  ];\n});\n","module.exports = function (it, Constructor, name, forbiddenField) {\n  if (!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)) {\n    throw TypeError(name + ': incorrect invocation!');\n  } return it;\n};\n","var ctx = require('./_ctx');\nvar call = require('./_iter-call');\nvar isArrayIter = require('./_is-array-iter');\nvar anObject = require('./_an-object');\nvar toLength = require('./_to-length');\nvar getIterFn = require('./core.get-iterator-method');\nvar BREAK = {};\nvar RETURN = {};\nvar exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {\n  var iterFn = ITERATOR ? function () { return iterable; } : getIterFn(iterable);\n  var f = ctx(fn, that, entries ? 2 : 1);\n  var index = 0;\n  var length, step, iterator, result;\n  if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');\n  // fast case for arrays with default iterator\n  if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {\n    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);\n    if (result === BREAK || result === RETURN) return result;\n  } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {\n    result = call(iterator, f, step.value, entries);\n    if (result === BREAK || result === RETURN) return result;\n  }\n};\nexports.BREAK = BREAK;\nexports.RETURN = RETURN;\n","var ctx = require('./_ctx');\nvar invoke = require('./_invoke');\nvar html = require('./_html');\nvar cel = require('./_dom-create');\nvar global = require('./_global');\nvar process = global.process;\nvar setTask = global.setImmediate;\nvar clearTask = global.clearImmediate;\nvar MessageChannel = global.MessageChannel;\nvar Dispatch = global.Dispatch;\nvar counter = 0;\nvar queue = {};\nvar ONREADYSTATECHANGE = 'onreadystatechange';\nvar defer, channel, port;\nvar run = function () {\n  var id = +this;\n  // eslint-disable-next-line no-prototype-builtins\n  if (queue.hasOwnProperty(id)) {\n    var fn = queue[id];\n    delete queue[id];\n    fn();\n  }\n};\nvar listener = function (event) {\n  run.call(event.data);\n};\n// Node.js 0.9+ & IE10+ has setImmediate, otherwise:\nif (!setTask || !clearTask) {\n  setTask = function setImmediate(fn) {\n    var args = [];\n    var i = 1;\n    while (arguments.length > i) args.push(arguments[i++]);\n    queue[++counter] = function () {\n      // eslint-disable-next-line no-new-func\n      invoke(typeof fn == 'function' ? fn : Function(fn), args);\n    };\n    defer(counter);\n    return counter;\n  };\n  clearTask = function clearImmediate(id) {\n    delete queue[id];\n  };\n  // Node.js 0.8-\n  if (require('./_cof')(process) == 'process') {\n    defer = function (id) {\n      process.nextTick(ctx(run, id, 1));\n    };\n  // Sphere (JS game engine) Dispatch API\n  } else if (Dispatch && Dispatch.now) {\n    defer = function (id) {\n      Dispatch.now(ctx(run, id, 1));\n    };\n  // Browsers with MessageChannel, includes WebWorkers\n  } else if (MessageChannel) {\n    channel = new MessageChannel();\n    port = channel.port2;\n    channel.port1.onmessage = listener;\n    defer = ctx(port.postMessage, port, 1);\n  // Browsers with postMessage, skip WebWorkers\n  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'\n  } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {\n    defer = function (id) {\n      global.postMessage(id + '', '*');\n    };\n    global.addEventListener('message', listener, false);\n  // IE8-\n  } else if (ONREADYSTATECHANGE in cel('script')) {\n    defer = function (id) {\n      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {\n        html.removeChild(this);\n        run.call(id);\n      };\n    };\n  // Rest old browsers\n  } else {\n    defer = function (id) {\n      setTimeout(ctx(run, id, 1), 0);\n    };\n  }\n}\nmodule.exports = {\n  set: setTask,\n  clear: clearTask\n};\n","var global = require('./_global');\nvar macrotask = require('./_task').set;\nvar Observer = global.MutationObserver || global.WebKitMutationObserver;\nvar process = global.process;\nvar Promise = global.Promise;\nvar isNode = require('./_cof')(process) == 'process';\n\nmodule.exports = function () {\n  var head, last, notify;\n\n  var flush = function () {\n    var parent, fn;\n    if (isNode && (parent = process.domain)) parent.exit();\n    while (head) {\n      fn = head.fn;\n      head = head.next;\n      try {\n        fn();\n      } catch (e) {\n        if (head) notify();\n        else last = undefined;\n        throw e;\n      }\n    } last = undefined;\n    if (parent) parent.enter();\n  };\n\n  // Node.js\n  if (isNode) {\n    notify = function () {\n      process.nextTick(flush);\n    };\n  // browsers with MutationObserver, except iOS Safari - https://github.com/zloirock/core-js/issues/339\n  } else if (Observer && !(global.navigator && global.navigator.standalone)) {\n    var toggle = true;\n    var node = document.createTextNode('');\n    new Observer(flush).observe(node, { characterData: true }); // eslint-disable-line no-new\n    notify = function () {\n      node.data = toggle = !toggle;\n    };\n  // environments with maybe non-completely correct, but existent Promise\n  } else if (Promise && Promise.resolve) {\n    // Promise.resolve without an argument throws an error in LG WebOS 2\n    var promise = Promise.resolve(undefined);\n    notify = function () {\n      promise.then(flush);\n    };\n  // for other environments - macrotask based on:\n  // - setImmediate\n  // - MessageChannel\n  // - window.postMessag\n  // - onreadystatechange\n  // - setTimeout\n  } else {\n    notify = function () {\n      // strange IE + webpack dev server bug - use .call(global)\n      macrotask.call(global, flush);\n    };\n  }\n\n  return function (fn) {\n    var task = { fn: fn, next: undefined };\n    if (last) last.next = task;\n    if (!head) {\n      head = task;\n      notify();\n    } last = task;\n  };\n};\n","'use strict';\n// 25.4.1.5 NewPromiseCapability(C)\nvar aFunction = require('./_a-function');\n\nfunction PromiseCapability(C) {\n  var resolve, reject;\n  this.promise = new C(function ($$resolve, $$reject) {\n    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');\n    resolve = $$resolve;\n    reject = $$reject;\n  });\n  this.resolve = aFunction(resolve);\n  this.reject = aFunction(reject);\n}\n\nmodule.exports.f = function (C) {\n  return new PromiseCapability(C);\n};\n","module.exports = function (exec) {\n  try {\n    return { e: false, v: exec() };\n  } catch (e) {\n    return { e: true, v: e };\n  }\n};\n","var global = require('./_global');\nvar navigator = global.navigator;\n\nmodule.exports = navigator && navigator.userAgent || '';\n","var anObject = require('./_an-object');\nvar isObject = require('./_is-object');\nvar newPromiseCapability = require('./_new-promise-capability');\n\nmodule.exports = function (C, x) {\n  anObject(C);\n  if (isObject(x) && x.constructor === C) return x;\n  var promiseCapability = newPromiseCapability.f(C);\n  var resolve = promiseCapability.resolve;\n  resolve(x);\n  return promiseCapability.promise;\n};\n","var redefine = require('./_redefine');\nmodule.exports = function (target, src, safe) {\n  for (var key in src) redefine(target, key, src[key], safe);\n  return target;\n};\n","'use strict';\nvar LIBRARY = require('./_library');\nvar global = require('./_global');\nvar ctx = require('./_ctx');\nvar classof = require('./_classof');\nvar $export = require('./_export');\nvar isObject = require('./_is-object');\nvar aFunction = require('./_a-function');\nvar anInstance = require('./_an-instance');\nvar forOf = require('./_for-of');\nvar speciesConstructor = require('./_species-constructor');\nvar task = require('./_task').set;\nvar microtask = require('./_microtask')();\nvar newPromiseCapabilityModule = require('./_new-promise-capability');\nvar perform = require('./_perform');\nvar userAgent = require('./_user-agent');\nvar promiseResolve = require('./_promise-resolve');\nvar PROMISE = 'Promise';\nvar TypeError = global.TypeError;\nvar process = global.process;\nvar versions = process && process.versions;\nvar v8 = versions && versions.v8 || '';\nvar $Promise = global[PROMISE];\nvar isNode = classof(process) == 'process';\nvar empty = function () { /* empty */ };\nvar Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;\nvar newPromiseCapability = newGenericPromiseCapability = newPromiseCapabilityModule.f;\n\nvar USE_NATIVE = !!function () {\n  try {\n    // correct subclassing with @@species support\n    var promise = $Promise.resolve(1);\n    var FakePromise = (promise.constructor = {})[require('./_wks')('species')] = function (exec) {\n      exec(empty, empty);\n    };\n    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test\n    return (isNode || typeof PromiseRejectionEvent == 'function')\n      && promise.then(empty) instanceof FakePromise\n      // v8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables\n      // https://bugs.chromium.org/p/chromium/issues/detail?id=830565\n      // we can't detect it synchronously, so just check versions\n      && v8.indexOf('6.6') !== 0\n      && userAgent.indexOf('Chrome/66') === -1;\n  } catch (e) { /* empty */ }\n}();\n\n// helpers\nvar isThenable = function (it) {\n  var then;\n  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;\n};\nvar notify = function (promise, isReject) {\n  if (promise._n) return;\n  promise._n = true;\n  var chain = promise._c;\n  microtask(function () {\n    var value = promise._v;\n    var ok = promise._s == 1;\n    var i = 0;\n    var run = function (reaction) {\n      var handler = ok ? reaction.ok : reaction.fail;\n      var resolve = reaction.resolve;\n      var reject = reaction.reject;\n      var domain = reaction.domain;\n      var result, then, exited;\n      try {\n        if (handler) {\n          if (!ok) {\n            if (promise._h == 2) onHandleUnhandled(promise);\n            promise._h = 1;\n          }\n          if (handler === true) result = value;\n          else {\n            if (domain) domain.enter();\n            result = handler(value); // may throw\n            if (domain) {\n              domain.exit();\n              exited = true;\n            }\n          }\n          if (result === reaction.promise) {\n            reject(TypeError('Promise-chain cycle'));\n          } else if (then = isThenable(result)) {\n            then.call(result, resolve, reject);\n          } else resolve(result);\n        } else reject(value);\n      } catch (e) {\n        if (domain && !exited) domain.exit();\n        reject(e);\n      }\n    };\n    while (chain.length > i) run(chain[i++]); // variable length - can't use forEach\n    promise._c = [];\n    promise._n = false;\n    if (isReject && !promise._h) onUnhandled(promise);\n  });\n};\nvar onUnhandled = function (promise) {\n  task.call(global, function () {\n    var value = promise._v;\n    var unhandled = isUnhandled(promise);\n    var result, handler, console;\n    if (unhandled) {\n      result = perform(function () {\n        if (isNode) {\n          process.emit('unhandledRejection', value, promise);\n        } else if (handler = global.onunhandledrejection) {\n          handler({ promise: promise, reason: value });\n        } else if ((console = global.console) && console.error) {\n          console.error('Unhandled promise rejection', value);\n        }\n      });\n      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should\n      promise._h = isNode || isUnhandled(promise) ? 2 : 1;\n    } promise._a = undefined;\n    if (unhandled && result.e) throw result.v;\n  });\n};\nvar isUnhandled = function (promise) {\n  return promise._h !== 1 && (promise._a || promise._c).length === 0;\n};\nvar onHandleUnhandled = function (promise) {\n  task.call(global, function () {\n    var handler;\n    if (isNode) {\n      process.emit('rejectionHandled', promise);\n    } else if (handler = global.onrejectionhandled) {\n      handler({ promise: promise, reason: promise._v });\n    }\n  });\n};\nvar $reject = function (value) {\n  var promise = this;\n  if (promise._d) return;\n  promise._d = true;\n  promise = promise._w || promise; // unwrap\n  promise._v = value;\n  promise._s = 2;\n  if (!promise._a) promise._a = promise._c.slice();\n  notify(promise, true);\n};\nvar $resolve = function (value) {\n  var promise = this;\n  var then;\n  if (promise._d) return;\n  promise._d = true;\n  promise = promise._w || promise; // unwrap\n  try {\n    if (promise === value) throw TypeError(\"Promise can't be resolved itself\");\n    if (then = isThenable(value)) {\n      microtask(function () {\n        var wrapper = { _w: promise, _d: false }; // wrap\n        try {\n          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));\n        } catch (e) {\n          $reject.call(wrapper, e);\n        }\n      });\n    } else {\n      promise._v = value;\n      promise._s = 1;\n      notify(promise, false);\n    }\n  } catch (e) {\n    $reject.call({ _w: promise, _d: false }, e); // wrap\n  }\n};\n\n// constructor polyfill\nif (!USE_NATIVE) {\n  // 25.4.3.1 Promise(executor)\n  $Promise = function Promise(executor) {\n    anInstance(this, $Promise, PROMISE, '_h');\n    aFunction(executor);\n    Internal.call(this);\n    try {\n      executor(ctx($resolve, this, 1), ctx($reject, this, 1));\n    } catch (err) {\n      $reject.call(this, err);\n    }\n  };\n  // eslint-disable-next-line no-unused-vars\n  Internal = function Promise(executor) {\n    this._c = [];             // <- awaiting reactions\n    this._a = undefined;      // <- checked in isUnhandled reactions\n    this._s = 0;              // <- state\n    this._d = false;          // <- done\n    this._v = undefined;      // <- value\n    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled\n    this._n = false;          // <- notify\n  };\n  Internal.prototype = require('./_redefine-all')($Promise.prototype, {\n    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)\n    then: function then(onFulfilled, onRejected) {\n      var reaction = newPromiseCapability(speciesConstructor(this, $Promise));\n      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;\n      reaction.fail = typeof onRejected == 'function' && onRejected;\n      reaction.domain = isNode ? process.domain : undefined;\n      this._c.push(reaction);\n      if (this._a) this._a.push(reaction);\n      if (this._s) notify(this, false);\n      return reaction.promise;\n    },\n    // 25.4.5.1 Promise.prototype.catch(onRejected)\n    'catch': function (onRejected) {\n      return this.then(undefined, onRejected);\n    }\n  });\n  OwnPromiseCapability = function () {\n    var promise = new Internal();\n    this.promise = promise;\n    this.resolve = ctx($resolve, promise, 1);\n    this.reject = ctx($reject, promise, 1);\n  };\n  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {\n    return C === $Promise || C === Wrapper\n      ? new OwnPromiseCapability(C)\n      : newGenericPromiseCapability(C);\n  };\n}\n\n$export($export.G + $export.W + $export.F * !USE_NATIVE, { Promise: $Promise });\nrequire('./_set-to-string-tag')($Promise, PROMISE);\nrequire('./_set-species')(PROMISE);\nWrapper = require('./_core')[PROMISE];\n\n// statics\n$export($export.S + $export.F * !USE_NATIVE, PROMISE, {\n  // 25.4.4.5 Promise.reject(r)\n  reject: function reject(r) {\n    var capability = newPromiseCapability(this);\n    var $$reject = capability.reject;\n    $$reject(r);\n    return capability.promise;\n  }\n});\n$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {\n  // 25.4.4.6 Promise.resolve(x)\n  resolve: function resolve(x) {\n    return promiseResolve(LIBRARY && this === Wrapper ? $Promise : this, x);\n  }\n});\n$export($export.S + $export.F * !(USE_NATIVE && require('./_iter-detect')(function (iter) {\n  $Promise.all(iter)['catch'](empty);\n})), PROMISE, {\n  // 25.4.4.1 Promise.all(iterable)\n  all: function all(iterable) {\n    var C = this;\n    var capability = newPromiseCapability(C);\n    var resolve = capability.resolve;\n    var reject = capability.reject;\n    var result = perform(function () {\n      var values = [];\n      var index = 0;\n      var remaining = 1;\n      forOf(iterable, false, function (promise) {\n        var $index = index++;\n        var alreadyCalled = false;\n        values.push(undefined);\n        remaining++;\n        C.resolve(promise).then(function (value) {\n          if (alreadyCalled) return;\n          alreadyCalled = true;\n          values[$index] = value;\n          --remaining || resolve(values);\n        }, reject);\n      });\n      --remaining || resolve(values);\n    });\n    if (result.e) reject(result.v);\n    return capability.promise;\n  },\n  // 25.4.4.4 Promise.race(iterable)\n  race: function race(iterable) {\n    var C = this;\n    var capability = newPromiseCapability(C);\n    var reject = capability.reject;\n    var result = perform(function () {\n      forOf(iterable, false, function (promise) {\n        C.resolve(promise).then(capability.resolve, reject);\n      });\n    });\n    if (result.e) reject(result.v);\n    return capability.promise;\n  }\n});\n","var isObject = require('./_is-object');\nmodule.exports = function (it, TYPE) {\n  if (!isObject(it) || it._t !== TYPE) throw TypeError('Incompatible receiver, ' + TYPE + ' required!');\n  return it;\n};\n","'use strict';\nvar dP = require('./_object-dp').f;\nvar create = require('./_object-create');\nvar redefineAll = require('./_redefine-all');\nvar ctx = require('./_ctx');\nvar anInstance = require('./_an-instance');\nvar forOf = require('./_for-of');\nvar $iterDefine = require('./_iter-define');\nvar step = require('./_iter-step');\nvar setSpecies = require('./_set-species');\nvar DESCRIPTORS = require('./_descriptors');\nvar fastKey = require('./_meta').fastKey;\nvar validate = require('./_validate-collection');\nvar SIZE = DESCRIPTORS ? '_s' : 'size';\n\nvar getEntry = function (that, key) {\n  // fast case\n  var index = fastKey(key);\n  var entry;\n  if (index !== 'F') return that._i[index];\n  // frozen object case\n  for (entry = that._f; entry; entry = entry.n) {\n    if (entry.k == key) return entry;\n  }\n};\n\nmodule.exports = {\n  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {\n    var C = wrapper(function (that, iterable) {\n      anInstance(that, C, NAME, '_i');\n      that._t = NAME;         // collection type\n      that._i = create(null); // index\n      that._f = undefined;    // first entry\n      that._l = undefined;    // last entry\n      that[SIZE] = 0;         // size\n      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);\n    });\n    redefineAll(C.prototype, {\n      // 23.1.3.1 Map.prototype.clear()\n      // 23.2.3.2 Set.prototype.clear()\n      clear: function clear() {\n        for (var that = validate(this, NAME), data = that._i, entry = that._f; entry; entry = entry.n) {\n          entry.r = true;\n          if (entry.p) entry.p = entry.p.n = undefined;\n          delete data[entry.i];\n        }\n        that._f = that._l = undefined;\n        that[SIZE] = 0;\n      },\n      // 23.1.3.3 Map.prototype.delete(key)\n      // 23.2.3.4 Set.prototype.delete(value)\n      'delete': function (key) {\n        var that = validate(this, NAME);\n        var entry = getEntry(that, key);\n        if (entry) {\n          var next = entry.n;\n          var prev = entry.p;\n          delete that._i[entry.i];\n          entry.r = true;\n          if (prev) prev.n = next;\n          if (next) next.p = prev;\n          if (that._f == entry) that._f = next;\n          if (that._l == entry) that._l = prev;\n          that[SIZE]--;\n        } return !!entry;\n      },\n      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)\n      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)\n      forEach: function forEach(callbackfn /* , that = undefined */) {\n        validate(this, NAME);\n        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3);\n        var entry;\n        while (entry = entry ? entry.n : this._f) {\n          f(entry.v, entry.k, this);\n          // revert to the last existing entry\n          while (entry && entry.r) entry = entry.p;\n        }\n      },\n      // 23.1.3.7 Map.prototype.has(key)\n      // 23.2.3.7 Set.prototype.has(value)\n      has: function has(key) {\n        return !!getEntry(validate(this, NAME), key);\n      }\n    });\n    if (DESCRIPTORS) dP(C.prototype, 'size', {\n      get: function () {\n        return validate(this, NAME)[SIZE];\n      }\n    });\n    return C;\n  },\n  def: function (that, key, value) {\n    var entry = getEntry(that, key);\n    var prev, index;\n    // change existing entry\n    if (entry) {\n      entry.v = value;\n    // create new entry\n    } else {\n      that._l = entry = {\n        i: index = fastKey(key, true), // <- index\n        k: key,                        // <- key\n        v: value,                      // <- value\n        p: prev = that._l,             // <- previous entry\n        n: undefined,                  // <- next entry\n        r: false                       // <- removed\n      };\n      if (!that._f) that._f = entry;\n      if (prev) prev.n = entry;\n      that[SIZE]++;\n      // add to index\n      if (index !== 'F') that._i[index] = entry;\n    } return that;\n  },\n  getEntry: getEntry,\n  setStrong: function (C, NAME, IS_MAP) {\n    // add .keys, .values, .entries, [@@iterator]\n    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11\n    $iterDefine(C, NAME, function (iterated, kind) {\n      this._t = validate(iterated, NAME); // target\n      this._k = kind;                     // kind\n      this._l = undefined;                // previous\n    }, function () {\n      var that = this;\n      var kind = that._k;\n      var entry = that._l;\n      // revert to the last existing entry\n      while (entry && entry.r) entry = entry.p;\n      // get next entry\n      if (!that._t || !(that._l = entry = entry ? entry.n : that._t._f)) {\n        // or finish the iteration\n        that._t = undefined;\n        return step(1);\n      }\n      // return step by kind\n      if (kind == 'keys') return step(0, entry.k);\n      if (kind == 'values') return step(0, entry.v);\n      return step(0, [entry.k, entry.v]);\n    }, IS_MAP ? 'entries' : 'values', !IS_MAP, true);\n\n    // add [@@species], 23.1.2.2, 23.2.2.2\n    setSpecies(NAME);\n  }\n};\n","'use strict';\nvar global = require('./_global');\nvar $export = require('./_export');\nvar redefine = require('./_redefine');\nvar redefineAll = require('./_redefine-all');\nvar meta = require('./_meta');\nvar forOf = require('./_for-of');\nvar anInstance = require('./_an-instance');\nvar isObject = require('./_is-object');\nvar fails = require('./_fails');\nvar $iterDetect = require('./_iter-detect');\nvar setToStringTag = require('./_set-to-string-tag');\nvar inheritIfRequired = require('./_inherit-if-required');\n\nmodule.exports = function (NAME, wrapper, methods, common, IS_MAP, IS_WEAK) {\n  var Base = global[NAME];\n  var C = Base;\n  var ADDER = IS_MAP ? 'set' : 'add';\n  var proto = C && C.prototype;\n  var O = {};\n  var fixMethod = function (KEY) {\n    var fn = proto[KEY];\n    redefine(proto, KEY,\n      KEY == 'delete' ? function (a) {\n        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);\n      } : KEY == 'has' ? function has(a) {\n        return IS_WEAK && !isObject(a) ? false : fn.call(this, a === 0 ? 0 : a);\n      } : KEY == 'get' ? function get(a) {\n        return IS_WEAK && !isObject(a) ? undefined : fn.call(this, a === 0 ? 0 : a);\n      } : KEY == 'add' ? function add(a) { fn.call(this, a === 0 ? 0 : a); return this; }\n        : function set(a, b) { fn.call(this, a === 0 ? 0 : a, b); return this; }\n    );\n  };\n  if (typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function () {\n    new C().entries().next();\n  }))) {\n    // create collection constructor\n    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);\n    redefineAll(C.prototype, methods);\n    meta.NEED = true;\n  } else {\n    var instance = new C();\n    // early implementations not supports chaining\n    var HASNT_CHAINING = instance[ADDER](IS_WEAK ? {} : -0, 1) != instance;\n    // V8 ~  Chromium 40- weak-collections throws on primitives, but should return false\n    var THROWS_ON_PRIMITIVES = fails(function () { instance.has(1); });\n    // most early implementations doesn't supports iterables, most modern - not close it correctly\n    var ACCEPT_ITERABLES = $iterDetect(function (iter) { new C(iter); }); // eslint-disable-line no-new\n    // for early implementations -0 and +0 not the same\n    var BUGGY_ZERO = !IS_WEAK && fails(function () {\n      // V8 ~ Chromium 42- fails only with 5+ elements\n      var $instance = new C();\n      var index = 5;\n      while (index--) $instance[ADDER](index, index);\n      return !$instance.has(-0);\n    });\n    if (!ACCEPT_ITERABLES) {\n      C = wrapper(function (target, iterable) {\n        anInstance(target, C, NAME);\n        var that = inheritIfRequired(new Base(), target, C);\n        if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);\n        return that;\n      });\n      C.prototype = proto;\n      proto.constructor = C;\n    }\n    if (THROWS_ON_PRIMITIVES || BUGGY_ZERO) {\n      fixMethod('delete');\n      fixMethod('has');\n      IS_MAP && fixMethod('get');\n    }\n    if (BUGGY_ZERO || HASNT_CHAINING) fixMethod(ADDER);\n    // weak collections should not contains .clear method\n    if (IS_WEAK && proto.clear) delete proto.clear;\n  }\n\n  setToStringTag(C, NAME);\n\n  O[NAME] = C;\n  $export($export.G + $export.W + $export.F * (C != Base), O);\n\n  if (!IS_WEAK) common.setStrong(C, NAME, IS_MAP);\n\n  return C;\n};\n","'use strict';\nvar strong = require('./_collection-strong');\nvar validate = require('./_validate-collection');\nvar MAP = 'Map';\n\n// 23.1 Map Objects\nmodule.exports = require('./_collection')(MAP, function (get) {\n  return function Map() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };\n}, {\n  // 23.1.3.6 Map.prototype.get(key)\n  get: function get(key) {\n    var entry = strong.getEntry(validate(this, MAP), key);\n    return entry && entry.v;\n  },\n  // 23.1.3.9 Map.prototype.set(key, value)\n  set: function set(key, value) {\n    return strong.def(validate(this, MAP), key === 0 ? 0 : key, value);\n  }\n}, strong, true);\n","'use strict';\nvar strong = require('./_collection-strong');\nvar validate = require('./_validate-collection');\nvar SET = 'Set';\n\n// 23.2 Set Objects\nmodule.exports = require('./_collection')(SET, function (get) {\n  return function Set() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };\n}, {\n  // 23.2.3.1 Set.prototype.add(value)\n  add: function add(value) {\n    return strong.def(validate(this, SET), value = value === 0 ? 0 : value, value);\n  }\n}, strong);\n","'use strict';\nvar redefineAll = require('./_redefine-all');\nvar getWeak = require('./_meta').getWeak;\nvar anObject = require('./_an-object');\nvar isObject = require('./_is-object');\nvar anInstance = require('./_an-instance');\nvar forOf = require('./_for-of');\nvar createArrayMethod = require('./_array-methods');\nvar $has = require('./_has');\nvar validate = require('./_validate-collection');\nvar arrayFind = createArrayMethod(5);\nvar arrayFindIndex = createArrayMethod(6);\nvar id = 0;\n\n// fallback for uncaught frozen keys\nvar uncaughtFrozenStore = function (that) {\n  return that._l || (that._l = new UncaughtFrozenStore());\n};\nvar UncaughtFrozenStore = function () {\n  this.a = [];\n};\nvar findUncaughtFrozen = function (store, key) {\n  return arrayFind(store.a, function (it) {\n    return it[0] === key;\n  });\n};\nUncaughtFrozenStore.prototype = {\n  get: function (key) {\n    var entry = findUncaughtFrozen(this, key);\n    if (entry) return entry[1];\n  },\n  has: function (key) {\n    return !!findUncaughtFrozen(this, key);\n  },\n  set: function (key, value) {\n    var entry = findUncaughtFrozen(this, key);\n    if (entry) entry[1] = value;\n    else this.a.push([key, value]);\n  },\n  'delete': function (key) {\n    var index = arrayFindIndex(this.a, function (it) {\n      return it[0] === key;\n    });\n    if (~index) this.a.splice(index, 1);\n    return !!~index;\n  }\n};\n\nmodule.exports = {\n  getConstructor: function (wrapper, NAME, IS_MAP, ADDER) {\n    var C = wrapper(function (that, iterable) {\n      anInstance(that, C, NAME, '_i');\n      that._t = NAME;      // collection type\n      that._i = id++;      // collection id\n      that._l = undefined; // leak store for uncaught frozen objects\n      if (iterable != undefined) forOf(iterable, IS_MAP, that[ADDER], that);\n    });\n    redefineAll(C.prototype, {\n      // 23.3.3.2 WeakMap.prototype.delete(key)\n      // 23.4.3.3 WeakSet.prototype.delete(value)\n      'delete': function (key) {\n        if (!isObject(key)) return false;\n        var data = getWeak(key);\n        if (data === true) return uncaughtFrozenStore(validate(this, NAME))['delete'](key);\n        return data && $has(data, this._i) && delete data[this._i];\n      },\n      // 23.3.3.4 WeakMap.prototype.has(key)\n      // 23.4.3.4 WeakSet.prototype.has(value)\n      has: function has(key) {\n        if (!isObject(key)) return false;\n        var data = getWeak(key);\n        if (data === true) return uncaughtFrozenStore(validate(this, NAME)).has(key);\n        return data && $has(data, this._i);\n      }\n    });\n    return C;\n  },\n  def: function (that, key, value) {\n    var data = getWeak(anObject(key), true);\n    if (data === true) uncaughtFrozenStore(that).set(key, value);\n    else data[that._i] = value;\n    return that;\n  },\n  ufstore: uncaughtFrozenStore\n};\n","'use strict';\nvar global = require('./_global');\nvar each = require('./_array-methods')(0);\nvar redefine = require('./_redefine');\nvar meta = require('./_meta');\nvar assign = require('./_object-assign');\nvar weak = require('./_collection-weak');\nvar isObject = require('./_is-object');\nvar validate = require('./_validate-collection');\nvar NATIVE_WEAK_MAP = require('./_validate-collection');\nvar IS_IE11 = !global.ActiveXObject && 'ActiveXObject' in global;\nvar WEAK_MAP = 'WeakMap';\nvar getWeak = meta.getWeak;\nvar isExtensible = Object.isExtensible;\nvar uncaughtFrozenStore = weak.ufstore;\nvar InternalMap;\n\nvar wrapper = function (get) {\n  return function WeakMap() {\n    return get(this, arguments.length > 0 ? arguments[0] : undefined);\n  };\n};\n\nvar methods = {\n  // 23.3.3.3 WeakMap.prototype.get(key)\n  get: function get(key) {\n    if (isObject(key)) {\n      var data = getWeak(key);\n      if (data === true) return uncaughtFrozenStore(validate(this, WEAK_MAP)).get(key);\n      return data ? data[this._i] : undefined;\n    }\n  },\n  // 23.3.3.5 WeakMap.prototype.set(key, value)\n  set: function set(key, value) {\n    return weak.def(validate(this, WEAK_MAP), key, value);\n  }\n};\n\n// 23.3 WeakMap Objects\nvar $WeakMap = module.exports = require('./_collection')(WEAK_MAP, wrapper, methods, weak, true, true);\n\n// IE11 WeakMap frozen keys fix\nif (NATIVE_WEAK_MAP && IS_IE11) {\n  InternalMap = weak.getConstructor(wrapper, WEAK_MAP);\n  assign(InternalMap.prototype, methods);\n  meta.NEED = true;\n  each(['delete', 'has', 'get', 'set'], function (key) {\n    var proto = $WeakMap.prototype;\n    var method = proto[key];\n    redefine(proto, key, function (a, b) {\n      // store frozen objects on internal weakmap shim\n      if (isObject(a) && !isExtensible(a)) {\n        if (!this._f) this._f = new InternalMap();\n        var result = this._f[key](a, b);\n        return key == 'set' ? this : result;\n      // store all the rest on native weakmap\n      } return method.call(this, a, b);\n    });\n  });\n}\n","'use strict';\nvar weak = require('./_collection-weak');\nvar validate = require('./_validate-collection');\nvar WEAK_SET = 'WeakSet';\n\n// 23.4 WeakSet Objects\nrequire('./_collection')(WEAK_SET, function (get) {\n  return function WeakSet() { return get(this, arguments.length > 0 ? arguments[0] : undefined); };\n}, {\n  // 23.4.3.1 WeakSet.prototype.add(value)\n  add: function add(value) {\n    return weak.def(validate(this, WEAK_SET), value, true);\n  }\n}, weak, false, true);\n","var global = require('./_global');\nvar hide = require('./_hide');\nvar uid = require('./_uid');\nvar TYPED = uid('typed_array');\nvar VIEW = uid('view');\nvar ABV = !!(global.ArrayBuffer && global.DataView);\nvar CONSTR = ABV;\nvar i = 0;\nvar l = 9;\nvar Typed;\n\nvar TypedArrayConstructors = (\n  'Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array'\n).split(',');\n\nwhile (i < l) {\n  if (Typed = global[TypedArrayConstructors[i++]]) {\n    hide(Typed.prototype, TYPED, true);\n    hide(Typed.prototype, VIEW, true);\n  } else CONSTR = false;\n}\n\nmodule.exports = {\n  ABV: ABV,\n  CONSTR: CONSTR,\n  TYPED: TYPED,\n  VIEW: VIEW\n};\n","// https://tc39.github.io/ecma262/#sec-toindex\nvar toInteger = require('./_to-integer');\nvar toLength = require('./_to-length');\nmodule.exports = function (it) {\n  if (it === undefined) return 0;\n  var number = toInteger(it);\n  var length = toLength(number);\n  if (number !== length) throw RangeError('Wrong length!');\n  return length;\n};\n","'use strict';\nvar global = require('./_global');\nvar DESCRIPTORS = require('./_descriptors');\nvar LIBRARY = require('./_library');\nvar $typed = require('./_typed');\nvar hide = require('./_hide');\nvar redefineAll = require('./_redefine-all');\nvar fails = require('./_fails');\nvar anInstance = require('./_an-instance');\nvar toInteger = require('./_to-integer');\nvar toLength = require('./_to-length');\nvar toIndex = require('./_to-index');\nvar gOPN = require('./_object-gopn').f;\nvar dP = require('./_object-dp').f;\nvar arrayFill = require('./_array-fill');\nvar setToStringTag = require('./_set-to-string-tag');\nvar ARRAY_BUFFER = 'ArrayBuffer';\nvar DATA_VIEW = 'DataView';\nvar PROTOTYPE = 'prototype';\nvar WRONG_LENGTH = 'Wrong length!';\nvar WRONG_INDEX = 'Wrong index!';\nvar $ArrayBuffer = global[ARRAY_BUFFER];\nvar $DataView = global[DATA_VIEW];\nvar Math = global.Math;\nvar RangeError = global.RangeError;\n// eslint-disable-next-line no-shadow-restricted-names\nvar Infinity = global.Infinity;\nvar BaseBuffer = $ArrayBuffer;\nvar abs = Math.abs;\nvar pow = Math.pow;\nvar floor = Math.floor;\nvar log = Math.log;\nvar LN2 = Math.LN2;\nvar BUFFER = 'buffer';\nvar BYTE_LENGTH = 'byteLength';\nvar BYTE_OFFSET = 'byteOffset';\nvar $BUFFER = DESCRIPTORS ? '_b' : BUFFER;\nvar $LENGTH = DESCRIPTORS ? '_l' : BYTE_LENGTH;\nvar $OFFSET = DESCRIPTORS ? '_o' : BYTE_OFFSET;\n\n// IEEE754 conversions based on https://github.com/feross/ieee754\nfunction packIEEE754(value, mLen, nBytes) {\n  var buffer = new Array(nBytes);\n  var eLen = nBytes * 8 - mLen - 1;\n  var eMax = (1 << eLen) - 1;\n  var eBias = eMax >> 1;\n  var rt = mLen === 23 ? pow(2, -24) - pow(2, -77) : 0;\n  var i = 0;\n  var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;\n  var e, m, c;\n  value = abs(value);\n  // eslint-disable-next-line no-self-compare\n  if (value != value || value === Infinity) {\n    // eslint-disable-next-line no-self-compare\n    m = value != value ? 1 : 0;\n    e = eMax;\n  } else {\n    e = floor(log(value) / LN2);\n    if (value * (c = pow(2, -e)) < 1) {\n      e--;\n      c *= 2;\n    }\n    if (e + eBias >= 1) {\n      value += rt / c;\n    } else {\n      value += rt * pow(2, 1 - eBias);\n    }\n    if (value * c >= 2) {\n      e++;\n      c /= 2;\n    }\n    if (e + eBias >= eMax) {\n      m = 0;\n      e = eMax;\n    } else if (e + eBias >= 1) {\n      m = (value * c - 1) * pow(2, mLen);\n      e = e + eBias;\n    } else {\n      m = value * pow(2, eBias - 1) * pow(2, mLen);\n      e = 0;\n    }\n  }\n  for (; mLen >= 8; buffer[i++] = m & 255, m /= 256, mLen -= 8);\n  e = e << mLen | m;\n  eLen += mLen;\n  for (; eLen > 0; buffer[i++] = e & 255, e /= 256, eLen -= 8);\n  buffer[--i] |= s * 128;\n  return buffer;\n}\nfunction unpackIEEE754(buffer, mLen, nBytes) {\n  var eLen = nBytes * 8 - mLen - 1;\n  var eMax = (1 << eLen) - 1;\n  var eBias = eMax >> 1;\n  var nBits = eLen - 7;\n  var i = nBytes - 1;\n  var s = buffer[i--];\n  var e = s & 127;\n  var m;\n  s >>= 7;\n  for (; nBits > 0; e = e * 256 + buffer[i], i--, nBits -= 8);\n  m = e & (1 << -nBits) - 1;\n  e >>= -nBits;\n  nBits += mLen;\n  for (; nBits > 0; m = m * 256 + buffer[i], i--, nBits -= 8);\n  if (e === 0) {\n    e = 1 - eBias;\n  } else if (e === eMax) {\n    return m ? NaN : s ? -Infinity : Infinity;\n  } else {\n    m = m + pow(2, mLen);\n    e = e - eBias;\n  } return (s ? -1 : 1) * m * pow(2, e - mLen);\n}\n\nfunction unpackI32(bytes) {\n  return bytes[3] << 24 | bytes[2] << 16 | bytes[1] << 8 | bytes[0];\n}\nfunction packI8(it) {\n  return [it & 0xff];\n}\nfunction packI16(it) {\n  return [it & 0xff, it >> 8 & 0xff];\n}\nfunction packI32(it) {\n  return [it & 0xff, it >> 8 & 0xff, it >> 16 & 0xff, it >> 24 & 0xff];\n}\nfunction packF64(it) {\n  return packIEEE754(it, 52, 8);\n}\nfunction packF32(it) {\n  return packIEEE754(it, 23, 4);\n}\n\nfunction addGetter(C, key, internal) {\n  dP(C[PROTOTYPE], key, { get: function () { return this[internal]; } });\n}\n\nfunction get(view, bytes, index, isLittleEndian) {\n  var numIndex = +index;\n  var intIndex = toIndex(numIndex);\n  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);\n  var store = view[$BUFFER]._b;\n  var start = intIndex + view[$OFFSET];\n  var pack = store.slice(start, start + bytes);\n  return isLittleEndian ? pack : pack.reverse();\n}\nfunction set(view, bytes, index, conversion, value, isLittleEndian) {\n  var numIndex = +index;\n  var intIndex = toIndex(numIndex);\n  if (intIndex + bytes > view[$LENGTH]) throw RangeError(WRONG_INDEX);\n  var store = view[$BUFFER]._b;\n  var start = intIndex + view[$OFFSET];\n  var pack = conversion(+value);\n  for (var i = 0; i < bytes; i++) store[start + i] = pack[isLittleEndian ? i : bytes - i - 1];\n}\n\nif (!$typed.ABV) {\n  $ArrayBuffer = function ArrayBuffer(length) {\n    anInstance(this, $ArrayBuffer, ARRAY_BUFFER);\n    var byteLength = toIndex(length);\n    this._b = arrayFill.call(new Array(byteLength), 0);\n    this[$LENGTH] = byteLength;\n  };\n\n  $DataView = function DataView(buffer, byteOffset, byteLength) {\n    anInstance(this, $DataView, DATA_VIEW);\n    anInstance(buffer, $ArrayBuffer, DATA_VIEW);\n    var bufferLength = buffer[$LENGTH];\n    var offset = toInteger(byteOffset);\n    if (offset < 0 || offset > bufferLength) throw RangeError('Wrong offset!');\n    byteLength = byteLength === undefined ? bufferLength - offset : toLength(byteLength);\n    if (offset + byteLength > bufferLength) throw RangeError(WRONG_LENGTH);\n    this[$BUFFER] = buffer;\n    this[$OFFSET] = offset;\n    this[$LENGTH] = byteLength;\n  };\n\n  if (DESCRIPTORS) {\n    addGetter($ArrayBuffer, BYTE_LENGTH, '_l');\n    addGetter($DataView, BUFFER, '_b');\n    addGetter($DataView, BYTE_LENGTH, '_l');\n    addGetter($DataView, BYTE_OFFSET, '_o');\n  }\n\n  redefineAll($DataView[PROTOTYPE], {\n    getInt8: function getInt8(byteOffset) {\n      return get(this, 1, byteOffset)[0] << 24 >> 24;\n    },\n    getUint8: function getUint8(byteOffset) {\n      return get(this, 1, byteOffset)[0];\n    },\n    getInt16: function getInt16(byteOffset /* , littleEndian */) {\n      var bytes = get(this, 2, byteOffset, arguments[1]);\n      return (bytes[1] << 8 | bytes[0]) << 16 >> 16;\n    },\n    getUint16: function getUint16(byteOffset /* , littleEndian */) {\n      var bytes = get(this, 2, byteOffset, arguments[1]);\n      return bytes[1] << 8 | bytes[0];\n    },\n    getInt32: function getInt32(byteOffset /* , littleEndian */) {\n      return unpackI32(get(this, 4, byteOffset, arguments[1]));\n    },\n    getUint32: function getUint32(byteOffset /* , littleEndian */) {\n      return unpackI32(get(this, 4, byteOffset, arguments[1])) >>> 0;\n    },\n    getFloat32: function getFloat32(byteOffset /* , littleEndian */) {\n      return unpackIEEE754(get(this, 4, byteOffset, arguments[1]), 23, 4);\n    },\n    getFloat64: function getFloat64(byteOffset /* , littleEndian */) {\n      return unpackIEEE754(get(this, 8, byteOffset, arguments[1]), 52, 8);\n    },\n    setInt8: function setInt8(byteOffset, value) {\n      set(this, 1, byteOffset, packI8, value);\n    },\n    setUint8: function setUint8(byteOffset, value) {\n      set(this, 1, byteOffset, packI8, value);\n    },\n    setInt16: function setInt16(byteOffset, value /* , littleEndian */) {\n      set(this, 2, byteOffset, packI16, value, arguments[2]);\n    },\n    setUint16: function setUint16(byteOffset, value /* , littleEndian */) {\n      set(this, 2, byteOffset, packI16, value, arguments[2]);\n    },\n    setInt32: function setInt32(byteOffset, value /* , littleEndian */) {\n      set(this, 4, byteOffset, packI32, value, arguments[2]);\n    },\n    setUint32: function setUint32(byteOffset, value /* , littleEndian */) {\n      set(this, 4, byteOffset, packI32, value, arguments[2]);\n    },\n    setFloat32: function setFloat32(byteOffset, value /* , littleEndian */) {\n      set(this, 4, byteOffset, packF32, value, arguments[2]);\n    },\n    setFloat64: function setFloat64(byteOffset, value /* , littleEndian */) {\n      set(this, 8, byteOffset, packF64, value, arguments[2]);\n    }\n  });\n} else {\n  if (!fails(function () {\n    $ArrayBuffer(1);\n  }) || !fails(function () {\n    new $ArrayBuffer(-1); // eslint-disable-line no-new\n  }) || fails(function () {\n    new $ArrayBuffer(); // eslint-disable-line no-new\n    new $ArrayBuffer(1.5); // eslint-disable-line no-new\n    new $ArrayBuffer(NaN); // eslint-disable-line no-new\n    return $ArrayBuffer.name != ARRAY_BUFFER;\n  })) {\n    $ArrayBuffer = function ArrayBuffer(length) {\n      anInstance(this, $ArrayBuffer);\n      return new BaseBuffer(toIndex(length));\n    };\n    var ArrayBufferProto = $ArrayBuffer[PROTOTYPE] = BaseBuffer[PROTOTYPE];\n    for (var keys = gOPN(BaseBuffer), j = 0, key; keys.length > j;) {\n      if (!((key = keys[j++]) in $ArrayBuffer)) hide($ArrayBuffer, key, BaseBuffer[key]);\n    }\n    if (!LIBRARY) ArrayBufferProto.constructor = $ArrayBuffer;\n  }\n  // iOS Safari 7.x bug\n  var view = new $DataView(new $ArrayBuffer(2));\n  var $setInt8 = $DataView[PROTOTYPE].setInt8;\n  view.setInt8(0, 2147483648);\n  view.setInt8(1, 2147483649);\n  if (view.getInt8(0) || !view.getInt8(1)) redefineAll($DataView[PROTOTYPE], {\n    setInt8: function setInt8(byteOffset, value) {\n      $setInt8.call(this, byteOffset, value << 24 >> 24);\n    },\n    setUint8: function setUint8(byteOffset, value) {\n      $setInt8.call(this, byteOffset, value << 24 >> 24);\n    }\n  }, true);\n}\nsetToStringTag($ArrayBuffer, ARRAY_BUFFER);\nsetToStringTag($DataView, DATA_VIEW);\nhide($DataView[PROTOTYPE], $typed.VIEW, true);\nexports[ARRAY_BUFFER] = $ArrayBuffer;\nexports[DATA_VIEW] = $DataView;\n","'use strict';\nvar $export = require('./_export');\nvar $typed = require('./_typed');\nvar buffer = require('./_typed-buffer');\nvar anObject = require('./_an-object');\nvar toAbsoluteIndex = require('./_to-absolute-index');\nvar toLength = require('./_to-length');\nvar isObject = require('./_is-object');\nvar ArrayBuffer = require('./_global').ArrayBuffer;\nvar speciesConstructor = require('./_species-constructor');\nvar $ArrayBuffer = buffer.ArrayBuffer;\nvar $DataView = buffer.DataView;\nvar $isView = $typed.ABV && ArrayBuffer.isView;\nvar $slice = $ArrayBuffer.prototype.slice;\nvar VIEW = $typed.VIEW;\nvar ARRAY_BUFFER = 'ArrayBuffer';\n\n$export($export.G + $export.W + $export.F * (ArrayBuffer !== $ArrayBuffer), { ArrayBuffer: $ArrayBuffer });\n\n$export($export.S + $export.F * !$typed.CONSTR, ARRAY_BUFFER, {\n  // 24.1.3.1 ArrayBuffer.isView(arg)\n  isView: function isView(it) {\n    return $isView && $isView(it) || isObject(it) && VIEW in it;\n  }\n});\n\n$export($export.P + $export.U + $export.F * require('./_fails')(function () {\n  return !new $ArrayBuffer(2).slice(1, undefined).byteLength;\n}), ARRAY_BUFFER, {\n  // 24.1.4.3 ArrayBuffer.prototype.slice(start, end)\n  slice: function slice(start, end) {\n    if ($slice !== undefined && end === undefined) return $slice.call(anObject(this), start); // FF fix\n    var len = anObject(this).byteLength;\n    var first = toAbsoluteIndex(start, len);\n    var fin = toAbsoluteIndex(end === undefined ? len : end, len);\n    var result = new (speciesConstructor(this, $ArrayBuffer))(toLength(fin - first));\n    var viewS = new $DataView(this);\n    var viewT = new $DataView(result);\n    var index = 0;\n    while (first < fin) {\n      viewT.setUint8(index++, viewS.getUint8(first++));\n    } return result;\n  }\n});\n\nrequire('./_set-species')(ARRAY_BUFFER);\n","var $export = require('./_export');\n$export($export.G + $export.W + $export.F * !require('./_typed').ABV, {\n  DataView: require('./_typed-buffer').DataView\n});\n","'use strict';\nif (require('./_descriptors')) {\n  var LIBRARY = require('./_library');\n  var global = require('./_global');\n  var fails = require('./_fails');\n  var $export = require('./_export');\n  var $typed = require('./_typed');\n  var $buffer = require('./_typed-buffer');\n  var ctx = require('./_ctx');\n  var anInstance = require('./_an-instance');\n  var propertyDesc = require('./_property-desc');\n  var hide = require('./_hide');\n  var redefineAll = require('./_redefine-all');\n  var toInteger = require('./_to-integer');\n  var toLength = require('./_to-length');\n  var toIndex = require('./_to-index');\n  var toAbsoluteIndex = require('./_to-absolute-index');\n  var toPrimitive = require('./_to-primitive');\n  var has = require('./_has');\n  var classof = require('./_classof');\n  var isObject = require('./_is-object');\n  var toObject = require('./_to-object');\n  var isArrayIter = require('./_is-array-iter');\n  var create = require('./_object-create');\n  var getPrototypeOf = require('./_object-gpo');\n  var gOPN = require('./_object-gopn').f;\n  var getIterFn = require('./core.get-iterator-method');\n  var uid = require('./_uid');\n  var wks = require('./_wks');\n  var createArrayMethod = require('./_array-methods');\n  var createArrayIncludes = require('./_array-includes');\n  var speciesConstructor = require('./_species-constructor');\n  var ArrayIterators = require('./es6.array.iterator');\n  var Iterators = require('./_iterators');\n  var $iterDetect = require('./_iter-detect');\n  var setSpecies = require('./_set-species');\n  var arrayFill = require('./_array-fill');\n  var arrayCopyWithin = require('./_array-copy-within');\n  var $DP = require('./_object-dp');\n  var $GOPD = require('./_object-gopd');\n  var dP = $DP.f;\n  var gOPD = $GOPD.f;\n  var RangeError = global.RangeError;\n  var TypeError = global.TypeError;\n  var Uint8Array = global.Uint8Array;\n  var ARRAY_BUFFER = 'ArrayBuffer';\n  var SHARED_BUFFER = 'Shared' + ARRAY_BUFFER;\n  var BYTES_PER_ELEMENT = 'BYTES_PER_ELEMENT';\n  var PROTOTYPE = 'prototype';\n  var ArrayProto = Array[PROTOTYPE];\n  var $ArrayBuffer = $buffer.ArrayBuffer;\n  var $DataView = $buffer.DataView;\n  var arrayForEach = createArrayMethod(0);\n  var arrayFilter = createArrayMethod(2);\n  var arraySome = createArrayMethod(3);\n  var arrayEvery = createArrayMethod(4);\n  var arrayFind = createArrayMethod(5);\n  var arrayFindIndex = createArrayMethod(6);\n  var arrayIncludes = createArrayIncludes(true);\n  var arrayIndexOf = createArrayIncludes(false);\n  var arrayValues = ArrayIterators.values;\n  var arrayKeys = ArrayIterators.keys;\n  var arrayEntries = ArrayIterators.entries;\n  var arrayLastIndexOf = ArrayProto.lastIndexOf;\n  var arrayReduce = ArrayProto.reduce;\n  var arrayReduceRight = ArrayProto.reduceRight;\n  var arrayJoin = ArrayProto.join;\n  var arraySort = ArrayProto.sort;\n  var arraySlice = ArrayProto.slice;\n  var arrayToString = ArrayProto.toString;\n  var arrayToLocaleString = ArrayProto.toLocaleString;\n  var ITERATOR = wks('iterator');\n  var TAG = wks('toStringTag');\n  var TYPED_CONSTRUCTOR = uid('typed_constructor');\n  var DEF_CONSTRUCTOR = uid('def_constructor');\n  var ALL_CONSTRUCTORS = $typed.CONSTR;\n  var TYPED_ARRAY = $typed.TYPED;\n  var VIEW = $typed.VIEW;\n  var WRONG_LENGTH = 'Wrong length!';\n\n  var $map = createArrayMethod(1, function (O, length) {\n    return allocate(speciesConstructor(O, O[DEF_CONSTRUCTOR]), length);\n  });\n\n  var LITTLE_ENDIAN = fails(function () {\n    // eslint-disable-next-line no-undef\n    return new Uint8Array(new Uint16Array([1]).buffer)[0] === 1;\n  });\n\n  var FORCED_SET = !!Uint8Array && !!Uint8Array[PROTOTYPE].set && fails(function () {\n    new Uint8Array(1).set({});\n  });\n\n  var toOffset = function (it, BYTES) {\n    var offset = toInteger(it);\n    if (offset < 0 || offset % BYTES) throw RangeError('Wrong offset!');\n    return offset;\n  };\n\n  var validate = function (it) {\n    if (isObject(it) && TYPED_ARRAY in it) return it;\n    throw TypeError(it + ' is not a typed array!');\n  };\n\n  var allocate = function (C, length) {\n    if (!(isObject(C) && TYPED_CONSTRUCTOR in C)) {\n      throw TypeError('It is not a typed array constructor!');\n    } return new C(length);\n  };\n\n  var speciesFromList = function (O, list) {\n    return fromList(speciesConstructor(O, O[DEF_CONSTRUCTOR]), list);\n  };\n\n  var fromList = function (C, list) {\n    var index = 0;\n    var length = list.length;\n    var result = allocate(C, length);\n    while (length > index) result[index] = list[index++];\n    return result;\n  };\n\n  var addGetter = function (it, key, internal) {\n    dP(it, key, { get: function () { return this._d[internal]; } });\n  };\n\n  var $from = function from(source /* , mapfn, thisArg */) {\n    var O = toObject(source);\n    var aLen = arguments.length;\n    var mapfn = aLen > 1 ? arguments[1] : undefined;\n    var mapping = mapfn !== undefined;\n    var iterFn = getIterFn(O);\n    var i, length, values, result, step, iterator;\n    if (iterFn != undefined && !isArrayIter(iterFn)) {\n      for (iterator = iterFn.call(O), values = [], i = 0; !(step = iterator.next()).done; i++) {\n        values.push(step.value);\n      } O = values;\n    }\n    if (mapping && aLen > 2) mapfn = ctx(mapfn, arguments[2], 2);\n    for (i = 0, length = toLength(O.length), result = allocate(this, length); length > i; i++) {\n      result[i] = mapping ? mapfn(O[i], i) : O[i];\n    }\n    return result;\n  };\n\n  var $of = function of(/* ...items */) {\n    var index = 0;\n    var length = arguments.length;\n    var result = allocate(this, length);\n    while (length > index) result[index] = arguments[index++];\n    return result;\n  };\n\n  // iOS Safari 6.x fails here\n  var TO_LOCALE_BUG = !!Uint8Array && fails(function () { arrayToLocaleString.call(new Uint8Array(1)); });\n\n  var $toLocaleString = function toLocaleString() {\n    return arrayToLocaleString.apply(TO_LOCALE_BUG ? arraySlice.call(validate(this)) : validate(this), arguments);\n  };\n\n  var proto = {\n    copyWithin: function copyWithin(target, start /* , end */) {\n      return arrayCopyWithin.call(validate(this), target, start, arguments.length > 2 ? arguments[2] : undefined);\n    },\n    every: function every(callbackfn /* , thisArg */) {\n      return arrayEvery(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    fill: function fill(value /* , start, end */) { // eslint-disable-line no-unused-vars\n      return arrayFill.apply(validate(this), arguments);\n    },\n    filter: function filter(callbackfn /* , thisArg */) {\n      return speciesFromList(this, arrayFilter(validate(this), callbackfn,\n        arguments.length > 1 ? arguments[1] : undefined));\n    },\n    find: function find(predicate /* , thisArg */) {\n      return arrayFind(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    findIndex: function findIndex(predicate /* , thisArg */) {\n      return arrayFindIndex(validate(this), predicate, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    forEach: function forEach(callbackfn /* , thisArg */) {\n      arrayForEach(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    indexOf: function indexOf(searchElement /* , fromIndex */) {\n      return arrayIndexOf(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    includes: function includes(searchElement /* , fromIndex */) {\n      return arrayIncludes(validate(this), searchElement, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    join: function join(separator) { // eslint-disable-line no-unused-vars\n      return arrayJoin.apply(validate(this), arguments);\n    },\n    lastIndexOf: function lastIndexOf(searchElement /* , fromIndex */) { // eslint-disable-line no-unused-vars\n      return arrayLastIndexOf.apply(validate(this), arguments);\n    },\n    map: function map(mapfn /* , thisArg */) {\n      return $map(validate(this), mapfn, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    reduce: function reduce(callbackfn /* , initialValue */) { // eslint-disable-line no-unused-vars\n      return arrayReduce.apply(validate(this), arguments);\n    },\n    reduceRight: function reduceRight(callbackfn /* , initialValue */) { // eslint-disable-line no-unused-vars\n      return arrayReduceRight.apply(validate(this), arguments);\n    },\n    reverse: function reverse() {\n      var that = this;\n      var length = validate(that).length;\n      var middle = Math.floor(length / 2);\n      var index = 0;\n      var value;\n      while (index < middle) {\n        value = that[index];\n        that[index++] = that[--length];\n        that[length] = value;\n      } return that;\n    },\n    some: function some(callbackfn /* , thisArg */) {\n      return arraySome(validate(this), callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n    },\n    sort: function sort(comparefn) {\n      return arraySort.call(validate(this), comparefn);\n    },\n    subarray: function subarray(begin, end) {\n      var O = validate(this);\n      var length = O.length;\n      var $begin = toAbsoluteIndex(begin, length);\n      return new (speciesConstructor(O, O[DEF_CONSTRUCTOR]))(\n        O.buffer,\n        O.byteOffset + $begin * O.BYTES_PER_ELEMENT,\n        toLength((end === undefined ? length : toAbsoluteIndex(end, length)) - $begin)\n      );\n    }\n  };\n\n  var $slice = function slice(start, end) {\n    return speciesFromList(this, arraySlice.call(validate(this), start, end));\n  };\n\n  var $set = function set(arrayLike /* , offset */) {\n    validate(this);\n    var offset = toOffset(arguments[1], 1);\n    var length = this.length;\n    var src = toObject(arrayLike);\n    var len = toLength(src.length);\n    var index = 0;\n    if (len + offset > length) throw RangeError(WRONG_LENGTH);\n    while (index < len) this[offset + index] = src[index++];\n  };\n\n  var $iterators = {\n    entries: function entries() {\n      return arrayEntries.call(validate(this));\n    },\n    keys: function keys() {\n      return arrayKeys.call(validate(this));\n    },\n    values: function values() {\n      return arrayValues.call(validate(this));\n    }\n  };\n\n  var isTAIndex = function (target, key) {\n    return isObject(target)\n      && target[TYPED_ARRAY]\n      && typeof key != 'symbol'\n      && key in target\n      && String(+key) == String(key);\n  };\n  var $getDesc = function getOwnPropertyDescriptor(target, key) {\n    return isTAIndex(target, key = toPrimitive(key, true))\n      ? propertyDesc(2, target[key])\n      : gOPD(target, key);\n  };\n  var $setDesc = function defineProperty(target, key, desc) {\n    if (isTAIndex(target, key = toPrimitive(key, true))\n      && isObject(desc)\n      && has(desc, 'value')\n      && !has(desc, 'get')\n      && !has(desc, 'set')\n      // TODO: add validation descriptor w/o calling accessors\n      && !desc.configurable\n      && (!has(desc, 'writable') || desc.writable)\n      && (!has(desc, 'enumerable') || desc.enumerable)\n    ) {\n      target[key] = desc.value;\n      return target;\n    } return dP(target, key, desc);\n  };\n\n  if (!ALL_CONSTRUCTORS) {\n    $GOPD.f = $getDesc;\n    $DP.f = $setDesc;\n  }\n\n  $export($export.S + $export.F * !ALL_CONSTRUCTORS, 'Object', {\n    getOwnPropertyDescriptor: $getDesc,\n    defineProperty: $setDesc\n  });\n\n  if (fails(function () { arrayToString.call({}); })) {\n    arrayToString = arrayToLocaleString = function toString() {\n      return arrayJoin.call(this);\n    };\n  }\n\n  var $TypedArrayPrototype$ = redefineAll({}, proto);\n  redefineAll($TypedArrayPrototype$, $iterators);\n  hide($TypedArrayPrototype$, ITERATOR, $iterators.values);\n  redefineAll($TypedArrayPrototype$, {\n    slice: $slice,\n    set: $set,\n    constructor: function () { /* noop */ },\n    toString: arrayToString,\n    toLocaleString: $toLocaleString\n  });\n  addGetter($TypedArrayPrototype$, 'buffer', 'b');\n  addGetter($TypedArrayPrototype$, 'byteOffset', 'o');\n  addGetter($TypedArrayPrototype$, 'byteLength', 'l');\n  addGetter($TypedArrayPrototype$, 'length', 'e');\n  dP($TypedArrayPrototype$, TAG, {\n    get: function () { return this[TYPED_ARRAY]; }\n  });\n\n  // eslint-disable-next-line max-statements\n  module.exports = function (KEY, BYTES, wrapper, CLAMPED) {\n    CLAMPED = !!CLAMPED;\n    var NAME = KEY + (CLAMPED ? 'Clamped' : '') + 'Array';\n    var GETTER = 'get' + KEY;\n    var SETTER = 'set' + KEY;\n    var TypedArray = global[NAME];\n    var Base = TypedArray || {};\n    var TAC = TypedArray && getPrototypeOf(TypedArray);\n    var FORCED = !TypedArray || !$typed.ABV;\n    var O = {};\n    var TypedArrayPrototype = TypedArray && TypedArray[PROTOTYPE];\n    var getter = function (that, index) {\n      var data = that._d;\n      return data.v[GETTER](index * BYTES + data.o, LITTLE_ENDIAN);\n    };\n    var setter = function (that, index, value) {\n      var data = that._d;\n      if (CLAMPED) value = (value = Math.round(value)) < 0 ? 0 : value > 0xff ? 0xff : value & 0xff;\n      data.v[SETTER](index * BYTES + data.o, value, LITTLE_ENDIAN);\n    };\n    var addElement = function (that, index) {\n      dP(that, index, {\n        get: function () {\n          return getter(this, index);\n        },\n        set: function (value) {\n          return setter(this, index, value);\n        },\n        enumerable: true\n      });\n    };\n    if (FORCED) {\n      TypedArray = wrapper(function (that, data, $offset, $length) {\n        anInstance(that, TypedArray, NAME, '_d');\n        var index = 0;\n        var offset = 0;\n        var buffer, byteLength, length, klass;\n        if (!isObject(data)) {\n          length = toIndex(data);\n          byteLength = length * BYTES;\n          buffer = new $ArrayBuffer(byteLength);\n        } else if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {\n          buffer = data;\n          offset = toOffset($offset, BYTES);\n          var $len = data.byteLength;\n          if ($length === undefined) {\n            if ($len % BYTES) throw RangeError(WRONG_LENGTH);\n            byteLength = $len - offset;\n            if (byteLength < 0) throw RangeError(WRONG_LENGTH);\n          } else {\n            byteLength = toLength($length) * BYTES;\n            if (byteLength + offset > $len) throw RangeError(WRONG_LENGTH);\n          }\n          length = byteLength / BYTES;\n        } else if (TYPED_ARRAY in data) {\n          return fromList(TypedArray, data);\n        } else {\n          return $from.call(TypedArray, data);\n        }\n        hide(that, '_d', {\n          b: buffer,\n          o: offset,\n          l: byteLength,\n          e: length,\n          v: new $DataView(buffer)\n        });\n        while (index < length) addElement(that, index++);\n      });\n      TypedArrayPrototype = TypedArray[PROTOTYPE] = create($TypedArrayPrototype$);\n      hide(TypedArrayPrototype, 'constructor', TypedArray);\n    } else if (!fails(function () {\n      TypedArray(1);\n    }) || !fails(function () {\n      new TypedArray(-1); // eslint-disable-line no-new\n    }) || !$iterDetect(function (iter) {\n      new TypedArray(); // eslint-disable-line no-new\n      new TypedArray(null); // eslint-disable-line no-new\n      new TypedArray(1.5); // eslint-disable-line no-new\n      new TypedArray(iter); // eslint-disable-line no-new\n    }, true)) {\n      TypedArray = wrapper(function (that, data, $offset, $length) {\n        anInstance(that, TypedArray, NAME);\n        var klass;\n        // `ws` module bug, temporarily remove validation length for Uint8Array\n        // https://github.com/websockets/ws/pull/645\n        if (!isObject(data)) return new Base(toIndex(data));\n        if (data instanceof $ArrayBuffer || (klass = classof(data)) == ARRAY_BUFFER || klass == SHARED_BUFFER) {\n          return $length !== undefined\n            ? new Base(data, toOffset($offset, BYTES), $length)\n            : $offset !== undefined\n              ? new Base(data, toOffset($offset, BYTES))\n              : new Base(data);\n        }\n        if (TYPED_ARRAY in data) return fromList(TypedArray, data);\n        return $from.call(TypedArray, data);\n      });\n      arrayForEach(TAC !== Function.prototype ? gOPN(Base).concat(gOPN(TAC)) : gOPN(Base), function (key) {\n        if (!(key in TypedArray)) hide(TypedArray, key, Base[key]);\n      });\n      TypedArray[PROTOTYPE] = TypedArrayPrototype;\n      if (!LIBRARY) TypedArrayPrototype.constructor = TypedArray;\n    }\n    var $nativeIterator = TypedArrayPrototype[ITERATOR];\n    var CORRECT_ITER_NAME = !!$nativeIterator\n      && ($nativeIterator.name == 'values' || $nativeIterator.name == undefined);\n    var $iterator = $iterators.values;\n    hide(TypedArray, TYPED_CONSTRUCTOR, true);\n    hide(TypedArrayPrototype, TYPED_ARRAY, NAME);\n    hide(TypedArrayPrototype, VIEW, true);\n    hide(TypedArrayPrototype, DEF_CONSTRUCTOR, TypedArray);\n\n    if (CLAMPED ? new TypedArray(1)[TAG] != NAME : !(TAG in TypedArrayPrototype)) {\n      dP(TypedArrayPrototype, TAG, {\n        get: function () { return NAME; }\n      });\n    }\n\n    O[NAME] = TypedArray;\n\n    $export($export.G + $export.W + $export.F * (TypedArray != Base), O);\n\n    $export($export.S, NAME, {\n      BYTES_PER_ELEMENT: BYTES\n    });\n\n    $export($export.S + $export.F * fails(function () { Base.of.call(TypedArray, 1); }), NAME, {\n      from: $from,\n      of: $of\n    });\n\n    if (!(BYTES_PER_ELEMENT in TypedArrayPrototype)) hide(TypedArrayPrototype, BYTES_PER_ELEMENT, BYTES);\n\n    $export($export.P, NAME, proto);\n\n    setSpecies(NAME);\n\n    $export($export.P + $export.F * FORCED_SET, NAME, { set: $set });\n\n    $export($export.P + $export.F * !CORRECT_ITER_NAME, NAME, $iterators);\n\n    if (!LIBRARY && TypedArrayPrototype.toString != arrayToString) TypedArrayPrototype.toString = arrayToString;\n\n    $export($export.P + $export.F * fails(function () {\n      new TypedArray(1).slice();\n    }), NAME, { slice: $slice });\n\n    $export($export.P + $export.F * (fails(function () {\n      return [1, 2].toLocaleString() != new TypedArray([1, 2]).toLocaleString();\n    }) || !fails(function () {\n      TypedArrayPrototype.toLocaleString.call([1, 2]);\n    })), NAME, { toLocaleString: $toLocaleString });\n\n    Iterators[NAME] = CORRECT_ITER_NAME ? $nativeIterator : $iterator;\n    if (!LIBRARY && !CORRECT_ITER_NAME) hide(TypedArrayPrototype, ITERATOR, $iterator);\n  };\n} else module.exports = function () { /* empty */ };\n","require('./_typed-array')('Int8', 1, function (init) {\n  return function Int8Array(data, byteOffset, length) {\n    return init(this, data, byteOffset, length);\n  };\n});\n","require('./_typed-array')('Uint8', 1, function (init) {\n  return function Uint8Array(data, byteOffset, length) {\n    return init(this, data, byteOffset, length);\n  };\n});\n","require('./_typed-array')('Uint8', 1, function (init) {\n  return function Uint8ClampedArray(data, byteOffset, length) {\n    return init(this, data, byteOffset, length);\n  };\n}, true);\n","require('./_typed-array')('Int16', 2, function (init) {\n  return function Int16Array(data, byteOffset, length) {\n    return init(this, data, byteOffset, length);\n  };\n});\n","require('./_typed-array')('Uint16', 2, function (init) {\n  return function Uint16Array(data, byteOffset, length) {\n    return init(this, data, byteOffset, length);\n  };\n});\n","require('./_typed-array')('Int32', 4, function (init) {\n  return function Int32Array(data, byteOffset, length) {\n    return init(this, data, byteOffset, length);\n  };\n});\n","require('./_typed-array')('Uint32', 4, function (init) {\n  return function Uint32Array(data, byteOffset, length) {\n    return init(this, data, byteOffset, length);\n  };\n});\n","require('./_typed-array')('Float32', 4, function (init) {\n  return function Float32Array(data, byteOffset, length) {\n    return init(this, data, byteOffset, length);\n  };\n});\n","require('./_typed-array')('Float64', 8, function (init) {\n  return function Float64Array(data, byteOffset, length) {\n    return init(this, data, byteOffset, length);\n  };\n});\n","// 26.1.1 Reflect.apply(target, thisArgument, argumentsList)\nvar $export = require('./_export');\nvar aFunction = require('./_a-function');\nvar anObject = require('./_an-object');\nvar rApply = (require('./_global').Reflect || {}).apply;\nvar fApply = Function.apply;\n// MS Edge argumentsList argument is optional\n$export($export.S + $export.F * !require('./_fails')(function () {\n  rApply(function () { /* empty */ });\n}), 'Reflect', {\n  apply: function apply(target, thisArgument, argumentsList) {\n    var T = aFunction(target);\n    var L = anObject(argumentsList);\n    return rApply ? rApply(T, thisArgument, L) : fApply.call(T, thisArgument, L);\n  }\n});\n","// 26.1.2 Reflect.construct(target, argumentsList [, newTarget])\nvar $export = require('./_export');\nvar create = require('./_object-create');\nvar aFunction = require('./_a-function');\nvar anObject = require('./_an-object');\nvar isObject = require('./_is-object');\nvar fails = require('./_fails');\nvar bind = require('./_bind');\nvar rConstruct = (require('./_global').Reflect || {}).construct;\n\n// MS Edge supports only 2 arguments and argumentsList argument is optional\n// FF Nightly sets third argument as `new.target`, but does not create `this` from it\nvar NEW_TARGET_BUG = fails(function () {\n  function F() { /* empty */ }\n  return !(rConstruct(function () { /* empty */ }, [], F) instanceof F);\n});\nvar ARGS_BUG = !fails(function () {\n  rConstruct(function () { /* empty */ });\n});\n\n$export($export.S + $export.F * (NEW_TARGET_BUG || ARGS_BUG), 'Reflect', {\n  construct: function construct(Target, args /* , newTarget */) {\n    aFunction(Target);\n    anObject(args);\n    var newTarget = arguments.length < 3 ? Target : aFunction(arguments[2]);\n    if (ARGS_BUG && !NEW_TARGET_BUG) return rConstruct(Target, args, newTarget);\n    if (Target == newTarget) {\n      // w/o altered newTarget, optimization for 0-4 arguments\n      switch (args.length) {\n        case 0: return new Target();\n        case 1: return new Target(args[0]);\n        case 2: return new Target(args[0], args[1]);\n        case 3: return new Target(args[0], args[1], args[2]);\n        case 4: return new Target(args[0], args[1], args[2], args[3]);\n      }\n      // w/o altered newTarget, lot of arguments case\n      var $args = [null];\n      $args.push.apply($args, args);\n      return new (bind.apply(Target, $args))();\n    }\n    // with altered newTarget, not support built-in constructors\n    var proto = newTarget.prototype;\n    var instance = create(isObject(proto) ? proto : Object.prototype);\n    var result = Function.apply.call(Target, instance, args);\n    return isObject(result) ? result : instance;\n  }\n});\n","// 26.1.3 Reflect.defineProperty(target, propertyKey, attributes)\nvar dP = require('./_object-dp');\nvar $export = require('./_export');\nvar anObject = require('./_an-object');\nvar toPrimitive = require('./_to-primitive');\n\n// MS Edge has broken Reflect.defineProperty - throwing instead of returning false\n$export($export.S + $export.F * require('./_fails')(function () {\n  // eslint-disable-next-line no-undef\n  Reflect.defineProperty(dP.f({}, 1, { value: 1 }), 1, { value: 2 });\n}), 'Reflect', {\n  defineProperty: function defineProperty(target, propertyKey, attributes) {\n    anObject(target);\n    propertyKey = toPrimitive(propertyKey, true);\n    anObject(attributes);\n    try {\n      dP.f(target, propertyKey, attributes);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n});\n","// 26.1.4 Reflect.deleteProperty(target, propertyKey)\nvar $export = require('./_export');\nvar gOPD = require('./_object-gopd').f;\nvar anObject = require('./_an-object');\n\n$export($export.S, 'Reflect', {\n  deleteProperty: function deleteProperty(target, propertyKey) {\n    var desc = gOPD(anObject(target), propertyKey);\n    return desc && !desc.configurable ? false : delete target[propertyKey];\n  }\n});\n","'use strict';\n// 26.1.5 Reflect.enumerate(target)\nvar $export = require('./_export');\nvar anObject = require('./_an-object');\nvar Enumerate = function (iterated) {\n  this._t = anObject(iterated); // target\n  this._i = 0;                  // next index\n  var keys = this._k = [];      // keys\n  var key;\n  for (key in iterated) keys.push(key);\n};\nrequire('./_iter-create')(Enumerate, 'Object', function () {\n  var that = this;\n  var keys = that._k;\n  var key;\n  do {\n    if (that._i >= keys.length) return { value: undefined, done: true };\n  } while (!((key = keys[that._i++]) in that._t));\n  return { value: key, done: false };\n});\n\n$export($export.S, 'Reflect', {\n  enumerate: function enumerate(target) {\n    return new Enumerate(target);\n  }\n});\n","// 26.1.6 Reflect.get(target, propertyKey [, receiver])\nvar gOPD = require('./_object-gopd');\nvar getPrototypeOf = require('./_object-gpo');\nvar has = require('./_has');\nvar $export = require('./_export');\nvar isObject = require('./_is-object');\nvar anObject = require('./_an-object');\n\nfunction get(target, propertyKey /* , receiver */) {\n  var receiver = arguments.length < 3 ? target : arguments[2];\n  var desc, proto;\n  if (anObject(target) === receiver) return target[propertyKey];\n  if (desc = gOPD.f(target, propertyKey)) return has(desc, 'value')\n    ? desc.value\n    : desc.get !== undefined\n      ? desc.get.call(receiver)\n      : undefined;\n  if (isObject(proto = getPrototypeOf(target))) return get(proto, propertyKey, receiver);\n}\n\n$export($export.S, 'Reflect', { get: get });\n","// 26.1.7 Reflect.getOwnPropertyDescriptor(target, propertyKey)\nvar gOPD = require('./_object-gopd');\nvar $export = require('./_export');\nvar anObject = require('./_an-object');\n\n$export($export.S, 'Reflect', {\n  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(target, propertyKey) {\n    return gOPD.f(anObject(target), propertyKey);\n  }\n});\n","// 26.1.8 Reflect.getPrototypeOf(target)\nvar $export = require('./_export');\nvar getProto = require('./_object-gpo');\nvar anObject = require('./_an-object');\n\n$export($export.S, 'Reflect', {\n  getPrototypeOf: function getPrototypeOf(target) {\n    return getProto(anObject(target));\n  }\n});\n","// 26.1.9 Reflect.has(target, propertyKey)\nvar $export = require('./_export');\n\n$export($export.S, 'Reflect', {\n  has: function has(target, propertyKey) {\n    return propertyKey in target;\n  }\n});\n","// 26.1.10 Reflect.isExtensible(target)\nvar $export = require('./_export');\nvar anObject = require('./_an-object');\nvar $isExtensible = Object.isExtensible;\n\n$export($export.S, 'Reflect', {\n  isExtensible: function isExtensible(target) {\n    anObject(target);\n    return $isExtensible ? $isExtensible(target) : true;\n  }\n});\n","// all object keys, includes non-enumerable and symbols\nvar gOPN = require('./_object-gopn');\nvar gOPS = require('./_object-gops');\nvar anObject = require('./_an-object');\nvar Reflect = require('./_global').Reflect;\nmodule.exports = Reflect && Reflect.ownKeys || function ownKeys(it) {\n  var keys = gOPN.f(anObject(it));\n  var getSymbols = gOPS.f;\n  return getSymbols ? keys.concat(getSymbols(it)) : keys;\n};\n","// 26.1.11 Reflect.ownKeys(target)\nvar $export = require('./_export');\n\n$export($export.S, 'Reflect', { ownKeys: require('./_own-keys') });\n","// 26.1.12 Reflect.preventExtensions(target)\nvar $export = require('./_export');\nvar anObject = require('./_an-object');\nvar $preventExtensions = Object.preventExtensions;\n\n$export($export.S, 'Reflect', {\n  preventExtensions: function preventExtensions(target) {\n    anObject(target);\n    try {\n      if ($preventExtensions) $preventExtensions(target);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n});\n","// 26.1.13 Reflect.set(target, propertyKey, V [, receiver])\nvar dP = require('./_object-dp');\nvar gOPD = require('./_object-gopd');\nvar getPrototypeOf = require('./_object-gpo');\nvar has = require('./_has');\nvar $export = require('./_export');\nvar createDesc = require('./_property-desc');\nvar anObject = require('./_an-object');\nvar isObject = require('./_is-object');\n\nfunction set(target, propertyKey, V /* , receiver */) {\n  var receiver = arguments.length < 4 ? target : arguments[3];\n  var ownDesc = gOPD.f(anObject(target), propertyKey);\n  var existingDescriptor, proto;\n  if (!ownDesc) {\n    if (isObject(proto = getPrototypeOf(target))) {\n      return set(proto, propertyKey, V, receiver);\n    }\n    ownDesc = createDesc(0);\n  }\n  if (has(ownDesc, 'value')) {\n    if (ownDesc.writable === false || !isObject(receiver)) return false;\n    if (existingDescriptor = gOPD.f(receiver, propertyKey)) {\n      if (existingDescriptor.get || existingDescriptor.set || existingDescriptor.writable === false) return false;\n      existingDescriptor.value = V;\n      dP.f(receiver, propertyKey, existingDescriptor);\n    } else dP.f(receiver, propertyKey, createDesc(0, V));\n    return true;\n  }\n  return ownDesc.set === undefined ? false : (ownDesc.set.call(receiver, V), true);\n}\n\n$export($export.S, 'Reflect', { set: set });\n","// 26.1.14 Reflect.setPrototypeOf(target, proto)\nvar $export = require('./_export');\nvar setProto = require('./_set-proto');\n\nif (setProto) $export($export.S, 'Reflect', {\n  setPrototypeOf: function setPrototypeOf(target, proto) {\n    setProto.check(target, proto);\n    try {\n      setProto.set(target, proto);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  }\n});\n","'use strict';\n// https://github.com/tc39/Array.prototype.includes\nvar $export = require('./_export');\nvar $includes = require('./_array-includes')(true);\n\n$export($export.P, 'Array', {\n  includes: function includes(el /* , fromIndex = 0 */) {\n    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n\nrequire('./_add-to-unscopables')('includes');\n","'use strict';\n// https://tc39.github.io/proposal-flatMap/#sec-FlattenIntoArray\nvar isArray = require('./_is-array');\nvar isObject = require('./_is-object');\nvar toLength = require('./_to-length');\nvar ctx = require('./_ctx');\nvar IS_CONCAT_SPREADABLE = require('./_wks')('isConcatSpreadable');\n\nfunction flattenIntoArray(target, original, source, sourceLen, start, depth, mapper, thisArg) {\n  var targetIndex = start;\n  var sourceIndex = 0;\n  var mapFn = mapper ? ctx(mapper, thisArg, 3) : false;\n  var element, spreadable;\n\n  while (sourceIndex < sourceLen) {\n    if (sourceIndex in source) {\n      element = mapFn ? mapFn(source[sourceIndex], sourceIndex, original) : source[sourceIndex];\n\n      spreadable = false;\n      if (isObject(element)) {\n        spreadable = element[IS_CONCAT_SPREADABLE];\n        spreadable = spreadable !== undefined ? !!spreadable : isArray(element);\n      }\n\n      if (spreadable && depth > 0) {\n        targetIndex = flattenIntoArray(target, original, element, toLength(element.length), targetIndex, depth - 1) - 1;\n      } else {\n        if (targetIndex >= 0x1fffffffffffff) throw TypeError();\n        target[targetIndex] = element;\n      }\n\n      targetIndex++;\n    }\n    sourceIndex++;\n  }\n  return targetIndex;\n}\n\nmodule.exports = flattenIntoArray;\n","'use strict';\n// https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatMap\nvar $export = require('./_export');\nvar flattenIntoArray = require('./_flatten-into-array');\nvar toObject = require('./_to-object');\nvar toLength = require('./_to-length');\nvar aFunction = require('./_a-function');\nvar arraySpeciesCreate = require('./_array-species-create');\n\n$export($export.P, 'Array', {\n  flatMap: function flatMap(callbackfn /* , thisArg */) {\n    var O = toObject(this);\n    var sourceLen, A;\n    aFunction(callbackfn);\n    sourceLen = toLength(O.length);\n    A = arraySpeciesCreate(O, 0);\n    flattenIntoArray(A, O, O, sourceLen, 0, 1, callbackfn, arguments[1]);\n    return A;\n  }\n});\n\nrequire('./_add-to-unscopables')('flatMap');\n","'use strict';\n// https://tc39.github.io/proposal-flatMap/#sec-Array.prototype.flatten\nvar $export = require('./_export');\nvar flattenIntoArray = require('./_flatten-into-array');\nvar toObject = require('./_to-object');\nvar toLength = require('./_to-length');\nvar toInteger = require('./_to-integer');\nvar arraySpeciesCreate = require('./_array-species-create');\n\n$export($export.P, 'Array', {\n  flatten: function flatten(/* depthArg = 1 */) {\n    var depthArg = arguments[0];\n    var O = toObject(this);\n    var sourceLen = toLength(O.length);\n    var A = arraySpeciesCreate(O, 0);\n    flattenIntoArray(A, O, O, sourceLen, 0, depthArg === undefined ? 1 : toInteger(depthArg));\n    return A;\n  }\n});\n\nrequire('./_add-to-unscopables')('flatten');\n","'use strict';\n// https://github.com/mathiasbynens/String.prototype.at\nvar $export = require('./_export');\nvar $at = require('./_string-at')(true);\n\n$export($export.P, 'String', {\n  at: function at(pos) {\n    return $at(this, pos);\n  }\n});\n","// https://github.com/tc39/proposal-string-pad-start-end\nvar toLength = require('./_to-length');\nvar repeat = require('./_string-repeat');\nvar defined = require('./_defined');\n\nmodule.exports = function (that, maxLength, fillString, left) {\n  var S = String(defined(that));\n  var stringLength = S.length;\n  var fillStr = fillString === undefined ? ' ' : String(fillString);\n  var intMaxLength = toLength(maxLength);\n  if (intMaxLength <= stringLength || fillStr == '') return S;\n  var fillLen = intMaxLength - stringLength;\n  var stringFiller = repeat.call(fillStr, Math.ceil(fillLen / fillStr.length));\n  if (stringFiller.length > fillLen) stringFiller = stringFiller.slice(0, fillLen);\n  return left ? stringFiller + S : S + stringFiller;\n};\n","'use strict';\n// https://github.com/tc39/proposal-string-pad-start-end\nvar $export = require('./_export');\nvar $pad = require('./_string-pad');\nvar userAgent = require('./_user-agent');\n\n// https://github.com/zloirock/core-js/issues/280\nvar WEBKIT_BUG = /Version\\/10\\.\\d+(\\.\\d+)?( Mobile\\/\\w+)? Safari\\//.test(userAgent);\n\n$export($export.P + $export.F * WEBKIT_BUG, 'String', {\n  padStart: function padStart(maxLength /* , fillString = ' ' */) {\n    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, true);\n  }\n});\n","'use strict';\n// https://github.com/tc39/proposal-string-pad-start-end\nvar $export = require('./_export');\nvar $pad = require('./_string-pad');\nvar userAgent = require('./_user-agent');\n\n// https://github.com/zloirock/core-js/issues/280\nvar WEBKIT_BUG = /Version\\/10\\.\\d+(\\.\\d+)?( Mobile\\/\\w+)? Safari\\//.test(userAgent);\n\n$export($export.P + $export.F * WEBKIT_BUG, 'String', {\n  padEnd: function padEnd(maxLength /* , fillString = ' ' */) {\n    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, false);\n  }\n});\n","'use strict';\n// https://github.com/sebmarkbage/ecmascript-string-left-right-trim\nrequire('./_string-trim')('trimLeft', function ($trim) {\n  return function trimLeft() {\n    return $trim(this, 1);\n  };\n}, 'trimStart');\n","'use strict';\n// https://github.com/sebmarkbage/ecmascript-string-left-right-trim\nrequire('./_string-trim')('trimRight', function ($trim) {\n  return function trimRight() {\n    return $trim(this, 2);\n  };\n}, 'trimEnd');\n","'use strict';\n// https://tc39.github.io/String.prototype.matchAll/\nvar $export = require('./_export');\nvar defined = require('./_defined');\nvar toLength = require('./_to-length');\nvar isRegExp = require('./_is-regexp');\nvar getFlags = require('./_flags');\nvar RegExpProto = RegExp.prototype;\n\nvar $RegExpStringIterator = function (regexp, string) {\n  this._r = regexp;\n  this._s = string;\n};\n\nrequire('./_iter-create')($RegExpStringIterator, 'RegExp String', function next() {\n  var match = this._r.exec(this._s);\n  return { value: match, done: match === null };\n});\n\n$export($export.P, 'String', {\n  matchAll: function matchAll(regexp) {\n    defined(this);\n    if (!isRegExp(regexp)) throw TypeError(regexp + ' is not a regexp!');\n    var S = String(this);\n    var flags = 'flags' in RegExpProto ? String(regexp.flags) : getFlags.call(regexp);\n    var rx = new RegExp(regexp.source, ~flags.indexOf('g') ? flags : 'g' + flags);\n    rx.lastIndex = toLength(regexp.lastIndex);\n    return new $RegExpStringIterator(rx, S);\n  }\n});\n","require('./_wks-define')('asyncIterator');\n","require('./_wks-define')('observable');\n","// https://github.com/tc39/proposal-object-getownpropertydescriptors\nvar $export = require('./_export');\nvar ownKeys = require('./_own-keys');\nvar toIObject = require('./_to-iobject');\nvar gOPD = require('./_object-gopd');\nvar createProperty = require('./_create-property');\n\n$export($export.S, 'Object', {\n  getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {\n    var O = toIObject(object);\n    var getDesc = gOPD.f;\n    var keys = ownKeys(O);\n    var result = {};\n    var i = 0;\n    var key, desc;\n    while (keys.length > i) {\n      desc = getDesc(O, key = keys[i++]);\n      if (desc !== undefined) createProperty(result, key, desc);\n    }\n    return result;\n  }\n});\n","var DESCRIPTORS = require('./_descriptors');\nvar getKeys = require('./_object-keys');\nvar toIObject = require('./_to-iobject');\nvar isEnum = require('./_object-pie').f;\nmodule.exports = function (isEntries) {\n  return function (it) {\n    var O = toIObject(it);\n    var keys = getKeys(O);\n    var length = keys.length;\n    var i = 0;\n    var result = [];\n    var key;\n    while (length > i) {\n      key = keys[i++];\n      if (!DESCRIPTORS || isEnum.call(O, key)) {\n        result.push(isEntries ? [key, O[key]] : O[key]);\n      }\n    }\n    return result;\n  };\n};\n","// https://github.com/tc39/proposal-object-values-entries\nvar $export = require('./_export');\nvar $values = require('./_object-to-array')(false);\n\n$export($export.S, 'Object', {\n  values: function values(it) {\n    return $values(it);\n  }\n});\n","// https://github.com/tc39/proposal-object-values-entries\nvar $export = require('./_export');\nvar $entries = require('./_object-to-array')(true);\n\n$export($export.S, 'Object', {\n  entries: function entries(it) {\n    return $entries(it);\n  }\n});\n","'use strict';\n// Forced replacement prototype accessors methods\nmodule.exports = require('./_library') || !require('./_fails')(function () {\n  var K = Math.random();\n  // In FF throws only define methods\n  // eslint-disable-next-line no-undef, no-useless-call\n  __defineSetter__.call(null, K, function () { /* empty */ });\n  delete require('./_global')[K];\n});\n","'use strict';\nvar $export = require('./_export');\nvar toObject = require('./_to-object');\nvar aFunction = require('./_a-function');\nvar $defineProperty = require('./_object-dp');\n\n// B.2.2.2 Object.prototype.__defineGetter__(P, getter)\nrequire('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {\n  __defineGetter__: function __defineGetter__(P, getter) {\n    $defineProperty.f(toObject(this), P, { get: aFunction(getter), enumerable: true, configurable: true });\n  }\n});\n","'use strict';\nvar $export = require('./_export');\nvar toObject = require('./_to-object');\nvar aFunction = require('./_a-function');\nvar $defineProperty = require('./_object-dp');\n\n// B.2.2.3 Object.prototype.__defineSetter__(P, setter)\nrequire('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {\n  __defineSetter__: function __defineSetter__(P, setter) {\n    $defineProperty.f(toObject(this), P, { set: aFunction(setter), enumerable: true, configurable: true });\n  }\n});\n","'use strict';\nvar $export = require('./_export');\nvar toObject = require('./_to-object');\nvar toPrimitive = require('./_to-primitive');\nvar getPrototypeOf = require('./_object-gpo');\nvar getOwnPropertyDescriptor = require('./_object-gopd').f;\n\n// B.2.2.4 Object.prototype.__lookupGetter__(P)\nrequire('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {\n  __lookupGetter__: function __lookupGetter__(P) {\n    var O = toObject(this);\n    var K = toPrimitive(P, true);\n    var D;\n    do {\n      if (D = getOwnPropertyDescriptor(O, K)) return D.get;\n    } while (O = getPrototypeOf(O));\n  }\n});\n","'use strict';\nvar $export = require('./_export');\nvar toObject = require('./_to-object');\nvar toPrimitive = require('./_to-primitive');\nvar getPrototypeOf = require('./_object-gpo');\nvar getOwnPropertyDescriptor = require('./_object-gopd').f;\n\n// B.2.2.5 Object.prototype.__lookupSetter__(P)\nrequire('./_descriptors') && $export($export.P + require('./_object-forced-pam'), 'Object', {\n  __lookupSetter__: function __lookupSetter__(P) {\n    var O = toObject(this);\n    var K = toPrimitive(P, true);\n    var D;\n    do {\n      if (D = getOwnPropertyDescriptor(O, K)) return D.set;\n    } while (O = getPrototypeOf(O));\n  }\n});\n","var forOf = require('./_for-of');\n\nmodule.exports = function (iter, ITERATOR) {\n  var result = [];\n  forOf(iter, false, result.push, result, ITERATOR);\n  return result;\n};\n","// https://github.com/DavidBruant/Map-Set.prototype.toJSON\nvar classof = require('./_classof');\nvar from = require('./_array-from-iterable');\nmodule.exports = function (NAME) {\n  return function toJSON() {\n    if (classof(this) != NAME) throw TypeError(NAME + \"#toJSON isn't generic\");\n    return from(this);\n  };\n};\n","// https://github.com/DavidBruant/Map-Set.prototype.toJSON\nvar $export = require('./_export');\n\n$export($export.P + $export.R, 'Map', { toJSON: require('./_collection-to-json')('Map') });\n","// https://github.com/DavidBruant/Map-Set.prototype.toJSON\nvar $export = require('./_export');\n\n$export($export.P + $export.R, 'Set', { toJSON: require('./_collection-to-json')('Set') });\n","'use strict';\n// https://tc39.github.io/proposal-setmap-offrom/\nvar $export = require('./_export');\n\nmodule.exports = function (COLLECTION) {\n  $export($export.S, COLLECTION, { of: function of() {\n    var length = arguments.length;\n    var A = new Array(length);\n    while (length--) A[length] = arguments[length];\n    return new this(A);\n  } });\n};\n","// https://tc39.github.io/proposal-setmap-offrom/#sec-map.of\nrequire('./_set-collection-of')('Map');\n","// https://tc39.github.io/proposal-setmap-offrom/#sec-set.of\nrequire('./_set-collection-of')('Set');\n","// https://tc39.github.io/proposal-setmap-offrom/#sec-weakmap.of\nrequire('./_set-collection-of')('WeakMap');\n","// https://tc39.github.io/proposal-setmap-offrom/#sec-weakset.of\nrequire('./_set-collection-of')('WeakSet');\n","'use strict';\n// https://tc39.github.io/proposal-setmap-offrom/\nvar $export = require('./_export');\nvar aFunction = require('./_a-function');\nvar ctx = require('./_ctx');\nvar forOf = require('./_for-of');\n\nmodule.exports = function (COLLECTION) {\n  $export($export.S, COLLECTION, { from: function from(source /* , mapFn, thisArg */) {\n    var mapFn = arguments[1];\n    var mapping, A, n, cb;\n    aFunction(this);\n    mapping = mapFn !== undefined;\n    if (mapping) aFunction(mapFn);\n    if (source == undefined) return new this();\n    A = [];\n    if (mapping) {\n      n = 0;\n      cb = ctx(mapFn, arguments[2], 2);\n      forOf(source, false, function (nextItem) {\n        A.push(cb(nextItem, n++));\n      });\n    } else {\n      forOf(source, false, A.push, A);\n    }\n    return new this(A);\n  } });\n};\n","// https://tc39.github.io/proposal-setmap-offrom/#sec-map.from\nrequire('./_set-collection-from')('Map');\n","// https://tc39.github.io/proposal-setmap-offrom/#sec-set.from\nrequire('./_set-collection-from')('Set');\n","// https://tc39.github.io/proposal-setmap-offrom/#sec-weakmap.from\nrequire('./_set-collection-from')('WeakMap');\n","// https://tc39.github.io/proposal-setmap-offrom/#sec-weakset.from\nrequire('./_set-collection-from')('WeakSet');\n","// https://github.com/tc39/proposal-global\nvar $export = require('./_export');\n\n$export($export.G, { global: require('./_global') });\n","// https://github.com/tc39/proposal-global\nvar $export = require('./_export');\n\n$export($export.S, 'System', { global: require('./_global') });\n","// https://github.com/ljharb/proposal-is-error\nvar $export = require('./_export');\nvar cof = require('./_cof');\n\n$export($export.S, 'Error', {\n  isError: function isError(it) {\n    return cof(it) === 'Error';\n  }\n});\n","// https://rwaldron.github.io/proposal-math-extensions/\nvar $export = require('./_export');\n\n$export($export.S, 'Math', {\n  clamp: function clamp(x, lower, upper) {\n    return Math.min(upper, Math.max(lower, x));\n  }\n});\n","// https://rwaldron.github.io/proposal-math-extensions/\nvar $export = require('./_export');\n\n$export($export.S, 'Math', { DEG_PER_RAD: Math.PI / 180 });\n","// https://rwaldron.github.io/proposal-math-extensions/\nvar $export = require('./_export');\nvar RAD_PER_DEG = 180 / Math.PI;\n\n$export($export.S, 'Math', {\n  degrees: function degrees(radians) {\n    return radians * RAD_PER_DEG;\n  }\n});\n","// https://rwaldron.github.io/proposal-math-extensions/\nmodule.exports = Math.scale || function scale(x, inLow, inHigh, outLow, outHigh) {\n  if (\n    arguments.length === 0\n      // eslint-disable-next-line no-self-compare\n      || x != x\n      // eslint-disable-next-line no-self-compare\n      || inLow != inLow\n      // eslint-disable-next-line no-self-compare\n      || inHigh != inHigh\n      // eslint-disable-next-line no-self-compare\n      || outLow != outLow\n      // eslint-disable-next-line no-self-compare\n      || outHigh != outHigh\n  ) return NaN;\n  if (x === Infinity || x === -Infinity) return x;\n  return (x - inLow) * (outHigh - outLow) / (inHigh - inLow) + outLow;\n};\n","// https://rwaldron.github.io/proposal-math-extensions/\nvar $export = require('./_export');\nvar scale = require('./_math-scale');\nvar fround = require('./_math-fround');\n\n$export($export.S, 'Math', {\n  fscale: function fscale(x, inLow, inHigh, outLow, outHigh) {\n    return fround(scale(x, inLow, inHigh, outLow, outHigh));\n  }\n});\n","// https://gist.github.com/BrendanEich/4294d5c212a6d2254703\nvar $export = require('./_export');\n\n$export($export.S, 'Math', {\n  iaddh: function iaddh(x0, x1, y0, y1) {\n    var $x0 = x0 >>> 0;\n    var $x1 = x1 >>> 0;\n    var $y0 = y0 >>> 0;\n    return $x1 + (y1 >>> 0) + (($x0 & $y0 | ($x0 | $y0) & ~($x0 + $y0 >>> 0)) >>> 31) | 0;\n  }\n});\n","// https://gist.github.com/BrendanEich/4294d5c212a6d2254703\nvar $export = require('./_export');\n\n$export($export.S, 'Math', {\n  isubh: function isubh(x0, x1, y0, y1) {\n    var $x0 = x0 >>> 0;\n    var $x1 = x1 >>> 0;\n    var $y0 = y0 >>> 0;\n    return $x1 - (y1 >>> 0) - ((~$x0 & $y0 | ~($x0 ^ $y0) & $x0 - $y0 >>> 0) >>> 31) | 0;\n  }\n});\n","// https://gist.github.com/BrendanEich/4294d5c212a6d2254703\nvar $export = require('./_export');\n\n$export($export.S, 'Math', {\n  imulh: function imulh(u, v) {\n    var UINT16 = 0xffff;\n    var $u = +u;\n    var $v = +v;\n    var u0 = $u & UINT16;\n    var v0 = $v & UINT16;\n    var u1 = $u >> 16;\n    var v1 = $v >> 16;\n    var t = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);\n    return u1 * v1 + (t >> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >> 16);\n  }\n});\n","// https://rwaldron.github.io/proposal-math-extensions/\nvar $export = require('./_export');\n\n$export($export.S, 'Math', { RAD_PER_DEG: 180 / Math.PI });\n","// https://rwaldron.github.io/proposal-math-extensions/\nvar $export = require('./_export');\nvar DEG_PER_RAD = Math.PI / 180;\n\n$export($export.S, 'Math', {\n  radians: function radians(degrees) {\n    return degrees * DEG_PER_RAD;\n  }\n});\n","// https://rwaldron.github.io/proposal-math-extensions/\nvar $export = require('./_export');\n\n$export($export.S, 'Math', { scale: require('./_math-scale') });\n","// https://gist.github.com/BrendanEich/4294d5c212a6d2254703\nvar $export = require('./_export');\n\n$export($export.S, 'Math', {\n  umulh: function umulh(u, v) {\n    var UINT16 = 0xffff;\n    var $u = +u;\n    var $v = +v;\n    var u0 = $u & UINT16;\n    var v0 = $v & UINT16;\n    var u1 = $u >>> 16;\n    var v1 = $v >>> 16;\n    var t = (u1 * v0 >>> 0) + (u0 * v0 >>> 16);\n    return u1 * v1 + (t >>> 16) + ((u0 * v1 >>> 0) + (t & UINT16) >>> 16);\n  }\n});\n","// http://jfbastien.github.io/papers/Math.signbit.html\nvar $export = require('./_export');\n\n$export($export.S, 'Math', { signbit: function signbit(x) {\n  // eslint-disable-next-line no-self-compare\n  return (x = +x) != x ? x : x == 0 ? 1 / x == Infinity : x > 0;\n} });\n","// https://github.com/tc39/proposal-promise-finally\n'use strict';\nvar $export = require('./_export');\nvar core = require('./_core');\nvar global = require('./_global');\nvar speciesConstructor = require('./_species-constructor');\nvar promiseResolve = require('./_promise-resolve');\n\n$export($export.P + $export.R, 'Promise', { 'finally': function (onFinally) {\n  var C = speciesConstructor(this, core.Promise || global.Promise);\n  var isFunction = typeof onFinally == 'function';\n  return this.then(\n    isFunction ? function (x) {\n      return promiseResolve(C, onFinally()).then(function () { return x; });\n    } : onFinally,\n    isFunction ? function (e) {\n      return promiseResolve(C, onFinally()).then(function () { throw e; });\n    } : onFinally\n  );\n} });\n","'use strict';\n// https://github.com/tc39/proposal-promise-try\nvar $export = require('./_export');\nvar newPromiseCapability = require('./_new-promise-capability');\nvar perform = require('./_perform');\n\n$export($export.S, 'Promise', { 'try': function (callbackfn) {\n  var promiseCapability = newPromiseCapability.f(this);\n  var result = perform(callbackfn);\n  (result.e ? promiseCapability.reject : promiseCapability.resolve)(result.v);\n  return promiseCapability.promise;\n} });\n","var Map = require('./es6.map');\nvar $export = require('./_export');\nvar shared = require('./_shared')('metadata');\nvar store = shared.store || (shared.store = new (require('./es6.weak-map'))());\n\nvar getOrCreateMetadataMap = function (target, targetKey, create) {\n  var targetMetadata = store.get(target);\n  if (!targetMetadata) {\n    if (!create) return undefined;\n    store.set(target, targetMetadata = new Map());\n  }\n  var keyMetadata = targetMetadata.get(targetKey);\n  if (!keyMetadata) {\n    if (!create) return undefined;\n    targetMetadata.set(targetKey, keyMetadata = new Map());\n  } return keyMetadata;\n};\nvar ordinaryHasOwnMetadata = function (MetadataKey, O, P) {\n  var metadataMap = getOrCreateMetadataMap(O, P, false);\n  return metadataMap === undefined ? false : metadataMap.has(MetadataKey);\n};\nvar ordinaryGetOwnMetadata = function (MetadataKey, O, P) {\n  var metadataMap = getOrCreateMetadataMap(O, P, false);\n  return metadataMap === undefined ? undefined : metadataMap.get(MetadataKey);\n};\nvar ordinaryDefineOwnMetadata = function (MetadataKey, MetadataValue, O, P) {\n  getOrCreateMetadataMap(O, P, true).set(MetadataKey, MetadataValue);\n};\nvar ordinaryOwnMetadataKeys = function (target, targetKey) {\n  var metadataMap = getOrCreateMetadataMap(target, targetKey, false);\n  var keys = [];\n  if (metadataMap) metadataMap.forEach(function (_, key) { keys.push(key); });\n  return keys;\n};\nvar toMetaKey = function (it) {\n  return it === undefined || typeof it == 'symbol' ? it : String(it);\n};\nvar exp = function (O) {\n  $export($export.S, 'Reflect', O);\n};\n\nmodule.exports = {\n  store: store,\n  map: getOrCreateMetadataMap,\n  has: ordinaryHasOwnMetadata,\n  get: ordinaryGetOwnMetadata,\n  set: ordinaryDefineOwnMetadata,\n  keys: ordinaryOwnMetadataKeys,\n  key: toMetaKey,\n  exp: exp\n};\n","var metadata = require('./_metadata');\nvar anObject = require('./_an-object');\nvar toMetaKey = metadata.key;\nvar ordinaryDefineOwnMetadata = metadata.set;\n\nmetadata.exp({ defineMetadata: function defineMetadata(metadataKey, metadataValue, target, targetKey) {\n  ordinaryDefineOwnMetadata(metadataKey, metadataValue, anObject(target), toMetaKey(targetKey));\n} });\n","var metadata = require('./_metadata');\nvar anObject = require('./_an-object');\nvar toMetaKey = metadata.key;\nvar getOrCreateMetadataMap = metadata.map;\nvar store = metadata.store;\n\nmetadata.exp({ deleteMetadata: function deleteMetadata(metadataKey, target /* , targetKey */) {\n  var targetKey = arguments.length < 3 ? undefined : toMetaKey(arguments[2]);\n  var metadataMap = getOrCreateMetadataMap(anObject(target), targetKey, false);\n  if (metadataMap === undefined || !metadataMap['delete'](metadataKey)) return false;\n  if (metadataMap.size) return true;\n  var targetMetadata = store.get(target);\n  targetMetadata['delete'](targetKey);\n  return !!targetMetadata.size || store['delete'](target);\n} });\n","var metadata = require('./_metadata');\nvar anObject = require('./_an-object');\nvar getPrototypeOf = require('./_object-gpo');\nvar ordinaryHasOwnMetadata = metadata.has;\nvar ordinaryGetOwnMetadata = metadata.get;\nvar toMetaKey = metadata.key;\n\nvar ordinaryGetMetadata = function (MetadataKey, O, P) {\n  var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);\n  if (hasOwn) return ordinaryGetOwnMetadata(MetadataKey, O, P);\n  var parent = getPrototypeOf(O);\n  return parent !== null ? ordinaryGetMetadata(MetadataKey, parent, P) : undefined;\n};\n\nmetadata.exp({ getMetadata: function getMetadata(metadataKey, target /* , targetKey */) {\n  return ordinaryGetMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));\n} });\n","var Set = require('./es6.set');\nvar from = require('./_array-from-iterable');\nvar metadata = require('./_metadata');\nvar anObject = require('./_an-object');\nvar getPrototypeOf = require('./_object-gpo');\nvar ordinaryOwnMetadataKeys = metadata.keys;\nvar toMetaKey = metadata.key;\n\nvar ordinaryMetadataKeys = function (O, P) {\n  var oKeys = ordinaryOwnMetadataKeys(O, P);\n  var parent = getPrototypeOf(O);\n  if (parent === null) return oKeys;\n  var pKeys = ordinaryMetadataKeys(parent, P);\n  return pKeys.length ? oKeys.length ? from(new Set(oKeys.concat(pKeys))) : pKeys : oKeys;\n};\n\nmetadata.exp({ getMetadataKeys: function getMetadataKeys(target /* , targetKey */) {\n  return ordinaryMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));\n} });\n","var metadata = require('./_metadata');\nvar anObject = require('./_an-object');\nvar ordinaryGetOwnMetadata = metadata.get;\nvar toMetaKey = metadata.key;\n\nmetadata.exp({ getOwnMetadata: function getOwnMetadata(metadataKey, target /* , targetKey */) {\n  return ordinaryGetOwnMetadata(metadataKey, anObject(target)\n    , arguments.length < 3 ? undefined : toMetaKey(arguments[2]));\n} });\n","var metadata = require('./_metadata');\nvar anObject = require('./_an-object');\nvar ordinaryOwnMetadataKeys = metadata.keys;\nvar toMetaKey = metadata.key;\n\nmetadata.exp({ getOwnMetadataKeys: function getOwnMetadataKeys(target /* , targetKey */) {\n  return ordinaryOwnMetadataKeys(anObject(target), arguments.length < 2 ? undefined : toMetaKey(arguments[1]));\n} });\n","var metadata = require('./_metadata');\nvar anObject = require('./_an-object');\nvar getPrototypeOf = require('./_object-gpo');\nvar ordinaryHasOwnMetadata = metadata.has;\nvar toMetaKey = metadata.key;\n\nvar ordinaryHasMetadata = function (MetadataKey, O, P) {\n  var hasOwn = ordinaryHasOwnMetadata(MetadataKey, O, P);\n  if (hasOwn) return true;\n  var parent = getPrototypeOf(O);\n  return parent !== null ? ordinaryHasMetadata(MetadataKey, parent, P) : false;\n};\n\nmetadata.exp({ hasMetadata: function hasMetadata(metadataKey, target /* , targetKey */) {\n  return ordinaryHasMetadata(metadataKey, anObject(target), arguments.length < 3 ? undefined : toMetaKey(arguments[2]));\n} });\n","var metadata = require('./_metadata');\nvar anObject = require('./_an-object');\nvar ordinaryHasOwnMetadata = metadata.has;\nvar toMetaKey = metadata.key;\n\nmetadata.exp({ hasOwnMetadata: function hasOwnMetadata(metadataKey, target /* , targetKey */) {\n  return ordinaryHasOwnMetadata(metadataKey, anObject(target)\n    , arguments.length < 3 ? undefined : toMetaKey(arguments[2]));\n} });\n","var $metadata = require('./_metadata');\nvar anObject = require('./_an-object');\nvar aFunction = require('./_a-function');\nvar toMetaKey = $metadata.key;\nvar ordinaryDefineOwnMetadata = $metadata.set;\n\n$metadata.exp({ metadata: function metadata(metadataKey, metadataValue) {\n  return function decorator(target, targetKey) {\n    ordinaryDefineOwnMetadata(\n      metadataKey, metadataValue,\n      (targetKey !== undefined ? anObject : aFunction)(target),\n      toMetaKey(targetKey)\n    );\n  };\n} });\n","// https://github.com/rwaldron/tc39-notes/blob/master/es6/2014-09/sept-25.md#510-globalasap-for-enqueuing-a-microtask\nvar $export = require('./_export');\nvar microtask = require('./_microtask')();\nvar process = require('./_global').process;\nvar isNode = require('./_cof')(process) == 'process';\n\n$export($export.G, {\n  asap: function asap(fn) {\n    var domain = isNode && process.domain;\n    microtask(domain ? domain.bind(fn) : fn);\n  }\n});\n","'use strict';\n// https://github.com/zenparsing/es-observable\nvar $export = require('./_export');\nvar global = require('./_global');\nvar core = require('./_core');\nvar microtask = require('./_microtask')();\nvar OBSERVABLE = require('./_wks')('observable');\nvar aFunction = require('./_a-function');\nvar anObject = require('./_an-object');\nvar anInstance = require('./_an-instance');\nvar redefineAll = require('./_redefine-all');\nvar hide = require('./_hide');\nvar forOf = require('./_for-of');\nvar RETURN = forOf.RETURN;\n\nvar getMethod = function (fn) {\n  return fn == null ? undefined : aFunction(fn);\n};\n\nvar cleanupSubscription = function (subscription) {\n  var cleanup = subscription._c;\n  if (cleanup) {\n    subscription._c = undefined;\n    cleanup();\n  }\n};\n\nvar subscriptionClosed = function (subscription) {\n  return subscription._o === undefined;\n};\n\nvar closeSubscription = function (subscription) {\n  if (!subscriptionClosed(subscription)) {\n    subscription._o = undefined;\n    cleanupSubscription(subscription);\n  }\n};\n\nvar Subscription = function (observer, subscriber) {\n  anObject(observer);\n  this._c = undefined;\n  this._o = observer;\n  observer = new SubscriptionObserver(this);\n  try {\n    var cleanup = subscriber(observer);\n    var subscription = cleanup;\n    if (cleanup != null) {\n      if (typeof cleanup.unsubscribe === 'function') cleanup = function () { subscription.unsubscribe(); };\n      else aFunction(cleanup);\n      this._c = cleanup;\n    }\n  } catch (e) {\n    observer.error(e);\n    return;\n  } if (subscriptionClosed(this)) cleanupSubscription(this);\n};\n\nSubscription.prototype = redefineAll({}, {\n  unsubscribe: function unsubscribe() { closeSubscription(this); }\n});\n\nvar SubscriptionObserver = function (subscription) {\n  this._s = subscription;\n};\n\nSubscriptionObserver.prototype = redefineAll({}, {\n  next: function next(value) {\n    var subscription = this._s;\n    if (!subscriptionClosed(subscription)) {\n      var observer = subscription._o;\n      try {\n        var m = getMethod(observer.next);\n        if (m) return m.call(observer, value);\n      } catch (e) {\n        try {\n          closeSubscription(subscription);\n        } finally {\n          throw e;\n        }\n      }\n    }\n  },\n  error: function error(value) {\n    var subscription = this._s;\n    if (subscriptionClosed(subscription)) throw value;\n    var observer = subscription._o;\n    subscription._o = undefined;\n    try {\n      var m = getMethod(observer.error);\n      if (!m) throw value;\n      value = m.call(observer, value);\n    } catch (e) {\n      try {\n        cleanupSubscription(subscription);\n      } finally {\n        throw e;\n      }\n    } cleanupSubscription(subscription);\n    return value;\n  },\n  complete: function complete(value) {\n    var subscription = this._s;\n    if (!subscriptionClosed(subscription)) {\n      var observer = subscription._o;\n      subscription._o = undefined;\n      try {\n        var m = getMethod(observer.complete);\n        value = m ? m.call(observer, value) : undefined;\n      } catch (e) {\n        try {\n          cleanupSubscription(subscription);\n        } finally {\n          throw e;\n        }\n      } cleanupSubscription(subscription);\n      return value;\n    }\n  }\n});\n\nvar $Observable = function Observable(subscriber) {\n  anInstance(this, $Observable, 'Observable', '_f')._f = aFunction(subscriber);\n};\n\nredefineAll($Observable.prototype, {\n  subscribe: function subscribe(observer) {\n    return new Subscription(observer, this._f);\n  },\n  forEach: function forEach(fn) {\n    var that = this;\n    return new (core.Promise || global.Promise)(function (resolve, reject) {\n      aFunction(fn);\n      var subscription = that.subscribe({\n        next: function (value) {\n          try {\n            return fn(value);\n          } catch (e) {\n            reject(e);\n            subscription.unsubscribe();\n          }\n        },\n        error: reject,\n        complete: resolve\n      });\n    });\n  }\n});\n\nredefineAll($Observable, {\n  from: function from(x) {\n    var C = typeof this === 'function' ? this : $Observable;\n    var method = getMethod(anObject(x)[OBSERVABLE]);\n    if (method) {\n      var observable = anObject(method.call(x));\n      return observable.constructor === C ? observable : new C(function (observer) {\n        return observable.subscribe(observer);\n      });\n    }\n    return new C(function (observer) {\n      var done = false;\n      microtask(function () {\n        if (!done) {\n          try {\n            if (forOf(x, false, function (it) {\n              observer.next(it);\n              if (done) return RETURN;\n            }) === RETURN) return;\n          } catch (e) {\n            if (done) throw e;\n            observer.error(e);\n            return;\n          } observer.complete();\n        }\n      });\n      return function () { done = true; };\n    });\n  },\n  of: function of() {\n    for (var i = 0, l = arguments.length, items = new Array(l); i < l;) items[i] = arguments[i++];\n    return new (typeof this === 'function' ? this : $Observable)(function (observer) {\n      var done = false;\n      microtask(function () {\n        if (!done) {\n          for (var j = 0; j < items.length; ++j) {\n            observer.next(items[j]);\n            if (done) return;\n          } observer.complete();\n        }\n      });\n      return function () { done = true; };\n    });\n  }\n});\n\nhide($Observable.prototype, OBSERVABLE, function () { return this; });\n\n$export($export.G, { Observable: $Observable });\n\nrequire('./_set-species')('Observable');\n","// ie9- setTimeout & setInterval additional parameters fix\nvar global = require('./_global');\nvar $export = require('./_export');\nvar userAgent = require('./_user-agent');\nvar slice = [].slice;\nvar MSIE = /MSIE .\\./.test(userAgent); // <- dirty ie9- check\nvar wrap = function (set) {\n  return function (fn, time /* , ...args */) {\n    var boundArgs = arguments.length > 2;\n    var args = boundArgs ? slice.call(arguments, 2) : false;\n    return set(boundArgs ? function () {\n      // eslint-disable-next-line no-new-func\n      (typeof fn == 'function' ? fn : Function(fn)).apply(this, args);\n    } : fn, time);\n  };\n};\n$export($export.G + $export.B + $export.F * MSIE, {\n  setTimeout: wrap(global.setTimeout),\n  setInterval: wrap(global.setInterval)\n});\n","var $export = require('./_export');\nvar $task = require('./_task');\n$export($export.G + $export.B, {\n  setImmediate: $task.set,\n  clearImmediate: $task.clear\n});\n","var $iterators = require('./es6.array.iterator');\nvar getKeys = require('./_object-keys');\nvar redefine = require('./_redefine');\nvar global = require('./_global');\nvar hide = require('./_hide');\nvar Iterators = require('./_iterators');\nvar wks = require('./_wks');\nvar ITERATOR = wks('iterator');\nvar TO_STRING_TAG = wks('toStringTag');\nvar ArrayValues = Iterators.Array;\n\nvar DOMIterables = {\n  CSSRuleList: true, // TODO: Not spec compliant, should be false.\n  CSSStyleDeclaration: false,\n  CSSValueList: false,\n  ClientRectList: false,\n  DOMRectList: false,\n  DOMStringList: false,\n  DOMTokenList: true,\n  DataTransferItemList: false,\n  FileList: false,\n  HTMLAllCollection: false,\n  HTMLCollection: false,\n  HTMLFormElement: false,\n  HTMLSelectElement: false,\n  MediaList: true, // TODO: Not spec compliant, should be false.\n  MimeTypeArray: false,\n  NamedNodeMap: false,\n  NodeList: true,\n  PaintRequestList: false,\n  Plugin: false,\n  PluginArray: false,\n  SVGLengthList: false,\n  SVGNumberList: false,\n  SVGPathSegList: false,\n  SVGPointList: false,\n  SVGStringList: false,\n  SVGTransformList: false,\n  SourceBufferList: false,\n  StyleSheetList: true, // TODO: Not spec compliant, should be false.\n  TextTrackCueList: false,\n  TextTrackList: false,\n  TouchList: false\n};\n\nfor (var collections = getKeys(DOMIterables), i = 0; i < collections.length; i++) {\n  var NAME = collections[i];\n  var explicit = DOMIterables[NAME];\n  var Collection = global[NAME];\n  var proto = Collection && Collection.prototype;\n  var key;\n  if (proto) {\n    if (!proto[ITERATOR]) hide(proto, ITERATOR, ArrayValues);\n    if (!proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);\n    Iterators[NAME] = ArrayValues;\n    if (explicit) for (key in $iterators) if (!proto[key]) redefine(proto, key, $iterators[key], true);\n  }\n}\n","require('./modules/es6.symbol');\nrequire('./modules/es6.object.create');\nrequire('./modules/es6.object.define-property');\nrequire('./modules/es6.object.define-properties');\nrequire('./modules/es6.object.get-own-property-descriptor');\nrequire('./modules/es6.object.get-prototype-of');\nrequire('./modules/es6.object.keys');\nrequire('./modules/es6.object.get-own-property-names');\nrequire('./modules/es6.object.freeze');\nrequire('./modules/es6.object.seal');\nrequire('./modules/es6.object.prevent-extensions');\nrequire('./modules/es6.object.is-frozen');\nrequire('./modules/es6.object.is-sealed');\nrequire('./modules/es6.object.is-extensible');\nrequire('./modules/es6.object.assign');\nrequire('./modules/es6.object.is');\nrequire('./modules/es6.object.set-prototype-of');\nrequire('./modules/es6.object.to-string');\nrequire('./modules/es6.function.bind');\nrequire('./modules/es6.function.name');\nrequire('./modules/es6.function.has-instance');\nrequire('./modules/es6.parse-int');\nrequire('./modules/es6.parse-float');\nrequire('./modules/es6.number.constructor');\nrequire('./modules/es6.number.to-fixed');\nrequire('./modules/es6.number.to-precision');\nrequire('./modules/es6.number.epsilon');\nrequire('./modules/es6.number.is-finite');\nrequire('./modules/es6.number.is-integer');\nrequire('./modules/es6.number.is-nan');\nrequire('./modules/es6.number.is-safe-integer');\nrequire('./modules/es6.number.max-safe-integer');\nrequire('./modules/es6.number.min-safe-integer');\nrequire('./modules/es6.number.parse-float');\nrequire('./modules/es6.number.parse-int');\nrequire('./modules/es6.math.acosh');\nrequire('./modules/es6.math.asinh');\nrequire('./modules/es6.math.atanh');\nrequire('./modules/es6.math.cbrt');\nrequire('./modules/es6.math.clz32');\nrequire('./modules/es6.math.cosh');\nrequire('./modules/es6.math.expm1');\nrequire('./modules/es6.math.fround');\nrequire('./modules/es6.math.hypot');\nrequire('./modules/es6.math.imul');\nrequire('./modules/es6.math.log10');\nrequire('./modules/es6.math.log1p');\nrequire('./modules/es6.math.log2');\nrequire('./modules/es6.math.sign');\nrequire('./modules/es6.math.sinh');\nrequire('./modules/es6.math.tanh');\nrequire('./modules/es6.math.trunc');\nrequire('./modules/es6.string.from-code-point');\nrequire('./modules/es6.string.raw');\nrequire('./modules/es6.string.trim');\nrequire('./modules/es6.string.iterator');\nrequire('./modules/es6.string.code-point-at');\nrequire('./modules/es6.string.ends-with');\nrequire('./modules/es6.string.includes');\nrequire('./modules/es6.string.repeat');\nrequire('./modules/es6.string.starts-with');\nrequire('./modules/es6.string.anchor');\nrequire('./modules/es6.string.big');\nrequire('./modules/es6.string.blink');\nrequire('./modules/es6.string.bold');\nrequire('./modules/es6.string.fixed');\nrequire('./modules/es6.string.fontcolor');\nrequire('./modules/es6.string.fontsize');\nrequire('./modules/es6.string.italics');\nrequire('./modules/es6.string.link');\nrequire('./modules/es6.string.small');\nrequire('./modules/es6.string.strike');\nrequire('./modules/es6.string.sub');\nrequire('./modules/es6.string.sup');\nrequire('./modules/es6.date.now');\nrequire('./modules/es6.date.to-json');\nrequire('./modules/es6.date.to-iso-string');\nrequire('./modules/es6.date.to-string');\nrequire('./modules/es6.date.to-primitive');\nrequire('./modules/es6.array.is-array');\nrequire('./modules/es6.array.from');\nrequire('./modules/es6.array.of');\nrequire('./modules/es6.array.join');\nrequire('./modules/es6.array.slice');\nrequire('./modules/es6.array.sort');\nrequire('./modules/es6.array.for-each');\nrequire('./modules/es6.array.map');\nrequire('./modules/es6.array.filter');\nrequire('./modules/es6.array.some');\nrequire('./modules/es6.array.every');\nrequire('./modules/es6.array.reduce');\nrequire('./modules/es6.array.reduce-right');\nrequire('./modules/es6.array.index-of');\nrequire('./modules/es6.array.last-index-of');\nrequire('./modules/es6.array.copy-within');\nrequire('./modules/es6.array.fill');\nrequire('./modules/es6.array.find');\nrequire('./modules/es6.array.find-index');\nrequire('./modules/es6.array.species');\nrequire('./modules/es6.array.iterator');\nrequire('./modules/es6.regexp.constructor');\nrequire('./modules/es6.regexp.exec');\nrequire('./modules/es6.regexp.to-string');\nrequire('./modules/es6.regexp.flags');\nrequire('./modules/es6.regexp.match');\nrequire('./modules/es6.regexp.replace');\nrequire('./modules/es6.regexp.search');\nrequire('./modules/es6.regexp.split');\nrequire('./modules/es6.promise');\nrequire('./modules/es6.map');\nrequire('./modules/es6.set');\nrequire('./modules/es6.weak-map');\nrequire('./modules/es6.weak-set');\nrequire('./modules/es6.typed.array-buffer');\nrequire('./modules/es6.typed.data-view');\nrequire('./modules/es6.typed.int8-array');\nrequire('./modules/es6.typed.uint8-array');\nrequire('./modules/es6.typed.uint8-clamped-array');\nrequire('./modules/es6.typed.int16-array');\nrequire('./modules/es6.typed.uint16-array');\nrequire('./modules/es6.typed.int32-array');\nrequire('./modules/es6.typed.uint32-array');\nrequire('./modules/es6.typed.float32-array');\nrequire('./modules/es6.typed.float64-array');\nrequire('./modules/es6.reflect.apply');\nrequire('./modules/es6.reflect.construct');\nrequire('./modules/es6.reflect.define-property');\nrequire('./modules/es6.reflect.delete-property');\nrequire('./modules/es6.reflect.enumerate');\nrequire('./modules/es6.reflect.get');\nrequire('./modules/es6.reflect.get-own-property-descriptor');\nrequire('./modules/es6.reflect.get-prototype-of');\nrequire('./modules/es6.reflect.has');\nrequire('./modules/es6.reflect.is-extensible');\nrequire('./modules/es6.reflect.own-keys');\nrequire('./modules/es6.reflect.prevent-extensions');\nrequire('./modules/es6.reflect.set');\nrequire('./modules/es6.reflect.set-prototype-of');\nrequire('./modules/es7.array.includes');\nrequire('./modules/es7.array.flat-map');\nrequire('./modules/es7.array.flatten');\nrequire('./modules/es7.string.at');\nrequire('./modules/es7.string.pad-start');\nrequire('./modules/es7.string.pad-end');\nrequire('./modules/es7.string.trim-left');\nrequire('./modules/es7.string.trim-right');\nrequire('./modules/es7.string.match-all');\nrequire('./modules/es7.symbol.async-iterator');\nrequire('./modules/es7.symbol.observable');\nrequire('./modules/es7.object.get-own-property-descriptors');\nrequire('./modules/es7.object.values');\nrequire('./modules/es7.object.entries');\nrequire('./modules/es7.object.define-getter');\nrequire('./modules/es7.object.define-setter');\nrequire('./modules/es7.object.lookup-getter');\nrequire('./modules/es7.object.lookup-setter');\nrequire('./modules/es7.map.to-json');\nrequire('./modules/es7.set.to-json');\nrequire('./modules/es7.map.of');\nrequire('./modules/es7.set.of');\nrequire('./modules/es7.weak-map.of');\nrequire('./modules/es7.weak-set.of');\nrequire('./modules/es7.map.from');\nrequire('./modules/es7.set.from');\nrequire('./modules/es7.weak-map.from');\nrequire('./modules/es7.weak-set.from');\nrequire('./modules/es7.global');\nrequire('./modules/es7.system.global');\nrequire('./modules/es7.error.is-error');\nrequire('./modules/es7.math.clamp');\nrequire('./modules/es7.math.deg-per-rad');\nrequire('./modules/es7.math.degrees');\nrequire('./modules/es7.math.fscale');\nrequire('./modules/es7.math.iaddh');\nrequire('./modules/es7.math.isubh');\nrequire('./modules/es7.math.imulh');\nrequire('./modules/es7.math.rad-per-deg');\nrequire('./modules/es7.math.radians');\nrequire('./modules/es7.math.scale');\nrequire('./modules/es7.math.umulh');\nrequire('./modules/es7.math.signbit');\nrequire('./modules/es7.promise.finally');\nrequire('./modules/es7.promise.try');\nrequire('./modules/es7.reflect.define-metadata');\nrequire('./modules/es7.reflect.delete-metadata');\nrequire('./modules/es7.reflect.get-metadata');\nrequire('./modules/es7.reflect.get-metadata-keys');\nrequire('./modules/es7.reflect.get-own-metadata');\nrequire('./modules/es7.reflect.get-own-metadata-keys');\nrequire('./modules/es7.reflect.has-metadata');\nrequire('./modules/es7.reflect.has-own-metadata');\nrequire('./modules/es7.reflect.metadata');\nrequire('./modules/es7.asap');\nrequire('./modules/es7.observable');\nrequire('./modules/web.timers');\nrequire('./modules/web.immediate');\nrequire('./modules/web.dom.iterable');\nmodule.exports = require('./modules/_core');\n","/**\n * Copyright (c) 2014, Facebook, Inc.\n * All rights reserved.\n *\n * This source code is licensed under the BSD-style license found in the\n * https://raw.github.com/facebook/regenerator/master/LICENSE file. An\n * additional grant of patent rights can be found in the PATENTS file in\n * the same directory.\n */\n\n!(function(global) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  var inModule = typeof module === \"object\";\n  var runtime = global.regeneratorRuntime;\n  if (runtime) {\n    if (inModule) {\n      // If regeneratorRuntime is defined globally and we're in a module,\n      // make the exports object identical to regeneratorRuntime.\n      module.exports = runtime;\n    }\n    // Don't bother evaluating the rest of this file if the runtime was\n    // already defined globally.\n    return;\n  }\n\n  // Define the runtime globally (as expected by generated code) as either\n  // module.exports (if we're in a module) or a new, empty object.\n  runtime = global.regeneratorRuntime = inModule ? module.exports : {};\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  runtime.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  runtime.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  runtime.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  runtime.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return Promise.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration. If the Promise is rejected, however, the\n          // result for this iteration will be rejected with the same\n          // reason. Note that rejections of yielded Promises are not\n          // thrown back into the generator function, as is the case\n          // when an awaited Promise is rejected. This difference in\n          // behavior between yield and await is important, because it\n          // allows the consumer to decide what to do with the yielded\n          // rejection (swallow it and continue, manually .throw it back\n          // into the generator, abandon iteration, whatever). With\n          // await, by contrast, there is no opportunity to examine the\n          // rejection reason outside the generator function, so the\n          // only option is to throw it from the await expression, and\n          // let the generator function handle the exception.\n          result.value = unwrapped;\n          resolve(result);\n        }, reject);\n      }\n    }\n\n    if (typeof global.process === \"object\" && global.process.domain) {\n      invoke = global.process.domain.bind(invoke);\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  runtime.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  runtime.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return runtime.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        if (delegate.iterator.return) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  runtime.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  runtime.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n})(\n  // Among the various tricks for obtaining a reference to the global\n  // object, this seems to be the most reliable technique that does not\n  // use indirect eval (which violates Content Security Policy).\n  typeof global === \"object\" ? global :\n  typeof window === \"object\" ? window :\n  typeof self === \"object\" ? self : this\n);\n","module.exports = function (regExp, replace) {\n  var replacer = replace === Object(replace) ? function (part) {\n    return replace[part];\n  } : replace;\n  return function (it) {\n    return String(it).replace(regExp, replacer);\n  };\n};\n","// https://github.com/benjamingr/RexExp.escape\nvar $export = require('./_export');\nvar $re = require('./_replacer')(/[\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n\n$export($export.S, 'RegExp', { escape: function escape(it) { return $re(it); } });\n","require('../../modules/core.regexp.escape');\nmodule.exports = require('../../modules/_core').RegExp.escape;\n","\"use strict\";\n\nrequire(\"core-js/shim\");\n\nrequire(\"regenerator-runtime/runtime\");\n\nrequire(\"core-js/fn/regexp/escape\");\n\nif (global._babelPolyfill) {\n  throw new Error(\"only one instance of babel-polyfill is allowed\");\n}\nglobal._babelPolyfill = true;\n\nvar DEFINE_PROPERTY = \"defineProperty\";\nfunction define(O, key, value) {\n  O[key] || Object[DEFINE_PROPERTY](O, key, {\n    writable: true,\n    configurable: true,\n    value: value\n  });\n}\n\ndefine(String.prototype, \"padLeft\", \"\".padStart);\ndefine(String.prototype, \"padRight\", \"\".padEnd);\n\n\"pop,reverse,shift,keys,values,entries,indexOf,every,some,forEach,map,filter,find,findIndex,includes,join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill\".split(\",\").forEach(function (key) {\n  [][key] && define(Array, key, Function.call.bind([][key]));\n});","import ndaarray from 'ndarray';\nimport { Tensor, InferenceSession } from 'onnxjs'\nimport \"babel-polyfill\";\n\nconst main = async () => {\n  const session = new InferenceSession({ backendHint: 'webgl' })\n  const modelFile = 'https://aidy1991.github.io/yolov3-onnxjs/yolov2-tiny.onnx';\n  console.log('before loadModel')\n  await session.loadModel(modelFile);\n  console.log('after loadModel')\n\n  const video = document.getElementById(\"video\");\n\n  const media = navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: false,\n  });\n\n  media.then((stream) => {\n      video.srcObject = stream;\n  });\n\n  video.addEventListener(\"timeupdate\", () => {\n    const canvas = document.getElementById(\"canvas\");\n    const ctx = canvas.getContext(\"2d\");\n    ctx.drawImage(video, 0, 0, 640, 480);\n    runModel(session, ctx);\n  }, true);\n}\n\nconst runModel = async (session, ctx) => {\n  const imageData = ctx.getImageData(0, 0, ctx.canvas.width, ctx.canvas.height);\n  const { data, width, height } = imageData;\n  console.log(data, width, height);\n\n  // data processing\n  const dataTensor = ndarray(new Float32Array(data), [width, height, 4]);\n  const dataProcessedTensor = ndarray(new Float32Array(width * height * 3), [1, 3, width, height]);\n  ops.assign(dataProcessedTensor.pick(0, 0, null, null), dataTensor.pick(null, null, 0));\n  ops.assign(dataProcessedTensor.pick(0, 1, null, null), dataTensor.pick(null, null, 1));\n  ops.assign(dataProcessedTensor.pick(0, 2, null, null), dataTensor.pick(null, null, 2));\n  const tensor = new Tensor(new Float32Array(width* height* 3), 'float32', [1, 3, width, height]);\n  tensor.data.set(dataProcessedTensor.data);\n\n  const outputData = await session.run([inputTensor])\n  console.log(outputData);\n}\n\nwindow.onload = function() {\n  main();\n};\n","var OVERLAY_ID = '__parcel__error__overlay__';\n\nvar OldModule = module.bundle.Module;\n\nfunction Module(moduleName) {\n  OldModule.call(this, moduleName);\n  this.hot = {\n    data: module.bundle.hotData,\n    _acceptCallbacks: [],\n    _disposeCallbacks: [],\n    accept: function (fn) {\n      this._acceptCallbacks.push(fn || function () {});\n    },\n    dispose: function (fn) {\n      this._disposeCallbacks.push(fn);\n    }\n  };\n\n  module.bundle.hotData = null;\n}\n\nmodule.bundle.Module = Module;\nvar checkedAssets, assetsToAccept;\n\nvar parent = module.bundle.parent;\nif ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {\n  var hostname = process.env.HMR_HOSTNAME || location.hostname;\n  var protocol = location.protocol === 'https:' ? 'wss' : 'ws';\n  var ws = new WebSocket(protocol + '://' + hostname + ':' + process.env.HMR_PORT + '/');\n  ws.onmessage = function(event) {\n    checkedAssets = {};\n    assetsToAccept = [];\n\n    var data = JSON.parse(event.data);\n\n    if (data.type === 'update') {\n      var handled = false;\n      data.assets.forEach(function(asset) {\n        if (!asset.isNew) {\n          var didAccept = hmrAcceptCheck(global.parcelRequire, asset.id);\n          if (didAccept) {\n            handled = true;\n          }\n        }\n      });\n\n      // Enable HMR for CSS by default.\n      handled = handled || data.assets.every(function(asset) {\n        return asset.type === 'css' && asset.generated.js;\n      });\n\n      if (handled) {\n        console.clear();\n\n        data.assets.forEach(function (asset) {\n          hmrApply(global.parcelRequire, asset);\n        });\n\n        assetsToAccept.forEach(function (v) {\n          hmrAcceptRun(v[0], v[1]);\n        });\n      } else if (location.reload) { // `location` global exists in a web worker context but lacks `.reload()` function.\n        location.reload();\n      }\n    }\n\n    if (data.type === 'reload') {\n      ws.close();\n      ws.onclose = function () {\n        location.reload();\n      }\n    }\n\n    if (data.type === 'error-resolved') {\n      console.log('[parcel] ✨ Error resolved');\n\n      removeErrorOverlay();\n    }\n\n    if (data.type === 'error') {\n      console.error('[parcel] 🚨  ' + data.error.message + '\\n' + data.error.stack);\n\n      removeErrorOverlay();\n\n      var overlay = createErrorOverlay(data);\n      document.body.appendChild(overlay);\n    }\n  };\n}\n\nfunction removeErrorOverlay() {\n  var overlay = document.getElementById(OVERLAY_ID);\n  if (overlay) {\n    overlay.remove();\n  }\n}\n\nfunction createErrorOverlay(data) {\n  var overlay = document.createElement('div');\n  overlay.id = OVERLAY_ID;\n\n  // html encode message and stack trace\n  var message = document.createElement('div');\n  var stackTrace = document.createElement('pre');\n  message.innerText = data.error.message;\n  stackTrace.innerText = data.error.stack;\n\n  overlay.innerHTML = (\n    '<div style=\"background: black; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; opacity: 0.85; font-family: Menlo, Consolas, monospace; z-index: 9999;\">' +\n      '<span style=\"background: red; padding: 2px 4px; border-radius: 2px;\">ERROR</span>' +\n      '<span style=\"top: 2px; margin-left: 5px; position: relative;\">🚨</span>' +\n      '<div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">' + message.innerHTML + '</div>' +\n      '<pre>' + stackTrace.innerHTML + '</pre>' +\n    '</div>'\n  );\n\n  return overlay;\n\n}\n\nfunction getParents(bundle, id) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return [];\n  }\n\n  var parents = [];\n  var k, d, dep;\n\n  for (k in modules) {\n    for (d in modules[k][1]) {\n      dep = modules[k][1][d];\n      if (dep === id || (Array.isArray(dep) && dep[dep.length - 1] === id)) {\n        parents.push(k);\n      }\n    }\n  }\n\n  if (bundle.parent) {\n    parents = parents.concat(getParents(bundle.parent, id));\n  }\n\n  return parents;\n}\n\nfunction hmrApply(bundle, asset) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n\n  if (modules[asset.id] || !bundle.parent) {\n    var fn = new Function('require', 'module', 'exports', asset.generated.js);\n    asset.isNew = !modules[asset.id];\n    modules[asset.id] = [fn, asset.deps];\n  } else if (bundle.parent) {\n    hmrApply(bundle.parent, asset);\n  }\n}\n\nfunction hmrAcceptCheck(bundle, id) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n\n  if (!modules[id] && bundle.parent) {\n    return hmrAcceptCheck(bundle.parent, id);\n  }\n\n  if (checkedAssets[id]) {\n    return;\n  }\n  checkedAssets[id] = true;\n\n  var cached = bundle.cache[id];\n\n  assetsToAccept.push([bundle, id]);\n\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    return true;\n  }\n\n  return getParents(global.parcelRequire, id).some(function (id) {\n    return hmrAcceptCheck(global.parcelRequire, id)\n  });\n}\n\nfunction hmrAcceptRun(bundle, id) {\n  var cached = bundle.cache[id];\n  bundle.hotData = {};\n  if (cached) {\n    cached.hot.data = bundle.hotData;\n  }\n\n  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {\n    cached.hot._disposeCallbacks.forEach(function (cb) {\n      cb(bundle.hotData);\n    });\n  }\n\n  delete bundle.cache[id];\n  bundle(id);\n\n  cached = bundle.cache[id];\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    cached.hot._acceptCallbacks.forEach(function (cb) {\n      cb();\n    });\n    return true;\n  }\n}\n"]}